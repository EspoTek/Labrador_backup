
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00802000  00002b76  00002c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000db0  008020b6  008020b6  00002cc2  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002cc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000500  00000000  00000000  00002d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b402  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ddb  00000000  00000000  0000e63a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009524  00000000  00000000  00010415  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000abc  00000000  00000000  0001993c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fc11  00000000  00000000  0001a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023e4  00000000  00000000  0004a009  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  0004c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bdbf  00000000  00000000  0004c810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	bd c7       	rjmp	.+3962   	; 0xf94 <__vector_6>
      1a:	00 00       	nop
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
      1e:	00 00       	nop
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_24>
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9b c3       	rjmp	.+1846   	; 0x854 <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	74 c7       	rjmp	.+3816   	; 0x1036 <__vector_83>
     14e:	00 00       	nop
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 df 13 	jmp	0x27be	; 0x27be <__vector_125>
     1f8:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__vector_126>
     1fc:	d2 0a       	sbc	r13, r18
     1fe:	d6 0a       	sbc	r13, r22
     200:	12 0b       	sbc	r17, r18
     202:	4e 0b       	sbc	r20, r30
     204:	57 0b       	sbc	r21, r23
     206:	5c 0b       	sbc	r21, r28
     208:	a0 0b       	sbc	r26, r16
     20a:	a5 0b       	sbc	r26, r21
     20c:	02 0b       	sbc	r16, r18
     20e:	04 0b       	sbc	r16, r20
     210:	06 0b       	sbc	r16, r22
     212:	08 0b       	sbc	r16, r24
     214:	0a 0b       	sbc	r16, r26
     216:	0c 0b       	sbc	r16, r28
     218:	0e 0b       	sbc	r16, r30
     21a:	10 0b       	sbc	r17, r16
     21c:	3e 0b       	sbc	r19, r30
     21e:	40 0b       	sbc	r20, r16
     220:	42 0b       	sbc	r20, r18
     222:	44 0b       	sbc	r20, r20
     224:	46 0b       	sbc	r20, r22
     226:	48 0b       	sbc	r20, r24
     228:	4a 0b       	sbc	r20, r26
     22a:	4c 0b       	sbc	r20, r28
     22c:	68 0b       	sbc	r22, r24
     22e:	70 0b       	sbc	r23, r16
     230:	78 0b       	sbc	r23, r24
     232:	83 0b       	sbc	r24, r19
     234:	85 0b       	sbc	r24, r21
     236:	87 0b       	sbc	r24, r23
     238:	8f 0b       	sbc	r24, r31
     23a:	97 0b       	sbc	r25, r23
     23c:	1d 0f       	add	r17, r29
     23e:	20 0f       	add	r18, r16
     240:	23 0f       	add	r18, r19
     242:	26 0f       	add	r18, r22
     244:	29 0f       	add	r18, r25
     246:	2c 0f       	add	r18, r28
     248:	2f 0f       	add	r18, r31

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	e6 e7       	ldi	r30, 0x76	; 118
     25e:	fb e2       	ldi	r31, 0x2B	; 43
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a6 3b       	cpi	r26, 0xB6	; 182
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	a6 eb       	ldi	r26, 0xB6	; 182
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a6 36       	cpi	r26, 0x66	; 102
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	c0 d1       	rcall	.+896    	; 0x5fe <main>
     27e:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	99 d2       	rcall	.+1330   	; 0x7c8 <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <tiny_calibration_first_sof>:
     2f4:	e0 e7       	ldi	r30, 0x70	; 112
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	85 81       	ldd	r24, Z+5	; 0x05
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	85 83       	std	Z+5, r24	; 0x05
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	fa e0       	ldi	r31, 0x0A	; 10
     302:	80 ec       	ldi	r24, 0xC0	; 192
     304:	9d e5       	ldi	r25, 0x5D	; 93
     306:	86 a3       	std	Z+38, r24	; 0x26
     308:	97 a3       	std	Z+39, r25	; 0x27
     30a:	80 ee       	ldi	r24, 0xE0	; 224
     30c:	9e e2       	ldi	r25, 0x2E	; 46
     30e:	80 a3       	std	Z+32, r24	; 0x20
     310:	91 a3       	std	Z+33, r25	; 0x21
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
     316:	08 95       	ret

00000318 <tiny_calibration_maintain>:
     318:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     31c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     320:	81 3e       	cpi	r24, 0xE1	; 225
     322:	2e e2       	ldi	r18, 0x2E	; 46
     324:	92 07       	cpc	r25, r18
     326:	20 f0       	brcs	.+8      	; 0x330 <tiny_calibration_maintain+0x18>
     328:	20 91 6a 22 	lds	r18, 0x226A	; 0x80226a <cali_value_negative_gradient>
     32c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     330:	80 3e       	cpi	r24, 0xE0	; 224
     332:	2e e2       	ldi	r18, 0x2E	; 46
     334:	92 07       	cpc	r25, r18
     336:	20 f4       	brcc	.+8      	; 0x340 <tiny_calibration_maintain+0x28>
     338:	20 91 67 22 	lds	r18, 0x2267	; 0x802267 <cali_value_positive_gradient>
     33c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     340:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <warmup>
     344:	22 23       	and	r18, r18
     346:	31 f0       	breq	.+12     	; 0x354 <tiny_calibration_maintain+0x3c>
     348:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <warmup>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <warmup>
     352:	08 95       	ret
     354:	88 5f       	subi	r24, 0xF8	; 248
     356:	9a 42       	sbci	r25, 0x2A	; 42
     358:	81 3d       	cpi	r24, 0xD1	; 209
     35a:	97 40       	sbci	r25, 0x07	; 7
     35c:	c0 f0       	brcs	.+48     	; 0x38e <tiny_calibration_maintain+0x76>
     35e:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <__data_end>
     362:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <outOfRange>
     366:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <outOfRange+0x1>
     36a:	a0 91 b9 20 	lds	r26, 0x20B9	; 0x8020b9 <outOfRange+0x2>
     36e:	b0 91 ba 20 	lds	r27, 0x20BA	; 0x8020ba <outOfRange+0x3>
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	a1 1d       	adc	r26, r1
     376:	b1 1d       	adc	r27, r1
     378:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <outOfRange>
     37c:	90 93 b8 20 	sts	0x20B8, r25	; 0x8020b8 <outOfRange+0x1>
     380:	a0 93 b9 20 	sts	0x20B9, r26	; 0x8020b9 <outOfRange+0x2>
     384:	b0 93 ba 20 	sts	0x20BA, r27	; 0x8020ba <outOfRange+0x3>
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <warmup>
     38e:	08 95       	ret

00000390 <tiny_calibration_safe_add>:
     390:	00 97       	sbiw	r24, 0x00	; 0
     392:	09 f4       	brne	.+2      	; 0x396 <tiny_calibration_safe_add+0x6>
     394:	66 c0       	rjmp	.+204    	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
     396:	0c f0       	brlt	.+2      	; 0x39a <tiny_calibration_safe_add+0xa>
     398:	9c 01       	movw	r18, r24
     39a:	99 23       	and	r25, r25
     39c:	34 f4       	brge	.+12     	; 0x3aa <tiny_calibration_safe_add+0x1a>
     39e:	22 27       	eor	r18, r18
     3a0:	33 27       	eor	r19, r19
     3a2:	28 1b       	sub	r18, r24
     3a4:	39 0b       	sbc	r19, r25
     3a6:	51 e0       	ldi	r21, 0x01	; 1
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <tiny_calibration_safe_add+0x1c>
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	e8 e6       	ldi	r30, 0x68	; 104
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	83 81       	ldd	r24, Z+3	; 0x03
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     3b8:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     3bc:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     3c0:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     3c4:	96 95       	lsr	r25
     3c6:	98 2f       	mov	r25, r24
     3c8:	88 27       	eor	r24, r24
     3ca:	97 95       	ror	r25
     3cc:	87 95       	ror	r24
     3ce:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     3d2:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     3d6:	42 81       	ldd	r20, Z+2	; 0x02
     3d8:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     3dc:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     3e0:	84 0f       	add	r24, r20
     3e2:	91 1d       	adc	r25, r1
     3e4:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     3e8:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     3ec:	00 00       	nop
     3ee:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     3f2:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     3f6:	82 17       	cp	r24, r18
     3f8:	93 07       	cpc	r25, r19
     3fa:	28 f4       	brcc	.+10     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     3fc:	10 92 68 22 	sts	0x2268, r1	; 0x802268 <calTemp>
     400:	10 92 69 22 	sts	0x2269, r1	; 0x802269 <calTemp+0x1>
     404:	08 95       	ret
     406:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     40a:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	81 15       	cp	r24, r1
     414:	90 42       	sbci	r25, 0x20	; 32
     416:	38 f0       	brcs	.+14     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	9f e1       	ldi	r25, 0x1F	; 31
     41c:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     420:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     424:	08 95       	ret
     426:	55 23       	and	r21, r21
     428:	59 f0       	breq	.+22     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     42a:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     42e:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     432:	82 1b       	sub	r24, r18
     434:	93 0b       	sbc	r25, r19
     436:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     43a:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
     440:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     444:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     448:	28 0f       	add	r18, r24
     44a:	39 1f       	adc	r19, r25
     44c:	20 93 68 22 	sts	0x2268, r18	; 0x802268 <calTemp>
     450:	30 93 69 22 	sts	0x2269, r19	; 0x802269 <calTemp+0x1>
     454:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     458:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     45c:	8f 77       	andi	r24, 0x7F	; 127
     45e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     462:	08 95       	ret

00000464 <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     468:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     46c:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     470:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <last_val>
     474:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <last_val+0x1>
     478:	9e 01       	movw	r18, r28
     47a:	28 1b       	sub	r18, r24
     47c:	39 0b       	sbc	r19, r25
     47e:	20 93 6b 22 	sts	0x226B, r18	; 0x80226b <gradient>
     482:	30 93 6c 22 	sts	0x226C, r19	; 0x80226c <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     486:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <__data_end>
     48a:	81 11       	cpse	r24, r1
     48c:	4d c0       	rjmp	.+154    	; 0x528 <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     48e:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     492:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     496:	8e 3c       	cpi	r24, 0xCE	; 206
     498:	9f 4f       	sbci	r25, 0xFF	; 255
     49a:	e4 f4       	brge	.+56     	; 0x4d4 <tiny_calibration_find_values+0x70>
     49c:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     4a0:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     4a4:	8b 36       	cpi	r24, 0x6B	; 107
     4a6:	9f 4f       	sbci	r25, 0xFF	; 255
     4a8:	ac f0       	brlt	.+42     	; 0x4d4 <tiny_calibration_find_values+0x70>
			if(inarow){
     4aa:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     4ae:	88 23       	and	r24, r24
     4b0:	31 f0       	breq	.+12     	; 0x4be <tiny_calibration_find_values+0x5a>
				inarow--;
     4b2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     4b6:	81 50       	subi	r24, 0x01	; 1
     4b8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     4bc:	35 c0       	rjmp	.+106    	; 0x528 <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     4be:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4c2:	80 93 6a 22 	sts	0x226A, r24	; 0x80226a <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <__data_end>
				inarow = NUM_INAROW;
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     4d2:	2a c0       	rjmp	.+84     	; 0x528 <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     4d4:	8c e0       	ldi	r24, 0x0C	; 12
     4d6:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			calChange = gradient < -150 ? 1 : -1;
     4da:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     4de:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     4e2:	8a 36       	cpi	r24, 0x6A	; 106
     4e4:	9f 4f       	sbci	r25, 0xFF	; 255
     4e6:	1c f0       	brlt	.+6      	; 0x4ee <tiny_calibration_find_values+0x8a>
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	9f ef       	ldi	r25, 0xFF	; 255
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <tiny_calibration_find_values+0x8e>
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	80 93 65 22 	sts	0x2265, r24	; 0x802265 <calChange>
     4f6:	90 93 66 22 	sts	0x2266, r25	; 0x802266 <calChange+0x1>
			calChange -= gradient / 48;
     4fa:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     4fe:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     502:	20 91 65 22 	lds	r18, 0x2265	; 0x802265 <calChange>
     506:	30 91 66 22 	lds	r19, 0x2266	; 0x802266 <calChange+0x1>
     50a:	60 e3       	ldi	r22, 0x30	; 48
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__divmodhi4>
     512:	26 1b       	sub	r18, r22
     514:	37 0b       	sbc	r19, r23
     516:	20 93 65 22 	sts	0x2265, r18	; 0x802265 <calChange>
     51a:	30 93 66 22 	sts	0x2266, r19	; 0x802266 <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     51e:	80 91 65 22 	lds	r24, 0x2265	; 0x802265 <calChange>
     522:	90 91 66 22 	lds	r25, 0x2266	; 0x802266 <calChange+0x1>
     526:	34 df       	rcall	.-408    	; 0x390 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     528:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <__data_end>
     52c:	81 30       	cpi	r24, 0x01	; 1
     52e:	29 f5       	brne	.+74     	; 0x57a <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     530:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     534:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     538:	c3 97       	sbiw	r24, 0x33	; 51
     53a:	94 f0       	brlt	.+36     	; 0x560 <tiny_calibration_find_values+0xfc>
			if(inarow){
     53c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     540:	88 23       	and	r24, r24
     542:	31 f0       	breq	.+12     	; 0x550 <tiny_calibration_find_values+0xec>
				inarow--;
     544:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     548:	81 50       	subi	r24, 0x01	; 1
     54a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     54e:	15 c0       	rjmp	.+42     	; 0x57a <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     550:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     554:	80 93 67 22 	sts	0x2267, r24	; 0x802267 <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <__data_end>
     55e:	0d c0       	rjmp	.+26     	; 0x57a <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     560:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     564:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     568:	87 39       	cpi	r24, 0x97	; 151
     56a:	91 05       	cpc	r25, r1
     56c:	1c f4       	brge	.+6      	; 0x574 <tiny_calibration_find_values+0x110>
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	02 c0       	rjmp	.+4      	; 0x578 <tiny_calibration_find_values+0x114>
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	9f ef       	ldi	r25, 0xFF	; 255
     578:	0b df       	rcall	.-490    	; 0x390 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     57a:	c0 93 01 20 	sts	0x2001, r28	; 0x802001 <last_val>
     57e:	d0 93 02 20 	sts	0x2002, r29	; 0x802002 <last_val+0x1>
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     588:	e0 e8       	ldi	r30, 0x80	; 128
     58a:	f6 e0       	ldi	r31, 0x06	; 6
     58c:	8f e0       	ldi	r24, 0x0F	; 15
     58e:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	84 83       	std	Z+4, r24	; 0x04
     594:	08 95       	ret

00000596 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     596:	08 95       	ret

00000598 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, iso_callback);
     598:	40 91 c2 20 	lds	r20, 0x20C2	; 0x8020c2 <usb_state>
     59c:	27 e7       	ldi	r18, 0x77	; 119
     59e:	31 e0       	ldi	r19, 0x01	; 1
     5a0:	42 9f       	mul	r20, r18
     5a2:	c0 01       	movw	r24, r0
     5a4:	43 9f       	mul	r20, r19
     5a6:	90 0d       	add	r25, r0
     5a8:	11 24       	eor	r1, r1
     5aa:	4c ec       	ldi	r20, 0xCC	; 204
     5ac:	52 e0       	ldi	r21, 0x02	; 2
     5ae:	6a ef       	ldi	r22, 0xFA	; 250
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	8e 57       	subi	r24, 0x7E	; 126
     5b4:	99 4d       	sbci	r25, 0xD9	; 217
     5b6:	67 c6       	rjmp	.+3278   	; 0x1286 <udi_vendor_iso_in_run>
     5b8:	08 95       	ret

000005ba <iso_callback2>:
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, iso_callback2);
     5ba:	40 91 c2 20 	lds	r20, 0x20C2	; 0x8020c2 <usb_state>
     5be:	27 e7       	ldi	r18, 0x77	; 119
     5c0:	31 e0       	ldi	r19, 0x01	; 1
     5c2:	42 9f       	mul	r20, r18
     5c4:	c0 01       	movw	r24, r0
     5c6:	43 9f       	mul	r20, r19
     5c8:	90 0d       	add	r25, r0
     5ca:	11 24       	eor	r1, r1
     5cc:	4d ed       	ldi	r20, 0xDD	; 221
     5ce:	52 e0       	ldi	r21, 0x02	; 2
     5d0:	6a ef       	ldi	r22, 0xFA	; 250
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	84 58       	subi	r24, 0x84	; 132
     5d6:	98 4d       	sbci	r25, 0xD8	; 216
     5d8:	62 c6       	rjmp	.+3268   	; 0x129e <udi_vendor_iso_in_run2>
     5da:	08 95       	ret

000005dc <iso_callback3>:
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, iso_callback3);
     5dc:	40 91 c2 20 	lds	r20, 0x20C2	; 0x8020c2 <usb_state>
     5e0:	27 e7       	ldi	r18, 0x77	; 119
     5e2:	31 e0       	ldi	r19, 0x01	; 1
     5e4:	42 9f       	mul	r20, r18
     5e6:	c0 01       	movw	r24, r0
     5e8:	43 9f       	mul	r20, r19
     5ea:	90 0d       	add	r25, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	4e ee       	ldi	r20, 0xEE	; 238
     5f0:	52 e0       	ldi	r21, 0x02	; 2
     5f2:	6a ef       	ldi	r22, 0xFA	; 250
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	8a 58       	subi	r24, 0x8A	; 138
     5f8:	97 4d       	sbci	r25, 0xD7	; 215
     5fa:	5d c6       	rjmp	.+3258   	; 0x12b6 <udi_vendor_iso_in_run3>
     5fc:	08 95       	ret

000005fe <main>:
volatile unsigned short cntCntCnt = 0;
#define DEBUG_DIVISION 127
volatile unsigned char debug_divider = 0;

int main(void){
	irq_initialize_vectors();
     5fe:	87 e0       	ldi	r24, 0x07	; 7
     600:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     604:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     606:	3e de       	rcall	.-900    	; 0x284 <tiny_calibration_init>
		
	board_init();
     608:	c6 df       	rcall	.-116    	; 0x596 <board_init>
	udc_start();
     60a:	4c d7       	rcall	.+3736   	; 0x14a4 <udc_start>
	tiny_dac_setup();
     60c:	36 d1       	rcall	.+620    	; 0x87a <tiny_dac_setup>
	tiny_dma_setup();
     60e:	59 d1       	rcall	.+690    	; 0x8c2 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	e2 d0       	rcall	.+452    	; 0x7da <tiny_adc_setup>
	tiny_adc_pid_setup();
     616:	ce d0       	rcall	.+412    	; 0x7b4 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     618:	8c e0       	ldi	r24, 0x0C	; 12
     61a:	c1 d0       	rcall	.+386    	; 0x79e <tiny_adc_ch1setup>
	tiny_timer_setup();
     61c:	ca d4       	rcall	.+2452   	; 0xfb2 <tiny_timer_setup>
	tiny_uart_setup();
     61e:	85 d5       	rcall	.+2826   	; 0x112a <tiny_uart_setup>
	tiny_spi_setup();
     620:	9c d5       	rcall	.+2872   	; 0x115a <tiny_spi_setup>
	tiny_dig_setup();
     622:	b2 df       	rcall	.-156    	; 0x588 <tiny_dig_setup>
     624:	80 91 6e 22 	lds	r24, 0x226E	; 0x80226e <debug_counter>
     628:	90 91 6f 22 	lds	r25, 0x226F	; 0x80226f <debug_counter+0x1>
     62c:	a0 91 70 22 	lds	r26, 0x2270	; 0x802270 <debug_counter+0x2>
     630:	b0 91 71 22 	lds	r27, 0x2271	; 0x802271 <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	21 ee       	ldi	r18, 0xE1	; 225
     63e:	92 07       	cpc	r25, r18
     640:	25 ef       	ldi	r18, 0xF5	; 245
     642:	a2 07       	cpc	r26, r18
     644:	25 e0       	ldi	r18, 0x05	; 5
     646:	b2 07       	cpc	r27, r18
     648:	18 f0       	brcs	.+6      	; 0x650 <main+0x52>
			debug_counter = 0;
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     66c:	e3 cf       	rjmp	.-58     	; 0x634 <main+0x36>

0000066e <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     66e:	08 95       	ret

00000670 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     670:	08 95       	ret

00000672 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	cli();
     672:	f8 94       	cli
	if(firstFrame){
     674:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <firstFrame>
     678:	88 23       	and	r24, r24
     67a:	41 f0       	breq	.+16     	; 0x68c <main_sof_action+0x1a>
		tiny_calibration_first_sof();
     67c:	3b de       	rcall	.-906    	; 0x2f4 <tiny_calibration_first_sof>
		firstFrame = 0;
     67e:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <firstFrame>
		tcinit = 1;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <tcinit>
		sei();
     688:	78 94       	sei
		return;
     68a:	08 95       	ret
	}
	else{
		if(tcinit){
     68c:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <tcinit>
     690:	88 23       	and	r24, r24
     692:	b1 f1       	breq	.+108    	; 0x700 <main_sof_action+0x8e>
			if(calibration_values_found == 0x03) tiny_calibration_maintain(); else tiny_calibration_find_values();
     694:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <__data_end>
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	11 f4       	brne	.+4      	; 0x6a0 <main_sof_action+0x2e>
     69c:	3d de       	rcall	.-902    	; 0x318 <tiny_calibration_maintain>
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <main_sof_action+0x30>
     6a0:	e1 de       	rcall	.-574    	; 0x464 <tiny_calibration_find_values>
			if(debug_divider == DEBUG_DIVISION){
     6a2:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <debug_divider>
     6a6:	8f 37       	cpi	r24, 0x7F	; 127
     6a8:	31 f5       	brne	.+76     	; 0x6f6 <main_sof_action+0x84>
				debug_divider = 0;
     6aa:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <debug_divider>
				cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     6ae:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <cntCntCnt>
     6b2:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <cntCntCnt+0x1>
     6b6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     6ba:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	e2 5a       	subi	r30, 0xA2	; 162
     6c4:	f3 4d       	sbci	r31, 0xD3	; 211
     6c6:	80 83       	st	Z, r24
     6c8:	91 83       	std	Z+1, r25	; 0x01
				if(cntCntCnt == (CNT_CNT_MAX - 1)){
     6ca:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <cntCntCnt>
     6ce:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <cntCntCnt+0x1>
     6d2:	8f 3f       	cpi	r24, 0xFF	; 255
     6d4:	91 05       	cpc	r25, r1
     6d6:	29 f4       	brne	.+10     	; 0x6e2 <main_sof_action+0x70>
					cntCntCnt = 0;
     6d8:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <cntCntCnt>
     6dc:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <cntCntCnt+0x1>
     6e0:	0f c0       	rjmp	.+30     	; 0x700 <main_sof_action+0x8e>
				}
				else cntCntCnt++;
     6e2:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <cntCntCnt>
     6e6:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <cntCntCnt+0x1>
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <cntCntCnt>
     6f0:	90 93 bd 20 	sts	0x20BD, r25	; 0x8020bd <cntCntCnt+0x1>
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <main_sof_action+0x8e>
			}
			else debug_divider++;
     6f6:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <debug_divider>
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <debug_divider>
		}
	}
	
	if(debugOnNextEnd){
     700:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <debugOnNextEnd>
     704:	88 23       	and	r24, r24
     706:	51 f0       	breq	.+20     	; 0x71c <main_sof_action+0xaa>
		currentTrfcnt = DMA.CH0.TRFCNT;
     708:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     70c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     710:	80 93 5e 2e 	sts	0x2E5E, r24	; 0x802e5e <currentTrfcnt>
     714:	90 93 5f 2e 	sts	0x2E5F, r25	; 0x802e5f <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     718:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <debugOnNextEnd>
	}
	usb_state = !usb_state;
     71c:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <usb_state>
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	91 11       	cpse	r25, r1
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <usb_state>
	sei();
     72a:	78 94       	sei
     72c:	08 95       	ret

0000072e <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <main_b_vendor_enable>
	firstFrame = 1;
     734:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     738:	4c ec       	ldi	r20, 0xCC	; 204
     73a:	52 e0       	ldi	r21, 0x02	; 2
     73c:	6e ee       	ldi	r22, 0xEE	; 238
     73e:	72 e0       	ldi	r23, 0x02	; 2
     740:	82 e8       	ldi	r24, 0x82	; 130
     742:	96 e2       	ldi	r25, 0x26	; 38
     744:	a0 d5       	rcall	.+2880   	; 0x1286 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     746:	4d ed       	ldi	r20, 0xDD	; 221
     748:	52 e0       	ldi	r21, 0x02	; 2
     74a:	6e ee       	ldi	r22, 0xEE	; 238
     74c:	72 e0       	ldi	r23, 0x02	; 2
     74e:	8c e7       	ldi	r24, 0x7C	; 124
     750:	97 e2       	ldi	r25, 0x27	; 39
     752:	a5 d5       	rcall	.+2890   	; 0x129e <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     754:	4e ee       	ldi	r20, 0xEE	; 238
     756:	52 e0       	ldi	r21, 0x02	; 2
     758:	6e ee       	ldi	r22, 0xEE	; 238
     75a:	72 e0       	ldi	r23, 0x02	; 2
     75c:	86 e7       	ldi	r24, 0x76	; 118
     75e:	98 e2       	ldi	r25, 0x28	; 40
     760:	aa d5       	rcall	.+2900   	; 0x12b6 <udi_vendor_iso_in_run3>
	return true;
}
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	08 95       	ret

00000766 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     766:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <main_b_vendor_enable>
     76a:	08 95       	ret

0000076c <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	08 95       	ret

00000770 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	08 95       	ret

00000774 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     774:	e0 e0       	ldi	r30, 0x00	; 0
     776:	f2 e0       	ldi	r31, 0x02	; 2
     778:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     77a:	98 2f       	mov	r25, r24
     77c:	9c 71       	andi	r25, 0x1C	; 28
     77e:	93 68       	ori	r25, 0x83	; 131
     780:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     782:	88 23       	and	r24, r24
     784:	1c f4       	brge	.+6      	; 0x78c <tiny_adc_ch0setup+0x18>
     786:	90 e1       	ldi	r25, 0x10	; 16
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	02 c0       	rjmp	.+4      	; 0x790 <tiny_adc_ch0setup+0x1c>
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	89 2b       	or	r24, r25
     792:	e0 e0       	ldi	r30, 0x00	; 0
     794:	f2 e0       	ldi	r31, 0x02	; 2
     796:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     798:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     79a:	16 a2       	std	Z+38, r1	; 0x26
     79c:	08 95       	ret

0000079e <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     79e:	e0 e0       	ldi	r30, 0x00	; 0
     7a0:	f2 e0       	ldi	r31, 0x02	; 2
     7a2:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     7a4:	83 68       	ori	r24, 0x83	; 131
     7a6:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     7a8:	80 e1       	ldi	r24, 0x10	; 16
     7aa:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_HI_gc;
     7ac:	83 e0       	ldi	r24, 0x03	; 3
     7ae:	82 ab       	std	Z+50, r24	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     7b0:	16 aa       	std	Z+54, r1	; 0x36
     7b2:	08 95       	ret

000007b4 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     7b4:	e0 e0       	ldi	r30, 0x00	; 0
     7b6:	f2 e0       	ldi	r31, 0x02	; 2
     7b8:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     7ba:	83 e8       	ldi	r24, 0x83	; 131
     7bc:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     7be:	8f e2       	ldi	r24, 0x2F	; 47
     7c0:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     7c2:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     7c4:	16 a6       	std	Z+46, r1	; 0x2e
     7c6:	08 95       	ret

000007c8 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     7c8:	aa ec       	ldi	r26, 0xCA	; 202
     7ca:	b1 e0       	ldi	r27, 0x01	; 1
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     7d0:	e8 2f       	mov	r30, r24
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     7d6:	1c 92       	st	X, r1

	return( result );
}
     7d8:	08 95       	ret

000007da <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     7de:	e0 e7       	ldi	r30, 0x70	; 112
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	91 81       	ldd	r25, Z+1	; 0x01
     7e4:	9d 7f       	andi	r25, 0xFD	; 253
     7e6:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     7e8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     7ec:	62 30       	cpi	r22, 0x02	; 2
     7ee:	31 f1       	breq	.+76     	; 0x83c <tiny_adc_setup+0x62>
     7f0:	e0 e0       	ldi	r30, 0x00	; 0
     7f2:	f2 e0       	ldi	r31, 0x02	; 2
     7f4:	9c e1       	ldi	r25, 0x1C	; 28
     7f6:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     7f8:	90 e4       	ldi	r25, 0x40	; 64
     7fa:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     7fc:	81 11       	cpse	r24, r1
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <tiny_adc_setup+0x2a>
     800:	80 e4       	ldi	r24, 0x40	; 64
     802:	01 c0       	rjmp	.+2      	; 0x806 <tiny_adc_setup+0x2c>
     804:	80 ec       	ldi	r24, 0xC0	; 192
     806:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     80a:	61 30       	cpi	r22, 0x01	; 1
     80c:	11 f0       	breq	.+4      	; 0x812 <tiny_adc_setup+0x38>
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	01 c0       	rjmp	.+2      	; 0x814 <tiny_adc_setup+0x3a>
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	c0 e0       	ldi	r28, 0x00	; 0
     816:	d2 e0       	ldi	r29, 0x02	; 2
     818:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	d5 df       	rcall	.-86     	; 0x7c8 <ReadCalibrationByte>
     81e:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     820:	81 e2       	ldi	r24, 0x21	; 33
     822:	d2 df       	rcall	.-92     	; 0x7c8 <ReadCalibrationByte>
     824:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     826:	18 8e       	std	Y+24, r1	; 0x18
     828:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     82e:	c2 df       	rcall	.-124    	; 0x7b4 <tiny_adc_pid_setup>
     830:	0e c0       	rjmp	.+28     	; 0x84e <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     832:	80 ec       	ldi	r24, 0xC0	; 192
     834:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	ec cf       	rjmp	.-40     	; 0x814 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     83c:	e0 e0       	ldi	r30, 0x00	; 0
     83e:	f2 e0       	ldi	r31, 0x02	; 2
     840:	9e e1       	ldi	r25, 0x1E	; 30
     842:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     844:	90 e4       	ldi	r25, 0x40	; 64
     846:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     848:	81 11       	cpse	r24, r1
     84a:	f3 cf       	rjmp	.-26     	; 0x832 <tiny_adc_setup+0x58>
     84c:	d9 cf       	rjmp	.-78     	; 0x800 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     86e:	8f 91       	pop	r24
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     87e:	e0 e7       	ldi	r30, 0x70	; 112
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	82 81       	ldd	r24, Z+2	; 0x02
     884:	8b 7f       	andi	r24, 0xFB	; 251
     886:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     888:	c0 e2       	ldi	r28, 0x20	; 32
     88a:	d3 e0       	ldi	r29, 0x03	; 3
     88c:	8d e0       	ldi	r24, 0x0D	; 13
     88e:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     890:	80 e4       	ldi	r24, 0x40	; 64
     892:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     894:	89 e0       	ldi	r24, 0x09	; 9
     896:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     898:	83 e3       	ldi	r24, 0x33	; 51
     89a:	96 df       	rcall	.-212    	; 0x7c8 <ReadCalibrationByte>
     89c:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     89e:	82 e3       	ldi	r24, 0x32	; 50
     8a0:	93 df       	rcall	.-218    	; 0x7c8 <ReadCalibrationByte>
     8a2:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     8a4:	87 e3       	ldi	r24, 0x37	; 55
     8a6:	90 df       	rcall	.-224    	; 0x7c8 <ReadCalibrationByte>
     8a8:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     8aa:	86 e3       	ldi	r24, 0x36	; 54
     8ac:	8d df       	rcall	.-230    	; 0x7c8 <ReadCalibrationByte>
     8ae:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     8b0:	e0 e2       	ldi	r30, 0x20	; 32
     8b2:	f6 e0       	ldi	r31, 0x06	; 6
     8b4:	80 81       	ld	r24, Z
     8b6:	83 60       	ori	r24, 0x03	; 3
     8b8:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     8ba:	14 82       	std	Z+4, r1	; 0x04
	
	

     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     8c2:	e0 e7       	ldi	r30, 0x70	; 112
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	8e 7f       	andi	r24, 0xFE	; 254
     8ca:	80 83       	st	Z, r24
     8cc:	83 e8       	ldi	r24, 0x83	; 131
     8ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     8d2:	08 95       	ret

000008d4 <tiny_dma_flush>:
     8d4:	e0 e0       	ldi	r30, 0x00	; 0
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	10 8a       	std	Z+16, r1	; 0x10
     8da:	80 e4       	ldi	r24, 0x40	; 64
     8dc:	80 8b       	std	Z+16, r24	; 0x10
     8de:	10 a2       	std	Z+32, r1	; 0x20
     8e0:	80 a3       	std	Z+32, r24	; 0x20
     8e2:	10 aa       	std	Z+48, r1	; 0x30
     8e4:	80 ab       	std	Z+48, r24	; 0x30
     8e6:	e0 e4       	ldi	r30, 0x40	; 64
     8e8:	f1 e0       	ldi	r31, 0x01	; 1
     8ea:	10 82       	st	Z, r1
     8ec:	80 83       	st	Z, r24
     8ee:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <b1_state>
     8f2:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <b2_state>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <usb_state>
     8fc:	08 95       	ret

000008fe <tiny_dma_set_mode_0>:
     8fe:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <global_mode>
     902:	e8 df       	rcall	.-48     	; 0x8d4 <tiny_dma_flush>
     904:	e0 e0       	ldi	r30, 0x00	; 0
     906:	f1 e0       	ldi	r31, 0x01	; 1
     908:	16 aa       	std	Z+54, r1	; 0x36
     90a:	84 e2       	ldi	r24, 0x24	; 36
     90c:	80 ab       	std	Z+48, r24	; 0x30
     90e:	11 aa       	std	Z+49, r1	; 0x31
     910:	49 e5       	ldi	r20, 0x59	; 89
     912:	42 ab       	std	Z+50, r20	; 0x32
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	93 ab       	std	Z+51, r25	; 0x33
     918:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <auxDacBufLen>
     91c:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     920:	24 ab       	std	Z+52, r18	; 0x34
     922:	35 ab       	std	Z+53, r19	; 0x35
     924:	22 e8       	ldi	r18, 0x82	; 130
     926:	34 e2       	ldi	r19, 0x24	; 36
     928:	20 af       	std	Z+56, r18	; 0x38
     92a:	31 af       	std	Z+57, r19	; 0x39
     92c:	12 ae       	std	Z+58, r1	; 0x3a
     92e:	2b e3       	ldi	r18, 0x3B	; 59
     930:	24 af       	std	Z+60, r18	; 0x3c
     932:	23 e0       	ldi	r18, 0x03	; 3
     934:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     938:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     93c:	30 a9       	ldd	r19, Z+48	; 0x30
     93e:	30 68       	ori	r19, 0x80	; 128
     940:	30 ab       	std	Z+48, r19	; 0x30
     942:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     946:	a0 e4       	ldi	r26, 0x40	; 64
     948:	b1 e0       	ldi	r27, 0x01	; 1
     94a:	8c 93       	st	X, r24
     94c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     950:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     954:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     958:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     95c:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     960:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     964:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     968:	42 e7       	ldi	r20, 0x72	; 114
     96a:	52 e2       	ldi	r21, 0x22	; 34
     96c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     970:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     974:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     978:	39 e3       	ldi	r19, 0x39	; 57
     97a:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     97e:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     982:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     986:	2c 91       	ld	r18, X
     988:	20 68       	ori	r18, 0x80	; 128
     98a:	2c 93       	st	X, r18
     98c:	10 8a       	std	Z+16, r1	; 0x10
     98e:	20 e4       	ldi	r18, 0x40	; 64
     990:	20 8b       	std	Z+16, r18	; 0x10
     992:	80 8b       	std	Z+16, r24	; 0x10
     994:	91 8b       	std	Z+17, r25	; 0x11
     996:	25 e9       	ldi	r18, 0x95	; 149
     998:	22 8b       	std	Z+18, r18	; 0x12
     99a:	20 e1       	ldi	r18, 0x10	; 16
     99c:	23 8b       	std	Z+19, r18	; 0x13
     99e:	2e ee       	ldi	r18, 0xEE	; 238
     9a0:	32 e0       	ldi	r19, 0x02	; 2
     9a2:	24 8b       	std	Z+20, r18	; 0x14
     9a4:	35 8b       	std	Z+21, r19	; 0x15
     9a6:	80 8f       	std	Z+24, r24	; 0x18
     9a8:	91 8f       	std	Z+25, r25	; 0x19
     9aa:	12 8e       	std	Z+26, r1	; 0x1a
     9ac:	82 e8       	ldi	r24, 0x82	; 130
     9ae:	96 e2       	ldi	r25, 0x26	; 38
     9b0:	84 8f       	std	Z+28, r24	; 0x1c
     9b2:	95 8f       	std	Z+29, r25	; 0x1d
     9b4:	16 8e       	std	Z+30, r1	; 0x1e
     9b6:	80 89       	ldd	r24, Z+16	; 0x10
     9b8:	80 68       	ori	r24, 0x80	; 128
     9ba:	80 8b       	std	Z+16, r24	; 0x10
     9bc:	08 95       	ret

000009be <tiny_dma_set_mode_1>:
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_mode>
     9c8:	85 df       	rcall	.-246    	; 0x8d4 <tiny_dma_flush>
     9ca:	e0 e0       	ldi	r30, 0x00	; 0
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	10 aa       	std	Z+48, r1	; 0x30
     9d0:	80 e4       	ldi	r24, 0x40	; 64
     9d2:	80 ab       	std	Z+48, r24	; 0x30
     9d4:	94 e0       	ldi	r25, 0x04	; 4
     9d6:	90 ab       	std	Z+48, r25	; 0x30
     9d8:	11 aa       	std	Z+49, r1	; 0x31
     9da:	12 aa       	std	Z+50, r1	; 0x32
     9dc:	5b e4       	ldi	r21, 0x4B	; 75
     9de:	53 ab       	std	Z+51, r21	; 0x33
     9e0:	14 aa       	std	Z+52, r1	; 0x34
     9e2:	15 aa       	std	Z+53, r1	; 0x35
     9e4:	16 aa       	std	Z+54, r1	; 0x36
     9e6:	25 e0       	ldi	r18, 0x05	; 5
     9e8:	30 e2       	ldi	r19, 0x20	; 32
     9ea:	20 af       	std	Z+56, r18	; 0x38
     9ec:	31 af       	std	Z+57, r19	; 0x39
     9ee:	12 ae       	std	Z+58, r1	; 0x3a
     9f0:	40 ea       	ldi	r20, 0xA0	; 160
     9f2:	44 af       	std	Z+60, r20	; 0x3c
     9f4:	38 e0       	ldi	r19, 0x08	; 8
     9f6:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     9fa:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     9fe:	80 a9       	ldd	r24, Z+48	; 0x30
     a00:	80 6a       	ori	r24, 0xA0	; 160
     a02:	80 ab       	std	Z+48, r24	; 0x30
     a04:	85 e5       	ldi	r24, 0x55	; 85
     a06:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     a0a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     a0e:	a0 e4       	ldi	r26, 0x40	; 64
     a10:	b1 e0       	ldi	r27, 0x01	; 1
     a12:	d4 e2       	ldi	r29, 0x24	; 36
     a14:	dc 93       	st	X, r29
     a16:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     a1a:	89 e5       	ldi	r24, 0x59	; 89
     a1c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     a20:	c2 e0       	ldi	r28, 0x02	; 2
     a22:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     a26:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <auxDacBufLen>
     a2a:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     a2e:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a32:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     a36:	62 e8       	ldi	r22, 0x82	; 130
     a38:	74 e2       	ldi	r23, 0x24	; 36
     a3a:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a3e:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a42:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     a46:	8b e3       	ldi	r24, 0x3B	; 59
     a48:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a52:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     a56:	2c 91       	ld	r18, X
     a58:	20 68       	ori	r18, 0x80	; 128
     a5a:	2c 93       	st	X, r18
     a5c:	90 8b       	std	Z+16, r25	; 0x10
     a5e:	81 8b       	std	Z+17, r24	; 0x11
     a60:	a1 e9       	ldi	r26, 0x91	; 145
     a62:	a2 8b       	std	Z+18, r26	; 0x12
     a64:	20 e1       	ldi	r18, 0x10	; 16
     a66:	23 8b       	std	Z+19, r18	; 0x13
     a68:	67 e7       	ldi	r22, 0x77	; 119
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	64 8b       	std	Z+20, r22	; 0x14
     a6e:	75 8b       	std	Z+21, r23	; 0x15
     a70:	d0 8f       	std	Z+24, r29	; 0x18
     a72:	c1 8f       	std	Z+25, r28	; 0x19
     a74:	12 8e       	std	Z+26, r1	; 0x1a
     a76:	c2 e8       	ldi	r28, 0x82	; 130
     a78:	d6 e2       	ldi	r29, 0x26	; 38
     a7a:	c4 8f       	std	Z+28, r28	; 0x1c
     a7c:	d5 8f       	std	Z+29, r29	; 0x1d
     a7e:	16 8e       	std	Z+30, r1	; 0x1e
     a80:	20 89       	ldd	r18, Z+16	; 0x10
     a82:	20 68       	ori	r18, 0x80	; 128
     a84:	20 8b       	std	Z+16, r18	; 0x10
     a86:	90 a3       	std	Z+32, r25	; 0x20
     a88:	81 a3       	std	Z+33, r24	; 0x21
     a8a:	a2 a3       	std	Z+34, r26	; 0x22
     a8c:	53 a3       	std	Z+35, r21	; 0x23
     a8e:	64 a3       	std	Z+36, r22	; 0x24
     a90:	75 a3       	std	Z+37, r23	; 0x25
     a92:	40 a7       	std	Z+40, r20	; 0x28
     a94:	31 a7       	std	Z+41, r19	; 0x29
     a96:	12 a6       	std	Z+42, r1	; 0x2a
     a98:	89 ef       	ldi	r24, 0xF9	; 249
     a9a:	97 e2       	ldi	r25, 0x27	; 39
     a9c:	84 a7       	std	Z+44, r24	; 0x2c
     a9e:	95 a7       	std	Z+45, r25	; 0x2d
     aa0:	16 a6       	std	Z+46, r1	; 0x2e
     aa2:	80 a1       	ldd	r24, Z+32	; 0x20
     aa4:	80 68       	ori	r24, 0x80	; 128
     aa6:	80 a3       	std	Z+32, r24	; 0x20
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <tiny_dma_set_mode_2>:
     aae:	cf 93       	push	r28
     ab0:	f8 94       	cli
     ab2:	c2 e0       	ldi	r28, 0x02	; 2
     ab4:	c0 93 04 20 	sts	0x2004, r28	; 0x802004 <global_mode>
     ab8:	0d df       	rcall	.-486    	; 0x8d4 <tiny_dma_flush>
     aba:	e0 e0       	ldi	r30, 0x00	; 0
     abc:	f1 e0       	ldi	r31, 0x01	; 1
     abe:	16 aa       	std	Z+54, r1	; 0x36
     ac0:	94 e2       	ldi	r25, 0x24	; 36
     ac2:	90 ab       	std	Z+48, r25	; 0x30
     ac4:	11 aa       	std	Z+49, r1	; 0x31
     ac6:	39 e5       	ldi	r19, 0x59	; 89
     ac8:	32 ab       	std	Z+50, r19	; 0x32
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	83 ab       	std	Z+51, r24	; 0x33
     ace:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     ad2:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     ad6:	44 ab       	std	Z+52, r20	; 0x34
     ad8:	55 ab       	std	Z+53, r21	; 0x35
     ada:	42 e7       	ldi	r20, 0x72	; 114
     adc:	52 e2       	ldi	r21, 0x22	; 34
     ade:	40 af       	std	Z+56, r20	; 0x38
     ae0:	51 af       	std	Z+57, r21	; 0x39
     ae2:	12 ae       	std	Z+58, r1	; 0x3a
     ae4:	29 e3       	ldi	r18, 0x39	; 57
     ae6:	24 af       	std	Z+60, r18	; 0x3c
     ae8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     aec:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     af0:	20 a9       	ldd	r18, Z+48	; 0x30
     af2:	20 68       	ori	r18, 0x80	; 128
     af4:	20 ab       	std	Z+48, r18	; 0x30
     af6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     afa:	a0 e4       	ldi	r26, 0x40	; 64
     afc:	b1 e0       	ldi	r27, 0x01	; 1
     afe:	9c 93       	st	X, r25
     b00:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b04:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b08:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b0c:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <auxDacBufLen>
     b10:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     b14:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b18:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     b1c:	22 e8       	ldi	r18, 0x82	; 130
     b1e:	34 e2       	ldi	r19, 0x24	; 36
     b20:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b24:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b28:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b2c:	2b e3       	ldi	r18, 0x3B	; 59
     b2e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b32:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b36:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b3a:	2c 91       	ld	r18, X
     b3c:	20 68       	ori	r18, 0x80	; 128
     b3e:	2c 93       	st	X, r18
     b40:	54 e0       	ldi	r21, 0x04	; 4
     b42:	50 8b       	std	Z+16, r21	; 0x10
     b44:	81 8b       	std	Z+17, r24	; 0x11
     b46:	41 e9       	ldi	r20, 0x91	; 145
     b48:	42 8b       	std	Z+18, r20	; 0x12
     b4a:	20 e1       	ldi	r18, 0x10	; 16
     b4c:	23 8b       	std	Z+19, r18	; 0x13
     b4e:	27 e7       	ldi	r18, 0x77	; 119
     b50:	31 e0       	ldi	r19, 0x01	; 1
     b52:	24 8b       	std	Z+20, r18	; 0x14
     b54:	35 8b       	std	Z+21, r19	; 0x15
     b56:	90 8f       	std	Z+24, r25	; 0x18
     b58:	c1 8f       	std	Z+25, r28	; 0x19
     b5a:	12 8e       	std	Z+26, r1	; 0x1a
     b5c:	62 e8       	ldi	r22, 0x82	; 130
     b5e:	76 e2       	ldi	r23, 0x26	; 38
     b60:	64 8f       	std	Z+28, r22	; 0x1c
     b62:	75 8f       	std	Z+29, r23	; 0x1d
     b64:	16 8e       	std	Z+30, r1	; 0x1e
     b66:	90 89       	ldd	r25, Z+16	; 0x10
     b68:	90 68       	ori	r25, 0x80	; 128
     b6a:	90 8b       	std	Z+16, r25	; 0x10
     b6c:	50 a3       	std	Z+32, r21	; 0x20
     b6e:	81 a3       	std	Z+33, r24	; 0x21
     b70:	42 a3       	std	Z+34, r20	; 0x22
     b72:	82 e1       	ldi	r24, 0x12	; 18
     b74:	83 a3       	std	Z+35, r24	; 0x23
     b76:	24 a3       	std	Z+36, r18	; 0x24
     b78:	35 a3       	std	Z+37, r19	; 0x25
     b7a:	84 e3       	ldi	r24, 0x34	; 52
     b7c:	80 a7       	std	Z+40, r24	; 0x28
     b7e:	c1 a7       	std	Z+41, r28	; 0x29
     b80:	12 a6       	std	Z+42, r1	; 0x2a
     b82:	89 ef       	ldi	r24, 0xF9	; 249
     b84:	97 e2       	ldi	r25, 0x27	; 39
     b86:	84 a7       	std	Z+44, r24	; 0x2c
     b88:	95 a7       	std	Z+45, r25	; 0x2d
     b8a:	16 a6       	std	Z+46, r1	; 0x2e
     b8c:	80 a1       	ldd	r24, Z+32	; 0x20
     b8e:	80 68       	ori	r24, 0x80	; 128
     b90:	80 a3       	std	Z+32, r24	; 0x20
     b92:	78 94       	sei
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <tiny_dma_set_mode_3>:
     b98:	cf 93       	push	r28
     b9a:	c3 e0       	ldi	r28, 0x03	; 3
     b9c:	c0 93 04 20 	sts	0x2004, r28	; 0x802004 <global_mode>
     ba0:	99 de       	rcall	.-718    	; 0x8d4 <tiny_dma_flush>
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f1 e0       	ldi	r31, 0x01	; 1
     ba6:	10 a2       	std	Z+32, r1	; 0x20
     ba8:	50 e4       	ldi	r21, 0x40	; 64
     baa:	50 a3       	std	Z+32, r21	; 0x20
     bac:	44 e0       	ldi	r20, 0x04	; 4
     bae:	40 a3       	std	Z+32, r20	; 0x20
     bb0:	11 a2       	std	Z+33, r1	; 0x21
     bb2:	12 a2       	std	Z+34, r1	; 0x22
     bb4:	3b e4       	ldi	r19, 0x4B	; 75
     bb6:	33 a3       	std	Z+35, r19	; 0x23
     bb8:	14 a2       	std	Z+36, r1	; 0x24
     bba:	15 a2       	std	Z+37, r1	; 0x25
     bbc:	16 a2       	std	Z+38, r1	; 0x26
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	90 e2       	ldi	r25, 0x20	; 32
     bc2:	80 a7       	std	Z+40, r24	; 0x28
     bc4:	91 a7       	std	Z+41, r25	; 0x29
     bc6:	12 a6       	std	Z+42, r1	; 0x2a
     bc8:	20 ea       	ldi	r18, 0xA0	; 160
     bca:	24 a7       	std	Z+44, r18	; 0x2c
     bcc:	98 e0       	ldi	r25, 0x08	; 8
     bce:	95 a7       	std	Z+45, r25	; 0x2d
     bd0:	16 a6       	std	Z+46, r1	; 0x2e
     bd2:	80 a1       	ldd	r24, Z+32	; 0x20
     bd4:	80 6a       	ori	r24, 0xA0	; 160
     bd6:	80 a3       	std	Z+32, r24	; 0x20
     bd8:	85 e5       	ldi	r24, 0x55	; 85
     bda:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     bde:	16 aa       	std	Z+54, r1	; 0x36
     be0:	74 e2       	ldi	r23, 0x24	; 36
     be2:	70 ab       	std	Z+48, r23	; 0x30
     be4:	11 aa       	std	Z+49, r1	; 0x31
     be6:	69 e5       	ldi	r22, 0x59	; 89
     be8:	62 ab       	std	Z+50, r22	; 0x32
     bea:	c3 ab       	std	Z+51, r28	; 0x33
     bec:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <dacBuf_len>
     bf0:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <dacBuf_len+0x1>
     bf4:	a4 ab       	std	Z+52, r26	; 0x34
     bf6:	b5 ab       	std	Z+53, r27	; 0x35
     bf8:	a2 e7       	ldi	r26, 0x72	; 114
     bfa:	b2 e2       	ldi	r27, 0x22	; 34
     bfc:	a0 af       	std	Z+56, r26	; 0x38
     bfe:	b1 af       	std	Z+57, r27	; 0x39
     c00:	12 ae       	std	Z+58, r1	; 0x3a
     c02:	89 e3       	ldi	r24, 0x39	; 57
     c04:	84 af       	std	Z+60, r24	; 0x3c
     c06:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c0a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c0e:	80 a9       	ldd	r24, Z+48	; 0x30
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	80 ab       	std	Z+48, r24	; 0x30
     c14:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c18:	a0 e4       	ldi	r26, 0x40	; 64
     c1a:	b1 e0       	ldi	r27, 0x01	; 1
     c1c:	7c 93       	st	X, r23
     c1e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c22:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c2c:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <auxDacBufLen>
     c30:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     c34:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c38:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c3c:	62 e8       	ldi	r22, 0x82	; 130
     c3e:	74 e2       	ldi	r23, 0x24	; 36
     c40:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c44:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c48:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c4c:	8b e3       	ldi	r24, 0x3B	; 59
     c4e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c52:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c56:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c5a:	8c 91       	ld	r24, X
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	8c 93       	st	X, r24
     c60:	10 8a       	std	Z+16, r1	; 0x10
     c62:	50 8b       	std	Z+16, r21	; 0x10
     c64:	40 8b       	std	Z+16, r20	; 0x10
     c66:	c1 8b       	std	Z+17, r28	; 0x11
     c68:	81 e9       	ldi	r24, 0x91	; 145
     c6a:	82 8b       	std	Z+18, r24	; 0x12
     c6c:	33 8b       	std	Z+19, r19	; 0x13
     c6e:	47 e7       	ldi	r20, 0x77	; 119
     c70:	51 e0       	ldi	r21, 0x01	; 1
     c72:	44 8b       	std	Z+20, r20	; 0x14
     c74:	55 8b       	std	Z+21, r21	; 0x15
     c76:	20 8f       	std	Z+24, r18	; 0x18
     c78:	91 8f       	std	Z+25, r25	; 0x19
     c7a:	12 8e       	std	Z+26, r1	; 0x1a
     c7c:	82 e8       	ldi	r24, 0x82	; 130
     c7e:	96 e2       	ldi	r25, 0x26	; 38
     c80:	84 8f       	std	Z+28, r24	; 0x1c
     c82:	95 8f       	std	Z+29, r25	; 0x1d
     c84:	16 8e       	std	Z+30, r1	; 0x1e
     c86:	80 89       	ldd	r24, Z+16	; 0x10
     c88:	80 68       	ori	r24, 0x80	; 128
     c8a:	80 8b       	std	Z+16, r24	; 0x10
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <tiny_dma_set_mode_4>:
     c90:	cf 93       	push	r28
     c92:	c4 e0       	ldi	r28, 0x04	; 4
     c94:	c0 93 04 20 	sts	0x2004, r28	; 0x802004 <global_mode>
     c98:	1d de       	rcall	.-966    	; 0x8d4 <tiny_dma_flush>
     c9a:	e0 e0       	ldi	r30, 0x00	; 0
     c9c:	f1 e0       	ldi	r31, 0x01	; 1
     c9e:	10 a2       	std	Z+32, r1	; 0x20
     ca0:	80 e4       	ldi	r24, 0x40	; 64
     ca2:	80 a3       	std	Z+32, r24	; 0x20
     ca4:	c0 a3       	std	Z+32, r28	; 0x20
     ca6:	11 a2       	std	Z+33, r1	; 0x21
     ca8:	12 a2       	std	Z+34, r1	; 0x22
     caa:	4b e4       	ldi	r20, 0x4B	; 75
     cac:	43 a3       	std	Z+35, r20	; 0x23
     cae:	14 a2       	std	Z+36, r1	; 0x24
     cb0:	15 a2       	std	Z+37, r1	; 0x25
     cb2:	16 a2       	std	Z+38, r1	; 0x26
     cb4:	85 e0       	ldi	r24, 0x05	; 5
     cb6:	90 e2       	ldi	r25, 0x20	; 32
     cb8:	80 a7       	std	Z+40, r24	; 0x28
     cba:	91 a7       	std	Z+41, r25	; 0x29
     cbc:	12 a6       	std	Z+42, r1	; 0x2a
     cbe:	60 ea       	ldi	r22, 0xA0	; 160
     cc0:	64 a7       	std	Z+44, r22	; 0x2c
     cc2:	88 e0       	ldi	r24, 0x08	; 8
     cc4:	85 a7       	std	Z+45, r24	; 0x2d
     cc6:	16 a6       	std	Z+46, r1	; 0x2e
     cc8:	90 a1       	ldd	r25, Z+32	; 0x20
     cca:	90 6a       	ori	r25, 0xA0	; 160
     ccc:	90 a3       	std	Z+32, r25	; 0x20
     cce:	95 e5       	ldi	r25, 0x55	; 85
     cd0:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     cd4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     cd8:	a0 e4       	ldi	r26, 0x40	; 64
     cda:	b1 e0       	ldi	r27, 0x01	; 1
     cdc:	94 e2       	ldi	r25, 0x24	; 36
     cde:	9c 93       	st	X, r25
     ce0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ce4:	99 e5       	ldi	r25, 0x59	; 89
     ce6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     cf0:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <auxDacBufLen>
     cf4:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     cf8:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     cfc:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     d00:	22 e8       	ldi	r18, 0x82	; 130
     d02:	34 e2       	ldi	r19, 0x24	; 36
     d04:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d08:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d0c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d10:	9b e3       	ldi	r25, 0x3B	; 59
     d12:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d16:	93 e0       	ldi	r25, 0x03	; 3
     d18:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d1c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d20:	2c 91       	ld	r18, X
     d22:	20 68       	ori	r18, 0x80	; 128
     d24:	2c 93       	st	X, r18
     d26:	c0 8b       	std	Z+16, r28	; 0x10
     d28:	91 8b       	std	Z+17, r25	; 0x11
     d2a:	31 e9       	ldi	r19, 0x91	; 145
     d2c:	32 8b       	std	Z+18, r19	; 0x12
     d2e:	43 8b       	std	Z+19, r20	; 0x13
     d30:	47 e7       	ldi	r20, 0x77	; 119
     d32:	51 e0       	ldi	r21, 0x01	; 1
     d34:	44 8b       	std	Z+20, r20	; 0x14
     d36:	55 8b       	std	Z+21, r21	; 0x15
     d38:	60 8f       	std	Z+24, r22	; 0x18
     d3a:	81 8f       	std	Z+25, r24	; 0x19
     d3c:	12 8e       	std	Z+26, r1	; 0x1a
     d3e:	62 e8       	ldi	r22, 0x82	; 130
     d40:	76 e2       	ldi	r23, 0x26	; 38
     d42:	64 8f       	std	Z+28, r22	; 0x1c
     d44:	75 8f       	std	Z+29, r23	; 0x1d
     d46:	16 8e       	std	Z+30, r1	; 0x1e
     d48:	20 89       	ldd	r18, Z+16	; 0x10
     d4a:	20 68       	ori	r18, 0x80	; 128
     d4c:	20 8b       	std	Z+16, r18	; 0x10
     d4e:	c0 ab       	std	Z+48, r28	; 0x30
     d50:	91 ab       	std	Z+49, r25	; 0x31
     d52:	32 ab       	std	Z+50, r19	; 0x32
     d54:	9a e4       	ldi	r25, 0x4A	; 74
     d56:	93 ab       	std	Z+51, r25	; 0x33
     d58:	44 ab       	std	Z+52, r20	; 0x34
     d5a:	55 ab       	std	Z+53, r21	; 0x35
     d5c:	93 ec       	ldi	r25, 0xC3	; 195
     d5e:	90 af       	std	Z+56, r25	; 0x38
     d60:	81 af       	std	Z+57, r24	; 0x39
     d62:	12 ae       	std	Z+58, r1	; 0x3a
     d64:	89 ef       	ldi	r24, 0xF9	; 249
     d66:	97 e2       	ldi	r25, 0x27	; 39
     d68:	84 af       	std	Z+60, r24	; 0x3c
     d6a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     d6e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     d72:	80 a9       	ldd	r24, Z+48	; 0x30
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	80 ab       	std	Z+48, r24	; 0x30
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <tiny_dma_set_mode_5>:
     d7c:	85 e0       	ldi	r24, 0x05	; 5
     d7e:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_mode>
     d82:	a8 dd       	rcall	.-1200   	; 0x8d4 <tiny_dma_flush>
     d84:	e0 e0       	ldi	r30, 0x00	; 0
     d86:	f1 e0       	ldi	r31, 0x01	; 1
     d88:	16 aa       	std	Z+54, r1	; 0x36
     d8a:	34 e2       	ldi	r19, 0x24	; 36
     d8c:	30 ab       	std	Z+48, r19	; 0x30
     d8e:	11 aa       	std	Z+49, r1	; 0x31
     d90:	29 e5       	ldi	r18, 0x59	; 89
     d92:	22 ab       	std	Z+50, r18	; 0x32
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	83 ab       	std	Z+51, r24	; 0x33
     d98:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     d9c:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     da0:	44 ab       	std	Z+52, r20	; 0x34
     da2:	55 ab       	std	Z+53, r21	; 0x35
     da4:	42 e7       	ldi	r20, 0x72	; 114
     da6:	52 e2       	ldi	r21, 0x22	; 34
     da8:	40 af       	std	Z+56, r20	; 0x38
     daa:	51 af       	std	Z+57, r21	; 0x39
     dac:	12 ae       	std	Z+58, r1	; 0x3a
     dae:	99 e3       	ldi	r25, 0x39	; 57
     db0:	94 af       	std	Z+60, r25	; 0x3c
     db2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     db6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     dba:	90 a9       	ldd	r25, Z+48	; 0x30
     dbc:	90 68       	ori	r25, 0x80	; 128
     dbe:	90 ab       	std	Z+48, r25	; 0x30
     dc0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     dc4:	e0 e4       	ldi	r30, 0x40	; 64
     dc6:	f1 e0       	ldi	r31, 0x01	; 1
     dc8:	30 83       	st	Z, r19
     dca:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     dce:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     dd2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dd6:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <dacBuf_len>
     dda:	30 91 09 20 	lds	r19, 0x2009	; 0x802009 <dacBuf_len+0x1>
     dde:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     de2:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     de6:	22 e8       	ldi	r18, 0x82	; 130
     de8:	34 e2       	ldi	r19, 0x24	; 36
     dea:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     dee:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     df2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     df6:	9b e3       	ldi	r25, 0x3B	; 59
     df8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     dfc:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e00:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e04:	80 81       	ld	r24, Z
     e06:	80 68       	ori	r24, 0x80	; 128
     e08:	80 83       	st	Z, r24
     e0a:	08 95       	ret

00000e0c <tiny_dma_set_mode_6>:
     e0c:	86 e0       	ldi	r24, 0x06	; 6
     e0e:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_mode>
     e12:	60 dd       	rcall	.-1344   	; 0x8d4 <tiny_dma_flush>
     e14:	e0 e0       	ldi	r30, 0x00	; 0
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	16 aa       	std	Z+54, r1	; 0x36
     e1a:	94 e2       	ldi	r25, 0x24	; 36
     e1c:	90 ab       	std	Z+48, r25	; 0x30
     e1e:	11 aa       	std	Z+49, r1	; 0x31
     e20:	39 e5       	ldi	r19, 0x59	; 89
     e22:	32 ab       	std	Z+50, r19	; 0x32
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	83 ab       	std	Z+51, r24	; 0x33
     e28:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     e2c:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     e30:	44 ab       	std	Z+52, r20	; 0x34
     e32:	55 ab       	std	Z+53, r21	; 0x35
     e34:	42 e7       	ldi	r20, 0x72	; 114
     e36:	52 e2       	ldi	r21, 0x22	; 34
     e38:	40 af       	std	Z+56, r20	; 0x38
     e3a:	51 af       	std	Z+57, r21	; 0x39
     e3c:	12 ae       	std	Z+58, r1	; 0x3a
     e3e:	29 e3       	ldi	r18, 0x39	; 57
     e40:	24 af       	std	Z+60, r18	; 0x3c
     e42:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     e46:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     e4a:	20 a9       	ldd	r18, Z+48	; 0x30
     e4c:	20 68       	ori	r18, 0x80	; 128
     e4e:	20 ab       	std	Z+48, r18	; 0x30
     e50:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     e54:	a0 e4       	ldi	r26, 0x40	; 64
     e56:	b1 e0       	ldi	r27, 0x01	; 1
     e58:	9c 93       	st	X, r25
     e5a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e5e:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e62:	32 e0       	ldi	r19, 0x02	; 2
     e64:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e68:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <auxDacBufLen>
     e6c:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     e70:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     e74:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     e78:	42 e8       	ldi	r20, 0x82	; 130
     e7a:	54 e2       	ldi	r21, 0x24	; 36
     e7c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e80:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e84:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e88:	2b e3       	ldi	r18, 0x3B	; 59
     e8a:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e8e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e92:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e96:	2c 91       	ld	r18, X
     e98:	20 68       	ori	r18, 0x80	; 128
     e9a:	2c 93       	st	X, r18
     e9c:	10 8a       	std	Z+16, r1	; 0x10
     e9e:	20 e4       	ldi	r18, 0x40	; 64
     ea0:	20 8b       	std	Z+16, r18	; 0x10
     ea2:	24 e0       	ldi	r18, 0x04	; 4
     ea4:	20 8b       	std	Z+16, r18	; 0x10
     ea6:	81 8b       	std	Z+17, r24	; 0x11
     ea8:	81 e9       	ldi	r24, 0x91	; 145
     eaa:	82 8b       	std	Z+18, r24	; 0x12
     eac:	80 e1       	ldi	r24, 0x10	; 16
     eae:	83 8b       	std	Z+19, r24	; 0x13
     eb0:	4e ee       	ldi	r20, 0xEE	; 238
     eb2:	52 e0       	ldi	r21, 0x02	; 2
     eb4:	44 8b       	std	Z+20, r20	; 0x14
     eb6:	55 8b       	std	Z+21, r21	; 0x15
     eb8:	90 8f       	std	Z+24, r25	; 0x18
     eba:	31 8f       	std	Z+25, r19	; 0x19
     ebc:	12 8e       	std	Z+26, r1	; 0x1a
     ebe:	82 e8       	ldi	r24, 0x82	; 130
     ec0:	96 e2       	ldi	r25, 0x26	; 38
     ec2:	84 8f       	std	Z+28, r24	; 0x1c
     ec4:	95 8f       	std	Z+29, r25	; 0x1d
     ec6:	16 8e       	std	Z+30, r1	; 0x1e
     ec8:	80 89       	ldd	r24, Z+16	; 0x10
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	80 8b       	std	Z+16, r24	; 0x10
     ece:	08 95       	ret

00000ed0 <tiny_dma_set_mode_7>:
     ed0:	87 e0       	ldi	r24, 0x07	; 7
     ed2:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_mode>
     ed6:	fe dc       	rcall	.-1540   	; 0x8d4 <tiny_dma_flush>
     ed8:	e0 e0       	ldi	r30, 0x00	; 0
     eda:	f1 e0       	ldi	r31, 0x01	; 1
     edc:	16 aa       	std	Z+54, r1	; 0x36
     ede:	94 e2       	ldi	r25, 0x24	; 36
     ee0:	90 ab       	std	Z+48, r25	; 0x30
     ee2:	11 aa       	std	Z+49, r1	; 0x31
     ee4:	39 e5       	ldi	r19, 0x59	; 89
     ee6:	32 ab       	std	Z+50, r19	; 0x32
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	83 ab       	std	Z+51, r24	; 0x33
     eec:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     ef0:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     ef4:	44 ab       	std	Z+52, r20	; 0x34
     ef6:	55 ab       	std	Z+53, r21	; 0x35
     ef8:	42 e7       	ldi	r20, 0x72	; 114
     efa:	52 e2       	ldi	r21, 0x22	; 34
     efc:	40 af       	std	Z+56, r20	; 0x38
     efe:	51 af       	std	Z+57, r21	; 0x39
     f00:	12 ae       	std	Z+58, r1	; 0x3a
     f02:	29 e3       	ldi	r18, 0x39	; 57
     f04:	24 af       	std	Z+60, r18	; 0x3c
     f06:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f0a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f0e:	20 a9       	ldd	r18, Z+48	; 0x30
     f10:	20 68       	ori	r18, 0x80	; 128
     f12:	20 ab       	std	Z+48, r18	; 0x30
     f14:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f18:	a0 e4       	ldi	r26, 0x40	; 64
     f1a:	b1 e0       	ldi	r27, 0x01	; 1
     f1c:	9c 93       	st	X, r25
     f1e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f22:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f26:	32 e0       	ldi	r19, 0x02	; 2
     f28:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f2c:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <auxDacBufLen>
     f30:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     f34:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f38:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f3c:	42 e8       	ldi	r20, 0x82	; 130
     f3e:	54 e2       	ldi	r21, 0x24	; 36
     f40:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f44:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f48:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f4c:	2b e3       	ldi	r18, 0x3B	; 59
     f4e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f52:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f56:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f5a:	2c 91       	ld	r18, X
     f5c:	20 68       	ori	r18, 0x80	; 128
     f5e:	2c 93       	st	X, r18
     f60:	10 8a       	std	Z+16, r1	; 0x10
     f62:	20 e4       	ldi	r18, 0x40	; 64
     f64:	20 8b       	std	Z+16, r18	; 0x10
     f66:	25 e0       	ldi	r18, 0x05	; 5
     f68:	20 8b       	std	Z+16, r18	; 0x10
     f6a:	81 8b       	std	Z+17, r24	; 0x11
     f6c:	81 e9       	ldi	r24, 0x91	; 145
     f6e:	82 8b       	std	Z+18, r24	; 0x12
     f70:	80 e1       	ldi	r24, 0x10	; 16
     f72:	83 8b       	std	Z+19, r24	; 0x13
     f74:	4e ee       	ldi	r20, 0xEE	; 238
     f76:	52 e0       	ldi	r21, 0x02	; 2
     f78:	44 8b       	std	Z+20, r20	; 0x14
     f7a:	55 8b       	std	Z+21, r21	; 0x15
     f7c:	90 8f       	std	Z+24, r25	; 0x18
     f7e:	31 8f       	std	Z+25, r19	; 0x19
     f80:	12 8e       	std	Z+26, r1	; 0x1a
     f82:	82 e8       	ldi	r24, 0x82	; 130
     f84:	96 e2       	ldi	r25, 0x26	; 38
     f86:	84 8f       	std	Z+28, r24	; 0x1c
     f88:	95 8f       	std	Z+29, r25	; 0x1d
     f8a:	16 8e       	std	Z+30, r1	; 0x1e
     f8c:	80 89       	ldd	r24, Z+16	; 0x10
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	80 8b       	std	Z+16, r24	; 0x10
     f92:	08 95       	ret

00000f94 <__vector_6>:
}

ISR(DMA_CH0_vect){
     f94:	1f 92       	push	r1
     f96:	0f 92       	push	r0
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	0f 92       	push	r0
     f9c:	11 24       	eor	r1, r1
     f9e:	8f 93       	push	r24
	DMA.INTFLAGS = 0x01;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
}
     fa6:	8f 91       	pop	r24
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     fb2:	e0 e7       	ldi	r30, 0x70	; 112
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	83 81       	ldd	r24, Z+3	; 0x03
     fb8:	8c 7f       	andi	r24, 0xFC	; 252
     fba:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     fbc:	84 81       	ldd	r24, Z+4	; 0x04
     fbe:	8c 7f       	andi	r24, 0xFC	; 252
     fc0:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     fc2:	80 81       	ld	r24, Z
     fc4:	8d 7f       	andi	r24, 0xFD	; 253
     fc6:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     fc8:	e0 e8       	ldi	r30, 0x80	; 128
     fca:	f1 e0       	ldi	r31, 0x01	; 1
     fcc:	80 ec       	ldi	r24, 0xC0	; 192
     fce:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     fd0:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
     fd2:	88 ec       	ldi	r24, 0xC8	; 200
     fd4:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     fd6:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     fd8:	a0 e0       	ldi	r26, 0x00	; 0
     fda:	b8 e0       	ldi	r27, 0x08	; 8
     fdc:	34 e0       	ldi	r19, 0x04	; 4
     fde:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     fe0:	23 e0       	ldi	r18, 0x03	; 3
     fe2:	11 96       	adiw	r26, 0x01	; 1
     fe4:	2c 93       	st	X, r18
     fe6:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     fe8:	14 96       	adiw	r26, 0x04	; 4
     fea:	1c 92       	st	X, r1
     fec:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
     fee:	85 ed       	ldi	r24, 0xD5	; 213
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	96 96       	adiw	r26, 0x26	; 38
     ff4:	8d 93       	st	X+, r24
     ff6:	9c 93       	st	X, r25
     ff8:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
     ffa:	16 96       	adiw	r26, 0x06	; 6
     ffc:	1c 92       	st	X, r1
     ffe:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1000:	e0 e4       	ldi	r30, 0x40	; 64
    1002:	f8 e0       	ldi	r31, 0x08	; 8
    1004:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1006:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1008:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    100a:	86 a3       	std	Z+38, r24	; 0x26
    100c:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    100e:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    1010:	e0 e6       	ldi	r30, 0x60	; 96
    1012:	f6 e0       	ldi	r31, 0x06	; 6
    1014:	80 81       	ld	r24, Z
    1016:	80 61       	ori	r24, 0x10	; 16
    1018:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    101a:	e0 e4       	ldi	r30, 0x40	; 64
    101c:	f9 e0       	ldi	r31, 0x09	; 9
    101e:	83 e1       	ldi	r24, 0x13	; 19
    1020:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    1022:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    1028:	a6 a3       	std	Z+38, r26	; 0x26
    102a:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    102c:	10 a6       	std	Z+40, r1	; 0x28
    102e:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	80 83       	st	Z, r24
    1034:	08 95       	ret

00001036 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	ef 93       	push	r30
    104e:	ff 93       	push	r31
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	1f 92       	push	r1
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    1060:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <global_mode>
    1064:	87 30       	cpi	r24, 0x07	; 7
    1066:	31 f4       	brne	.+12     	; 0x1074 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    1068:	e0 e0       	ldi	r30, 0x00	; 0
    106a:	f2 e0       	ldi	r31, 0x02	; 2
    106c:	84 a5       	ldd	r24, Z+44	; 0x2c
    106e:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    1070:	95 a5       	ldd	r25, Z+45	; 0x2d
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1074:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    1078:	80 91 c1 20 	lds	r24, 0x20C1	; 0x8020c1 <PSU_target>
    107c:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    107e:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1082:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	0c f4       	brge	.+2      	; 0x108e <__vector_83+0x58>
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	99 23       	and	r25, r25
    1090:	c9 f0       	breq	.+50     	; 0x10c4 <__vector_83+0x8e>
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	2a 3f       	cpi	r18, 0xFA	; 250
    1096:	37 40       	sbci	r19, 0x07	; 7
    1098:	08 f0       	brcs	.+2      	; 0x109c <__vector_83+0x66>
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	99 23       	and	r25, r25
    109e:	91 f0       	breq	.+36     	; 0x10c4 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    10a0:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    10a4:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    10a8:	89 30       	cpi	r24, 0x09	; 9
    10aa:	1c f4       	brge	.+6      	; 0x10b2 <__vector_83+0x7c>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <__vector_83+0x80>
    10b2:	86 e0       	ldi	r24, 0x06	; 6
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    10be:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    10c2:	23 c0       	rjmp	.+70     	; 0x110a <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    10c4:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    10c8:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	8f 3f       	cpi	r24, 0xFF	; 255
    10d0:	0c f0       	brlt	.+2      	; 0x10d4 <__vector_83+0x9e>
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	99 23       	and	r25, r25
    10d6:	c9 f0       	breq	.+50     	; 0x110a <__vector_83+0xd4>
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	27 30       	cpi	r18, 0x07	; 7
    10dc:	31 05       	cpc	r19, r1
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <__vector_83+0xac>
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	99 23       	and	r25, r25
    10e4:	91 f0       	breq	.+36     	; 0x110a <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    10e6:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    10ea:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    10ee:	88 3f       	cpi	r24, 0xF8	; 248
    10f0:	1c f0       	brlt	.+6      	; 0x10f8 <__vector_83+0xc2>
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <__vector_83+0xc6>
    10f8:	86 e0       	ldi	r24, 0x06	; 6
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	48 1b       	sub	r20, r24
    1100:	59 0b       	sbc	r21, r25
    1102:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1106:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    110a:	0f 90       	pop	r0
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	0f 90       	pop	r0
    1126:	1f 90       	pop	r1
    1128:	18 95       	reti

0000112a <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    112a:	e0 e7       	ldi	r30, 0x70	; 112
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	83 81       	ldd	r24, Z+3	; 0x03
    1130:	8f 7e       	andi	r24, 0xEF	; 239
    1132:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    1134:	e0 e4       	ldi	r30, 0x40	; 64
    1136:	f6 e0       	ldi	r31, 0x06	; 6
    1138:	80 81       	ld	r24, Z
    113a:	8a 6a       	ori	r24, 0xAA	; 170
    113c:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1142:	88 e5       	ldi	r24, 0x58	; 88
    1144:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1146:	e0 ea       	ldi	r30, 0xA0	; 160
    1148:	f8 e0       	ldi	r31, 0x08	; 8
    114a:	84 ec       	ldi	r24, 0xC4	; 196
    114c:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    1152:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1154:	88 e1       	ldi	r24, 0x18	; 24
    1156:	84 83       	std	Z+4, r24	; 0x04
    1158:	08 95       	ret

0000115a <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    115a:	e0 e7       	ldi	r30, 0x70	; 112
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	83 81       	ldd	r24, Z+3	; 0x03
    1160:	87 7f       	andi	r24, 0xF7	; 247
    1162:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1164:	e0 ec       	ldi	r30, 0xC0	; 192
    1166:	f8 e0       	ldi	r31, 0x08	; 8
    1168:	80 e4       	ldi	r24, 0x40	; 64
    116a:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    116c:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    116e:	88 e5       	ldi	r24, 0x58	; 88
    1170:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1174:	08 95       	ret

00001176 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
	asm("nop");
    1180:	00 00       	nop
}
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 90       	pop	r0
    1188:	1f 90       	pop	r1
    118a:	18 95       	reti

0000118c <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    118c:	9f b7       	in	r25, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	e8 2f       	mov	r30, r24
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	e0 59       	subi	r30, 0x90	; 144
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	60 95       	com	r22
    119a:	80 81       	ld	r24, Z
    119c:	68 23       	and	r22, r24
    119e:	60 83       	st	Z, r22
    11a0:	9f bf       	out	0x3f, r25	; 63
    11a2:	08 95       	ret

000011a4 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    11a4:	86 30       	cpi	r24, 0x06	; 6
    11a6:	11 f0       	breq	.+4      	; 0x11ac <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    11ac:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    11ae:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    11b2:	81 fd       	sbrc	r24, 1
    11b4:	26 c0       	rjmp	.+76     	; 0x1202 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    11b6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    11b8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    11ba:	e0 e5       	ldi	r30, 0x50	; 80
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	82 60       	ori	r24, 0x02	; 2
    11c2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11c4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    11c6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    11c8:	81 ff       	sbrs	r24, 1
    11ca:	fd cf       	rjmp	.-6      	; 0x11c6 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    11cc:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    11ce:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    11d0:	a0 e5       	ldi	r26, 0x50	; 80
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	16 96       	adiw	r26, 0x06	; 6
    11d6:	8c 91       	ld	r24, X
    11d8:	16 97       	sbiw	r26, 0x06	; 6
    11da:	89 7f       	andi	r24, 0xF9	; 249
    11dc:	16 96       	adiw	r26, 0x06	; 6
    11de:	8c 93       	st	X, r24
    11e0:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    11e2:	e0 e6       	ldi	r30, 0x60	; 96
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    11ea:	8b eb       	ldi	r24, 0xBB	; 187
    11ec:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    11ee:	16 96       	adiw	r26, 0x06	; 6
    11f0:	8c 91       	ld	r24, X
    11f2:	16 97       	sbiw	r26, 0x06	; 6
    11f4:	84 60       	ori	r24, 0x04	; 4
    11f6:	16 96       	adiw	r26, 0x06	; 6
    11f8:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    11fa:	80 81       	ld	r24, Z
    11fc:	81 60       	ori	r24, 0x01	; 1
    11fe:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1200:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1202:	63 60       	ori	r22, 0x03	; 3
    1204:	84 e4       	ldi	r24, 0x44	; 68
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	1a d5       	rcall	.+2612   	; 0x1c3e <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    120a:	60 e4       	ldi	r22, 0x40	; 64
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	be cf       	rjmp	.-132    	; 0x118c <sysclk_enable_module>
    1210:	08 95       	ret

00001212 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1212:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udi_vendor_alternate_setting>
    1216:	08 95       	ret

00001218 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    1218:	40 d1       	rcall	.+640    	; 0x149a <udc_get_interface_desc>
    121a:	fc 01       	movw	r30, r24
    121c:	83 81       	ldd	r24, Z+3	; 0x03
    121e:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    1222:	81 11       	cpse	r24, r1
    1224:	02 c0       	rjmp	.+4      	; 0x122a <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    1226:	83 ca       	rjmp	.-2810   	; 0x72e <main_vendor_enable>
    1228:	08 95       	ret
			return false;
		}
	}
	return true;
    122a:	81 e0       	ldi	r24, 0x01	; 1
}
    122c:	08 95       	ret

0000122e <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    122e:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udi_vendor_alternate_setting>
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	09 f4       	brne	.+2      	; 0x1238 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    1236:	97 ca       	rjmp	.-2770   	; 0x766 <main_vendor_disable>
    1238:	08 95       	ret

0000123a <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    123a:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    123e:	88 23       	and	r24, r24
    1240:	4c f4       	brge	.+18     	; 0x1254 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1242:	80 76       	andi	r24, 0x60	; 96
    1244:	80 34       	cpi	r24, 0x40	; 64
    1246:	a9 f4       	brne	.+42     	; 0x1272 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1248:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    124c:	81 11       	cpse	r24, r1
    124e:	13 c0       	rjmp	.+38     	; 0x1276 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    1250:	8f ca       	rjmp	.-2786   	; 0x770 <main_setup_in_received>
    1252:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1254:	80 76       	andi	r24, 0x60	; 96
    1256:	80 34       	cpi	r24, 0x40	; 64
    1258:	81 f4       	brne	.+32     	; 0x127a <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    125a:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    125e:	81 11       	cpse	r24, r1
    1260:	0e c0       	rjmp	.+28     	; 0x127e <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1262:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1266:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    126a:	89 2b       	or	r24, r25
    126c:	51 f0       	breq	.+20     	; 0x1282 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    126e:	7e ca       	rjmp	.-2820   	; 0x76c <main_setup_out_received>
    1270:	08 95       	ret
		}
	}
	return false; // Not supported request
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	08 95       	ret
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	08 95       	ret
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	08 95       	ret
    1282:	80 e0       	ldi	r24, 0x00	; 0
}
    1284:	08 95       	ret

00001286 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    128c:	8a 01       	movw	r16, r20
    128e:	ac 01       	movw	r20, r24
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	81 e8       	ldi	r24, 0x81	; 129
    1294:	0e 94 93 12 	call	0x2526	; 0x2526 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	08 95       	ret

0000129e <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    12a4:	8a 01       	movw	r16, r20
    12a6:	ac 01       	movw	r20, r24
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	82 e8       	ldi	r24, 0x82	; 130
    12ac:	0e 94 93 12 	call	0x2526	; 0x2526 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    12bc:	8a 01       	movw	r16, r20
    12be:	ac 01       	movw	r20, r24
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	83 e8       	ldi	r24, 0x83	; 131
    12c4:	0e 94 93 12 	call	0x2526	; 0x2526 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	08 95       	ret

000012ce <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    12ce:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <udc_ptr_conf>
    12d2:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    12d6:	01 90       	ld	r0, Z+
    12d8:	f0 81       	ld	r31, Z
    12da:	e0 2d       	mov	r30, r0
    12dc:	22 81       	ldd	r18, Z+2	; 0x02
    12de:	33 81       	ldd	r19, Z+3	; 0x03
    12e0:	2e 0f       	add	r18, r30
    12e2:	3f 1f       	adc	r19, r31
    12e4:	fc 01       	movw	r30, r24
    12e6:	40 81       	ld	r20, Z
    12e8:	e4 0f       	add	r30, r20
    12ea:	f1 1d       	adc	r31, r1
    12ec:	e2 17       	cp	r30, r18
    12ee:	f3 07       	cpc	r31, r19
    12f0:	b8 f4       	brcc	.+46     	; 0x1320 <udc_next_desc_in_iface+0x52>
    12f2:	81 81       	ldd	r24, Z+1	; 0x01
    12f4:	84 30       	cpi	r24, 0x04	; 4
    12f6:	b9 f0       	breq	.+46     	; 0x1326 <udc_next_desc_in_iface+0x58>
    12f8:	86 13       	cpse	r24, r22
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <udc_next_desc_in_iface+0x40>
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <udc_next_desc_in_iface+0x3a>
    12fe:	81 81       	ldd	r24, Z+1	; 0x01
    1300:	84 30       	cpi	r24, 0x04	; 4
    1302:	a1 f0       	breq	.+40     	; 0x132c <udc_next_desc_in_iface+0x5e>
    1304:	86 13       	cpse	r24, r22
    1306:	03 c0       	rjmp	.+6      	; 0x130e <udc_next_desc_in_iface+0x40>
    1308:	8e 2f       	mov	r24, r30
    130a:	9f 2f       	mov	r25, r31
    130c:	08 95       	ret
    130e:	80 81       	ld	r24, Z
    1310:	e8 0f       	add	r30, r24
    1312:	f1 1d       	adc	r31, r1
    1314:	e2 17       	cp	r30, r18
    1316:	f3 07       	cpc	r31, r19
    1318:	90 f3       	brcs	.-28     	; 0x12fe <udc_next_desc_in_iface+0x30>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	08 95       	ret
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	08 95       	ret
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	08 95       	ret
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	08 95       	ret

00001332 <udc_valid_address>:
    1332:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1336:	8f 77       	andi	r24, 0x7F	; 127
    1338:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <udd_set_address>
    133c:	08 95       	ret

0000133e <udc_update_iface_desc>:
    133e:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <udc_num_configuration>
    1342:	99 23       	and	r25, r25
    1344:	81 f1       	breq	.+96     	; 0x13a6 <udc_update_iface_desc+0x68>
    1346:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <udc_ptr_conf>
    134a:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    134e:	01 90       	ld	r0, Z+
    1350:	f0 81       	ld	r31, Z
    1352:	e0 2d       	mov	r30, r0
    1354:	94 81       	ldd	r25, Z+4	; 0x04
    1356:	89 17       	cp	r24, r25
    1358:	40 f5       	brcc	.+80     	; 0x13aa <udc_update_iface_desc+0x6c>
    135a:	e0 93 c9 20 	sts	0x20C9, r30	; 0x8020c9 <udc_ptr_iface>
    135e:	f0 93 ca 20 	sts	0x20CA, r31	; 0x8020ca <udc_ptr_iface+0x1>
    1362:	22 81       	ldd	r18, Z+2	; 0x02
    1364:	33 81       	ldd	r19, Z+3	; 0x03
    1366:	2e 0f       	add	r18, r30
    1368:	3f 1f       	adc	r19, r31
    136a:	e2 17       	cp	r30, r18
    136c:	f3 07       	cpc	r31, r19
    136e:	f8 f4       	brcc	.+62     	; 0x13ae <udc_update_iface_desc+0x70>
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	94 30       	cpi	r25, 0x04	; 4
    1374:	61 f4       	brne	.+24     	; 0x138e <udc_update_iface_desc+0x50>
    1376:	92 81       	ldd	r25, Z+2	; 0x02
    1378:	98 13       	cpse	r25, r24
    137a:	09 c0       	rjmp	.+18     	; 0x138e <udc_update_iface_desc+0x50>
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	96 13       	cpse	r25, r22
    1380:	06 c0       	rjmp	.+12     	; 0x138e <udc_update_iface_desc+0x50>
    1382:	e0 93 c9 20 	sts	0x20C9, r30	; 0x8020c9 <udc_ptr_iface>
    1386:	f0 93 ca 20 	sts	0x20CA, r31	; 0x8020ca <udc_ptr_iface+0x1>
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	08 95       	ret
    138e:	90 81       	ld	r25, Z
    1390:	e9 0f       	add	r30, r25
    1392:	f1 1d       	adc	r31, r1
    1394:	e2 17       	cp	r30, r18
    1396:	f3 07       	cpc	r31, r19
    1398:	58 f3       	brcs	.-42     	; 0x1370 <udc_update_iface_desc+0x32>
    139a:	e0 93 c9 20 	sts	0x20C9, r30	; 0x8020c9 <udc_ptr_iface>
    139e:	f0 93 ca 20 	sts	0x20CA, r31	; 0x8020ca <udc_ptr_iface+0x1>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	08 95       	ret
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	08 95       	ret
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 95       	ret
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	08 95       	ret

000013b2 <udc_iface_disable>:
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	c8 2f       	mov	r28, r24
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	be df       	rcall	.-132    	; 0x133e <udc_update_iface_desc>
    13c2:	18 2f       	mov	r17, r24
    13c4:	88 23       	and	r24, r24
    13c6:	81 f1       	breq	.+96     	; 0x1428 <udc_iface_disable+0x76>
    13c8:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <udc_ptr_conf>
    13cc:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    13d0:	ec 2f       	mov	r30, r28
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	ee 0f       	add	r30, r30
    13d6:	ff 1f       	adc	r31, r31
    13d8:	12 96       	adiw	r26, 0x02	; 2
    13da:	8d 91       	ld	r24, X+
    13dc:	9c 91       	ld	r25, X
    13de:	13 97       	sbiw	r26, 0x03	; 3
    13e0:	e8 0f       	add	r30, r24
    13e2:	f9 1f       	adc	r31, r25
    13e4:	e0 80       	ld	r14, Z
    13e6:	f1 80       	ldd	r15, Z+1	; 0x01
    13e8:	d7 01       	movw	r26, r14
    13ea:	16 96       	adiw	r26, 0x06	; 6
    13ec:	ed 91       	ld	r30, X+
    13ee:	fc 91       	ld	r31, X
    13f0:	17 97       	sbiw	r26, 0x07	; 7
    13f2:	09 95       	icall
    13f4:	68 2f       	mov	r22, r24
    13f6:	8c 2f       	mov	r24, r28
    13f8:	a2 df       	rcall	.-188    	; 0x133e <udc_update_iface_desc>
    13fa:	18 2f       	mov	r17, r24
    13fc:	88 23       	and	r24, r24
    13fe:	a1 f0       	breq	.+40     	; 0x1428 <udc_iface_disable+0x76>
    1400:	c0 91 c9 20 	lds	r28, 0x20C9	; 0x8020c9 <udc_ptr_iface>
    1404:	d0 91 ca 20 	lds	r29, 0x20CA	; 0x8020ca <udc_ptr_iface+0x1>
    1408:	65 e0       	ldi	r22, 0x05	; 5
    140a:	ce 01       	movw	r24, r28
    140c:	60 df       	rcall	.-320    	; 0x12ce <udc_next_desc_in_iface>
    140e:	ec 01       	movw	r28, r24
    1410:	89 2b       	or	r24, r25
    1412:	21 f0       	breq	.+8      	; 0x141c <udc_iface_disable+0x6a>
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	0e 94 96 13 	call	0x272c	; 0x272c <udd_ep_free>
    141a:	f6 cf       	rjmp	.-20     	; 0x1408 <udc_iface_disable+0x56>
    141c:	d7 01       	movw	r26, r14
    141e:	12 96       	adiw	r26, 0x02	; 2
    1420:	ed 91       	ld	r30, X+
    1422:	fc 91       	ld	r31, X
    1424:	13 97       	sbiw	r26, 0x03	; 3
    1426:	09 95       	icall
    1428:	81 2f       	mov	r24, r17
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	08 95       	ret

00001436 <udc_iface_enable>:
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	18 2f       	mov	r17, r24
    143e:	7f df       	rcall	.-258    	; 0x133e <udc_update_iface_desc>
    1440:	88 23       	and	r24, r24
    1442:	39 f1       	breq	.+78     	; 0x1492 <udc_iface_enable+0x5c>
    1444:	c0 91 c9 20 	lds	r28, 0x20C9	; 0x8020c9 <udc_ptr_iface>
    1448:	d0 91 ca 20 	lds	r29, 0x20CA	; 0x8020ca <udc_ptr_iface+0x1>
    144c:	65 e0       	ldi	r22, 0x05	; 5
    144e:	ce 01       	movw	r24, r28
    1450:	3e df       	rcall	.-388    	; 0x12ce <udc_next_desc_in_iface>
    1452:	ec 01       	movw	r28, r24
    1454:	89 2b       	or	r24, r25
    1456:	41 f0       	breq	.+16     	; 0x1468 <udc_iface_enable+0x32>
    1458:	4c 81       	ldd	r20, Y+4	; 0x04
    145a:	5d 81       	ldd	r21, Y+5	; 0x05
    145c:	6b 81       	ldd	r22, Y+3	; 0x03
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	9d d7       	rcall	.+3898   	; 0x239c <udd_ep_alloc>
    1462:	81 11       	cpse	r24, r1
    1464:	f3 cf       	rjmp	.-26     	; 0x144c <udc_iface_enable+0x16>
    1466:	15 c0       	rjmp	.+42     	; 0x1492 <udc_iface_enable+0x5c>
    1468:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <udc_ptr_conf>
    146c:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    1470:	e1 2f       	mov	r30, r17
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	12 96       	adiw	r26, 0x02	; 2
    147a:	8d 91       	ld	r24, X+
    147c:	9c 91       	ld	r25, X
    147e:	13 97       	sbiw	r26, 0x03	; 3
    1480:	e8 0f       	add	r30, r24
    1482:	f9 1f       	adc	r31, r25
    1484:	01 90       	ld	r0, Z+
    1486:	f0 81       	ld	r31, Z
    1488:	e0 2d       	mov	r30, r0
    148a:	01 90       	ld	r0, Z+
    148c:	f0 81       	ld	r31, Z
    148e:	e0 2d       	mov	r30, r0
    1490:	09 95       	icall
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	08 95       	ret

0000149a <udc_get_interface_desc>:
    149a:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <udc_ptr_iface>
    149e:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <udc_ptr_iface+0x1>
    14a2:	08 95       	ret

000014a4 <udc_start>:
    14a4:	e9 c6       	rjmp	.+3538   	; 0x2278 <udd_enable>
    14a6:	08 95       	ret

000014a8 <udc_reset>:
    14a8:	cf 93       	push	r28
    14aa:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <udc_num_configuration>
    14ae:	88 23       	and	r24, r24
    14b0:	c1 f0       	breq	.+48     	; 0x14e2 <udc_reset+0x3a>
    14b2:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <udc_ptr_conf>
    14b6:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    14ba:	01 90       	ld	r0, Z+
    14bc:	f0 81       	ld	r31, Z
    14be:	e0 2d       	mov	r30, r0
    14c0:	84 81       	ldd	r24, Z+4	; 0x04
    14c2:	88 23       	and	r24, r24
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <udc_reset+0x3a>
    14c6:	c0 e0       	ldi	r28, 0x00	; 0
    14c8:	8c 2f       	mov	r24, r28
    14ca:	73 df       	rcall	.-282    	; 0x13b2 <udc_iface_disable>
    14cc:	cf 5f       	subi	r28, 0xFF	; 255
    14ce:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <udc_ptr_conf>
    14d2:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    14d6:	01 90       	ld	r0, Z+
    14d8:	f0 81       	ld	r31, Z
    14da:	e0 2d       	mov	r30, r0
    14dc:	84 81       	ldd	r24, Z+4	; 0x04
    14de:	c8 17       	cp	r28, r24
    14e0:	98 f3       	brcs	.-26     	; 0x14c8 <udc_reset+0x20>
    14e2:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <udc_num_configuration>
    14e6:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <udc_device_status>
    14ea:	10 92 d3 20 	sts	0x20D3, r1	; 0x8020d3 <udc_device_status+0x1>
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    14f2:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    14f4:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <udc_num_configuration>
    14f8:	88 23       	and	r24, r24
    14fa:	49 f1       	breq	.+82     	; 0x154e <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14fc:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <udc_ptr_conf>
    1500:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    1504:	ed 91       	ld	r30, X+
    1506:	fc 91       	ld	r31, X
    1508:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    150a:	84 81       	ldd	r24, Z+4	; 0x04
    150c:	88 23       	and	r24, r24
    150e:	f9 f0       	breq	.+62     	; 0x154e <udc_sof_notify+0x5c>
    1510:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1512:	ec 2f       	mov	r30, r28
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	12 96       	adiw	r26, 0x02	; 2
    151c:	8d 91       	ld	r24, X+
    151e:	9c 91       	ld	r25, X
    1520:	13 97       	sbiw	r26, 0x03	; 3
    1522:	e8 0f       	add	r30, r24
    1524:	f9 1f       	adc	r31, r25
    1526:	01 90       	ld	r0, Z+
    1528:	f0 81       	ld	r31, Z
    152a:	e0 2d       	mov	r30, r0
    152c:	00 84       	ldd	r0, Z+8	; 0x08
    152e:	f1 85       	ldd	r31, Z+9	; 0x09
    1530:	e0 2d       	mov	r30, r0
    1532:	30 97       	sbiw	r30, 0x00	; 0
    1534:	09 f0       	breq	.+2      	; 0x1538 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1536:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1538:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    153a:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <udc_ptr_conf>
    153e:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    1542:	ed 91       	ld	r30, X+
    1544:	fc 91       	ld	r31, X
    1546:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1548:	84 81       	ldd	r24, Z+4	; 0x04
    154a:	c8 17       	cp	r28, r24
    154c:	10 f3       	brcs	.-60     	; 0x1512 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    154e:	cf 91       	pop	r28
    1550:	08 95       	ret

00001552 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    155a:	e2 e7       	ldi	r30, 0x72	; 114
    155c:	f4 e2       	ldi	r31, 0x24	; 36
    155e:	12 86       	std	Z+10, r1	; 0x0a
    1560:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1562:	14 86       	std	Z+12, r1	; 0x0c
    1564:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1566:	16 86       	std	Z+14, r1	; 0x0e
    1568:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    156a:	80 81       	ld	r24, Z
    156c:	88 23       	and	r24, r24
    156e:	3c f4       	brge	.+14     	; 0x157e <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1570:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1574:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1578:	23 2b       	or	r18, r19
    157a:	09 f4       	brne	.+2      	; 0x157e <udc_process_setup+0x2c>
    157c:	54 c3       	rjmp	.+1704   	; 0x1c26 <udc_process_setup+0x6d4>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    157e:	80 76       	andi	r24, 0x60	; 96
    1580:	80 34       	cpi	r24, 0x40	; 64
    1582:	09 f0       	breq	.+2      	; 0x1586 <udc_process_setup+0x34>
    1584:	f2 c0       	rjmp	.+484    	; 0x176a <udc_process_setup+0x218>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    1586:	e0 91 73 24 	lds	r30, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    158a:	8e 2f       	mov	r24, r30
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	fc 01       	movw	r30, r24
    1590:	e0 5a       	subi	r30, 0xA0	; 160
    1592:	f1 09       	sbc	r31, r1
    1594:	e8 30       	cpi	r30, 0x08	; 8
    1596:	f1 05       	cpc	r31, r1
    1598:	08 f0       	brcs	.+2      	; 0x159c <udc_process_setup+0x4a>
    159a:	de c0       	rjmp	.+444    	; 0x1758 <udc_process_setup+0x206>
    159c:	e2 50       	subi	r30, 0x02	; 2
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <debugOnNextEnd>
    15aa:	41 c3       	rjmp	.+1666   	; 0x1c2e <udc_process_setup+0x6dc>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    15ac:	e0 e0       	ldi	r30, 0x00	; 0
    15ae:	f8 e0       	ldi	r31, 0x08	; 8
    15b0:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    15b2:	c2 e7       	ldi	r28, 0x72	; 114
    15b4:	d4 e2       	ldi	r29, 0x24	; 36
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ba:	86 ab       	std	Z+54, r24	; 0x36
    15bc:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	8f 70       	andi	r24, 0x0F	; 15
    15c2:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    15c4:	6e 81       	ldd	r22, Y+6	; 0x06
    15c6:	7f 81       	ldd	r23, Y+7	; 0x07
    15c8:	82 e7       	ldi	r24, 0x72	; 114
    15ca:	92 e2       	ldi	r25, 0x22	; 34
    15cc:	e0 d6       	rcall	.+3520   	; 0x238e <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    15ce:	8e 81       	ldd	r24, Y+6	; 0x06
    15d0:	9f 81       	ldd	r25, Y+7	; 0x07
    15d2:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <dacBuf_len>
    15d6:	30 91 09 20 	lds	r19, 0x2009	; 0x802009 <dacBuf_len+0x1>
    15da:	82 17       	cp	r24, r18
    15dc:	93 07       	cpc	r25, r19
    15de:	09 f4       	brne	.+2      	; 0x15e2 <udc_process_setup+0x90>
    15e0:	26 c3       	rjmp	.+1612   	; 0x1c2e <udc_process_setup+0x6dc>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    15e2:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <dacBuf_len>
    15e6:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <dacBuf_len+0x1>
				switch(global_mode){
    15ea:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <global_mode>
    15ee:	8e 2f       	mov	r24, r30
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	88 30       	cpi	r24, 0x08	; 8
    15f4:	91 05       	cpc	r25, r1
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <udc_process_setup+0xa8>
    15f8:	b1 c0       	rjmp	.+354    	; 0x175c <udc_process_setup+0x20a>
    15fa:	fc 01       	movw	r30, r24
    15fc:	ea 5f       	subi	r30, 0xFA	; 250
    15fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1600:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1604:	7c d9       	rcall	.-3336   	; 0x8fe <tiny_dma_set_mode_0>
    1606:	13 c3       	rjmp	.+1574   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1608:	da d9       	rcall	.-3148   	; 0x9be <tiny_dma_set_mode_1>
    160a:	11 c3       	rjmp	.+1570   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    160c:	50 da       	rcall	.-2912   	; 0xaae <tiny_dma_set_mode_2>
    160e:	0f c3       	rjmp	.+1566   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1610:	c3 da       	rcall	.-2682   	; 0xb98 <tiny_dma_set_mode_3>
    1612:	0d c3       	rjmp	.+1562   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1614:	3d db       	rcall	.-2438   	; 0xc90 <tiny_dma_set_mode_4>
    1616:	0b c3       	rjmp	.+1558   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1618:	b1 db       	rcall	.-2206   	; 0xd7c <tiny_dma_set_mode_5>
    161a:	09 c3       	rjmp	.+1554   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    161c:	f7 db       	rcall	.-2066   	; 0xe0c <tiny_dma_set_mode_6>
    161e:	07 c3       	rjmp	.+1550   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1620:	57 dc       	rcall	.-1874   	; 0xed0 <tiny_dma_set_mode_7>
    1622:	05 c3       	rjmp	.+1546   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    1624:	e0 e4       	ldi	r30, 0x40	; 64
    1626:	f8 e0       	ldi	r31, 0x08	; 8
    1628:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    162a:	c2 e7       	ldi	r28, 0x72	; 114
    162c:	d4 e2       	ldi	r29, 0x24	; 36
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	9b 81       	ldd	r25, Y+3	; 0x03
    1632:	86 ab       	std	Z+54, r24	; 0x36
    1634:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	8f 70       	andi	r24, 0x0F	; 15
    163a:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    163c:	6e 81       	ldd	r22, Y+6	; 0x06
    163e:	7f 81       	ldd	r23, Y+7	; 0x07
    1640:	82 e8       	ldi	r24, 0x82	; 130
    1642:	94 e2       	ldi	r25, 0x24	; 36
    1644:	a4 d6       	rcall	.+3400   	; 0x238e <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	9f 81       	ldd	r25, Y+7	; 0x07
    164a:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <auxDacBufLen>
    164e:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <auxDacBufLen+0x1>
    1652:	82 17       	cp	r24, r18
    1654:	93 07       	cpc	r25, r19
    1656:	09 f4       	brne	.+2      	; 0x165a <udc_process_setup+0x108>
    1658:	ea c2       	rjmp	.+1492   	; 0x1c2e <udc_process_setup+0x6dc>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    165a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <auxDacBufLen>
    165e:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <auxDacBufLen+0x1>
				switch(global_mode){
    1662:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <global_mode>
    1666:	8e 2f       	mov	r24, r30
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	88 30       	cpi	r24, 0x08	; 8
    166c:	91 05       	cpc	r25, r1
    166e:	08 f0       	brcs	.+2      	; 0x1672 <udc_process_setup+0x120>
    1670:	77 c0       	rjmp	.+238    	; 0x1760 <udc_process_setup+0x20e>
    1672:	fc 01       	movw	r30, r24
    1674:	e2 5f       	subi	r30, 0xF2	; 242
    1676:	fe 4f       	sbci	r31, 0xFE	; 254
    1678:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    167c:	40 d9       	rcall	.-3456   	; 0x8fe <tiny_dma_set_mode_0>
    167e:	d7 c2       	rjmp	.+1454   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1680:	9e d9       	rcall	.-3268   	; 0x9be <tiny_dma_set_mode_1>
    1682:	d5 c2       	rjmp	.+1450   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1684:	14 da       	rcall	.-3032   	; 0xaae <tiny_dma_set_mode_2>
    1686:	d3 c2       	rjmp	.+1446   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1688:	87 da       	rcall	.-2802   	; 0xb98 <tiny_dma_set_mode_3>
    168a:	d1 c2       	rjmp	.+1442   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    168c:	01 db       	rcall	.-2558   	; 0xc90 <tiny_dma_set_mode_4>
    168e:	cf c2       	rjmp	.+1438   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1690:	75 db       	rcall	.-2326   	; 0xd7c <tiny_dma_set_mode_5>
    1692:	cd c2       	rjmp	.+1434   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1694:	bb db       	rcall	.-2186   	; 0xe0c <tiny_dma_set_mode_6>
    1696:	cb c2       	rjmp	.+1430   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1698:	1b dc       	rcall	.-1994   	; 0xed0 <tiny_dma_set_mode_7>
    169a:	c9 c2       	rjmp	.+1426   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    169c:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    16a0:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    16a4:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    16a8:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <PSU_target>
    16ac:	c0 c2       	rjmp	.+1408   	; 0x1c2e <udc_process_setup+0x6dc>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    16ae:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    16b2:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    16b6:	bb c2       	rjmp	.+1398   	; 0x1c2e <udc_process_setup+0x6dc>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    16b8:	e0 91 74 24 	lds	r30, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    16bc:	f0 91 75 24 	lds	r31, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    16c0:	e8 30       	cpi	r30, 0x08	; 8
    16c2:	f1 05       	cpc	r31, r1
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <udc_process_setup+0x176>
    16c6:	4e c0       	rjmp	.+156    	; 0x1764 <udc_process_setup+0x212>
    16c8:	ea 5e       	subi	r30, 0xEA	; 234
    16ca:	fe 4f       	sbci	r31, 0xFE	; 254
    16cc:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	82 d8       	rcall	.-3836   	; 0x7da <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16d6:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    16da:	4c d8       	rcall	.-3944   	; 0x774 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    16dc:	10 d9       	rcall	.-3552   	; 0x8fe <tiny_dma_set_mode_0>
    16de:	a7 c2       	rjmp	.+1358   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	7a d8       	rcall	.-3852   	; 0x7da <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16e6:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    16ea:	44 d8       	rcall	.-3960   	; 0x774 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    16ec:	68 d9       	rcall	.-3376   	; 0x9be <tiny_dma_set_mode_1>
    16ee:	9f c2       	rjmp	.+1342   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	72 d8       	rcall	.-3868   	; 0x7da <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16f6:	c2 e7       	ldi	r28, 0x72	; 114
    16f8:	d4 e2       	ldi	r29, 0x24	; 36
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	3b d8       	rcall	.-3978   	; 0x774 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	4e d8       	rcall	.-3940   	; 0x79e <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    1702:	d5 d9       	rcall	.-3158   	; 0xaae <tiny_dma_set_mode_2>
    1704:	94 c2       	rjmp	.+1320   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    1706:	48 da       	rcall	.-2928   	; 0xb98 <tiny_dma_set_mode_3>
    1708:	92 c2       	rjmp	.+1316   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    170a:	c2 da       	rcall	.-2684   	; 0xc90 <tiny_dma_set_mode_4>
    170c:	90 c2       	rjmp	.+1312   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	63 d8       	rcall	.-3898   	; 0x7da <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1714:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    1718:	2d d8       	rcall	.-4006   	; 0x774 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    171a:	30 db       	rcall	.-2464   	; 0xd7c <tiny_dma_set_mode_5>
    171c:	88 c2       	rjmp	.+1296   	; 0x1c2e <udc_process_setup+0x6dc>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	5b d8       	rcall	.-3914   	; 0x7da <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1724:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    1728:	25 d8       	rcall	.-4022   	; 0x774 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    172a:	70 db       	rcall	.-2336   	; 0xe0c <tiny_dma_set_mode_6>
    172c:	80 c2       	rjmp	.+1280   	; 0x1c2e <udc_process_setup+0x6dc>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    172e:	62 e0       	ldi	r22, 0x02	; 2
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	53 d8       	rcall	.-3930   	; 0x7da <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1734:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    1738:	80 68       	ori	r24, 0x80	; 128
    173a:	1c d8       	rcall	.-4040   	; 0x774 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    173c:	c9 db       	rcall	.-2158   	; 0xed0 <tiny_dma_set_mode_7>
    173e:	77 c2       	rjmp	.+1262   	; 0x1c2e <udc_process_setup+0x6dc>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1740:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1744:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1748:	72 c2       	rjmp	.+1252   	; 0x1c2e <udc_process_setup+0x6dc>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    174a:	e9 e7       	ldi	r30, 0x79	; 121
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	88 ed       	ldi	r24, 0xD8	; 216
    1752:	f8 94       	cli
    1754:	84 bf       	out	0x34, r24	; 52
    1756:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	05 c0       	rjmp	.+10     	; 0x1766 <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <udc_process_setup+0x214>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    1764:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1766:	81 11       	cpse	r24, r1
    1768:	65 c2       	rjmp	.+1226   	; 0x1c34 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    176a:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    176e:	98 2f       	mov	r25, r24
    1770:	90 76       	andi	r25, 0x60	; 96
    1772:	09 f0       	breq	.+2      	; 0x1776 <udc_process_setup+0x224>
    1774:	e1 c1       	rjmp	.+962    	; 0x1b38 <udc_process_setup+0x5e6>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1776:	88 23       	and	r24, r24
    1778:	0c f0       	brlt	.+2      	; 0x177c <udc_process_setup+0x22a>
    177a:	05 c1       	rjmp	.+522    	; 0x1986 <udc_process_setup+0x434>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    177c:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1780:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1784:	21 15       	cp	r18, r1
    1786:	31 05       	cpc	r19, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <udc_process_setup+0x23a>
    178a:	d6 c1       	rjmp	.+940    	; 0x1b38 <udc_process_setup+0x5e6>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    178c:	8f 71       	andi	r24, 0x1F	; 31
    178e:	09 f0       	breq	.+2      	; 0x1792 <udc_process_setup+0x240>
    1790:	a3 c0       	rjmp	.+326    	; 0x18d8 <udc_process_setup+0x386>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1792:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1796:	96 30       	cpi	r25, 0x06	; 6
    1798:	79 f0       	breq	.+30     	; 0x17b8 <udc_process_setup+0x266>
    179a:	98 30       	cpi	r25, 0x08	; 8
    179c:	09 f4       	brne	.+2      	; 0x17a0 <udc_process_setup+0x24e>
    179e:	92 c0       	rjmp	.+292    	; 0x18c4 <udc_process_setup+0x372>
    17a0:	91 11       	cpse	r25, r1
    17a2:	9a c0       	rjmp	.+308    	; 0x18d8 <udc_process_setup+0x386>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	09 f0       	breq	.+2      	; 0x17ac <udc_process_setup+0x25a>
    17aa:	c6 c1       	rjmp	.+908    	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    17ac:	62 e0       	ldi	r22, 0x02	; 2
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	82 ed       	ldi	r24, 0xD2	; 210
    17b2:	90 e2       	ldi	r25, 0x20	; 32
    17b4:	ec d5       	rcall	.+3032   	; 0x238e <udd_set_setup_payload>
    17b6:	3d c2       	rjmp	.+1146   	; 0x1c32 <udc_process_setup+0x6e0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    17b8:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    17bc:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    17c0:	29 2f       	mov	r18, r25
    17c2:	33 27       	eor	r19, r19
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	a9 f0       	breq	.+42     	; 0x17f4 <udc_process_setup+0x2a2>
    17ca:	24 f4       	brge	.+8      	; 0x17d4 <udc_process_setup+0x282>
    17cc:	21 30       	cpi	r18, 0x01	; 1
    17ce:	31 05       	cpc	r19, r1
    17d0:	41 f0       	breq	.+16     	; 0x17e2 <udc_process_setup+0x290>
    17d2:	a9 c1       	rjmp	.+850    	; 0x1b26 <udc_process_setup+0x5d4>
    17d4:	23 30       	cpi	r18, 0x03	; 3
    17d6:	31 05       	cpc	r19, r1
    17d8:	d9 f1       	breq	.+118    	; 0x1850 <udc_process_setup+0x2fe>
    17da:	2f 30       	cpi	r18, 0x0F	; 15
    17dc:	31 05       	cpc	r19, r1
    17de:	51 f1       	breq	.+84     	; 0x1834 <udc_process_setup+0x2e2>
    17e0:	a2 c1       	rjmp	.+836    	; 0x1b26 <udc_process_setup+0x5d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    17e2:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config>
    17e6:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    17ea:	dc 01       	movw	r26, r24
    17ec:	6c 91       	ld	r22, X
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	ce d5       	rcall	.+2972   	; 0x238e <udd_set_setup_payload>
    17f2:	59 c0       	rjmp	.+178    	; 0x18a6 <udc_process_setup+0x354>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    17f4:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    17f8:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
    17fc:	21 89       	ldd	r18, Z+17	; 0x11
    17fe:	82 17       	cp	r24, r18
    1800:	08 f0       	brcs	.+2      	; 0x1804 <udc_process_setup+0x2b2>
    1802:	9a c1       	rjmp	.+820    	; 0x1b38 <udc_process_setup+0x5e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1804:	99 27       	eor	r25, r25
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    1812:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    1816:	e8 0f       	add	r30, r24
    1818:	f9 1f       	adc	r31, r25
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    181e:	fc 01       	movw	r30, r24
    1820:	62 81       	ldd	r22, Z+2	; 0x02
    1822:	73 81       	ldd	r23, Z+3	; 0x03
    1824:	b4 d5       	rcall	.+2920   	; 0x238e <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1826:	e0 91 7a 24 	lds	r30, 0x247A	; 0x80247a <udd_g_ctrlreq+0x8>
    182a:	f0 91 7b 24 	lds	r31, 0x247B	; 0x80247b <udd_g_ctrlreq+0x9>
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	81 83       	std	Z+1, r24	; 0x01
    1832:	39 c0       	rjmp	.+114    	; 0x18a6 <udc_process_setup+0x354>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1834:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <udc_config+0x4>
    1838:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <udc_config+0x5>
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	09 f4       	brne	.+2      	; 0x1842 <udc_process_setup+0x2f0>
    1840:	7b c1       	rjmp	.+758    	; 0x1b38 <udc_process_setup+0x5e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1842:	dc 01       	movw	r26, r24
    1844:	12 96       	adiw	r26, 0x02	; 2
    1846:	6d 91       	ld	r22, X+
    1848:	7c 91       	ld	r23, X
    184a:	13 97       	sbiw	r26, 0x03	; 3
    184c:	a0 d5       	rcall	.+2880   	; 0x238e <udd_set_setup_payload>
    184e:	2b c0       	rjmp	.+86     	; 0x18a6 <udc_process_setup+0x354>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1850:	99 27       	eor	r25, r25
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 05       	cpc	r25, r1
    1856:	71 f0       	breq	.+28     	; 0x1874 <udc_process_setup+0x322>
    1858:	38 f0       	brcs	.+14     	; 0x1868 <udc_process_setup+0x316>
    185a:	02 97       	sbiw	r24, 0x02	; 2
    185c:	09 f0       	breq	.+2      	; 0x1860 <udc_process_setup+0x30e>
    185e:	6c c1       	rjmp	.+728    	; 0x1b38 <udc_process_setup+0x5e6>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1860:	8e e8       	ldi	r24, 0x8E	; 142
    1862:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1864:	28 e1       	ldi	r18, 0x18	; 24
    1866:	09 c0       	rjmp	.+18     	; 0x187a <udc_process_setup+0x328>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1868:	64 e0       	ldi	r22, 0x04	; 4
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	82 eb       	ldi	r24, 0xB2	; 178
    186e:	90 e2       	ldi	r25, 0x20	; 32
    1870:	8e d5       	rcall	.+2844   	; 0x238e <udd_set_setup_payload>
    1872:	19 c0       	rjmp	.+50     	; 0x18a6 <udc_process_setup+0x354>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1874:	87 ea       	ldi	r24, 0xA7	; 167
    1876:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1878:	29 e0       	ldi	r18, 0x09	; 9
    187a:	38 2f       	mov	r19, r24
    187c:	ae e5       	ldi	r26, 0x5E	; 94
    187e:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1880:	e8 2f       	mov	r30, r24
    1882:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1884:	81 91       	ld	r24, Z+
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	8d 93       	st	X+, r24
    188a:	9d 93       	st	X+, r25
    188c:	8e 2f       	mov	r24, r30
    188e:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1890:	82 17       	cp	r24, r18
    1892:	c0 f3       	brcs	.-16     	; 0x1884 <udc_process_setup+0x332>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1894:	62 2f       	mov	r22, r18
    1896:	66 0f       	add	r22, r22
    1898:	6e 5f       	subi	r22, 0xFE	; 254
    189a:	60 93 5c 20 	sts	0x205C, r22	; 0x80205c <udc_string_desc>
		udd_set_setup_payload(
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	8c e5       	ldi	r24, 0x5C	; 92
    18a2:	90 e2       	ldi	r25, 0x20	; 32
    18a4:	74 d5       	rcall	.+2792   	; 0x238e <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    18a6:	e2 e7       	ldi	r30, 0x72	; 114
    18a8:	f4 e2       	ldi	r31, 0x24	; 36
    18aa:	86 81       	ldd	r24, Z+6	; 0x06
    18ac:	97 81       	ldd	r25, Z+7	; 0x07
    18ae:	22 85       	ldd	r18, Z+10	; 0x0a
    18b0:	33 85       	ldd	r19, Z+11	; 0x0b
    18b2:	82 17       	cp	r24, r18
    18b4:	93 07       	cpc	r25, r19
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <udc_process_setup+0x368>
    18b8:	bc c1       	rjmp	.+888    	; 0x1c32 <udc_process_setup+0x6e0>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    18ba:	80 93 7c 24 	sts	0x247C, r24	; 0x80247c <udd_g_ctrlreq+0xa>
    18be:	90 93 7d 24 	sts	0x247D, r25	; 0x80247d <udd_g_ctrlreq+0xb>
    18c2:	b7 c1       	rjmp	.+878    	; 0x1c32 <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    18c4:	21 30       	cpi	r18, 0x01	; 1
    18c6:	31 05       	cpc	r19, r1
    18c8:	09 f0       	breq	.+2      	; 0x18cc <udc_process_setup+0x37a>
    18ca:	36 c1       	rjmp	.+620    	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	8e ec       	ldi	r24, 0xCE	; 206
    18d2:	90 e2       	ldi	r25, 0x20	; 32
    18d4:	5c d5       	rcall	.+2744   	; 0x238e <udd_set_setup_payload>
    18d6:	ad c1       	rjmp	.+858    	; 0x1c32 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	e1 f5       	brne	.+120    	; 0x1954 <udc_process_setup+0x402>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    18dc:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    18e0:	9a 30       	cpi	r25, 0x0A	; 10
    18e2:	c1 f5       	brne	.+112    	; 0x1954 <udc_process_setup+0x402>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    18e4:	21 30       	cpi	r18, 0x01	; 1
    18e6:	31 05       	cpc	r19, r1
    18e8:	09 f0       	breq	.+2      	; 0x18ec <udc_process_setup+0x39a>
    18ea:	26 c1       	rjmp	.+588    	; 0x1b38 <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18ec:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <udc_num_configuration>
    18f0:	88 23       	and	r24, r24
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <udc_process_setup+0x3a4>
    18f4:	21 c1       	rjmp	.+578    	; 0x1b38 <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18f6:	c0 91 76 24 	lds	r28, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    18fa:	d0 91 77 24 	lds	r29, 0x2477	; 0x802477 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18fe:	00 91 cb 20 	lds	r16, 0x20CB	; 0x8020cb <udc_ptr_conf>
    1902:	10 91 cc 20 	lds	r17, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    1906:	d8 01       	movw	r26, r16
    1908:	ed 91       	ld	r30, X+
    190a:	fc 91       	ld	r31, X
    190c:	84 81       	ldd	r24, Z+4	; 0x04
    190e:	c8 17       	cp	r28, r24
    1910:	08 f0       	brcs	.+2      	; 0x1914 <udc_process_setup+0x3c2>
    1912:	12 c1       	rjmp	.+548    	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	8c 2f       	mov	r24, r28
    1918:	12 dd       	rcall	.-1500   	; 0x133e <udc_update_iface_desc>
    191a:	88 23       	and	r24, r24
    191c:	09 f4       	brne	.+2      	; 0x1920 <udc_process_setup+0x3ce>
    191e:	0c c1       	rjmp	.+536    	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1920:	ce 01       	movw	r24, r28
    1922:	99 27       	eor	r25, r25
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	d8 01       	movw	r26, r16
    192a:	12 96       	adiw	r26, 0x02	; 2
    192c:	ed 91       	ld	r30, X+
    192e:	fc 91       	ld	r31, X
    1930:	13 97       	sbiw	r26, 0x03	; 3
    1932:	e8 0f       	add	r30, r24
    1934:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1936:	01 90       	ld	r0, Z+
    1938:	f0 81       	ld	r31, Z
    193a:	e0 2d       	mov	r30, r0
    193c:	86 81       	ldd	r24, Z+6	; 0x06
    193e:	97 81       	ldd	r25, Z+7	; 0x07
    1940:	fc 01       	movw	r30, r24
    1942:	09 95       	icall
    1944:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	80 ed       	ldi	r24, 0xD0	; 208
    194e:	90 e2       	ldi	r25, 0x20	; 32
    1950:	1e d5       	rcall	.+2620   	; 0x238e <udd_set_setup_payload>
    1952:	6f c1       	rjmp	.+734    	; 0x1c32 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1954:	82 30       	cpi	r24, 0x02	; 2
    1956:	09 f0       	breq	.+2      	; 0x195a <udc_process_setup+0x408>
    1958:	ef c0       	rjmp	.+478    	; 0x1b38 <udc_process_setup+0x5e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    195a:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    195e:	81 11       	cpse	r24, r1
    1960:	e4 c0       	rjmp	.+456    	; 0x1b2a <udc_process_setup+0x5d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	09 f0       	breq	.+2      	; 0x196a <udc_process_setup+0x418>
    1968:	e7 c0       	rjmp	.+462    	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    196a:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    196e:	8b d5       	rcall	.+2838   	; 0x2486 <udd_ep_is_halted>
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	80 93 c7 20 	sts	0x20C7, r24	; 0x8020c7 <udc_ep_status.5523>
    1976:	90 93 c8 20 	sts	0x20C8, r25	; 0x8020c8 <udc_ep_status.5523+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    197a:	62 e0       	ldi	r22, 0x02	; 2
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	87 ec       	ldi	r24, 0xC7	; 199
    1980:	90 e2       	ldi	r25, 0x20	; 32
    1982:	05 d5       	rcall	.+2570   	; 0x238e <udd_set_setup_payload>
    1984:	56 c1       	rjmp	.+684    	; 0x1c32 <udc_process_setup+0x6e0>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1986:	8f 71       	andi	r24, 0x1F	; 31
    1988:	09 f0       	breq	.+2      	; 0x198c <udc_process_setup+0x43a>
    198a:	83 c0       	rjmp	.+262    	; 0x1a92 <udc_process_setup+0x540>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    198c:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1990:	93 30       	cpi	r25, 0x03	; 3
    1992:	09 f4       	brne	.+2      	; 0x1996 <udc_process_setup+0x444>
    1994:	cc c0       	rjmp	.+408    	; 0x1b2e <udc_process_setup+0x5dc>
    1996:	18 f4       	brcc	.+6      	; 0x199e <udc_process_setup+0x44c>
    1998:	91 30       	cpi	r25, 0x01	; 1
    199a:	a1 f0       	breq	.+40     	; 0x19c4 <udc_process_setup+0x472>
    199c:	7a c0       	rjmp	.+244    	; 0x1a92 <udc_process_setup+0x540>
    199e:	95 30       	cpi	r25, 0x05	; 5
    19a0:	19 f0       	breq	.+6      	; 0x19a8 <udc_process_setup+0x456>
    19a2:	99 30       	cpi	r25, 0x09	; 9
    19a4:	39 f1       	breq	.+78     	; 0x19f4 <udc_process_setup+0x4a2>
    19a6:	75 c0       	rjmp	.+234    	; 0x1a92 <udc_process_setup+0x540>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19a8:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    19ac:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    19b0:	89 2b       	or	r24, r25
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <udc_process_setup+0x464>
    19b4:	c1 c0       	rjmp	.+386    	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    19b6:	89 e9       	ldi	r24, 0x99	; 153
    19b8:	99 e0       	ldi	r25, 0x09	; 9
    19ba:	80 93 7e 24 	sts	0x247E, r24	; 0x80247e <udd_g_ctrlreq+0xc>
    19be:	90 93 7f 24 	sts	0x247F, r25	; 0x80247f <udd_g_ctrlreq+0xd>
    19c2:	37 c1       	rjmp	.+622    	; 0x1c32 <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19c4:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    19c8:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    19cc:	89 2b       	or	r24, r25
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <udc_process_setup+0x480>
    19d0:	b3 c0       	rjmp	.+358    	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    19d2:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    19d6:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <udc_process_setup+0x48e>
    19de:	ac c0       	rjmp	.+344    	; 0x1b38 <udc_process_setup+0x5e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    19e0:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <udc_device_status>
    19e4:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <udc_device_status+0x1>
    19e8:	8d 7f       	andi	r24, 0xFD	; 253
    19ea:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <udc_device_status>
    19ee:	90 93 d3 20 	sts	0x20D3, r25	; 0x8020d3 <udc_device_status+0x1>
    19f2:	1f c1       	rjmp	.+574    	; 0x1c32 <udc_process_setup+0x6e0>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    19f4:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    19f8:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    19fc:	89 2b       	or	r24, r25
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <udc_process_setup+0x4b0>
    1a00:	9b c0       	rjmp	.+310    	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1a02:	c2 d4       	rcall	.+2436   	; 0x2388 <udd_getaddress>
    1a04:	88 23       	and	r24, r24
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <udc_process_setup+0x4b8>
    1a08:	97 c0       	rjmp	.+302    	; 0x1b38 <udc_process_setup+0x5e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a0a:	20 91 74 24 	lds	r18, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1a0e:	30 91 75 24 	lds	r19, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    1a12:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1a14:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    1a18:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a1c:	81 89       	ldd	r24, Z+17	; 0x11
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	82 17       	cp	r24, r18
    1a22:	93 07       	cpc	r25, r19
    1a24:	08 f4       	brcc	.+2      	; 0x1a28 <udc_process_setup+0x4d6>
    1a26:	88 c0       	rjmp	.+272    	; 0x1b38 <udc_process_setup+0x5e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1a28:	3f dd       	rcall	.-1410   	; 0x14a8 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1a2a:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1a2e:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    1a32:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1a36:	88 23       	and	r24, r24
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <udc_process_setup+0x4ea>
    1a3a:	fb c0       	rjmp	.+502    	; 0x1c32 <udc_process_setup+0x6e0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1a3c:	99 27       	eor	r25, r25
    1a3e:	81 50       	subi	r24, 0x01	; 1
    1a40:	90 4c       	sbci	r25, 0xC0	; 192
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    1a4e:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    1a52:	e8 0f       	add	r30, r24
    1a54:	f9 1f       	adc	r31, r25
    1a56:	e0 93 cb 20 	sts	0x20CB, r30	; 0x8020cb <udc_ptr_conf>
    1a5a:	f0 93 cc 20 	sts	0x20CC, r31	; 0x8020cc <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a5e:	01 90       	ld	r0, Z+
    1a60:	f0 81       	ld	r31, Z
    1a62:	e0 2d       	mov	r30, r0
    1a64:	84 81       	ldd	r24, Z+4	; 0x04
    1a66:	88 23       	and	r24, r24
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <udc_process_setup+0x51a>
    1a6a:	e3 c0       	rjmp	.+454    	; 0x1c32 <udc_process_setup+0x6e0>
    1a6c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	8c 2f       	mov	r24, r28
    1a72:	e1 dc       	rcall	.-1598   	; 0x1436 <udc_iface_enable>
    1a74:	88 23       	and	r24, r24
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <udc_process_setup+0x528>
    1a78:	5f c0       	rjmp	.+190    	; 0x1b38 <udc_process_setup+0x5e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a7a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a7c:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <udc_ptr_conf>
    1a80:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    1a84:	01 90       	ld	r0, Z+
    1a86:	f0 81       	ld	r31, Z
    1a88:	e0 2d       	mov	r30, r0
    1a8a:	84 81       	ldd	r24, Z+4	; 0x04
    1a8c:	c8 17       	cp	r28, r24
    1a8e:	78 f3       	brcs	.-34     	; 0x1a6e <udc_process_setup+0x51c>
    1a90:	d0 c0       	rjmp	.+416    	; 0x1c32 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	e1 f4       	brne	.+56     	; 0x1ace <udc_process_setup+0x57c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a96:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1a9a:	9b 30       	cpi	r25, 0x0B	; 11
    1a9c:	c1 f4       	brne	.+48     	; 0x1ace <udc_process_setup+0x57c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1a9e:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1aa2:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1aa6:	89 2b       	or	r24, r25
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <udc_process_setup+0x55a>
    1aaa:	46 c0       	rjmp	.+140    	; 0x1b38 <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1aac:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <udc_num_configuration>
    1ab0:	88 23       	and	r24, r24
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <udc_process_setup+0x564>
    1ab4:	41 c0       	rjmp	.+130    	; 0x1b38 <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ab6:	e2 e7       	ldi	r30, 0x72	; 114
    1ab8:	f4 e2       	ldi	r31, 0x24	; 36
    1aba:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1abc:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1abe:	8c 2f       	mov	r24, r28
    1ac0:	78 dc       	rcall	.-1808   	; 0x13b2 <udc_iface_disable>
    1ac2:	88 23       	and	r24, r24
    1ac4:	c9 f1       	breq	.+114    	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1ac6:	6d 2f       	mov	r22, r29
    1ac8:	8c 2f       	mov	r24, r28
    1aca:	b5 dc       	rcall	.-1686   	; 0x1436 <udc_iface_enable>
    1acc:	33 c0       	rjmp	.+102    	; 0x1b34 <udc_process_setup+0x5e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1ace:	82 30       	cpi	r24, 0x02	; 2
    1ad0:	99 f5       	brne	.+102    	; 0x1b38 <udc_process_setup+0x5e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ad2:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <udc_process_setup+0x58e>
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	89 f0       	breq	.+34     	; 0x1b00 <udc_process_setup+0x5ae>
    1ade:	29 c0       	rjmp	.+82     	; 0x1b32 <udc_process_setup+0x5e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ae0:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1ae4:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1ae8:	89 2b       	or	r24, r25
    1aea:	31 f5       	brne	.+76     	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1aec:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1af0:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    1af4:	89 2b       	or	r24, r25
    1af6:	01 f5       	brne	.+64     	; 0x1b38 <udc_process_setup+0x5e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1af8:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    1afc:	df d4       	rcall	.+2494   	; 0x24bc <udd_ep_clear_halt>
    1afe:	1a c0       	rjmp	.+52     	; 0x1b34 <udc_process_setup+0x5e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b00:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1b04:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1b08:	89 2b       	or	r24, r25
    1b0a:	b1 f4       	brne	.+44     	; 0x1b38 <udc_process_setup+0x5e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b0c:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1b10:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    1b14:	89 2b       	or	r24, r25
    1b16:	81 f4       	brne	.+32     	; 0x1b38 <udc_process_setup+0x5e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b18:	c2 e7       	ldi	r28, 0x72	; 114
    1b1a:	d4 e2       	ldi	r29, 0x24	; 36
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	bd d5       	rcall	.+2938   	; 0x269a <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	20 d6       	rcall	.+3136   	; 0x2764 <udd_ep_set_halt>
    1b24:	07 c0       	rjmp	.+14     	; 0x1b34 <udc_process_setup+0x5e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	05 c0       	rjmp	.+10     	; 0x1b34 <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	03 c0       	rjmp	.+6      	; 0x1b34 <udc_process_setup+0x5e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    1b32:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1b34:	81 11       	cpse	r24, r1
    1b36:	7e c0       	rjmp	.+252    	; 0x1c34 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1b38:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    1b3c:	8f 71       	andi	r24, 0x1F	; 31
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	71 f5       	brne	.+92     	; 0x1b9e <udc_process_setup+0x64c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b42:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <udc_num_configuration>
    1b46:	88 23       	and	r24, r24
    1b48:	51 f1       	breq	.+84     	; 0x1b9e <udc_process_setup+0x64c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b4a:	00 91 76 24 	lds	r16, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    1b4e:	10 91 77 24 	lds	r17, 0x2477	; 0x802477 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b52:	c0 91 cb 20 	lds	r28, 0x20CB	; 0x8020cb <udc_ptr_conf>
    1b56:	d0 91 cc 20 	lds	r29, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    1b5a:	e8 81       	ld	r30, Y
    1b5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b5e:	84 81       	ldd	r24, Z+4	; 0x04
    1b60:	08 17       	cp	r16, r24
    1b62:	e8 f4       	brcc	.+58     	; 0x1b9e <udc_process_setup+0x64c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	80 2f       	mov	r24, r16
    1b68:	ea db       	rcall	.-2092   	; 0x133e <udc_update_iface_desc>
    1b6a:	88 23       	and	r24, r24
    1b6c:	c1 f0       	breq	.+48     	; 0x1b9e <udc_process_setup+0x64c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b6e:	f8 01       	movw	r30, r16
    1b70:	ff 27       	eor	r31, r31
    1b72:	cf 01       	movw	r24, r30
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	ea 81       	ldd	r30, Y+2	; 0x02
    1b7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b7c:	e8 0f       	add	r30, r24
    1b7e:	f9 1f       	adc	r31, r25
    1b80:	c0 81       	ld	r28, Z
    1b82:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b84:	ee 81       	ldd	r30, Y+6	; 0x06
    1b86:	ff 81       	ldd	r31, Y+7	; 0x07
    1b88:	09 95       	icall
    1b8a:	68 2f       	mov	r22, r24
    1b8c:	80 2f       	mov	r24, r16
    1b8e:	d7 db       	rcall	.-2130   	; 0x133e <udc_update_iface_desc>
    1b90:	88 23       	and	r24, r24
    1b92:	29 f0       	breq	.+10     	; 0x1b9e <udc_process_setup+0x64c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1b94:	ec 81       	ldd	r30, Y+4	; 0x04
    1b96:	fd 81       	ldd	r31, Y+5	; 0x05
    1b98:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1b9a:	81 11       	cpse	r24, r1
    1b9c:	4b c0       	rjmp	.+150    	; 0x1c34 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1b9e:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    1ba2:	8f 71       	andi	r24, 0x1F	; 31
    1ba4:	82 30       	cpi	r24, 0x02	; 2
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <udc_process_setup+0x658>
    1ba8:	40 c0       	rjmp	.+128    	; 0x1c2a <udc_process_setup+0x6d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1baa:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <udc_num_configuration>
    1bae:	88 23       	and	r24, r24
    1bb0:	b1 f1       	breq	.+108    	; 0x1c1e <udc_process_setup+0x6cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bb2:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <udc_ptr_conf>
    1bb6:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    1bba:	ed 91       	ld	r30, X+
    1bbc:	fc 91       	ld	r31, X
    1bbe:	11 97       	sbiw	r26, 0x01	; 1
    1bc0:	84 81       	ldd	r24, Z+4	; 0x04
    1bc2:	88 23       	and	r24, r24
    1bc4:	71 f1       	breq	.+92     	; 0x1c22 <udc_process_setup+0x6d0>
    1bc6:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bc8:	ec 2f       	mov	r30, r28
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	ee 0f       	add	r30, r30
    1bce:	ff 1f       	adc	r31, r31
    1bd0:	12 96       	adiw	r26, 0x02	; 2
    1bd2:	8d 91       	ld	r24, X+
    1bd4:	9c 91       	ld	r25, X
    1bd6:	13 97       	sbiw	r26, 0x03	; 3
    1bd8:	e8 0f       	add	r30, r24
    1bda:	f9 1f       	adc	r31, r25
    1bdc:	00 81       	ld	r16, Z
    1bde:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1be0:	d8 01       	movw	r26, r16
    1be2:	16 96       	adiw	r26, 0x06	; 6
    1be4:	ed 91       	ld	r30, X+
    1be6:	fc 91       	ld	r31, X
    1be8:	17 97       	sbiw	r26, 0x07	; 7
    1bea:	09 95       	icall
    1bec:	68 2f       	mov	r22, r24
    1bee:	8c 2f       	mov	r24, r28
    1bf0:	a6 db       	rcall	.-2228   	; 0x133e <udc_update_iface_desc>
    1bf2:	88 23       	and	r24, r24
    1bf4:	f9 f0       	breq	.+62     	; 0x1c34 <udc_process_setup+0x6e2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1bf6:	d8 01       	movw	r26, r16
    1bf8:	14 96       	adiw	r26, 0x04	; 4
    1bfa:	ed 91       	ld	r30, X+
    1bfc:	fc 91       	ld	r31, X
    1bfe:	15 97       	sbiw	r26, 0x05	; 5
    1c00:	09 95       	icall
    1c02:	81 11       	cpse	r24, r1
    1c04:	17 c0       	rjmp	.+46     	; 0x1c34 <udc_process_setup+0x6e2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c06:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c08:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <udc_ptr_conf>
    1c0c:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <udc_ptr_conf+0x1>
    1c10:	ed 91       	ld	r30, X+
    1c12:	fc 91       	ld	r31, X
    1c14:	11 97       	sbiw	r26, 0x01	; 1
    1c16:	94 81       	ldd	r25, Z+4	; 0x04
    1c18:	c9 17       	cp	r28, r25
    1c1a:	b0 f2       	brcs	.-84     	; 0x1bc8 <udc_process_setup+0x676>
    1c1c:	0b c0       	rjmp	.+22     	; 0x1c34 <udc_process_setup+0x6e2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	09 c0       	rjmp	.+18     	; 0x1c34 <udc_process_setup+0x6e2>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	07 c0       	rjmp	.+14     	; 0x1c34 <udc_process_setup+0x6e2>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <udc_process_setup+0x6e2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <udc_process_setup+0x6e2>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <udc_process_setup+0x6e2>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	08 95       	ret

00001c3e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1c3e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1c40:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1c42:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1c44:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1c46:	60 83       	st	Z, r22
	ret                             // Return to caller
    1c48:	08 95       	ret

00001c4a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1c4a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1c4e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1c50:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1c52:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1c56:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1c58:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1c5c:	08 95       	ret

00001c5e <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1c5e:	81 11       	cpse	r24, r1
    1c60:	22 c0       	rjmp	.+68     	; 0x1ca6 <udd_sleep_mode+0x48>
    1c62:	90 91 64 22 	lds	r25, 0x2264	; 0x802264 <udd_b_idle>
    1c66:	99 23       	and	r25, r25
    1c68:	d9 f0       	breq	.+54     	; 0x1ca0 <udd_sleep_mode+0x42>
    1c6a:	90 91 61 2e 	lds	r25, 0x2E61	; 0x802e61 <sleepmgr_locks+0x1>
    1c6e:	91 11       	cpse	r25, r1
    1c70:	01 c0       	rjmp	.+2      	; 0x1c74 <udd_sleep_mode+0x16>
    1c72:	ff cf       	rjmp	.-2      	; 0x1c72 <udd_sleep_mode+0x14>
    1c74:	2f b7       	in	r18, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	e0 e6       	ldi	r30, 0x60	; 96
    1c7a:	fe e2       	ldi	r31, 0x2E	; 46
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	91 50       	subi	r25, 0x01	; 1
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	2f bf       	out	0x3f, r18	; 63
    1c84:	0d c0       	rjmp	.+26     	; 0x1ca0 <udd_sleep_mode+0x42>
    1c86:	90 91 61 2e 	lds	r25, 0x2E61	; 0x802e61 <sleepmgr_locks+0x1>
    1c8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <udd_sleep_mode+0x32>
    1c8e:	ff cf       	rjmp	.-2      	; 0x1c8e <udd_sleep_mode+0x30>
    1c90:	2f b7       	in	r18, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	e0 e6       	ldi	r30, 0x60	; 96
    1c96:	fe e2       	ldi	r31, 0x2E	; 46
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	9f 5f       	subi	r25, 0xFF	; 255
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	2f bf       	out	0x3f, r18	; 63
    1ca0:	80 93 64 22 	sts	0x2264, r24	; 0x802264 <udd_b_idle>
    1ca4:	08 95       	ret
    1ca6:	90 91 64 22 	lds	r25, 0x2264	; 0x802264 <udd_b_idle>
    1caa:	99 23       	and	r25, r25
    1cac:	61 f3       	breq	.-40     	; 0x1c86 <udd_sleep_mode+0x28>
    1cae:	f8 cf       	rjmp	.-16     	; 0x1ca0 <udd_sleep_mode+0x42>

00001cb0 <udd_ctrl_init>:
    1cb0:	0f 93       	push	r16
    1cb2:	e8 ec       	ldi	r30, 0xC8	; 200
    1cb4:	f4 e0       	ldi	r31, 0x04	; 4
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8f 7d       	andi	r24, 0xDF	; 223
    1cba:	80 83       	st	Z, r24
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8f 7d       	andi	r24, 0xDF	; 223
    1cc0:	80 83       	st	Z, r24
    1cc2:	e8 e2       	ldi	r30, 0x28	; 40
    1cc4:	f2 e2       	ldi	r31, 0x22	; 34
    1cc6:	02 e0       	ldi	r16, 0x02	; 2
    1cc8:	05 93       	las	Z, r16
    1cca:	10 92 2a 22 	sts	0x222A, r1	; 0x80222a <udd_sram+0x1a>
    1cce:	10 92 2b 22 	sts	0x222B, r1	; 0x80222b <udd_sram+0x1b>
    1cd2:	00 e2       	ldi	r16, 0x20	; 32
    1cd4:	06 93       	lac	Z, r16
    1cd6:	00 e4       	ldi	r16, 0x40	; 64
    1cd8:	06 93       	lac	Z, r16
    1cda:	e0 e2       	ldi	r30, 0x20	; 32
    1cdc:	f2 e2       	ldi	r31, 0x22	; 34
    1cde:	00 e2       	ldi	r16, 0x20	; 32
    1ce0:	06 93       	lac	Z, r16
    1ce2:	00 e4       	ldi	r16, 0x40	; 64
    1ce4:	06 93       	lac	Z, r16
    1ce6:	e2 e7       	ldi	r30, 0x72	; 114
    1ce8:	f4 e2       	ldi	r31, 0x24	; 36
    1cea:	14 86       	std	Z+12, r1	; 0x0c
    1cec:	15 86       	std	Z+13, r1	; 0x0d
    1cee:	16 86       	std	Z+14, r1	; 0x0e
    1cf0:	17 86       	std	Z+15, r1	; 0x0f
    1cf2:	12 86       	std	Z+10, r1	; 0x0a
    1cf4:	13 86       	std	Z+11, r1	; 0x0b
    1cf6:	10 92 0f 22 	sts	0x220F, r1	; 0x80220f <udd_ep_control_state>
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <udd_ctrl_stall_data>:
    1cfe:	0f 93       	push	r16
    1d00:	85 e0       	ldi	r24, 0x05	; 5
    1d02:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <udd_ep_control_state>
    1d06:	e9 e2       	ldi	r30, 0x29	; 41
    1d08:	f2 e2       	ldi	r31, 0x22	; 34
    1d0a:	04 e0       	ldi	r16, 0x04	; 4
    1d0c:	05 93       	las	Z, r16
    1d0e:	e1 e2       	ldi	r30, 0x21	; 33
    1d10:	f2 e2       	ldi	r31, 0x22	; 34
    1d12:	04 e0       	ldi	r16, 0x04	; 4
    1d14:	05 93       	las	Z, r16
    1d16:	0f 91       	pop	r16
    1d18:	08 95       	ret

00001d1a <udd_ctrl_send_zlp_in>:
    1d1a:	0f 93       	push	r16
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <udd_ep_control_state>
    1d22:	10 92 2a 22 	sts	0x222A, r1	; 0x80222a <udd_sram+0x1a>
    1d26:	10 92 2b 22 	sts	0x222B, r1	; 0x80222b <udd_sram+0x1b>
    1d2a:	e8 e2       	ldi	r30, 0x28	; 40
    1d2c:	f2 e2       	ldi	r31, 0x22	; 34
    1d2e:	02 e0       	ldi	r16, 0x02	; 2
    1d30:	06 93       	lac	Z, r16
    1d32:	0f 91       	pop	r16
    1d34:	08 95       	ret

00001d36 <udd_ctrl_endofrequest>:
    1d36:	e0 91 7e 24 	lds	r30, 0x247E	; 0x80247e <udd_g_ctrlreq+0xc>
    1d3a:	f0 91 7f 24 	lds	r31, 0x247F	; 0x80247f <udd_g_ctrlreq+0xd>
    1d3e:	30 97       	sbiw	r30, 0x00	; 0
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <udd_ctrl_endofrequest+0xe>
    1d42:	09 95       	icall
    1d44:	08 95       	ret

00001d46 <udd_ctrl_in_sent>:
    1d46:	0f 93       	push	r16
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <udd_ep_control_state>
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	19 f4       	brne	.+6      	; 0x1d5a <udd_ctrl_in_sent+0x14>
    1d54:	f0 df       	rcall	.-32     	; 0x1d36 <udd_ctrl_endofrequest>
    1d56:	ac df       	rcall	.-168    	; 0x1cb0 <udd_ctrl_init>
    1d58:	5e c0       	rjmp	.+188    	; 0x1e16 <udd_ctrl_in_sent+0xd0>
    1d5a:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ctrl_payload_nb_trans>
    1d5e:	90 91 0c 22 	lds	r25, 0x220C	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>
    1d62:	c0 91 7c 24 	lds	r28, 0x247C	; 0x80247c <udd_g_ctrlreq+0xa>
    1d66:	d0 91 7d 24 	lds	r29, 0x247D	; 0x80247d <udd_g_ctrlreq+0xb>
    1d6a:	c8 1b       	sub	r28, r24
    1d6c:	d9 0b       	sbc	r29, r25
    1d6e:	71 f5       	brne	.+92     	; 0x1dcc <udd_ctrl_in_sent+0x86>
    1d70:	20 91 0d 22 	lds	r18, 0x220D	; 0x80220d <udd_ctrl_prev_payload_nb_trans>
    1d74:	30 91 0e 22 	lds	r19, 0x220E	; 0x80220e <udd_ctrl_prev_payload_nb_trans+0x1>
    1d78:	82 0f       	add	r24, r18
    1d7a:	93 1f       	adc	r25, r19
    1d7c:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ctrl_prev_payload_nb_trans>
    1d80:	90 93 0e 22 	sts	0x220E, r25	; 0x80220e <udd_ctrl_prev_payload_nb_trans+0x1>
    1d84:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1d88:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1d8c:	82 17       	cp	r24, r18
    1d8e:	93 07       	cpc	r25, r19
    1d90:	21 f0       	breq	.+8      	; 0x1d9a <udd_ctrl_in_sent+0x54>
    1d92:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <b_shortpacket.5272>
    1d96:	88 23       	and	r24, r24
    1d98:	41 f0       	breq	.+16     	; 0x1daa <udd_ctrl_in_sent+0x64>
    1d9a:	84 e0       	ldi	r24, 0x04	; 4
    1d9c:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <udd_ep_control_state>
    1da0:	e0 e2       	ldi	r30, 0x20	; 32
    1da2:	f2 e2       	ldi	r31, 0x22	; 34
    1da4:	02 e0       	ldi	r16, 0x02	; 2
    1da6:	06 93       	lac	Z, r16
    1da8:	36 c0       	rjmp	.+108    	; 0x1e16 <udd_ctrl_in_sent+0xd0>
    1daa:	e0 91 80 24 	lds	r30, 0x2480	; 0x802480 <udd_g_ctrlreq+0xe>
    1dae:	f0 91 81 24 	lds	r31, 0x2481	; 0x802481 <udd_g_ctrlreq+0xf>
    1db2:	30 97       	sbiw	r30, 0x00	; 0
    1db4:	99 f0       	breq	.+38     	; 0x1ddc <udd_ctrl_in_sent+0x96>
    1db6:	09 95       	icall
    1db8:	88 23       	and	r24, r24
    1dba:	81 f0       	breq	.+32     	; 0x1ddc <udd_ctrl_in_sent+0x96>
    1dbc:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ctrl_payload_nb_trans>
    1dc0:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>
    1dc4:	c0 91 7c 24 	lds	r28, 0x247C	; 0x80247c <udd_g_ctrlreq+0xa>
    1dc8:	d0 91 7d 24 	lds	r29, 0x247D	; 0x80247d <udd_g_ctrlreq+0xb>
    1dcc:	c0 34       	cpi	r28, 0x40	; 64
    1dce:	d1 05       	cpc	r29, r1
    1dd0:	28 f0       	brcs	.+10     	; 0x1ddc <udd_ctrl_in_sent+0x96>
    1dd2:	10 92 d4 20 	sts	0x20D4, r1	; 0x8020d4 <b_shortpacket.5272>
    1dd6:	c0 e4       	ldi	r28, 0x40	; 64
    1dd8:	d0 e0       	ldi	r29, 0x00	; 0
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <udd_ctrl_in_sent+0x9c>
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <b_shortpacket.5272>
    1de2:	e0 e1       	ldi	r30, 0x10	; 16
    1de4:	f2 e2       	ldi	r31, 0x22	; 34
    1de6:	c2 8f       	std	Z+26, r28	; 0x1a
    1de8:	d3 8f       	std	Z+27, r29	; 0x1b
    1dea:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ctrl_payload_nb_trans>
    1dee:	90 91 0c 22 	lds	r25, 0x220C	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>
    1df2:	20 91 7a 24 	lds	r18, 0x247A	; 0x80247a <udd_g_ctrlreq+0x8>
    1df6:	30 91 7b 24 	lds	r19, 0x247B	; 0x80247b <udd_g_ctrlreq+0x9>
    1dfa:	28 0f       	add	r18, r24
    1dfc:	39 1f       	adc	r19, r25
    1dfe:	24 8f       	std	Z+28, r18	; 0x1c
    1e00:	35 8f       	std	Z+29, r19	; 0x1d
    1e02:	c8 0f       	add	r28, r24
    1e04:	d9 1f       	adc	r29, r25
    1e06:	c0 93 0b 22 	sts	0x220B, r28	; 0x80220b <udd_ctrl_payload_nb_trans>
    1e0a:	d0 93 0c 22 	sts	0x220C, r29	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>
    1e0e:	e8 e2       	ldi	r30, 0x28	; 40
    1e10:	f2 e2       	ldi	r31, 0x22	; 34
    1e12:	02 e0       	ldi	r16, 0x02	; 2
    1e14:	06 93       	lac	Z, r16
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

00001e1e <udd_ep_get_size>:
    1e1e:	fc 01       	movw	r30, r24
    1e20:	81 81       	ldd	r24, Z+1	; 0x01
    1e22:	e8 2f       	mov	r30, r24
    1e24:	e7 70       	andi	r30, 0x07	; 7
    1e26:	8e 2f       	mov	r24, r30
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	31 97       	sbiw	r30, 0x01	; 1
    1e2e:	e7 30       	cpi	r30, 0x07	; 7
    1e30:	f1 05       	cpc	r31, r1
    1e32:	c0 f4       	brcc	.+48     	; 0x1e64 <udd_ep_get_size+0x46>
    1e34:	e2 5e       	subi	r30, 0xE2	; 226
    1e36:	fe 4f       	sbci	r31, 0xFE	; 254
    1e38:	8d c6       	rjmp	.+3354   	; 0x2b54 <__tablejump2__>
    1e3a:	80 e1       	ldi	r24, 0x10	; 16
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	08 95       	ret
    1e40:	80 e2       	ldi	r24, 0x20	; 32
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	08 95       	ret
    1e46:	80 e4       	ldi	r24, 0x40	; 64
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	08 95       	ret
    1e4c:	80 e8       	ldi	r24, 0x80	; 128
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	08 95       	ret
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	08 95       	ret
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	92 e0       	ldi	r25, 0x02	; 2
    1e5c:	08 95       	ret
    1e5e:	8f ef       	ldi	r24, 0xFF	; 255
    1e60:	93 e0       	ldi	r25, 0x03	; 3
    1e62:	08 95       	ret
    1e64:	88 e0       	ldi	r24, 0x08	; 8
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	08 95       	ret

00001e6a <udd_ep_get_job>:
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	2f 70       	andi	r18, 0x0F	; 15
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	22 0f       	add	r18, r18
    1e72:	33 1f       	adc	r19, r19
    1e74:	08 2e       	mov	r0, r24
    1e76:	00 0c       	add	r0, r0
    1e78:	99 0b       	sbc	r25, r25
    1e7a:	88 27       	eor	r24, r24
    1e7c:	99 0f       	add	r25, r25
    1e7e:	88 1f       	adc	r24, r24
    1e80:	99 27       	eor	r25, r25
    1e82:	82 0f       	add	r24, r18
    1e84:	93 1f       	adc	r25, r19
    1e86:	02 97       	sbiw	r24, 0x02	; 2
    1e88:	9c 01       	movw	r18, r24
    1e8a:	22 0f       	add	r18, r18
    1e8c:	33 1f       	adc	r19, r19
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	82 0f       	add	r24, r18
    1e98:	93 1f       	adc	r25, r19
    1e9a:	8b 56       	subi	r24, 0x6B	; 107
    1e9c:	9e 4d       	sbci	r25, 0xDE	; 222
    1e9e:	08 95       	ret

00001ea0 <udd_ctrl_interrupt_tc_setup>:
    1ea0:	0f 93       	push	r16
    1ea2:	cf 93       	push	r28
    1ea4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1ea8:	80 ff       	sbrs	r24, 0
    1eaa:	62 c0       	rjmp	.+196    	; 0x1f70 <udd_ctrl_interrupt_tc_setup+0xd0>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1eb2:	e0 e2       	ldi	r30, 0x20	; 32
    1eb4:	f2 e2       	ldi	r31, 0x22	; 34
    1eb6:	00 e8       	ldi	r16, 0x80	; 128
    1eb8:	06 93       	lac	Z, r16
    1eba:	e8 e2       	ldi	r30, 0x28	; 40
    1ebc:	f2 e2       	ldi	r31, 0x22	; 34
    1ebe:	00 e8       	ldi	r16, 0x80	; 128
    1ec0:	06 93       	lac	Z, r16
    1ec2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1ec6:	e0 e2       	ldi	r30, 0x20	; 32
    1ec8:	f2 e2       	ldi	r31, 0x22	; 34
    1eca:	00 e1       	ldi	r16, 0x10	; 16
    1ecc:	06 93       	lac	Z, r16
    1ece:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <udd_ep_control_state>
    1ed2:	88 23       	and	r24, r24
    1ed4:	29 f0       	breq	.+10     	; 0x1ee0 <udd_ctrl_interrupt_tc_setup+0x40>
    1ed6:	83 50       	subi	r24, 0x03	; 3
    1ed8:	82 30       	cpi	r24, 0x02	; 2
    1eda:	08 f4       	brcc	.+2      	; 0x1ede <udd_ctrl_interrupt_tc_setup+0x3e>
    1edc:	2c df       	rcall	.-424    	; 0x1d36 <udd_ctrl_endofrequest>
    1ede:	e8 de       	rcall	.-560    	; 0x1cb0 <udd_ctrl_init>
    1ee0:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udd_sram+0x12>
    1ee4:	90 91 23 22 	lds	r25, 0x2223	; 0x802223 <udd_sram+0x13>
    1ee8:	08 97       	sbiw	r24, 0x08	; 8
    1eea:	09 f0       	breq	.+2      	; 0x1eee <udd_ctrl_interrupt_tc_setup+0x4e>
    1eec:	43 c0       	rjmp	.+134    	; 0x1f74 <udd_ctrl_interrupt_tc_setup+0xd4>
    1eee:	88 e0       	ldi	r24, 0x08	; 8
    1ef0:	eb ec       	ldi	r30, 0xCB	; 203
    1ef2:	f1 e2       	ldi	r31, 0x21	; 33
    1ef4:	a2 e7       	ldi	r26, 0x72	; 114
    1ef6:	b4 e2       	ldi	r27, 0x24	; 36
    1ef8:	01 90       	ld	r0, Z+
    1efa:	0d 92       	st	X+, r0
    1efc:	8a 95       	dec	r24
    1efe:	e1 f7       	brne	.-8      	; 0x1ef8 <udd_ctrl_interrupt_tc_setup+0x58>
    1f00:	e8 ec       	ldi	r30, 0xC8	; 200
    1f02:	f4 e0       	ldi	r31, 0x04	; 4
    1f04:	80 81       	ld	r24, Z
    1f06:	80 62       	ori	r24, 0x20	; 32
    1f08:	80 83       	st	Z, r24
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 62       	ori	r24, 0x20	; 32
    1f0e:	80 83       	st	Z, r24
    1f10:	20 db       	rcall	.-2496   	; 0x1552 <udc_process_setup>
    1f12:	c8 2f       	mov	r28, r24
    1f14:	81 11       	cpse	r24, r1
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <udd_ctrl_interrupt_tc_setup+0x7e>
    1f18:	f2 de       	rcall	.-540    	; 0x1cfe <udd_ctrl_stall_data>
    1f1a:	c1 e0       	ldi	r28, 0x01	; 1
    1f1c:	2c c0       	rjmp	.+88     	; 0x1f76 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f1e:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    1f22:	88 23       	and	r24, r24
    1f24:	6c f4       	brge	.+26     	; 0x1f40 <udd_ctrl_interrupt_tc_setup+0xa0>
    1f26:	10 92 0d 22 	sts	0x220D, r1	; 0x80220d <udd_ctrl_prev_payload_nb_trans>
    1f2a:	10 92 0e 22 	sts	0x220E, r1	; 0x80220e <udd_ctrl_prev_payload_nb_trans+0x1>
    1f2e:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ctrl_payload_nb_trans>
    1f32:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <udd_ep_control_state>
    1f3c:	04 df       	rcall	.-504    	; 0x1d46 <udd_ctrl_in_sent>
    1f3e:	1b c0       	rjmp	.+54     	; 0x1f76 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f40:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1f44:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1f48:	89 2b       	or	r24, r25
    1f4a:	11 f4       	brne	.+4      	; 0x1f50 <udd_ctrl_interrupt_tc_setup+0xb0>
    1f4c:	e6 de       	rcall	.-564    	; 0x1d1a <udd_ctrl_send_zlp_in>
    1f4e:	13 c0       	rjmp	.+38     	; 0x1f76 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f50:	10 92 0d 22 	sts	0x220D, r1	; 0x80220d <udd_ctrl_prev_payload_nb_trans>
    1f54:	10 92 0e 22 	sts	0x220E, r1	; 0x80220e <udd_ctrl_prev_payload_nb_trans+0x1>
    1f58:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ctrl_payload_nb_trans>
    1f5c:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <udd_ep_control_state>
    1f66:	e0 e2       	ldi	r30, 0x20	; 32
    1f68:	f2 e2       	ldi	r31, 0x22	; 34
    1f6a:	02 e0       	ldi	r16, 0x02	; 2
    1f6c:	06 93       	lac	Z, r16
    1f6e:	03 c0       	rjmp	.+6      	; 0x1f76 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f70:	c0 e0       	ldi	r28, 0x00	; 0
    1f72:	01 c0       	rjmp	.+2      	; 0x1f76 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f74:	c1 e0       	ldi	r28, 0x01	; 1
    1f76:	8c 2f       	mov	r24, r28
    1f78:	cf 91       	pop	r28
    1f7a:	0f 91       	pop	r16
    1f7c:	08 95       	ret

00001f7e <udd_ep_trans_complet>:
    1f7e:	8f 92       	push	r8
    1f80:	9f 92       	push	r9
    1f82:	af 92       	push	r10
    1f84:	bf 92       	push	r11
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	d8 2e       	mov	r13, r24
    1f96:	69 df       	rcall	.-302    	; 0x1e6a <udd_ep_get_job>
    1f98:	8c 01       	movw	r16, r24
    1f9a:	bd 2c       	mov	r11, r13
    1f9c:	bb 1c       	adc	r11, r11
    1f9e:	bb 24       	eor	r11, r11
    1fa0:	bb 1c       	adc	r11, r11
    1fa2:	cd 2d       	mov	r28, r13
    1fa4:	cf 70       	andi	r28, 0x0F	; 15
    1fa6:	d0 e0       	ldi	r29, 0x00	; 0
    1fa8:	cc 0f       	add	r28, r28
    1faa:	dd 1f       	adc	r29, r29
    1fac:	cb 0d       	add	r28, r11
    1fae:	d1 1d       	adc	r29, r1
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	9c 01       	movw	r18, r24
    1fc0:	20 5e       	subi	r18, 0xE0	; 224
    1fc2:	3d 4d       	sbci	r19, 0xDD	; 221
    1fc4:	79 01       	movw	r14, r18
    1fc6:	c9 01       	movw	r24, r18
    1fc8:	2a df       	rcall	.-428    	; 0x1e1e <udd_ep_get_size>
    1fca:	4c 01       	movw	r8, r24
    1fcc:	bb 20       	and	r11, r11
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <udd_ep_trans_complet+0x54>
    1fd0:	70 c0       	rjmp	.+224    	; 0x20b2 <udd_ep_trans_complet+0x134>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ee 0f       	add	r30, r30
    1fd6:	ff 1f       	adc	r31, r31
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	ee 0f       	add	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	e0 5f       	subi	r30, 0xF0	; 240
    1fe2:	fd 4d       	sbci	r31, 0xDD	; 221
    1fe4:	26 89       	ldd	r18, Z+22	; 0x16
    1fe6:	37 89       	ldd	r19, Z+23	; 0x17
    1fe8:	d8 01       	movw	r26, r16
    1fea:	15 96       	adiw	r26, 0x05	; 5
    1fec:	8d 91       	ld	r24, X+
    1fee:	9c 91       	ld	r25, X
    1ff0:	16 97       	sbiw	r26, 0x06	; 6
    1ff2:	82 0f       	add	r24, r18
    1ff4:	93 1f       	adc	r25, r19
    1ff6:	15 96       	adiw	r26, 0x05	; 5
    1ff8:	8d 93       	st	X+, r24
    1ffa:	9c 93       	st	X, r25
    1ffc:	16 97       	sbiw	r26, 0x06	; 6
    1ffe:	13 96       	adiw	r26, 0x03	; 3
    2000:	2d 91       	ld	r18, X+
    2002:	3c 91       	ld	r19, X
    2004:	14 97       	sbiw	r26, 0x04	; 4
    2006:	82 17       	cp	r24, r18
    2008:	93 07       	cpc	r25, r19
    200a:	09 f4       	brne	.+2      	; 0x200e <udd_ep_trans_complet+0x90>
    200c:	3c c0       	rjmp	.+120    	; 0x2086 <udd_ep_trans_complet+0x108>
    200e:	28 1b       	sub	r18, r24
    2010:	39 0b       	sbc	r19, r25
    2012:	21 15       	cp	r18, r1
    2014:	b4 e0       	ldi	r27, 0x04	; 4
    2016:	3b 07       	cpc	r19, r27
    2018:	38 f0       	brcs	.+14     	; 0x2028 <udd_ep_trans_complet+0xaa>
    201a:	2f ef       	ldi	r18, 0xFF	; 255
    201c:	33 e0       	ldi	r19, 0x03	; 3
    201e:	c9 01       	movw	r24, r18
    2020:	b4 01       	movw	r22, r8
    2022:	71 d5       	rcall	.+2786   	; 0x2b06 <__udivmodhi4>
    2024:	28 1b       	sub	r18, r24
    2026:	39 0b       	sbc	r19, r25
    2028:	f8 01       	movw	r30, r16
    202a:	80 81       	ld	r24, Z
    202c:	81 ff       	sbrs	r24, 1
    202e:	09 c0       	rjmp	.+18     	; 0x2042 <udd_ep_trans_complet+0xc4>
    2030:	c9 01       	movw	r24, r18
    2032:	b4 01       	movw	r22, r8
    2034:	68 d5       	rcall	.+2768   	; 0x2b06 <__udivmodhi4>
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	89 2b       	or	r24, r25
    203a:	09 f0       	breq	.+2      	; 0x203e <udd_ep_trans_complet+0xc0>
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	84 2f       	mov	r24, r20
    2040:	01 c0       	rjmp	.+2      	; 0x2044 <udd_ep_trans_complet+0xc6>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	d8 01       	movw	r26, r16
    2046:	9c 91       	ld	r25, X
    2048:	80 fb       	bst	r24, 0
    204a:	91 f9       	bld	r25, 1
    204c:	9c 93       	st	X, r25
    204e:	cc 0f       	add	r28, r28
    2050:	dd 1f       	adc	r29, r29
    2052:	cc 0f       	add	r28, r28
    2054:	dd 1f       	adc	r29, r29
    2056:	cc 0f       	add	r28, r28
    2058:	dd 1f       	adc	r29, r29
    205a:	c0 5f       	subi	r28, 0xF0	; 240
    205c:	dd 4d       	sbci	r29, 0xDD	; 221
    205e:	1e 8a       	std	Y+22, r1	; 0x16
    2060:	1f 8a       	std	Y+23, r1	; 0x17
    2062:	2a 8b       	std	Y+18, r18	; 0x12
    2064:	3b 8b       	std	Y+19, r19	; 0x13
    2066:	11 96       	adiw	r26, 0x01	; 1
    2068:	2d 91       	ld	r18, X+
    206a:	3c 91       	ld	r19, X
    206c:	12 97       	sbiw	r26, 0x02	; 2
    206e:	15 96       	adiw	r26, 0x05	; 5
    2070:	8d 91       	ld	r24, X+
    2072:	9c 91       	ld	r25, X
    2074:	16 97       	sbiw	r26, 0x06	; 6
    2076:	82 0f       	add	r24, r18
    2078:	93 1f       	adc	r25, r19
    207a:	8c 8b       	std	Y+20, r24	; 0x14
    207c:	9d 8b       	std	Y+21, r25	; 0x15
    207e:	f7 01       	movw	r30, r14
    2080:	02 e0       	ldi	r16, 0x02	; 2
    2082:	06 93       	lac	Z, r16
    2084:	ca c0       	rjmp	.+404    	; 0x221a <udd_ep_trans_complet+0x29c>
    2086:	d8 01       	movw	r26, r16
    2088:	8c 91       	ld	r24, X
    208a:	81 ff       	sbrs	r24, 1
    208c:	b3 c0       	rjmp	.+358    	; 0x21f4 <udd_ep_trans_complet+0x276>
    208e:	8d 7f       	andi	r24, 0xFD	; 253
    2090:	8c 93       	st	X, r24
    2092:	cc 0f       	add	r28, r28
    2094:	dd 1f       	adc	r29, r29
    2096:	cc 0f       	add	r28, r28
    2098:	dd 1f       	adc	r29, r29
    209a:	cc 0f       	add	r28, r28
    209c:	dd 1f       	adc	r29, r29
    209e:	c0 5f       	subi	r28, 0xF0	; 240
    20a0:	dd 4d       	sbci	r29, 0xDD	; 221
    20a2:	1e 8a       	std	Y+22, r1	; 0x16
    20a4:	1f 8a       	std	Y+23, r1	; 0x17
    20a6:	1a 8a       	std	Y+18, r1	; 0x12
    20a8:	1b 8a       	std	Y+19, r1	; 0x13
    20aa:	f7 01       	movw	r30, r14
    20ac:	02 e0       	ldi	r16, 0x02	; 2
    20ae:	06 93       	lac	Z, r16
    20b0:	b4 c0       	rjmp	.+360    	; 0x221a <udd_ep_trans_complet+0x29c>
    20b2:	fe 01       	movw	r30, r28
    20b4:	ee 0f       	add	r30, r30
    20b6:	ff 1f       	adc	r31, r31
    20b8:	ee 0f       	add	r30, r30
    20ba:	ff 1f       	adc	r31, r31
    20bc:	ee 0f       	add	r30, r30
    20be:	ff 1f       	adc	r31, r31
    20c0:	e0 5f       	subi	r30, 0xF0	; 240
    20c2:	fd 4d       	sbci	r31, 0xDD	; 221
    20c4:	a2 88       	ldd	r10, Z+18	; 0x12
    20c6:	b3 88       	ldd	r11, Z+19	; 0x13
    20c8:	d8 01       	movw	r26, r16
    20ca:	8c 91       	ld	r24, X
    20cc:	82 ff       	sbrs	r24, 2
    20ce:	19 c0       	rjmp	.+50     	; 0x2102 <udd_ep_trans_complet+0x184>
    20d0:	11 96       	adiw	r26, 0x01	; 1
    20d2:	ed 91       	ld	r30, X+
    20d4:	fc 91       	ld	r31, X
    20d6:	12 97       	sbiw	r26, 0x02	; 2
    20d8:	15 96       	adiw	r26, 0x05	; 5
    20da:	2d 91       	ld	r18, X+
    20dc:	3c 91       	ld	r19, X
    20de:	16 97       	sbiw	r26, 0x06	; 6
    20e0:	13 96       	adiw	r26, 0x03	; 3
    20e2:	8d 91       	ld	r24, X+
    20e4:	9c 91       	ld	r25, X
    20e6:	14 97       	sbiw	r26, 0x04	; 4
    20e8:	b4 01       	movw	r22, r8
    20ea:	0d d5       	rcall	.+2586   	; 0x2b06 <__udivmodhi4>
    20ec:	b0 e4       	ldi	r27, 0x40	; 64
    20ee:	db 9e       	mul	r13, r27
    20f0:	b0 01       	movw	r22, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	6b 56       	subi	r22, 0x6B	; 107
    20f6:	7f 4d       	sbci	r23, 0xDF	; 223
    20f8:	ac 01       	movw	r20, r24
    20fa:	cf 01       	movw	r24, r30
    20fc:	82 0f       	add	r24, r18
    20fe:	93 1f       	adc	r25, r19
    2100:	2f d5       	rcall	.+2654   	; 0x2b60 <memcpy>
    2102:	f8 01       	movw	r30, r16
    2104:	25 81       	ldd	r18, Z+5	; 0x05
    2106:	36 81       	ldd	r19, Z+6	; 0x06
    2108:	2a 0d       	add	r18, r10
    210a:	3b 1d       	adc	r19, r11
    210c:	25 83       	std	Z+5, r18	; 0x05
    210e:	36 83       	std	Z+6, r19	; 0x06
    2110:	83 81       	ldd	r24, Z+3	; 0x03
    2112:	94 81       	ldd	r25, Z+4	; 0x04
    2114:	82 17       	cp	r24, r18
    2116:	93 07       	cpc	r25, r19
    2118:	68 f4       	brcc	.+26     	; 0x2134 <udd_ep_trans_complet+0x1b6>
    211a:	85 83       	std	Z+5, r24	; 0x05
    211c:	96 83       	std	Z+6, r25	; 0x06
    211e:	cc 0f       	add	r28, r28
    2120:	dd 1f       	adc	r29, r29
    2122:	cc 0f       	add	r28, r28
    2124:	dd 1f       	adc	r29, r29
    2126:	cc 0f       	add	r28, r28
    2128:	dd 1f       	adc	r29, r29
    212a:	c0 5f       	subi	r28, 0xF0	; 240
    212c:	dd 4d       	sbci	r29, 0xDD	; 221
    212e:	8e 89       	ldd	r24, Y+22	; 0x16
    2130:	9f 89       	ldd	r25, Y+23	; 0x17
    2132:	60 c0       	rjmp	.+192    	; 0x21f4 <udd_ep_trans_complet+0x276>
    2134:	fe 01       	movw	r30, r28
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	e0 5f       	subi	r30, 0xF0	; 240
    2144:	fd 4d       	sbci	r31, 0xDD	; 221
    2146:	46 89       	ldd	r20, Z+22	; 0x16
    2148:	57 89       	ldd	r21, Z+23	; 0x17
    214a:	4a 15       	cp	r20, r10
    214c:	5b 05       	cpc	r21, r11
    214e:	09 f0       	breq	.+2      	; 0x2152 <udd_ep_trans_complet+0x1d4>
    2150:	51 c0       	rjmp	.+162    	; 0x21f4 <udd_ep_trans_complet+0x276>
    2152:	28 17       	cp	r18, r24
    2154:	39 07       	cpc	r19, r25
    2156:	09 f4       	brne	.+2      	; 0x215a <udd_ep_trans_complet+0x1dc>
    2158:	4d c0       	rjmp	.+154    	; 0x21f4 <udd_ep_trans_complet+0x276>
    215a:	ac 01       	movw	r20, r24
    215c:	42 1b       	sub	r20, r18
    215e:	53 0b       	sbc	r21, r19
    2160:	9a 01       	movw	r18, r20
    2162:	21 15       	cp	r18, r1
    2164:	54 e0       	ldi	r21, 0x04	; 4
    2166:	35 07       	cpc	r19, r21
    2168:	50 f0       	brcs	.+20     	; 0x217e <udd_ep_trans_complet+0x200>
    216a:	2f ef       	ldi	r18, 0xFF	; 255
    216c:	33 e0       	ldi	r19, 0x03	; 3
    216e:	c9 01       	movw	r24, r18
    2170:	b4 01       	movw	r22, r8
    2172:	c9 d4       	rcall	.+2450   	; 0x2b06 <__udivmodhi4>
    2174:	d9 01       	movw	r26, r18
    2176:	a8 1b       	sub	r26, r24
    2178:	b9 0b       	sbc	r27, r25
    217a:	cd 01       	movw	r24, r26
    217c:	07 c0       	rjmp	.+14     	; 0x218c <udd_ep_trans_complet+0x20e>
    217e:	c9 01       	movw	r24, r18
    2180:	b4 01       	movw	r22, r8
    2182:	c1 d4       	rcall	.+2434   	; 0x2b06 <__udivmodhi4>
    2184:	f9 01       	movw	r30, r18
    2186:	e8 1b       	sub	r30, r24
    2188:	f9 0b       	sbc	r31, r25
    218a:	cf 01       	movw	r24, r30
    218c:	fe 01       	movw	r30, r28
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	e0 5f       	subi	r30, 0xF0	; 240
    219c:	fd 4d       	sbci	r31, 0xDD	; 221
    219e:	12 8a       	std	Z+18, r1	; 0x12
    21a0:	13 8a       	std	Z+19, r1	; 0x13
    21a2:	88 15       	cp	r24, r8
    21a4:	99 05       	cpc	r25, r9
    21a6:	78 f4       	brcc	.+30     	; 0x21c6 <udd_ep_trans_complet+0x248>
    21a8:	d8 01       	movw	r26, r16
    21aa:	8c 91       	ld	r24, X
    21ac:	84 60       	ori	r24, 0x04	; 4
    21ae:	8c 93       	st	X, r24
    21b0:	b0 e4       	ldi	r27, 0x40	; 64
    21b2:	db 9e       	mul	r13, r27
    21b4:	c0 01       	movw	r24, r0
    21b6:	11 24       	eor	r1, r1
    21b8:	8b 56       	subi	r24, 0x6B	; 107
    21ba:	9f 4d       	sbci	r25, 0xDF	; 223
    21bc:	84 8b       	std	Z+20, r24	; 0x14
    21be:	95 8b       	std	Z+21, r25	; 0x15
    21c0:	86 8a       	std	Z+22, r8	; 0x16
    21c2:	97 8a       	std	Z+23, r9	; 0x17
    21c4:	13 c0       	rjmp	.+38     	; 0x21ec <udd_ep_trans_complet+0x26e>
    21c6:	f8 01       	movw	r30, r16
    21c8:	41 81       	ldd	r20, Z+1	; 0x01
    21ca:	52 81       	ldd	r21, Z+2	; 0x02
    21cc:	25 81       	ldd	r18, Z+5	; 0x05
    21ce:	36 81       	ldd	r19, Z+6	; 0x06
    21d0:	24 0f       	add	r18, r20
    21d2:	35 1f       	adc	r19, r21
    21d4:	cc 0f       	add	r28, r28
    21d6:	dd 1f       	adc	r29, r29
    21d8:	cc 0f       	add	r28, r28
    21da:	dd 1f       	adc	r29, r29
    21dc:	cc 0f       	add	r28, r28
    21de:	dd 1f       	adc	r29, r29
    21e0:	c0 5f       	subi	r28, 0xF0	; 240
    21e2:	dd 4d       	sbci	r29, 0xDD	; 221
    21e4:	2c 8b       	std	Y+20, r18	; 0x14
    21e6:	3d 8b       	std	Y+21, r19	; 0x15
    21e8:	8e 8b       	std	Y+22, r24	; 0x16
    21ea:	9f 8b       	std	Y+23, r25	; 0x17
    21ec:	f7 01       	movw	r30, r14
    21ee:	02 e0       	ldi	r16, 0x02	; 2
    21f0:	06 93       	lac	Z, r16
    21f2:	13 c0       	rjmp	.+38     	; 0x221a <udd_ep_trans_complet+0x29c>
    21f4:	d8 01       	movw	r26, r16
    21f6:	8c 91       	ld	r24, X
    21f8:	80 ff       	sbrs	r24, 0
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <udd_ep_trans_complet+0x29c>
    21fc:	8e 7f       	andi	r24, 0xFE	; 254
    21fe:	8c 93       	st	X, r24
    2200:	17 96       	adiw	r26, 0x07	; 7
    2202:	ed 91       	ld	r30, X+
    2204:	fc 91       	ld	r31, X
    2206:	18 97       	sbiw	r26, 0x08	; 8
    2208:	30 97       	sbiw	r30, 0x00	; 0
    220a:	39 f0       	breq	.+14     	; 0x221a <udd_ep_trans_complet+0x29c>
    220c:	15 96       	adiw	r26, 0x05	; 5
    220e:	6d 91       	ld	r22, X+
    2210:	7c 91       	ld	r23, X
    2212:	16 97       	sbiw	r26, 0x06	; 6
    2214:	4d 2d       	mov	r20, r13
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	09 95       	icall
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	bf 90       	pop	r11
    222a:	af 90       	pop	r10
    222c:	9f 90       	pop	r9
    222e:	8f 90       	pop	r8
    2230:	08 95       	ret

00002232 <udd_attach>:
    2232:	cf 93       	push	r28
    2234:	cf b7       	in	r28, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	11 dd       	rcall	.-1502   	; 0x1c5e <udd_sleep_mode>
    223c:	ea ec       	ldi	r30, 0xCA	; 202
    223e:	f4 e0       	ldi	r31, 0x04	; 4
    2240:	80 e4       	ldi	r24, 0x40	; 64
    2242:	80 83       	st	Z, r24
    2244:	80 e2       	ldi	r24, 0x20	; 32
    2246:	80 83       	st	Z, r24
    2248:	e1 ec       	ldi	r30, 0xC1	; 193
    224a:	f4 e0       	ldi	r31, 0x04	; 4
    224c:	80 81       	ld	r24, Z
    224e:	81 60       	ori	r24, 0x01	; 1
    2250:	80 83       	st	Z, r24
    2252:	a9 ec       	ldi	r26, 0xC9	; 201
    2254:	b4 e0       	ldi	r27, 0x04	; 4
    2256:	8c 91       	ld	r24, X
    2258:	82 60       	ori	r24, 0x02	; 2
    225a:	8c 93       	st	X, r24
    225c:	e8 ec       	ldi	r30, 0xC8	; 200
    225e:	f4 e0       	ldi	r31, 0x04	; 4
    2260:	80 81       	ld	r24, Z
    2262:	80 64       	ori	r24, 0x40	; 64
    2264:	80 83       	st	Z, r24
    2266:	8c 91       	ld	r24, X
    2268:	81 60       	ori	r24, 0x01	; 1
    226a:	8c 93       	st	X, r24
    226c:	80 81       	ld	r24, Z
    226e:	80 68       	ori	r24, 0x80	; 128
    2270:	80 83       	st	Z, r24
    2272:	cf bf       	out	0x3f, r28	; 63
    2274:	cf 91       	pop	r28
    2276:	08 95       	ret

00002278 <udd_enable>:
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	c0 e6       	ldi	r28, 0x60	; 96
    227e:	d0 e0       	ldi	r29, 0x00	; 0
    2280:	18 82       	st	Y, r1
    2282:	80 e3       	ldi	r24, 0x30	; 48
    2284:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <sysclk_enable_usb>
    2288:	e0 ec       	ldi	r30, 0xC0	; 192
    228a:	f4 e0       	ldi	r31, 0x04	; 4
    228c:	80 81       	ld	r24, Z
    228e:	80 64       	ori	r24, 0x40	; 64
    2290:	80 83       	st	Z, r24
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	88 83       	st	Y, r24
    2296:	cf b7       	in	r28, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	fc 01       	movw	r30, r24
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	ee 0f       	add	r30, r30
    22a6:	ff 1f       	adc	r31, r31
    22a8:	ee 0f       	add	r30, r30
    22aa:	ff 1f       	adc	r31, r31
    22ac:	e0 5f       	subi	r30, 0xF0	; 240
    22ae:	fd 4d       	sbci	r31, 0xDD	; 221
    22b0:	11 8a       	std	Z+17, r1	; 0x11
    22b2:	01 96       	adiw	r24, 0x01	; 1
    22b4:	88 30       	cpi	r24, 0x08	; 8
    22b6:	91 05       	cpc	r25, r1
    22b8:	91 f7       	brne	.-28     	; 0x229e <udd_enable+0x26>
    22ba:	e5 e9       	ldi	r30, 0x95	; 149
    22bc:	f1 e2       	ldi	r31, 0x21	; 33
    22be:	80 81       	ld	r24, Z
    22c0:	8e 7f       	andi	r24, 0xFE	; 254
    22c2:	80 83       	st	Z, r24
    22c4:	ee e9       	ldi	r30, 0x9E	; 158
    22c6:	f1 e2       	ldi	r31, 0x21	; 33
    22c8:	80 81       	ld	r24, Z
    22ca:	8e 7f       	andi	r24, 0xFE	; 254
    22cc:	80 83       	st	Z, r24
    22ce:	e7 ea       	ldi	r30, 0xA7	; 167
    22d0:	f1 e2       	ldi	r31, 0x21	; 33
    22d2:	80 81       	ld	r24, Z
    22d4:	8e 7f       	andi	r24, 0xFE	; 254
    22d6:	80 83       	st	Z, r24
    22d8:	e0 eb       	ldi	r30, 0xB0	; 176
    22da:	f1 e2       	ldi	r31, 0x21	; 33
    22dc:	80 81       	ld	r24, Z
    22de:	8e 7f       	andi	r24, 0xFE	; 254
    22e0:	80 83       	st	Z, r24
    22e2:	e9 eb       	ldi	r30, 0xB9	; 185
    22e4:	f1 e2       	ldi	r31, 0x21	; 33
    22e6:	80 81       	ld	r24, Z
    22e8:	8e 7f       	andi	r24, 0xFE	; 254
    22ea:	80 83       	st	Z, r24
    22ec:	e2 ec       	ldi	r30, 0xC2	; 194
    22ee:	f1 e2       	ldi	r31, 0x21	; 33
    22f0:	80 81       	ld	r24, Z
    22f2:	8e 7f       	andi	r24, 0xFE	; 254
    22f4:	80 83       	st	Z, r24
    22f6:	6a e1       	ldi	r22, 0x1A	; 26
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	a6 dc       	rcall	.-1716   	; 0x1c4a <nvm_read_byte>
    22fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2300:	19 f0       	breq	.+6      	; 0x2308 <udd_enable+0x90>
    2302:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2306:	03 c0       	rjmp	.+6      	; 0x230e <udd_enable+0x96>
    2308:	8f e1       	ldi	r24, 0x1F	; 31
    230a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    230e:	6b e1       	ldi	r22, 0x1B	; 27
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	9a dc       	rcall	.-1740   	; 0x1c4a <nvm_read_byte>
    2316:	8f 3f       	cpi	r24, 0xFF	; 255
    2318:	19 f0       	breq	.+6      	; 0x2320 <udd_enable+0xa8>
    231a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    231e:	03 c0       	rjmp	.+6      	; 0x2326 <udd_enable+0xae>
    2320:	8f e1       	ldi	r24, 0x1F	; 31
    2322:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2326:	e0 ec       	ldi	r30, 0xC0	; 192
    2328:	f4 e0       	ldi	r31, 0x04	; 4
    232a:	80 81       	ld	r24, Z
    232c:	83 60       	ori	r24, 0x03	; 3
    232e:	80 83       	st	Z, r24
    2330:	80 81       	ld	r24, Z
    2332:	80 68       	ori	r24, 0x80	; 128
    2334:	80 83       	st	Z, r24
    2336:	80 81       	ld	r24, Z
    2338:	80 61       	ori	r24, 0x10	; 16
    233a:	80 83       	st	Z, r24
    233c:	80 e2       	ldi	r24, 0x20	; 32
    233e:	92 e2       	ldi	r25, 0x22	; 34
    2340:	86 83       	std	Z+6, r24	; 0x06
    2342:	97 83       	std	Z+7, r25	; 0x07
    2344:	80 81       	ld	r24, Z
    2346:	80 62       	ori	r24, 0x20	; 32
    2348:	80 83       	st	Z, r24
    234a:	8f ef       	ldi	r24, 0xFF	; 255
    234c:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2350:	e8 ec       	ldi	r30, 0xC8	; 200
    2352:	f4 e0       	ldi	r31, 0x04	; 4
    2354:	80 81       	ld	r24, Z
    2356:	82 60       	ori	r24, 0x02	; 2
    2358:	80 83       	st	Z, r24
    235a:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_b_idle>
    235e:	80 91 65 2e 	lds	r24, 0x2E65	; 0x802e65 <sleepmgr_locks+0x5>
    2362:	8f 3f       	cpi	r24, 0xFF	; 255
    2364:	09 f4       	brne	.+2      	; 0x2368 <udd_enable+0xf0>
    2366:	ff cf       	rjmp	.-2      	; 0x2366 <udd_enable+0xee>
    2368:	9f b7       	in	r25, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	e0 e6       	ldi	r30, 0x60	; 96
    236e:	fe e2       	ldi	r31, 0x2E	; 46
    2370:	85 81       	ldd	r24, Z+5	; 0x05
    2372:	8f 5f       	subi	r24, 0xFF	; 255
    2374:	85 83       	std	Z+5, r24	; 0x05
    2376:	9f bf       	out	0x3f, r25	; 63
    2378:	5c df       	rcall	.-328    	; 0x2232 <udd_attach>
    237a:	cf bf       	out	0x3f, r28	; 63
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	08 95       	ret

00002382 <udd_set_address>:
    2382:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2386:	08 95       	ret

00002388 <udd_getaddress>:
    2388:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    238c:	08 95       	ret

0000238e <udd_set_setup_payload>:
    238e:	e2 e7       	ldi	r30, 0x72	; 114
    2390:	f4 e2       	ldi	r31, 0x24	; 36
    2392:	80 87       	std	Z+8, r24	; 0x08
    2394:	91 87       	std	Z+9, r25	; 0x09
    2396:	62 87       	std	Z+10, r22	; 0x0a
    2398:	73 87       	std	Z+11, r23	; 0x0b
    239a:	08 95       	ret

0000239c <udd_ep_alloc>:
    239c:	28 2f       	mov	r18, r24
    239e:	2f 70       	andi	r18, 0x0F	; 15
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	22 0f       	add	r18, r18
    23a4:	33 1f       	adc	r19, r19
    23a6:	08 2e       	mov	r0, r24
    23a8:	00 0c       	add	r0, r0
    23aa:	99 0b       	sbc	r25, r25
    23ac:	88 27       	eor	r24, r24
    23ae:	99 0f       	add	r25, r25
    23b0:	88 1f       	adc	r24, r24
    23b2:	99 27       	eor	r25, r25
    23b4:	82 0f       	add	r24, r18
    23b6:	93 1f       	adc	r25, r19
    23b8:	fc 01       	movw	r30, r24
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	e0 5f       	subi	r30, 0xF0	; 240
    23c8:	fd 4d       	sbci	r31, 0xDD	; 221
    23ca:	21 89       	ldd	r18, Z+17	; 0x11
    23cc:	20 7c       	andi	r18, 0xC0	; 192
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <udd_ep_alloc+0x36>
    23d0:	58 c0       	rjmp	.+176    	; 0x2482 <udd_ep_alloc+0xe6>
    23d2:	63 70       	andi	r22, 0x03	; 3
    23d4:	61 30       	cpi	r22, 0x01	; 1
    23d6:	11 f0       	breq	.+4      	; 0x23dc <udd_ep_alloc+0x40>
    23d8:	18 f4       	brcc	.+6      	; 0x23e0 <udd_ep_alloc+0x44>
    23da:	04 c0       	rjmp	.+8      	; 0x23e4 <udd_ep_alloc+0x48>
    23dc:	20 ec       	ldi	r18, 0xC0	; 192
    23de:	03 c0       	rjmp	.+6      	; 0x23e6 <udd_ep_alloc+0x4a>
    23e0:	20 e8       	ldi	r18, 0x80	; 128
    23e2:	01 c0       	rjmp	.+2      	; 0x23e6 <udd_ep_alloc+0x4a>
    23e4:	20 e4       	ldi	r18, 0x40	; 64
    23e6:	40 38       	cpi	r20, 0x80	; 128
    23e8:	51 05       	cpc	r21, r1
    23ea:	e9 f0       	breq	.+58     	; 0x2426 <udd_ep_alloc+0x8a>
    23ec:	50 f4       	brcc	.+20     	; 0x2402 <udd_ep_alloc+0x66>
    23ee:	40 32       	cpi	r20, 0x20	; 32
    23f0:	51 05       	cpc	r21, r1
    23f2:	a9 f0       	breq	.+42     	; 0x241e <udd_ep_alloc+0x82>
    23f4:	40 34       	cpi	r20, 0x40	; 64
    23f6:	51 05       	cpc	r21, r1
    23f8:	a1 f0       	breq	.+40     	; 0x2422 <udd_ep_alloc+0x86>
    23fa:	40 31       	cpi	r20, 0x10	; 16
    23fc:	51 05       	cpc	r21, r1
    23fe:	d9 f4       	brne	.+54     	; 0x2436 <udd_ep_alloc+0x9a>
    2400:	0c c0       	rjmp	.+24     	; 0x241a <udd_ep_alloc+0x7e>
    2402:	41 15       	cp	r20, r1
    2404:	32 e0       	ldi	r19, 0x02	; 2
    2406:	53 07       	cpc	r21, r19
    2408:	91 f0       	breq	.+36     	; 0x242e <udd_ep_alloc+0x92>
    240a:	4f 3f       	cpi	r20, 0xFF	; 255
    240c:	33 e0       	ldi	r19, 0x03	; 3
    240e:	53 07       	cpc	r21, r19
    2410:	81 f0       	breq	.+32     	; 0x2432 <udd_ep_alloc+0x96>
    2412:	41 15       	cp	r20, r1
    2414:	51 40       	sbci	r21, 0x01	; 1
    2416:	79 f4       	brne	.+30     	; 0x2436 <udd_ep_alloc+0x9a>
    2418:	08 c0       	rjmp	.+16     	; 0x242a <udd_ep_alloc+0x8e>
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0d c0       	rjmp	.+26     	; 0x2438 <udd_ep_alloc+0x9c>
    241e:	42 e0       	ldi	r20, 0x02	; 2
    2420:	0b c0       	rjmp	.+22     	; 0x2438 <udd_ep_alloc+0x9c>
    2422:	43 e0       	ldi	r20, 0x03	; 3
    2424:	09 c0       	rjmp	.+18     	; 0x2438 <udd_ep_alloc+0x9c>
    2426:	44 e0       	ldi	r20, 0x04	; 4
    2428:	07 c0       	rjmp	.+14     	; 0x2438 <udd_ep_alloc+0x9c>
    242a:	45 e0       	ldi	r20, 0x05	; 5
    242c:	05 c0       	rjmp	.+10     	; 0x2438 <udd_ep_alloc+0x9c>
    242e:	46 e0       	ldi	r20, 0x06	; 6
    2430:	03 c0       	rjmp	.+6      	; 0x2438 <udd_ep_alloc+0x9c>
    2432:	47 e0       	ldi	r20, 0x07	; 7
    2434:	01 c0       	rjmp	.+2      	; 0x2438 <udd_ep_alloc+0x9c>
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	fc 01       	movw	r30, r24
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	e0 5f       	subi	r30, 0xF0	; 240
    2448:	fd 4d       	sbci	r31, 0xDD	; 221
    244a:	11 8a       	std	Z+17, r1	; 0x11
    244c:	dc 01       	movw	r26, r24
    244e:	aa 0f       	add	r26, r26
    2450:	bb 1f       	adc	r27, r27
    2452:	aa 0f       	add	r26, r26
    2454:	bb 1f       	adc	r27, r27
    2456:	aa 0f       	add	r26, r26
    2458:	bb 1f       	adc	r27, r27
    245a:	a0 5e       	subi	r26, 0xE0	; 224
    245c:	bd 4d       	sbci	r27, 0xDD	; 221
    245e:	36 e0       	ldi	r19, 0x06	; 6
    2460:	3c 93       	st	X, r19
    2462:	24 2b       	or	r18, r20
    2464:	21 8b       	std	Z+17, r18	; 0x11
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	fc 01       	movw	r30, r24
    2474:	e0 5f       	subi	r30, 0xF0	; 240
    2476:	fd 4d       	sbci	r31, 0xDD	; 221
    2478:	81 89       	ldd	r24, Z+17	; 0x11
    247a:	80 62       	ori	r24, 0x20	; 32
    247c:	81 8b       	std	Z+17, r24	; 0x11
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	08 95       	ret
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	08 95       	ret

00002486 <udd_ep_is_halted>:
    2486:	e8 2f       	mov	r30, r24
    2488:	ef 70       	andi	r30, 0x0F	; 15
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	ee 0f       	add	r30, r30
    248e:	ff 1f       	adc	r31, r31
    2490:	08 2e       	mov	r0, r24
    2492:	00 0c       	add	r0, r0
    2494:	99 0b       	sbc	r25, r25
    2496:	88 27       	eor	r24, r24
    2498:	99 0f       	add	r25, r25
    249a:	88 1f       	adc	r24, r24
    249c:	99 27       	eor	r25, r25
    249e:	e8 0f       	add	r30, r24
    24a0:	f9 1f       	adc	r31, r25
    24a2:	ee 0f       	add	r30, r30
    24a4:	ff 1f       	adc	r31, r31
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	ee 0f       	add	r30, r30
    24ac:	ff 1f       	adc	r31, r31
    24ae:	e0 5f       	subi	r30, 0xF0	; 240
    24b0:	fd 4d       	sbci	r31, 0xDD	; 221
    24b2:	81 89       	ldd	r24, Z+17	; 0x11
    24b4:	82 fb       	bst	r24, 2
    24b6:	88 27       	eor	r24, r24
    24b8:	80 f9       	bld	r24, 0
    24ba:	08 95       	ret

000024bc <udd_ep_clear_halt>:
    24bc:	28 2f       	mov	r18, r24
    24be:	2f 70       	andi	r18, 0x0F	; 15
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	a9 01       	movw	r20, r18
    24c4:	44 0f       	add	r20, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	28 2f       	mov	r18, r24
    24ca:	08 2e       	mov	r0, r24
    24cc:	00 0c       	add	r0, r0
    24ce:	33 0b       	sbc	r19, r19
    24d0:	22 27       	eor	r18, r18
    24d2:	33 0f       	add	r19, r19
    24d4:	22 1f       	adc	r18, r18
    24d6:	33 27       	eor	r19, r19
    24d8:	24 0f       	add	r18, r20
    24da:	35 1f       	adc	r19, r21
    24dc:	f9 01       	movw	r30, r18
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	ee 0f       	add	r30, r30
    24e8:	ff 1f       	adc	r31, r31
    24ea:	e0 5f       	subi	r30, 0xF0	; 240
    24ec:	fd 4d       	sbci	r31, 0xDD	; 221
    24ee:	91 89       	ldd	r25, Z+17	; 0x11
    24f0:	92 ff       	sbrs	r25, 2
    24f2:	17 c0       	rjmp	.+46     	; 0x2522 <udd_ep_clear_halt+0x66>
    24f4:	22 0f       	add	r18, r18
    24f6:	33 1f       	adc	r19, r19
    24f8:	22 0f       	add	r18, r18
    24fa:	33 1f       	adc	r19, r19
    24fc:	22 0f       	add	r18, r18
    24fe:	33 1f       	adc	r19, r19
    2500:	f9 01       	movw	r30, r18
    2502:	e0 5f       	subi	r30, 0xF0	; 240
    2504:	fd 4d       	sbci	r31, 0xDD	; 221
    2506:	91 89       	ldd	r25, Z+17	; 0x11
    2508:	9b 7f       	andi	r25, 0xFB	; 251
    250a:	91 8b       	std	Z+17, r25	; 0x11
    250c:	ae dc       	rcall	.-1700   	; 0x1e6a <udd_ep_get_job>
    250e:	fc 01       	movw	r30, r24
    2510:	80 81       	ld	r24, Z
    2512:	80 ff       	sbrs	r24, 0
    2514:	06 c0       	rjmp	.+12     	; 0x2522 <udd_ep_clear_halt+0x66>
    2516:	8e 7f       	andi	r24, 0xFE	; 254
    2518:	80 83       	st	Z, r24
    251a:	07 80       	ldd	r0, Z+7	; 0x07
    251c:	f0 85       	ldd	r31, Z+8	; 0x08
    251e:	e0 2d       	mov	r30, r0
    2520:	09 95       	icall
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	08 95       	ret

00002526 <udd_ep_run>:
    2526:	7f 92       	push	r7
    2528:	8f 92       	push	r8
    252a:	9f 92       	push	r9
    252c:	af 92       	push	r10
    252e:	bf 92       	push	r11
    2530:	cf 92       	push	r12
    2532:	df 92       	push	r13
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	98 2e       	mov	r9, r24
    2542:	86 2e       	mov	r8, r22
    2544:	6a 01       	movw	r12, r20
    2546:	79 01       	movw	r14, r18
    2548:	90 dc       	rcall	.-1760   	; 0x1e6a <udd_ep_get_job>
    254a:	5c 01       	movw	r10, r24
    254c:	79 2c       	mov	r7, r9
    254e:	77 1c       	adc	r7, r7
    2550:	77 24       	eor	r7, r7
    2552:	77 1c       	adc	r7, r7
    2554:	c9 2d       	mov	r28, r9
    2556:	cf 70       	andi	r28, 0x0F	; 15
    2558:	d0 e0       	ldi	r29, 0x00	; 0
    255a:	cc 0f       	add	r28, r28
    255c:	dd 1f       	adc	r29, r29
    255e:	c7 0d       	add	r28, r7
    2560:	d1 1d       	adc	r29, r1
    2562:	fe 01       	movw	r30, r28
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	ee 0f       	add	r30, r30
    256e:	ff 1f       	adc	r31, r31
    2570:	e0 5f       	subi	r30, 0xF0	; 240
    2572:	fd 4d       	sbci	r31, 0xDD	; 221
    2574:	81 89       	ldd	r24, Z+17	; 0x11
    2576:	80 7c       	andi	r24, 0xC0	; 192
    2578:	09 f4       	brne	.+2      	; 0x257c <udd_ep_run+0x56>
    257a:	7d c0       	rjmp	.+250    	; 0x2676 <udd_ep_run+0x150>
    257c:	fe 01       	movw	r30, r28
    257e:	ee 0f       	add	r30, r30
    2580:	ff 1f       	adc	r31, r31
    2582:	ee 0f       	add	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	ee 0f       	add	r30, r30
    2588:	ff 1f       	adc	r31, r31
    258a:	e0 5f       	subi	r30, 0xF0	; 240
    258c:	fd 4d       	sbci	r31, 0xDD	; 221
    258e:	81 89       	ldd	r24, Z+17	; 0x11
    2590:	80 7c       	andi	r24, 0xC0	; 192
    2592:	80 3c       	cpi	r24, 0xC0	; 192
    2594:	61 f0       	breq	.+24     	; 0x25ae <udd_ep_run+0x88>
    2596:	fe 01       	movw	r30, r28
    2598:	ee 0f       	add	r30, r30
    259a:	ff 1f       	adc	r31, r31
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	e0 5f       	subi	r30, 0xF0	; 240
    25a6:	fd 4d       	sbci	r31, 0xDD	; 221
    25a8:	81 89       	ldd	r24, Z+17	; 0x11
    25aa:	82 fd       	sbrc	r24, 2
    25ac:	66 c0       	rjmp	.+204    	; 0x267a <udd_ep_run+0x154>
    25ae:	8f b7       	in	r24, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	f5 01       	movw	r30, r10
    25b4:	90 81       	ld	r25, Z
    25b6:	90 ff       	sbrs	r25, 0
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <udd_ep_run+0x9a>
    25ba:	8f bf       	out	0x3f, r24	; 63
    25bc:	71 2c       	mov	r7, r1
    25be:	5e c0       	rjmp	.+188    	; 0x267c <udd_ep_run+0x156>
    25c0:	f5 01       	movw	r30, r10
    25c2:	90 81       	ld	r25, Z
    25c4:	91 60       	ori	r25, 0x01	; 1
    25c6:	90 83       	st	Z, r25
    25c8:	8f bf       	out	0x3f, r24	; 63
    25ca:	c1 82       	std	Z+1, r12	; 0x01
    25cc:	d2 82       	std	Z+2, r13	; 0x02
    25ce:	e3 82       	std	Z+3, r14	; 0x03
    25d0:	f4 82       	std	Z+4, r15	; 0x04
    25d2:	15 82       	std	Z+5, r1	; 0x05
    25d4:	16 82       	std	Z+6, r1	; 0x06
    25d6:	07 83       	std	Z+7, r16	; 0x07
    25d8:	10 87       	std	Z+8, r17	; 0x08
    25da:	81 10       	cpse	r8, r1
    25dc:	06 c0       	rjmp	.+12     	; 0x25ea <udd_ep_run+0xc4>
    25de:	91 e0       	ldi	r25, 0x01	; 1
    25e0:	e1 14       	cp	r14, r1
    25e2:	f1 04       	cpc	r15, r1
    25e4:	19 f0       	breq	.+6      	; 0x25ec <udd_ep_run+0xc6>
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	01 c0       	rjmp	.+2      	; 0x25ec <udd_ep_run+0xc6>
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	f5 01       	movw	r30, r10
    25ee:	80 81       	ld	r24, Z
    25f0:	90 fb       	bst	r25, 0
    25f2:	81 f9       	bld	r24, 1
    25f4:	8b 7f       	andi	r24, 0xFB	; 251
    25f6:	80 83       	st	Z, r24
    25f8:	77 20       	and	r7, r7
    25fa:	59 f0       	breq	.+22     	; 0x2612 <udd_ep_run+0xec>
    25fc:	cc 0f       	add	r28, r28
    25fe:	dd 1f       	adc	r29, r29
    2600:	cc 0f       	add	r28, r28
    2602:	dd 1f       	adc	r29, r29
    2604:	cc 0f       	add	r28, r28
    2606:	dd 1f       	adc	r29, r29
    2608:	c0 5f       	subi	r28, 0xF0	; 240
    260a:	dd 4d       	sbci	r29, 0xDD	; 221
    260c:	1e 8a       	std	Y+22, r1	; 0x16
    260e:	1f 8a       	std	Y+23, r1	; 0x17
    2610:	2d c0       	rjmp	.+90     	; 0x266c <udd_ep_run+0x146>
    2612:	fe 01       	movw	r30, r28
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	ee 0f       	add	r30, r30
    261a:	ff 1f       	adc	r31, r31
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	e0 5f       	subi	r30, 0xF0	; 240
    2622:	fd 4d       	sbci	r31, 0xDD	; 221
    2624:	81 89       	ldd	r24, Z+17	; 0x11
    2626:	80 7c       	andi	r24, 0xC0	; 192
    2628:	80 3c       	cpi	r24, 0xC0	; 192
    262a:	a1 f4       	brne	.+40     	; 0x2654 <udd_ep_run+0x12e>
    262c:	ce 01       	movw	r24, r28
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	80 5e       	subi	r24, 0xE0	; 224
    263c:	9d 4d       	sbci	r25, 0xDD	; 221
    263e:	ef db       	rcall	.-2082   	; 0x1e1e <udd_ep_get_size>
    2640:	bc 01       	movw	r22, r24
    2642:	c7 01       	movw	r24, r14
    2644:	60 d2       	rcall	.+1216   	; 0x2b06 <__udivmodhi4>
    2646:	89 2b       	or	r24, r25
    2648:	29 f0       	breq	.+10     	; 0x2654 <udd_ep_run+0x12e>
    264a:	f5 01       	movw	r30, r10
    264c:	80 81       	ld	r24, Z
    264e:	8e 7f       	andi	r24, 0xFE	; 254
    2650:	80 83       	st	Z, r24
    2652:	14 c0       	rjmp	.+40     	; 0x267c <udd_ep_run+0x156>
    2654:	cc 0f       	add	r28, r28
    2656:	dd 1f       	adc	r29, r29
    2658:	cc 0f       	add	r28, r28
    265a:	dd 1f       	adc	r29, r29
    265c:	cc 0f       	add	r28, r28
    265e:	dd 1f       	adc	r29, r29
    2660:	c0 5f       	subi	r28, 0xF0	; 240
    2662:	dd 4d       	sbci	r29, 0xDD	; 221
    2664:	1a 8a       	std	Y+18, r1	; 0x12
    2666:	1b 8a       	std	Y+19, r1	; 0x13
    2668:	1e 8a       	std	Y+22, r1	; 0x16
    266a:	1f 8a       	std	Y+23, r1	; 0x17
    266c:	89 2d       	mov	r24, r9
    266e:	87 dc       	rcall	.-1778   	; 0x1f7e <udd_ep_trans_complet>
    2670:	77 24       	eor	r7, r7
    2672:	73 94       	inc	r7
    2674:	03 c0       	rjmp	.+6      	; 0x267c <udd_ep_run+0x156>
    2676:	71 2c       	mov	r7, r1
    2678:	01 c0       	rjmp	.+2      	; 0x267c <udd_ep_run+0x156>
    267a:	71 2c       	mov	r7, r1
    267c:	87 2d       	mov	r24, r7
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	7f 90       	pop	r7
    2698:	08 95       	ret

0000269a <udd_ep_abort>:
    269a:	ff 92       	push	r15
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	18 2f       	mov	r17, r24
    26a6:	f8 2e       	mov	r15, r24
    26a8:	ff 1c       	adc	r15, r15
    26aa:	ff 24       	eor	r15, r15
    26ac:	ff 1c       	adc	r15, r15
    26ae:	c8 2f       	mov	r28, r24
    26b0:	cf 70       	andi	r28, 0x0F	; 15
    26b2:	d0 e0       	ldi	r29, 0x00	; 0
    26b4:	cc 0f       	add	r28, r28
    26b6:	dd 1f       	adc	r29, r29
    26b8:	cf 0d       	add	r28, r15
    26ba:	d1 1d       	adc	r29, r1
    26bc:	d6 db       	rcall	.-2132   	; 0x1e6a <udd_ep_get_job>
    26be:	dc 01       	movw	r26, r24
    26c0:	fe 01       	movw	r30, r28
    26c2:	ee 0f       	add	r30, r30
    26c4:	ff 1f       	adc	r31, r31
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	ee 0f       	add	r30, r30
    26cc:	ff 1f       	adc	r31, r31
    26ce:	e0 5e       	subi	r30, 0xE0	; 224
    26d0:	fd 4d       	sbci	r31, 0xDD	; 221
    26d2:	02 e0       	ldi	r16, 0x02	; 2
    26d4:	05 93       	las	Z, r16
    26d6:	8c 91       	ld	r24, X
    26d8:	80 ff       	sbrs	r24, 0
    26da:	22 c0       	rjmp	.+68     	; 0x2720 <udd_ep_abort+0x86>
    26dc:	8e 7f       	andi	r24, 0xFE	; 254
    26de:	8c 93       	st	X, r24
    26e0:	17 96       	adiw	r26, 0x07	; 7
    26e2:	ed 91       	ld	r30, X+
    26e4:	fc 91       	ld	r31, X
    26e6:	18 97       	sbiw	r26, 0x08	; 8
    26e8:	30 97       	sbiw	r30, 0x00	; 0
    26ea:	d1 f0       	breq	.+52     	; 0x2720 <udd_ep_abort+0x86>
    26ec:	ff 20       	and	r15, r15
    26ee:	59 f0       	breq	.+22     	; 0x2706 <udd_ep_abort+0x6c>
    26f0:	cc 0f       	add	r28, r28
    26f2:	dd 1f       	adc	r29, r29
    26f4:	cc 0f       	add	r28, r28
    26f6:	dd 1f       	adc	r29, r29
    26f8:	cc 0f       	add	r28, r28
    26fa:	dd 1f       	adc	r29, r29
    26fc:	c0 5f       	subi	r28, 0xF0	; 240
    26fe:	dd 4d       	sbci	r29, 0xDD	; 221
    2700:	6e 89       	ldd	r22, Y+22	; 0x16
    2702:	7f 89       	ldd	r23, Y+23	; 0x17
    2704:	0a c0       	rjmp	.+20     	; 0x271a <udd_ep_abort+0x80>
    2706:	cc 0f       	add	r28, r28
    2708:	dd 1f       	adc	r29, r29
    270a:	cc 0f       	add	r28, r28
    270c:	dd 1f       	adc	r29, r29
    270e:	cc 0f       	add	r28, r28
    2710:	dd 1f       	adc	r29, r29
    2712:	c0 5f       	subi	r28, 0xF0	; 240
    2714:	dd 4d       	sbci	r29, 0xDD	; 221
    2716:	6a 89       	ldd	r22, Y+18	; 0x12
    2718:	7b 89       	ldd	r23, Y+19	; 0x13
    271a:	41 2f       	mov	r20, r17
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	09 95       	icall
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	ff 90       	pop	r15
    272a:	08 95       	ret

0000272c <udd_ep_free>:
    272c:	cf 93       	push	r28
    272e:	c8 2f       	mov	r28, r24
    2730:	b4 df       	rcall	.-152    	; 0x269a <udd_ep_abort>
    2732:	ec 2f       	mov	r30, r28
    2734:	ef 70       	andi	r30, 0x0F	; 15
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	8c 2f       	mov	r24, r28
    273e:	cc 0f       	add	r28, r28
    2740:	99 0b       	sbc	r25, r25
    2742:	88 27       	eor	r24, r24
    2744:	99 0f       	add	r25, r25
    2746:	88 1f       	adc	r24, r24
    2748:	99 27       	eor	r25, r25
    274a:	e8 0f       	add	r30, r24
    274c:	f9 1f       	adc	r31, r25
    274e:	ee 0f       	add	r30, r30
    2750:	ff 1f       	adc	r31, r31
    2752:	ee 0f       	add	r30, r30
    2754:	ff 1f       	adc	r31, r31
    2756:	ee 0f       	add	r30, r30
    2758:	ff 1f       	adc	r31, r31
    275a:	e0 5f       	subi	r30, 0xF0	; 240
    275c:	fd 4d       	sbci	r31, 0xDD	; 221
    275e:	11 8a       	std	Z+17, r1	; 0x11
    2760:	cf 91       	pop	r28
    2762:	08 95       	ret

00002764 <udd_ep_set_halt>:
    2764:	0f 93       	push	r16
    2766:	e8 2f       	mov	r30, r24
    2768:	ef 70       	andi	r30, 0x0F	; 15
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	ee 0f       	add	r30, r30
    276e:	ff 1f       	adc	r31, r31
    2770:	28 2f       	mov	r18, r24
    2772:	08 2e       	mov	r0, r24
    2774:	00 0c       	add	r0, r0
    2776:	33 0b       	sbc	r19, r19
    2778:	22 27       	eor	r18, r18
    277a:	33 0f       	add	r19, r19
    277c:	22 1f       	adc	r18, r18
    277e:	33 27       	eor	r19, r19
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	df 01       	movw	r26, r30
    2786:	aa 0f       	add	r26, r26
    2788:	bb 1f       	adc	r27, r27
    278a:	aa 0f       	add	r26, r26
    278c:	bb 1f       	adc	r27, r27
    278e:	aa 0f       	add	r26, r26
    2790:	bb 1f       	adc	r27, r27
    2792:	a0 5f       	subi	r26, 0xF0	; 240
    2794:	bd 4d       	sbci	r27, 0xDD	; 221
    2796:	51 96       	adiw	r26, 0x11	; 17
    2798:	9c 91       	ld	r25, X
    279a:	51 97       	sbiw	r26, 0x11	; 17
    279c:	94 60       	ori	r25, 0x04	; 4
    279e:	51 96       	adiw	r26, 0x11	; 17
    27a0:	9c 93       	st	X, r25
    27a2:	ee 0f       	add	r30, r30
    27a4:	ff 1f       	adc	r31, r31
    27a6:	ee 0f       	add	r30, r30
    27a8:	ff 1f       	adc	r31, r31
    27aa:	ee 0f       	add	r30, r30
    27ac:	ff 1f       	adc	r31, r31
    27ae:	e0 5e       	subi	r30, 0xE0	; 224
    27b0:	fd 4d       	sbci	r31, 0xDD	; 221
    27b2:	01 e0       	ldi	r16, 0x01	; 1
    27b4:	06 93       	lac	Z, r16
    27b6:	71 df       	rcall	.-286    	; 0x269a <udd_ep_abort>
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	0f 91       	pop	r16
    27bc:	08 95       	ret

000027be <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    27be:	1f 92       	push	r1
    27c0:	0f 92       	push	r0
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	0f 92       	push	r0
    27c6:	11 24       	eor	r1, r1
    27c8:	0f 93       	push	r16
    27ca:	2f 93       	push	r18
    27cc:	3f 93       	push	r19
    27ce:	4f 93       	push	r20
    27d0:	5f 93       	push	r21
    27d2:	6f 93       	push	r22
    27d4:	7f 93       	push	r23
    27d6:	8f 93       	push	r24
    27d8:	9f 93       	push	r25
    27da:	af 93       	push	r26
    27dc:	bf 93       	push	r27
    27de:	ef 93       	push	r30
    27e0:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    27e2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27e6:	88 23       	and	r24, r24
    27e8:	44 f4       	brge	.+16     	; 0x27fa <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    27ea:	80 e8       	ldi	r24, 0x80	; 128
    27ec:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    27f0:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    27f4:	0e 94 39 03 	call	0x672	; 0x672 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    27f8:	8a c0       	rjmp	.+276    	; 0x290e <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    27fa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27fe:	82 ff       	sbrs	r24, 2
    2800:	20 c0       	rjmp	.+64     	; 0x2842 <__vector_125+0x84>
		udd_ack_underflow_event();
    2802:	84 e0       	ldi	r24, 0x04	; 4
    2804:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2808:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <udd_sram+0x18>
    280c:	86 ff       	sbrs	r24, 6
    280e:	7f c0       	rjmp	.+254    	; 0x290e <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2810:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2814:	81 fd       	sbrc	r24, 1
    2816:	7b c0       	rjmp	.+246    	; 0x290e <__vector_125+0x150>
    2818:	43 db       	rcall	.-2426   	; 0x1ea0 <udd_ctrl_interrupt_tc_setup>
    281a:	81 11       	cpse	r24, r1
    281c:	78 c0       	rjmp	.+240    	; 0x290e <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    281e:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <udd_ep_control_state>
    2822:	81 30       	cpi	r24, 0x01	; 1
    2824:	11 f4       	brne	.+4      	; 0x282a <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2826:	79 da       	rcall	.-2830   	; 0x1d1a <udd_ctrl_send_zlp_in>
    2828:	72 c0       	rjmp	.+228    	; 0x290e <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    282a:	84 30       	cpi	r24, 0x04	; 4
    282c:	09 f0       	breq	.+2      	; 0x2830 <__vector_125+0x72>
    282e:	6f c0       	rjmp	.+222    	; 0x290e <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2830:	e9 e2       	ldi	r30, 0x29	; 41
    2832:	f2 e2       	ldi	r31, 0x22	; 34
    2834:	04 e0       	ldi	r16, 0x04	; 4
    2836:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2838:	e1 e2       	ldi	r30, 0x21	; 33
    283a:	f2 e2       	ldi	r31, 0x22	; 34
    283c:	04 e0       	ldi	r16, 0x04	; 4
    283e:	05 93       	las	Z, r16
    2840:	66 c0       	rjmp	.+204    	; 0x290e <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2842:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2846:	81 ff       	sbrs	r24, 1
    2848:	5d c0       	rjmp	.+186    	; 0x2904 <__vector_125+0x146>
		udd_ack_overflow_event();
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2850:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <udd_sram+0x10>
    2854:	86 ff       	sbrs	r24, 6
    2856:	5b c0       	rjmp	.+182    	; 0x290e <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2858:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    285c:	81 fd       	sbrc	r24, 1
    285e:	57 c0       	rjmp	.+174    	; 0x290e <__vector_125+0x150>
    2860:	1f db       	rcall	.-2498   	; 0x1ea0 <udd_ctrl_interrupt_tc_setup>
    2862:	81 11       	cpse	r24, r1
    2864:	54 c0       	rjmp	.+168    	; 0x290e <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2866:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <udd_ep_control_state>
    286a:	82 30       	cpi	r24, 0x02	; 2
    286c:	41 f4       	brne	.+16     	; 0x287e <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    286e:	84 e0       	ldi	r24, 0x04	; 4
    2870:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2874:	e0 e2       	ldi	r30, 0x20	; 32
    2876:	f2 e2       	ldi	r31, 0x22	; 34
    2878:	02 e0       	ldi	r16, 0x02	; 2
    287a:	06 93       	lac	Z, r16
    287c:	48 c0       	rjmp	.+144    	; 0x290e <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    287e:	83 30       	cpi	r24, 0x03	; 3
    2880:	09 f0       	breq	.+2      	; 0x2884 <__vector_125+0xc6>
    2882:	45 c0       	rjmp	.+138    	; 0x290e <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2884:	e9 e2       	ldi	r30, 0x29	; 41
    2886:	f2 e2       	ldi	r31, 0x22	; 34
    2888:	04 e0       	ldi	r16, 0x04	; 4
    288a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    288c:	e1 e2       	ldi	r30, 0x21	; 33
    288e:	f2 e2       	ldi	r31, 0x22	; 34
    2890:	04 e0       	ldi	r16, 0x04	; 4
    2892:	05 93       	las	Z, r16
    2894:	3c c0       	rjmp	.+120    	; 0x290e <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2896:	80 e1       	ldi	r24, 0x10	; 16
    2898:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	fd de       	rcall	.-518    	; 0x269a <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    28a0:	81 e8       	ldi	r24, 0x81	; 129
    28a2:	fb de       	rcall	.-522    	; 0x269a <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	f9 de       	rcall	.-526    	; 0x269a <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    28a8:	82 e8       	ldi	r24, 0x82	; 130
    28aa:	f7 de       	rcall	.-530    	; 0x269a <udd_ep_abort>
		}
#endif
		udc_reset();
    28ac:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    28b0:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    28b4:	e0 e1       	ldi	r30, 0x10	; 16
    28b6:	f2 e2       	ldi	r31, 0x22	; 34
    28b8:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    28ba:	96 e0       	ldi	r25, 0x06	; 6
    28bc:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    28be:	83 e4       	ldi	r24, 0x43	; 67
    28c0:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    28c2:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    28c4:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    28c6:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    28c8:	8b ec       	ldi	r24, 0xCB	; 203
    28ca:	91 e2       	ldi	r25, 0x21	; 33
    28cc:	84 8b       	std	Z+20, r24	; 0x14
    28ce:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    28d0:	ef d9       	rcall	.-3106   	; 0x1cb0 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    28d2:	1d c0       	rjmp	.+58     	; 0x290e <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    28d4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28d8:	86 ff       	sbrs	r24, 6
    28da:	08 c0       	rjmp	.+16     	; 0x28ec <__vector_125+0x12e>
		udd_ack_suspend_event();
    28dc:	80 e4       	ldi	r24, 0x40	; 64
    28de:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	bc d9       	rcall	.-3208   	; 0x1c5e <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    28e6:	0e 94 37 03 	call	0x66e	; 0x66e <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    28ea:	11 c0       	rjmp	.+34     	; 0x290e <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    28ec:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28f0:	85 ff       	sbrs	r24, 5
    28f2:	0d c0       	rjmp	.+26     	; 0x290e <__vector_125+0x150>
		udd_ack_resume_event();
    28f4:	80 e2       	ldi	r24, 0x20	; 32
    28f6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	b0 d9       	rcall	.-3232   	; 0x1c5e <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    28fe:	0e 94 38 03 	call	0x670	; 0x670 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2902:	05 c0       	rjmp	.+10     	; 0x290e <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2904:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2908:	84 fd       	sbrc	r24, 4
    290a:	c5 cf       	rjmp	.-118    	; 0x2896 <__vector_125+0xd8>
    290c:	e3 cf       	rjmp	.-58     	; 0x28d4 <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    290e:	ff 91       	pop	r31
    2910:	ef 91       	pop	r30
    2912:	bf 91       	pop	r27
    2914:	af 91       	pop	r26
    2916:	9f 91       	pop	r25
    2918:	8f 91       	pop	r24
    291a:	7f 91       	pop	r23
    291c:	6f 91       	pop	r22
    291e:	5f 91       	pop	r21
    2920:	4f 91       	pop	r20
    2922:	3f 91       	pop	r19
    2924:	2f 91       	pop	r18
    2926:	0f 91       	pop	r16
    2928:	0f 90       	pop	r0
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	0f 90       	pop	r0
    292e:	1f 90       	pop	r1
    2930:	18 95       	reti

00002932 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2932:	1f 92       	push	r1
    2934:	0f 92       	push	r0
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	0f 92       	push	r0
    293a:	11 24       	eor	r1, r1
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	2f 93       	push	r18
    2942:	3f 93       	push	r19
    2944:	4f 93       	push	r20
    2946:	5f 93       	push	r21
    2948:	6f 93       	push	r22
    294a:	7f 93       	push	r23
    294c:	8f 93       	push	r24
    294e:	9f 93       	push	r25
    2950:	af 93       	push	r26
    2952:	bf 93       	push	r27
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	ef 93       	push	r30
    295a:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    295c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2960:	81 fd       	sbrc	r24, 1
    2962:	03 c0       	rjmp	.+6      	; 0x296a <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2964:	9d da       	rcall	.-2758   	; 0x1ea0 <udd_ctrl_interrupt_tc_setup>
    2966:	81 11       	cpse	r24, r1
    2968:	b9 c0       	rjmp	.+370    	; 0x2adc <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    296a:	82 e0       	ldi	r24, 0x02	; 2
    296c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2970:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2974:	81 95       	neg	r24
    2976:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2978:	e0 e2       	ldi	r30, 0x20	; 32
    297a:	f2 e2       	ldi	r31, 0x22	; 34
    297c:	e8 1b       	sub	r30, r24
    297e:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2980:	20 81       	ld	r18, Z
    2982:	31 81       	ldd	r19, Z+1	; 0x01
    2984:	20 52       	subi	r18, 0x20	; 32
    2986:	32 42       	sbci	r19, 0x22	; 34
    2988:	36 95       	lsr	r19
    298a:	27 95       	ror	r18
    298c:	36 95       	lsr	r19
    298e:	27 95       	ror	r18
    2990:	36 95       	lsr	r19
    2992:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2994:	82 2f       	mov	r24, r18
    2996:	86 95       	lsr	r24
    2998:	20 fd       	sbrc	r18, 0
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <__vector_126+0x6e>
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	01 c0       	rjmp	.+2      	; 0x29a2 <__vector_126+0x70>
    29a0:	90 e8       	ldi	r25, 0x80	; 128
    29a2:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    29a4:	e8 2f       	mov	r30, r24
    29a6:	ef 70       	andi	r30, 0x0F	; 15
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	ee 0f       	add	r30, r30
    29ac:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    29ae:	28 2f       	mov	r18, r24
    29b0:	08 2e       	mov	r0, r24
    29b2:	00 0c       	add	r0, r0
    29b4:	33 0b       	sbc	r19, r19
    29b6:	22 27       	eor	r18, r18
    29b8:	33 0f       	add	r19, r19
    29ba:	22 1f       	adc	r18, r18
    29bc:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    29be:	e2 0f       	add	r30, r18
    29c0:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    29c2:	df 01       	movw	r26, r30
    29c4:	aa 0f       	add	r26, r26
    29c6:	bb 1f       	adc	r27, r27
    29c8:	aa 0f       	add	r26, r26
    29ca:	bb 1f       	adc	r27, r27
    29cc:	aa 0f       	add	r26, r26
    29ce:	bb 1f       	adc	r27, r27
    29d0:	a0 5e       	subi	r26, 0xE0	; 224
    29d2:	bd 4d       	sbci	r27, 0xDD	; 221
    29d4:	9c 91       	ld	r25, X
    29d6:	95 ff       	sbrs	r25, 5
    29d8:	81 c0       	rjmp	.+258    	; 0x2adc <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    29da:	fd 01       	movw	r30, r26
    29dc:	00 e2       	ldi	r16, 0x20	; 32
    29de:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    29e0:	81 11       	cpse	r24, r1
    29e2:	77 c0       	rjmp	.+238    	; 0x2ad2 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29e4:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <udd_ep_control_state>
    29e8:	84 30       	cpi	r24, 0x04	; 4
    29ea:	19 f4       	brne	.+6      	; 0x29f2 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    29ec:	a4 d9       	rcall	.-3256   	; 0x1d36 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    29ee:	60 d9       	rcall	.-3392   	; 0x1cb0 <udd_ctrl_init>
    29f0:	75 c0       	rjmp	.+234    	; 0x2adc <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    29f2:	00 91 22 22 	lds	r16, 0x2222	; 0x802222 <udd_sram+0x12>
    29f6:	10 91 23 22 	lds	r17, 0x2223	; 0x802223 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    29fa:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0xa>
    29fe:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0xb>
    2a02:	c0 91 0b 22 	lds	r28, 0x220B	; 0x80220b <udd_ctrl_payload_nb_trans>
    2a06:	d0 91 0c 22 	lds	r29, 0x220C	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>
    2a0a:	9e 01       	movw	r18, r28
    2a0c:	20 0f       	add	r18, r16
    2a0e:	31 1f       	adc	r19, r17
    2a10:	82 17       	cp	r24, r18
    2a12:	93 07       	cpc	r25, r19
    2a14:	18 f4       	brcc	.+6      	; 0x2a1c <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2a16:	8c 01       	movw	r16, r24
    2a18:	0c 1b       	sub	r16, r28
    2a1a:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2a1c:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x8>
    2a20:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x9>
    2a24:	a8 01       	movw	r20, r16
    2a26:	6b ec       	ldi	r22, 0xCB	; 203
    2a28:	71 e2       	ldi	r23, 0x21	; 33
    2a2a:	8c 0f       	add	r24, r28
    2a2c:	9d 1f       	adc	r25, r29
    2a2e:	98 d0       	rcall	.+304    	; 0x2b60 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2a30:	c0 0f       	add	r28, r16
    2a32:	d1 1f       	adc	r29, r17
    2a34:	c0 93 0b 22 	sts	0x220B, r28	; 0x80220b <udd_ctrl_payload_nb_trans>
    2a38:	d0 93 0c 22 	sts	0x220C, r29	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2a3c:	00 34       	cpi	r16, 0x40	; 64
    2a3e:	11 05       	cpc	r17, r1
    2a40:	69 f4       	brne	.+26     	; 0x2a5c <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2a42:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ctrl_prev_payload_nb_trans>
    2a46:	90 91 0e 22 	lds	r25, 0x220E	; 0x80220e <udd_ctrl_prev_payload_nb_trans+0x1>
    2a4a:	8c 0f       	add	r24, r28
    2a4c:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2a4e:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    2a52:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    2a56:	82 17       	cp	r24, r18
    2a58:	93 07       	cpc	r25, r19
    2a5a:	80 f0       	brcs	.+32     	; 0x2a7c <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2a5c:	e2 e7       	ldi	r30, 0x72	; 114
    2a5e:	f4 e2       	ldi	r31, 0x24	; 36
    2a60:	c2 87       	std	Z+10, r28	; 0x0a
    2a62:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2a64:	06 84       	ldd	r0, Z+14	; 0x0e
    2a66:	f7 85       	ldd	r31, Z+15	; 0x0f
    2a68:	e0 2d       	mov	r30, r0
    2a6a:	30 97       	sbiw	r30, 0x00	; 0
    2a6c:	29 f0       	breq	.+10     	; 0x2a78 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2a6e:	09 95       	icall
    2a70:	81 11       	cpse	r24, r1
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2a74:	44 d9       	rcall	.-3448   	; 0x1cfe <udd_ctrl_stall_data>
    2a76:	32 c0       	rjmp	.+100    	; 0x2adc <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2a78:	50 d9       	rcall	.-3424   	; 0x1d1a <udd_ctrl_send_zlp_in>
    2a7a:	30 c0       	rjmp	.+96     	; 0x2adc <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2a7c:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0xa>
    2a80:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0xb>
    2a84:	c8 17       	cp	r28, r24
    2a86:	d9 07       	cpc	r29, r25
    2a88:	f9 f4       	brne	.+62     	; 0x2ac8 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2a8a:	e0 91 80 24 	lds	r30, 0x2480	; 0x802480 <udd_g_ctrlreq+0xe>
    2a8e:	f0 91 81 24 	lds	r31, 0x2481	; 0x802481 <udd_g_ctrlreq+0xf>
    2a92:	30 97       	sbiw	r30, 0x00	; 0
    2a94:	11 f4       	brne	.+4      	; 0x2a9a <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2a96:	33 d9       	rcall	.-3482   	; 0x1cfe <udd_ctrl_stall_data>
    2a98:	21 c0       	rjmp	.+66     	; 0x2adc <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2a9a:	09 95       	icall
    2a9c:	81 11       	cpse	r24, r1
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2aa0:	2e d9       	rcall	.-3492   	; 0x1cfe <udd_ctrl_stall_data>
    2aa2:	1c c0       	rjmp	.+56     	; 0x2adc <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2aa4:	20 91 0d 22 	lds	r18, 0x220D	; 0x80220d <udd_ctrl_prev_payload_nb_trans>
    2aa8:	30 91 0e 22 	lds	r19, 0x220E	; 0x80220e <udd_ctrl_prev_payload_nb_trans+0x1>
    2aac:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ctrl_payload_nb_trans>
    2ab0:	90 91 0c 22 	lds	r25, 0x220C	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>
    2ab4:	82 0f       	add	r24, r18
    2ab6:	93 1f       	adc	r25, r19
    2ab8:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ctrl_prev_payload_nb_trans>
    2abc:	90 93 0e 22 	sts	0x220E, r25	; 0x80220e <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2ac0:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ctrl_payload_nb_trans>
    2ac4:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2ac8:	e0 e2       	ldi	r30, 0x20	; 32
    2aca:	f2 e2       	ldi	r31, 0x22	; 34
    2acc:	02 e0       	ldi	r16, 0x02	; 2
    2ace:	06 93       	lac	Z, r16
    2ad0:	05 c0       	rjmp	.+10     	; 0x2adc <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2ad2:	80 38       	cpi	r24, 0x80	; 128
    2ad4:	11 f4       	brne	.+4      	; 0x2ada <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2ad6:	37 d9       	rcall	.-3474   	; 0x1d46 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2ad8:	01 c0       	rjmp	.+2      	; 0x2adc <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2ada:	51 da       	rcall	.-2910   	; 0x1f7e <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2adc:	ff 91       	pop	r31
    2ade:	ef 91       	pop	r30
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	bf 91       	pop	r27
    2ae6:	af 91       	pop	r26
    2ae8:	9f 91       	pop	r25
    2aea:	8f 91       	pop	r24
    2aec:	7f 91       	pop	r23
    2aee:	6f 91       	pop	r22
    2af0:	5f 91       	pop	r21
    2af2:	4f 91       	pop	r20
    2af4:	3f 91       	pop	r19
    2af6:	2f 91       	pop	r18
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	0f 90       	pop	r0
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	0f 90       	pop	r0
    2b02:	1f 90       	pop	r1
    2b04:	18 95       	reti

00002b06 <__udivmodhi4>:
    2b06:	aa 1b       	sub	r26, r26
    2b08:	bb 1b       	sub	r27, r27
    2b0a:	51 e1       	ldi	r21, 0x11	; 17
    2b0c:	07 c0       	rjmp	.+14     	; 0x2b1c <__udivmodhi4_ep>

00002b0e <__udivmodhi4_loop>:
    2b0e:	aa 1f       	adc	r26, r26
    2b10:	bb 1f       	adc	r27, r27
    2b12:	a6 17       	cp	r26, r22
    2b14:	b7 07       	cpc	r27, r23
    2b16:	10 f0       	brcs	.+4      	; 0x2b1c <__udivmodhi4_ep>
    2b18:	a6 1b       	sub	r26, r22
    2b1a:	b7 0b       	sbc	r27, r23

00002b1c <__udivmodhi4_ep>:
    2b1c:	88 1f       	adc	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	5a 95       	dec	r21
    2b22:	a9 f7       	brne	.-22     	; 0x2b0e <__udivmodhi4_loop>
    2b24:	80 95       	com	r24
    2b26:	90 95       	com	r25
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	08 95       	ret

00002b2e <__divmodhi4>:
    2b2e:	97 fb       	bst	r25, 7
    2b30:	07 2e       	mov	r0, r23
    2b32:	16 f4       	brtc	.+4      	; 0x2b38 <__divmodhi4+0xa>
    2b34:	00 94       	com	r0
    2b36:	06 d0       	rcall	.+12     	; 0x2b44 <__divmodhi4_neg1>
    2b38:	77 fd       	sbrc	r23, 7
    2b3a:	08 d0       	rcall	.+16     	; 0x2b4c <__divmodhi4_neg2>
    2b3c:	e4 df       	rcall	.-56     	; 0x2b06 <__udivmodhi4>
    2b3e:	07 fc       	sbrc	r0, 7
    2b40:	05 d0       	rcall	.+10     	; 0x2b4c <__divmodhi4_neg2>
    2b42:	3e f4       	brtc	.+14     	; 0x2b52 <__divmodhi4_exit>

00002b44 <__divmodhi4_neg1>:
    2b44:	90 95       	com	r25
    2b46:	81 95       	neg	r24
    2b48:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4a:	08 95       	ret

00002b4c <__divmodhi4_neg2>:
    2b4c:	70 95       	com	r23
    2b4e:	61 95       	neg	r22
    2b50:	7f 4f       	sbci	r23, 0xFF	; 255

00002b52 <__divmodhi4_exit>:
    2b52:	08 95       	ret

00002b54 <__tablejump2__>:
    2b54:	ee 0f       	add	r30, r30
    2b56:	ff 1f       	adc	r31, r31
    2b58:	05 90       	lpm	r0, Z+
    2b5a:	f4 91       	lpm	r31, Z
    2b5c:	e0 2d       	mov	r30, r0
    2b5e:	09 94       	ijmp

00002b60 <memcpy>:
    2b60:	fb 01       	movw	r30, r22
    2b62:	dc 01       	movw	r26, r24
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <memcpy+0xa>
    2b66:	01 90       	ld	r0, Z+
    2b68:	0d 92       	st	X+, r0
    2b6a:	41 50       	subi	r20, 0x01	; 1
    2b6c:	50 40       	sbci	r21, 0x00	; 0
    2b6e:	d8 f7       	brcc	.-10     	; 0x2b66 <memcpy+0x6>
    2b70:	08 95       	ret

00002b72 <_exit>:
    2b72:	f8 94       	cli

00002b74 <__stop_program>:
    2b74:	ff cf       	rjmp	.-2      	; 0x2b74 <__stop_program>
