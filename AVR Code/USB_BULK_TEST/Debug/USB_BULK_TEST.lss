
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  00002cb0  00002d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b9e  008020b2  008020b2  00002df6  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002df6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00002e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ae96  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cb4  00000000  00000000  0000e1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000093e2  00000000  00000000  0000fe9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  0001927c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f6c3  00000000  00000000  00019d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002402  00000000  00000000  00049457  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  0004b860  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bc20  00000000  00000000  0004bc68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2c c1       	rjmp	.+600    	; 0x25a <__ctors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c6       	rjmp	.+3192   	; 0xc92 <__vector_6>
      1a:	00 00       	nop
      1c:	72 c7       	rjmp	.+3812   	; 0xf02 <__vector_7>
      1e:	00 00       	nop
      20:	df c7       	rjmp	.+4030   	; 0xfe0 <__vector_8>
      22:	00 00       	nop
      24:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__vector_9>
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	26 c1       	rjmp	.+588    	; 0x292 <__bad_interrupt>
      46:	00 00       	nop
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1a c1       	rjmp	.+564    	; 0x292 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_24>
      64:	16 c1       	rjmp	.+556    	; 0x292 <__bad_interrupt>
      66:	00 00       	nop
      68:	14 c1       	rjmp	.+552    	; 0x292 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	08 c1       	rjmp	.+528    	; 0x292 <__bad_interrupt>
      82:	00 00       	nop
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fa c0       	rjmp	.+500    	; 0x292 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f4 c0       	rjmp	.+488    	; 0x292 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ea c0       	rjmp	.+468    	; 0x292 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d6 c0       	rjmp	.+428    	; 0x292 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d4 c0       	rjmp	.+424    	; 0x292 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d2 c0       	rjmp	.+420    	; 0x292 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d0 c0       	rjmp	.+416    	; 0x292 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ce c0       	rjmp	.+412    	; 0x292 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	cc c0       	rjmp	.+408    	; 0x292 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ca c0       	rjmp	.+404    	; 0x292 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c8 c0       	rjmp	.+400    	; 0x292 <__bad_interrupt>
     102:	00 00       	nop
     104:	c6 c0       	rjmp	.+396    	; 0x292 <__bad_interrupt>
     106:	00 00       	nop
     108:	c4 c0       	rjmp	.+392    	; 0x292 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c2 c0       	rjmp	.+388    	; 0x292 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c0 c0       	rjmp	.+384    	; 0x292 <__bad_interrupt>
     112:	00 00       	nop
     114:	be c0       	rjmp	.+380    	; 0x292 <__bad_interrupt>
     116:	00 00       	nop
     118:	bc c0       	rjmp	.+376    	; 0x292 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c0       	rjmp	.+372    	; 0x292 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b8 c0       	rjmp	.+368    	; 0x292 <__bad_interrupt>
     122:	00 00       	nop
     124:	b6 c0       	rjmp	.+364    	; 0x292 <__bad_interrupt>
     126:	00 00       	nop
     128:	b4 c0       	rjmp	.+360    	; 0x292 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	b2 c0       	rjmp	.+356    	; 0x292 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b0 c0       	rjmp	.+352    	; 0x292 <__bad_interrupt>
     132:	00 00       	nop
     134:	ae c0       	rjmp	.+348    	; 0x292 <__bad_interrupt>
     136:	00 00       	nop
     138:	ac c0       	rjmp	.+344    	; 0x292 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	aa c0       	rjmp	.+340    	; 0x292 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a8 c0       	rjmp	.+336    	; 0x292 <__bad_interrupt>
     142:	00 00       	nop
     144:	a6 c0       	rjmp	.+332    	; 0x292 <__bad_interrupt>
     146:	00 00       	nop
     148:	a4 c0       	rjmp	.+328    	; 0x292 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__vector_83>
     150:	a0 c0       	rjmp	.+320    	; 0x292 <__bad_interrupt>
     152:	00 00       	nop
     154:	9e c0       	rjmp	.+316    	; 0x292 <__bad_interrupt>
     156:	00 00       	nop
     158:	9c c0       	rjmp	.+312    	; 0x292 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9a c0       	rjmp	.+308    	; 0x292 <__bad_interrupt>
     15e:	00 00       	nop
     160:	98 c0       	rjmp	.+304    	; 0x292 <__bad_interrupt>
     162:	00 00       	nop
     164:	96 c0       	rjmp	.+300    	; 0x292 <__bad_interrupt>
     166:	00 00       	nop
     168:	94 c0       	rjmp	.+296    	; 0x292 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	92 c0       	rjmp	.+292    	; 0x292 <__bad_interrupt>
     16e:	00 00       	nop
     170:	90 c0       	rjmp	.+288    	; 0x292 <__bad_interrupt>
     172:	00 00       	nop
     174:	8e c0       	rjmp	.+284    	; 0x292 <__bad_interrupt>
     176:	00 00       	nop
     178:	8c c0       	rjmp	.+280    	; 0x292 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8a c0       	rjmp	.+276    	; 0x292 <__bad_interrupt>
     17e:	00 00       	nop
     180:	88 c0       	rjmp	.+272    	; 0x292 <__bad_interrupt>
     182:	00 00       	nop
     184:	86 c0       	rjmp	.+268    	; 0x292 <__bad_interrupt>
     186:	00 00       	nop
     188:	84 c0       	rjmp	.+264    	; 0x292 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	82 c0       	rjmp	.+260    	; 0x292 <__bad_interrupt>
     18e:	00 00       	nop
     190:	80 c0       	rjmp	.+256    	; 0x292 <__bad_interrupt>
     192:	00 00       	nop
     194:	7e c0       	rjmp	.+252    	; 0x292 <__bad_interrupt>
     196:	00 00       	nop
     198:	7c c0       	rjmp	.+248    	; 0x292 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7a c0       	rjmp	.+244    	; 0x292 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	78 c0       	rjmp	.+240    	; 0x292 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	76 c0       	rjmp	.+236    	; 0x292 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	74 c0       	rjmp	.+232    	; 0x292 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	72 c0       	rjmp	.+228    	; 0x292 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	70 c0       	rjmp	.+224    	; 0x292 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	6e c0       	rjmp	.+220    	; 0x292 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	6c c0       	rjmp	.+216    	; 0x292 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6a c0       	rjmp	.+212    	; 0x292 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	68 c0       	rjmp	.+208    	; 0x292 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	66 c0       	rjmp	.+204    	; 0x292 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	64 c0       	rjmp	.+200    	; 0x292 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	62 c0       	rjmp	.+196    	; 0x292 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	60 c0       	rjmp	.+192    	; 0x292 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5e c0       	rjmp	.+188    	; 0x292 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	5c c0       	rjmp	.+184    	; 0x292 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5a c0       	rjmp	.+180    	; 0x292 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	58 c0       	rjmp	.+176    	; 0x292 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	54 c0       	rjmp	.+168    	; 0x292 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	52 c0       	rjmp	.+164    	; 0x292 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	50 c0       	rjmp	.+160    	; 0x292 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__vector_125>
     1f8:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__vector_126>
     1fc:	67 06       	cpc	r6, r23
     1fe:	8e 06       	cpc	r8, r30
     200:	b5 06       	cpc	r11, r21
     202:	dc 06       	cpc	r13, r28
     204:	03 07       	cpc	r16, r19
     206:	73 07       	cpc	r23, r19
     208:	2a 07       	cpc	r18, r26
     20a:	4f 07       	cpc	r20, r31
     20c:	6f 0b       	sbc	r22, r31
     20e:	71 0b       	sbc	r23, r17
     210:	af 0b       	sbc	r26, r31
     212:	ee 0b       	sbc	r30, r30
     214:	f7 0b       	sbc	r31, r23
     216:	fc 0b       	sbc	r31, r28
     218:	50 0c       	add	r5, r0
     21a:	55 0c       	add	r5, r5
     21c:	9d 0b       	sbc	r25, r29
     21e:	a0 0b       	sbc	r26, r16
     220:	a3 0b       	sbc	r26, r19
     222:	a5 0b       	sbc	r26, r21
     224:	a7 0b       	sbc	r26, r23
     226:	a9 0b       	sbc	r26, r25
     228:	ab 0b       	sbc	r26, r27
     22a:	ad 0b       	sbc	r26, r29
     22c:	db 0b       	sbc	r29, r27
     22e:	de 0b       	sbc	r29, r30
     230:	e1 0b       	sbc	r30, r17
     232:	e4 0b       	sbc	r30, r20
     234:	e6 0b       	sbc	r30, r22
     236:	e8 0b       	sbc	r30, r24
     238:	ea 0b       	sbc	r30, r26
     23a:	ec 0b       	sbc	r30, r28
     23c:	08 0c       	add	r0, r8
     23e:	13 0c       	add	r1, r3
     240:	1e 0c       	add	r1, r14
     242:	2d 0c       	add	r2, r13
     244:	2f 0c       	add	r2, r15
     246:	31 0c       	add	r3, r1
     248:	3b 0c       	add	r3, r11
     24a:	45 0c       	add	r4, r5
     24c:	cd 0f       	add	r28, r29
     24e:	d0 0f       	add	r29, r16
     250:	d3 0f       	add	r29, r19
     252:	d6 0f       	add	r29, r22
     254:	d9 0f       	add	r29, r25
     256:	dc 0f       	add	r29, r28
     258:	df 0f       	add	r29, r31

0000025a <__ctors_end>:
     25a:	11 24       	eor	r1, r1
     25c:	1f be       	out	0x3f, r1	; 63
     25e:	cf ef       	ldi	r28, 0xFF	; 255
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df e2       	ldi	r29, 0x2F	; 47
     264:	de bf       	out	0x3e, r29	; 62

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	e0 eb       	ldi	r30, 0xB0	; 176
     26e:	fc e2       	ldi	r31, 0x2C	; 44
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x10>
     272:	05 90       	lpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	a2 3b       	cpi	r26, 0xB2	; 178
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0xc>

0000027c <__do_clear_bss>:
     27c:	2c e2       	ldi	r18, 0x2C	; 44
     27e:	a2 eb       	ldi	r26, 0xB2	; 178
     280:	b0 e2       	ldi	r27, 0x20	; 32
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	a0 35       	cpi	r26, 0x50	; 80
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	53 d0       	rcall	.+166    	; 0x334 <main>
     28e:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <_exit>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <tiny_calibration_init>:

#include "tiny_calibration.h"
#include "globals.h"

tiny_calibration_init(){
	PR.PRPE &= 0b11111110;
     294:	e0 e7       	ldi	r30, 0x70	; 112
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	85 81       	ldd	r24, Z+5	; 0x05
     29a:	8e 7f       	andi	r24, 0xFE	; 254
     29c:	85 83       	std	Z+5, r24	; 0x05
	TC_CALI.PER = 24000;
     29e:	e0 e0       	ldi	r30, 0x00	; 0
     2a0:	fa e0       	ldi	r31, 0x0A	; 10
     2a2:	80 ec       	ldi	r24, 0xC0	; 192
     2a4:	9d e5       	ldi	r25, 0x5D	; 93
     2a6:	86 a3       	std	Z+38, r24	; 0x26
     2a8:	97 a3       	std	Z+39, r25	; 0x27
	TC_CALI.CNT = 12000;
     2aa:	80 ee       	ldi	r24, 0xE0	; 224
     2ac:	9e e2       	ldi	r25, 0x2E	; 46
     2ae:	80 a3       	std	Z+32, r24	; 0x20
     2b0:	91 a3       	std	Z+33, r25	; 0x21
	TC_CALI.CTRLA = TC_CLKSEL_DIV1_gc;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	80 83       	st	Z, r24
     2b6:	08 95       	ret

000002b8 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     2b8:	e0 e8       	ldi	r30, 0x80	; 128
     2ba:	f6 e0       	ldi	r31, 0x06	; 6
     2bc:	8f e0       	ldi	r24, 0x0F	; 15
     2be:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     2c0:	85 e0       	ldi	r24, 0x05	; 5
     2c2:	84 83       	std	Z+4, r24	; 0x04
     2c4:	08 95       	ret

000002c6 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     2c6:	08 95       	ret

000002c8 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * PACKET_SIZE], 250, iso_callback);
     2c8:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <usb_state>
     2cc:	2e ee       	ldi	r18, 0xEE	; 238
     2ce:	32 e0       	ldi	r19, 0x02	; 2
     2d0:	42 9f       	mul	r20, r18
     2d2:	c0 01       	movw	r24, r0
     2d4:	43 9f       	mul	r20, r19
     2d6:	90 0d       	add	r25, r0
     2d8:	11 24       	eor	r1, r1
     2da:	44 e6       	ldi	r20, 0x64	; 100
     2dc:	51 e0       	ldi	r21, 0x01	; 1
     2de:	6a ef       	ldi	r22, 0xFA	; 250
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	82 59       	subi	r24, 0x92	; 146
     2e4:	99 4d       	sbci	r25, 0xD9	; 217
     2e6:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <udi_vendor_iso_in_run>
     2ea:	08 95       	ret

000002ec <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 250], 250, iso_callback2);
     2ec:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <usb_state>
     2f0:	2e ee       	ldi	r18, 0xEE	; 238
     2f2:	32 e0       	ldi	r19, 0x02	; 2
     2f4:	42 9f       	mul	r20, r18
     2f6:	c0 01       	movw	r24, r0
     2f8:	43 9f       	mul	r20, r19
     2fa:	90 0d       	add	r25, r0
     2fc:	11 24       	eor	r1, r1
     2fe:	46 e7       	ldi	r20, 0x76	; 118
     300:	51 e0       	ldi	r21, 0x01	; 1
     302:	6a ef       	ldi	r22, 0xFA	; 250
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	88 59       	subi	r24, 0x98	; 152
     308:	98 4d       	sbci	r25, 0xD8	; 216
     30a:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <udi_vendor_iso_in_run2>
     30e:	08 95       	ret

00000310 <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 500], 250, iso_callback3);
     310:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <usb_state>
     314:	2e ee       	ldi	r18, 0xEE	; 238
     316:	32 e0       	ldi	r19, 0x02	; 2
     318:	42 9f       	mul	r20, r18
     31a:	c0 01       	movw	r24, r0
     31c:	43 9f       	mul	r20, r19
     31e:	90 0d       	add	r25, r0
     320:	11 24       	eor	r1, r1
     322:	48 e8       	ldi	r20, 0x88	; 136
     324:	51 e0       	ldi	r21, 0x01	; 1
     326:	6a ef       	ldi	r22, 0xFA	; 250
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	8e 59       	subi	r24, 0x9E	; 158
     32c:	97 4d       	sbci	r25, 0xD7	; 215
     32e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <udi_vendor_iso_in_run3>
     332:	08 95       	ret

00000334 <main>:

unsigned char firstFrame = 0;
unsigned char tcinit = 0;

int main(void){
	irq_initialize_vectors();
     334:	87 e0       	ldi	r24, 0x07	; 7
     336:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     33a:	78 94       	sei
//	sysclk_init();

	
	//Set up 48MHz DFLL for USB.
	OSC.DFLLCTRL = OSC_RC32MCREF_USBSOF_gc;
     33c:	c0 e5       	ldi	r28, 0x50	; 80
     33e:	d0 e0       	ldi	r29, 0x00	; 0
     340:	14 e0       	ldi	r17, 0x04	; 4
     342:	1e 83       	std	Y+6, r17	; 0x06
	DFLLRC32M.CALB = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC)); //THIS is the val for 48MHz.  RCOSC32M is for a 32MHz calibration.  That makes a lot of sense now...
     344:	8c e1       	ldi	r24, 0x1C	; 28
     346:	c2 d0       	rcall	.+388    	; 0x4cc <ReadCalibrationByte>
     348:	e0 e6       	ldi	r30, 0x60	; 96
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	83 83       	std	Z+3, r24	; 0x03
	DFLLRC32M.COMP2 = 0xBB;
     34e:	8b eb       	ldi	r24, 0xBB	; 187
     350:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.COMP1= 0x80;  //0xBB80 = 48,000.  
     352:	80 e8       	ldi	r24, 0x80	; 128
     354:	85 83       	std	Z+5, r24	; 0x05
	DFLLRC32M.CTRL = 0x01; //Enable
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 83       	st	Z, r24
		
	CCP = CCP_IOREG_gc;
     35a:	88 ed       	ldi	r24, 0xD8	; 216
     35c:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc;  //All peripheral clocks = CLKsys / 2.
     35e:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
	//CLK.USBCTRL handled by udc
	OSC.CTRL = OSC_RC32MEN_bm | OSC_RC2MEN_bm;  //Enable 2MHz, 32MHz references.
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	88 83       	st	Y, r24
	while(OSC.STATUS != (OSC_RC32MRDY_bm | OSC_RC2MRDY_bm)); //Wait for them all to be ready before continuing
     366:	e0 e5       	ldi	r30, 0x50	; 80
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	81 81       	ldd	r24, Z+1	; 0x01
     36c:	83 30       	cpi	r24, 0x03	; 3
     36e:	e9 f7       	brne	.-6      	; 0x36a <main+0x36>
	
	//4 step process from ASF manual.  Puts a 48MHz clock on the PLL output
	OSC.CTRL |= OSC_RC2MEN_bm;  //1. Enable reference clock source.
     370:	e0 e5       	ldi	r30, 0x50	; 80
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	81 60       	ori	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
	OSC.PLLCTRL = OSC_PLLSRC_RC2M_gc | 24; //2. Set the multiplication factor and select the clock reference for the PLL.
     37a:	88 e1       	ldi	r24, 0x18	; 24
     37c:	85 83       	std	Z+5, r24	; 0x05
	while(!(OSC.STATUS & OSC_RC2MRDY_bm)); //3. Wait until the clock reference source is stable.
     37e:	81 81       	ldd	r24, Z+1	; 0x01
     380:	80 ff       	sbrs	r24, 0
     382:	fd cf       	rjmp	.-6      	; 0x37e <main+0x4a>
	OSC.CTRL |= OSC_PLLEN_bm; //4. Enable the PLL
     384:	e0 e5       	ldi	r30, 0x50	; 80
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	80 61       	ori	r24, 0x10	; 16
     38c:	80 83       	st	Z, r24
	
	//Move CPU + Peripherals to 48MHz clock.
	CCP = CCP_IOREG_gc;
     38e:	88 ed       	ldi	r24, 0xD8	; 216
     390:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	
	

	
	board_init();
     398:	96 df       	rcall	.-212    	; 0x2c6 <board_init>
	udc_start();
     39a:	0e 94 ef 0a 	call	0x15de	; 0x15de <udc_start>
	tiny_dac_setup();
     39e:	dc d0       	rcall	.+440    	; 0x558 <tiny_dac_setup>
	tiny_dma_setup();
     3a0:	ff d0       	rcall	.+510    	; 0x5a0 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	9b d0       	rcall	.+310    	; 0x4de <tiny_adc_setup>
	tiny_adc_pid_setup();
     3a8:	87 d0       	rcall	.+270    	; 0x4b8 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     3aa:	8c e0       	ldi	r24, 0x0C	; 12
     3ac:	7b d0       	rcall	.+246    	; 0x4a4 <tiny_adc_ch1setup>
	tiny_timer_setup();
     3ae:	9e d6       	rcall	.+3388   	; 0x10ec <tiny_timer_setup>
	tiny_uart_setup();
     3b0:	59 d7       	rcall	.+3762   	; 0x1264 <tiny_uart_setup>
	tiny_spi_setup();
     3b2:	70 d7       	rcall	.+3808   	; 0x1294 <tiny_spi_setup>
	tiny_dig_setup();
     3b4:	81 df       	rcall	.-254    	; 0x2b8 <tiny_dig_setup>
     3b6:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <debug_counter>
     3ba:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <debug_counter+0x1>
     3be:	a0 91 5c 22 	lds	r26, 0x225C	; 0x80225c <debug_counter+0x2>
     3c2:	b0 91 5d 22 	lds	r27, 0x225D	; 0x80225d <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	a1 1d       	adc	r26, r1
     3ca:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	21 ee       	ldi	r18, 0xE1	; 225
     3d0:	92 07       	cpc	r25, r18
     3d2:	25 ef       	ldi	r18, 0xF5	; 245
     3d4:	a2 07       	cpc	r26, r18
     3d6:	25 e0       	ldi	r18, 0x05	; 5
     3d8:	b2 07       	cpc	r27, r18
     3da:	18 f0       	brcs	.+6      	; 0x3e2 <main+0xae>
			debug_counter = 0;
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     3fe:	e3 cf       	rjmp	.-58     	; 0x3c6 <main+0x92>

00000400 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     400:	08 95       	ret

00000402 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     402:	08 95       	ret

00000404 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	if(firstFrame){
     404:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <firstFrame>
     408:	88 23       	and	r24, r24
     40a:	39 f0       	breq	.+14     	; 0x41a <main_sof_action+0x16>

		tiny_calibration_init();
     40c:	43 df       	rcall	.-378    	; 0x294 <tiny_calibration_init>
		firstFrame = 0;
     40e:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <firstFrame>
		tcinit = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
     418:	05 c0       	rjmp	.+10     	; 0x424 <main_sof_action+0x20>
	}
	else{
		if(tcinit){
     41a:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     41e:	88 23       	and	r24, r24
     420:	09 f0       	breq	.+2      	; 0x424 <main_sof_action+0x20>
			asm("nop");
     422:	00 00       	nop
		}
	}
	usb_state = !b1_state;
     424:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b1_state>
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	91 11       	cpse	r25, r1
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <usb_state>
     432:	08 95       	ret

00000434 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <main_b_vendor_enable>
	firstFrame = 1;
     43a:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     43e:	44 e6       	ldi	r20, 0x64	; 100
     440:	51 e0       	ldi	r21, 0x01	; 1
     442:	6e ee       	ldi	r22, 0xEE	; 238
     444:	72 e0       	ldi	r23, 0x02	; 2
     446:	8e e6       	ldi	r24, 0x6E	; 110
     448:	96 e2       	ldi	r25, 0x26	; 38
     44a:	ba d7       	rcall	.+3956   	; 0x13c0 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     44c:	46 e7       	ldi	r20, 0x76	; 118
     44e:	51 e0       	ldi	r21, 0x01	; 1
     450:	6e ee       	ldi	r22, 0xEE	; 238
     452:	72 e0       	ldi	r23, 0x02	; 2
     454:	88 e6       	ldi	r24, 0x68	; 104
     456:	97 e2       	ldi	r25, 0x27	; 39
     458:	bf d7       	rcall	.+3966   	; 0x13d8 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     45a:	48 e8       	ldi	r20, 0x88	; 136
     45c:	51 e0       	ldi	r21, 0x01	; 1
     45e:	6e ee       	ldi	r22, 0xEE	; 238
     460:	72 e0       	ldi	r23, 0x02	; 2
     462:	82 e6       	ldi	r24, 0x62	; 98
     464:	98 e2       	ldi	r25, 0x28	; 40
     466:	c4 d7       	rcall	.+3976   	; 0x13f0 <udi_vendor_iso_in_run3>
	return true;
}
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	08 95       	ret

0000046c <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     46c:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <main_b_vendor_enable>
     470:	08 95       	ret

00000472 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	08 95       	ret

00000476 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	08 95       	ret

0000047a <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     47a:	e0 e0       	ldi	r30, 0x00	; 0
     47c:	f2 e0       	ldi	r31, 0x02	; 2
     47e:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     480:	98 2f       	mov	r25, r24
     482:	9c 71       	andi	r25, 0x1C	; 28
     484:	93 68       	ori	r25, 0x83	; 131
     486:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     488:	88 23       	and	r24, r24
     48a:	1c f4       	brge	.+6      	; 0x492 <tiny_adc_ch0setup+0x18>
     48c:	90 e1       	ldi	r25, 0x10	; 16
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	02 c0       	rjmp	.+4      	; 0x496 <tiny_adc_ch0setup+0x1c>
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	89 2b       	or	r24, r25
     498:	e0 e0       	ldi	r30, 0x00	; 0
     49a:	f2 e0       	ldi	r31, 0x02	; 2
     49c:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     49e:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     4a0:	16 a2       	std	Z+38, r1	; 0x26
     4a2:	08 95       	ret

000004a4 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     4a4:	e0 e0       	ldi	r30, 0x00	; 0
     4a6:	f2 e0       	ldi	r31, 0x02	; 2
     4a8:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     4aa:	83 68       	ori	r24, 0x83	; 131
     4ac:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     4ae:	80 e1       	ldi	r24, 0x10	; 16
     4b0:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     4b2:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     4b4:	16 aa       	std	Z+54, r1	; 0x36
     4b6:	08 95       	ret

000004b8 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     4b8:	e0 e0       	ldi	r30, 0x00	; 0
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
     4bc:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     4be:	83 e8       	ldi	r24, 0x83	; 131
     4c0:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     4c2:	8f e2       	ldi	r24, 0x2F	; 47
     4c4:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     4c6:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     4c8:	16 a6       	std	Z+46, r1	; 0x2e
     4ca:	08 95       	ret

000004cc <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4cc:	aa ec       	ldi	r26, 0xCA	; 202
     4ce:	b1 e0       	ldi	r27, 0x01	; 1
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     4d4:	e8 2f       	mov	r30, r24
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4da:	1c 92       	st	X, r1

	return( result );
     4dc:	08 95       	ret

000004de <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     4e2:	e0 e7       	ldi	r30, 0x70	; 112
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	91 81       	ldd	r25, Z+1	; 0x01
     4e8:	9d 7f       	andi	r25, 0xFD	; 253
     4ea:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     4ec:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     4f0:	62 30       	cpi	r22, 0x02	; 2
     4f2:	31 f1       	breq	.+76     	; 0x540 <tiny_adc_setup+0x62>
     4f4:	e0 e0       	ldi	r30, 0x00	; 0
     4f6:	f2 e0       	ldi	r31, 0x02	; 2
     4f8:	9c e1       	ldi	r25, 0x1C	; 28
     4fa:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     4fc:	90 e4       	ldi	r25, 0x40	; 64
     4fe:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     500:	81 11       	cpse	r24, r1
     502:	02 c0       	rjmp	.+4      	; 0x508 <tiny_adc_setup+0x2a>
     504:	80 e4       	ldi	r24, 0x40	; 64
     506:	01 c0       	rjmp	.+2      	; 0x50a <tiny_adc_setup+0x2c>
     508:	80 ec       	ldi	r24, 0xC0	; 192
     50a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     50e:	61 30       	cpi	r22, 0x01	; 1
     510:	11 f0       	breq	.+4      	; 0x516 <tiny_adc_setup+0x38>
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	01 c0       	rjmp	.+2      	; 0x518 <tiny_adc_setup+0x3a>
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	c0 e0       	ldi	r28, 0x00	; 0
     51a:	d2 e0       	ldi	r29, 0x02	; 2
     51c:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     51e:	80 e2       	ldi	r24, 0x20	; 32
     520:	d5 df       	rcall	.-86     	; 0x4cc <ReadCalibrationByte>
     522:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     524:	81 e2       	ldi	r24, 0x21	; 33
     526:	d2 df       	rcall	.-92     	; 0x4cc <ReadCalibrationByte>
     528:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     52a:	18 8e       	std	Y+24, r1	; 0x18
     52c:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     532:	c2 df       	rcall	.-124    	; 0x4b8 <tiny_adc_pid_setup>
     534:	0e c0       	rjmp	.+28     	; 0x552 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     536:	80 ec       	ldi	r24, 0xC0	; 192
     538:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     53c:	83 e0       	ldi	r24, 0x03	; 3
     53e:	ec cf       	rjmp	.-40     	; 0x518 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     540:	e0 e0       	ldi	r30, 0x00	; 0
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	9e e1       	ldi	r25, 0x1E	; 30
     546:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     548:	90 e4       	ldi	r25, 0x40	; 64
     54a:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     54c:	81 11       	cpse	r24, r1
     54e:	f3 cf       	rjmp	.-26     	; 0x536 <tiny_adc_setup+0x58>
     550:	d9 cf       	rjmp	.-78     	; 0x504 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     55c:	e0 e7       	ldi	r30, 0x70	; 112
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	8b 7f       	andi	r24, 0xFB	; 251
     564:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     566:	c0 e2       	ldi	r28, 0x20	; 32
     568:	d3 e0       	ldi	r29, 0x03	; 3
     56a:	8d e0       	ldi	r24, 0x0D	; 13
     56c:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     572:	89 e0       	ldi	r24, 0x09	; 9
     574:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     576:	83 e3       	ldi	r24, 0x33	; 51
     578:	a9 df       	rcall	.-174    	; 0x4cc <ReadCalibrationByte>
     57a:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     57c:	82 e3       	ldi	r24, 0x32	; 50
     57e:	a6 df       	rcall	.-180    	; 0x4cc <ReadCalibrationByte>
     580:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     582:	87 e3       	ldi	r24, 0x37	; 55
     584:	a3 df       	rcall	.-186    	; 0x4cc <ReadCalibrationByte>
     586:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     588:	86 e3       	ldi	r24, 0x36	; 54
     58a:	a0 df       	rcall	.-192    	; 0x4cc <ReadCalibrationByte>
     58c:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     58e:	e0 e2       	ldi	r30, 0x20	; 32
     590:	f6 e0       	ldi	r31, 0x06	; 6
     592:	80 81       	ld	r24, Z
     594:	83 60       	ori	r24, 0x03	; 3
     596:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     598:	14 82       	std	Z+4, r1	; 0x04
	
	

     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     5a0:	e0 e7       	ldi	r30, 0x70	; 112
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	8e 7f       	andi	r24, 0xFE	; 254
     5a8:	80 83       	st	Z, r24
     5aa:	83 e8       	ldi	r24, 0x83	; 131
     5ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     5b0:	08 95       	ret

000005b2 <tiny_dma_flush>:
     5b2:	e0 e0       	ldi	r30, 0x00	; 0
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	10 8a       	std	Z+16, r1	; 0x10
     5b8:	80 e4       	ldi	r24, 0x40	; 64
     5ba:	80 8b       	std	Z+16, r24	; 0x10
     5bc:	10 a2       	std	Z+32, r1	; 0x20
     5be:	80 a3       	std	Z+32, r24	; 0x20
     5c0:	10 aa       	std	Z+48, r1	; 0x30
     5c2:	80 ab       	std	Z+48, r24	; 0x30
     5c4:	e0 e4       	ldi	r30, 0x40	; 64
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
     5c8:	10 82       	st	Z, r1
     5ca:	80 83       	st	Z, r24
     5cc:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <b1_state>
     5d0:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <b2_state>
     5d4:	08 95       	ret

000005d6 <tiny_dma_set_mode_0>:
     5d6:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
     5da:	eb df       	rcall	.-42     	; 0x5b2 <tiny_dma_flush>
     5dc:	e0 e0       	ldi	r30, 0x00	; 0
     5de:	f1 e0       	ldi	r31, 0x01	; 1
     5e0:	16 aa       	std	Z+54, r1	; 0x36
     5e2:	94 e2       	ldi	r25, 0x24	; 36
     5e4:	90 ab       	std	Z+48, r25	; 0x30
     5e6:	11 aa       	std	Z+49, r1	; 0x31
     5e8:	49 e5       	ldi	r20, 0x59	; 89
     5ea:	42 ab       	std	Z+50, r20	; 0x32
     5ec:	32 e0       	ldi	r19, 0x02	; 2
     5ee:	33 ab       	std	Z+51, r19	; 0x33
     5f0:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     5f4:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     5f8:	64 ab       	std	Z+52, r22	; 0x34
     5fa:	75 ab       	std	Z+53, r23	; 0x35
     5fc:	6e e6       	ldi	r22, 0x6E	; 110
     5fe:	74 e2       	ldi	r23, 0x24	; 36
     600:	60 af       	std	Z+56, r22	; 0x38
     602:	71 af       	std	Z+57, r23	; 0x39
     604:	12 ae       	std	Z+58, r1	; 0x3a
     606:	8b e3       	ldi	r24, 0x3B	; 59
     608:	84 af       	std	Z+60, r24	; 0x3c
     60a:	83 e0       	ldi	r24, 0x03	; 3
     60c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     610:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     614:	20 a9       	ldd	r18, Z+48	; 0x30
     616:	20 68       	ori	r18, 0x80	; 128
     618:	20 ab       	std	Z+48, r18	; 0x30
     61a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     61e:	a0 e4       	ldi	r26, 0x40	; 64
     620:	b1 e0       	ldi	r27, 0x01	; 1
     622:	9c 93       	st	X, r25
     624:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     628:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     62c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     630:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     634:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     638:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     63c:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     640:	4e e5       	ldi	r20, 0x5E	; 94
     642:	52 e2       	ldi	r21, 0x22	; 34
     644:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     648:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     64c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     650:	29 e3       	ldi	r18, 0x39	; 57
     652:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     656:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     65a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     65e:	2c 91       	ld	r18, X
     660:	20 68       	ori	r18, 0x80	; 128
     662:	2c 93       	st	X, r18
     664:	10 8a       	std	Z+16, r1	; 0x10
     666:	20 e4       	ldi	r18, 0x40	; 64
     668:	20 8b       	std	Z+16, r18	; 0x10
     66a:	24 e0       	ldi	r18, 0x04	; 4
     66c:	20 8b       	std	Z+16, r18	; 0x10
     66e:	81 8b       	std	Z+17, r24	; 0x11
     670:	81 e9       	ldi	r24, 0x91	; 145
     672:	82 8b       	std	Z+18, r24	; 0x12
     674:	80 e1       	ldi	r24, 0x10	; 16
     676:	83 8b       	std	Z+19, r24	; 0x13
     678:	47 e7       	ldi	r20, 0x77	; 119
     67a:	51 e0       	ldi	r21, 0x01	; 1
     67c:	44 8b       	std	Z+20, r20	; 0x14
     67e:	55 8b       	std	Z+21, r21	; 0x15
     680:	90 8f       	std	Z+24, r25	; 0x18
     682:	31 8f       	std	Z+25, r19	; 0x19
     684:	12 8e       	std	Z+26, r1	; 0x1a
     686:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     68a:	2e ee       	ldi	r18, 0xEE	; 238
     68c:	32 e0       	ldi	r19, 0x02	; 2
     68e:	42 9f       	mul	r20, r18
     690:	c0 01       	movw	r24, r0
     692:	43 9f       	mul	r20, r19
     694:	90 0d       	add	r25, r0
     696:	11 24       	eor	r1, r1
     698:	82 59       	subi	r24, 0x92	; 146
     69a:	99 4d       	sbci	r25, 0xD9	; 217
     69c:	84 8f       	std	Z+28, r24	; 0x1c
     69e:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     6a2:	42 9f       	mul	r20, r18
     6a4:	c0 01       	movw	r24, r0
     6a6:	43 9f       	mul	r20, r19
     6a8:	90 0d       	add	r25, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	82 59       	subi	r24, 0x92	; 146
     6ae:	99 4d       	sbci	r25, 0xD9	; 217
     6b0:	95 8f       	std	Z+29, r25	; 0x1d
     6b2:	16 8e       	std	Z+30, r1	; 0x1e
     6b4:	80 89       	ldd	r24, Z+16	; 0x10
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	80 8b       	std	Z+16, r24	; 0x10
     6ba:	08 95       	ret

000006bc <tiny_dma_set_mode_1>:
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     6c6:	75 df       	rcall	.-278    	; 0x5b2 <tiny_dma_flush>
     6c8:	e0 e0       	ldi	r30, 0x00	; 0
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	10 aa       	std	Z+48, r1	; 0x30
     6ce:	80 e4       	ldi	r24, 0x40	; 64
     6d0:	80 ab       	std	Z+48, r24	; 0x30
     6d2:	94 e0       	ldi	r25, 0x04	; 4
     6d4:	90 ab       	std	Z+48, r25	; 0x30
     6d6:	11 aa       	std	Z+49, r1	; 0x31
     6d8:	12 aa       	std	Z+50, r1	; 0x32
     6da:	5b e4       	ldi	r21, 0x4B	; 75
     6dc:	53 ab       	std	Z+51, r21	; 0x33
     6de:	14 aa       	std	Z+52, r1	; 0x34
     6e0:	15 aa       	std	Z+53, r1	; 0x35
     6e2:	16 aa       	std	Z+54, r1	; 0x36
     6e4:	21 e0       	ldi	r18, 0x01	; 1
     6e6:	30 e2       	ldi	r19, 0x20	; 32
     6e8:	20 af       	std	Z+56, r18	; 0x38
     6ea:	31 af       	std	Z+57, r19	; 0x39
     6ec:	12 ae       	std	Z+58, r1	; 0x3a
     6ee:	40 ea       	ldi	r20, 0xA0	; 160
     6f0:	44 af       	std	Z+60, r20	; 0x3c
     6f2:	38 e0       	ldi	r19, 0x08	; 8
     6f4:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     6f8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     6fc:	80 a9       	ldd	r24, Z+48	; 0x30
     6fe:	80 6a       	ori	r24, 0xA0	; 160
     700:	80 ab       	std	Z+48, r24	; 0x30
     702:	85 e5       	ldi	r24, 0x55	; 85
     704:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     708:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     70c:	a0 e4       	ldi	r26, 0x40	; 64
     70e:	b1 e0       	ldi	r27, 0x01	; 1
     710:	d4 e2       	ldi	r29, 0x24	; 36
     712:	dc 93       	st	X, r29
     714:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     718:	89 e5       	ldi	r24, 0x59	; 89
     71a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     71e:	c2 e0       	ldi	r28, 0x02	; 2
     720:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     724:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     728:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     72c:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     730:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     734:	6e e6       	ldi	r22, 0x6E	; 110
     736:	74 e2       	ldi	r23, 0x24	; 36
     738:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     73c:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     740:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     744:	8b e3       	ldi	r24, 0x3B	; 59
     746:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     750:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     754:	2c 91       	ld	r18, X
     756:	20 68       	ori	r18, 0x80	; 128
     758:	2c 93       	st	X, r18
     75a:	90 8b       	std	Z+16, r25	; 0x10
     75c:	81 8b       	std	Z+17, r24	; 0x11
     75e:	a1 e9       	ldi	r26, 0x91	; 145
     760:	a2 8b       	std	Z+18, r26	; 0x12
     762:	20 e1       	ldi	r18, 0x10	; 16
     764:	23 8b       	std	Z+19, r18	; 0x13
     766:	67 e7       	ldi	r22, 0x77	; 119
     768:	71 e0       	ldi	r23, 0x01	; 1
     76a:	64 8b       	std	Z+20, r22	; 0x14
     76c:	75 8b       	std	Z+21, r23	; 0x15
     76e:	d0 8f       	std	Z+24, r29	; 0x18
     770:	c1 8f       	std	Z+25, r28	; 0x19
     772:	12 8e       	std	Z+26, r1	; 0x1a
     774:	ce e6       	ldi	r28, 0x6E	; 110
     776:	d6 e2       	ldi	r29, 0x26	; 38
     778:	c4 8f       	std	Z+28, r28	; 0x1c
     77a:	d5 8f       	std	Z+29, r29	; 0x1d
     77c:	16 8e       	std	Z+30, r1	; 0x1e
     77e:	20 89       	ldd	r18, Z+16	; 0x10
     780:	20 68       	ori	r18, 0x80	; 128
     782:	20 8b       	std	Z+16, r18	; 0x10
     784:	90 a3       	std	Z+32, r25	; 0x20
     786:	81 a3       	std	Z+33, r24	; 0x21
     788:	a2 a3       	std	Z+34, r26	; 0x22
     78a:	53 a3       	std	Z+35, r21	; 0x23
     78c:	64 a3       	std	Z+36, r22	; 0x24
     78e:	75 a3       	std	Z+37, r23	; 0x25
     790:	40 a7       	std	Z+40, r20	; 0x28
     792:	31 a7       	std	Z+41, r19	; 0x29
     794:	12 a6       	std	Z+42, r1	; 0x2a
     796:	85 ee       	ldi	r24, 0xE5	; 229
     798:	97 e2       	ldi	r25, 0x27	; 39
     79a:	84 a7       	std	Z+44, r24	; 0x2c
     79c:	95 a7       	std	Z+45, r25	; 0x2d
     79e:	16 a6       	std	Z+46, r1	; 0x2e
     7a0:	80 a1       	ldd	r24, Z+32	; 0x20
     7a2:	80 68       	ori	r24, 0x80	; 128
     7a4:	80 a3       	std	Z+32, r24	; 0x20
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <tiny_dma_set_mode_2>:
     7ac:	cf 93       	push	r28
     7ae:	f8 94       	cli
     7b0:	c2 e0       	ldi	r28, 0x02	; 2
     7b2:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     7b6:	fd de       	rcall	.-518    	; 0x5b2 <tiny_dma_flush>
     7b8:	e0 e0       	ldi	r30, 0x00	; 0
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	16 aa       	std	Z+54, r1	; 0x36
     7be:	94 e2       	ldi	r25, 0x24	; 36
     7c0:	90 ab       	std	Z+48, r25	; 0x30
     7c2:	11 aa       	std	Z+49, r1	; 0x31
     7c4:	39 e5       	ldi	r19, 0x59	; 89
     7c6:	32 ab       	std	Z+50, r19	; 0x32
     7c8:	83 e0       	ldi	r24, 0x03	; 3
     7ca:	83 ab       	std	Z+51, r24	; 0x33
     7cc:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     7d0:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     7d4:	44 ab       	std	Z+52, r20	; 0x34
     7d6:	55 ab       	std	Z+53, r21	; 0x35
     7d8:	4e e5       	ldi	r20, 0x5E	; 94
     7da:	52 e2       	ldi	r21, 0x22	; 34
     7dc:	40 af       	std	Z+56, r20	; 0x38
     7de:	51 af       	std	Z+57, r21	; 0x39
     7e0:	12 ae       	std	Z+58, r1	; 0x3a
     7e2:	29 e3       	ldi	r18, 0x39	; 57
     7e4:	24 af       	std	Z+60, r18	; 0x3c
     7e6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     7ea:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     7ee:	20 a9       	ldd	r18, Z+48	; 0x30
     7f0:	20 68       	ori	r18, 0x80	; 128
     7f2:	20 ab       	std	Z+48, r18	; 0x30
     7f4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     7f8:	a0 e4       	ldi	r26, 0x40	; 64
     7fa:	b1 e0       	ldi	r27, 0x01	; 1
     7fc:	9c 93       	st	X, r25
     7fe:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     802:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     806:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     80a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     80e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     812:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     816:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     81a:	2e e6       	ldi	r18, 0x6E	; 110
     81c:	34 e2       	ldi	r19, 0x24	; 36
     81e:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     822:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     826:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     82a:	2b e3       	ldi	r18, 0x3B	; 59
     82c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     830:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     834:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     838:	2c 91       	ld	r18, X
     83a:	20 68       	ori	r18, 0x80	; 128
     83c:	2c 93       	st	X, r18
     83e:	54 e0       	ldi	r21, 0x04	; 4
     840:	50 8b       	std	Z+16, r21	; 0x10
     842:	81 8b       	std	Z+17, r24	; 0x11
     844:	41 e9       	ldi	r20, 0x91	; 145
     846:	42 8b       	std	Z+18, r20	; 0x12
     848:	20 e1       	ldi	r18, 0x10	; 16
     84a:	23 8b       	std	Z+19, r18	; 0x13
     84c:	27 e7       	ldi	r18, 0x77	; 119
     84e:	31 e0       	ldi	r19, 0x01	; 1
     850:	24 8b       	std	Z+20, r18	; 0x14
     852:	35 8b       	std	Z+21, r19	; 0x15
     854:	90 8f       	std	Z+24, r25	; 0x18
     856:	c1 8f       	std	Z+25, r28	; 0x19
     858:	12 8e       	std	Z+26, r1	; 0x1a
     85a:	6e e6       	ldi	r22, 0x6E	; 110
     85c:	76 e2       	ldi	r23, 0x26	; 38
     85e:	64 8f       	std	Z+28, r22	; 0x1c
     860:	75 8f       	std	Z+29, r23	; 0x1d
     862:	16 8e       	std	Z+30, r1	; 0x1e
     864:	90 89       	ldd	r25, Z+16	; 0x10
     866:	90 68       	ori	r25, 0x80	; 128
     868:	90 8b       	std	Z+16, r25	; 0x10
     86a:	50 a3       	std	Z+32, r21	; 0x20
     86c:	81 a3       	std	Z+33, r24	; 0x21
     86e:	42 a3       	std	Z+34, r20	; 0x22
     870:	82 e1       	ldi	r24, 0x12	; 18
     872:	83 a3       	std	Z+35, r24	; 0x23
     874:	24 a3       	std	Z+36, r18	; 0x24
     876:	35 a3       	std	Z+37, r19	; 0x25
     878:	84 e3       	ldi	r24, 0x34	; 52
     87a:	80 a7       	std	Z+40, r24	; 0x28
     87c:	c1 a7       	std	Z+41, r28	; 0x29
     87e:	12 a6       	std	Z+42, r1	; 0x2a
     880:	85 ee       	ldi	r24, 0xE5	; 229
     882:	97 e2       	ldi	r25, 0x27	; 39
     884:	84 a7       	std	Z+44, r24	; 0x2c
     886:	95 a7       	std	Z+45, r25	; 0x2d
     888:	16 a6       	std	Z+46, r1	; 0x2e
     88a:	80 a1       	ldd	r24, Z+32	; 0x20
     88c:	80 68       	ori	r24, 0x80	; 128
     88e:	80 a3       	std	Z+32, r24	; 0x20
     890:	78 94       	sei
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <tiny_dma_set_mode_3>:
     896:	cf 93       	push	r28
     898:	c3 e0       	ldi	r28, 0x03	; 3
     89a:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     89e:	89 de       	rcall	.-750    	; 0x5b2 <tiny_dma_flush>
     8a0:	e0 e0       	ldi	r30, 0x00	; 0
     8a2:	f1 e0       	ldi	r31, 0x01	; 1
     8a4:	10 a2       	std	Z+32, r1	; 0x20
     8a6:	50 e4       	ldi	r21, 0x40	; 64
     8a8:	50 a3       	std	Z+32, r21	; 0x20
     8aa:	44 e0       	ldi	r20, 0x04	; 4
     8ac:	40 a3       	std	Z+32, r20	; 0x20
     8ae:	11 a2       	std	Z+33, r1	; 0x21
     8b0:	12 a2       	std	Z+34, r1	; 0x22
     8b2:	3b e4       	ldi	r19, 0x4B	; 75
     8b4:	33 a3       	std	Z+35, r19	; 0x23
     8b6:	14 a2       	std	Z+36, r1	; 0x24
     8b8:	15 a2       	std	Z+37, r1	; 0x25
     8ba:	16 a2       	std	Z+38, r1	; 0x26
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e2       	ldi	r25, 0x20	; 32
     8c0:	80 a7       	std	Z+40, r24	; 0x28
     8c2:	91 a7       	std	Z+41, r25	; 0x29
     8c4:	12 a6       	std	Z+42, r1	; 0x2a
     8c6:	20 ea       	ldi	r18, 0xA0	; 160
     8c8:	24 a7       	std	Z+44, r18	; 0x2c
     8ca:	98 e0       	ldi	r25, 0x08	; 8
     8cc:	95 a7       	std	Z+45, r25	; 0x2d
     8ce:	16 a6       	std	Z+46, r1	; 0x2e
     8d0:	80 a1       	ldd	r24, Z+32	; 0x20
     8d2:	80 6a       	ori	r24, 0xA0	; 160
     8d4:	80 a3       	std	Z+32, r24	; 0x20
     8d6:	85 e5       	ldi	r24, 0x55	; 85
     8d8:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     8dc:	16 aa       	std	Z+54, r1	; 0x36
     8de:	74 e2       	ldi	r23, 0x24	; 36
     8e0:	70 ab       	std	Z+48, r23	; 0x30
     8e2:	11 aa       	std	Z+49, r1	; 0x31
     8e4:	69 e5       	ldi	r22, 0x59	; 89
     8e6:	62 ab       	std	Z+50, r22	; 0x32
     8e8:	c3 ab       	std	Z+51, r28	; 0x33
     8ea:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <dacBuf_len>
     8ee:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <dacBuf_len+0x1>
     8f2:	a4 ab       	std	Z+52, r26	; 0x34
     8f4:	b5 ab       	std	Z+53, r27	; 0x35
     8f6:	ae e5       	ldi	r26, 0x5E	; 94
     8f8:	b2 e2       	ldi	r27, 0x22	; 34
     8fa:	a0 af       	std	Z+56, r26	; 0x38
     8fc:	b1 af       	std	Z+57, r27	; 0x39
     8fe:	12 ae       	std	Z+58, r1	; 0x3a
     900:	89 e3       	ldi	r24, 0x39	; 57
     902:	84 af       	std	Z+60, r24	; 0x3c
     904:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     908:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     90c:	80 a9       	ldd	r24, Z+48	; 0x30
     90e:	80 68       	ori	r24, 0x80	; 128
     910:	80 ab       	std	Z+48, r24	; 0x30
     912:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     916:	a0 e4       	ldi	r26, 0x40	; 64
     918:	b1 e0       	ldi	r27, 0x01	; 1
     91a:	7c 93       	st	X, r23
     91c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     920:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     92a:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     92e:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     932:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     936:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     93a:	6e e6       	ldi	r22, 0x6E	; 110
     93c:	74 e2       	ldi	r23, 0x24	; 36
     93e:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     942:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     946:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     94a:	8b e3       	ldi	r24, 0x3B	; 59
     94c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     950:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     954:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     958:	8c 91       	ld	r24, X
     95a:	80 68       	ori	r24, 0x80	; 128
     95c:	8c 93       	st	X, r24
     95e:	10 8a       	std	Z+16, r1	; 0x10
     960:	50 8b       	std	Z+16, r21	; 0x10
     962:	40 8b       	std	Z+16, r20	; 0x10
     964:	c1 8b       	std	Z+17, r28	; 0x11
     966:	81 e9       	ldi	r24, 0x91	; 145
     968:	82 8b       	std	Z+18, r24	; 0x12
     96a:	33 8b       	std	Z+19, r19	; 0x13
     96c:	47 e7       	ldi	r20, 0x77	; 119
     96e:	51 e0       	ldi	r21, 0x01	; 1
     970:	44 8b       	std	Z+20, r20	; 0x14
     972:	55 8b       	std	Z+21, r21	; 0x15
     974:	20 8f       	std	Z+24, r18	; 0x18
     976:	91 8f       	std	Z+25, r25	; 0x19
     978:	12 8e       	std	Z+26, r1	; 0x1a
     97a:	8e e6       	ldi	r24, 0x6E	; 110
     97c:	96 e2       	ldi	r25, 0x26	; 38
     97e:	84 8f       	std	Z+28, r24	; 0x1c
     980:	95 8f       	std	Z+29, r25	; 0x1d
     982:	16 8e       	std	Z+30, r1	; 0x1e
     984:	80 89       	ldd	r24, Z+16	; 0x10
     986:	80 68       	ori	r24, 0x80	; 128
     988:	80 8b       	std	Z+16, r24	; 0x10
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <tiny_dma_set_mode_4>:
     98e:	cf 93       	push	r28
     990:	c4 e0       	ldi	r28, 0x04	; 4
     992:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     996:	0d de       	rcall	.-998    	; 0x5b2 <tiny_dma_flush>
     998:	e0 e0       	ldi	r30, 0x00	; 0
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	10 a2       	std	Z+32, r1	; 0x20
     99e:	80 e4       	ldi	r24, 0x40	; 64
     9a0:	80 a3       	std	Z+32, r24	; 0x20
     9a2:	c0 a3       	std	Z+32, r28	; 0x20
     9a4:	11 a2       	std	Z+33, r1	; 0x21
     9a6:	12 a2       	std	Z+34, r1	; 0x22
     9a8:	4b e4       	ldi	r20, 0x4B	; 75
     9aa:	43 a3       	std	Z+35, r20	; 0x23
     9ac:	14 a2       	std	Z+36, r1	; 0x24
     9ae:	15 a2       	std	Z+37, r1	; 0x25
     9b0:	16 a2       	std	Z+38, r1	; 0x26
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e2       	ldi	r25, 0x20	; 32
     9b6:	80 a7       	std	Z+40, r24	; 0x28
     9b8:	91 a7       	std	Z+41, r25	; 0x29
     9ba:	12 a6       	std	Z+42, r1	; 0x2a
     9bc:	60 ea       	ldi	r22, 0xA0	; 160
     9be:	64 a7       	std	Z+44, r22	; 0x2c
     9c0:	88 e0       	ldi	r24, 0x08	; 8
     9c2:	85 a7       	std	Z+45, r24	; 0x2d
     9c4:	16 a6       	std	Z+46, r1	; 0x2e
     9c6:	90 a1       	ldd	r25, Z+32	; 0x20
     9c8:	90 6a       	ori	r25, 0xA0	; 160
     9ca:	90 a3       	std	Z+32, r25	; 0x20
     9cc:	95 e5       	ldi	r25, 0x55	; 85
     9ce:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     9d2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     9d6:	a0 e4       	ldi	r26, 0x40	; 64
     9d8:	b1 e0       	ldi	r27, 0x01	; 1
     9da:	94 e2       	ldi	r25, 0x24	; 36
     9dc:	9c 93       	st	X, r25
     9de:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     9e2:	99 e5       	ldi	r25, 0x59	; 89
     9e4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     9ee:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     9f2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     9f6:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     9fa:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     9fe:	2e e6       	ldi	r18, 0x6E	; 110
     a00:	34 e2       	ldi	r19, 0x24	; 36
     a02:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a06:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a0a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     a0e:	9b e3       	ldi	r25, 0x3B	; 59
     a10:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a14:	93 e0       	ldi	r25, 0x03	; 3
     a16:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a1a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     a1e:	2c 91       	ld	r18, X
     a20:	20 68       	ori	r18, 0x80	; 128
     a22:	2c 93       	st	X, r18
     a24:	c0 8b       	std	Z+16, r28	; 0x10
     a26:	91 8b       	std	Z+17, r25	; 0x11
     a28:	31 e9       	ldi	r19, 0x91	; 145
     a2a:	32 8b       	std	Z+18, r19	; 0x12
     a2c:	43 8b       	std	Z+19, r20	; 0x13
     a2e:	47 e7       	ldi	r20, 0x77	; 119
     a30:	51 e0       	ldi	r21, 0x01	; 1
     a32:	44 8b       	std	Z+20, r20	; 0x14
     a34:	55 8b       	std	Z+21, r21	; 0x15
     a36:	60 8f       	std	Z+24, r22	; 0x18
     a38:	81 8f       	std	Z+25, r24	; 0x19
     a3a:	12 8e       	std	Z+26, r1	; 0x1a
     a3c:	6e e6       	ldi	r22, 0x6E	; 110
     a3e:	76 e2       	ldi	r23, 0x26	; 38
     a40:	64 8f       	std	Z+28, r22	; 0x1c
     a42:	75 8f       	std	Z+29, r23	; 0x1d
     a44:	16 8e       	std	Z+30, r1	; 0x1e
     a46:	20 89       	ldd	r18, Z+16	; 0x10
     a48:	20 68       	ori	r18, 0x80	; 128
     a4a:	20 8b       	std	Z+16, r18	; 0x10
     a4c:	c0 ab       	std	Z+48, r28	; 0x30
     a4e:	91 ab       	std	Z+49, r25	; 0x31
     a50:	32 ab       	std	Z+50, r19	; 0x32
     a52:	9a e4       	ldi	r25, 0x4A	; 74
     a54:	93 ab       	std	Z+51, r25	; 0x33
     a56:	44 ab       	std	Z+52, r20	; 0x34
     a58:	55 ab       	std	Z+53, r21	; 0x35
     a5a:	93 ec       	ldi	r25, 0xC3	; 195
     a5c:	90 af       	std	Z+56, r25	; 0x38
     a5e:	81 af       	std	Z+57, r24	; 0x39
     a60:	12 ae       	std	Z+58, r1	; 0x3a
     a62:	85 ee       	ldi	r24, 0xE5	; 229
     a64:	97 e2       	ldi	r25, 0x27	; 39
     a66:	84 af       	std	Z+60, r24	; 0x3c
     a68:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     a6c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     a70:	80 a9       	ldd	r24, Z+48	; 0x30
     a72:	80 68       	ori	r24, 0x80	; 128
     a74:	80 ab       	std	Z+48, r24	; 0x30
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret

00000a7a <tiny_dma_set_mode_5>:
     a7a:	85 e0       	ldi	r24, 0x05	; 5
     a7c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     a80:	98 dd       	rcall	.-1232   	; 0x5b2 <tiny_dma_flush>
     a82:	e0 e0       	ldi	r30, 0x00	; 0
     a84:	f1 e0       	ldi	r31, 0x01	; 1
     a86:	16 aa       	std	Z+54, r1	; 0x36
     a88:	34 e2       	ldi	r19, 0x24	; 36
     a8a:	30 ab       	std	Z+48, r19	; 0x30
     a8c:	11 aa       	std	Z+49, r1	; 0x31
     a8e:	29 e5       	ldi	r18, 0x59	; 89
     a90:	22 ab       	std	Z+50, r18	; 0x32
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	83 ab       	std	Z+51, r24	; 0x33
     a96:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     a9a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     a9e:	44 ab       	std	Z+52, r20	; 0x34
     aa0:	55 ab       	std	Z+53, r21	; 0x35
     aa2:	4e e5       	ldi	r20, 0x5E	; 94
     aa4:	52 e2       	ldi	r21, 0x22	; 34
     aa6:	40 af       	std	Z+56, r20	; 0x38
     aa8:	51 af       	std	Z+57, r21	; 0x39
     aaa:	12 ae       	std	Z+58, r1	; 0x3a
     aac:	99 e3       	ldi	r25, 0x39	; 57
     aae:	94 af       	std	Z+60, r25	; 0x3c
     ab0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     ab4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ab8:	90 a9       	ldd	r25, Z+48	; 0x30
     aba:	90 68       	ori	r25, 0x80	; 128
     abc:	90 ab       	std	Z+48, r25	; 0x30
     abe:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ac2:	e0 e4       	ldi	r30, 0x40	; 64
     ac4:	f1 e0       	ldi	r31, 0x01	; 1
     ac6:	30 83       	st	Z, r19
     ac8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     acc:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ad0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ad4:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
     ad8:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
     adc:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ae0:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     ae4:	2e e6       	ldi	r18, 0x6E	; 110
     ae6:	34 e2       	ldi	r19, 0x24	; 36
     ae8:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     aec:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     af0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     af4:	9b e3       	ldi	r25, 0x3B	; 59
     af6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     afa:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     afe:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b02:	80 81       	ld	r24, Z
     b04:	80 68       	ori	r24, 0x80	; 128
     b06:	80 83       	st	Z, r24
     b08:	08 95       	ret

00000b0a <tiny_dma_set_mode_6>:
     b0a:	86 e0       	ldi	r24, 0x06	; 6
     b0c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     b10:	50 dd       	rcall	.-1376   	; 0x5b2 <tiny_dma_flush>
     b12:	e0 e0       	ldi	r30, 0x00	; 0
     b14:	f1 e0       	ldi	r31, 0x01	; 1
     b16:	16 aa       	std	Z+54, r1	; 0x36
     b18:	94 e2       	ldi	r25, 0x24	; 36
     b1a:	90 ab       	std	Z+48, r25	; 0x30
     b1c:	11 aa       	std	Z+49, r1	; 0x31
     b1e:	39 e5       	ldi	r19, 0x59	; 89
     b20:	32 ab       	std	Z+50, r19	; 0x32
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	83 ab       	std	Z+51, r24	; 0x33
     b26:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     b2a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b2e:	44 ab       	std	Z+52, r20	; 0x34
     b30:	55 ab       	std	Z+53, r21	; 0x35
     b32:	4e e5       	ldi	r20, 0x5E	; 94
     b34:	52 e2       	ldi	r21, 0x22	; 34
     b36:	40 af       	std	Z+56, r20	; 0x38
     b38:	51 af       	std	Z+57, r21	; 0x39
     b3a:	12 ae       	std	Z+58, r1	; 0x3a
     b3c:	29 e3       	ldi	r18, 0x39	; 57
     b3e:	24 af       	std	Z+60, r18	; 0x3c
     b40:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b44:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b48:	20 a9       	ldd	r18, Z+48	; 0x30
     b4a:	20 68       	ori	r18, 0x80	; 128
     b4c:	20 ab       	std	Z+48, r18	; 0x30
     b4e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b52:	a0 e4       	ldi	r26, 0x40	; 64
     b54:	b1 e0       	ldi	r27, 0x01	; 1
     b56:	9c 93       	st	X, r25
     b58:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b5c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b60:	32 e0       	ldi	r19, 0x02	; 2
     b62:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b66:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     b6a:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     b6e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b72:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     b76:	4e e6       	ldi	r20, 0x6E	; 110
     b78:	54 e2       	ldi	r21, 0x24	; 36
     b7a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b7e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b82:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b86:	2b e3       	ldi	r18, 0x3B	; 59
     b88:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b8c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b90:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b94:	2c 91       	ld	r18, X
     b96:	20 68       	ori	r18, 0x80	; 128
     b98:	2c 93       	st	X, r18
     b9a:	10 8a       	std	Z+16, r1	; 0x10
     b9c:	20 e4       	ldi	r18, 0x40	; 64
     b9e:	20 8b       	std	Z+16, r18	; 0x10
     ba0:	24 e0       	ldi	r18, 0x04	; 4
     ba2:	20 8b       	std	Z+16, r18	; 0x10
     ba4:	81 8b       	std	Z+17, r24	; 0x11
     ba6:	81 e9       	ldi	r24, 0x91	; 145
     ba8:	82 8b       	std	Z+18, r24	; 0x12
     baa:	80 e1       	ldi	r24, 0x10	; 16
     bac:	83 8b       	std	Z+19, r24	; 0x13
     bae:	4e ee       	ldi	r20, 0xEE	; 238
     bb0:	52 e0       	ldi	r21, 0x02	; 2
     bb2:	44 8b       	std	Z+20, r20	; 0x14
     bb4:	55 8b       	std	Z+21, r21	; 0x15
     bb6:	90 8f       	std	Z+24, r25	; 0x18
     bb8:	31 8f       	std	Z+25, r19	; 0x19
     bba:	12 8e       	std	Z+26, r1	; 0x1a
     bbc:	8e e6       	ldi	r24, 0x6E	; 110
     bbe:	96 e2       	ldi	r25, 0x26	; 38
     bc0:	84 8f       	std	Z+28, r24	; 0x1c
     bc2:	95 8f       	std	Z+29, r25	; 0x1d
     bc4:	16 8e       	std	Z+30, r1	; 0x1e
     bc6:	80 89       	ldd	r24, Z+16	; 0x10
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	80 8b       	std	Z+16, r24	; 0x10
     bcc:	08 95       	ret

00000bce <tiny_dma_set_mode_7>:
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     bd4:	ee dc       	rcall	.-1572   	; 0x5b2 <tiny_dma_flush>
     bd6:	e0 e0       	ldi	r30, 0x00	; 0
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	16 aa       	std	Z+54, r1	; 0x36
     bdc:	94 e2       	ldi	r25, 0x24	; 36
     bde:	90 ab       	std	Z+48, r25	; 0x30
     be0:	11 aa       	std	Z+49, r1	; 0x31
     be2:	39 e5       	ldi	r19, 0x59	; 89
     be4:	32 ab       	std	Z+50, r19	; 0x32
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	83 ab       	std	Z+51, r24	; 0x33
     bea:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     bee:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     bf2:	44 ab       	std	Z+52, r20	; 0x34
     bf4:	55 ab       	std	Z+53, r21	; 0x35
     bf6:	4e e5       	ldi	r20, 0x5E	; 94
     bf8:	52 e2       	ldi	r21, 0x22	; 34
     bfa:	40 af       	std	Z+56, r20	; 0x38
     bfc:	51 af       	std	Z+57, r21	; 0x39
     bfe:	12 ae       	std	Z+58, r1	; 0x3a
     c00:	29 e3       	ldi	r18, 0x39	; 57
     c02:	24 af       	std	Z+60, r18	; 0x3c
     c04:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c08:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c0c:	20 a9       	ldd	r18, Z+48	; 0x30
     c0e:	20 68       	ori	r18, 0x80	; 128
     c10:	20 ab       	std	Z+48, r18	; 0x30
     c12:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c16:	a0 e4       	ldi	r26, 0x40	; 64
     c18:	b1 e0       	ldi	r27, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c20:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c24:	32 e0       	ldi	r19, 0x02	; 2
     c26:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c2a:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     c2e:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     c32:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c36:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c3a:	4e e6       	ldi	r20, 0x6E	; 110
     c3c:	54 e2       	ldi	r21, 0x24	; 36
     c3e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c42:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c46:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c4a:	2b e3       	ldi	r18, 0x3B	; 59
     c4c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c50:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c54:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c58:	2c 91       	ld	r18, X
     c5a:	20 68       	ori	r18, 0x80	; 128
     c5c:	2c 93       	st	X, r18
     c5e:	10 8a       	std	Z+16, r1	; 0x10
     c60:	20 e4       	ldi	r18, 0x40	; 64
     c62:	20 8b       	std	Z+16, r18	; 0x10
     c64:	25 e0       	ldi	r18, 0x05	; 5
     c66:	20 8b       	std	Z+16, r18	; 0x10
     c68:	81 8b       	std	Z+17, r24	; 0x11
     c6a:	81 e9       	ldi	r24, 0x91	; 145
     c6c:	82 8b       	std	Z+18, r24	; 0x12
     c6e:	80 e1       	ldi	r24, 0x10	; 16
     c70:	83 8b       	std	Z+19, r24	; 0x13
     c72:	4e ee       	ldi	r20, 0xEE	; 238
     c74:	52 e0       	ldi	r21, 0x02	; 2
     c76:	44 8b       	std	Z+20, r20	; 0x14
     c78:	55 8b       	std	Z+21, r21	; 0x15
     c7a:	90 8f       	std	Z+24, r25	; 0x18
     c7c:	31 8f       	std	Z+25, r19	; 0x19
     c7e:	12 8e       	std	Z+26, r1	; 0x1a
     c80:	8e e6       	ldi	r24, 0x6E	; 110
     c82:	96 e2       	ldi	r25, 0x26	; 38
     c84:	84 8f       	std	Z+28, r24	; 0x1c
     c86:	95 8f       	std	Z+29, r25	; 0x1d
     c88:	16 8e       	std	Z+30, r1	; 0x1e
     c8a:	80 89       	ldd	r24, Z+16	; 0x10
     c8c:	80 68       	ori	r24, 0x80	; 128
     c8e:	80 8b       	std	Z+16, r24	; 0x10
     c90:	08 95       	ret

00000c92 <__vector_6>:
}

ISR(DMA_CH0_vect){
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	11 24       	eor	r1, r1
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	8f 93       	push	r24
     ca4:	9f 93       	push	r25
     ca6:	af 93       	push	r26
     ca8:	bf 93       	push	r27
     caa:	ef 93       	push	r30
     cac:	ff 93       	push	r31
		DMA.INTFLAGS = 0x01;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     cb4:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
     cb8:	8e 2f       	mov	r24, r30
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	91 05       	cpc	r25, r1
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <__vector_6+0x32>
     cc2:	11 c1       	rjmp	.+546    	; 0xee6 <__vector_6+0x254>
     cc4:	fc 01       	movw	r30, r24
     cc6:	e2 50       	subi	r30, 0x02	; 2
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__tablejump2__>
			case 0:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     cce:	e0 e0       	ldi	r30, 0x00	; 0
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	87 e7       	ldi	r24, 0x77	; 119
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	84 8b       	std	Z+20, r24	; 0x14
     cd8:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     cda:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     cde:	2e ee       	ldi	r18, 0xEE	; 238
     ce0:	32 e0       	ldi	r19, 0x02	; 2
     ce2:	42 9f       	mul	r20, r18
     ce4:	c0 01       	movw	r24, r0
     ce6:	43 9f       	mul	r20, r19
     ce8:	90 0d       	add	r25, r0
     cea:	11 24       	eor	r1, r1
     cec:	82 59       	subi	r24, 0x92	; 146
     cee:	99 4d       	sbci	r25, 0xD9	; 217
     cf0:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     cf2:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     cf6:	42 9f       	mul	r20, r18
     cf8:	c0 01       	movw	r24, r0
     cfa:	43 9f       	mul	r20, r19
     cfc:	90 0d       	add	r25, r0
     cfe:	11 24       	eor	r1, r1
     d00:	82 59       	subi	r24, 0x92	; 146
     d02:	99 4d       	sbci	r25, 0xD9	; 217
     d04:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d06:	80 89       	ldd	r24, Z+16	; 0x10
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     d0c:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b1_state>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	91 11       	cpse	r25, r1
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b1_state>
			break;
     d1a:	e5 c0       	rjmp	.+458    	; 0xee6 <__vector_6+0x254>
			case 1:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     d1c:	e0 e0       	ldi	r30, 0x00	; 0
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	87 e7       	ldi	r24, 0x77	; 119
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	84 8b       	std	Z+20, r24	; 0x14
     d26:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d28:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     d2c:	2e ee       	ldi	r18, 0xEE	; 238
     d2e:	32 e0       	ldi	r19, 0x02	; 2
     d30:	42 9f       	mul	r20, r18
     d32:	c0 01       	movw	r24, r0
     d34:	43 9f       	mul	r20, r19
     d36:	90 0d       	add	r25, r0
     d38:	11 24       	eor	r1, r1
     d3a:	82 59       	subi	r24, 0x92	; 146
     d3c:	99 4d       	sbci	r25, 0xD9	; 217
     d3e:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d40:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     d44:	42 9f       	mul	r20, r18
     d46:	c0 01       	movw	r24, r0
     d48:	43 9f       	mul	r20, r19
     d4a:	90 0d       	add	r25, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	82 59       	subi	r24, 0x92	; 146
     d50:	99 4d       	sbci	r25, 0xD9	; 217
     d52:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d54:	80 89       	ldd	r24, Z+16	; 0x10
     d56:	80 68       	ori	r24, 0x80	; 128
     d58:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     d5a:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b1_state>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	91 11       	cpse	r25, r1
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b1_state>
			break;
     d68:	be c0       	rjmp	.+380    	; 0xee6 <__vector_6+0x254>
			case 2:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     d6a:	e0 e0       	ldi	r30, 0x00	; 0
     d6c:	f1 e0       	ldi	r31, 0x01	; 1
     d6e:	87 e7       	ldi	r24, 0x77	; 119
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	84 8b       	std	Z+20, r24	; 0x14
     d74:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d76:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     d7a:	2e ee       	ldi	r18, 0xEE	; 238
     d7c:	32 e0       	ldi	r19, 0x02	; 2
     d7e:	42 9f       	mul	r20, r18
     d80:	c0 01       	movw	r24, r0
     d82:	43 9f       	mul	r20, r19
     d84:	90 0d       	add	r25, r0
     d86:	11 24       	eor	r1, r1
     d88:	82 59       	subi	r24, 0x92	; 146
     d8a:	99 4d       	sbci	r25, 0xD9	; 217
     d8c:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d8e:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     d92:	42 9f       	mul	r20, r18
     d94:	c0 01       	movw	r24, r0
     d96:	43 9f       	mul	r20, r19
     d98:	90 0d       	add	r25, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	82 59       	subi	r24, 0x92	; 146
     d9e:	99 4d       	sbci	r25, 0xD9	; 217
     da0:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     da2:	80 89       	ldd	r24, Z+16	; 0x10
     da4:	80 68       	ori	r24, 0x80	; 128
     da6:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     da8:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b1_state>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	91 11       	cpse	r25, r1
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b1_state>
			break;
     db6:	97 c0       	rjmp	.+302    	; 0xee6 <__vector_6+0x254>
			case 3:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     db8:	e0 e0       	ldi	r30, 0x00	; 0
     dba:	f1 e0       	ldi	r31, 0x01	; 1
     dbc:	87 e7       	ldi	r24, 0x77	; 119
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	84 8b       	std	Z+20, r24	; 0x14
     dc2:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     dc4:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     dc8:	2e ee       	ldi	r18, 0xEE	; 238
     dca:	32 e0       	ldi	r19, 0x02	; 2
     dcc:	42 9f       	mul	r20, r18
     dce:	c0 01       	movw	r24, r0
     dd0:	43 9f       	mul	r20, r19
     dd2:	90 0d       	add	r25, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	82 59       	subi	r24, 0x92	; 146
     dd8:	99 4d       	sbci	r25, 0xD9	; 217
     dda:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     ddc:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     de0:	42 9f       	mul	r20, r18
     de2:	c0 01       	movw	r24, r0
     de4:	43 9f       	mul	r20, r19
     de6:	90 0d       	add	r25, r0
     de8:	11 24       	eor	r1, r1
     dea:	82 59       	subi	r24, 0x92	; 146
     dec:	99 4d       	sbci	r25, 0xD9	; 217
     dee:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     df0:	80 89       	ldd	r24, Z+16	; 0x10
     df2:	80 68       	ori	r24, 0x80	; 128
     df4:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     df6:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b1_state>
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	91 11       	cpse	r25, r1
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b1_state>
			break;
     e04:	70 c0       	rjmp	.+224    	; 0xee6 <__vector_6+0x254>
			case 4:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     e06:	e0 e0       	ldi	r30, 0x00	; 0
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	87 e7       	ldi	r24, 0x77	; 119
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	84 8b       	std	Z+20, r24	; 0x14
     e10:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e12:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     e16:	2e ee       	ldi	r18, 0xEE	; 238
     e18:	32 e0       	ldi	r19, 0x02	; 2
     e1a:	42 9f       	mul	r20, r18
     e1c:	c0 01       	movw	r24, r0
     e1e:	43 9f       	mul	r20, r19
     e20:	90 0d       	add	r25, r0
     e22:	11 24       	eor	r1, r1
     e24:	82 59       	subi	r24, 0x92	; 146
     e26:	99 4d       	sbci	r25, 0xD9	; 217
     e28:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     e2a:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     e2e:	42 9f       	mul	r20, r18
     e30:	c0 01       	movw	r24, r0
     e32:	43 9f       	mul	r20, r19
     e34:	90 0d       	add	r25, r0
     e36:	11 24       	eor	r1, r1
     e38:	82 59       	subi	r24, 0x92	; 146
     e3a:	99 4d       	sbci	r25, 0xD9	; 217
     e3c:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e3e:	80 89       	ldd	r24, Z+16	; 0x10
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e44:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b1_state>
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	91 11       	cpse	r25, r1
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b1_state>
			break;
     e52:	49 c0       	rjmp	.+146    	; 0xee6 <__vector_6+0x254>
			case 6:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     e54:	e0 e0       	ldi	r30, 0x00	; 0
     e56:	f1 e0       	ldi	r31, 0x01	; 1
     e58:	2e ee       	ldi	r18, 0xEE	; 238
     e5a:	32 e0       	ldi	r19, 0x02	; 2
     e5c:	24 8b       	std	Z+20, r18	; 0x14
     e5e:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e60:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     e64:	42 9f       	mul	r20, r18
     e66:	c0 01       	movw	r24, r0
     e68:	43 9f       	mul	r20, r19
     e6a:	90 0d       	add	r25, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	82 59       	subi	r24, 0x92	; 146
     e70:	99 4d       	sbci	r25, 0xD9	; 217
     e72:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     e74:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     e78:	42 9f       	mul	r20, r18
     e7a:	c0 01       	movw	r24, r0
     e7c:	43 9f       	mul	r20, r19
     e7e:	90 0d       	add	r25, r0
     e80:	11 24       	eor	r1, r1
     e82:	82 59       	subi	r24, 0x92	; 146
     e84:	99 4d       	sbci	r25, 0xD9	; 217
     e86:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e88:	80 89       	ldd	r24, Z+16	; 0x10
     e8a:	80 68       	ori	r24, 0x80	; 128
     e8c:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e8e:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b1_state>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	91 11       	cpse	r25, r1
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b1_state>
			break;
     e9c:	24 c0       	rjmp	.+72     	; 0xee6 <__vector_6+0x254>
			case 7:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f1 e0       	ldi	r31, 0x01	; 1
     ea2:	2e ee       	ldi	r18, 0xEE	; 238
     ea4:	32 e0       	ldi	r19, 0x02	; 2
     ea6:	24 8b       	std	Z+20, r18	; 0x14
     ea8:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     eaa:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     eae:	42 9f       	mul	r20, r18
     eb0:	c0 01       	movw	r24, r0
     eb2:	43 9f       	mul	r20, r19
     eb4:	90 0d       	add	r25, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	82 59       	subi	r24, 0x92	; 146
     eba:	99 4d       	sbci	r25, 0xD9	; 217
     ebc:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     ebe:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b1_state>
     ec2:	42 9f       	mul	r20, r18
     ec4:	c0 01       	movw	r24, r0
     ec6:	43 9f       	mul	r20, r19
     ec8:	90 0d       	add	r25, r0
     eca:	11 24       	eor	r1, r1
     ecc:	82 59       	subi	r24, 0x92	; 146
     ece:	99 4d       	sbci	r25, 0xD9	; 217
     ed0:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ed2:	80 89       	ldd	r24, Z+16	; 0x10
     ed4:	80 68       	ori	r24, 0x80	; 128
     ed6:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     ed8:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b1_state>
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	91 11       	cpse	r25, r1
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b1_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	bf 91       	pop	r27
     eec:	af 91       	pop	r26
     eee:	9f 91       	pop	r25
     ef0:	8f 91       	pop	r24
     ef2:	4f 91       	pop	r20
     ef4:	3f 91       	pop	r19
     ef6:	2f 91       	pop	r18
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_7>:

ISR(DMA_CH1_vect){
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	ef 93       	push	r30
     f18:	ff 93       	push	r31
		DMA.INTFLAGS = 0x02;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     f20:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	19 f0       	breq	.+6      	; 0xf2e <__vector_7+0x2c>
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	41 f1       	breq	.+80     	; 0xf7c <__vector_7+0x7a>
     f2c:	4d c0       	rjmp	.+154    	; 0xfc8 <__vector_7+0xc6>
			case 0:
			////////////////////////////////////////
			break;
			case 1:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     f2e:	e0 e0       	ldi	r30, 0x00	; 0
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	87 e7       	ldi	r24, 0x77	; 119
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	84 a3       	std	Z+36, r24	; 0x24
     f38:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     f3a:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b2_state>
     f3e:	2e ee       	ldi	r18, 0xEE	; 238
     f40:	32 e0       	ldi	r19, 0x02	; 2
     f42:	42 9f       	mul	r20, r18
     f44:	c0 01       	movw	r24, r0
     f46:	43 9f       	mul	r20, r19
     f48:	90 0d       	add	r25, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	8b 51       	subi	r24, 0x1B	; 27
     f4e:	98 4d       	sbci	r25, 0xD8	; 216
     f50:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     f52:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b2_state>
     f56:	42 9f       	mul	r20, r18
     f58:	c0 01       	movw	r24, r0
     f5a:	43 9f       	mul	r20, r19
     f5c:	90 0d       	add	r25, r0
     f5e:	11 24       	eor	r1, r1
     f60:	8b 51       	subi	r24, 0x1B	; 27
     f62:	98 4d       	sbci	r25, 0xD8	; 216
     f64:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     f66:	80 a1       	ldd	r24, Z+32	; 0x20
     f68:	80 68       	ori	r24, 0x80	; 128
     f6a:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
     f6c:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <b2_state>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	91 11       	cpse	r25, r1
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <b2_state>
			break;
     f7a:	26 c0       	rjmp	.+76     	; 0xfc8 <__vector_7+0xc6>
			case 2:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     f7c:	e0 e0       	ldi	r30, 0x00	; 0
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	87 e7       	ldi	r24, 0x77	; 119
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	84 a3       	std	Z+36, r24	; 0x24
     f86:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     f88:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b2_state>
     f8c:	2e ee       	ldi	r18, 0xEE	; 238
     f8e:	32 e0       	ldi	r19, 0x02	; 2
     f90:	42 9f       	mul	r20, r18
     f92:	c0 01       	movw	r24, r0
     f94:	43 9f       	mul	r20, r19
     f96:	90 0d       	add	r25, r0
     f98:	11 24       	eor	r1, r1
     f9a:	8b 51       	subi	r24, 0x1B	; 27
     f9c:	98 4d       	sbci	r25, 0xD8	; 216
     f9e:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     fa0:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b2_state>
     fa4:	42 9f       	mul	r20, r18
     fa6:	c0 01       	movw	r24, r0
     fa8:	43 9f       	mul	r20, r19
     faa:	90 0d       	add	r25, r0
     fac:	11 24       	eor	r1, r1
     fae:	8b 51       	subi	r24, 0x1B	; 27
     fb0:	98 4d       	sbci	r25, 0xD8	; 216
     fb2:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     fb4:	80 a1       	ldd	r24, Z+32	; 0x20
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
     fba:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <b2_state>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	91 11       	cpse	r25, r1
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <b2_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
     fc8:	ff 91       	pop	r31
     fca:	ef 91       	pop	r30
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	4f 91       	pop	r20
     fd2:	3f 91       	pop	r19
     fd4:	2f 91       	pop	r18
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti

00000fe0 <__vector_8>:
ISR(DMA_CH2_vect){
     fe0:	1f 92       	push	r1
     fe2:	0f 92       	push	r0
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	2f 93       	push	r18
     fec:	3f 93       	push	r19
     fee:	4f 93       	push	r20
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
	DMA.INTFLAGS = 0x04;
     ff8:	e0 e0       	ldi	r30, 0x00	; 0
     ffa:	f1 e0       	ldi	r31, 0x01	; 1
     ffc:	84 e0       	ldi	r24, 0x04	; 4
     ffe:	83 83       	std	Z+3, r24	; 0x03
	DMA.CH2.TRFCNT = HALFPACKET_SIZE;		
    1000:	87 e7       	ldi	r24, 0x77	; 119
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	84 ab       	std	Z+52, r24	; 0x34
    1006:	95 ab       	std	Z+53, r25	; 0x35
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    1008:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b2_state>
    100c:	2e ee       	ldi	r18, 0xEE	; 238
    100e:	32 e0       	ldi	r19, 0x02	; 2
    1010:	42 9f       	mul	r20, r18
    1012:	c0 01       	movw	r24, r0
    1014:	43 9f       	mul	r20, r19
    1016:	90 0d       	add	r25, r0
    1018:	11 24       	eor	r1, r1
    101a:	8b 51       	subi	r24, 0x1B	; 27
    101c:	98 4d       	sbci	r25, 0xD8	; 216
    101e:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;	
    1020:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b2_state>
    1024:	42 9f       	mul	r20, r18
    1026:	c0 01       	movw	r24, r0
    1028:	43 9f       	mul	r20, r19
    102a:	90 0d       	add	r25, r0
    102c:	11 24       	eor	r1, r1
    102e:	8b 51       	subi	r24, 0x1B	; 27
    1030:	98 4d       	sbci	r25, 0xD8	; 216
    1032:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    1036:	80 a9       	ldd	r24, Z+48	; 0x30
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	80 ab       	std	Z+48, r24	; 0x30
	b2_state = !b2_state;
    103c:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <b2_state>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	91 11       	cpse	r25, r1
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <b2_state>
}
    104a:	ff 91       	pop	r31
    104c:	ef 91       	pop	r30
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <__vector_9>:

ISR(DMA_CH3_vect){
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	2f 93       	push	r18
    106e:	3f 93       	push	r19
    1070:	4f 93       	push	r20
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	ef 93       	push	r30
    1078:	ff 93       	push	r31
	DMA.INTFLAGS = 0x08;
    107a:	88 e0       	ldi	r24, 0x08	; 8
    107c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	DMA.CH3.TRFCNT = HALFPACKET_SIZE;
    1080:	87 e7       	ldi	r24, 0x77	; 119
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1088:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    108c:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b2_state>
    1090:	2e ee       	ldi	r18, 0xEE	; 238
    1092:	32 e0       	ldi	r19, 0x02	; 2
    1094:	42 9f       	mul	r20, r18
    1096:	c0 01       	movw	r24, r0
    1098:	43 9f       	mul	r20, r19
    109a:	90 0d       	add	r25, r0
    109c:	11 24       	eor	r1, r1
    109e:	8b 51       	subi	r24, 0x1B	; 27
    10a0:	98 4d       	sbci	r25, 0xD8	; 216
    10a2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
    10a6:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b2_state>
    10aa:	42 9f       	mul	r20, r18
    10ac:	c0 01       	movw	r24, r0
    10ae:	43 9f       	mul	r20, r19
    10b0:	90 0d       	add	r25, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	8b 51       	subi	r24, 0x1B	; 27
    10b6:	98 4d       	sbci	r25, 0xD8	; 216
    10b8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    10bc:	e0 e4       	ldi	r30, 0x40	; 64
    10be:	f1 e0       	ldi	r31, 0x01	; 1
    10c0:	80 81       	ld	r24, Z
    10c2:	80 68       	ori	r24, 0x80	; 128
    10c4:	80 83       	st	Z, r24
	b2_state = !b2_state;
    10c6:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <b2_state>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	91 11       	cpse	r25, r1
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <b2_state>
}
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	9f 91       	pop	r25
    10da:	8f 91       	pop	r24
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    10ec:	e0 e7       	ldi	r30, 0x70	; 112
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	83 81       	ldd	r24, Z+3	; 0x03
    10f2:	8c 7f       	andi	r24, 0xFC	; 252
    10f4:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    10f6:	84 81       	ldd	r24, Z+4	; 0x04
    10f8:	8c 7f       	andi	r24, 0xFC	; 252
    10fa:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    10fc:	80 81       	ld	r24, Z
    10fe:	8d 7f       	andi	r24, 0xFD	; 253
    1100:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    1102:	e0 e8       	ldi	r30, 0x80	; 128
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	80 ec       	ldi	r24, 0xC0	; 192
    1108:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    110a:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    110c:	88 ec       	ldi	r24, 0xC8	; 200
    110e:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1110:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b8 e0       	ldi	r27, 0x08	; 8
    1116:	34 e0       	ldi	r19, 0x04	; 4
    1118:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    111a:	23 e0       	ldi	r18, 0x03	; 3
    111c:	11 96       	adiw	r26, 0x01	; 1
    111e:	2c 93       	st	X, r18
    1120:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1122:	14 96       	adiw	r26, 0x04	; 4
    1124:	1c 92       	st	X, r1
    1126:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1128:	85 ed       	ldi	r24, 0xD5	; 213
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	96 96       	adiw	r26, 0x26	; 38
    112e:	8d 93       	st	X+, r24
    1130:	9c 93       	st	X, r25
    1132:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    1134:	16 96       	adiw	r26, 0x06	; 6
    1136:	1c 92       	st	X, r1
    1138:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    113a:	e0 e4       	ldi	r30, 0x40	; 64
    113c:	f8 e0       	ldi	r31, 0x08	; 8
    113e:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1140:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1142:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    1144:	86 a3       	std	Z+38, r24	; 0x26
    1146:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    1148:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    114a:	e0 e6       	ldi	r30, 0x60	; 96
    114c:	f6 e0       	ldi	r31, 0x06	; 6
    114e:	80 81       	ld	r24, Z
    1150:	80 61       	ori	r24, 0x10	; 16
    1152:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    1154:	e0 e4       	ldi	r30, 0x40	; 64
    1156:	f9 e0       	ldi	r31, 0x09	; 9
    1158:	83 e1       	ldi	r24, 0x13	; 19
    115a:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    115c:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    1162:	a6 a3       	std	Z+38, r26	; 0x26
    1164:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    1166:	10 a6       	std	Z+40, r1	; 0x28
    1168:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 83       	st	Z, r24
    116e:	08 95       	ret

00001170 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    1170:	1f 92       	push	r1
    1172:	0f 92       	push	r0
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	2f 93       	push	r18
    117c:	3f 93       	push	r19
    117e:	4f 93       	push	r20
    1180:	5f 93       	push	r21
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	ef 93       	push	r30
    1188:	ff 93       	push	r31
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	1f 92       	push	r1
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    119a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    119e:	87 30       	cpi	r24, 0x07	; 7
    11a0:	31 f4       	brne	.+12     	; 0x11ae <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    11a2:	e0 e0       	ldi	r30, 0x00	; 0
    11a4:	f2 e0       	ldi	r31, 0x02	; 2
    11a6:	84 a5       	ldd	r24, Z+44	; 0x2c
    11a8:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    11aa:	95 a5       	ldd	r25, Z+45	; 0x2d
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    11ae:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    11b2:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <PSU_target>
    11b6:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    11b8:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    11bc:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	0c f4       	brge	.+2      	; 0x11c8 <__vector_83+0x58>
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	99 23       	and	r25, r25
    11ca:	c9 f0       	breq	.+50     	; 0x11fe <__vector_83+0x8e>
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	2a 3f       	cpi	r18, 0xFA	; 250
    11d0:	37 40       	sbci	r19, 0x07	; 7
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <__vector_83+0x66>
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	99 23       	and	r25, r25
    11d8:	91 f0       	breq	.+36     	; 0x11fe <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    11da:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    11de:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    11e2:	89 30       	cpi	r24, 0x09	; 9
    11e4:	1c f4       	brge	.+6      	; 0x11ec <__vector_83+0x7c>
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <__vector_83+0x80>
    11ec:	86 e0       	ldi	r24, 0x06	; 6
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    11f8:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    11fc:	23 c0       	rjmp	.+70     	; 0x1244 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    11fe:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1202:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	8f 3f       	cpi	r24, 0xFF	; 255
    120a:	0c f0       	brlt	.+2      	; 0x120e <__vector_83+0x9e>
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	99 23       	and	r25, r25
    1210:	c9 f0       	breq	.+50     	; 0x1244 <__vector_83+0xd4>
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	27 30       	cpi	r18, 0x07	; 7
    1216:	31 05       	cpc	r19, r1
    1218:	08 f4       	brcc	.+2      	; 0x121c <__vector_83+0xac>
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	99 23       	and	r25, r25
    121e:	91 f0       	breq	.+36     	; 0x1244 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1220:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1224:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1228:	88 3f       	cpi	r24, 0xF8	; 248
    122a:	1c f0       	brlt	.+6      	; 0x1232 <__vector_83+0xc2>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <__vector_83+0xc6>
    1232:	86 e0       	ldi	r24, 0x06	; 6
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	48 1b       	sub	r20, r24
    123a:	59 0b       	sbc	r21, r25
    123c:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1240:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	9f 91       	pop	r25
    1250:	8f 91       	pop	r24
    1252:	5f 91       	pop	r21
    1254:	4f 91       	pop	r20
    1256:	3f 91       	pop	r19
    1258:	2f 91       	pop	r18
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    1264:	e0 e7       	ldi	r30, 0x70	; 112
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	83 81       	ldd	r24, Z+3	; 0x03
    126a:	8f 7e       	andi	r24, 0xEF	; 239
    126c:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    126e:	e0 e4       	ldi	r30, 0x40	; 64
    1270:	f6 e0       	ldi	r31, 0x06	; 6
    1272:	80 81       	ld	r24, Z
    1274:	8a 6a       	ori	r24, 0xAA	; 170
    1276:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    127c:	88 e5       	ldi	r24, 0x58	; 88
    127e:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1280:	e0 ea       	ldi	r30, 0xA0	; 160
    1282:	f8 e0       	ldi	r31, 0x08	; 8
    1284:	84 ec       	ldi	r24, 0xC4	; 196
    1286:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    128c:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    128e:	88 e1       	ldi	r24, 0x18	; 24
    1290:	84 83       	std	Z+4, r24	; 0x04
    1292:	08 95       	ret

00001294 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    1294:	e0 e7       	ldi	r30, 0x70	; 112
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	83 81       	ldd	r24, Z+3	; 0x03
    129a:	87 7f       	andi	r24, 0xF7	; 247
    129c:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    129e:	e0 ec       	ldi	r30, 0xC0	; 192
    12a0:	f8 e0       	ldi	r31, 0x08	; 8
    12a2:	80 e4       	ldi	r24, 0x40	; 64
    12a4:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    12a6:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    12a8:	88 e5       	ldi	r24, 0x58	; 88
    12aa:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    12ae:	08 95       	ret

000012b0 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
	asm("nop");
    12ba:	00 00       	nop
}
    12bc:	0f 90       	pop	r0
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	0f 90       	pop	r0
    12c2:	1f 90       	pop	r1
    12c4:	18 95       	reti

000012c6 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12c6:	9f b7       	in	r25, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	e8 2f       	mov	r30, r24
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	e0 59       	subi	r30, 0x90	; 144
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	60 95       	com	r22
    12d4:	80 81       	ld	r24, Z
    12d6:	68 23       	and	r22, r24
    12d8:	60 83       	st	Z, r22
    12da:	9f bf       	out	0x3f, r25	; 63
    12dc:	08 95       	ret

000012de <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    12de:	86 30       	cpi	r24, 0x06	; 6
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    12e6:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    12e8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    12ec:	81 fd       	sbrc	r24, 1
    12ee:	26 c0       	rjmp	.+76     	; 0x133c <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    12f0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    12f2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    12f4:	e0 e5       	ldi	r30, 0x50	; 80
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	82 60       	ori	r24, 0x02	; 2
    12fc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12fe:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1300:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1302:	81 ff       	sbrs	r24, 1
    1304:	fd cf       	rjmp	.-6      	; 0x1300 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1306:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1308:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    130a:	a0 e5       	ldi	r26, 0x50	; 80
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	16 96       	adiw	r26, 0x06	; 6
    1310:	8c 91       	ld	r24, X
    1312:	16 97       	sbiw	r26, 0x06	; 6
    1314:	89 7f       	andi	r24, 0xF9	; 249
    1316:	16 96       	adiw	r26, 0x06	; 6
    1318:	8c 93       	st	X, r24
    131a:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    131c:	e0 e6       	ldi	r30, 0x60	; 96
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 e8       	ldi	r24, 0x80	; 128
    1322:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1324:	8b eb       	ldi	r24, 0xBB	; 187
    1326:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1328:	16 96       	adiw	r26, 0x06	; 6
    132a:	8c 91       	ld	r24, X
    132c:	16 97       	sbiw	r26, 0x06	; 6
    132e:	84 60       	ori	r24, 0x04	; 4
    1330:	16 96       	adiw	r26, 0x06	; 6
    1332:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1334:	80 81       	ld	r24, Z
    1336:	81 60       	ori	r24, 0x01	; 1
    1338:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    133a:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    133c:	63 60       	ori	r22, 0x03	; 3
    133e:	84 e4       	ldi	r24, 0x44	; 68
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	2d d5       	rcall	.+2650   	; 0x1d9e <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1344:	60 e4       	ldi	r22, 0x40	; 64
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	be cf       	rjmp	.-132    	; 0x12c6 <sysclk_enable_module>
    134a:	08 95       	ret

0000134c <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    134c:	80 91 b9 20 	lds	r24, 0x20B9	; 0x8020b9 <udi_vendor_alternate_setting>
    1350:	08 95       	ret

00001352 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    1352:	40 d1       	rcall	.+640    	; 0x15d4 <udc_get_interface_desc>
    1354:	fc 01       	movw	r30, r24
    1356:	83 81       	ldd	r24, Z+3	; 0x03
    1358:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    135c:	81 11       	cpse	r24, r1
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    1360:	69 c8       	rjmp	.-3886   	; 0x434 <main_vendor_enable>
    1362:	08 95       	ret
			return false;
		}
	}
	return true;
    1364:	81 e0       	ldi	r24, 0x01	; 1
}
    1366:	08 95       	ret

00001368 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    1368:	80 91 b9 20 	lds	r24, 0x20B9	; 0x8020b9 <udi_vendor_alternate_setting>
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	09 f4       	brne	.+2      	; 0x1372 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    1370:	7d c8       	rjmp	.-3846   	; 0x46c <main_vendor_disable>
    1372:	08 95       	ret

00001374 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    1374:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    1378:	88 23       	and	r24, r24
    137a:	4c f4       	brge	.+18     	; 0x138e <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    137c:	80 76       	andi	r24, 0x60	; 96
    137e:	80 34       	cpi	r24, 0x40	; 64
    1380:	a9 f4       	brne	.+42     	; 0x13ac <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1382:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1386:	81 11       	cpse	r24, r1
    1388:	13 c0       	rjmp	.+38     	; 0x13b0 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    138a:	75 c8       	rjmp	.-3862   	; 0x476 <main_setup_in_received>
    138c:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    138e:	80 76       	andi	r24, 0x60	; 96
    1390:	80 34       	cpi	r24, 0x40	; 64
    1392:	81 f4       	brne	.+32     	; 0x13b4 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1394:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1398:	81 11       	cpse	r24, r1
    139a:	0e c0       	rjmp	.+28     	; 0x13b8 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    139c:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    13a0:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    13a4:	89 2b       	or	r24, r25
    13a6:	51 f0       	breq	.+20     	; 0x13bc <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    13a8:	64 c8       	rjmp	.-3896   	; 0x472 <main_setup_out_received>
    13aa:	08 95       	ret
		}
	}
	return false; // Not supported request
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	08 95       	ret
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	08 95       	ret
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	08 95       	ret
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	08 95       	ret
    13bc:	80 e0       	ldi	r24, 0x00	; 0
}
    13be:	08 95       	ret

000013c0 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    13c6:	8a 01       	movw	r16, r20
    13c8:	ac 01       	movw	r20, r24
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	81 e8       	ldi	r24, 0x81	; 129
    13ce:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    13de:	8a 01       	movw	r16, r20
    13e0:	ac 01       	movw	r20, r24
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	82 e8       	ldi	r24, 0x82	; 130
    13e6:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	08 95       	ret

000013f0 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    13f6:	8a 01       	movw	r16, r20
    13f8:	ac 01       	movw	r20, r24
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	83 e8       	ldi	r24, 0x83	; 131
    13fe:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1408:	e0 91 be 20 	lds	r30, 0x20BE	; 0x8020be <udc_ptr_conf>
    140c:	f0 91 bf 20 	lds	r31, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    1410:	01 90       	ld	r0, Z+
    1412:	f0 81       	ld	r31, Z
    1414:	e0 2d       	mov	r30, r0
    1416:	22 81       	ldd	r18, Z+2	; 0x02
    1418:	33 81       	ldd	r19, Z+3	; 0x03
    141a:	2e 0f       	add	r18, r30
    141c:	3f 1f       	adc	r19, r31
    141e:	fc 01       	movw	r30, r24
    1420:	40 81       	ld	r20, Z
    1422:	e4 0f       	add	r30, r20
    1424:	f1 1d       	adc	r31, r1
    1426:	e2 17       	cp	r30, r18
    1428:	f3 07       	cpc	r31, r19
    142a:	b8 f4       	brcc	.+46     	; 0x145a <udc_next_desc_in_iface+0x52>
    142c:	81 81       	ldd	r24, Z+1	; 0x01
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	b9 f0       	breq	.+46     	; 0x1460 <udc_next_desc_in_iface+0x58>
    1432:	86 13       	cpse	r24, r22
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <udc_next_desc_in_iface+0x40>
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <udc_next_desc_in_iface+0x3a>
    1438:	81 81       	ldd	r24, Z+1	; 0x01
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	a1 f0       	breq	.+40     	; 0x1466 <udc_next_desc_in_iface+0x5e>
    143e:	86 13       	cpse	r24, r22
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <udc_next_desc_in_iface+0x40>
    1442:	8e 2f       	mov	r24, r30
    1444:	9f 2f       	mov	r25, r31
    1446:	08 95       	ret
    1448:	80 81       	ld	r24, Z
    144a:	e8 0f       	add	r30, r24
    144c:	f1 1d       	adc	r31, r1
    144e:	e2 17       	cp	r30, r18
    1450:	f3 07       	cpc	r31, r19
    1452:	90 f3       	brcs	.-28     	; 0x1438 <udc_next_desc_in_iface+0x30>
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	08 95       	ret
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	08 95       	ret
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	08 95       	ret
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	08 95       	ret

0000146c <udc_valid_address>:
    146c:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1470:	8f 77       	andi	r24, 0x7F	; 127
    1472:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <udd_set_address>
    1476:	08 95       	ret

00001478 <udc_update_iface_desc>:
    1478:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <udc_num_configuration>
    147c:	99 23       	and	r25, r25
    147e:	81 f1       	breq	.+96     	; 0x14e0 <udc_update_iface_desc+0x68>
    1480:	e0 91 be 20 	lds	r30, 0x20BE	; 0x8020be <udc_ptr_conf>
    1484:	f0 91 bf 20 	lds	r31, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    1488:	01 90       	ld	r0, Z+
    148a:	f0 81       	ld	r31, Z
    148c:	e0 2d       	mov	r30, r0
    148e:	94 81       	ldd	r25, Z+4	; 0x04
    1490:	89 17       	cp	r24, r25
    1492:	40 f5       	brcc	.+80     	; 0x14e4 <udc_update_iface_desc+0x6c>
    1494:	e0 93 bc 20 	sts	0x20BC, r30	; 0x8020bc <udc_ptr_iface>
    1498:	f0 93 bd 20 	sts	0x20BD, r31	; 0x8020bd <udc_ptr_iface+0x1>
    149c:	22 81       	ldd	r18, Z+2	; 0x02
    149e:	33 81       	ldd	r19, Z+3	; 0x03
    14a0:	2e 0f       	add	r18, r30
    14a2:	3f 1f       	adc	r19, r31
    14a4:	e2 17       	cp	r30, r18
    14a6:	f3 07       	cpc	r31, r19
    14a8:	f8 f4       	brcc	.+62     	; 0x14e8 <udc_update_iface_desc+0x70>
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	94 30       	cpi	r25, 0x04	; 4
    14ae:	61 f4       	brne	.+24     	; 0x14c8 <udc_update_iface_desc+0x50>
    14b0:	92 81       	ldd	r25, Z+2	; 0x02
    14b2:	98 13       	cpse	r25, r24
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <udc_update_iface_desc+0x50>
    14b6:	93 81       	ldd	r25, Z+3	; 0x03
    14b8:	96 13       	cpse	r25, r22
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <udc_update_iface_desc+0x50>
    14bc:	e0 93 bc 20 	sts	0x20BC, r30	; 0x8020bc <udc_ptr_iface>
    14c0:	f0 93 bd 20 	sts	0x20BD, r31	; 0x8020bd <udc_ptr_iface+0x1>
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	08 95       	ret
    14c8:	90 81       	ld	r25, Z
    14ca:	e9 0f       	add	r30, r25
    14cc:	f1 1d       	adc	r31, r1
    14ce:	e2 17       	cp	r30, r18
    14d0:	f3 07       	cpc	r31, r19
    14d2:	58 f3       	brcs	.-42     	; 0x14aa <udc_update_iface_desc+0x32>
    14d4:	e0 93 bc 20 	sts	0x20BC, r30	; 0x8020bc <udc_ptr_iface>
    14d8:	f0 93 bd 20 	sts	0x20BD, r31	; 0x8020bd <udc_ptr_iface+0x1>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	08 95       	ret
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	08 95       	ret
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	08 95       	ret
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	08 95       	ret

000014ec <udc_iface_disable>:
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	c8 2f       	mov	r28, r24
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	be df       	rcall	.-132    	; 0x1478 <udc_update_iface_desc>
    14fc:	18 2f       	mov	r17, r24
    14fe:	88 23       	and	r24, r24
    1500:	81 f1       	breq	.+96     	; 0x1562 <udc_iface_disable+0x76>
    1502:	a0 91 be 20 	lds	r26, 0x20BE	; 0x8020be <udc_ptr_conf>
    1506:	b0 91 bf 20 	lds	r27, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    150a:	ec 2f       	mov	r30, r28
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	12 96       	adiw	r26, 0x02	; 2
    1514:	8d 91       	ld	r24, X+
    1516:	9c 91       	ld	r25, X
    1518:	13 97       	sbiw	r26, 0x03	; 3
    151a:	e8 0f       	add	r30, r24
    151c:	f9 1f       	adc	r31, r25
    151e:	e0 80       	ld	r14, Z
    1520:	f1 80       	ldd	r15, Z+1	; 0x01
    1522:	d7 01       	movw	r26, r14
    1524:	16 96       	adiw	r26, 0x06	; 6
    1526:	ed 91       	ld	r30, X+
    1528:	fc 91       	ld	r31, X
    152a:	17 97       	sbiw	r26, 0x07	; 7
    152c:	09 95       	icall
    152e:	68 2f       	mov	r22, r24
    1530:	8c 2f       	mov	r24, r28
    1532:	a2 df       	rcall	.-188    	; 0x1478 <udc_update_iface_desc>
    1534:	18 2f       	mov	r17, r24
    1536:	88 23       	and	r24, r24
    1538:	a1 f0       	breq	.+40     	; 0x1562 <udc_iface_disable+0x76>
    153a:	c0 91 bc 20 	lds	r28, 0x20BC	; 0x8020bc <udc_ptr_iface>
    153e:	d0 91 bd 20 	lds	r29, 0x20BD	; 0x8020bd <udc_ptr_iface+0x1>
    1542:	65 e0       	ldi	r22, 0x05	; 5
    1544:	ce 01       	movw	r24, r28
    1546:	60 df       	rcall	.-320    	; 0x1408 <udc_next_desc_in_iface>
    1548:	ec 01       	movw	r28, r24
    154a:	89 2b       	or	r24, r25
    154c:	21 f0       	breq	.+8      	; 0x1556 <udc_iface_disable+0x6a>
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	0e 94 46 14 	call	0x288c	; 0x288c <udd_ep_free>
    1554:	f6 cf       	rjmp	.-20     	; 0x1542 <udc_iface_disable+0x56>
    1556:	d7 01       	movw	r26, r14
    1558:	12 96       	adiw	r26, 0x02	; 2
    155a:	ed 91       	ld	r30, X+
    155c:	fc 91       	ld	r31, X
    155e:	13 97       	sbiw	r26, 0x03	; 3
    1560:	09 95       	icall
    1562:	81 2f       	mov	r24, r17
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	08 95       	ret

00001570 <udc_iface_enable>:
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	18 2f       	mov	r17, r24
    1578:	7f df       	rcall	.-258    	; 0x1478 <udc_update_iface_desc>
    157a:	88 23       	and	r24, r24
    157c:	39 f1       	breq	.+78     	; 0x15cc <udc_iface_enable+0x5c>
    157e:	c0 91 bc 20 	lds	r28, 0x20BC	; 0x8020bc <udc_ptr_iface>
    1582:	d0 91 bd 20 	lds	r29, 0x20BD	; 0x8020bd <udc_ptr_iface+0x1>
    1586:	65 e0       	ldi	r22, 0x05	; 5
    1588:	ce 01       	movw	r24, r28
    158a:	3e df       	rcall	.-388    	; 0x1408 <udc_next_desc_in_iface>
    158c:	ec 01       	movw	r28, r24
    158e:	89 2b       	or	r24, r25
    1590:	41 f0       	breq	.+16     	; 0x15a2 <udc_iface_enable+0x32>
    1592:	4c 81       	ldd	r20, Y+4	; 0x04
    1594:	5d 81       	ldd	r21, Y+5	; 0x05
    1596:	6b 81       	ldd	r22, Y+3	; 0x03
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	b0 d7       	rcall	.+3936   	; 0x24fc <udd_ep_alloc>
    159c:	81 11       	cpse	r24, r1
    159e:	f3 cf       	rjmp	.-26     	; 0x1586 <udc_iface_enable+0x16>
    15a0:	15 c0       	rjmp	.+42     	; 0x15cc <udc_iface_enable+0x5c>
    15a2:	a0 91 be 20 	lds	r26, 0x20BE	; 0x8020be <udc_ptr_conf>
    15a6:	b0 91 bf 20 	lds	r27, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    15aa:	e1 2f       	mov	r30, r17
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	12 96       	adiw	r26, 0x02	; 2
    15b4:	8d 91       	ld	r24, X+
    15b6:	9c 91       	ld	r25, X
    15b8:	13 97       	sbiw	r26, 0x03	; 3
    15ba:	e8 0f       	add	r30, r24
    15bc:	f9 1f       	adc	r31, r25
    15be:	01 90       	ld	r0, Z+
    15c0:	f0 81       	ld	r31, Z
    15c2:	e0 2d       	mov	r30, r0
    15c4:	01 90       	ld	r0, Z+
    15c6:	f0 81       	ld	r31, Z
    15c8:	e0 2d       	mov	r30, r0
    15ca:	09 95       	icall
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	08 95       	ret

000015d4 <udc_get_interface_desc>:
    15d4:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <udc_ptr_iface>
    15d8:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <udc_ptr_iface+0x1>
    15dc:	08 95       	ret

000015de <udc_start>:
    15de:	fc c6       	rjmp	.+3576   	; 0x23d8 <udd_enable>
    15e0:	08 95       	ret

000015e2 <udc_reset>:
    15e2:	cf 93       	push	r28
    15e4:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    15e8:	88 23       	and	r24, r24
    15ea:	c1 f0       	breq	.+48     	; 0x161c <udc_reset+0x3a>
    15ec:	e0 91 be 20 	lds	r30, 0x20BE	; 0x8020be <udc_ptr_conf>
    15f0:	f0 91 bf 20 	lds	r31, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    15f4:	01 90       	ld	r0, Z+
    15f6:	f0 81       	ld	r31, Z
    15f8:	e0 2d       	mov	r30, r0
    15fa:	84 81       	ldd	r24, Z+4	; 0x04
    15fc:	88 23       	and	r24, r24
    15fe:	71 f0       	breq	.+28     	; 0x161c <udc_reset+0x3a>
    1600:	c0 e0       	ldi	r28, 0x00	; 0
    1602:	8c 2f       	mov	r24, r28
    1604:	73 df       	rcall	.-282    	; 0x14ec <udc_iface_disable>
    1606:	cf 5f       	subi	r28, 0xFF	; 255
    1608:	e0 91 be 20 	lds	r30, 0x20BE	; 0x8020be <udc_ptr_conf>
    160c:	f0 91 bf 20 	lds	r31, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    1610:	01 90       	ld	r0, Z+
    1612:	f0 81       	ld	r31, Z
    1614:	e0 2d       	mov	r30, r0
    1616:	84 81       	ldd	r24, Z+4	; 0x04
    1618:	c8 17       	cp	r28, r24
    161a:	98 f3       	brcs	.-26     	; 0x1602 <udc_reset+0x20>
    161c:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <udc_num_configuration>
    1620:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <udc_device_status>
    1624:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <udc_device_status+0x1>
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    162c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    162e:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    1632:	88 23       	and	r24, r24
    1634:	49 f1       	breq	.+82     	; 0x1688 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1636:	a0 91 be 20 	lds	r26, 0x20BE	; 0x8020be <udc_ptr_conf>
    163a:	b0 91 bf 20 	lds	r27, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    163e:	ed 91       	ld	r30, X+
    1640:	fc 91       	ld	r31, X
    1642:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1644:	84 81       	ldd	r24, Z+4	; 0x04
    1646:	88 23       	and	r24, r24
    1648:	f9 f0       	breq	.+62     	; 0x1688 <udc_sof_notify+0x5c>
    164a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    164c:	ec 2f       	mov	r30, r28
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	12 96       	adiw	r26, 0x02	; 2
    1656:	8d 91       	ld	r24, X+
    1658:	9c 91       	ld	r25, X
    165a:	13 97       	sbiw	r26, 0x03	; 3
    165c:	e8 0f       	add	r30, r24
    165e:	f9 1f       	adc	r31, r25
    1660:	01 90       	ld	r0, Z+
    1662:	f0 81       	ld	r31, Z
    1664:	e0 2d       	mov	r30, r0
    1666:	00 84       	ldd	r0, Z+8	; 0x08
    1668:	f1 85       	ldd	r31, Z+9	; 0x09
    166a:	e0 2d       	mov	r30, r0
    166c:	30 97       	sbiw	r30, 0x00	; 0
    166e:	09 f0       	breq	.+2      	; 0x1672 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1670:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1672:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1674:	a0 91 be 20 	lds	r26, 0x20BE	; 0x8020be <udc_ptr_conf>
    1678:	b0 91 bf 20 	lds	r27, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    167c:	ed 91       	ld	r30, X+
    167e:	fc 91       	ld	r31, X
    1680:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1682:	84 81       	ldd	r24, Z+4	; 0x04
    1684:	c8 17       	cp	r28, r24
    1686:	10 f3       	brcs	.-60     	; 0x164c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1694:	ee e5       	ldi	r30, 0x5E	; 94
    1696:	f4 e2       	ldi	r31, 0x24	; 36
    1698:	12 86       	std	Z+10, r1	; 0x0a
    169a:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    169c:	14 86       	std	Z+12, r1	; 0x0c
    169e:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    16a0:	16 86       	std	Z+14, r1	; 0x0e
    16a2:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    16a4:	80 81       	ld	r24, Z
    16a6:	88 23       	and	r24, r24
    16a8:	3c f4       	brge	.+14     	; 0x16b8 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    16aa:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    16ae:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    16b2:	23 2b       	or	r18, r19
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <udc_process_setup+0x2c>
    16b6:	67 c3       	rjmp	.+1742   	; 0x1d86 <udc_process_setup+0x6fa>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    16b8:	80 76       	andi	r24, 0x60	; 96
    16ba:	80 34       	cpi	r24, 0x40	; 64
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <udc_process_setup+0x34>
    16be:	05 c1       	rjmp	.+522    	; 0x18ca <udc_process_setup+0x23e>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    16c0:	e0 91 5f 24 	lds	r30, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    16c4:	8e 2f       	mov	r24, r30
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	fc 01       	movw	r30, r24
    16ca:	e0 5a       	subi	r30, 0xA0	; 160
    16cc:	f1 09       	sbc	r31, r1
    16ce:	e8 30       	cpi	r30, 0x08	; 8
    16d0:	f1 05       	cpc	r31, r1
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <udc_process_setup+0x4a>
    16d4:	f1 c0       	rjmp	.+482    	; 0x18b8 <udc_process_setup+0x22c>
    16d6:	ea 5f       	subi	r30, 0xFA	; 250
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    16de:	00 00       	nop
    16e0:	56 c3       	rjmp	.+1708   	; 0x1d8e <udc_process_setup+0x702>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    16e2:	e0 e0       	ldi	r30, 0x00	; 0
    16e4:	f8 e0       	ldi	r31, 0x08	; 8
    16e6:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    16e8:	ce e5       	ldi	r28, 0x5E	; 94
    16ea:	d4 e2       	ldi	r29, 0x24	; 36
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	86 ab       	std	Z+54, r24	; 0x36
    16f2:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	8f 70       	andi	r24, 0x0F	; 15
    16f8:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    16fa:	6e 81       	ldd	r22, Y+6	; 0x06
    16fc:	7f 81       	ldd	r23, Y+7	; 0x07
    16fe:	8e e5       	ldi	r24, 0x5E	; 94
    1700:	92 e2       	ldi	r25, 0x22	; 34
    1702:	f5 d6       	rcall	.+3562   	; 0x24ee <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1704:	8e 81       	ldd	r24, Y+6	; 0x06
    1706:	9f 81       	ldd	r25, Y+7	; 0x07
    1708:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
    170c:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
    1710:	82 17       	cp	r24, r18
    1712:	93 07       	cpc	r25, r19
    1714:	09 f4       	brne	.+2      	; 0x1718 <udc_process_setup+0x8c>
    1716:	3b c3       	rjmp	.+1654   	; 0x1d8e <udc_process_setup+0x702>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1718:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <dacBuf_len>
    171c:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <dacBuf_len+0x1>
				switch(global_mode){
    1720:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    1724:	8e 2f       	mov	r24, r30
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	88 30       	cpi	r24, 0x08	; 8
    172a:	91 05       	cpc	r25, r1
    172c:	08 f0       	brcs	.+2      	; 0x1730 <udc_process_setup+0xa4>
    172e:	c6 c0       	rjmp	.+396    	; 0x18bc <udc_process_setup+0x230>
    1730:	fc 01       	movw	r30, r24
    1732:	e2 5f       	subi	r30, 0xF2	; 242
    1734:	fe 4f       	sbci	r31, 0xFE	; 254
    1736:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    173a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <tiny_dma_set_mode_0>
    173e:	27 c3       	rjmp	.+1614   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1740:	0e 94 5e 03 	call	0x6bc	; 0x6bc <tiny_dma_set_mode_1>
    1744:	24 c3       	rjmp	.+1608   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1746:	32 d8       	rcall	.-3996   	; 0x7ac <tiny_dma_set_mode_2>
    1748:	22 c3       	rjmp	.+1604   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 3:
					tiny_dma_set_mode_3();
    174a:	a5 d8       	rcall	.-3766   	; 0x896 <tiny_dma_set_mode_3>
    174c:	20 c3       	rjmp	.+1600   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 4:
					tiny_dma_set_mode_4();
    174e:	1f d9       	rcall	.-3522   	; 0x98e <tiny_dma_set_mode_4>
    1750:	1e c3       	rjmp	.+1596   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1752:	93 d9       	rcall	.-3290   	; 0xa7a <tiny_dma_set_mode_5>
    1754:	1c c3       	rjmp	.+1592   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1756:	d9 d9       	rcall	.-3150   	; 0xb0a <tiny_dma_set_mode_6>
    1758:	1a c3       	rjmp	.+1588   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 7:
					tiny_dma_set_mode_7();
    175a:	39 da       	rcall	.-2958   	; 0xbce <tiny_dma_set_mode_7>
    175c:	18 c3       	rjmp	.+1584   	; 0x1d8e <udc_process_setup+0x702>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    175e:	e0 e4       	ldi	r30, 0x40	; 64
    1760:	f8 e0       	ldi	r31, 0x08	; 8
    1762:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1764:	ce e5       	ldi	r28, 0x5E	; 94
    1766:	d4 e2       	ldi	r29, 0x24	; 36
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	9b 81       	ldd	r25, Y+3	; 0x03
    176c:	86 ab       	std	Z+54, r24	; 0x36
    176e:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	8f 70       	andi	r24, 0x0F	; 15
    1774:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    1776:	6e 81       	ldd	r22, Y+6	; 0x06
    1778:	7f 81       	ldd	r23, Y+7	; 0x07
    177a:	8e e6       	ldi	r24, 0x6E	; 110
    177c:	94 e2       	ldi	r25, 0x24	; 36
    177e:	b7 d6       	rcall	.+3438   	; 0x24ee <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1780:	8e 81       	ldd	r24, Y+6	; 0x06
    1782:	9f 81       	ldd	r25, Y+7	; 0x07
    1784:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
    1788:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
    178c:	82 17       	cp	r24, r18
    178e:	93 07       	cpc	r25, r19
    1790:	09 f4       	brne	.+2      	; 0x1794 <udc_process_setup+0x108>
    1792:	fd c2       	rjmp	.+1530   	; 0x1d8e <udc_process_setup+0x702>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1794:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <auxDacBufLen>
    1798:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <auxDacBufLen+0x1>
				switch(global_mode){
    179c:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    17a0:	8e 2f       	mov	r24, r30
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	88 30       	cpi	r24, 0x08	; 8
    17a6:	91 05       	cpc	r25, r1
    17a8:	08 f0       	brcs	.+2      	; 0x17ac <udc_process_setup+0x120>
    17aa:	8a c0       	rjmp	.+276    	; 0x18c0 <udc_process_setup+0x234>
    17ac:	fc 01       	movw	r30, r24
    17ae:	ea 5e       	subi	r30, 0xEA	; 234
    17b0:	fe 4f       	sbci	r31, 0xFE	; 254
    17b2:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    17b6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <tiny_dma_set_mode_0>
    17ba:	e9 c2       	rjmp	.+1490   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 1:
					tiny_dma_set_mode_1();
    17bc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <tiny_dma_set_mode_1>
    17c0:	e6 c2       	rjmp	.+1484   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 2:
					tiny_dma_set_mode_2();
    17c2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <tiny_dma_set_mode_2>
    17c6:	e3 c2       	rjmp	.+1478   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 3:
					tiny_dma_set_mode_3();
    17c8:	66 d8       	rcall	.-3892   	; 0x896 <tiny_dma_set_mode_3>
    17ca:	e1 c2       	rjmp	.+1474   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 4:
					tiny_dma_set_mode_4();
    17cc:	e0 d8       	rcall	.-3648   	; 0x98e <tiny_dma_set_mode_4>
    17ce:	df c2       	rjmp	.+1470   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 5:
					tiny_dma_set_mode_5();
    17d0:	54 d9       	rcall	.-3416   	; 0xa7a <tiny_dma_set_mode_5>
    17d2:	dd c2       	rjmp	.+1466   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 6:
					tiny_dma_set_mode_6();
    17d4:	9a d9       	rcall	.-3276   	; 0xb0a <tiny_dma_set_mode_6>
    17d6:	db c2       	rjmp	.+1462   	; 0x1d8e <udc_process_setup+0x702>
					break;
					case 7:
					tiny_dma_set_mode_7();
    17d8:	fa d9       	rcall	.-3084   	; 0xbce <tiny_dma_set_mode_7>
    17da:	d9 c2       	rjmp	.+1458   	; 0x1d8e <udc_process_setup+0x702>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    17dc:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    17e0:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    17e4:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    17e8:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <PSU_target>
    17ec:	d0 c2       	rjmp	.+1440   	; 0x1d8e <udc_process_setup+0x702>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    17ee:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    17f2:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    17f6:	cb c2       	rjmp	.+1430   	; 0x1d8e <udc_process_setup+0x702>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    17f8:	e0 91 60 24 	lds	r30, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    17fc:	f0 91 61 24 	lds	r31, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1800:	e8 30       	cpi	r30, 0x08	; 8
    1802:	f1 05       	cpc	r31, r1
    1804:	08 f0       	brcs	.+2      	; 0x1808 <udc_process_setup+0x17c>
    1806:	5e c0       	rjmp	.+188    	; 0x18c4 <udc_process_setup+0x238>
    1808:	e2 5e       	subi	r30, 0xE2	; 226
    180a:	fe 4f       	sbci	r31, 0xFE	; 254
    180c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	0e 94 6f 02 	call	0x4de	; 0x4de <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1818:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    181c:	0e 94 3d 02 	call	0x47a	; 0x47a <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    1820:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <tiny_dma_set_mode_0>
    1824:	b4 c2       	rjmp	.+1384   	; 0x1d8e <udc_process_setup+0x702>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	0e 94 6f 02 	call	0x4de	; 0x4de <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    182e:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1832:	0e 94 3d 02 	call	0x47a	; 0x47a <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1836:	0e 94 5e 03 	call	0x6bc	; 0x6bc <tiny_dma_set_mode_1>
    183a:	a9 c2       	rjmp	.+1362   	; 0x1d8e <udc_process_setup+0x702>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	0e 94 6f 02 	call	0x4de	; 0x4de <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1844:	ce e5       	ldi	r28, 0x5E	; 94
    1846:	d4 e2       	ldi	r29, 0x24	; 36
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	0e 94 3d 02 	call	0x47a	; 0x47a <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	0e 94 52 02 	call	0x4a4	; 0x4a4 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    1854:	0e 94 d6 03 	call	0x7ac	; 0x7ac <tiny_dma_set_mode_2>
    1858:	9a c2       	rjmp	.+1332   	; 0x1d8e <udc_process_setup+0x702>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    185a:	1d d8       	rcall	.-4038   	; 0x896 <tiny_dma_set_mode_3>
    185c:	98 c2       	rjmp	.+1328   	; 0x1d8e <udc_process_setup+0x702>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    185e:	97 d8       	rcall	.-3794   	; 0x98e <tiny_dma_set_mode_4>
    1860:	96 c2       	rjmp	.+1324   	; 0x1d8e <udc_process_setup+0x702>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	0e 94 6f 02 	call	0x4de	; 0x4de <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    186a:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    186e:	0e 94 3d 02 	call	0x47a	; 0x47a <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    1872:	03 d9       	rcall	.-3578   	; 0xa7a <tiny_dma_set_mode_5>
    1874:	8c c2       	rjmp	.+1304   	; 0x1d8e <udc_process_setup+0x702>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	0e 94 6f 02 	call	0x4de	; 0x4de <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    187e:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1882:	0e 94 3d 02 	call	0x47a	; 0x47a <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    1886:	41 d9       	rcall	.-3454   	; 0xb0a <tiny_dma_set_mode_6>
    1888:	82 c2       	rjmp	.+1284   	; 0x1d8e <udc_process_setup+0x702>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    188a:	62 e0       	ldi	r22, 0x02	; 2
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	0e 94 6f 02 	call	0x4de	; 0x4de <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1892:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1896:	80 68       	ori	r24, 0x80	; 128
    1898:	0e 94 3d 02 	call	0x47a	; 0x47a <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    189c:	98 d9       	rcall	.-3280   	; 0xbce <tiny_dma_set_mode_7>
    189e:	77 c2       	rjmp	.+1262   	; 0x1d8e <udc_process_setup+0x702>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    18a0:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    18a4:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    18a8:	72 c2       	rjmp	.+1252   	; 0x1d8e <udc_process_setup+0x702>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    18aa:	e9 e7       	ldi	r30, 0x79	; 121
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	88 ed       	ldi	r24, 0xD8	; 216
    18b2:	f8 94       	cli
    18b4:	84 bf       	out	0x34, r24	; 52
    18b6:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <udc_process_setup+0x23a>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <udc_process_setup+0x23a>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <udc_process_setup+0x23a>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    18c4:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    18c6:	81 11       	cpse	r24, r1
    18c8:	65 c2       	rjmp	.+1226   	; 0x1d94 <udc_process_setup+0x708>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    18ca:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    18ce:	98 2f       	mov	r25, r24
    18d0:	90 76       	andi	r25, 0x60	; 96
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <udc_process_setup+0x24a>
    18d4:	e1 c1       	rjmp	.+962    	; 0x1c98 <udc_process_setup+0x60c>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    18d6:	88 23       	and	r24, r24
    18d8:	0c f0       	brlt	.+2      	; 0x18dc <udc_process_setup+0x250>
    18da:	05 c1       	rjmp	.+522    	; 0x1ae6 <udc_process_setup+0x45a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    18dc:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    18e0:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    18e4:	21 15       	cp	r18, r1
    18e6:	31 05       	cpc	r19, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <udc_process_setup+0x260>
    18ea:	d6 c1       	rjmp	.+940    	; 0x1c98 <udc_process_setup+0x60c>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    18ec:	8f 71       	andi	r24, 0x1F	; 31
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <udc_process_setup+0x266>
    18f0:	a3 c0       	rjmp	.+326    	; 0x1a38 <udc_process_setup+0x3ac>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    18f2:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    18f6:	96 30       	cpi	r25, 0x06	; 6
    18f8:	79 f0       	breq	.+30     	; 0x1918 <udc_process_setup+0x28c>
    18fa:	98 30       	cpi	r25, 0x08	; 8
    18fc:	09 f4       	brne	.+2      	; 0x1900 <udc_process_setup+0x274>
    18fe:	92 c0       	rjmp	.+292    	; 0x1a24 <udc_process_setup+0x398>
    1900:	91 11       	cpse	r25, r1
    1902:	9a c0       	rjmp	.+308    	; 0x1a38 <udc_process_setup+0x3ac>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	09 f0       	breq	.+2      	; 0x190c <udc_process_setup+0x280>
    190a:	c6 c1       	rjmp	.+908    	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    190c:	62 e0       	ldi	r22, 0x02	; 2
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	84 ec       	ldi	r24, 0xC4	; 196
    1912:	90 e2       	ldi	r25, 0x20	; 32
    1914:	ec d5       	rcall	.+3032   	; 0x24ee <udd_set_setup_payload>
    1916:	3d c2       	rjmp	.+1146   	; 0x1d92 <udc_process_setup+0x706>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1918:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    191c:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1920:	29 2f       	mov	r18, r25
    1922:	33 27       	eor	r19, r19
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	a9 f0       	breq	.+42     	; 0x1954 <udc_process_setup+0x2c8>
    192a:	24 f4       	brge	.+8      	; 0x1934 <udc_process_setup+0x2a8>
    192c:	21 30       	cpi	r18, 0x01	; 1
    192e:	31 05       	cpc	r19, r1
    1930:	41 f0       	breq	.+16     	; 0x1942 <udc_process_setup+0x2b6>
    1932:	a9 c1       	rjmp	.+850    	; 0x1c86 <udc_process_setup+0x5fa>
    1934:	23 30       	cpi	r18, 0x03	; 3
    1936:	31 05       	cpc	r19, r1
    1938:	d9 f1       	breq	.+118    	; 0x19b0 <udc_process_setup+0x324>
    193a:	2f 30       	cpi	r18, 0x0F	; 15
    193c:	31 05       	cpc	r19, r1
    193e:	51 f1       	breq	.+84     	; 0x1994 <udc_process_setup+0x308>
    1940:	a2 c1       	rjmp	.+836    	; 0x1c86 <udc_process_setup+0x5fa>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1942:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <udc_config>
    1946:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    194a:	dc 01       	movw	r26, r24
    194c:	6c 91       	ld	r22, X
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	ce d5       	rcall	.+2972   	; 0x24ee <udd_set_setup_payload>
    1952:	59 c0       	rjmp	.+178    	; 0x1a06 <udc_process_setup+0x37a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1954:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    1958:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
    195c:	21 89       	ldd	r18, Z+17	; 0x11
    195e:	82 17       	cp	r24, r18
    1960:	08 f0       	brcs	.+2      	; 0x1964 <udc_process_setup+0x2d8>
    1962:	9a c1       	rjmp	.+820    	; 0x1c98 <udc_process_setup+0x60c>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1964:	99 27       	eor	r25, r25
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    1972:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    1976:	e8 0f       	add	r30, r24
    1978:	f9 1f       	adc	r31, r25
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    197e:	fc 01       	movw	r30, r24
    1980:	62 81       	ldd	r22, Z+2	; 0x02
    1982:	73 81       	ldd	r23, Z+3	; 0x03
    1984:	b4 d5       	rcall	.+2920   	; 0x24ee <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1986:	e0 91 66 24 	lds	r30, 0x2466	; 0x802466 <udd_g_ctrlreq+0x8>
    198a:	f0 91 67 24 	lds	r31, 0x2467	; 0x802467 <udd_g_ctrlreq+0x9>
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	81 83       	std	Z+1, r24	; 0x01
    1992:	39 c0       	rjmp	.+114    	; 0x1a06 <udc_process_setup+0x37a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1994:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config+0x4>
    1998:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x5>
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	09 f4       	brne	.+2      	; 0x19a2 <udc_process_setup+0x316>
    19a0:	7b c1       	rjmp	.+758    	; 0x1c98 <udc_process_setup+0x60c>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    19a2:	dc 01       	movw	r26, r24
    19a4:	12 96       	adiw	r26, 0x02	; 2
    19a6:	6d 91       	ld	r22, X+
    19a8:	7c 91       	ld	r23, X
    19aa:	13 97       	sbiw	r26, 0x03	; 3
    19ac:	a0 d5       	rcall	.+2880   	; 0x24ee <udd_set_setup_payload>
    19ae:	2b c0       	rjmp	.+86     	; 0x1a06 <udc_process_setup+0x37a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    19b0:	99 27       	eor	r25, r25
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	91 05       	cpc	r25, r1
    19b6:	71 f0       	breq	.+28     	; 0x19d4 <udc_process_setup+0x348>
    19b8:	38 f0       	brcs	.+14     	; 0x19c8 <udc_process_setup+0x33c>
    19ba:	02 97       	sbiw	r24, 0x02	; 2
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <udc_process_setup+0x334>
    19be:	6c c1       	rjmp	.+728    	; 0x1c98 <udc_process_setup+0x60c>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    19c0:	8a e8       	ldi	r24, 0x8A	; 138
    19c2:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    19c4:	28 e1       	ldi	r18, 0x18	; 24
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <udc_process_setup+0x34e>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    19c8:	64 e0       	ldi	r22, 0x04	; 4
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	8e ea       	ldi	r24, 0xAE	; 174
    19ce:	90 e2       	ldi	r25, 0x20	; 32
    19d0:	8e d5       	rcall	.+2844   	; 0x24ee <udd_set_setup_payload>
    19d2:	19 c0       	rjmp	.+50     	; 0x1a06 <udc_process_setup+0x37a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    19d4:	83 ea       	ldi	r24, 0xA3	; 163
    19d6:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    19d8:	29 e0       	ldi	r18, 0x09	; 9
    19da:	38 2f       	mov	r19, r24
    19dc:	aa e5       	ldi	r26, 0x5A	; 90
    19de:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    19e0:	e8 2f       	mov	r30, r24
    19e2:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    19e4:	81 91       	ld	r24, Z+
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	8d 93       	st	X+, r24
    19ea:	9d 93       	st	X+, r25
    19ec:	8e 2f       	mov	r24, r30
    19ee:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    19f0:	82 17       	cp	r24, r18
    19f2:	c0 f3       	brcs	.-16     	; 0x19e4 <udc_process_setup+0x358>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    19f4:	62 2f       	mov	r22, r18
    19f6:	66 0f       	add	r22, r22
    19f8:	6e 5f       	subi	r22, 0xFE	; 254
    19fa:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	88 e5       	ldi	r24, 0x58	; 88
    1a02:	90 e2       	ldi	r25, 0x20	; 32
    1a04:	74 d5       	rcall	.+2792   	; 0x24ee <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1a06:	ee e5       	ldi	r30, 0x5E	; 94
    1a08:	f4 e2       	ldi	r31, 0x24	; 36
    1a0a:	86 81       	ldd	r24, Z+6	; 0x06
    1a0c:	97 81       	ldd	r25, Z+7	; 0x07
    1a0e:	22 85       	ldd	r18, Z+10	; 0x0a
    1a10:	33 85       	ldd	r19, Z+11	; 0x0b
    1a12:	82 17       	cp	r24, r18
    1a14:	93 07       	cpc	r25, r19
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <udc_process_setup+0x38e>
    1a18:	bc c1       	rjmp	.+888    	; 0x1d92 <udc_process_setup+0x706>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1a1a:	80 93 68 24 	sts	0x2468, r24	; 0x802468 <udd_g_ctrlreq+0xa>
    1a1e:	90 93 69 24 	sts	0x2469, r25	; 0x802469 <udd_g_ctrlreq+0xb>
    1a22:	b7 c1       	rjmp	.+878    	; 0x1d92 <udc_process_setup+0x706>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a24:	21 30       	cpi	r18, 0x01	; 1
    1a26:	31 05       	cpc	r19, r1
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <udc_process_setup+0x3a0>
    1a2a:	36 c1       	rjmp	.+620    	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	80 ec       	ldi	r24, 0xC0	; 192
    1a32:	90 e2       	ldi	r25, 0x20	; 32
    1a34:	5c d5       	rcall	.+2744   	; 0x24ee <udd_set_setup_payload>
    1a36:	ad c1       	rjmp	.+858    	; 0x1d92 <udc_process_setup+0x706>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	e1 f5       	brne	.+120    	; 0x1ab4 <udc_process_setup+0x428>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a3c:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1a40:	9a 30       	cpi	r25, 0x0A	; 10
    1a42:	c1 f5       	brne	.+112    	; 0x1ab4 <udc_process_setup+0x428>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1a44:	21 30       	cpi	r18, 0x01	; 1
    1a46:	31 05       	cpc	r19, r1
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <udc_process_setup+0x3c0>
    1a4a:	26 c1       	rjmp	.+588    	; 0x1c98 <udc_process_setup+0x60c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a4c:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    1a50:	88 23       	and	r24, r24
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <udc_process_setup+0x3ca>
    1a54:	21 c1       	rjmp	.+578    	; 0x1c98 <udc_process_setup+0x60c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a56:	c0 91 62 24 	lds	r28, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1a5a:	d0 91 63 24 	lds	r29, 0x2463	; 0x802463 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a5e:	00 91 be 20 	lds	r16, 0x20BE	; 0x8020be <udc_ptr_conf>
    1a62:	10 91 bf 20 	lds	r17, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    1a66:	d8 01       	movw	r26, r16
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	84 81       	ldd	r24, Z+4	; 0x04
    1a6e:	c8 17       	cp	r28, r24
    1a70:	08 f0       	brcs	.+2      	; 0x1a74 <udc_process_setup+0x3e8>
    1a72:	12 c1       	rjmp	.+548    	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	8c 2f       	mov	r24, r28
    1a78:	ff dc       	rcall	.-1538   	; 0x1478 <udc_update_iface_desc>
    1a7a:	88 23       	and	r24, r24
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <udc_process_setup+0x3f4>
    1a7e:	0c c1       	rjmp	.+536    	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a80:	ce 01       	movw	r24, r28
    1a82:	99 27       	eor	r25, r25
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	d8 01       	movw	r26, r16
    1a8a:	12 96       	adiw	r26, 0x02	; 2
    1a8c:	ed 91       	ld	r30, X+
    1a8e:	fc 91       	ld	r31, X
    1a90:	13 97       	sbiw	r26, 0x03	; 3
    1a92:	e8 0f       	add	r30, r24
    1a94:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1a96:	01 90       	ld	r0, Z+
    1a98:	f0 81       	ld	r31, Z
    1a9a:	e0 2d       	mov	r30, r0
    1a9c:	86 81       	ldd	r24, Z+6	; 0x06
    1a9e:	97 81       	ldd	r25, Z+7	; 0x07
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	09 95       	icall
    1aa4:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	82 ec       	ldi	r24, 0xC2	; 194
    1aae:	90 e2       	ldi	r25, 0x20	; 32
    1ab0:	1e d5       	rcall	.+2620   	; 0x24ee <udd_set_setup_payload>
    1ab2:	6f c1       	rjmp	.+734    	; 0x1d92 <udc_process_setup+0x706>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1ab4:	82 30       	cpi	r24, 0x02	; 2
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <udc_process_setup+0x42e>
    1ab8:	ef c0       	rjmp	.+478    	; 0x1c98 <udc_process_setup+0x60c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1aba:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1abe:	81 11       	cpse	r24, r1
    1ac0:	e4 c0       	rjmp	.+456    	; 0x1c8a <udc_process_setup+0x5fe>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <udc_process_setup+0x43e>
    1ac8:	e7 c0       	rjmp	.+462    	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1aca:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1ace:	8b d5       	rcall	.+2838   	; 0x25e6 <udd_ep_is_halted>
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <udc_ep_status.5522>
    1ad6:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <udc_ep_status.5522+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1ada:	62 e0       	ldi	r22, 0x02	; 2
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	8a eb       	ldi	r24, 0xBA	; 186
    1ae0:	90 e2       	ldi	r25, 0x20	; 32
    1ae2:	05 d5       	rcall	.+2570   	; 0x24ee <udd_set_setup_payload>
    1ae4:	56 c1       	rjmp	.+684    	; 0x1d92 <udc_process_setup+0x706>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ae6:	8f 71       	andi	r24, 0x1F	; 31
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <udc_process_setup+0x460>
    1aea:	83 c0       	rjmp	.+262    	; 0x1bf2 <udc_process_setup+0x566>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1aec:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1af0:	93 30       	cpi	r25, 0x03	; 3
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <udc_process_setup+0x46a>
    1af4:	cc c0       	rjmp	.+408    	; 0x1c8e <udc_process_setup+0x602>
    1af6:	18 f4       	brcc	.+6      	; 0x1afe <udc_process_setup+0x472>
    1af8:	91 30       	cpi	r25, 0x01	; 1
    1afa:	a1 f0       	breq	.+40     	; 0x1b24 <udc_process_setup+0x498>
    1afc:	7a c0       	rjmp	.+244    	; 0x1bf2 <udc_process_setup+0x566>
    1afe:	95 30       	cpi	r25, 0x05	; 5
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <udc_process_setup+0x47c>
    1b02:	99 30       	cpi	r25, 0x09	; 9
    1b04:	39 f1       	breq	.+78     	; 0x1b54 <udc_process_setup+0x4c8>
    1b06:	75 c0       	rjmp	.+234    	; 0x1bf2 <udc_process_setup+0x566>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b08:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1b0c:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1b10:	89 2b       	or	r24, r25
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <udc_process_setup+0x48a>
    1b14:	c1 c0       	rjmp	.+386    	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1b16:	86 e3       	ldi	r24, 0x36	; 54
    1b18:	9a e0       	ldi	r25, 0x0A	; 10
    1b1a:	80 93 6a 24 	sts	0x246A, r24	; 0x80246a <udd_g_ctrlreq+0xc>
    1b1e:	90 93 6b 24 	sts	0x246B, r25	; 0x80246b <udd_g_ctrlreq+0xd>
    1b22:	37 c1       	rjmp	.+622    	; 0x1d92 <udc_process_setup+0x706>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b24:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1b28:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1b2c:	89 2b       	or	r24, r25
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <udc_process_setup+0x4a6>
    1b30:	b3 c0       	rjmp	.+358    	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b32:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1b36:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <udc_process_setup+0x4b4>
    1b3e:	ac c0       	rjmp	.+344    	; 0x1c98 <udc_process_setup+0x60c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1b40:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udc_device_status>
    1b44:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <udc_device_status+0x1>
    1b48:	8d 7f       	andi	r24, 0xFD	; 253
    1b4a:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_device_status>
    1b4e:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <udc_device_status+0x1>
    1b52:	1f c1       	rjmp	.+574    	; 0x1d92 <udc_process_setup+0x706>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1b54:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1b58:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1b5c:	89 2b       	or	r24, r25
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <udc_process_setup+0x4d6>
    1b60:	9b c0       	rjmp	.+310    	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1b62:	c2 d4       	rcall	.+2436   	; 0x24e8 <udd_getaddress>
    1b64:	88 23       	and	r24, r24
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <udc_process_setup+0x4de>
    1b68:	97 c0       	rjmp	.+302    	; 0x1c98 <udc_process_setup+0x60c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1b6a:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1b6e:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1b72:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1b74:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    1b78:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1b7c:	81 89       	ldd	r24, Z+17	; 0x11
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	82 17       	cp	r24, r18
    1b82:	93 07       	cpc	r25, r19
    1b84:	08 f4       	brcc	.+2      	; 0x1b88 <udc_process_setup+0x4fc>
    1b86:	88 c0       	rjmp	.+272    	; 0x1c98 <udc_process_setup+0x60c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1b88:	2c dd       	rcall	.-1448   	; 0x15e2 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1b8a:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1b8e:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1b92:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1b96:	88 23       	and	r24, r24
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <udc_process_setup+0x510>
    1b9a:	fb c0       	rjmp	.+502    	; 0x1d92 <udc_process_setup+0x706>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1b9c:	99 27       	eor	r25, r25
    1b9e:	81 50       	subi	r24, 0x01	; 1
    1ba0:	90 4c       	sbci	r25, 0xC0	; 192
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    1bae:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    1bb2:	e8 0f       	add	r30, r24
    1bb4:	f9 1f       	adc	r31, r25
    1bb6:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_conf>
    1bba:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bbe:	01 90       	ld	r0, Z+
    1bc0:	f0 81       	ld	r31, Z
    1bc2:	e0 2d       	mov	r30, r0
    1bc4:	84 81       	ldd	r24, Z+4	; 0x04
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <udc_process_setup+0x540>
    1bca:	e3 c0       	rjmp	.+454    	; 0x1d92 <udc_process_setup+0x706>
    1bcc:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	8c 2f       	mov	r24, r28
    1bd2:	ce dc       	rcall	.-1636   	; 0x1570 <udc_iface_enable>
    1bd4:	88 23       	and	r24, r24
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <udc_process_setup+0x54e>
    1bd8:	5f c0       	rjmp	.+190    	; 0x1c98 <udc_process_setup+0x60c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1bda:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bdc:	e0 91 be 20 	lds	r30, 0x20BE	; 0x8020be <udc_ptr_conf>
    1be0:	f0 91 bf 20 	lds	r31, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    1be4:	01 90       	ld	r0, Z+
    1be6:	f0 81       	ld	r31, Z
    1be8:	e0 2d       	mov	r30, r0
    1bea:	84 81       	ldd	r24, Z+4	; 0x04
    1bec:	c8 17       	cp	r28, r24
    1bee:	78 f3       	brcs	.-34     	; 0x1bce <udc_process_setup+0x542>
    1bf0:	d0 c0       	rjmp	.+416    	; 0x1d92 <udc_process_setup+0x706>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	e1 f4       	brne	.+56     	; 0x1c2e <udc_process_setup+0x5a2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1bf6:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1bfa:	9b 30       	cpi	r25, 0x0B	; 11
    1bfc:	c1 f4       	brne	.+48     	; 0x1c2e <udc_process_setup+0x5a2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1bfe:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1c02:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1c06:	89 2b       	or	r24, r25
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <udc_process_setup+0x580>
    1c0a:	46 c0       	rjmp	.+140    	; 0x1c98 <udc_process_setup+0x60c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c0c:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    1c10:	88 23       	and	r24, r24
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <udc_process_setup+0x58a>
    1c14:	41 c0       	rjmp	.+130    	; 0x1c98 <udc_process_setup+0x60c>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c16:	ee e5       	ldi	r30, 0x5E	; 94
    1c18:	f4 e2       	ldi	r31, 0x24	; 36
    1c1a:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c1c:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1c1e:	8c 2f       	mov	r24, r28
    1c20:	65 dc       	rcall	.-1846   	; 0x14ec <udc_iface_disable>
    1c22:	88 23       	and	r24, r24
    1c24:	c9 f1       	breq	.+114    	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1c26:	6d 2f       	mov	r22, r29
    1c28:	8c 2f       	mov	r24, r28
    1c2a:	a2 dc       	rcall	.-1724   	; 0x1570 <udc_iface_enable>
    1c2c:	33 c0       	rjmp	.+102    	; 0x1c94 <udc_process_setup+0x608>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c2e:	82 30       	cpi	r24, 0x02	; 2
    1c30:	99 f5       	brne	.+102    	; 0x1c98 <udc_process_setup+0x60c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c32:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	19 f0       	breq	.+6      	; 0x1c40 <udc_process_setup+0x5b4>
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	89 f0       	breq	.+34     	; 0x1c60 <udc_process_setup+0x5d4>
    1c3e:	29 c0       	rjmp	.+82     	; 0x1c92 <udc_process_setup+0x606>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c40:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1c44:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1c48:	89 2b       	or	r24, r25
    1c4a:	31 f5       	brne	.+76     	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c4c:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1c50:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1c54:	89 2b       	or	r24, r25
    1c56:	01 f5       	brne	.+64     	; 0x1c98 <udc_process_setup+0x60c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c58:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1c5c:	df d4       	rcall	.+2494   	; 0x261c <udd_ep_clear_halt>
    1c5e:	1a c0       	rjmp	.+52     	; 0x1c94 <udc_process_setup+0x608>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c60:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1c64:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1c68:	89 2b       	or	r24, r25
    1c6a:	b1 f4       	brne	.+44     	; 0x1c98 <udc_process_setup+0x60c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c6c:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1c70:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1c74:	89 2b       	or	r24, r25
    1c76:	81 f4       	brne	.+32     	; 0x1c98 <udc_process_setup+0x60c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c78:	ce e5       	ldi	r28, 0x5E	; 94
    1c7a:	d4 e2       	ldi	r29, 0x24	; 36
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	bd d5       	rcall	.+2938   	; 0x27fa <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	20 d6       	rcall	.+3136   	; 0x28c4 <udd_ep_set_halt>
    1c84:	07 c0       	rjmp	.+14     	; 0x1c94 <udc_process_setup+0x608>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	05 c0       	rjmp	.+10     	; 0x1c94 <udc_process_setup+0x608>
				break;
			}
		}
#endif
	}
	return false;
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	03 c0       	rjmp	.+6      	; 0x1c94 <udc_process_setup+0x608>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <udc_process_setup+0x608>
				break;
			}
		}
#endif
	}
	return false;
    1c92:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1c94:	81 11       	cpse	r24, r1
    1c96:	7e c0       	rjmp	.+252    	; 0x1d94 <udc_process_setup+0x708>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1c98:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    1c9c:	8f 71       	andi	r24, 0x1F	; 31
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	71 f5       	brne	.+92     	; 0x1cfe <udc_process_setup+0x672>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ca2:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    1ca6:	88 23       	and	r24, r24
    1ca8:	51 f1       	breq	.+84     	; 0x1cfe <udc_process_setup+0x672>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1caa:	00 91 62 24 	lds	r16, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1cae:	10 91 63 24 	lds	r17, 0x2463	; 0x802463 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1cb2:	c0 91 be 20 	lds	r28, 0x20BE	; 0x8020be <udc_ptr_conf>
    1cb6:	d0 91 bf 20 	lds	r29, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    1cba:	e8 81       	ld	r30, Y
    1cbc:	f9 81       	ldd	r31, Y+1	; 0x01
    1cbe:	84 81       	ldd	r24, Z+4	; 0x04
    1cc0:	08 17       	cp	r16, r24
    1cc2:	e8 f4       	brcc	.+58     	; 0x1cfe <udc_process_setup+0x672>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	80 2f       	mov	r24, r16
    1cc8:	d7 db       	rcall	.-2130   	; 0x1478 <udc_update_iface_desc>
    1cca:	88 23       	and	r24, r24
    1ccc:	c1 f0       	breq	.+48     	; 0x1cfe <udc_process_setup+0x672>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1cce:	f8 01       	movw	r30, r16
    1cd0:	ff 27       	eor	r31, r31
    1cd2:	cf 01       	movw	r24, r30
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	ea 81       	ldd	r30, Y+2	; 0x02
    1cda:	fb 81       	ldd	r31, Y+3	; 0x03
    1cdc:	e8 0f       	add	r30, r24
    1cde:	f9 1f       	adc	r31, r25
    1ce0:	c0 81       	ld	r28, Z
    1ce2:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ce4:	ee 81       	ldd	r30, Y+6	; 0x06
    1ce6:	ff 81       	ldd	r31, Y+7	; 0x07
    1ce8:	09 95       	icall
    1cea:	68 2f       	mov	r22, r24
    1cec:	80 2f       	mov	r24, r16
    1cee:	c4 db       	rcall	.-2168   	; 0x1478 <udc_update_iface_desc>
    1cf0:	88 23       	and	r24, r24
    1cf2:	29 f0       	breq	.+10     	; 0x1cfe <udc_process_setup+0x672>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1cf4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cf6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cf8:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1cfa:	81 11       	cpse	r24, r1
    1cfc:	4b c0       	rjmp	.+150    	; 0x1d94 <udc_process_setup+0x708>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1cfe:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    1d02:	8f 71       	andi	r24, 0x1F	; 31
    1d04:	82 30       	cpi	r24, 0x02	; 2
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <udc_process_setup+0x67e>
    1d08:	40 c0       	rjmp	.+128    	; 0x1d8a <udc_process_setup+0x6fe>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d0a:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    1d0e:	88 23       	and	r24, r24
    1d10:	b1 f1       	breq	.+108    	; 0x1d7e <udc_process_setup+0x6f2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d12:	a0 91 be 20 	lds	r26, 0x20BE	; 0x8020be <udc_ptr_conf>
    1d16:	b0 91 bf 20 	lds	r27, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    1d1a:	ed 91       	ld	r30, X+
    1d1c:	fc 91       	ld	r31, X
    1d1e:	11 97       	sbiw	r26, 0x01	; 1
    1d20:	84 81       	ldd	r24, Z+4	; 0x04
    1d22:	88 23       	and	r24, r24
    1d24:	71 f1       	breq	.+92     	; 0x1d82 <udc_process_setup+0x6f6>
    1d26:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d28:	ec 2f       	mov	r30, r28
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	12 96       	adiw	r26, 0x02	; 2
    1d32:	8d 91       	ld	r24, X+
    1d34:	9c 91       	ld	r25, X
    1d36:	13 97       	sbiw	r26, 0x03	; 3
    1d38:	e8 0f       	add	r30, r24
    1d3a:	f9 1f       	adc	r31, r25
    1d3c:	00 81       	ld	r16, Z
    1d3e:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d40:	d8 01       	movw	r26, r16
    1d42:	16 96       	adiw	r26, 0x06	; 6
    1d44:	ed 91       	ld	r30, X+
    1d46:	fc 91       	ld	r31, X
    1d48:	17 97       	sbiw	r26, 0x07	; 7
    1d4a:	09 95       	icall
    1d4c:	68 2f       	mov	r22, r24
    1d4e:	8c 2f       	mov	r24, r28
    1d50:	93 db       	rcall	.-2266   	; 0x1478 <udc_update_iface_desc>
    1d52:	88 23       	and	r24, r24
    1d54:	f9 f0       	breq	.+62     	; 0x1d94 <udc_process_setup+0x708>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1d56:	d8 01       	movw	r26, r16
    1d58:	14 96       	adiw	r26, 0x04	; 4
    1d5a:	ed 91       	ld	r30, X+
    1d5c:	fc 91       	ld	r31, X
    1d5e:	15 97       	sbiw	r26, 0x05	; 5
    1d60:	09 95       	icall
    1d62:	81 11       	cpse	r24, r1
    1d64:	17 c0       	rjmp	.+46     	; 0x1d94 <udc_process_setup+0x708>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1d66:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d68:	a0 91 be 20 	lds	r26, 0x20BE	; 0x8020be <udc_ptr_conf>
    1d6c:	b0 91 bf 20 	lds	r27, 0x20BF	; 0x8020bf <udc_ptr_conf+0x1>
    1d70:	ed 91       	ld	r30, X+
    1d72:	fc 91       	ld	r31, X
    1d74:	11 97       	sbiw	r26, 0x01	; 1
    1d76:	94 81       	ldd	r25, Z+4	; 0x04
    1d78:	c9 17       	cp	r28, r25
    1d7a:	b0 f2       	brcs	.-84     	; 0x1d28 <udc_process_setup+0x69c>
    1d7c:	0b c0       	rjmp	.+22     	; 0x1d94 <udc_process_setup+0x708>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	09 c0       	rjmp	.+18     	; 0x1d94 <udc_process_setup+0x708>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	07 c0       	rjmp	.+14     	; 0x1d94 <udc_process_setup+0x708>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <udc_process_setup+0x708>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <udc_process_setup+0x708>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <udc_process_setup+0x708>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1d9e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1da0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1da2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1da4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1da6:	60 83       	st	Z, r22
	ret                             // Return to caller
    1da8:	08 95       	ret

00001daa <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1daa:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1dae:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1db0:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1db2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1db6:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1db8:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1dbc:	08 95       	ret

00001dbe <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	22 c0       	rjmp	.+68     	; 0x1e06 <udd_sleep_mode+0x48>
    1dc2:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1dc6:	99 23       	and	r25, r25
    1dc8:	d9 f0       	breq	.+54     	; 0x1e00 <udd_sleep_mode+0x42>
    1dca:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <sleepmgr_locks+0x1>
    1dce:	91 11       	cpse	r25, r1
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <udd_sleep_mode+0x16>
    1dd2:	ff cf       	rjmp	.-2      	; 0x1dd2 <udd_sleep_mode+0x14>
    1dd4:	2f b7       	in	r18, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	ea e4       	ldi	r30, 0x4A	; 74
    1dda:	fc e2       	ldi	r31, 0x2C	; 44
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	91 50       	subi	r25, 0x01	; 1
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	2f bf       	out	0x3f, r18	; 63
    1de4:	0d c0       	rjmp	.+26     	; 0x1e00 <udd_sleep_mode+0x42>
    1de6:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <sleepmgr_locks+0x1>
    1dea:	9f 3f       	cpi	r25, 0xFF	; 255
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <udd_sleep_mode+0x32>
    1dee:	ff cf       	rjmp	.-2      	; 0x1dee <udd_sleep_mode+0x30>
    1df0:	2f b7       	in	r18, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	ea e4       	ldi	r30, 0x4A	; 74
    1df6:	fc e2       	ldi	r31, 0x2C	; 44
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	9f 5f       	subi	r25, 0xFF	; 255
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	2f bf       	out	0x3f, r18	; 63
    1e00:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <udd_b_idle>
    1e04:	08 95       	ret
    1e06:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1e0a:	99 23       	and	r25, r25
    1e0c:	61 f3       	breq	.-40     	; 0x1de6 <udd_sleep_mode+0x28>
    1e0e:	f8 cf       	rjmp	.-16     	; 0x1e00 <udd_sleep_mode+0x42>

00001e10 <udd_ctrl_init>:
    1e10:	0f 93       	push	r16
    1e12:	e8 ec       	ldi	r30, 0xC8	; 200
    1e14:	f4 e0       	ldi	r31, 0x04	; 4
    1e16:	80 81       	ld	r24, Z
    1e18:	8f 7d       	andi	r24, 0xDF	; 223
    1e1a:	80 83       	st	Z, r24
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8f 7d       	andi	r24, 0xDF	; 223
    1e20:	80 83       	st	Z, r24
    1e22:	ec e1       	ldi	r30, 0x1C	; 28
    1e24:	f2 e2       	ldi	r31, 0x22	; 34
    1e26:	02 e0       	ldi	r16, 0x02	; 2
    1e28:	05 93       	las	Z, r16
    1e2a:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1e2e:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1e32:	00 e2       	ldi	r16, 0x20	; 32
    1e34:	06 93       	lac	Z, r16
    1e36:	00 e4       	ldi	r16, 0x40	; 64
    1e38:	06 93       	lac	Z, r16
    1e3a:	e4 e1       	ldi	r30, 0x14	; 20
    1e3c:	f2 e2       	ldi	r31, 0x22	; 34
    1e3e:	00 e2       	ldi	r16, 0x20	; 32
    1e40:	06 93       	lac	Z, r16
    1e42:	00 e4       	ldi	r16, 0x40	; 64
    1e44:	06 93       	lac	Z, r16
    1e46:	ee e5       	ldi	r30, 0x5E	; 94
    1e48:	f4 e2       	ldi	r31, 0x24	; 36
    1e4a:	14 86       	std	Z+12, r1	; 0x0c
    1e4c:	15 86       	std	Z+13, r1	; 0x0d
    1e4e:	16 86       	std	Z+14, r1	; 0x0e
    1e50:	17 86       	std	Z+15, r1	; 0x0f
    1e52:	12 86       	std	Z+10, r1	; 0x0a
    1e54:	13 86       	std	Z+11, r1	; 0x0b
    1e56:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ep_control_state>
    1e5a:	0f 91       	pop	r16
    1e5c:	08 95       	ret

00001e5e <udd_ctrl_stall_data>:
    1e5e:	0f 93       	push	r16
    1e60:	85 e0       	ldi	r24, 0x05	; 5
    1e62:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    1e66:	ed e1       	ldi	r30, 0x1D	; 29
    1e68:	f2 e2       	ldi	r31, 0x22	; 34
    1e6a:	04 e0       	ldi	r16, 0x04	; 4
    1e6c:	05 93       	las	Z, r16
    1e6e:	e5 e1       	ldi	r30, 0x15	; 21
    1e70:	f2 e2       	ldi	r31, 0x22	; 34
    1e72:	04 e0       	ldi	r16, 0x04	; 4
    1e74:	05 93       	las	Z, r16
    1e76:	0f 91       	pop	r16
    1e78:	08 95       	ret

00001e7a <udd_ctrl_send_zlp_in>:
    1e7a:	0f 93       	push	r16
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    1e82:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1e86:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1e8a:	ec e1       	ldi	r30, 0x1C	; 28
    1e8c:	f2 e2       	ldi	r31, 0x22	; 34
    1e8e:	02 e0       	ldi	r16, 0x02	; 2
    1e90:	06 93       	lac	Z, r16
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

00001e96 <udd_ctrl_endofrequest>:
    1e96:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <udd_g_ctrlreq+0xc>
    1e9a:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <udd_g_ctrlreq+0xd>
    1e9e:	30 97       	sbiw	r30, 0x00	; 0
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <udd_ctrl_endofrequest+0xe>
    1ea2:	09 95       	icall
    1ea4:	08 95       	ret

00001ea6 <udd_ctrl_in_sent>:
    1ea6:	0f 93       	push	r16
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	19 f4       	brne	.+6      	; 0x1eba <udd_ctrl_in_sent+0x14>
    1eb4:	f0 df       	rcall	.-32     	; 0x1e96 <udd_ctrl_endofrequest>
    1eb6:	ac df       	rcall	.-168    	; 0x1e10 <udd_ctrl_init>
    1eb8:	5e c0       	rjmp	.+188    	; 0x1f76 <udd_ctrl_in_sent+0xd0>
    1eba:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1ebe:	90 91 fe 21 	lds	r25, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1ec2:	c0 91 68 24 	lds	r28, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    1ec6:	d0 91 69 24 	lds	r29, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    1eca:	c8 1b       	sub	r28, r24
    1ecc:	d9 0b       	sbc	r29, r25
    1ece:	71 f5       	brne	.+92     	; 0x1f2c <udd_ctrl_in_sent+0x86>
    1ed0:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    1ed4:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    1ed8:	82 0f       	add	r24, r18
    1eda:	93 1f       	adc	r25, r19
    1edc:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    1ee0:	90 93 00 22 	sts	0x2200, r25	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    1ee4:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1ee8:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1eec:	82 17       	cp	r24, r18
    1eee:	93 07       	cpc	r25, r19
    1ef0:	21 f0       	breq	.+8      	; 0x1efa <udd_ctrl_in_sent+0x54>
    1ef2:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <b_shortpacket.5272>
    1ef6:	88 23       	and	r24, r24
    1ef8:	41 f0       	breq	.+16     	; 0x1f0a <udd_ctrl_in_sent+0x64>
    1efa:	84 e0       	ldi	r24, 0x04	; 4
    1efc:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    1f00:	e4 e1       	ldi	r30, 0x14	; 20
    1f02:	f2 e2       	ldi	r31, 0x22	; 34
    1f04:	02 e0       	ldi	r16, 0x02	; 2
    1f06:	06 93       	lac	Z, r16
    1f08:	36 c0       	rjmp	.+108    	; 0x1f76 <udd_ctrl_in_sent+0xd0>
    1f0a:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <udd_g_ctrlreq+0xe>
    1f0e:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <udd_g_ctrlreq+0xf>
    1f12:	30 97       	sbiw	r30, 0x00	; 0
    1f14:	99 f0       	breq	.+38     	; 0x1f3c <udd_ctrl_in_sent+0x96>
    1f16:	09 95       	icall
    1f18:	88 23       	and	r24, r24
    1f1a:	81 f0       	breq	.+32     	; 0x1f3c <udd_ctrl_in_sent+0x96>
    1f1c:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1f20:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1f24:	c0 91 68 24 	lds	r28, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    1f28:	d0 91 69 24 	lds	r29, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    1f2c:	c0 34       	cpi	r28, 0x40	; 64
    1f2e:	d1 05       	cpc	r29, r1
    1f30:	28 f0       	brcs	.+10     	; 0x1f3c <udd_ctrl_in_sent+0x96>
    1f32:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <b_shortpacket.5272>
    1f36:	c0 e4       	ldi	r28, 0x40	; 64
    1f38:	d0 e0       	ldi	r29, 0x00	; 0
    1f3a:	03 c0       	rjmp	.+6      	; 0x1f42 <udd_ctrl_in_sent+0x9c>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <b_shortpacket.5272>
    1f42:	e4 e0       	ldi	r30, 0x04	; 4
    1f44:	f2 e2       	ldi	r31, 0x22	; 34
    1f46:	c2 8f       	std	Z+26, r28	; 0x1a
    1f48:	d3 8f       	std	Z+27, r29	; 0x1b
    1f4a:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1f4e:	90 91 fe 21 	lds	r25, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1f52:	20 91 66 24 	lds	r18, 0x2466	; 0x802466 <udd_g_ctrlreq+0x8>
    1f56:	30 91 67 24 	lds	r19, 0x2467	; 0x802467 <udd_g_ctrlreq+0x9>
    1f5a:	28 0f       	add	r18, r24
    1f5c:	39 1f       	adc	r19, r25
    1f5e:	24 8f       	std	Z+28, r18	; 0x1c
    1f60:	35 8f       	std	Z+29, r19	; 0x1d
    1f62:	c8 0f       	add	r28, r24
    1f64:	d9 1f       	adc	r29, r25
    1f66:	c0 93 fd 21 	sts	0x21FD, r28	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1f6a:	d0 93 fe 21 	sts	0x21FE, r29	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1f6e:	ec e1       	ldi	r30, 0x1C	; 28
    1f70:	f2 e2       	ldi	r31, 0x22	; 34
    1f72:	02 e0       	ldi	r16, 0x02	; 2
    1f74:	06 93       	lac	Z, r16
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	0f 91       	pop	r16
    1f7c:	08 95       	ret

00001f7e <udd_ep_get_size>:
    1f7e:	fc 01       	movw	r30, r24
    1f80:	81 81       	ldd	r24, Z+1	; 0x01
    1f82:	e8 2f       	mov	r30, r24
    1f84:	e7 70       	andi	r30, 0x07	; 7
    1f86:	8e 2f       	mov	r24, r30
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	31 97       	sbiw	r30, 0x01	; 1
    1f8e:	e7 30       	cpi	r30, 0x07	; 7
    1f90:	f1 05       	cpc	r31, r1
    1f92:	c0 f4       	brcc	.+48     	; 0x1fc4 <udd_ep_get_size+0x46>
    1f94:	ea 5d       	subi	r30, 0xDA	; 218
    1f96:	fe 4f       	sbci	r31, 0xFE	; 254
    1f98:	7a c6       	rjmp	.+3316   	; 0x2c8e <__tablejump2__>
    1f9a:	80 e1       	ldi	r24, 0x10	; 16
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	08 95       	ret
    1fa0:	80 e2       	ldi	r24, 0x20	; 32
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	08 95       	ret
    1fa6:	80 e4       	ldi	r24, 0x40	; 64
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	08 95       	ret
    1fac:	80 e8       	ldi	r24, 0x80	; 128
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	08 95       	ret
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	91 e0       	ldi	r25, 0x01	; 1
    1fb6:	08 95       	ret
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	92 e0       	ldi	r25, 0x02	; 2
    1fbc:	08 95       	ret
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	93 e0       	ldi	r25, 0x03	; 3
    1fc2:	08 95       	ret
    1fc4:	88 e0       	ldi	r24, 0x08	; 8
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	08 95       	ret

00001fca <udd_ep_get_job>:
    1fca:	28 2f       	mov	r18, r24
    1fcc:	2f 70       	andi	r18, 0x0F	; 15
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	22 0f       	add	r18, r18
    1fd2:	33 1f       	adc	r19, r19
    1fd4:	08 2e       	mov	r0, r24
    1fd6:	00 0c       	add	r0, r0
    1fd8:	99 0b       	sbc	r25, r25
    1fda:	88 27       	eor	r24, r24
    1fdc:	99 0f       	add	r25, r25
    1fde:	88 1f       	adc	r24, r24
    1fe0:	99 27       	eor	r25, r25
    1fe2:	82 0f       	add	r24, r18
    1fe4:	93 1f       	adc	r25, r19
    1fe6:	02 97       	sbiw	r24, 0x02	; 2
    1fe8:	9c 01       	movw	r18, r24
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	22 0f       	add	r18, r18
    1ff0:	33 1f       	adc	r19, r19
    1ff2:	22 0f       	add	r18, r18
    1ff4:	33 1f       	adc	r19, r19
    1ff6:	82 0f       	add	r24, r18
    1ff8:	93 1f       	adc	r25, r19
    1ffa:	89 57       	subi	r24, 0x79	; 121
    1ffc:	9e 4d       	sbci	r25, 0xDE	; 222
    1ffe:	08 95       	ret

00002000 <udd_ctrl_interrupt_tc_setup>:
    2000:	0f 93       	push	r16
    2002:	cf 93       	push	r28
    2004:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2008:	80 ff       	sbrs	r24, 0
    200a:	62 c0       	rjmp	.+196    	; 0x20d0 <udd_ctrl_interrupt_tc_setup+0xd0>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2012:	e4 e1       	ldi	r30, 0x14	; 20
    2014:	f2 e2       	ldi	r31, 0x22	; 34
    2016:	00 e8       	ldi	r16, 0x80	; 128
    2018:	06 93       	lac	Z, r16
    201a:	ec e1       	ldi	r30, 0x1C	; 28
    201c:	f2 e2       	ldi	r31, 0x22	; 34
    201e:	00 e8       	ldi	r16, 0x80	; 128
    2020:	06 93       	lac	Z, r16
    2022:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2026:	e4 e1       	ldi	r30, 0x14	; 20
    2028:	f2 e2       	ldi	r31, 0x22	; 34
    202a:	00 e1       	ldi	r16, 0x10	; 16
    202c:	06 93       	lac	Z, r16
    202e:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    2032:	88 23       	and	r24, r24
    2034:	29 f0       	breq	.+10     	; 0x2040 <udd_ctrl_interrupt_tc_setup+0x40>
    2036:	83 50       	subi	r24, 0x03	; 3
    2038:	82 30       	cpi	r24, 0x02	; 2
    203a:	08 f4       	brcc	.+2      	; 0x203e <udd_ctrl_interrupt_tc_setup+0x3e>
    203c:	2c df       	rcall	.-424    	; 0x1e96 <udd_ctrl_endofrequest>
    203e:	e8 de       	rcall	.-560    	; 0x1e10 <udd_ctrl_init>
    2040:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udd_sram+0x12>
    2044:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <udd_sram+0x13>
    2048:	08 97       	sbiw	r24, 0x08	; 8
    204a:	09 f0       	breq	.+2      	; 0x204e <udd_ctrl_interrupt_tc_setup+0x4e>
    204c:	43 c0       	rjmp	.+134    	; 0x20d4 <udd_ctrl_interrupt_tc_setup+0xd4>
    204e:	88 e0       	ldi	r24, 0x08	; 8
    2050:	ed eb       	ldi	r30, 0xBD	; 189
    2052:	f1 e2       	ldi	r31, 0x21	; 33
    2054:	ae e5       	ldi	r26, 0x5E	; 94
    2056:	b4 e2       	ldi	r27, 0x24	; 36
    2058:	01 90       	ld	r0, Z+
    205a:	0d 92       	st	X+, r0
    205c:	8a 95       	dec	r24
    205e:	e1 f7       	brne	.-8      	; 0x2058 <udd_ctrl_interrupt_tc_setup+0x58>
    2060:	e8 ec       	ldi	r30, 0xC8	; 200
    2062:	f4 e0       	ldi	r31, 0x04	; 4
    2064:	80 81       	ld	r24, Z
    2066:	80 62       	ori	r24, 0x20	; 32
    2068:	80 83       	st	Z, r24
    206a:	80 81       	ld	r24, Z
    206c:	80 62       	ori	r24, 0x20	; 32
    206e:	80 83       	st	Z, r24
    2070:	0d db       	rcall	.-2534   	; 0x168c <udc_process_setup>
    2072:	c8 2f       	mov	r28, r24
    2074:	81 11       	cpse	r24, r1
    2076:	03 c0       	rjmp	.+6      	; 0x207e <udd_ctrl_interrupt_tc_setup+0x7e>
    2078:	f2 de       	rcall	.-540    	; 0x1e5e <udd_ctrl_stall_data>
    207a:	c1 e0       	ldi	r28, 0x01	; 1
    207c:	2c c0       	rjmp	.+88     	; 0x20d6 <udd_ctrl_interrupt_tc_setup+0xd6>
    207e:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    2082:	88 23       	and	r24, r24
    2084:	6c f4       	brge	.+26     	; 0x20a0 <udd_ctrl_interrupt_tc_setup+0xa0>
    2086:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    208a:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    208e:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_payload_nb_trans>
    2092:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    2096:	82 e0       	ldi	r24, 0x02	; 2
    2098:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    209c:	04 df       	rcall	.-504    	; 0x1ea6 <udd_ctrl_in_sent>
    209e:	1b c0       	rjmp	.+54     	; 0x20d6 <udd_ctrl_interrupt_tc_setup+0xd6>
    20a0:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    20a4:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    20a8:	89 2b       	or	r24, r25
    20aa:	11 f4       	brne	.+4      	; 0x20b0 <udd_ctrl_interrupt_tc_setup+0xb0>
    20ac:	e6 de       	rcall	.-564    	; 0x1e7a <udd_ctrl_send_zlp_in>
    20ae:	13 c0       	rjmp	.+38     	; 0x20d6 <udd_ctrl_interrupt_tc_setup+0xd6>
    20b0:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    20b4:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    20b8:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_payload_nb_trans>
    20bc:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    20c6:	e4 e1       	ldi	r30, 0x14	; 20
    20c8:	f2 e2       	ldi	r31, 0x22	; 34
    20ca:	02 e0       	ldi	r16, 0x02	; 2
    20cc:	06 93       	lac	Z, r16
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <udd_ctrl_interrupt_tc_setup+0xd6>
    20d0:	c0 e0       	ldi	r28, 0x00	; 0
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <udd_ctrl_interrupt_tc_setup+0xd6>
    20d4:	c1 e0       	ldi	r28, 0x01	; 1
    20d6:	8c 2f       	mov	r24, r28
    20d8:	cf 91       	pop	r28
    20da:	0f 91       	pop	r16
    20dc:	08 95       	ret

000020de <udd_ep_trans_complet>:
    20de:	8f 92       	push	r8
    20e0:	9f 92       	push	r9
    20e2:	af 92       	push	r10
    20e4:	bf 92       	push	r11
    20e6:	df 92       	push	r13
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	d8 2e       	mov	r13, r24
    20f6:	69 df       	rcall	.-302    	; 0x1fca <udd_ep_get_job>
    20f8:	8c 01       	movw	r16, r24
    20fa:	bd 2c       	mov	r11, r13
    20fc:	bb 1c       	adc	r11, r11
    20fe:	bb 24       	eor	r11, r11
    2100:	bb 1c       	adc	r11, r11
    2102:	cd 2d       	mov	r28, r13
    2104:	cf 70       	andi	r28, 0x0F	; 15
    2106:	d0 e0       	ldi	r29, 0x00	; 0
    2108:	cc 0f       	add	r28, r28
    210a:	dd 1f       	adc	r29, r29
    210c:	cb 0d       	add	r28, r11
    210e:	d1 1d       	adc	r29, r1
    2110:	ce 01       	movw	r24, r28
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	9c 01       	movw	r18, r24
    2120:	2c 5e       	subi	r18, 0xEC	; 236
    2122:	3d 4d       	sbci	r19, 0xDD	; 221
    2124:	79 01       	movw	r14, r18
    2126:	c9 01       	movw	r24, r18
    2128:	2a df       	rcall	.-428    	; 0x1f7e <udd_ep_get_size>
    212a:	4c 01       	movw	r8, r24
    212c:	bb 20       	and	r11, r11
    212e:	09 f4       	brne	.+2      	; 0x2132 <udd_ep_trans_complet+0x54>
    2130:	70 c0       	rjmp	.+224    	; 0x2212 <udd_ep_trans_complet+0x134>
    2132:	fe 01       	movw	r30, r28
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	ec 5f       	subi	r30, 0xFC	; 252
    2142:	fd 4d       	sbci	r31, 0xDD	; 221
    2144:	26 89       	ldd	r18, Z+22	; 0x16
    2146:	37 89       	ldd	r19, Z+23	; 0x17
    2148:	d8 01       	movw	r26, r16
    214a:	15 96       	adiw	r26, 0x05	; 5
    214c:	8d 91       	ld	r24, X+
    214e:	9c 91       	ld	r25, X
    2150:	16 97       	sbiw	r26, 0x06	; 6
    2152:	82 0f       	add	r24, r18
    2154:	93 1f       	adc	r25, r19
    2156:	15 96       	adiw	r26, 0x05	; 5
    2158:	8d 93       	st	X+, r24
    215a:	9c 93       	st	X, r25
    215c:	16 97       	sbiw	r26, 0x06	; 6
    215e:	13 96       	adiw	r26, 0x03	; 3
    2160:	2d 91       	ld	r18, X+
    2162:	3c 91       	ld	r19, X
    2164:	14 97       	sbiw	r26, 0x04	; 4
    2166:	82 17       	cp	r24, r18
    2168:	93 07       	cpc	r25, r19
    216a:	09 f4       	brne	.+2      	; 0x216e <udd_ep_trans_complet+0x90>
    216c:	3c c0       	rjmp	.+120    	; 0x21e6 <udd_ep_trans_complet+0x108>
    216e:	28 1b       	sub	r18, r24
    2170:	39 0b       	sbc	r19, r25
    2172:	21 15       	cp	r18, r1
    2174:	b4 e0       	ldi	r27, 0x04	; 4
    2176:	3b 07       	cpc	r19, r27
    2178:	38 f0       	brcs	.+14     	; 0x2188 <udd_ep_trans_complet+0xaa>
    217a:	2f ef       	ldi	r18, 0xFF	; 255
    217c:	33 e0       	ldi	r19, 0x03	; 3
    217e:	c9 01       	movw	r24, r18
    2180:	b4 01       	movw	r22, r8
    2182:	71 d5       	rcall	.+2786   	; 0x2c66 <__udivmodhi4>
    2184:	28 1b       	sub	r18, r24
    2186:	39 0b       	sbc	r19, r25
    2188:	f8 01       	movw	r30, r16
    218a:	80 81       	ld	r24, Z
    218c:	81 ff       	sbrs	r24, 1
    218e:	09 c0       	rjmp	.+18     	; 0x21a2 <udd_ep_trans_complet+0xc4>
    2190:	c9 01       	movw	r24, r18
    2192:	b4 01       	movw	r22, r8
    2194:	68 d5       	rcall	.+2768   	; 0x2c66 <__udivmodhi4>
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	89 2b       	or	r24, r25
    219a:	09 f0       	breq	.+2      	; 0x219e <udd_ep_trans_complet+0xc0>
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	84 2f       	mov	r24, r20
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <udd_ep_trans_complet+0xc6>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	d8 01       	movw	r26, r16
    21a6:	9c 91       	ld	r25, X
    21a8:	80 fb       	bst	r24, 0
    21aa:	91 f9       	bld	r25, 1
    21ac:	9c 93       	st	X, r25
    21ae:	cc 0f       	add	r28, r28
    21b0:	dd 1f       	adc	r29, r29
    21b2:	cc 0f       	add	r28, r28
    21b4:	dd 1f       	adc	r29, r29
    21b6:	cc 0f       	add	r28, r28
    21b8:	dd 1f       	adc	r29, r29
    21ba:	cc 5f       	subi	r28, 0xFC	; 252
    21bc:	dd 4d       	sbci	r29, 0xDD	; 221
    21be:	1e 8a       	std	Y+22, r1	; 0x16
    21c0:	1f 8a       	std	Y+23, r1	; 0x17
    21c2:	2a 8b       	std	Y+18, r18	; 0x12
    21c4:	3b 8b       	std	Y+19, r19	; 0x13
    21c6:	11 96       	adiw	r26, 0x01	; 1
    21c8:	2d 91       	ld	r18, X+
    21ca:	3c 91       	ld	r19, X
    21cc:	12 97       	sbiw	r26, 0x02	; 2
    21ce:	15 96       	adiw	r26, 0x05	; 5
    21d0:	8d 91       	ld	r24, X+
    21d2:	9c 91       	ld	r25, X
    21d4:	16 97       	sbiw	r26, 0x06	; 6
    21d6:	82 0f       	add	r24, r18
    21d8:	93 1f       	adc	r25, r19
    21da:	8c 8b       	std	Y+20, r24	; 0x14
    21dc:	9d 8b       	std	Y+21, r25	; 0x15
    21de:	f7 01       	movw	r30, r14
    21e0:	02 e0       	ldi	r16, 0x02	; 2
    21e2:	06 93       	lac	Z, r16
    21e4:	ca c0       	rjmp	.+404    	; 0x237a <udd_ep_trans_complet+0x29c>
    21e6:	d8 01       	movw	r26, r16
    21e8:	8c 91       	ld	r24, X
    21ea:	81 ff       	sbrs	r24, 1
    21ec:	b3 c0       	rjmp	.+358    	; 0x2354 <udd_ep_trans_complet+0x276>
    21ee:	8d 7f       	andi	r24, 0xFD	; 253
    21f0:	8c 93       	st	X, r24
    21f2:	cc 0f       	add	r28, r28
    21f4:	dd 1f       	adc	r29, r29
    21f6:	cc 0f       	add	r28, r28
    21f8:	dd 1f       	adc	r29, r29
    21fa:	cc 0f       	add	r28, r28
    21fc:	dd 1f       	adc	r29, r29
    21fe:	cc 5f       	subi	r28, 0xFC	; 252
    2200:	dd 4d       	sbci	r29, 0xDD	; 221
    2202:	1e 8a       	std	Y+22, r1	; 0x16
    2204:	1f 8a       	std	Y+23, r1	; 0x17
    2206:	1a 8a       	std	Y+18, r1	; 0x12
    2208:	1b 8a       	std	Y+19, r1	; 0x13
    220a:	f7 01       	movw	r30, r14
    220c:	02 e0       	ldi	r16, 0x02	; 2
    220e:	06 93       	lac	Z, r16
    2210:	b4 c0       	rjmp	.+360    	; 0x237a <udd_ep_trans_complet+0x29c>
    2212:	fe 01       	movw	r30, r28
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	ee 0f       	add	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	ec 5f       	subi	r30, 0xFC	; 252
    2222:	fd 4d       	sbci	r31, 0xDD	; 221
    2224:	a2 88       	ldd	r10, Z+18	; 0x12
    2226:	b3 88       	ldd	r11, Z+19	; 0x13
    2228:	d8 01       	movw	r26, r16
    222a:	8c 91       	ld	r24, X
    222c:	82 ff       	sbrs	r24, 2
    222e:	19 c0       	rjmp	.+50     	; 0x2262 <udd_ep_trans_complet+0x184>
    2230:	11 96       	adiw	r26, 0x01	; 1
    2232:	ed 91       	ld	r30, X+
    2234:	fc 91       	ld	r31, X
    2236:	12 97       	sbiw	r26, 0x02	; 2
    2238:	15 96       	adiw	r26, 0x05	; 5
    223a:	2d 91       	ld	r18, X+
    223c:	3c 91       	ld	r19, X
    223e:	16 97       	sbiw	r26, 0x06	; 6
    2240:	13 96       	adiw	r26, 0x03	; 3
    2242:	8d 91       	ld	r24, X+
    2244:	9c 91       	ld	r25, X
    2246:	14 97       	sbiw	r26, 0x04	; 4
    2248:	b4 01       	movw	r22, r8
    224a:	0d d5       	rcall	.+2586   	; 0x2c66 <__udivmodhi4>
    224c:	b0 e4       	ldi	r27, 0x40	; 64
    224e:	db 9e       	mul	r13, r27
    2250:	b0 01       	movw	r22, r0
    2252:	11 24       	eor	r1, r1
    2254:	69 57       	subi	r22, 0x79	; 121
    2256:	7f 4d       	sbci	r23, 0xDF	; 223
    2258:	ac 01       	movw	r20, r24
    225a:	cf 01       	movw	r24, r30
    225c:	82 0f       	add	r24, r18
    225e:	93 1f       	adc	r25, r19
    2260:	1c d5       	rcall	.+2616   	; 0x2c9a <memcpy>
    2262:	f8 01       	movw	r30, r16
    2264:	25 81       	ldd	r18, Z+5	; 0x05
    2266:	36 81       	ldd	r19, Z+6	; 0x06
    2268:	2a 0d       	add	r18, r10
    226a:	3b 1d       	adc	r19, r11
    226c:	25 83       	std	Z+5, r18	; 0x05
    226e:	36 83       	std	Z+6, r19	; 0x06
    2270:	83 81       	ldd	r24, Z+3	; 0x03
    2272:	94 81       	ldd	r25, Z+4	; 0x04
    2274:	82 17       	cp	r24, r18
    2276:	93 07       	cpc	r25, r19
    2278:	68 f4       	brcc	.+26     	; 0x2294 <udd_ep_trans_complet+0x1b6>
    227a:	85 83       	std	Z+5, r24	; 0x05
    227c:	96 83       	std	Z+6, r25	; 0x06
    227e:	cc 0f       	add	r28, r28
    2280:	dd 1f       	adc	r29, r29
    2282:	cc 0f       	add	r28, r28
    2284:	dd 1f       	adc	r29, r29
    2286:	cc 0f       	add	r28, r28
    2288:	dd 1f       	adc	r29, r29
    228a:	cc 5f       	subi	r28, 0xFC	; 252
    228c:	dd 4d       	sbci	r29, 0xDD	; 221
    228e:	8e 89       	ldd	r24, Y+22	; 0x16
    2290:	9f 89       	ldd	r25, Y+23	; 0x17
    2292:	60 c0       	rjmp	.+192    	; 0x2354 <udd_ep_trans_complet+0x276>
    2294:	fe 01       	movw	r30, r28
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	ec 5f       	subi	r30, 0xFC	; 252
    22a4:	fd 4d       	sbci	r31, 0xDD	; 221
    22a6:	46 89       	ldd	r20, Z+22	; 0x16
    22a8:	57 89       	ldd	r21, Z+23	; 0x17
    22aa:	4a 15       	cp	r20, r10
    22ac:	5b 05       	cpc	r21, r11
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <udd_ep_trans_complet+0x1d4>
    22b0:	51 c0       	rjmp	.+162    	; 0x2354 <udd_ep_trans_complet+0x276>
    22b2:	28 17       	cp	r18, r24
    22b4:	39 07       	cpc	r19, r25
    22b6:	09 f4       	brne	.+2      	; 0x22ba <udd_ep_trans_complet+0x1dc>
    22b8:	4d c0       	rjmp	.+154    	; 0x2354 <udd_ep_trans_complet+0x276>
    22ba:	ac 01       	movw	r20, r24
    22bc:	42 1b       	sub	r20, r18
    22be:	53 0b       	sbc	r21, r19
    22c0:	9a 01       	movw	r18, r20
    22c2:	21 15       	cp	r18, r1
    22c4:	54 e0       	ldi	r21, 0x04	; 4
    22c6:	35 07       	cpc	r19, r21
    22c8:	50 f0       	brcs	.+20     	; 0x22de <udd_ep_trans_complet+0x200>
    22ca:	2f ef       	ldi	r18, 0xFF	; 255
    22cc:	33 e0       	ldi	r19, 0x03	; 3
    22ce:	c9 01       	movw	r24, r18
    22d0:	b4 01       	movw	r22, r8
    22d2:	c9 d4       	rcall	.+2450   	; 0x2c66 <__udivmodhi4>
    22d4:	d9 01       	movw	r26, r18
    22d6:	a8 1b       	sub	r26, r24
    22d8:	b9 0b       	sbc	r27, r25
    22da:	cd 01       	movw	r24, r26
    22dc:	07 c0       	rjmp	.+14     	; 0x22ec <udd_ep_trans_complet+0x20e>
    22de:	c9 01       	movw	r24, r18
    22e0:	b4 01       	movw	r22, r8
    22e2:	c1 d4       	rcall	.+2434   	; 0x2c66 <__udivmodhi4>
    22e4:	f9 01       	movw	r30, r18
    22e6:	e8 1b       	sub	r30, r24
    22e8:	f9 0b       	sbc	r31, r25
    22ea:	cf 01       	movw	r24, r30
    22ec:	fe 01       	movw	r30, r28
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 1f       	adc	r31, r31
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	ee 0f       	add	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	ec 5f       	subi	r30, 0xFC	; 252
    22fc:	fd 4d       	sbci	r31, 0xDD	; 221
    22fe:	12 8a       	std	Z+18, r1	; 0x12
    2300:	13 8a       	std	Z+19, r1	; 0x13
    2302:	88 15       	cp	r24, r8
    2304:	99 05       	cpc	r25, r9
    2306:	78 f4       	brcc	.+30     	; 0x2326 <udd_ep_trans_complet+0x248>
    2308:	d8 01       	movw	r26, r16
    230a:	8c 91       	ld	r24, X
    230c:	84 60       	ori	r24, 0x04	; 4
    230e:	8c 93       	st	X, r24
    2310:	b0 e4       	ldi	r27, 0x40	; 64
    2312:	db 9e       	mul	r13, r27
    2314:	c0 01       	movw	r24, r0
    2316:	11 24       	eor	r1, r1
    2318:	89 57       	subi	r24, 0x79	; 121
    231a:	9f 4d       	sbci	r25, 0xDF	; 223
    231c:	84 8b       	std	Z+20, r24	; 0x14
    231e:	95 8b       	std	Z+21, r25	; 0x15
    2320:	86 8a       	std	Z+22, r8	; 0x16
    2322:	97 8a       	std	Z+23, r9	; 0x17
    2324:	13 c0       	rjmp	.+38     	; 0x234c <udd_ep_trans_complet+0x26e>
    2326:	f8 01       	movw	r30, r16
    2328:	41 81       	ldd	r20, Z+1	; 0x01
    232a:	52 81       	ldd	r21, Z+2	; 0x02
    232c:	25 81       	ldd	r18, Z+5	; 0x05
    232e:	36 81       	ldd	r19, Z+6	; 0x06
    2330:	24 0f       	add	r18, r20
    2332:	35 1f       	adc	r19, r21
    2334:	cc 0f       	add	r28, r28
    2336:	dd 1f       	adc	r29, r29
    2338:	cc 0f       	add	r28, r28
    233a:	dd 1f       	adc	r29, r29
    233c:	cc 0f       	add	r28, r28
    233e:	dd 1f       	adc	r29, r29
    2340:	cc 5f       	subi	r28, 0xFC	; 252
    2342:	dd 4d       	sbci	r29, 0xDD	; 221
    2344:	2c 8b       	std	Y+20, r18	; 0x14
    2346:	3d 8b       	std	Y+21, r19	; 0x15
    2348:	8e 8b       	std	Y+22, r24	; 0x16
    234a:	9f 8b       	std	Y+23, r25	; 0x17
    234c:	f7 01       	movw	r30, r14
    234e:	02 e0       	ldi	r16, 0x02	; 2
    2350:	06 93       	lac	Z, r16
    2352:	13 c0       	rjmp	.+38     	; 0x237a <udd_ep_trans_complet+0x29c>
    2354:	d8 01       	movw	r26, r16
    2356:	8c 91       	ld	r24, X
    2358:	80 ff       	sbrs	r24, 0
    235a:	0f c0       	rjmp	.+30     	; 0x237a <udd_ep_trans_complet+0x29c>
    235c:	8e 7f       	andi	r24, 0xFE	; 254
    235e:	8c 93       	st	X, r24
    2360:	17 96       	adiw	r26, 0x07	; 7
    2362:	ed 91       	ld	r30, X+
    2364:	fc 91       	ld	r31, X
    2366:	18 97       	sbiw	r26, 0x08	; 8
    2368:	30 97       	sbiw	r30, 0x00	; 0
    236a:	39 f0       	breq	.+14     	; 0x237a <udd_ep_trans_complet+0x29c>
    236c:	15 96       	adiw	r26, 0x05	; 5
    236e:	6d 91       	ld	r22, X+
    2370:	7c 91       	ld	r23, X
    2372:	16 97       	sbiw	r26, 0x06	; 6
    2374:	4d 2d       	mov	r20, r13
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	09 95       	icall
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	ff 90       	pop	r15
    2384:	ef 90       	pop	r14
    2386:	df 90       	pop	r13
    2388:	bf 90       	pop	r11
    238a:	af 90       	pop	r10
    238c:	9f 90       	pop	r9
    238e:	8f 90       	pop	r8
    2390:	08 95       	ret

00002392 <udd_attach>:
    2392:	cf 93       	push	r28
    2394:	cf b7       	in	r28, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	11 dd       	rcall	.-1502   	; 0x1dbe <udd_sleep_mode>
    239c:	ea ec       	ldi	r30, 0xCA	; 202
    239e:	f4 e0       	ldi	r31, 0x04	; 4
    23a0:	80 e4       	ldi	r24, 0x40	; 64
    23a2:	80 83       	st	Z, r24
    23a4:	80 e2       	ldi	r24, 0x20	; 32
    23a6:	80 83       	st	Z, r24
    23a8:	e1 ec       	ldi	r30, 0xC1	; 193
    23aa:	f4 e0       	ldi	r31, 0x04	; 4
    23ac:	80 81       	ld	r24, Z
    23ae:	81 60       	ori	r24, 0x01	; 1
    23b0:	80 83       	st	Z, r24
    23b2:	a9 ec       	ldi	r26, 0xC9	; 201
    23b4:	b4 e0       	ldi	r27, 0x04	; 4
    23b6:	8c 91       	ld	r24, X
    23b8:	82 60       	ori	r24, 0x02	; 2
    23ba:	8c 93       	st	X, r24
    23bc:	e8 ec       	ldi	r30, 0xC8	; 200
    23be:	f4 e0       	ldi	r31, 0x04	; 4
    23c0:	80 81       	ld	r24, Z
    23c2:	80 64       	ori	r24, 0x40	; 64
    23c4:	80 83       	st	Z, r24
    23c6:	8c 91       	ld	r24, X
    23c8:	81 60       	ori	r24, 0x01	; 1
    23ca:	8c 93       	st	X, r24
    23cc:	80 81       	ld	r24, Z
    23ce:	80 68       	ori	r24, 0x80	; 128
    23d0:	80 83       	st	Z, r24
    23d2:	cf bf       	out	0x3f, r28	; 63
    23d4:	cf 91       	pop	r28
    23d6:	08 95       	ret

000023d8 <udd_enable>:
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	c0 e6       	ldi	r28, 0x60	; 96
    23de:	d0 e0       	ldi	r29, 0x00	; 0
    23e0:	18 82       	st	Y, r1
    23e2:	80 e3       	ldi	r24, 0x30	; 48
    23e4:	0e 94 6f 09 	call	0x12de	; 0x12de <sysclk_enable_usb>
    23e8:	e0 ec       	ldi	r30, 0xC0	; 192
    23ea:	f4 e0       	ldi	r31, 0x04	; 4
    23ec:	80 81       	ld	r24, Z
    23ee:	80 64       	ori	r24, 0x40	; 64
    23f0:	80 83       	st	Z, r24
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	88 83       	st	Y, r24
    23f6:	cf b7       	in	r28, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	fc 01       	movw	r30, r24
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	ec 5f       	subi	r30, 0xFC	; 252
    240e:	fd 4d       	sbci	r31, 0xDD	; 221
    2410:	11 8a       	std	Z+17, r1	; 0x11
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	88 30       	cpi	r24, 0x08	; 8
    2416:	91 05       	cpc	r25, r1
    2418:	91 f7       	brne	.-28     	; 0x23fe <udd_enable+0x26>
    241a:	e7 e8       	ldi	r30, 0x87	; 135
    241c:	f1 e2       	ldi	r31, 0x21	; 33
    241e:	80 81       	ld	r24, Z
    2420:	8e 7f       	andi	r24, 0xFE	; 254
    2422:	80 83       	st	Z, r24
    2424:	e0 e9       	ldi	r30, 0x90	; 144
    2426:	f1 e2       	ldi	r31, 0x21	; 33
    2428:	80 81       	ld	r24, Z
    242a:	8e 7f       	andi	r24, 0xFE	; 254
    242c:	80 83       	st	Z, r24
    242e:	e9 e9       	ldi	r30, 0x99	; 153
    2430:	f1 e2       	ldi	r31, 0x21	; 33
    2432:	80 81       	ld	r24, Z
    2434:	8e 7f       	andi	r24, 0xFE	; 254
    2436:	80 83       	st	Z, r24
    2438:	e2 ea       	ldi	r30, 0xA2	; 162
    243a:	f1 e2       	ldi	r31, 0x21	; 33
    243c:	80 81       	ld	r24, Z
    243e:	8e 7f       	andi	r24, 0xFE	; 254
    2440:	80 83       	st	Z, r24
    2442:	eb ea       	ldi	r30, 0xAB	; 171
    2444:	f1 e2       	ldi	r31, 0x21	; 33
    2446:	80 81       	ld	r24, Z
    2448:	8e 7f       	andi	r24, 0xFE	; 254
    244a:	80 83       	st	Z, r24
    244c:	e4 eb       	ldi	r30, 0xB4	; 180
    244e:	f1 e2       	ldi	r31, 0x21	; 33
    2450:	80 81       	ld	r24, Z
    2452:	8e 7f       	andi	r24, 0xFE	; 254
    2454:	80 83       	st	Z, r24
    2456:	6a e1       	ldi	r22, 0x1A	; 26
    2458:	70 e0       	ldi	r23, 0x00	; 0
    245a:	82 e0       	ldi	r24, 0x02	; 2
    245c:	a6 dc       	rcall	.-1716   	; 0x1daa <nvm_read_byte>
    245e:	8f 3f       	cpi	r24, 0xFF	; 255
    2460:	19 f0       	breq	.+6      	; 0x2468 <udd_enable+0x90>
    2462:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2466:	03 c0       	rjmp	.+6      	; 0x246e <udd_enable+0x96>
    2468:	8f e1       	ldi	r24, 0x1F	; 31
    246a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    246e:	6b e1       	ldi	r22, 0x1B	; 27
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	9a dc       	rcall	.-1740   	; 0x1daa <nvm_read_byte>
    2476:	8f 3f       	cpi	r24, 0xFF	; 255
    2478:	19 f0       	breq	.+6      	; 0x2480 <udd_enable+0xa8>
    247a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    247e:	03 c0       	rjmp	.+6      	; 0x2486 <udd_enable+0xae>
    2480:	8f e1       	ldi	r24, 0x1F	; 31
    2482:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2486:	e0 ec       	ldi	r30, 0xC0	; 192
    2488:	f4 e0       	ldi	r31, 0x04	; 4
    248a:	80 81       	ld	r24, Z
    248c:	83 60       	ori	r24, 0x03	; 3
    248e:	80 83       	st	Z, r24
    2490:	80 81       	ld	r24, Z
    2492:	80 68       	ori	r24, 0x80	; 128
    2494:	80 83       	st	Z, r24
    2496:	80 81       	ld	r24, Z
    2498:	80 61       	ori	r24, 0x10	; 16
    249a:	80 83       	st	Z, r24
    249c:	84 e1       	ldi	r24, 0x14	; 20
    249e:	92 e2       	ldi	r25, 0x22	; 34
    24a0:	86 83       	std	Z+6, r24	; 0x06
    24a2:	97 83       	std	Z+7, r25	; 0x07
    24a4:	80 81       	ld	r24, Z
    24a6:	80 62       	ori	r24, 0x20	; 32
    24a8:	80 83       	st	Z, r24
    24aa:	8f ef       	ldi	r24, 0xFF	; 255
    24ac:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    24b0:	e8 ec       	ldi	r30, 0xC8	; 200
    24b2:	f4 e0       	ldi	r31, 0x04	; 4
    24b4:	80 81       	ld	r24, Z
    24b6:	82 60       	ori	r24, 0x02	; 2
    24b8:	80 83       	st	Z, r24
    24ba:	10 92 58 22 	sts	0x2258, r1	; 0x802258 <udd_b_idle>
    24be:	80 91 4f 2c 	lds	r24, 0x2C4F	; 0x802c4f <sleepmgr_locks+0x5>
    24c2:	8f 3f       	cpi	r24, 0xFF	; 255
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <udd_enable+0xf0>
    24c6:	ff cf       	rjmp	.-2      	; 0x24c6 <udd_enable+0xee>
    24c8:	9f b7       	in	r25, 0x3f	; 63
    24ca:	f8 94       	cli
    24cc:	ea e4       	ldi	r30, 0x4A	; 74
    24ce:	fc e2       	ldi	r31, 0x2C	; 44
    24d0:	85 81       	ldd	r24, Z+5	; 0x05
    24d2:	8f 5f       	subi	r24, 0xFF	; 255
    24d4:	85 83       	std	Z+5, r24	; 0x05
    24d6:	9f bf       	out	0x3f, r25	; 63
    24d8:	5c df       	rcall	.-328    	; 0x2392 <udd_attach>
    24da:	cf bf       	out	0x3f, r28	; 63
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	08 95       	ret

000024e2 <udd_set_address>:
    24e2:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    24e6:	08 95       	ret

000024e8 <udd_getaddress>:
    24e8:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    24ec:	08 95       	ret

000024ee <udd_set_setup_payload>:
    24ee:	ee e5       	ldi	r30, 0x5E	; 94
    24f0:	f4 e2       	ldi	r31, 0x24	; 36
    24f2:	80 87       	std	Z+8, r24	; 0x08
    24f4:	91 87       	std	Z+9, r25	; 0x09
    24f6:	62 87       	std	Z+10, r22	; 0x0a
    24f8:	73 87       	std	Z+11, r23	; 0x0b
    24fa:	08 95       	ret

000024fc <udd_ep_alloc>:
    24fc:	28 2f       	mov	r18, r24
    24fe:	2f 70       	andi	r18, 0x0F	; 15
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	22 0f       	add	r18, r18
    2504:	33 1f       	adc	r19, r19
    2506:	08 2e       	mov	r0, r24
    2508:	00 0c       	add	r0, r0
    250a:	99 0b       	sbc	r25, r25
    250c:	88 27       	eor	r24, r24
    250e:	99 0f       	add	r25, r25
    2510:	88 1f       	adc	r24, r24
    2512:	99 27       	eor	r25, r25
    2514:	82 0f       	add	r24, r18
    2516:	93 1f       	adc	r25, r19
    2518:	fc 01       	movw	r30, r24
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	ee 0f       	add	r30, r30
    2520:	ff 1f       	adc	r31, r31
    2522:	ee 0f       	add	r30, r30
    2524:	ff 1f       	adc	r31, r31
    2526:	ec 5f       	subi	r30, 0xFC	; 252
    2528:	fd 4d       	sbci	r31, 0xDD	; 221
    252a:	21 89       	ldd	r18, Z+17	; 0x11
    252c:	20 7c       	andi	r18, 0xC0	; 192
    252e:	09 f0       	breq	.+2      	; 0x2532 <udd_ep_alloc+0x36>
    2530:	58 c0       	rjmp	.+176    	; 0x25e2 <udd_ep_alloc+0xe6>
    2532:	63 70       	andi	r22, 0x03	; 3
    2534:	61 30       	cpi	r22, 0x01	; 1
    2536:	11 f0       	breq	.+4      	; 0x253c <udd_ep_alloc+0x40>
    2538:	18 f4       	brcc	.+6      	; 0x2540 <udd_ep_alloc+0x44>
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <udd_ep_alloc+0x48>
    253c:	20 ec       	ldi	r18, 0xC0	; 192
    253e:	03 c0       	rjmp	.+6      	; 0x2546 <udd_ep_alloc+0x4a>
    2540:	20 e8       	ldi	r18, 0x80	; 128
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <udd_ep_alloc+0x4a>
    2544:	20 e4       	ldi	r18, 0x40	; 64
    2546:	40 38       	cpi	r20, 0x80	; 128
    2548:	51 05       	cpc	r21, r1
    254a:	e9 f0       	breq	.+58     	; 0x2586 <udd_ep_alloc+0x8a>
    254c:	50 f4       	brcc	.+20     	; 0x2562 <udd_ep_alloc+0x66>
    254e:	40 32       	cpi	r20, 0x20	; 32
    2550:	51 05       	cpc	r21, r1
    2552:	a9 f0       	breq	.+42     	; 0x257e <udd_ep_alloc+0x82>
    2554:	40 34       	cpi	r20, 0x40	; 64
    2556:	51 05       	cpc	r21, r1
    2558:	a1 f0       	breq	.+40     	; 0x2582 <udd_ep_alloc+0x86>
    255a:	40 31       	cpi	r20, 0x10	; 16
    255c:	51 05       	cpc	r21, r1
    255e:	d9 f4       	brne	.+54     	; 0x2596 <udd_ep_alloc+0x9a>
    2560:	0c c0       	rjmp	.+24     	; 0x257a <udd_ep_alloc+0x7e>
    2562:	41 15       	cp	r20, r1
    2564:	32 e0       	ldi	r19, 0x02	; 2
    2566:	53 07       	cpc	r21, r19
    2568:	91 f0       	breq	.+36     	; 0x258e <udd_ep_alloc+0x92>
    256a:	4f 3f       	cpi	r20, 0xFF	; 255
    256c:	33 e0       	ldi	r19, 0x03	; 3
    256e:	53 07       	cpc	r21, r19
    2570:	81 f0       	breq	.+32     	; 0x2592 <udd_ep_alloc+0x96>
    2572:	41 15       	cp	r20, r1
    2574:	51 40       	sbci	r21, 0x01	; 1
    2576:	79 f4       	brne	.+30     	; 0x2596 <udd_ep_alloc+0x9a>
    2578:	08 c0       	rjmp	.+16     	; 0x258a <udd_ep_alloc+0x8e>
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0d c0       	rjmp	.+26     	; 0x2598 <udd_ep_alloc+0x9c>
    257e:	42 e0       	ldi	r20, 0x02	; 2
    2580:	0b c0       	rjmp	.+22     	; 0x2598 <udd_ep_alloc+0x9c>
    2582:	43 e0       	ldi	r20, 0x03	; 3
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <udd_ep_alloc+0x9c>
    2586:	44 e0       	ldi	r20, 0x04	; 4
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <udd_ep_alloc+0x9c>
    258a:	45 e0       	ldi	r20, 0x05	; 5
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <udd_ep_alloc+0x9c>
    258e:	46 e0       	ldi	r20, 0x06	; 6
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <udd_ep_alloc+0x9c>
    2592:	47 e0       	ldi	r20, 0x07	; 7
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <udd_ep_alloc+0x9c>
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	fc 01       	movw	r30, r24
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	ee 0f       	add	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	ec 5f       	subi	r30, 0xFC	; 252
    25a8:	fd 4d       	sbci	r31, 0xDD	; 221
    25aa:	11 8a       	std	Z+17, r1	; 0x11
    25ac:	dc 01       	movw	r26, r24
    25ae:	aa 0f       	add	r26, r26
    25b0:	bb 1f       	adc	r27, r27
    25b2:	aa 0f       	add	r26, r26
    25b4:	bb 1f       	adc	r27, r27
    25b6:	aa 0f       	add	r26, r26
    25b8:	bb 1f       	adc	r27, r27
    25ba:	ac 5e       	subi	r26, 0xEC	; 236
    25bc:	bd 4d       	sbci	r27, 0xDD	; 221
    25be:	36 e0       	ldi	r19, 0x06	; 6
    25c0:	3c 93       	st	X, r19
    25c2:	24 2b       	or	r18, r20
    25c4:	21 8b       	std	Z+17, r18	; 0x11
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	fc 01       	movw	r30, r24
    25d4:	ec 5f       	subi	r30, 0xFC	; 252
    25d6:	fd 4d       	sbci	r31, 0xDD	; 221
    25d8:	81 89       	ldd	r24, Z+17	; 0x11
    25da:	80 62       	ori	r24, 0x20	; 32
    25dc:	81 8b       	std	Z+17, r24	; 0x11
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	08 95       	ret
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	08 95       	ret

000025e6 <udd_ep_is_halted>:
    25e6:	e8 2f       	mov	r30, r24
    25e8:	ef 70       	andi	r30, 0x0F	; 15
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	ee 0f       	add	r30, r30
    25ee:	ff 1f       	adc	r31, r31
    25f0:	08 2e       	mov	r0, r24
    25f2:	00 0c       	add	r0, r0
    25f4:	99 0b       	sbc	r25, r25
    25f6:	88 27       	eor	r24, r24
    25f8:	99 0f       	add	r25, r25
    25fa:	88 1f       	adc	r24, r24
    25fc:	99 27       	eor	r25, r25
    25fe:	e8 0f       	add	r30, r24
    2600:	f9 1f       	adc	r31, r25
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	ec 5f       	subi	r30, 0xFC	; 252
    2610:	fd 4d       	sbci	r31, 0xDD	; 221
    2612:	81 89       	ldd	r24, Z+17	; 0x11
    2614:	82 fb       	bst	r24, 2
    2616:	88 27       	eor	r24, r24
    2618:	80 f9       	bld	r24, 0
    261a:	08 95       	ret

0000261c <udd_ep_clear_halt>:
    261c:	28 2f       	mov	r18, r24
    261e:	2f 70       	andi	r18, 0x0F	; 15
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	a9 01       	movw	r20, r18
    2624:	44 0f       	add	r20, r20
    2626:	55 1f       	adc	r21, r21
    2628:	28 2f       	mov	r18, r24
    262a:	08 2e       	mov	r0, r24
    262c:	00 0c       	add	r0, r0
    262e:	33 0b       	sbc	r19, r19
    2630:	22 27       	eor	r18, r18
    2632:	33 0f       	add	r19, r19
    2634:	22 1f       	adc	r18, r18
    2636:	33 27       	eor	r19, r19
    2638:	24 0f       	add	r18, r20
    263a:	35 1f       	adc	r19, r21
    263c:	f9 01       	movw	r30, r18
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	ec 5f       	subi	r30, 0xFC	; 252
    264c:	fd 4d       	sbci	r31, 0xDD	; 221
    264e:	91 89       	ldd	r25, Z+17	; 0x11
    2650:	92 ff       	sbrs	r25, 2
    2652:	17 c0       	rjmp	.+46     	; 0x2682 <udd_ep_clear_halt+0x66>
    2654:	22 0f       	add	r18, r18
    2656:	33 1f       	adc	r19, r19
    2658:	22 0f       	add	r18, r18
    265a:	33 1f       	adc	r19, r19
    265c:	22 0f       	add	r18, r18
    265e:	33 1f       	adc	r19, r19
    2660:	f9 01       	movw	r30, r18
    2662:	ec 5f       	subi	r30, 0xFC	; 252
    2664:	fd 4d       	sbci	r31, 0xDD	; 221
    2666:	91 89       	ldd	r25, Z+17	; 0x11
    2668:	9b 7f       	andi	r25, 0xFB	; 251
    266a:	91 8b       	std	Z+17, r25	; 0x11
    266c:	ae dc       	rcall	.-1700   	; 0x1fca <udd_ep_get_job>
    266e:	fc 01       	movw	r30, r24
    2670:	80 81       	ld	r24, Z
    2672:	80 ff       	sbrs	r24, 0
    2674:	06 c0       	rjmp	.+12     	; 0x2682 <udd_ep_clear_halt+0x66>
    2676:	8e 7f       	andi	r24, 0xFE	; 254
    2678:	80 83       	st	Z, r24
    267a:	07 80       	ldd	r0, Z+7	; 0x07
    267c:	f0 85       	ldd	r31, Z+8	; 0x08
    267e:	e0 2d       	mov	r30, r0
    2680:	09 95       	icall
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	08 95       	ret

00002686 <udd_ep_run>:
    2686:	7f 92       	push	r7
    2688:	8f 92       	push	r8
    268a:	9f 92       	push	r9
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	cf 92       	push	r12
    2692:	df 92       	push	r13
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	98 2e       	mov	r9, r24
    26a2:	86 2e       	mov	r8, r22
    26a4:	6a 01       	movw	r12, r20
    26a6:	79 01       	movw	r14, r18
    26a8:	90 dc       	rcall	.-1760   	; 0x1fca <udd_ep_get_job>
    26aa:	5c 01       	movw	r10, r24
    26ac:	79 2c       	mov	r7, r9
    26ae:	77 1c       	adc	r7, r7
    26b0:	77 24       	eor	r7, r7
    26b2:	77 1c       	adc	r7, r7
    26b4:	c9 2d       	mov	r28, r9
    26b6:	cf 70       	andi	r28, 0x0F	; 15
    26b8:	d0 e0       	ldi	r29, 0x00	; 0
    26ba:	cc 0f       	add	r28, r28
    26bc:	dd 1f       	adc	r29, r29
    26be:	c7 0d       	add	r28, r7
    26c0:	d1 1d       	adc	r29, r1
    26c2:	fe 01       	movw	r30, r28
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	ee 0f       	add	r30, r30
    26ca:	ff 1f       	adc	r31, r31
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	ec 5f       	subi	r30, 0xFC	; 252
    26d2:	fd 4d       	sbci	r31, 0xDD	; 221
    26d4:	81 89       	ldd	r24, Z+17	; 0x11
    26d6:	80 7c       	andi	r24, 0xC0	; 192
    26d8:	09 f4       	brne	.+2      	; 0x26dc <udd_ep_run+0x56>
    26da:	7d c0       	rjmp	.+250    	; 0x27d6 <udd_ep_run+0x150>
    26dc:	fe 01       	movw	r30, r28
    26de:	ee 0f       	add	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	ee 0f       	add	r30, r30
    26e4:	ff 1f       	adc	r31, r31
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	ec 5f       	subi	r30, 0xFC	; 252
    26ec:	fd 4d       	sbci	r31, 0xDD	; 221
    26ee:	81 89       	ldd	r24, Z+17	; 0x11
    26f0:	80 7c       	andi	r24, 0xC0	; 192
    26f2:	80 3c       	cpi	r24, 0xC0	; 192
    26f4:	61 f0       	breq	.+24     	; 0x270e <udd_ep_run+0x88>
    26f6:	fe 01       	movw	r30, r28
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	ec 5f       	subi	r30, 0xFC	; 252
    2706:	fd 4d       	sbci	r31, 0xDD	; 221
    2708:	81 89       	ldd	r24, Z+17	; 0x11
    270a:	82 fd       	sbrc	r24, 2
    270c:	66 c0       	rjmp	.+204    	; 0x27da <udd_ep_run+0x154>
    270e:	8f b7       	in	r24, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	f5 01       	movw	r30, r10
    2714:	90 81       	ld	r25, Z
    2716:	90 ff       	sbrs	r25, 0
    2718:	03 c0       	rjmp	.+6      	; 0x2720 <udd_ep_run+0x9a>
    271a:	8f bf       	out	0x3f, r24	; 63
    271c:	71 2c       	mov	r7, r1
    271e:	5e c0       	rjmp	.+188    	; 0x27dc <udd_ep_run+0x156>
    2720:	f5 01       	movw	r30, r10
    2722:	90 81       	ld	r25, Z
    2724:	91 60       	ori	r25, 0x01	; 1
    2726:	90 83       	st	Z, r25
    2728:	8f bf       	out	0x3f, r24	; 63
    272a:	c1 82       	std	Z+1, r12	; 0x01
    272c:	d2 82       	std	Z+2, r13	; 0x02
    272e:	e3 82       	std	Z+3, r14	; 0x03
    2730:	f4 82       	std	Z+4, r15	; 0x04
    2732:	15 82       	std	Z+5, r1	; 0x05
    2734:	16 82       	std	Z+6, r1	; 0x06
    2736:	07 83       	std	Z+7, r16	; 0x07
    2738:	10 87       	std	Z+8, r17	; 0x08
    273a:	81 10       	cpse	r8, r1
    273c:	06 c0       	rjmp	.+12     	; 0x274a <udd_ep_run+0xc4>
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	e1 14       	cp	r14, r1
    2742:	f1 04       	cpc	r15, r1
    2744:	19 f0       	breq	.+6      	; 0x274c <udd_ep_run+0xc6>
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	01 c0       	rjmp	.+2      	; 0x274c <udd_ep_run+0xc6>
    274a:	91 e0       	ldi	r25, 0x01	; 1
    274c:	f5 01       	movw	r30, r10
    274e:	80 81       	ld	r24, Z
    2750:	90 fb       	bst	r25, 0
    2752:	81 f9       	bld	r24, 1
    2754:	8b 7f       	andi	r24, 0xFB	; 251
    2756:	80 83       	st	Z, r24
    2758:	77 20       	and	r7, r7
    275a:	59 f0       	breq	.+22     	; 0x2772 <udd_ep_run+0xec>
    275c:	cc 0f       	add	r28, r28
    275e:	dd 1f       	adc	r29, r29
    2760:	cc 0f       	add	r28, r28
    2762:	dd 1f       	adc	r29, r29
    2764:	cc 0f       	add	r28, r28
    2766:	dd 1f       	adc	r29, r29
    2768:	cc 5f       	subi	r28, 0xFC	; 252
    276a:	dd 4d       	sbci	r29, 0xDD	; 221
    276c:	1e 8a       	std	Y+22, r1	; 0x16
    276e:	1f 8a       	std	Y+23, r1	; 0x17
    2770:	2d c0       	rjmp	.+90     	; 0x27cc <udd_ep_run+0x146>
    2772:	fe 01       	movw	r30, r28
    2774:	ee 0f       	add	r30, r30
    2776:	ff 1f       	adc	r31, r31
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	ee 0f       	add	r30, r30
    277e:	ff 1f       	adc	r31, r31
    2780:	ec 5f       	subi	r30, 0xFC	; 252
    2782:	fd 4d       	sbci	r31, 0xDD	; 221
    2784:	81 89       	ldd	r24, Z+17	; 0x11
    2786:	80 7c       	andi	r24, 0xC0	; 192
    2788:	80 3c       	cpi	r24, 0xC0	; 192
    278a:	a1 f4       	brne	.+40     	; 0x27b4 <udd_ep_run+0x12e>
    278c:	ce 01       	movw	r24, r28
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	8c 5e       	subi	r24, 0xEC	; 236
    279c:	9d 4d       	sbci	r25, 0xDD	; 221
    279e:	ef db       	rcall	.-2082   	; 0x1f7e <udd_ep_get_size>
    27a0:	bc 01       	movw	r22, r24
    27a2:	c7 01       	movw	r24, r14
    27a4:	60 d2       	rcall	.+1216   	; 0x2c66 <__udivmodhi4>
    27a6:	89 2b       	or	r24, r25
    27a8:	29 f0       	breq	.+10     	; 0x27b4 <udd_ep_run+0x12e>
    27aa:	f5 01       	movw	r30, r10
    27ac:	80 81       	ld	r24, Z
    27ae:	8e 7f       	andi	r24, 0xFE	; 254
    27b0:	80 83       	st	Z, r24
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <udd_ep_run+0x156>
    27b4:	cc 0f       	add	r28, r28
    27b6:	dd 1f       	adc	r29, r29
    27b8:	cc 0f       	add	r28, r28
    27ba:	dd 1f       	adc	r29, r29
    27bc:	cc 0f       	add	r28, r28
    27be:	dd 1f       	adc	r29, r29
    27c0:	cc 5f       	subi	r28, 0xFC	; 252
    27c2:	dd 4d       	sbci	r29, 0xDD	; 221
    27c4:	1a 8a       	std	Y+18, r1	; 0x12
    27c6:	1b 8a       	std	Y+19, r1	; 0x13
    27c8:	1e 8a       	std	Y+22, r1	; 0x16
    27ca:	1f 8a       	std	Y+23, r1	; 0x17
    27cc:	89 2d       	mov	r24, r9
    27ce:	87 dc       	rcall	.-1778   	; 0x20de <udd_ep_trans_complet>
    27d0:	77 24       	eor	r7, r7
    27d2:	73 94       	inc	r7
    27d4:	03 c0       	rjmp	.+6      	; 0x27dc <udd_ep_run+0x156>
    27d6:	71 2c       	mov	r7, r1
    27d8:	01 c0       	rjmp	.+2      	; 0x27dc <udd_ep_run+0x156>
    27da:	71 2c       	mov	r7, r1
    27dc:	87 2d       	mov	r24, r7
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	ef 90       	pop	r14
    27ea:	df 90       	pop	r13
    27ec:	cf 90       	pop	r12
    27ee:	bf 90       	pop	r11
    27f0:	af 90       	pop	r10
    27f2:	9f 90       	pop	r9
    27f4:	8f 90       	pop	r8
    27f6:	7f 90       	pop	r7
    27f8:	08 95       	ret

000027fa <udd_ep_abort>:
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	18 2f       	mov	r17, r24
    2806:	f8 2e       	mov	r15, r24
    2808:	ff 1c       	adc	r15, r15
    280a:	ff 24       	eor	r15, r15
    280c:	ff 1c       	adc	r15, r15
    280e:	c8 2f       	mov	r28, r24
    2810:	cf 70       	andi	r28, 0x0F	; 15
    2812:	d0 e0       	ldi	r29, 0x00	; 0
    2814:	cc 0f       	add	r28, r28
    2816:	dd 1f       	adc	r29, r29
    2818:	cf 0d       	add	r28, r15
    281a:	d1 1d       	adc	r29, r1
    281c:	d6 db       	rcall	.-2132   	; 0x1fca <udd_ep_get_job>
    281e:	dc 01       	movw	r26, r24
    2820:	fe 01       	movw	r30, r28
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	ee 0f       	add	r30, r30
    2828:	ff 1f       	adc	r31, r31
    282a:	ee 0f       	add	r30, r30
    282c:	ff 1f       	adc	r31, r31
    282e:	ec 5e       	subi	r30, 0xEC	; 236
    2830:	fd 4d       	sbci	r31, 0xDD	; 221
    2832:	02 e0       	ldi	r16, 0x02	; 2
    2834:	05 93       	las	Z, r16
    2836:	8c 91       	ld	r24, X
    2838:	80 ff       	sbrs	r24, 0
    283a:	22 c0       	rjmp	.+68     	; 0x2880 <udd_ep_abort+0x86>
    283c:	8e 7f       	andi	r24, 0xFE	; 254
    283e:	8c 93       	st	X, r24
    2840:	17 96       	adiw	r26, 0x07	; 7
    2842:	ed 91       	ld	r30, X+
    2844:	fc 91       	ld	r31, X
    2846:	18 97       	sbiw	r26, 0x08	; 8
    2848:	30 97       	sbiw	r30, 0x00	; 0
    284a:	d1 f0       	breq	.+52     	; 0x2880 <udd_ep_abort+0x86>
    284c:	ff 20       	and	r15, r15
    284e:	59 f0       	breq	.+22     	; 0x2866 <udd_ep_abort+0x6c>
    2850:	cc 0f       	add	r28, r28
    2852:	dd 1f       	adc	r29, r29
    2854:	cc 0f       	add	r28, r28
    2856:	dd 1f       	adc	r29, r29
    2858:	cc 0f       	add	r28, r28
    285a:	dd 1f       	adc	r29, r29
    285c:	cc 5f       	subi	r28, 0xFC	; 252
    285e:	dd 4d       	sbci	r29, 0xDD	; 221
    2860:	6e 89       	ldd	r22, Y+22	; 0x16
    2862:	7f 89       	ldd	r23, Y+23	; 0x17
    2864:	0a c0       	rjmp	.+20     	; 0x287a <udd_ep_abort+0x80>
    2866:	cc 0f       	add	r28, r28
    2868:	dd 1f       	adc	r29, r29
    286a:	cc 0f       	add	r28, r28
    286c:	dd 1f       	adc	r29, r29
    286e:	cc 0f       	add	r28, r28
    2870:	dd 1f       	adc	r29, r29
    2872:	cc 5f       	subi	r28, 0xFC	; 252
    2874:	dd 4d       	sbci	r29, 0xDD	; 221
    2876:	6a 89       	ldd	r22, Y+18	; 0x12
    2878:	7b 89       	ldd	r23, Y+19	; 0x13
    287a:	41 2f       	mov	r20, r17
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	09 95       	icall
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	ff 90       	pop	r15
    288a:	08 95       	ret

0000288c <udd_ep_free>:
    288c:	cf 93       	push	r28
    288e:	c8 2f       	mov	r28, r24
    2890:	b4 df       	rcall	.-152    	; 0x27fa <udd_ep_abort>
    2892:	ec 2f       	mov	r30, r28
    2894:	ef 70       	andi	r30, 0x0F	; 15
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	ee 0f       	add	r30, r30
    289a:	ff 1f       	adc	r31, r31
    289c:	8c 2f       	mov	r24, r28
    289e:	cc 0f       	add	r28, r28
    28a0:	99 0b       	sbc	r25, r25
    28a2:	88 27       	eor	r24, r24
    28a4:	99 0f       	add	r25, r25
    28a6:	88 1f       	adc	r24, r24
    28a8:	99 27       	eor	r25, r25
    28aa:	e8 0f       	add	r30, r24
    28ac:	f9 1f       	adc	r31, r25
    28ae:	ee 0f       	add	r30, r30
    28b0:	ff 1f       	adc	r31, r31
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	ec 5f       	subi	r30, 0xFC	; 252
    28bc:	fd 4d       	sbci	r31, 0xDD	; 221
    28be:	11 8a       	std	Z+17, r1	; 0x11
    28c0:	cf 91       	pop	r28
    28c2:	08 95       	ret

000028c4 <udd_ep_set_halt>:
    28c4:	0f 93       	push	r16
    28c6:	e8 2f       	mov	r30, r24
    28c8:	ef 70       	andi	r30, 0x0F	; 15
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	28 2f       	mov	r18, r24
    28d2:	08 2e       	mov	r0, r24
    28d4:	00 0c       	add	r0, r0
    28d6:	33 0b       	sbc	r19, r19
    28d8:	22 27       	eor	r18, r18
    28da:	33 0f       	add	r19, r19
    28dc:	22 1f       	adc	r18, r18
    28de:	33 27       	eor	r19, r19
    28e0:	e2 0f       	add	r30, r18
    28e2:	f3 1f       	adc	r31, r19
    28e4:	df 01       	movw	r26, r30
    28e6:	aa 0f       	add	r26, r26
    28e8:	bb 1f       	adc	r27, r27
    28ea:	aa 0f       	add	r26, r26
    28ec:	bb 1f       	adc	r27, r27
    28ee:	aa 0f       	add	r26, r26
    28f0:	bb 1f       	adc	r27, r27
    28f2:	ac 5f       	subi	r26, 0xFC	; 252
    28f4:	bd 4d       	sbci	r27, 0xDD	; 221
    28f6:	51 96       	adiw	r26, 0x11	; 17
    28f8:	9c 91       	ld	r25, X
    28fa:	51 97       	sbiw	r26, 0x11	; 17
    28fc:	94 60       	ori	r25, 0x04	; 4
    28fe:	51 96       	adiw	r26, 0x11	; 17
    2900:	9c 93       	st	X, r25
    2902:	ee 0f       	add	r30, r30
    2904:	ff 1f       	adc	r31, r31
    2906:	ee 0f       	add	r30, r30
    2908:	ff 1f       	adc	r31, r31
    290a:	ee 0f       	add	r30, r30
    290c:	ff 1f       	adc	r31, r31
    290e:	ec 5e       	subi	r30, 0xEC	; 236
    2910:	fd 4d       	sbci	r31, 0xDD	; 221
    2912:	01 e0       	ldi	r16, 0x01	; 1
    2914:	06 93       	lac	Z, r16
    2916:	71 df       	rcall	.-286    	; 0x27fa <udd_ep_abort>
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	0f 91       	pop	r16
    291c:	08 95       	ret

0000291e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    291e:	1f 92       	push	r1
    2920:	0f 92       	push	r0
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	0f 92       	push	r0
    2926:	11 24       	eor	r1, r1
    2928:	0f 93       	push	r16
    292a:	2f 93       	push	r18
    292c:	3f 93       	push	r19
    292e:	4f 93       	push	r20
    2930:	5f 93       	push	r21
    2932:	6f 93       	push	r22
    2934:	7f 93       	push	r23
    2936:	8f 93       	push	r24
    2938:	9f 93       	push	r25
    293a:	af 93       	push	r26
    293c:	bf 93       	push	r27
    293e:	ef 93       	push	r30
    2940:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2942:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2946:	88 23       	and	r24, r24
    2948:	44 f4       	brge	.+16     	; 0x295a <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    294a:	80 e8       	ldi	r24, 0x80	; 128
    294c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2950:	0e 94 16 0b 	call	0x162c	; 0x162c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2954:	0e 94 02 02 	call	0x404	; 0x404 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2958:	8a c0       	rjmp	.+276    	; 0x2a6e <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    295a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    295e:	82 ff       	sbrs	r24, 2
    2960:	20 c0       	rjmp	.+64     	; 0x29a2 <__vector_125+0x84>
		udd_ack_underflow_event();
    2962:	84 e0       	ldi	r24, 0x04	; 4
    2964:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2968:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udd_sram+0x18>
    296c:	86 ff       	sbrs	r24, 6
    296e:	7f c0       	rjmp	.+254    	; 0x2a6e <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2970:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2974:	81 fd       	sbrc	r24, 1
    2976:	7b c0       	rjmp	.+246    	; 0x2a6e <__vector_125+0x150>
    2978:	43 db       	rcall	.-2426   	; 0x2000 <udd_ctrl_interrupt_tc_setup>
    297a:	81 11       	cpse	r24, r1
    297c:	78 c0       	rjmp	.+240    	; 0x2a6e <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    297e:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	11 f4       	brne	.+4      	; 0x298a <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2986:	79 da       	rcall	.-2830   	; 0x1e7a <udd_ctrl_send_zlp_in>
    2988:	72 c0       	rjmp	.+228    	; 0x2a6e <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    298a:	84 30       	cpi	r24, 0x04	; 4
    298c:	09 f0       	breq	.+2      	; 0x2990 <__vector_125+0x72>
    298e:	6f c0       	rjmp	.+222    	; 0x2a6e <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2990:	ed e1       	ldi	r30, 0x1D	; 29
    2992:	f2 e2       	ldi	r31, 0x22	; 34
    2994:	04 e0       	ldi	r16, 0x04	; 4
    2996:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2998:	e5 e1       	ldi	r30, 0x15	; 21
    299a:	f2 e2       	ldi	r31, 0x22	; 34
    299c:	04 e0       	ldi	r16, 0x04	; 4
    299e:	05 93       	las	Z, r16
    29a0:	66 c0       	rjmp	.+204    	; 0x2a6e <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    29a2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29a6:	81 ff       	sbrs	r24, 1
    29a8:	5d c0       	rjmp	.+186    	; 0x2a64 <__vector_125+0x146>
		udd_ack_overflow_event();
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    29b0:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udd_sram+0x10>
    29b4:	86 ff       	sbrs	r24, 6
    29b6:	5b c0       	rjmp	.+182    	; 0x2a6e <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    29b8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    29bc:	81 fd       	sbrc	r24, 1
    29be:	57 c0       	rjmp	.+174    	; 0x2a6e <__vector_125+0x150>
    29c0:	1f db       	rcall	.-2498   	; 0x2000 <udd_ctrl_interrupt_tc_setup>
    29c2:	81 11       	cpse	r24, r1
    29c4:	54 c0       	rjmp	.+168    	; 0x2a6e <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    29c6:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    29ca:	82 30       	cpi	r24, 0x02	; 2
    29cc:	41 f4       	brne	.+16     	; 0x29de <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    29ce:	84 e0       	ldi	r24, 0x04	; 4
    29d0:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    29d4:	e4 e1       	ldi	r30, 0x14	; 20
    29d6:	f2 e2       	ldi	r31, 0x22	; 34
    29d8:	02 e0       	ldi	r16, 0x02	; 2
    29da:	06 93       	lac	Z, r16
    29dc:	48 c0       	rjmp	.+144    	; 0x2a6e <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    29de:	83 30       	cpi	r24, 0x03	; 3
    29e0:	09 f0       	breq	.+2      	; 0x29e4 <__vector_125+0xc6>
    29e2:	45 c0       	rjmp	.+138    	; 0x2a6e <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    29e4:	ed e1       	ldi	r30, 0x1D	; 29
    29e6:	f2 e2       	ldi	r31, 0x22	; 34
    29e8:	04 e0       	ldi	r16, 0x04	; 4
    29ea:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    29ec:	e5 e1       	ldi	r30, 0x15	; 21
    29ee:	f2 e2       	ldi	r31, 0x22	; 34
    29f0:	04 e0       	ldi	r16, 0x04	; 4
    29f2:	05 93       	las	Z, r16
    29f4:	3c c0       	rjmp	.+120    	; 0x2a6e <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    29f6:	80 e1       	ldi	r24, 0x10	; 16
    29f8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	fd de       	rcall	.-518    	; 0x27fa <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a00:	81 e8       	ldi	r24, 0x81	; 129
    2a02:	fb de       	rcall	.-522    	; 0x27fa <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a04:	82 e0       	ldi	r24, 0x02	; 2
    2a06:	f9 de       	rcall	.-526    	; 0x27fa <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a08:	82 e8       	ldi	r24, 0x82	; 130
    2a0a:	f7 de       	rcall	.-530    	; 0x27fa <udd_ep_abort>
		}
#endif
		udc_reset();
    2a0c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2a10:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a14:	e4 e0       	ldi	r30, 0x04	; 4
    2a16:	f2 e2       	ldi	r31, 0x22	; 34
    2a18:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2a1a:	96 e0       	ldi	r25, 0x06	; 6
    2a1c:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a1e:	83 e4       	ldi	r24, 0x43	; 67
    2a20:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a22:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2a24:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a26:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2a28:	8d eb       	ldi	r24, 0xBD	; 189
    2a2a:	91 e2       	ldi	r25, 0x21	; 33
    2a2c:	84 8b       	std	Z+20, r24	; 0x14
    2a2e:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2a30:	ef d9       	rcall	.-3106   	; 0x1e10 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2a32:	1d c0       	rjmp	.+58     	; 0x2a6e <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2a34:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a38:	86 ff       	sbrs	r24, 6
    2a3a:	08 c0       	rjmp	.+16     	; 0x2a4c <__vector_125+0x12e>
		udd_ack_suspend_event();
    2a3c:	80 e4       	ldi	r24, 0x40	; 64
    2a3e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	bc d9       	rcall	.-3208   	; 0x1dbe <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2a46:	0e 94 00 02 	call	0x400	; 0x400 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a4a:	11 c0       	rjmp	.+34     	; 0x2a6e <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2a4c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a50:	85 ff       	sbrs	r24, 5
    2a52:	0d c0       	rjmp	.+26     	; 0x2a6e <__vector_125+0x150>
		udd_ack_resume_event();
    2a54:	80 e2       	ldi	r24, 0x20	; 32
    2a56:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	b0 d9       	rcall	.-3232   	; 0x1dbe <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2a5e:	0e 94 01 02 	call	0x402	; 0x402 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a62:	05 c0       	rjmp	.+10     	; 0x2a6e <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2a64:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a68:	84 fd       	sbrc	r24, 4
    2a6a:	c5 cf       	rjmp	.-118    	; 0x29f6 <__vector_125+0xd8>
    2a6c:	e3 cf       	rjmp	.-58     	; 0x2a34 <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2a6e:	ff 91       	pop	r31
    2a70:	ef 91       	pop	r30
    2a72:	bf 91       	pop	r27
    2a74:	af 91       	pop	r26
    2a76:	9f 91       	pop	r25
    2a78:	8f 91       	pop	r24
    2a7a:	7f 91       	pop	r23
    2a7c:	6f 91       	pop	r22
    2a7e:	5f 91       	pop	r21
    2a80:	4f 91       	pop	r20
    2a82:	3f 91       	pop	r19
    2a84:	2f 91       	pop	r18
    2a86:	0f 91       	pop	r16
    2a88:	0f 90       	pop	r0
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	0f 90       	pop	r0
    2a8e:	1f 90       	pop	r1
    2a90:	18 95       	reti

00002a92 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2a92:	1f 92       	push	r1
    2a94:	0f 92       	push	r0
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	0f 92       	push	r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	2f 93       	push	r18
    2aa2:	3f 93       	push	r19
    2aa4:	4f 93       	push	r20
    2aa6:	5f 93       	push	r21
    2aa8:	6f 93       	push	r22
    2aaa:	7f 93       	push	r23
    2aac:	8f 93       	push	r24
    2aae:	9f 93       	push	r25
    2ab0:	af 93       	push	r26
    2ab2:	bf 93       	push	r27
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	ef 93       	push	r30
    2aba:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2abc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ac0:	81 fd       	sbrc	r24, 1
    2ac2:	03 c0       	rjmp	.+6      	; 0x2aca <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2ac4:	9d da       	rcall	.-2758   	; 0x2000 <udd_ctrl_interrupt_tc_setup>
    2ac6:	81 11       	cpse	r24, r1
    2ac8:	b9 c0       	rjmp	.+370    	; 0x2c3c <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2ad0:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2ad4:	81 95       	neg	r24
    2ad6:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2ad8:	e4 e1       	ldi	r30, 0x14	; 20
    2ada:	f2 e2       	ldi	r31, 0x22	; 34
    2adc:	e8 1b       	sub	r30, r24
    2ade:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2ae0:	20 81       	ld	r18, Z
    2ae2:	31 81       	ldd	r19, Z+1	; 0x01
    2ae4:	24 51       	subi	r18, 0x14	; 20
    2ae6:	32 42       	sbci	r19, 0x22	; 34
    2ae8:	36 95       	lsr	r19
    2aea:	27 95       	ror	r18
    2aec:	36 95       	lsr	r19
    2aee:	27 95       	ror	r18
    2af0:	36 95       	lsr	r19
    2af2:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2af4:	82 2f       	mov	r24, r18
    2af6:	86 95       	lsr	r24
    2af8:	20 fd       	sbrc	r18, 0
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <__vector_126+0x6e>
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	01 c0       	rjmp	.+2      	; 0x2b02 <__vector_126+0x70>
    2b00:	90 e8       	ldi	r25, 0x80	; 128
    2b02:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b04:	e8 2f       	mov	r30, r24
    2b06:	ef 70       	andi	r30, 0x0F	; 15
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	ee 0f       	add	r30, r30
    2b0c:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2b0e:	28 2f       	mov	r18, r24
    2b10:	08 2e       	mov	r0, r24
    2b12:	00 0c       	add	r0, r0
    2b14:	33 0b       	sbc	r19, r19
    2b16:	22 27       	eor	r18, r18
    2b18:	33 0f       	add	r19, r19
    2b1a:	22 1f       	adc	r18, r18
    2b1c:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b1e:	e2 0f       	add	r30, r18
    2b20:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2b22:	df 01       	movw	r26, r30
    2b24:	aa 0f       	add	r26, r26
    2b26:	bb 1f       	adc	r27, r27
    2b28:	aa 0f       	add	r26, r26
    2b2a:	bb 1f       	adc	r27, r27
    2b2c:	aa 0f       	add	r26, r26
    2b2e:	bb 1f       	adc	r27, r27
    2b30:	ac 5e       	subi	r26, 0xEC	; 236
    2b32:	bd 4d       	sbci	r27, 0xDD	; 221
    2b34:	9c 91       	ld	r25, X
    2b36:	95 ff       	sbrs	r25, 5
    2b38:	81 c0       	rjmp	.+258    	; 0x2c3c <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2b3a:	fd 01       	movw	r30, r26
    2b3c:	00 e2       	ldi	r16, 0x20	; 32
    2b3e:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2b40:	81 11       	cpse	r24, r1
    2b42:	77 c0       	rjmp	.+238    	; 0x2c32 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b44:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    2b48:	84 30       	cpi	r24, 0x04	; 4
    2b4a:	19 f4       	brne	.+6      	; 0x2b52 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2b4c:	a4 d9       	rcall	.-3256   	; 0x1e96 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2b4e:	60 d9       	rcall	.-3392   	; 0x1e10 <udd_ctrl_init>
    2b50:	75 c0       	rjmp	.+234    	; 0x2c3c <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2b52:	00 91 16 22 	lds	r16, 0x2216	; 0x802216 <udd_sram+0x12>
    2b56:	10 91 17 22 	lds	r17, 0x2217	; 0x802217 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2b5a:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    2b5e:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    2b62:	c0 91 fd 21 	lds	r28, 0x21FD	; 0x8021fd <udd_ctrl_payload_nb_trans>
    2b66:	d0 91 fe 21 	lds	r29, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    2b6a:	9e 01       	movw	r18, r28
    2b6c:	20 0f       	add	r18, r16
    2b6e:	31 1f       	adc	r19, r17
    2b70:	82 17       	cp	r24, r18
    2b72:	93 07       	cpc	r25, r19
    2b74:	18 f4       	brcc	.+6      	; 0x2b7c <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2b76:	8c 01       	movw	r16, r24
    2b78:	0c 1b       	sub	r16, r28
    2b7a:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2b7c:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <udd_g_ctrlreq+0x8>
    2b80:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <udd_g_ctrlreq+0x9>
    2b84:	a8 01       	movw	r20, r16
    2b86:	6d eb       	ldi	r22, 0xBD	; 189
    2b88:	71 e2       	ldi	r23, 0x21	; 33
    2b8a:	8c 0f       	add	r24, r28
    2b8c:	9d 1f       	adc	r25, r29
    2b8e:	85 d0       	rcall	.+266    	; 0x2c9a <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2b90:	c0 0f       	add	r28, r16
    2b92:	d1 1f       	adc	r29, r17
    2b94:	c0 93 fd 21 	sts	0x21FD, r28	; 0x8021fd <udd_ctrl_payload_nb_trans>
    2b98:	d0 93 fe 21 	sts	0x21FE, r29	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b9c:	00 34       	cpi	r16, 0x40	; 64
    2b9e:	11 05       	cpc	r17, r1
    2ba0:	69 f4       	brne	.+26     	; 0x2bbc <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2ba2:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    2ba6:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    2baa:	8c 0f       	add	r24, r28
    2bac:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2bae:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    2bb2:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    2bb6:	82 17       	cp	r24, r18
    2bb8:	93 07       	cpc	r25, r19
    2bba:	80 f0       	brcs	.+32     	; 0x2bdc <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2bbc:	ee e5       	ldi	r30, 0x5E	; 94
    2bbe:	f4 e2       	ldi	r31, 0x24	; 36
    2bc0:	c2 87       	std	Z+10, r28	; 0x0a
    2bc2:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2bc4:	06 84       	ldd	r0, Z+14	; 0x0e
    2bc6:	f7 85       	ldd	r31, Z+15	; 0x0f
    2bc8:	e0 2d       	mov	r30, r0
    2bca:	30 97       	sbiw	r30, 0x00	; 0
    2bcc:	29 f0       	breq	.+10     	; 0x2bd8 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2bce:	09 95       	icall
    2bd0:	81 11       	cpse	r24, r1
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2bd4:	44 d9       	rcall	.-3448   	; 0x1e5e <udd_ctrl_stall_data>
    2bd6:	32 c0       	rjmp	.+100    	; 0x2c3c <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2bd8:	50 d9       	rcall	.-3424   	; 0x1e7a <udd_ctrl_send_zlp_in>
    2bda:	30 c0       	rjmp	.+96     	; 0x2c3c <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2bdc:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    2be0:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    2be4:	c8 17       	cp	r28, r24
    2be6:	d9 07       	cpc	r29, r25
    2be8:	f9 f4       	brne	.+62     	; 0x2c28 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2bea:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <udd_g_ctrlreq+0xe>
    2bee:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <udd_g_ctrlreq+0xf>
    2bf2:	30 97       	sbiw	r30, 0x00	; 0
    2bf4:	11 f4       	brne	.+4      	; 0x2bfa <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2bf6:	33 d9       	rcall	.-3482   	; 0x1e5e <udd_ctrl_stall_data>
    2bf8:	21 c0       	rjmp	.+66     	; 0x2c3c <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2bfa:	09 95       	icall
    2bfc:	81 11       	cpse	r24, r1
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2c00:	2e d9       	rcall	.-3492   	; 0x1e5e <udd_ctrl_stall_data>
    2c02:	1c c0       	rjmp	.+56     	; 0x2c3c <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2c04:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    2c08:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c0c:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ctrl_payload_nb_trans>
    2c10:	90 91 fe 21 	lds	r25, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    2c14:	82 0f       	add	r24, r18
    2c16:	93 1f       	adc	r25, r19
    2c18:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    2c1c:	90 93 00 22 	sts	0x2200, r25	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2c20:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_payload_nb_trans>
    2c24:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2c28:	e4 e1       	ldi	r30, 0x14	; 20
    2c2a:	f2 e2       	ldi	r31, 0x22	; 34
    2c2c:	02 e0       	ldi	r16, 0x02	; 2
    2c2e:	06 93       	lac	Z, r16
    2c30:	05 c0       	rjmp	.+10     	; 0x2c3c <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2c32:	80 38       	cpi	r24, 0x80	; 128
    2c34:	11 f4       	brne	.+4      	; 0x2c3a <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2c36:	37 d9       	rcall	.-3474   	; 0x1ea6 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2c3a:	51 da       	rcall	.-2910   	; 0x20de <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c3c:	ff 91       	pop	r31
    2c3e:	ef 91       	pop	r30
    2c40:	df 91       	pop	r29
    2c42:	cf 91       	pop	r28
    2c44:	bf 91       	pop	r27
    2c46:	af 91       	pop	r26
    2c48:	9f 91       	pop	r25
    2c4a:	8f 91       	pop	r24
    2c4c:	7f 91       	pop	r23
    2c4e:	6f 91       	pop	r22
    2c50:	5f 91       	pop	r21
    2c52:	4f 91       	pop	r20
    2c54:	3f 91       	pop	r19
    2c56:	2f 91       	pop	r18
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	0f 90       	pop	r0
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	0f 90       	pop	r0
    2c62:	1f 90       	pop	r1
    2c64:	18 95       	reti

00002c66 <__udivmodhi4>:
    2c66:	aa 1b       	sub	r26, r26
    2c68:	bb 1b       	sub	r27, r27
    2c6a:	51 e1       	ldi	r21, 0x11	; 17
    2c6c:	07 c0       	rjmp	.+14     	; 0x2c7c <__udivmodhi4_ep>

00002c6e <__udivmodhi4_loop>:
    2c6e:	aa 1f       	adc	r26, r26
    2c70:	bb 1f       	adc	r27, r27
    2c72:	a6 17       	cp	r26, r22
    2c74:	b7 07       	cpc	r27, r23
    2c76:	10 f0       	brcs	.+4      	; 0x2c7c <__udivmodhi4_ep>
    2c78:	a6 1b       	sub	r26, r22
    2c7a:	b7 0b       	sbc	r27, r23

00002c7c <__udivmodhi4_ep>:
    2c7c:	88 1f       	adc	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	5a 95       	dec	r21
    2c82:	a9 f7       	brne	.-22     	; 0x2c6e <__udivmodhi4_loop>
    2c84:	80 95       	com	r24
    2c86:	90 95       	com	r25
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	08 95       	ret

00002c8e <__tablejump2__>:
    2c8e:	ee 0f       	add	r30, r30
    2c90:	ff 1f       	adc	r31, r31
    2c92:	05 90       	lpm	r0, Z+
    2c94:	f4 91       	lpm	r31, Z
    2c96:	e0 2d       	mov	r30, r0
    2c98:	09 94       	ijmp

00002c9a <memcpy>:
    2c9a:	fb 01       	movw	r30, r22
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <memcpy+0xa>
    2ca0:	01 90       	ld	r0, Z+
    2ca2:	0d 92       	st	X+, r0
    2ca4:	41 50       	subi	r20, 0x01	; 1
    2ca6:	50 40       	sbci	r21, 0x00	; 0
    2ca8:	d8 f7       	brcc	.-10     	; 0x2ca0 <memcpy+0x6>
    2caa:	08 95       	ret

00002cac <_exit>:
    2cac:	f8 94       	cli

00002cae <__stop_program>:
    2cae:	ff cf       	rjmp	.-2      	; 0x2cae <__stop_program>
