
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  00002d18  00002dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d9e  008020b2  008020b2  00002e5e  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00002ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b4af  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cf4  00000000  00000000  0000e867  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009418  00000000  00000000  0001055b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  00019974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f6f7  00000000  00000000  0001a48c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002402  00000000  00000000  00049b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  0004bf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bc26  00000000  00000000  0004c390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2c c1       	rjmp	.+600    	; 0x25a <__ctors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c6       	rjmp	.+3296   	; 0xcfa <__vector_6>
      1a:	00 00       	nop
      1c:	a6 c7       	rjmp	.+3916   	; 0xf6a <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__vector_8>
      24:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__vector_9>
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	26 c1       	rjmp	.+588    	; 0x292 <__bad_interrupt>
      46:	00 00       	nop
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1a c1       	rjmp	.+564    	; 0x292 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_24>
      64:	16 c1       	rjmp	.+556    	; 0x292 <__bad_interrupt>
      66:	00 00       	nop
      68:	14 c1       	rjmp	.+552    	; 0x292 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	08 c1       	rjmp	.+528    	; 0x292 <__bad_interrupt>
      82:	00 00       	nop
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fa c0       	rjmp	.+500    	; 0x292 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f4 c0       	rjmp	.+488    	; 0x292 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ea c0       	rjmp	.+468    	; 0x292 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d6 c0       	rjmp	.+428    	; 0x292 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d4 c0       	rjmp	.+424    	; 0x292 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d2 c0       	rjmp	.+420    	; 0x292 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d0 c0       	rjmp	.+416    	; 0x292 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ce c0       	rjmp	.+412    	; 0x292 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	cc c0       	rjmp	.+408    	; 0x292 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ca c0       	rjmp	.+404    	; 0x292 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c8 c0       	rjmp	.+400    	; 0x292 <__bad_interrupt>
     102:	00 00       	nop
     104:	c6 c0       	rjmp	.+396    	; 0x292 <__bad_interrupt>
     106:	00 00       	nop
     108:	c4 c0       	rjmp	.+392    	; 0x292 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c2 c0       	rjmp	.+388    	; 0x292 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c0 c0       	rjmp	.+384    	; 0x292 <__bad_interrupt>
     112:	00 00       	nop
     114:	be c0       	rjmp	.+380    	; 0x292 <__bad_interrupt>
     116:	00 00       	nop
     118:	bc c0       	rjmp	.+376    	; 0x292 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c0       	rjmp	.+372    	; 0x292 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b8 c0       	rjmp	.+368    	; 0x292 <__bad_interrupt>
     122:	00 00       	nop
     124:	b6 c0       	rjmp	.+364    	; 0x292 <__bad_interrupt>
     126:	00 00       	nop
     128:	b4 c0       	rjmp	.+360    	; 0x292 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	b2 c0       	rjmp	.+356    	; 0x292 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b0 c0       	rjmp	.+352    	; 0x292 <__bad_interrupt>
     132:	00 00       	nop
     134:	ae c0       	rjmp	.+348    	; 0x292 <__bad_interrupt>
     136:	00 00       	nop
     138:	ac c0       	rjmp	.+344    	; 0x292 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	aa c0       	rjmp	.+340    	; 0x292 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a8 c0       	rjmp	.+336    	; 0x292 <__bad_interrupt>
     142:	00 00       	nop
     144:	a6 c0       	rjmp	.+332    	; 0x292 <__bad_interrupt>
     146:	00 00       	nop
     148:	a4 c0       	rjmp	.+328    	; 0x292 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_83>
     150:	a0 c0       	rjmp	.+320    	; 0x292 <__bad_interrupt>
     152:	00 00       	nop
     154:	9e c0       	rjmp	.+316    	; 0x292 <__bad_interrupt>
     156:	00 00       	nop
     158:	9c c0       	rjmp	.+312    	; 0x292 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9a c0       	rjmp	.+308    	; 0x292 <__bad_interrupt>
     15e:	00 00       	nop
     160:	98 c0       	rjmp	.+304    	; 0x292 <__bad_interrupt>
     162:	00 00       	nop
     164:	96 c0       	rjmp	.+300    	; 0x292 <__bad_interrupt>
     166:	00 00       	nop
     168:	94 c0       	rjmp	.+296    	; 0x292 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	92 c0       	rjmp	.+292    	; 0x292 <__bad_interrupt>
     16e:	00 00       	nop
     170:	90 c0       	rjmp	.+288    	; 0x292 <__bad_interrupt>
     172:	00 00       	nop
     174:	8e c0       	rjmp	.+284    	; 0x292 <__bad_interrupt>
     176:	00 00       	nop
     178:	8c c0       	rjmp	.+280    	; 0x292 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8a c0       	rjmp	.+276    	; 0x292 <__bad_interrupt>
     17e:	00 00       	nop
     180:	88 c0       	rjmp	.+272    	; 0x292 <__bad_interrupt>
     182:	00 00       	nop
     184:	86 c0       	rjmp	.+268    	; 0x292 <__bad_interrupt>
     186:	00 00       	nop
     188:	84 c0       	rjmp	.+264    	; 0x292 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	82 c0       	rjmp	.+260    	; 0x292 <__bad_interrupt>
     18e:	00 00       	nop
     190:	80 c0       	rjmp	.+256    	; 0x292 <__bad_interrupt>
     192:	00 00       	nop
     194:	7e c0       	rjmp	.+252    	; 0x292 <__bad_interrupt>
     196:	00 00       	nop
     198:	7c c0       	rjmp	.+248    	; 0x292 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7a c0       	rjmp	.+244    	; 0x292 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	78 c0       	rjmp	.+240    	; 0x292 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	76 c0       	rjmp	.+236    	; 0x292 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	74 c0       	rjmp	.+232    	; 0x292 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	72 c0       	rjmp	.+228    	; 0x292 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	70 c0       	rjmp	.+224    	; 0x292 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	6e c0       	rjmp	.+220    	; 0x292 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	6c c0       	rjmp	.+216    	; 0x292 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6a c0       	rjmp	.+212    	; 0x292 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	68 c0       	rjmp	.+208    	; 0x292 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	66 c0       	rjmp	.+204    	; 0x292 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	64 c0       	rjmp	.+200    	; 0x292 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	62 c0       	rjmp	.+196    	; 0x292 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	60 c0       	rjmp	.+192    	; 0x292 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5e c0       	rjmp	.+188    	; 0x292 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	5c c0       	rjmp	.+184    	; 0x292 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5a c0       	rjmp	.+180    	; 0x292 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	58 c0       	rjmp	.+176    	; 0x292 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	54 c0       	rjmp	.+168    	; 0x292 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	52 c0       	rjmp	.+164    	; 0x292 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	50 c0       	rjmp	.+160    	; 0x292 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__vector_125>
     1f8:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__vector_126>
     1fc:	9b 06       	cpc	r9, r27
     1fe:	c2 06       	cpc	r12, r18
     200:	e9 06       	cpc	r14, r25
     202:	10 07       	cpc	r17, r16
     204:	37 07       	cpc	r19, r23
     206:	a7 07       	cpc	r26, r23
     208:	5e 07       	cpc	r21, r30
     20a:	83 07       	cpc	r24, r19
     20c:	a3 0b       	sbc	r26, r19
     20e:	a5 0b       	sbc	r26, r21
     210:	e3 0b       	sbc	r30, r19
     212:	22 0c       	add	r2, r2
     214:	2b 0c       	add	r2, r11
     216:	30 0c       	add	r3, r0
     218:	84 0c       	add	r8, r4
     21a:	89 0c       	add	r8, r9
     21c:	d1 0b       	sbc	r29, r17
     21e:	d4 0b       	sbc	r29, r20
     220:	d7 0b       	sbc	r29, r23
     222:	d9 0b       	sbc	r29, r25
     224:	db 0b       	sbc	r29, r27
     226:	dd 0b       	sbc	r29, r29
     228:	df 0b       	sbc	r29, r31
     22a:	e1 0b       	sbc	r30, r17
     22c:	0f 0c       	add	r0, r15
     22e:	12 0c       	add	r1, r2
     230:	15 0c       	add	r1, r5
     232:	18 0c       	add	r1, r8
     234:	1a 0c       	add	r1, r10
     236:	1c 0c       	add	r1, r12
     238:	1e 0c       	add	r1, r14
     23a:	20 0c       	add	r2, r0
     23c:	3c 0c       	add	r3, r12
     23e:	47 0c       	add	r4, r7
     240:	52 0c       	add	r5, r2
     242:	61 0c       	add	r6, r1
     244:	63 0c       	add	r6, r3
     246:	65 0c       	add	r6, r5
     248:	6f 0c       	add	r6, r15
     24a:	79 0c       	add	r7, r9
     24c:	01 10       	cpse	r0, r1
     24e:	04 10       	cpse	r0, r4
     250:	07 10       	cpse	r0, r7
     252:	0a 10       	cpse	r0, r10
     254:	0d 10       	cpse	r0, r13
     256:	10 10       	cpse	r1, r0
     258:	13 10       	cpse	r1, r3

0000025a <__ctors_end>:
     25a:	11 24       	eor	r1, r1
     25c:	1f be       	out	0x3f, r1	; 63
     25e:	cf ef       	ldi	r28, 0xFF	; 255
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df e2       	ldi	r29, 0x2F	; 47
     264:	de bf       	out	0x3e, r29	; 62

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	e8 e1       	ldi	r30, 0x18	; 24
     26e:	fd e2       	ldi	r31, 0x2D	; 45
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x10>
     272:	05 90       	lpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	a2 3b       	cpi	r26, 0xB2	; 178
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0xc>

0000027c <__do_clear_bss>:
     27c:	2e e2       	ldi	r18, 0x2E	; 46
     27e:	a2 eb       	ldi	r26, 0xB2	; 178
     280:	b0 e2       	ldi	r27, 0x20	; 32
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	a0 35       	cpi	r26, 0x50	; 80
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	53 d0       	rcall	.+166    	; 0x334 <main>
     28e:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <_exit>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <tiny_calibration_init>:

#include "tiny_calibration.h"
#include "globals.h"

tiny_calibration_init(){
	PR.PRPE &= 0b11111110;
     294:	e0 e7       	ldi	r30, 0x70	; 112
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	85 81       	ldd	r24, Z+5	; 0x05
     29a:	8e 7f       	andi	r24, 0xFE	; 254
     29c:	85 83       	std	Z+5, r24	; 0x05
	TC_CALI.PER = 24000;
     29e:	e0 e0       	ldi	r30, 0x00	; 0
     2a0:	fa e0       	ldi	r31, 0x0A	; 10
     2a2:	80 ec       	ldi	r24, 0xC0	; 192
     2a4:	9d e5       	ldi	r25, 0x5D	; 93
     2a6:	86 a3       	std	Z+38, r24	; 0x26
     2a8:	97 a3       	std	Z+39, r25	; 0x27
	TC_CALI.CNT = 12000;
     2aa:	80 ee       	ldi	r24, 0xE0	; 224
     2ac:	9e e2       	ldi	r25, 0x2E	; 46
     2ae:	80 a3       	std	Z+32, r24	; 0x20
     2b0:	91 a3       	std	Z+33, r25	; 0x21
	TC_CALI.CTRLA = TC_CLKSEL_DIV1_gc;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	80 83       	st	Z, r24
     2b6:	08 95       	ret

000002b8 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     2b8:	e0 e8       	ldi	r30, 0x80	; 128
     2ba:	f6 e0       	ldi	r31, 0x06	; 6
     2bc:	8f e0       	ldi	r24, 0x0F	; 15
     2be:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     2c0:	85 e0       	ldi	r24, 0x05	; 5
     2c2:	84 83       	std	Z+4, r24	; 0x04
     2c4:	08 95       	ret

000002c6 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     2c6:	08 95       	ret

000002c8 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * PACKET_SIZE], 250, iso_callback);
     2c8:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <usb_state>
     2cc:	2e ee       	ldi	r18, 0xEE	; 238
     2ce:	32 e0       	ldi	r19, 0x02	; 2
     2d0:	42 9f       	mul	r20, r18
     2d2:	c0 01       	movw	r24, r0
     2d4:	43 9f       	mul	r20, r19
     2d6:	90 0d       	add	r25, r0
     2d8:	11 24       	eor	r1, r1
     2da:	44 e6       	ldi	r20, 0x64	; 100
     2dc:	51 e0       	ldi	r21, 0x01	; 1
     2de:	6a ef       	ldi	r22, 0xFA	; 250
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	82 59       	subi	r24, 0x92	; 146
     2e4:	99 4d       	sbci	r25, 0xD9	; 217
     2e6:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <udi_vendor_iso_in_run>
     2ea:	08 95       	ret

000002ec <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 250], 250, iso_callback2);
     2ec:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <usb_state>
     2f0:	2e ee       	ldi	r18, 0xEE	; 238
     2f2:	32 e0       	ldi	r19, 0x02	; 2
     2f4:	42 9f       	mul	r20, r18
     2f6:	c0 01       	movw	r24, r0
     2f8:	43 9f       	mul	r20, r19
     2fa:	90 0d       	add	r25, r0
     2fc:	11 24       	eor	r1, r1
     2fe:	46 e7       	ldi	r20, 0x76	; 118
     300:	51 e0       	ldi	r21, 0x01	; 1
     302:	6a ef       	ldi	r22, 0xFA	; 250
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	88 59       	subi	r24, 0x98	; 152
     308:	98 4d       	sbci	r25, 0xD8	; 216
     30a:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <udi_vendor_iso_in_run2>
     30e:	08 95       	ret

00000310 <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 500], 250, iso_callback3);
     310:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <usb_state>
     314:	2e ee       	ldi	r18, 0xEE	; 238
     316:	32 e0       	ldi	r19, 0x02	; 2
     318:	42 9f       	mul	r20, r18
     31a:	c0 01       	movw	r24, r0
     31c:	43 9f       	mul	r20, r19
     31e:	90 0d       	add	r25, r0
     320:	11 24       	eor	r1, r1
     322:	48 e8       	ldi	r20, 0x88	; 136
     324:	51 e0       	ldi	r21, 0x01	; 1
     326:	6a ef       	ldi	r22, 0xFA	; 250
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	8e 59       	subi	r24, 0x9E	; 158
     32c:	97 4d       	sbci	r25, 0xD7	; 215
     32e:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <udi_vendor_iso_in_run3>
     332:	08 95       	ret

00000334 <main>:
#define CNT_CNT_MAX 256
volatile unsigned short cntCnt[CNT_CNT_MAX];
volatile unsigned short cntCntCnt = 0;

int main(void){
	irq_initialize_vectors();
     334:	87 e0       	ldi	r24, 0x07	; 7
     336:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     33a:	78 94       	sei
//	sysclk_init();

	
	//Set up 48MHz DFLL for USB.
	OSC.DFLLCTRL = OSC_RC32MCREF_USBSOF_gc;
     33c:	c0 e5       	ldi	r28, 0x50	; 80
     33e:	d0 e0       	ldi	r29, 0x00	; 0
     340:	14 e0       	ldi	r17, 0x04	; 4
     342:	1e 83       	std	Y+6, r17	; 0x06
	DFLLRC32M.CALB = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC)); //THIS is the val for 48MHz.  RCOSC32M is for a 32MHz calibration.  That makes a lot of sense now...
     344:	8c e1       	ldi	r24, 0x1C	; 28
     346:	f6 d0       	rcall	.+492    	; 0x534 <ReadCalibrationByte>
     348:	e0 e6       	ldi	r30, 0x60	; 96
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	83 83       	std	Z+3, r24	; 0x03
	DFLLRC32M.COMP2 = 0xBB;
     34e:	8b eb       	ldi	r24, 0xBB	; 187
     350:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.COMP1= 0x80;  //0xBB80 = 48,000.  
     352:	80 e8       	ldi	r24, 0x80	; 128
     354:	85 83       	std	Z+5, r24	; 0x05
	DFLLRC32M.CTRL = 0x01; //Enable
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 83       	st	Z, r24
	
	//Turn on the 48MHz clock and scale it down to 24MHz
	CCP = CCP_IOREG_gc;
     35a:	88 ed       	ldi	r24, 0xD8	; 216
     35c:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc;  //All peripheral clocks = CLKsys / 2.
     35e:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
	//CLK.USBCTRL handled by udc
	OSC.CTRL = OSC_RC32MEN_bm | OSC_RC2MEN_bm;  //Enable 32MHz reference.  Keep 2MHz on.
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	88 83       	st	Y, r24
	while(OSC.STATUS != (OSC_RC32MRDY_bm | OSC_RC2MRDY_bm)); //Wait for it to be ready before continuing		
     366:	e0 e5       	ldi	r30, 0x50	; 80
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	81 81       	ldd	r24, Z+1	; 0x01
     36c:	83 30       	cpi	r24, 0x03	; 3
     36e:	e9 f7       	brne	.-6      	; 0x36a <main+0x36>
		
	//4 step process from ASF manual.  Puts a 48MHz clock on the PLL output
	OSC.CTRL |= OSC_RC2MEN_bm;  //1. Enable reference clock source.
     370:	e0 e5       	ldi	r30, 0x50	; 80
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	81 60       	ori	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
	OSC.PLLCTRL = OSC_PLLSRC_RC2M_gc | 24; //2. Set the multiplication factor and select the clock reference for the PLL.
     37a:	88 e1       	ldi	r24, 0x18	; 24
     37c:	85 83       	std	Z+5, r24	; 0x05
	while(!(OSC.STATUS & OSC_RC2MRDY_bm)); //3. Wait until the clock reference source is stable.
     37e:	81 81       	ldd	r24, Z+1	; 0x01
     380:	80 ff       	sbrs	r24, 0
     382:	fd cf       	rjmp	.-6      	; 0x37e <main+0x4a>
	OSC.CTRL |= OSC_PLLEN_bm; //4. Enable the PLL
     384:	e0 e5       	ldi	r30, 0x50	; 80
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	80 61       	ori	r24, 0x10	; 16
     38c:	80 83       	st	Z, r24
	
	//Move CPU + Peripherals to 48MHz PLLL clock.
	while(!(OSC.STATUS & OSC_PLLRDY_bm));
     38e:	81 81       	ldd	r24, Z+1	; 0x01
     390:	84 ff       	sbrs	r24, 4
     392:	fd cf       	rjmp	.-6      	; 0x38e <main+0x5a>
	CCP = CCP_IOREG_gc;
     394:	88 ed       	ldi	r24, 0xD8	; 216
     396:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     398:	84 e0       	ldi	r24, 0x04	; 4
     39a:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
		
	board_init();
     39e:	93 df       	rcall	.-218    	; 0x2c6 <board_init>
	udc_start();
     3a0:	0e 94 23 0b 	call	0x1646	; 0x1646 <udc_start>
	tiny_dac_setup();
     3a4:	0d d1       	rcall	.+538    	; 0x5c0 <tiny_dac_setup>
	tiny_dma_setup();
     3a6:	30 d1       	rcall	.+608    	; 0x608 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	cc d0       	rcall	.+408    	; 0x546 <tiny_adc_setup>
	tiny_adc_pid_setup();
     3ae:	b8 d0       	rcall	.+368    	; 0x520 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     3b0:	8c e0       	ldi	r24, 0x0C	; 12
     3b2:	ac d0       	rcall	.+344    	; 0x50c <tiny_adc_ch1setup>
	tiny_timer_setup();
     3b4:	cf d6       	rcall	.+3486   	; 0x1154 <tiny_timer_setup>
	tiny_uart_setup();
     3b6:	8a d7       	rcall	.+3860   	; 0x12cc <tiny_uart_setup>
	tiny_spi_setup();
     3b8:	a1 d7       	rcall	.+3906   	; 0x12fc <tiny_spi_setup>
	tiny_dig_setup();
     3ba:	7e df       	rcall	.-260    	; 0x2b8 <tiny_dig_setup>
     3bc:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <debug_counter>
     3c0:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <debug_counter+0x1>
     3c4:	a0 91 5c 22 	lds	r26, 0x225C	; 0x80225c <debug_counter+0x2>
     3c8:	b0 91 5d 22 	lds	r27, 0x225D	; 0x80225d <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	a1 1d       	adc	r26, r1
     3d0:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	21 ee       	ldi	r18, 0xE1	; 225
     3d6:	92 07       	cpc	r25, r18
     3d8:	25 ef       	ldi	r18, 0xF5	; 245
     3da:	a2 07       	cpc	r26, r18
     3dc:	25 e0       	ldi	r18, 0x05	; 5
     3de:	b2 07       	cpc	r27, r18
     3e0:	18 f0       	brcs	.+6      	; 0x3e8 <main+0xb4>
			debug_counter = 0;
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     404:	e3 cf       	rjmp	.-58     	; 0x3cc <main+0x98>

00000406 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     406:	08 95       	ret

00000408 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     408:	08 95       	ret

0000040a <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	if(firstFrame){
     40a:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <firstFrame>
     40e:	88 23       	and	r24, r24
     410:	39 f0       	breq	.+14     	; 0x420 <main_sof_action+0x16>
		tiny_calibration_init();
     412:	40 df       	rcall	.-384    	; 0x294 <tiny_calibration_init>
		firstFrame = 0;
     414:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <firstFrame>
		tcinit = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <tcinit>
     41e:	36 c0       	rjmp	.+108    	; 0x48c <main_sof_action+0x82>
	}
	else{
		if(tcinit){
     420:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tcinit>
     424:	88 23       	and	r24, r24
     426:	91 f1       	breq	.+100    	; 0x48c <main_sof_action+0x82>
			DFLLRC2M.CALB += ((TC_CALI.CNT < 12000) ? 1 : -1 );
     428:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     42c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     430:	80 3e       	cpi	r24, 0xE0	; 224
     432:	9e 42       	sbci	r25, 0x2E	; 46
     434:	10 f0       	brcs	.+4      	; 0x43a <main_sof_action+0x30>
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	01 c0       	rjmp	.+2      	; 0x43c <main_sof_action+0x32>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	e8 e6       	ldi	r30, 0x68	; 104
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	93 81       	ldd	r25, Z+3	; 0x03
     442:	89 0f       	add	r24, r25
     444:	83 83       	std	Z+3, r24	; 0x03
			cntCnt[cntCntCnt] = TC_CALI.CNT;
     446:	e0 91 b2 20 	lds	r30, 0x20B2	; 0x8020b2 <__data_end>
     44a:	f0 91 b3 20 	lds	r31, 0x20B3	; 0x8020b3 <__data_end+0x1>
     44e:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     452:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     456:	ee 0f       	add	r30, r30
     458:	ff 1f       	adc	r31, r31
     45a:	e6 5b       	subi	r30, 0xB6	; 182
     45c:	f3 4d       	sbci	r31, 0xD3	; 211
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
			if(cntCntCnt == (CNT_CNT_MAX - 1)){
     462:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     466:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <__data_end+0x1>
     46a:	8f 3f       	cpi	r24, 0xFF	; 255
     46c:	91 05       	cpc	r25, r1
     46e:	29 f4       	brne	.+10     	; 0x47a <main_sof_action+0x70>
				cntCntCnt = 0;
     470:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <__data_end>
     474:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <__data_end+0x1>
     478:	09 c0       	rjmp	.+18     	; 0x48c <main_sof_action+0x82>
			}
			else cntCntCnt++;
     47a:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     47e:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <__data_end+0x1>
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
     488:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <__data_end+0x1>
		}
	}
	usb_state = !b1_state;
     48c:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	91 11       	cpse	r25, r1
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <usb_state>
     49a:	08 95       	ret

0000049c <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <main_b_vendor_enable>
	firstFrame = 1;
     4a2:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     4a6:	44 e6       	ldi	r20, 0x64	; 100
     4a8:	51 e0       	ldi	r21, 0x01	; 1
     4aa:	6e ee       	ldi	r22, 0xEE	; 238
     4ac:	72 e0       	ldi	r23, 0x02	; 2
     4ae:	8e e6       	ldi	r24, 0x6E	; 110
     4b0:	96 e2       	ldi	r25, 0x26	; 38
     4b2:	ba d7       	rcall	.+3956   	; 0x1428 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     4b4:	46 e7       	ldi	r20, 0x76	; 118
     4b6:	51 e0       	ldi	r21, 0x01	; 1
     4b8:	6e ee       	ldi	r22, 0xEE	; 238
     4ba:	72 e0       	ldi	r23, 0x02	; 2
     4bc:	88 e6       	ldi	r24, 0x68	; 104
     4be:	97 e2       	ldi	r25, 0x27	; 39
     4c0:	bf d7       	rcall	.+3966   	; 0x1440 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     4c2:	48 e8       	ldi	r20, 0x88	; 136
     4c4:	51 e0       	ldi	r21, 0x01	; 1
     4c6:	6e ee       	ldi	r22, 0xEE	; 238
     4c8:	72 e0       	ldi	r23, 0x02	; 2
     4ca:	82 e6       	ldi	r24, 0x62	; 98
     4cc:	98 e2       	ldi	r25, 0x28	; 40
     4ce:	c4 d7       	rcall	.+3976   	; 0x1458 <udi_vendor_iso_in_run3>
	return true;
}
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	08 95       	ret

000004d4 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     4d4:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <main_b_vendor_enable>
     4d8:	08 95       	ret

000004da <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	08 95       	ret

000004de <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	08 95       	ret

000004e2 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     4e2:	e0 e0       	ldi	r30, 0x00	; 0
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     4e8:	98 2f       	mov	r25, r24
     4ea:	9c 71       	andi	r25, 0x1C	; 28
     4ec:	93 68       	ori	r25, 0x83	; 131
     4ee:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     4f0:	88 23       	and	r24, r24
     4f2:	1c f4       	brge	.+6      	; 0x4fa <tiny_adc_ch0setup+0x18>
     4f4:	90 e1       	ldi	r25, 0x10	; 16
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <tiny_adc_ch0setup+0x1c>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	89 2b       	or	r24, r25
     500:	e0 e0       	ldi	r30, 0x00	; 0
     502:	f2 e0       	ldi	r31, 0x02	; 2
     504:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     506:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     508:	16 a2       	std	Z+38, r1	; 0x26
     50a:	08 95       	ret

0000050c <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     50c:	e0 e0       	ldi	r30, 0x00	; 0
     50e:	f2 e0       	ldi	r31, 0x02	; 2
     510:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     512:	83 68       	ori	r24, 0x83	; 131
     514:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     516:	80 e1       	ldi	r24, 0x10	; 16
     518:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     51a:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     51c:	16 aa       	std	Z+54, r1	; 0x36
     51e:	08 95       	ret

00000520 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     520:	e0 e0       	ldi	r30, 0x00	; 0
     522:	f2 e0       	ldi	r31, 0x02	; 2
     524:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     526:	83 e8       	ldi	r24, 0x83	; 131
     528:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     52a:	8f e2       	ldi	r24, 0x2F	; 47
     52c:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     52e:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     530:	16 a6       	std	Z+46, r1	; 0x2e
     532:	08 95       	ret

00000534 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     534:	aa ec       	ldi	r26, 0xCA	; 202
     536:	b1 e0       	ldi	r27, 0x01	; 1
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     53c:	e8 2f       	mov	r30, r24
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     542:	1c 92       	st	X, r1

	return( result );
     544:	08 95       	ret

00000546 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     54a:	e0 e7       	ldi	r30, 0x70	; 112
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	9d 7f       	andi	r25, 0xFD	; 253
     552:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     554:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     558:	62 30       	cpi	r22, 0x02	; 2
     55a:	31 f1       	breq	.+76     	; 0x5a8 <tiny_adc_setup+0x62>
     55c:	e0 e0       	ldi	r30, 0x00	; 0
     55e:	f2 e0       	ldi	r31, 0x02	; 2
     560:	9c e1       	ldi	r25, 0x1C	; 28
     562:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     564:	90 e4       	ldi	r25, 0x40	; 64
     566:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     568:	81 11       	cpse	r24, r1
     56a:	02 c0       	rjmp	.+4      	; 0x570 <tiny_adc_setup+0x2a>
     56c:	80 e4       	ldi	r24, 0x40	; 64
     56e:	01 c0       	rjmp	.+2      	; 0x572 <tiny_adc_setup+0x2c>
     570:	80 ec       	ldi	r24, 0xC0	; 192
     572:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     576:	61 30       	cpi	r22, 0x01	; 1
     578:	11 f0       	breq	.+4      	; 0x57e <tiny_adc_setup+0x38>
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	01 c0       	rjmp	.+2      	; 0x580 <tiny_adc_setup+0x3a>
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	c0 e0       	ldi	r28, 0x00	; 0
     582:	d2 e0       	ldi	r29, 0x02	; 2
     584:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     586:	80 e2       	ldi	r24, 0x20	; 32
     588:	d5 df       	rcall	.-86     	; 0x534 <ReadCalibrationByte>
     58a:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     58c:	81 e2       	ldi	r24, 0x21	; 33
     58e:	d2 df       	rcall	.-92     	; 0x534 <ReadCalibrationByte>
     590:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     592:	18 8e       	std	Y+24, r1	; 0x18
     594:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     59a:	c2 df       	rcall	.-124    	; 0x520 <tiny_adc_pid_setup>
     59c:	0e c0       	rjmp	.+28     	; 0x5ba <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     59e:	80 ec       	ldi	r24, 0xC0	; 192
     5a0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     5a4:	83 e0       	ldi	r24, 0x03	; 3
     5a6:	ec cf       	rjmp	.-40     	; 0x580 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     5a8:	e0 e0       	ldi	r30, 0x00	; 0
     5aa:	f2 e0       	ldi	r31, 0x02	; 2
     5ac:	9e e1       	ldi	r25, 0x1E	; 30
     5ae:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     5b0:	90 e4       	ldi	r25, 0x40	; 64
     5b2:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     5b4:	81 11       	cpse	r24, r1
     5b6:	f3 cf       	rjmp	.-26     	; 0x59e <tiny_adc_setup+0x58>
     5b8:	d9 cf       	rjmp	.-78     	; 0x56c <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     5c4:	e0 e7       	ldi	r30, 0x70	; 112
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	82 81       	ldd	r24, Z+2	; 0x02
     5ca:	8b 7f       	andi	r24, 0xFB	; 251
     5cc:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     5ce:	c0 e2       	ldi	r28, 0x20	; 32
     5d0:	d3 e0       	ldi	r29, 0x03	; 3
     5d2:	8d e0       	ldi	r24, 0x0D	; 13
     5d4:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     5d6:	80 e4       	ldi	r24, 0x40	; 64
     5d8:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     5da:	89 e0       	ldi	r24, 0x09	; 9
     5dc:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     5de:	83 e3       	ldi	r24, 0x33	; 51
     5e0:	a9 df       	rcall	.-174    	; 0x534 <ReadCalibrationByte>
     5e2:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     5e4:	82 e3       	ldi	r24, 0x32	; 50
     5e6:	a6 df       	rcall	.-180    	; 0x534 <ReadCalibrationByte>
     5e8:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     5ea:	87 e3       	ldi	r24, 0x37	; 55
     5ec:	a3 df       	rcall	.-186    	; 0x534 <ReadCalibrationByte>
     5ee:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     5f0:	86 e3       	ldi	r24, 0x36	; 54
     5f2:	a0 df       	rcall	.-192    	; 0x534 <ReadCalibrationByte>
     5f4:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     5f6:	e0 e2       	ldi	r30, 0x20	; 32
     5f8:	f6 e0       	ldi	r31, 0x06	; 6
     5fa:	80 81       	ld	r24, Z
     5fc:	83 60       	ori	r24, 0x03	; 3
     5fe:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     600:	14 82       	std	Z+4, r1	; 0x04
	
	

     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     608:	e0 e7       	ldi	r30, 0x70	; 112
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	8e 7f       	andi	r24, 0xFE	; 254
     610:	80 83       	st	Z, r24
     612:	83 e8       	ldi	r24, 0x83	; 131
     614:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     618:	08 95       	ret

0000061a <tiny_dma_flush>:
     61a:	e0 e0       	ldi	r30, 0x00	; 0
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	10 8a       	std	Z+16, r1	; 0x10
     620:	80 e4       	ldi	r24, 0x40	; 64
     622:	80 8b       	std	Z+16, r24	; 0x10
     624:	10 a2       	std	Z+32, r1	; 0x20
     626:	80 a3       	std	Z+32, r24	; 0x20
     628:	10 aa       	std	Z+48, r1	; 0x30
     62a:	80 ab       	std	Z+48, r24	; 0x30
     62c:	e0 e4       	ldi	r30, 0x40	; 64
     62e:	f1 e0       	ldi	r31, 0x01	; 1
     630:	10 82       	st	Z, r1
     632:	80 83       	st	Z, r24
     634:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <b1_state>
     638:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <b2_state>
     63c:	08 95       	ret

0000063e <tiny_dma_set_mode_0>:
     63e:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
     642:	eb df       	rcall	.-42     	; 0x61a <tiny_dma_flush>
     644:	e0 e0       	ldi	r30, 0x00	; 0
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	16 aa       	std	Z+54, r1	; 0x36
     64a:	94 e2       	ldi	r25, 0x24	; 36
     64c:	90 ab       	std	Z+48, r25	; 0x30
     64e:	11 aa       	std	Z+49, r1	; 0x31
     650:	49 e5       	ldi	r20, 0x59	; 89
     652:	42 ab       	std	Z+50, r20	; 0x32
     654:	32 e0       	ldi	r19, 0x02	; 2
     656:	33 ab       	std	Z+51, r19	; 0x33
     658:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     65c:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     660:	64 ab       	std	Z+52, r22	; 0x34
     662:	75 ab       	std	Z+53, r23	; 0x35
     664:	6e e6       	ldi	r22, 0x6E	; 110
     666:	74 e2       	ldi	r23, 0x24	; 36
     668:	60 af       	std	Z+56, r22	; 0x38
     66a:	71 af       	std	Z+57, r23	; 0x39
     66c:	12 ae       	std	Z+58, r1	; 0x3a
     66e:	8b e3       	ldi	r24, 0x3B	; 59
     670:	84 af       	std	Z+60, r24	; 0x3c
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     678:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     67c:	20 a9       	ldd	r18, Z+48	; 0x30
     67e:	20 68       	ori	r18, 0x80	; 128
     680:	20 ab       	std	Z+48, r18	; 0x30
     682:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     686:	a0 e4       	ldi	r26, 0x40	; 64
     688:	b1 e0       	ldi	r27, 0x01	; 1
     68a:	9c 93       	st	X, r25
     68c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     690:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     694:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     698:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     69c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     6a0:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     6a4:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     6a8:	4e e5       	ldi	r20, 0x5E	; 94
     6aa:	52 e2       	ldi	r21, 0x22	; 34
     6ac:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     6b0:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     6b4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     6b8:	29 e3       	ldi	r18, 0x39	; 57
     6ba:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     6be:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     6c2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     6c6:	2c 91       	ld	r18, X
     6c8:	20 68       	ori	r18, 0x80	; 128
     6ca:	2c 93       	st	X, r18
     6cc:	10 8a       	std	Z+16, r1	; 0x10
     6ce:	20 e4       	ldi	r18, 0x40	; 64
     6d0:	20 8b       	std	Z+16, r18	; 0x10
     6d2:	24 e0       	ldi	r18, 0x04	; 4
     6d4:	20 8b       	std	Z+16, r18	; 0x10
     6d6:	81 8b       	std	Z+17, r24	; 0x11
     6d8:	81 e9       	ldi	r24, 0x91	; 145
     6da:	82 8b       	std	Z+18, r24	; 0x12
     6dc:	80 e1       	ldi	r24, 0x10	; 16
     6de:	83 8b       	std	Z+19, r24	; 0x13
     6e0:	47 e7       	ldi	r20, 0x77	; 119
     6e2:	51 e0       	ldi	r21, 0x01	; 1
     6e4:	44 8b       	std	Z+20, r20	; 0x14
     6e6:	55 8b       	std	Z+21, r21	; 0x15
     6e8:	90 8f       	std	Z+24, r25	; 0x18
     6ea:	31 8f       	std	Z+25, r19	; 0x19
     6ec:	12 8e       	std	Z+26, r1	; 0x1a
     6ee:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     6f2:	2e ee       	ldi	r18, 0xEE	; 238
     6f4:	32 e0       	ldi	r19, 0x02	; 2
     6f6:	42 9f       	mul	r20, r18
     6f8:	c0 01       	movw	r24, r0
     6fa:	43 9f       	mul	r20, r19
     6fc:	90 0d       	add	r25, r0
     6fe:	11 24       	eor	r1, r1
     700:	82 59       	subi	r24, 0x92	; 146
     702:	99 4d       	sbci	r25, 0xD9	; 217
     704:	84 8f       	std	Z+28, r24	; 0x1c
     706:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     70a:	42 9f       	mul	r20, r18
     70c:	c0 01       	movw	r24, r0
     70e:	43 9f       	mul	r20, r19
     710:	90 0d       	add	r25, r0
     712:	11 24       	eor	r1, r1
     714:	82 59       	subi	r24, 0x92	; 146
     716:	99 4d       	sbci	r25, 0xD9	; 217
     718:	95 8f       	std	Z+29, r25	; 0x1d
     71a:	16 8e       	std	Z+30, r1	; 0x1e
     71c:	80 89       	ldd	r24, Z+16	; 0x10
     71e:	80 68       	ori	r24, 0x80	; 128
     720:	80 8b       	std	Z+16, r24	; 0x10
     722:	08 95       	ret

00000724 <tiny_dma_set_mode_1>:
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     72e:	75 df       	rcall	.-278    	; 0x61a <tiny_dma_flush>
     730:	e0 e0       	ldi	r30, 0x00	; 0
     732:	f1 e0       	ldi	r31, 0x01	; 1
     734:	10 aa       	std	Z+48, r1	; 0x30
     736:	80 e4       	ldi	r24, 0x40	; 64
     738:	80 ab       	std	Z+48, r24	; 0x30
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	90 ab       	std	Z+48, r25	; 0x30
     73e:	11 aa       	std	Z+49, r1	; 0x31
     740:	12 aa       	std	Z+50, r1	; 0x32
     742:	5b e4       	ldi	r21, 0x4B	; 75
     744:	53 ab       	std	Z+51, r21	; 0x33
     746:	14 aa       	std	Z+52, r1	; 0x34
     748:	15 aa       	std	Z+53, r1	; 0x35
     74a:	16 aa       	std	Z+54, r1	; 0x36
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e2       	ldi	r19, 0x20	; 32
     750:	20 af       	std	Z+56, r18	; 0x38
     752:	31 af       	std	Z+57, r19	; 0x39
     754:	12 ae       	std	Z+58, r1	; 0x3a
     756:	40 ea       	ldi	r20, 0xA0	; 160
     758:	44 af       	std	Z+60, r20	; 0x3c
     75a:	38 e0       	ldi	r19, 0x08	; 8
     75c:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     760:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     764:	80 a9       	ldd	r24, Z+48	; 0x30
     766:	80 6a       	ori	r24, 0xA0	; 160
     768:	80 ab       	std	Z+48, r24	; 0x30
     76a:	85 e5       	ldi	r24, 0x55	; 85
     76c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     770:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     774:	a0 e4       	ldi	r26, 0x40	; 64
     776:	b1 e0       	ldi	r27, 0x01	; 1
     778:	d4 e2       	ldi	r29, 0x24	; 36
     77a:	dc 93       	st	X, r29
     77c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     780:	89 e5       	ldi	r24, 0x59	; 89
     782:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     786:	c2 e0       	ldi	r28, 0x02	; 2
     788:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     78c:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     790:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     794:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     798:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     79c:	6e e6       	ldi	r22, 0x6E	; 110
     79e:	74 e2       	ldi	r23, 0x24	; 36
     7a0:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     7a4:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     7a8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     7ac:	8b e3       	ldi	r24, 0x3B	; 59
     7ae:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     7b8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     7bc:	2c 91       	ld	r18, X
     7be:	20 68       	ori	r18, 0x80	; 128
     7c0:	2c 93       	st	X, r18
     7c2:	90 8b       	std	Z+16, r25	; 0x10
     7c4:	81 8b       	std	Z+17, r24	; 0x11
     7c6:	a1 e9       	ldi	r26, 0x91	; 145
     7c8:	a2 8b       	std	Z+18, r26	; 0x12
     7ca:	20 e1       	ldi	r18, 0x10	; 16
     7cc:	23 8b       	std	Z+19, r18	; 0x13
     7ce:	67 e7       	ldi	r22, 0x77	; 119
     7d0:	71 e0       	ldi	r23, 0x01	; 1
     7d2:	64 8b       	std	Z+20, r22	; 0x14
     7d4:	75 8b       	std	Z+21, r23	; 0x15
     7d6:	d0 8f       	std	Z+24, r29	; 0x18
     7d8:	c1 8f       	std	Z+25, r28	; 0x19
     7da:	12 8e       	std	Z+26, r1	; 0x1a
     7dc:	ce e6       	ldi	r28, 0x6E	; 110
     7de:	d6 e2       	ldi	r29, 0x26	; 38
     7e0:	c4 8f       	std	Z+28, r28	; 0x1c
     7e2:	d5 8f       	std	Z+29, r29	; 0x1d
     7e4:	16 8e       	std	Z+30, r1	; 0x1e
     7e6:	20 89       	ldd	r18, Z+16	; 0x10
     7e8:	20 68       	ori	r18, 0x80	; 128
     7ea:	20 8b       	std	Z+16, r18	; 0x10
     7ec:	90 a3       	std	Z+32, r25	; 0x20
     7ee:	81 a3       	std	Z+33, r24	; 0x21
     7f0:	a2 a3       	std	Z+34, r26	; 0x22
     7f2:	53 a3       	std	Z+35, r21	; 0x23
     7f4:	64 a3       	std	Z+36, r22	; 0x24
     7f6:	75 a3       	std	Z+37, r23	; 0x25
     7f8:	40 a7       	std	Z+40, r20	; 0x28
     7fa:	31 a7       	std	Z+41, r19	; 0x29
     7fc:	12 a6       	std	Z+42, r1	; 0x2a
     7fe:	85 ee       	ldi	r24, 0xE5	; 229
     800:	97 e2       	ldi	r25, 0x27	; 39
     802:	84 a7       	std	Z+44, r24	; 0x2c
     804:	95 a7       	std	Z+45, r25	; 0x2d
     806:	16 a6       	std	Z+46, r1	; 0x2e
     808:	80 a1       	ldd	r24, Z+32	; 0x20
     80a:	80 68       	ori	r24, 0x80	; 128
     80c:	80 a3       	std	Z+32, r24	; 0x20
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <tiny_dma_set_mode_2>:
     814:	cf 93       	push	r28
     816:	f8 94       	cli
     818:	c2 e0       	ldi	r28, 0x02	; 2
     81a:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     81e:	fd de       	rcall	.-518    	; 0x61a <tiny_dma_flush>
     820:	e0 e0       	ldi	r30, 0x00	; 0
     822:	f1 e0       	ldi	r31, 0x01	; 1
     824:	16 aa       	std	Z+54, r1	; 0x36
     826:	94 e2       	ldi	r25, 0x24	; 36
     828:	90 ab       	std	Z+48, r25	; 0x30
     82a:	11 aa       	std	Z+49, r1	; 0x31
     82c:	39 e5       	ldi	r19, 0x59	; 89
     82e:	32 ab       	std	Z+50, r19	; 0x32
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	83 ab       	std	Z+51, r24	; 0x33
     834:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     838:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     83c:	44 ab       	std	Z+52, r20	; 0x34
     83e:	55 ab       	std	Z+53, r21	; 0x35
     840:	4e e5       	ldi	r20, 0x5E	; 94
     842:	52 e2       	ldi	r21, 0x22	; 34
     844:	40 af       	std	Z+56, r20	; 0x38
     846:	51 af       	std	Z+57, r21	; 0x39
     848:	12 ae       	std	Z+58, r1	; 0x3a
     84a:	29 e3       	ldi	r18, 0x39	; 57
     84c:	24 af       	std	Z+60, r18	; 0x3c
     84e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     852:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     856:	20 a9       	ldd	r18, Z+48	; 0x30
     858:	20 68       	ori	r18, 0x80	; 128
     85a:	20 ab       	std	Z+48, r18	; 0x30
     85c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     860:	a0 e4       	ldi	r26, 0x40	; 64
     862:	b1 e0       	ldi	r27, 0x01	; 1
     864:	9c 93       	st	X, r25
     866:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     86a:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     86e:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     872:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     876:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     87a:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     87e:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     882:	2e e6       	ldi	r18, 0x6E	; 110
     884:	34 e2       	ldi	r19, 0x24	; 36
     886:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     88a:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     88e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     892:	2b e3       	ldi	r18, 0x3B	; 59
     894:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     898:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     89c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     8a0:	2c 91       	ld	r18, X
     8a2:	20 68       	ori	r18, 0x80	; 128
     8a4:	2c 93       	st	X, r18
     8a6:	54 e0       	ldi	r21, 0x04	; 4
     8a8:	50 8b       	std	Z+16, r21	; 0x10
     8aa:	81 8b       	std	Z+17, r24	; 0x11
     8ac:	41 e9       	ldi	r20, 0x91	; 145
     8ae:	42 8b       	std	Z+18, r20	; 0x12
     8b0:	20 e1       	ldi	r18, 0x10	; 16
     8b2:	23 8b       	std	Z+19, r18	; 0x13
     8b4:	27 e7       	ldi	r18, 0x77	; 119
     8b6:	31 e0       	ldi	r19, 0x01	; 1
     8b8:	24 8b       	std	Z+20, r18	; 0x14
     8ba:	35 8b       	std	Z+21, r19	; 0x15
     8bc:	90 8f       	std	Z+24, r25	; 0x18
     8be:	c1 8f       	std	Z+25, r28	; 0x19
     8c0:	12 8e       	std	Z+26, r1	; 0x1a
     8c2:	6e e6       	ldi	r22, 0x6E	; 110
     8c4:	76 e2       	ldi	r23, 0x26	; 38
     8c6:	64 8f       	std	Z+28, r22	; 0x1c
     8c8:	75 8f       	std	Z+29, r23	; 0x1d
     8ca:	16 8e       	std	Z+30, r1	; 0x1e
     8cc:	90 89       	ldd	r25, Z+16	; 0x10
     8ce:	90 68       	ori	r25, 0x80	; 128
     8d0:	90 8b       	std	Z+16, r25	; 0x10
     8d2:	50 a3       	std	Z+32, r21	; 0x20
     8d4:	81 a3       	std	Z+33, r24	; 0x21
     8d6:	42 a3       	std	Z+34, r20	; 0x22
     8d8:	82 e1       	ldi	r24, 0x12	; 18
     8da:	83 a3       	std	Z+35, r24	; 0x23
     8dc:	24 a3       	std	Z+36, r18	; 0x24
     8de:	35 a3       	std	Z+37, r19	; 0x25
     8e0:	84 e3       	ldi	r24, 0x34	; 52
     8e2:	80 a7       	std	Z+40, r24	; 0x28
     8e4:	c1 a7       	std	Z+41, r28	; 0x29
     8e6:	12 a6       	std	Z+42, r1	; 0x2a
     8e8:	85 ee       	ldi	r24, 0xE5	; 229
     8ea:	97 e2       	ldi	r25, 0x27	; 39
     8ec:	84 a7       	std	Z+44, r24	; 0x2c
     8ee:	95 a7       	std	Z+45, r25	; 0x2d
     8f0:	16 a6       	std	Z+46, r1	; 0x2e
     8f2:	80 a1       	ldd	r24, Z+32	; 0x20
     8f4:	80 68       	ori	r24, 0x80	; 128
     8f6:	80 a3       	std	Z+32, r24	; 0x20
     8f8:	78 94       	sei
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <tiny_dma_set_mode_3>:
     8fe:	cf 93       	push	r28
     900:	c3 e0       	ldi	r28, 0x03	; 3
     902:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     906:	89 de       	rcall	.-750    	; 0x61a <tiny_dma_flush>
     908:	e0 e0       	ldi	r30, 0x00	; 0
     90a:	f1 e0       	ldi	r31, 0x01	; 1
     90c:	10 a2       	std	Z+32, r1	; 0x20
     90e:	50 e4       	ldi	r21, 0x40	; 64
     910:	50 a3       	std	Z+32, r21	; 0x20
     912:	44 e0       	ldi	r20, 0x04	; 4
     914:	40 a3       	std	Z+32, r20	; 0x20
     916:	11 a2       	std	Z+33, r1	; 0x21
     918:	12 a2       	std	Z+34, r1	; 0x22
     91a:	3b e4       	ldi	r19, 0x4B	; 75
     91c:	33 a3       	std	Z+35, r19	; 0x23
     91e:	14 a2       	std	Z+36, r1	; 0x24
     920:	15 a2       	std	Z+37, r1	; 0x25
     922:	16 a2       	std	Z+38, r1	; 0x26
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e2       	ldi	r25, 0x20	; 32
     928:	80 a7       	std	Z+40, r24	; 0x28
     92a:	91 a7       	std	Z+41, r25	; 0x29
     92c:	12 a6       	std	Z+42, r1	; 0x2a
     92e:	20 ea       	ldi	r18, 0xA0	; 160
     930:	24 a7       	std	Z+44, r18	; 0x2c
     932:	98 e0       	ldi	r25, 0x08	; 8
     934:	95 a7       	std	Z+45, r25	; 0x2d
     936:	16 a6       	std	Z+46, r1	; 0x2e
     938:	80 a1       	ldd	r24, Z+32	; 0x20
     93a:	80 6a       	ori	r24, 0xA0	; 160
     93c:	80 a3       	std	Z+32, r24	; 0x20
     93e:	85 e5       	ldi	r24, 0x55	; 85
     940:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     944:	16 aa       	std	Z+54, r1	; 0x36
     946:	74 e2       	ldi	r23, 0x24	; 36
     948:	70 ab       	std	Z+48, r23	; 0x30
     94a:	11 aa       	std	Z+49, r1	; 0x31
     94c:	69 e5       	ldi	r22, 0x59	; 89
     94e:	62 ab       	std	Z+50, r22	; 0x32
     950:	c3 ab       	std	Z+51, r28	; 0x33
     952:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <dacBuf_len>
     956:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <dacBuf_len+0x1>
     95a:	a4 ab       	std	Z+52, r26	; 0x34
     95c:	b5 ab       	std	Z+53, r27	; 0x35
     95e:	ae e5       	ldi	r26, 0x5E	; 94
     960:	b2 e2       	ldi	r27, 0x22	; 34
     962:	a0 af       	std	Z+56, r26	; 0x38
     964:	b1 af       	std	Z+57, r27	; 0x39
     966:	12 ae       	std	Z+58, r1	; 0x3a
     968:	89 e3       	ldi	r24, 0x39	; 57
     96a:	84 af       	std	Z+60, r24	; 0x3c
     96c:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     970:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     974:	80 a9       	ldd	r24, Z+48	; 0x30
     976:	80 68       	ori	r24, 0x80	; 128
     978:	80 ab       	std	Z+48, r24	; 0x30
     97a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     97e:	a0 e4       	ldi	r26, 0x40	; 64
     980:	b1 e0       	ldi	r27, 0x01	; 1
     982:	7c 93       	st	X, r23
     984:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     988:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     992:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     996:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     99a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     99e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     9a2:	6e e6       	ldi	r22, 0x6E	; 110
     9a4:	74 e2       	ldi	r23, 0x24	; 36
     9a6:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     9aa:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     9ae:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     9b2:	8b e3       	ldi	r24, 0x3B	; 59
     9b4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     9b8:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     9bc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     9c0:	8c 91       	ld	r24, X
     9c2:	80 68       	ori	r24, 0x80	; 128
     9c4:	8c 93       	st	X, r24
     9c6:	10 8a       	std	Z+16, r1	; 0x10
     9c8:	50 8b       	std	Z+16, r21	; 0x10
     9ca:	40 8b       	std	Z+16, r20	; 0x10
     9cc:	c1 8b       	std	Z+17, r28	; 0x11
     9ce:	81 e9       	ldi	r24, 0x91	; 145
     9d0:	82 8b       	std	Z+18, r24	; 0x12
     9d2:	33 8b       	std	Z+19, r19	; 0x13
     9d4:	47 e7       	ldi	r20, 0x77	; 119
     9d6:	51 e0       	ldi	r21, 0x01	; 1
     9d8:	44 8b       	std	Z+20, r20	; 0x14
     9da:	55 8b       	std	Z+21, r21	; 0x15
     9dc:	20 8f       	std	Z+24, r18	; 0x18
     9de:	91 8f       	std	Z+25, r25	; 0x19
     9e0:	12 8e       	std	Z+26, r1	; 0x1a
     9e2:	8e e6       	ldi	r24, 0x6E	; 110
     9e4:	96 e2       	ldi	r25, 0x26	; 38
     9e6:	84 8f       	std	Z+28, r24	; 0x1c
     9e8:	95 8f       	std	Z+29, r25	; 0x1d
     9ea:	16 8e       	std	Z+30, r1	; 0x1e
     9ec:	80 89       	ldd	r24, Z+16	; 0x10
     9ee:	80 68       	ori	r24, 0x80	; 128
     9f0:	80 8b       	std	Z+16, r24	; 0x10
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <tiny_dma_set_mode_4>:
     9f6:	cf 93       	push	r28
     9f8:	c4 e0       	ldi	r28, 0x04	; 4
     9fa:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     9fe:	0d de       	rcall	.-998    	; 0x61a <tiny_dma_flush>
     a00:	e0 e0       	ldi	r30, 0x00	; 0
     a02:	f1 e0       	ldi	r31, 0x01	; 1
     a04:	10 a2       	std	Z+32, r1	; 0x20
     a06:	80 e4       	ldi	r24, 0x40	; 64
     a08:	80 a3       	std	Z+32, r24	; 0x20
     a0a:	c0 a3       	std	Z+32, r28	; 0x20
     a0c:	11 a2       	std	Z+33, r1	; 0x21
     a0e:	12 a2       	std	Z+34, r1	; 0x22
     a10:	4b e4       	ldi	r20, 0x4B	; 75
     a12:	43 a3       	std	Z+35, r20	; 0x23
     a14:	14 a2       	std	Z+36, r1	; 0x24
     a16:	15 a2       	std	Z+37, r1	; 0x25
     a18:	16 a2       	std	Z+38, r1	; 0x26
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e2       	ldi	r25, 0x20	; 32
     a1e:	80 a7       	std	Z+40, r24	; 0x28
     a20:	91 a7       	std	Z+41, r25	; 0x29
     a22:	12 a6       	std	Z+42, r1	; 0x2a
     a24:	60 ea       	ldi	r22, 0xA0	; 160
     a26:	64 a7       	std	Z+44, r22	; 0x2c
     a28:	88 e0       	ldi	r24, 0x08	; 8
     a2a:	85 a7       	std	Z+45, r24	; 0x2d
     a2c:	16 a6       	std	Z+46, r1	; 0x2e
     a2e:	90 a1       	ldd	r25, Z+32	; 0x20
     a30:	90 6a       	ori	r25, 0xA0	; 160
     a32:	90 a3       	std	Z+32, r25	; 0x20
     a34:	95 e5       	ldi	r25, 0x55	; 85
     a36:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     a3a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     a3e:	a0 e4       	ldi	r26, 0x40	; 64
     a40:	b1 e0       	ldi	r27, 0x01	; 1
     a42:	94 e2       	ldi	r25, 0x24	; 36
     a44:	9c 93       	st	X, r25
     a46:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     a4a:	99 e5       	ldi	r25, 0x59	; 89
     a4c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     a56:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     a5a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     a5e:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a62:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     a66:	2e e6       	ldi	r18, 0x6E	; 110
     a68:	34 e2       	ldi	r19, 0x24	; 36
     a6a:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a6e:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a72:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     a76:	9b e3       	ldi	r25, 0x3B	; 59
     a78:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a7c:	93 e0       	ldi	r25, 0x03	; 3
     a7e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a82:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     a86:	2c 91       	ld	r18, X
     a88:	20 68       	ori	r18, 0x80	; 128
     a8a:	2c 93       	st	X, r18
     a8c:	c0 8b       	std	Z+16, r28	; 0x10
     a8e:	91 8b       	std	Z+17, r25	; 0x11
     a90:	31 e9       	ldi	r19, 0x91	; 145
     a92:	32 8b       	std	Z+18, r19	; 0x12
     a94:	43 8b       	std	Z+19, r20	; 0x13
     a96:	47 e7       	ldi	r20, 0x77	; 119
     a98:	51 e0       	ldi	r21, 0x01	; 1
     a9a:	44 8b       	std	Z+20, r20	; 0x14
     a9c:	55 8b       	std	Z+21, r21	; 0x15
     a9e:	60 8f       	std	Z+24, r22	; 0x18
     aa0:	81 8f       	std	Z+25, r24	; 0x19
     aa2:	12 8e       	std	Z+26, r1	; 0x1a
     aa4:	6e e6       	ldi	r22, 0x6E	; 110
     aa6:	76 e2       	ldi	r23, 0x26	; 38
     aa8:	64 8f       	std	Z+28, r22	; 0x1c
     aaa:	75 8f       	std	Z+29, r23	; 0x1d
     aac:	16 8e       	std	Z+30, r1	; 0x1e
     aae:	20 89       	ldd	r18, Z+16	; 0x10
     ab0:	20 68       	ori	r18, 0x80	; 128
     ab2:	20 8b       	std	Z+16, r18	; 0x10
     ab4:	c0 ab       	std	Z+48, r28	; 0x30
     ab6:	91 ab       	std	Z+49, r25	; 0x31
     ab8:	32 ab       	std	Z+50, r19	; 0x32
     aba:	9a e4       	ldi	r25, 0x4A	; 74
     abc:	93 ab       	std	Z+51, r25	; 0x33
     abe:	44 ab       	std	Z+52, r20	; 0x34
     ac0:	55 ab       	std	Z+53, r21	; 0x35
     ac2:	93 ec       	ldi	r25, 0xC3	; 195
     ac4:	90 af       	std	Z+56, r25	; 0x38
     ac6:	81 af       	std	Z+57, r24	; 0x39
     ac8:	12 ae       	std	Z+58, r1	; 0x3a
     aca:	85 ee       	ldi	r24, 0xE5	; 229
     acc:	97 e2       	ldi	r25, 0x27	; 39
     ace:	84 af       	std	Z+60, r24	; 0x3c
     ad0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     ad4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ad8:	80 a9       	ldd	r24, Z+48	; 0x30
     ada:	80 68       	ori	r24, 0x80	; 128
     adc:	80 ab       	std	Z+48, r24	; 0x30
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <tiny_dma_set_mode_5>:
     ae2:	85 e0       	ldi	r24, 0x05	; 5
     ae4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     ae8:	98 dd       	rcall	.-1232   	; 0x61a <tiny_dma_flush>
     aea:	e0 e0       	ldi	r30, 0x00	; 0
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	16 aa       	std	Z+54, r1	; 0x36
     af0:	34 e2       	ldi	r19, 0x24	; 36
     af2:	30 ab       	std	Z+48, r19	; 0x30
     af4:	11 aa       	std	Z+49, r1	; 0x31
     af6:	29 e5       	ldi	r18, 0x59	; 89
     af8:	22 ab       	std	Z+50, r18	; 0x32
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	83 ab       	std	Z+51, r24	; 0x33
     afe:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     b02:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b06:	44 ab       	std	Z+52, r20	; 0x34
     b08:	55 ab       	std	Z+53, r21	; 0x35
     b0a:	4e e5       	ldi	r20, 0x5E	; 94
     b0c:	52 e2       	ldi	r21, 0x22	; 34
     b0e:	40 af       	std	Z+56, r20	; 0x38
     b10:	51 af       	std	Z+57, r21	; 0x39
     b12:	12 ae       	std	Z+58, r1	; 0x3a
     b14:	99 e3       	ldi	r25, 0x39	; 57
     b16:	94 af       	std	Z+60, r25	; 0x3c
     b18:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b1c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b20:	90 a9       	ldd	r25, Z+48	; 0x30
     b22:	90 68       	ori	r25, 0x80	; 128
     b24:	90 ab       	std	Z+48, r25	; 0x30
     b26:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b2a:	e0 e4       	ldi	r30, 0x40	; 64
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	30 83       	st	Z, r19
     b30:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b34:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b38:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b3c:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
     b40:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b44:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b48:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     b4c:	2e e6       	ldi	r18, 0x6E	; 110
     b4e:	34 e2       	ldi	r19, 0x24	; 36
     b50:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b54:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b58:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b5c:	9b e3       	ldi	r25, 0x3B	; 59
     b5e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b62:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b66:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b6a:	80 81       	ld	r24, Z
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	80 83       	st	Z, r24
     b70:	08 95       	ret

00000b72 <tiny_dma_set_mode_6>:
     b72:	86 e0       	ldi	r24, 0x06	; 6
     b74:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     b78:	50 dd       	rcall	.-1376   	; 0x61a <tiny_dma_flush>
     b7a:	e0 e0       	ldi	r30, 0x00	; 0
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	16 aa       	std	Z+54, r1	; 0x36
     b80:	94 e2       	ldi	r25, 0x24	; 36
     b82:	90 ab       	std	Z+48, r25	; 0x30
     b84:	11 aa       	std	Z+49, r1	; 0x31
     b86:	39 e5       	ldi	r19, 0x59	; 89
     b88:	32 ab       	std	Z+50, r19	; 0x32
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	83 ab       	std	Z+51, r24	; 0x33
     b8e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     b92:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b96:	44 ab       	std	Z+52, r20	; 0x34
     b98:	55 ab       	std	Z+53, r21	; 0x35
     b9a:	4e e5       	ldi	r20, 0x5E	; 94
     b9c:	52 e2       	ldi	r21, 0x22	; 34
     b9e:	40 af       	std	Z+56, r20	; 0x38
     ba0:	51 af       	std	Z+57, r21	; 0x39
     ba2:	12 ae       	std	Z+58, r1	; 0x3a
     ba4:	29 e3       	ldi	r18, 0x39	; 57
     ba6:	24 af       	std	Z+60, r18	; 0x3c
     ba8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     bac:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bb0:	20 a9       	ldd	r18, Z+48	; 0x30
     bb2:	20 68       	ori	r18, 0x80	; 128
     bb4:	20 ab       	std	Z+48, r18	; 0x30
     bb6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     bba:	a0 e4       	ldi	r26, 0x40	; 64
     bbc:	b1 e0       	ldi	r27, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bc4:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     bc8:	32 e0       	ldi	r19, 0x02	; 2
     bca:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bce:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     bd2:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     bd6:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bda:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     bde:	4e e6       	ldi	r20, 0x6E	; 110
     be0:	54 e2       	ldi	r21, 0x24	; 36
     be2:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     be6:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     bea:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     bee:	2b e3       	ldi	r18, 0x3B	; 59
     bf0:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     bf4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     bf8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     bfc:	2c 91       	ld	r18, X
     bfe:	20 68       	ori	r18, 0x80	; 128
     c00:	2c 93       	st	X, r18
     c02:	10 8a       	std	Z+16, r1	; 0x10
     c04:	20 e4       	ldi	r18, 0x40	; 64
     c06:	20 8b       	std	Z+16, r18	; 0x10
     c08:	24 e0       	ldi	r18, 0x04	; 4
     c0a:	20 8b       	std	Z+16, r18	; 0x10
     c0c:	81 8b       	std	Z+17, r24	; 0x11
     c0e:	81 e9       	ldi	r24, 0x91	; 145
     c10:	82 8b       	std	Z+18, r24	; 0x12
     c12:	80 e1       	ldi	r24, 0x10	; 16
     c14:	83 8b       	std	Z+19, r24	; 0x13
     c16:	4e ee       	ldi	r20, 0xEE	; 238
     c18:	52 e0       	ldi	r21, 0x02	; 2
     c1a:	44 8b       	std	Z+20, r20	; 0x14
     c1c:	55 8b       	std	Z+21, r21	; 0x15
     c1e:	90 8f       	std	Z+24, r25	; 0x18
     c20:	31 8f       	std	Z+25, r19	; 0x19
     c22:	12 8e       	std	Z+26, r1	; 0x1a
     c24:	8e e6       	ldi	r24, 0x6E	; 110
     c26:	96 e2       	ldi	r25, 0x26	; 38
     c28:	84 8f       	std	Z+28, r24	; 0x1c
     c2a:	95 8f       	std	Z+29, r25	; 0x1d
     c2c:	16 8e       	std	Z+30, r1	; 0x1e
     c2e:	80 89       	ldd	r24, Z+16	; 0x10
     c30:	80 68       	ori	r24, 0x80	; 128
     c32:	80 8b       	std	Z+16, r24	; 0x10
     c34:	08 95       	ret

00000c36 <tiny_dma_set_mode_7>:
     c36:	87 e0       	ldi	r24, 0x07	; 7
     c38:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     c3c:	ee dc       	rcall	.-1572   	; 0x61a <tiny_dma_flush>
     c3e:	e0 e0       	ldi	r30, 0x00	; 0
     c40:	f1 e0       	ldi	r31, 0x01	; 1
     c42:	16 aa       	std	Z+54, r1	; 0x36
     c44:	94 e2       	ldi	r25, 0x24	; 36
     c46:	90 ab       	std	Z+48, r25	; 0x30
     c48:	11 aa       	std	Z+49, r1	; 0x31
     c4a:	39 e5       	ldi	r19, 0x59	; 89
     c4c:	32 ab       	std	Z+50, r19	; 0x32
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	83 ab       	std	Z+51, r24	; 0x33
     c52:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     c56:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     c5a:	44 ab       	std	Z+52, r20	; 0x34
     c5c:	55 ab       	std	Z+53, r21	; 0x35
     c5e:	4e e5       	ldi	r20, 0x5E	; 94
     c60:	52 e2       	ldi	r21, 0x22	; 34
     c62:	40 af       	std	Z+56, r20	; 0x38
     c64:	51 af       	std	Z+57, r21	; 0x39
     c66:	12 ae       	std	Z+58, r1	; 0x3a
     c68:	29 e3       	ldi	r18, 0x39	; 57
     c6a:	24 af       	std	Z+60, r18	; 0x3c
     c6c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c70:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c74:	20 a9       	ldd	r18, Z+48	; 0x30
     c76:	20 68       	ori	r18, 0x80	; 128
     c78:	20 ab       	std	Z+48, r18	; 0x30
     c7a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c7e:	a0 e4       	ldi	r26, 0x40	; 64
     c80:	b1 e0       	ldi	r27, 0x01	; 1
     c82:	9c 93       	st	X, r25
     c84:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c88:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c8c:	32 e0       	ldi	r19, 0x02	; 2
     c8e:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c92:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     c96:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     c9a:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c9e:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     ca2:	4e e6       	ldi	r20, 0x6E	; 110
     ca4:	54 e2       	ldi	r21, 0x24	; 36
     ca6:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     caa:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     cae:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     cb2:	2b e3       	ldi	r18, 0x3B	; 59
     cb4:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     cb8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     cbc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     cc0:	2c 91       	ld	r18, X
     cc2:	20 68       	ori	r18, 0x80	; 128
     cc4:	2c 93       	st	X, r18
     cc6:	10 8a       	std	Z+16, r1	; 0x10
     cc8:	20 e4       	ldi	r18, 0x40	; 64
     cca:	20 8b       	std	Z+16, r18	; 0x10
     ccc:	25 e0       	ldi	r18, 0x05	; 5
     cce:	20 8b       	std	Z+16, r18	; 0x10
     cd0:	81 8b       	std	Z+17, r24	; 0x11
     cd2:	81 e9       	ldi	r24, 0x91	; 145
     cd4:	82 8b       	std	Z+18, r24	; 0x12
     cd6:	80 e1       	ldi	r24, 0x10	; 16
     cd8:	83 8b       	std	Z+19, r24	; 0x13
     cda:	4e ee       	ldi	r20, 0xEE	; 238
     cdc:	52 e0       	ldi	r21, 0x02	; 2
     cde:	44 8b       	std	Z+20, r20	; 0x14
     ce0:	55 8b       	std	Z+21, r21	; 0x15
     ce2:	90 8f       	std	Z+24, r25	; 0x18
     ce4:	31 8f       	std	Z+25, r19	; 0x19
     ce6:	12 8e       	std	Z+26, r1	; 0x1a
     ce8:	8e e6       	ldi	r24, 0x6E	; 110
     cea:	96 e2       	ldi	r25, 0x26	; 38
     cec:	84 8f       	std	Z+28, r24	; 0x1c
     cee:	95 8f       	std	Z+29, r25	; 0x1d
     cf0:	16 8e       	std	Z+30, r1	; 0x1e
     cf2:	80 89       	ldd	r24, Z+16	; 0x10
     cf4:	80 68       	ori	r24, 0x80	; 128
     cf6:	80 8b       	std	Z+16, r24	; 0x10
     cf8:	08 95       	ret

00000cfa <__vector_6>:
}

ISR(DMA_CH0_vect){
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	2f 93       	push	r18
     d06:	3f 93       	push	r19
     d08:	4f 93       	push	r20
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	af 93       	push	r26
     d10:	bf 93       	push	r27
     d12:	ef 93       	push	r30
     d14:	ff 93       	push	r31
		DMA.INTFLAGS = 0x01;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     d1c:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
     d20:	8e 2f       	mov	r24, r30
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	88 30       	cpi	r24, 0x08	; 8
     d26:	91 05       	cpc	r25, r1
     d28:	08 f0       	brcs	.+2      	; 0xd2c <__vector_6+0x32>
     d2a:	11 c1       	rjmp	.+546    	; 0xf4e <__vector_6+0x254>
     d2c:	fc 01       	movw	r30, r24
     d2e:	e2 50       	subi	r30, 0x02	; 2
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__tablejump2__>
			case 0:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     d36:	e0 e0       	ldi	r30, 0x00	; 0
     d38:	f1 e0       	ldi	r31, 0x01	; 1
     d3a:	87 e7       	ldi	r24, 0x77	; 119
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	84 8b       	std	Z+20, r24	; 0x14
     d40:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d42:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     d46:	2e ee       	ldi	r18, 0xEE	; 238
     d48:	32 e0       	ldi	r19, 0x02	; 2
     d4a:	42 9f       	mul	r20, r18
     d4c:	c0 01       	movw	r24, r0
     d4e:	43 9f       	mul	r20, r19
     d50:	90 0d       	add	r25, r0
     d52:	11 24       	eor	r1, r1
     d54:	82 59       	subi	r24, 0x92	; 146
     d56:	99 4d       	sbci	r25, 0xD9	; 217
     d58:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d5a:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     d5e:	42 9f       	mul	r20, r18
     d60:	c0 01       	movw	r24, r0
     d62:	43 9f       	mul	r20, r19
     d64:	90 0d       	add	r25, r0
     d66:	11 24       	eor	r1, r1
     d68:	82 59       	subi	r24, 0x92	; 146
     d6a:	99 4d       	sbci	r25, 0xD9	; 217
     d6c:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d6e:	80 89       	ldd	r24, Z+16	; 0x10
     d70:	80 68       	ori	r24, 0x80	; 128
     d72:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     d74:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	91 11       	cpse	r25, r1
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     d82:	e5 c0       	rjmp	.+458    	; 0xf4e <__vector_6+0x254>
			case 1:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     d84:	e0 e0       	ldi	r30, 0x00	; 0
     d86:	f1 e0       	ldi	r31, 0x01	; 1
     d88:	87 e7       	ldi	r24, 0x77	; 119
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	84 8b       	std	Z+20, r24	; 0x14
     d8e:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d90:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     d94:	2e ee       	ldi	r18, 0xEE	; 238
     d96:	32 e0       	ldi	r19, 0x02	; 2
     d98:	42 9f       	mul	r20, r18
     d9a:	c0 01       	movw	r24, r0
     d9c:	43 9f       	mul	r20, r19
     d9e:	90 0d       	add	r25, r0
     da0:	11 24       	eor	r1, r1
     da2:	82 59       	subi	r24, 0x92	; 146
     da4:	99 4d       	sbci	r25, 0xD9	; 217
     da6:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     da8:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     dac:	42 9f       	mul	r20, r18
     dae:	c0 01       	movw	r24, r0
     db0:	43 9f       	mul	r20, r19
     db2:	90 0d       	add	r25, r0
     db4:	11 24       	eor	r1, r1
     db6:	82 59       	subi	r24, 0x92	; 146
     db8:	99 4d       	sbci	r25, 0xD9	; 217
     dba:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     dbc:	80 89       	ldd	r24, Z+16	; 0x10
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     dc2:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	91 11       	cpse	r25, r1
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     dd0:	be c0       	rjmp	.+380    	; 0xf4e <__vector_6+0x254>
			case 2:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     dd2:	e0 e0       	ldi	r30, 0x00	; 0
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	87 e7       	ldi	r24, 0x77	; 119
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	84 8b       	std	Z+20, r24	; 0x14
     ddc:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     dde:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     de2:	2e ee       	ldi	r18, 0xEE	; 238
     de4:	32 e0       	ldi	r19, 0x02	; 2
     de6:	42 9f       	mul	r20, r18
     de8:	c0 01       	movw	r24, r0
     dea:	43 9f       	mul	r20, r19
     dec:	90 0d       	add	r25, r0
     dee:	11 24       	eor	r1, r1
     df0:	82 59       	subi	r24, 0x92	; 146
     df2:	99 4d       	sbci	r25, 0xD9	; 217
     df4:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     df6:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     dfa:	42 9f       	mul	r20, r18
     dfc:	c0 01       	movw	r24, r0
     dfe:	43 9f       	mul	r20, r19
     e00:	90 0d       	add	r25, r0
     e02:	11 24       	eor	r1, r1
     e04:	82 59       	subi	r24, 0x92	; 146
     e06:	99 4d       	sbci	r25, 0xD9	; 217
     e08:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e0a:	80 89       	ldd	r24, Z+16	; 0x10
     e0c:	80 68       	ori	r24, 0x80	; 128
     e0e:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e10:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	91 11       	cpse	r25, r1
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     e1e:	97 c0       	rjmp	.+302    	; 0xf4e <__vector_6+0x254>
			case 3:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     e20:	e0 e0       	ldi	r30, 0x00	; 0
     e22:	f1 e0       	ldi	r31, 0x01	; 1
     e24:	87 e7       	ldi	r24, 0x77	; 119
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	84 8b       	std	Z+20, r24	; 0x14
     e2a:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e2c:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     e30:	2e ee       	ldi	r18, 0xEE	; 238
     e32:	32 e0       	ldi	r19, 0x02	; 2
     e34:	42 9f       	mul	r20, r18
     e36:	c0 01       	movw	r24, r0
     e38:	43 9f       	mul	r20, r19
     e3a:	90 0d       	add	r25, r0
     e3c:	11 24       	eor	r1, r1
     e3e:	82 59       	subi	r24, 0x92	; 146
     e40:	99 4d       	sbci	r25, 0xD9	; 217
     e42:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     e44:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     e48:	42 9f       	mul	r20, r18
     e4a:	c0 01       	movw	r24, r0
     e4c:	43 9f       	mul	r20, r19
     e4e:	90 0d       	add	r25, r0
     e50:	11 24       	eor	r1, r1
     e52:	82 59       	subi	r24, 0x92	; 146
     e54:	99 4d       	sbci	r25, 0xD9	; 217
     e56:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e58:	80 89       	ldd	r24, Z+16	; 0x10
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e5e:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	91 11       	cpse	r25, r1
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     e6c:	70 c0       	rjmp	.+224    	; 0xf4e <__vector_6+0x254>
			case 4:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     e6e:	e0 e0       	ldi	r30, 0x00	; 0
     e70:	f1 e0       	ldi	r31, 0x01	; 1
     e72:	87 e7       	ldi	r24, 0x77	; 119
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	84 8b       	std	Z+20, r24	; 0x14
     e78:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e7a:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     e7e:	2e ee       	ldi	r18, 0xEE	; 238
     e80:	32 e0       	ldi	r19, 0x02	; 2
     e82:	42 9f       	mul	r20, r18
     e84:	c0 01       	movw	r24, r0
     e86:	43 9f       	mul	r20, r19
     e88:	90 0d       	add	r25, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	82 59       	subi	r24, 0x92	; 146
     e8e:	99 4d       	sbci	r25, 0xD9	; 217
     e90:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     e92:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     e96:	42 9f       	mul	r20, r18
     e98:	c0 01       	movw	r24, r0
     e9a:	43 9f       	mul	r20, r19
     e9c:	90 0d       	add	r25, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	82 59       	subi	r24, 0x92	; 146
     ea2:	99 4d       	sbci	r25, 0xD9	; 217
     ea4:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ea6:	80 89       	ldd	r24, Z+16	; 0x10
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     eac:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	91 11       	cpse	r25, r1
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     eba:	49 c0       	rjmp	.+146    	; 0xf4e <__vector_6+0x254>
			case 6:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	2e ee       	ldi	r18, 0xEE	; 238
     ec2:	32 e0       	ldi	r19, 0x02	; 2
     ec4:	24 8b       	std	Z+20, r18	; 0x14
     ec6:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     ec8:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     ecc:	42 9f       	mul	r20, r18
     ece:	c0 01       	movw	r24, r0
     ed0:	43 9f       	mul	r20, r19
     ed2:	90 0d       	add	r25, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	82 59       	subi	r24, 0x92	; 146
     ed8:	99 4d       	sbci	r25, 0xD9	; 217
     eda:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     edc:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     ee0:	42 9f       	mul	r20, r18
     ee2:	c0 01       	movw	r24, r0
     ee4:	43 9f       	mul	r20, r19
     ee6:	90 0d       	add	r25, r0
     ee8:	11 24       	eor	r1, r1
     eea:	82 59       	subi	r24, 0x92	; 146
     eec:	99 4d       	sbci	r25, 0xD9	; 217
     eee:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ef0:	80 89       	ldd	r24, Z+16	; 0x10
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     ef6:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	91 11       	cpse	r25, r1
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     f04:	24 c0       	rjmp	.+72     	; 0xf4e <__vector_6+0x254>
			case 7:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     f06:	e0 e0       	ldi	r30, 0x00	; 0
     f08:	f1 e0       	ldi	r31, 0x01	; 1
     f0a:	2e ee       	ldi	r18, 0xEE	; 238
     f0c:	32 e0       	ldi	r19, 0x02	; 2
     f0e:	24 8b       	std	Z+20, r18	; 0x14
     f10:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     f12:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     f16:	42 9f       	mul	r20, r18
     f18:	c0 01       	movw	r24, r0
     f1a:	43 9f       	mul	r20, r19
     f1c:	90 0d       	add	r25, r0
     f1e:	11 24       	eor	r1, r1
     f20:	82 59       	subi	r24, 0x92	; 146
     f22:	99 4d       	sbci	r25, 0xD9	; 217
     f24:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     f26:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     f2a:	42 9f       	mul	r20, r18
     f2c:	c0 01       	movw	r24, r0
     f2e:	43 9f       	mul	r20, r19
     f30:	90 0d       	add	r25, r0
     f32:	11 24       	eor	r1, r1
     f34:	82 59       	subi	r24, 0x92	; 146
     f36:	99 4d       	sbci	r25, 0xD9	; 217
     f38:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     f3a:	80 89       	ldd	r24, Z+16	; 0x10
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     f40:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	91 11       	cpse	r25, r1
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <__vector_7>:

ISR(DMA_CH1_vect){
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
		DMA.INTFLAGS = 0x02;
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     f88:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	19 f0       	breq	.+6      	; 0xf96 <__vector_7+0x2c>
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	41 f1       	breq	.+80     	; 0xfe4 <__vector_7+0x7a>
     f94:	4d c0       	rjmp	.+154    	; 0x1030 <__vector_7+0xc6>
			case 0:
			////////////////////////////////////////
			break;
			case 1:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     f96:	e0 e0       	ldi	r30, 0x00	; 0
     f98:	f1 e0       	ldi	r31, 0x01	; 1
     f9a:	87 e7       	ldi	r24, 0x77	; 119
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	84 a3       	std	Z+36, r24	; 0x24
     fa0:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     fa2:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
     fa6:	2e ee       	ldi	r18, 0xEE	; 238
     fa8:	32 e0       	ldi	r19, 0x02	; 2
     faa:	42 9f       	mul	r20, r18
     fac:	c0 01       	movw	r24, r0
     fae:	43 9f       	mul	r20, r19
     fb0:	90 0d       	add	r25, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	8b 51       	subi	r24, 0x1B	; 27
     fb6:	98 4d       	sbci	r25, 0xD8	; 216
     fb8:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     fba:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
     fbe:	42 9f       	mul	r20, r18
     fc0:	c0 01       	movw	r24, r0
     fc2:	43 9f       	mul	r20, r19
     fc4:	90 0d       	add	r25, r0
     fc6:	11 24       	eor	r1, r1
     fc8:	8b 51       	subi	r24, 0x1B	; 27
     fca:	98 4d       	sbci	r25, 0xD8	; 216
     fcc:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     fce:	80 a1       	ldd	r24, Z+32	; 0x20
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
     fd4:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <b2_state>
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	91 11       	cpse	r25, r1
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <b2_state>
			break;
     fe2:	26 c0       	rjmp	.+76     	; 0x1030 <__vector_7+0xc6>
			case 2:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     fe4:	e0 e0       	ldi	r30, 0x00	; 0
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
     fe8:	87 e7       	ldi	r24, 0x77	; 119
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	84 a3       	std	Z+36, r24	; 0x24
     fee:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     ff0:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
     ff4:	2e ee       	ldi	r18, 0xEE	; 238
     ff6:	32 e0       	ldi	r19, 0x02	; 2
     ff8:	42 9f       	mul	r20, r18
     ffa:	c0 01       	movw	r24, r0
     ffc:	43 9f       	mul	r20, r19
     ffe:	90 0d       	add	r25, r0
    1000:	11 24       	eor	r1, r1
    1002:	8b 51       	subi	r24, 0x1B	; 27
    1004:	98 4d       	sbci	r25, 0xD8	; 216
    1006:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
    1008:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
    100c:	42 9f       	mul	r20, r18
    100e:	c0 01       	movw	r24, r0
    1010:	43 9f       	mul	r20, r19
    1012:	90 0d       	add	r25, r0
    1014:	11 24       	eor	r1, r1
    1016:	8b 51       	subi	r24, 0x1B	; 27
    1018:	98 4d       	sbci	r25, 0xD8	; 216
    101a:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    101c:	80 a1       	ldd	r24, Z+32	; 0x20
    101e:	80 68       	ori	r24, 0x80	; 128
    1020:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
    1022:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <b2_state>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	91 11       	cpse	r25, r1
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <b2_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <__vector_8>:
ISR(DMA_CH2_vect){
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	0f 92       	push	r0
    1050:	11 24       	eor	r1, r1
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31
	DMA.INTFLAGS = 0x04;
    1060:	e0 e0       	ldi	r30, 0x00	; 0
    1062:	f1 e0       	ldi	r31, 0x01	; 1
    1064:	84 e0       	ldi	r24, 0x04	; 4
    1066:	83 83       	std	Z+3, r24	; 0x03
	DMA.CH2.TRFCNT = HALFPACKET_SIZE;		
    1068:	87 e7       	ldi	r24, 0x77	; 119
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	84 ab       	std	Z+52, r24	; 0x34
    106e:	95 ab       	std	Z+53, r25	; 0x35
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    1070:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
    1074:	2e ee       	ldi	r18, 0xEE	; 238
    1076:	32 e0       	ldi	r19, 0x02	; 2
    1078:	42 9f       	mul	r20, r18
    107a:	c0 01       	movw	r24, r0
    107c:	43 9f       	mul	r20, r19
    107e:	90 0d       	add	r25, r0
    1080:	11 24       	eor	r1, r1
    1082:	8b 51       	subi	r24, 0x1B	; 27
    1084:	98 4d       	sbci	r25, 0xD8	; 216
    1086:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;	
    1088:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
    108c:	42 9f       	mul	r20, r18
    108e:	c0 01       	movw	r24, r0
    1090:	43 9f       	mul	r20, r19
    1092:	90 0d       	add	r25, r0
    1094:	11 24       	eor	r1, r1
    1096:	8b 51       	subi	r24, 0x1B	; 27
    1098:	98 4d       	sbci	r25, 0xD8	; 216
    109a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    109e:	80 a9       	ldd	r24, Z+48	; 0x30
    10a0:	80 68       	ori	r24, 0x80	; 128
    10a2:	80 ab       	std	Z+48, r24	; 0x30
	b2_state = !b2_state;
    10a4:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <b2_state>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	91 11       	cpse	r25, r1
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <b2_state>
}
    10b2:	ff 91       	pop	r31
    10b4:	ef 91       	pop	r30
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	0f 90       	pop	r0
    10c6:	1f 90       	pop	r1
    10c8:	18 95       	reti

000010ca <__vector_9>:

ISR(DMA_CH3_vect){
    10ca:	1f 92       	push	r1
    10cc:	0f 92       	push	r0
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	0f 92       	push	r0
    10d2:	11 24       	eor	r1, r1
    10d4:	2f 93       	push	r18
    10d6:	3f 93       	push	r19
    10d8:	4f 93       	push	r20
    10da:	8f 93       	push	r24
    10dc:	9f 93       	push	r25
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
	DMA.INTFLAGS = 0x08;
    10e2:	88 e0       	ldi	r24, 0x08	; 8
    10e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	DMA.CH3.TRFCNT = HALFPACKET_SIZE;
    10e8:	87 e7       	ldi	r24, 0x77	; 119
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    10f0:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    10f4:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
    10f8:	2e ee       	ldi	r18, 0xEE	; 238
    10fa:	32 e0       	ldi	r19, 0x02	; 2
    10fc:	42 9f       	mul	r20, r18
    10fe:	c0 01       	movw	r24, r0
    1100:	43 9f       	mul	r20, r19
    1102:	90 0d       	add	r25, r0
    1104:	11 24       	eor	r1, r1
    1106:	8b 51       	subi	r24, 0x1B	; 27
    1108:	98 4d       	sbci	r25, 0xD8	; 216
    110a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
    110e:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
    1112:	42 9f       	mul	r20, r18
    1114:	c0 01       	movw	r24, r0
    1116:	43 9f       	mul	r20, r19
    1118:	90 0d       	add	r25, r0
    111a:	11 24       	eor	r1, r1
    111c:	8b 51       	subi	r24, 0x1B	; 27
    111e:	98 4d       	sbci	r25, 0xD8	; 216
    1120:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    1124:	e0 e4       	ldi	r30, 0x40	; 64
    1126:	f1 e0       	ldi	r31, 0x01	; 1
    1128:	80 81       	ld	r24, Z
    112a:	80 68       	ori	r24, 0x80	; 128
    112c:	80 83       	st	Z, r24
	b2_state = !b2_state;
    112e:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <b2_state>
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	91 11       	cpse	r25, r1
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <b2_state>
}
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	4f 91       	pop	r20
    1146:	3f 91       	pop	r19
    1148:	2f 91       	pop	r18
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0
    1150:	1f 90       	pop	r1
    1152:	18 95       	reti

00001154 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    1154:	e0 e7       	ldi	r30, 0x70	; 112
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	83 81       	ldd	r24, Z+3	; 0x03
    115a:	8c 7f       	andi	r24, 0xFC	; 252
    115c:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    115e:	84 81       	ldd	r24, Z+4	; 0x04
    1160:	8c 7f       	andi	r24, 0xFC	; 252
    1162:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1164:	80 81       	ld	r24, Z
    1166:	8d 7f       	andi	r24, 0xFD	; 253
    1168:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    116a:	e0 e8       	ldi	r30, 0x80	; 128
    116c:	f1 e0       	ldi	r31, 0x01	; 1
    116e:	80 ec       	ldi	r24, 0xC0	; 192
    1170:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1172:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1174:	88 ec       	ldi	r24, 0xC8	; 200
    1176:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1178:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b8 e0       	ldi	r27, 0x08	; 8
    117e:	34 e0       	ldi	r19, 0x04	; 4
    1180:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1182:	23 e0       	ldi	r18, 0x03	; 3
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	2c 93       	st	X, r18
    1188:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    118a:	14 96       	adiw	r26, 0x04	; 4
    118c:	1c 92       	st	X, r1
    118e:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1190:	85 ed       	ldi	r24, 0xD5	; 213
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	96 96       	adiw	r26, 0x26	; 38
    1196:	8d 93       	st	X+, r24
    1198:	9c 93       	st	X, r25
    119a:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    119c:	16 96       	adiw	r26, 0x06	; 6
    119e:	1c 92       	st	X, r1
    11a0:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    11a2:	e0 e4       	ldi	r30, 0x40	; 64
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    11a8:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    11aa:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    11ac:	86 a3       	std	Z+38, r24	; 0x26
    11ae:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    11b0:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    11b2:	e0 e6       	ldi	r30, 0x60	; 96
    11b4:	f6 e0       	ldi	r31, 0x06	; 6
    11b6:	80 81       	ld	r24, Z
    11b8:	80 61       	ori	r24, 0x10	; 16
    11ba:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    11bc:	e0 e4       	ldi	r30, 0x40	; 64
    11be:	f9 e0       	ldi	r31, 0x09	; 9
    11c0:	83 e1       	ldi	r24, 0x13	; 19
    11c2:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    11c4:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    11ca:	a6 a3       	std	Z+38, r26	; 0x26
    11cc:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    11ce:	10 a6       	std	Z+40, r1	; 0x28
    11d0:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 83       	st	Z, r24
    11d6:	08 95       	ret

000011d8 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	2f 93       	push	r18
    11e4:	3f 93       	push	r19
    11e6:	4f 93       	push	r20
    11e8:	5f 93       	push	r21
    11ea:	8f 93       	push	r24
    11ec:	9f 93       	push	r25
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	1f 92       	push	r1
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    1202:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1206:	87 30       	cpi	r24, 0x07	; 7
    1208:	31 f4       	brne	.+12     	; 0x1216 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    120a:	e0 e0       	ldi	r30, 0x00	; 0
    120c:	f2 e0       	ldi	r31, 0x02	; 2
    120e:	84 a5       	ldd	r24, Z+44	; 0x2c
    1210:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    1212:	95 a5       	ldd	r25, Z+45	; 0x2d
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1216:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    121a:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <PSU_target>
    121e:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    1220:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1224:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	0c f4       	brge	.+2      	; 0x1230 <__vector_83+0x58>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	99 23       	and	r25, r25
    1232:	c9 f0       	breq	.+50     	; 0x1266 <__vector_83+0x8e>
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	2a 3f       	cpi	r18, 0xFA	; 250
    1238:	37 40       	sbci	r19, 0x07	; 7
    123a:	08 f0       	brcs	.+2      	; 0x123e <__vector_83+0x66>
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	99 23       	and	r25, r25
    1240:	91 f0       	breq	.+36     	; 0x1266 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    1242:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1246:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    124a:	89 30       	cpi	r24, 0x09	; 9
    124c:	1c f4       	brge	.+6      	; 0x1254 <__vector_83+0x7c>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <__vector_83+0x80>
    1254:	86 e0       	ldi	r24, 0x06	; 6
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	82 0f       	add	r24, r18
    125a:	93 1f       	adc	r25, r19
    125c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1260:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1264:	23 c0       	rjmp	.+70     	; 0x12ac <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1266:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    126a:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	8f 3f       	cpi	r24, 0xFF	; 255
    1272:	0c f0       	brlt	.+2      	; 0x1276 <__vector_83+0x9e>
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	99 23       	and	r25, r25
    1278:	c9 f0       	breq	.+50     	; 0x12ac <__vector_83+0xd4>
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	27 30       	cpi	r18, 0x07	; 7
    127e:	31 05       	cpc	r19, r1
    1280:	08 f4       	brcc	.+2      	; 0x1284 <__vector_83+0xac>
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	99 23       	and	r25, r25
    1286:	91 f0       	breq	.+36     	; 0x12ac <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1288:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    128c:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1290:	88 3f       	cpi	r24, 0xF8	; 248
    1292:	1c f0       	brlt	.+6      	; 0x129a <__vector_83+0xc2>
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 c0       	rjmp	.+4      	; 0x129e <__vector_83+0xc6>
    129a:	86 e0       	ldi	r24, 0x06	; 6
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	48 1b       	sub	r20, r24
    12a2:	59 0b       	sbc	r21, r25
    12a4:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    12a8:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    12ac:	0f 90       	pop	r0
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    12cc:	e0 e7       	ldi	r30, 0x70	; 112
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	83 81       	ldd	r24, Z+3	; 0x03
    12d2:	8f 7e       	andi	r24, 0xEF	; 239
    12d4:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    12d6:	e0 e4       	ldi	r30, 0x40	; 64
    12d8:	f6 e0       	ldi	r31, 0x06	; 6
    12da:	80 81       	ld	r24, Z
    12dc:	8a 6a       	ori	r24, 0xAA	; 170
    12de:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    12e4:	88 e5       	ldi	r24, 0x58	; 88
    12e6:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    12e8:	e0 ea       	ldi	r30, 0xA0	; 160
    12ea:	f8 e0       	ldi	r31, 0x08	; 8
    12ec:	84 ec       	ldi	r24, 0xC4	; 196
    12ee:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    12f4:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    12f6:	88 e1       	ldi	r24, 0x18	; 24
    12f8:	84 83       	std	Z+4, r24	; 0x04
    12fa:	08 95       	ret

000012fc <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    12fc:	e0 e7       	ldi	r30, 0x70	; 112
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	83 81       	ldd	r24, Z+3	; 0x03
    1302:	87 7f       	andi	r24, 0xF7	; 247
    1304:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1306:	e0 ec       	ldi	r30, 0xC0	; 192
    1308:	f8 e0       	ldi	r31, 0x08	; 8
    130a:	80 e4       	ldi	r24, 0x40	; 64
    130c:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    130e:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1310:	88 e5       	ldi	r24, 0x58	; 88
    1312:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1316:	08 95       	ret

00001318 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
	asm("nop");
    1322:	00 00       	nop
}
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    132e:	9f b7       	in	r25, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	e8 2f       	mov	r30, r24
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	e0 59       	subi	r30, 0x90	; 144
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	60 95       	com	r22
    133c:	80 81       	ld	r24, Z
    133e:	68 23       	and	r22, r24
    1340:	60 83       	st	Z, r22
    1342:	9f bf       	out	0x3f, r25	; 63
    1344:	08 95       	ret

00001346 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1346:	86 30       	cpi	r24, 0x06	; 6
    1348:	11 f0       	breq	.+4      	; 0x134e <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    134e:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1350:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1354:	81 fd       	sbrc	r24, 1
    1356:	26 c0       	rjmp	.+76     	; 0x13a4 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1358:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    135a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    135c:	e0 e5       	ldi	r30, 0x50	; 80
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	82 60       	ori	r24, 0x02	; 2
    1364:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1366:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1368:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    136a:	81 ff       	sbrs	r24, 1
    136c:	fd cf       	rjmp	.-6      	; 0x1368 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    136e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1370:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1372:	a0 e5       	ldi	r26, 0x50	; 80
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	16 96       	adiw	r26, 0x06	; 6
    1378:	8c 91       	ld	r24, X
    137a:	16 97       	sbiw	r26, 0x06	; 6
    137c:	89 7f       	andi	r24, 0xF9	; 249
    137e:	16 96       	adiw	r26, 0x06	; 6
    1380:	8c 93       	st	X, r24
    1382:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1384:	e0 e6       	ldi	r30, 0x60	; 96
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 e8       	ldi	r24, 0x80	; 128
    138a:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    138c:	8b eb       	ldi	r24, 0xBB	; 187
    138e:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1390:	16 96       	adiw	r26, 0x06	; 6
    1392:	8c 91       	ld	r24, X
    1394:	16 97       	sbiw	r26, 0x06	; 6
    1396:	84 60       	ori	r24, 0x04	; 4
    1398:	16 96       	adiw	r26, 0x06	; 6
    139a:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    139c:	80 81       	ld	r24, Z
    139e:	81 60       	ori	r24, 0x01	; 1
    13a0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13a2:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    13a4:	63 60       	ori	r22, 0x03	; 3
    13a6:	84 e4       	ldi	r24, 0x44	; 68
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	2d d5       	rcall	.+2650   	; 0x1e06 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    13ac:	60 e4       	ldi	r22, 0x40	; 64
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	be cf       	rjmp	.-132    	; 0x132e <sysclk_enable_module>
    13b2:	08 95       	ret

000013b4 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    13b4:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <udi_vendor_alternate_setting>
    13b8:	08 95       	ret

000013ba <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    13ba:	40 d1       	rcall	.+640    	; 0x163c <udc_get_interface_desc>
    13bc:	fc 01       	movw	r30, r24
    13be:	83 81       	ldd	r24, Z+3	; 0x03
    13c0:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    13c4:	81 11       	cpse	r24, r1
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    13c8:	69 c8       	rjmp	.-3886   	; 0x49c <main_vendor_enable>
    13ca:	08 95       	ret
			return false;
		}
	}
	return true;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
}
    13ce:	08 95       	ret

000013d0 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    13d0:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <udi_vendor_alternate_setting>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	09 f4       	brne	.+2      	; 0x13da <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    13d8:	7d c8       	rjmp	.-3846   	; 0x4d4 <main_vendor_disable>
    13da:	08 95       	ret

000013dc <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    13dc:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    13e0:	88 23       	and	r24, r24
    13e2:	4c f4       	brge	.+18     	; 0x13f6 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    13e4:	80 76       	andi	r24, 0x60	; 96
    13e6:	80 34       	cpi	r24, 0x40	; 64
    13e8:	a9 f4       	brne	.+42     	; 0x1414 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    13ea:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    13ee:	81 11       	cpse	r24, r1
    13f0:	13 c0       	rjmp	.+38     	; 0x1418 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    13f2:	75 c8       	rjmp	.-3862   	; 0x4de <main_setup_in_received>
    13f4:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    13f6:	80 76       	andi	r24, 0x60	; 96
    13f8:	80 34       	cpi	r24, 0x40	; 64
    13fa:	81 f4       	brne	.+32     	; 0x141c <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    13fc:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1400:	81 11       	cpse	r24, r1
    1402:	0e c0       	rjmp	.+28     	; 0x1420 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1404:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1408:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    140c:	89 2b       	or	r24, r25
    140e:	51 f0       	breq	.+20     	; 0x1424 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1410:	64 c8       	rjmp	.-3896   	; 0x4da <main_setup_out_received>
    1412:	08 95       	ret
		}
	}
	return false; // Not supported request
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	08 95       	ret
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	08 95       	ret
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	08 95       	ret
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	08 95       	ret
    1424:	80 e0       	ldi	r24, 0x00	; 0
}
    1426:	08 95       	ret

00001428 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    142e:	8a 01       	movw	r16, r20
    1430:	ac 01       	movw	r20, r24
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	81 e8       	ldi	r24, 0x81	; 129
    1436:	0e 94 77 13 	call	0x26ee	; 0x26ee <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    1446:	8a 01       	movw	r16, r20
    1448:	ac 01       	movw	r20, r24
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	82 e8       	ldi	r24, 0x82	; 130
    144e:	0e 94 77 13 	call	0x26ee	; 0x26ee <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	08 95       	ret

00001458 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    145e:	8a 01       	movw	r16, r20
    1460:	ac 01       	movw	r20, r24
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	83 e8       	ldi	r24, 0x83	; 131
    1466:	0e 94 77 13 	call	0x26ee	; 0x26ee <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	08 95       	ret

00001470 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1470:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1474:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1478:	01 90       	ld	r0, Z+
    147a:	f0 81       	ld	r31, Z
    147c:	e0 2d       	mov	r30, r0
    147e:	22 81       	ldd	r18, Z+2	; 0x02
    1480:	33 81       	ldd	r19, Z+3	; 0x03
    1482:	2e 0f       	add	r18, r30
    1484:	3f 1f       	adc	r19, r31
    1486:	fc 01       	movw	r30, r24
    1488:	40 81       	ld	r20, Z
    148a:	e4 0f       	add	r30, r20
    148c:	f1 1d       	adc	r31, r1
    148e:	e2 17       	cp	r30, r18
    1490:	f3 07       	cpc	r31, r19
    1492:	b8 f4       	brcc	.+46     	; 0x14c2 <udc_next_desc_in_iface+0x52>
    1494:	81 81       	ldd	r24, Z+1	; 0x01
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	b9 f0       	breq	.+46     	; 0x14c8 <udc_next_desc_in_iface+0x58>
    149a:	86 13       	cpse	r24, r22
    149c:	09 c0       	rjmp	.+18     	; 0x14b0 <udc_next_desc_in_iface+0x40>
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <udc_next_desc_in_iface+0x3a>
    14a0:	81 81       	ldd	r24, Z+1	; 0x01
    14a2:	84 30       	cpi	r24, 0x04	; 4
    14a4:	a1 f0       	breq	.+40     	; 0x14ce <udc_next_desc_in_iface+0x5e>
    14a6:	86 13       	cpse	r24, r22
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <udc_next_desc_in_iface+0x40>
    14aa:	8e 2f       	mov	r24, r30
    14ac:	9f 2f       	mov	r25, r31
    14ae:	08 95       	ret
    14b0:	80 81       	ld	r24, Z
    14b2:	e8 0f       	add	r30, r24
    14b4:	f1 1d       	adc	r31, r1
    14b6:	e2 17       	cp	r30, r18
    14b8:	f3 07       	cpc	r31, r19
    14ba:	90 f3       	brcs	.-28     	; 0x14a0 <udc_next_desc_in_iface+0x30>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	08 95       	ret
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	08 95       	ret
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	08 95       	ret
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	08 95       	ret

000014d4 <udc_valid_address>:
    14d4:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    14d8:	8f 77       	andi	r24, 0x7F	; 127
    14da:	0c 94 a5 12 	jmp	0x254a	; 0x254a <udd_set_address>
    14de:	08 95       	ret

000014e0 <udc_update_iface_desc>:
    14e0:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <udc_num_configuration>
    14e4:	99 23       	and	r25, r25
    14e6:	81 f1       	breq	.+96     	; 0x1548 <udc_update_iface_desc+0x68>
    14e8:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    14ec:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    14f0:	01 90       	ld	r0, Z+
    14f2:	f0 81       	ld	r31, Z
    14f4:	e0 2d       	mov	r30, r0
    14f6:	94 81       	ldd	r25, Z+4	; 0x04
    14f8:	89 17       	cp	r24, r25
    14fa:	40 f5       	brcc	.+80     	; 0x154c <udc_update_iface_desc+0x6c>
    14fc:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_iface>
    1500:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_iface+0x1>
    1504:	22 81       	ldd	r18, Z+2	; 0x02
    1506:	33 81       	ldd	r19, Z+3	; 0x03
    1508:	2e 0f       	add	r18, r30
    150a:	3f 1f       	adc	r19, r31
    150c:	e2 17       	cp	r30, r18
    150e:	f3 07       	cpc	r31, r19
    1510:	f8 f4       	brcc	.+62     	; 0x1550 <udc_update_iface_desc+0x70>
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	94 30       	cpi	r25, 0x04	; 4
    1516:	61 f4       	brne	.+24     	; 0x1530 <udc_update_iface_desc+0x50>
    1518:	92 81       	ldd	r25, Z+2	; 0x02
    151a:	98 13       	cpse	r25, r24
    151c:	09 c0       	rjmp	.+18     	; 0x1530 <udc_update_iface_desc+0x50>
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	96 13       	cpse	r25, r22
    1522:	06 c0       	rjmp	.+12     	; 0x1530 <udc_update_iface_desc+0x50>
    1524:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_iface>
    1528:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_iface+0x1>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	08 95       	ret
    1530:	90 81       	ld	r25, Z
    1532:	e9 0f       	add	r30, r25
    1534:	f1 1d       	adc	r31, r1
    1536:	e2 17       	cp	r30, r18
    1538:	f3 07       	cpc	r31, r19
    153a:	58 f3       	brcs	.-42     	; 0x1512 <udc_update_iface_desc+0x32>
    153c:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_iface>
    1540:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_iface+0x1>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	08 95       	ret
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	08 95       	ret
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	08 95       	ret
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	08 95       	ret

00001554 <udc_iface_disable>:
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	c8 2f       	mov	r28, r24
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	be df       	rcall	.-132    	; 0x14e0 <udc_update_iface_desc>
    1564:	18 2f       	mov	r17, r24
    1566:	88 23       	and	r24, r24
    1568:	81 f1       	breq	.+96     	; 0x15ca <udc_iface_disable+0x76>
    156a:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    156e:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1572:	ec 2f       	mov	r30, r28
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	12 96       	adiw	r26, 0x02	; 2
    157c:	8d 91       	ld	r24, X+
    157e:	9c 91       	ld	r25, X
    1580:	13 97       	sbiw	r26, 0x03	; 3
    1582:	e8 0f       	add	r30, r24
    1584:	f9 1f       	adc	r31, r25
    1586:	e0 80       	ld	r14, Z
    1588:	f1 80       	ldd	r15, Z+1	; 0x01
    158a:	d7 01       	movw	r26, r14
    158c:	16 96       	adiw	r26, 0x06	; 6
    158e:	ed 91       	ld	r30, X+
    1590:	fc 91       	ld	r31, X
    1592:	17 97       	sbiw	r26, 0x07	; 7
    1594:	09 95       	icall
    1596:	68 2f       	mov	r22, r24
    1598:	8c 2f       	mov	r24, r28
    159a:	a2 df       	rcall	.-188    	; 0x14e0 <udc_update_iface_desc>
    159c:	18 2f       	mov	r17, r24
    159e:	88 23       	and	r24, r24
    15a0:	a1 f0       	breq	.+40     	; 0x15ca <udc_iface_disable+0x76>
    15a2:	c0 91 be 20 	lds	r28, 0x20BE	; 0x8020be <udc_ptr_iface>
    15a6:	d0 91 bf 20 	lds	r29, 0x20BF	; 0x8020bf <udc_ptr_iface+0x1>
    15aa:	65 e0       	ldi	r22, 0x05	; 5
    15ac:	ce 01       	movw	r24, r28
    15ae:	60 df       	rcall	.-320    	; 0x1470 <udc_next_desc_in_iface>
    15b0:	ec 01       	movw	r28, r24
    15b2:	89 2b       	or	r24, r25
    15b4:	21 f0       	breq	.+8      	; 0x15be <udc_iface_disable+0x6a>
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <udd_ep_free>
    15bc:	f6 cf       	rjmp	.-20     	; 0x15aa <udc_iface_disable+0x56>
    15be:	d7 01       	movw	r26, r14
    15c0:	12 96       	adiw	r26, 0x02	; 2
    15c2:	ed 91       	ld	r30, X+
    15c4:	fc 91       	ld	r31, X
    15c6:	13 97       	sbiw	r26, 0x03	; 3
    15c8:	09 95       	icall
    15ca:	81 2f       	mov	r24, r17
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	ff 90       	pop	r15
    15d4:	ef 90       	pop	r14
    15d6:	08 95       	ret

000015d8 <udc_iface_enable>:
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	18 2f       	mov	r17, r24
    15e0:	7f df       	rcall	.-258    	; 0x14e0 <udc_update_iface_desc>
    15e2:	88 23       	and	r24, r24
    15e4:	39 f1       	breq	.+78     	; 0x1634 <udc_iface_enable+0x5c>
    15e6:	c0 91 be 20 	lds	r28, 0x20BE	; 0x8020be <udc_ptr_iface>
    15ea:	d0 91 bf 20 	lds	r29, 0x20BF	; 0x8020bf <udc_ptr_iface+0x1>
    15ee:	65 e0       	ldi	r22, 0x05	; 5
    15f0:	ce 01       	movw	r24, r28
    15f2:	3e df       	rcall	.-388    	; 0x1470 <udc_next_desc_in_iface>
    15f4:	ec 01       	movw	r28, r24
    15f6:	89 2b       	or	r24, r25
    15f8:	41 f0       	breq	.+16     	; 0x160a <udc_iface_enable+0x32>
    15fa:	4c 81       	ldd	r20, Y+4	; 0x04
    15fc:	5d 81       	ldd	r21, Y+5	; 0x05
    15fe:	6b 81       	ldd	r22, Y+3	; 0x03
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	b0 d7       	rcall	.+3936   	; 0x2564 <udd_ep_alloc>
    1604:	81 11       	cpse	r24, r1
    1606:	f3 cf       	rjmp	.-26     	; 0x15ee <udc_iface_enable+0x16>
    1608:	15 c0       	rjmp	.+42     	; 0x1634 <udc_iface_enable+0x5c>
    160a:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    160e:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1612:	e1 2f       	mov	r30, r17
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	ee 0f       	add	r30, r30
    1618:	ff 1f       	adc	r31, r31
    161a:	12 96       	adiw	r26, 0x02	; 2
    161c:	8d 91       	ld	r24, X+
    161e:	9c 91       	ld	r25, X
    1620:	13 97       	sbiw	r26, 0x03	; 3
    1622:	e8 0f       	add	r30, r24
    1624:	f9 1f       	adc	r31, r25
    1626:	01 90       	ld	r0, Z+
    1628:	f0 81       	ld	r31, Z
    162a:	e0 2d       	mov	r30, r0
    162c:	01 90       	ld	r0, Z+
    162e:	f0 81       	ld	r31, Z
    1630:	e0 2d       	mov	r30, r0
    1632:	09 95       	icall
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	08 95       	ret

0000163c <udc_get_interface_desc>:
    163c:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_ptr_iface>
    1640:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <udc_ptr_iface+0x1>
    1644:	08 95       	ret

00001646 <udc_start>:
    1646:	fc c6       	rjmp	.+3576   	; 0x2440 <udd_enable>
    1648:	08 95       	ret

0000164a <udc_reset>:
    164a:	cf 93       	push	r28
    164c:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1650:	88 23       	and	r24, r24
    1652:	c1 f0       	breq	.+48     	; 0x1684 <udc_reset+0x3a>
    1654:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1658:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    165c:	01 90       	ld	r0, Z+
    165e:	f0 81       	ld	r31, Z
    1660:	e0 2d       	mov	r30, r0
    1662:	84 81       	ldd	r24, Z+4	; 0x04
    1664:	88 23       	and	r24, r24
    1666:	71 f0       	breq	.+28     	; 0x1684 <udc_reset+0x3a>
    1668:	c0 e0       	ldi	r28, 0x00	; 0
    166a:	8c 2f       	mov	r24, r28
    166c:	73 df       	rcall	.-282    	; 0x1554 <udc_iface_disable>
    166e:	cf 5f       	subi	r28, 0xFF	; 255
    1670:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1674:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1678:	01 90       	ld	r0, Z+
    167a:	f0 81       	ld	r31, Z
    167c:	e0 2d       	mov	r30, r0
    167e:	84 81       	ldd	r24, Z+4	; 0x04
    1680:	c8 17       	cp	r28, r24
    1682:	98 f3       	brcs	.-26     	; 0x166a <udc_reset+0x20>
    1684:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udc_num_configuration>
    1688:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <udc_device_status>
    168c:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <udc_device_status+0x1>
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1694:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1696:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    169a:	88 23       	and	r24, r24
    169c:	49 f1       	breq	.+82     	; 0x16f0 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    169e:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    16a2:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    16a6:	ed 91       	ld	r30, X+
    16a8:	fc 91       	ld	r31, X
    16aa:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    16ac:	84 81       	ldd	r24, Z+4	; 0x04
    16ae:	88 23       	and	r24, r24
    16b0:	f9 f0       	breq	.+62     	; 0x16f0 <udc_sof_notify+0x5c>
    16b2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    16b4:	ec 2f       	mov	r30, r28
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	12 96       	adiw	r26, 0x02	; 2
    16be:	8d 91       	ld	r24, X+
    16c0:	9c 91       	ld	r25, X
    16c2:	13 97       	sbiw	r26, 0x03	; 3
    16c4:	e8 0f       	add	r30, r24
    16c6:	f9 1f       	adc	r31, r25
    16c8:	01 90       	ld	r0, Z+
    16ca:	f0 81       	ld	r31, Z
    16cc:	e0 2d       	mov	r30, r0
    16ce:	00 84       	ldd	r0, Z+8	; 0x08
    16d0:	f1 85       	ldd	r31, Z+9	; 0x09
    16d2:	e0 2d       	mov	r30, r0
    16d4:	30 97       	sbiw	r30, 0x00	; 0
    16d6:	09 f0       	breq	.+2      	; 0x16da <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    16d8:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    16da:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16dc:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    16e0:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    16e4:	ed 91       	ld	r30, X+
    16e6:	fc 91       	ld	r31, X
    16e8:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    16ea:	84 81       	ldd	r24, Z+4	; 0x04
    16ec:	c8 17       	cp	r28, r24
    16ee:	10 f3       	brcs	.-60     	; 0x16b4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    16f0:	cf 91       	pop	r28
    16f2:	08 95       	ret

000016f4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    16fc:	ee e5       	ldi	r30, 0x5E	; 94
    16fe:	f4 e2       	ldi	r31, 0x24	; 36
    1700:	12 86       	std	Z+10, r1	; 0x0a
    1702:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1704:	14 86       	std	Z+12, r1	; 0x0c
    1706:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1708:	16 86       	std	Z+14, r1	; 0x0e
    170a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    170c:	80 81       	ld	r24, Z
    170e:	88 23       	and	r24, r24
    1710:	3c f4       	brge	.+14     	; 0x1720 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1712:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1716:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    171a:	23 2b       	or	r18, r19
    171c:	09 f4       	brne	.+2      	; 0x1720 <udc_process_setup+0x2c>
    171e:	67 c3       	rjmp	.+1742   	; 0x1dee <udc_process_setup+0x6fa>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1720:	80 76       	andi	r24, 0x60	; 96
    1722:	80 34       	cpi	r24, 0x40	; 64
    1724:	09 f0       	breq	.+2      	; 0x1728 <udc_process_setup+0x34>
    1726:	05 c1       	rjmp	.+522    	; 0x1932 <udc_process_setup+0x23e>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    1728:	e0 91 5f 24 	lds	r30, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    172c:	8e 2f       	mov	r24, r30
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	fc 01       	movw	r30, r24
    1732:	e0 5a       	subi	r30, 0xA0	; 160
    1734:	f1 09       	sbc	r31, r1
    1736:	e8 30       	cpi	r30, 0x08	; 8
    1738:	f1 05       	cpc	r31, r1
    173a:	08 f0       	brcs	.+2      	; 0x173e <udc_process_setup+0x4a>
    173c:	f1 c0       	rjmp	.+482    	; 0x1920 <udc_process_setup+0x22c>
    173e:	ea 5f       	subi	r30, 0xFA	; 250
    1740:	fe 4f       	sbci	r31, 0xFE	; 254
    1742:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    1746:	00 00       	nop
    1748:	56 c3       	rjmp	.+1708   	; 0x1df6 <udc_process_setup+0x702>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    174a:	e0 e0       	ldi	r30, 0x00	; 0
    174c:	f8 e0       	ldi	r31, 0x08	; 8
    174e:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1750:	ce e5       	ldi	r28, 0x5E	; 94
    1752:	d4 e2       	ldi	r29, 0x24	; 36
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	9b 81       	ldd	r25, Y+3	; 0x03
    1758:	86 ab       	std	Z+54, r24	; 0x36
    175a:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	8f 70       	andi	r24, 0x0F	; 15
    1760:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1762:	6e 81       	ldd	r22, Y+6	; 0x06
    1764:	7f 81       	ldd	r23, Y+7	; 0x07
    1766:	8e e5       	ldi	r24, 0x5E	; 94
    1768:	92 e2       	ldi	r25, 0x22	; 34
    176a:	f5 d6       	rcall	.+3562   	; 0x2556 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    176c:	8e 81       	ldd	r24, Y+6	; 0x06
    176e:	9f 81       	ldd	r25, Y+7	; 0x07
    1770:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
    1774:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
    1778:	82 17       	cp	r24, r18
    177a:	93 07       	cpc	r25, r19
    177c:	09 f4       	brne	.+2      	; 0x1780 <udc_process_setup+0x8c>
    177e:	3b c3       	rjmp	.+1654   	; 0x1df6 <udc_process_setup+0x702>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1780:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <dacBuf_len>
    1784:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <dacBuf_len+0x1>
				switch(global_mode){
    1788:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    178c:	8e 2f       	mov	r24, r30
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	88 30       	cpi	r24, 0x08	; 8
    1792:	91 05       	cpc	r25, r1
    1794:	08 f0       	brcs	.+2      	; 0x1798 <udc_process_setup+0xa4>
    1796:	c6 c0       	rjmp	.+396    	; 0x1924 <udc_process_setup+0x230>
    1798:	fc 01       	movw	r30, r24
    179a:	e2 5f       	subi	r30, 0xF2	; 242
    179c:	fe 4f       	sbci	r31, 0xFE	; 254
    179e:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    17a2:	0e 94 1f 03 	call	0x63e	; 0x63e <tiny_dma_set_mode_0>
    17a6:	27 c3       	rjmp	.+1614   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 1:
					tiny_dma_set_mode_1();
    17a8:	0e 94 92 03 	call	0x724	; 0x724 <tiny_dma_set_mode_1>
    17ac:	24 c3       	rjmp	.+1608   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 2:
					tiny_dma_set_mode_2();
    17ae:	32 d8       	rcall	.-3996   	; 0x814 <tiny_dma_set_mode_2>
    17b0:	22 c3       	rjmp	.+1604   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 3:
					tiny_dma_set_mode_3();
    17b2:	a5 d8       	rcall	.-3766   	; 0x8fe <tiny_dma_set_mode_3>
    17b4:	20 c3       	rjmp	.+1600   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 4:
					tiny_dma_set_mode_4();
    17b6:	1f d9       	rcall	.-3522   	; 0x9f6 <tiny_dma_set_mode_4>
    17b8:	1e c3       	rjmp	.+1596   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 5:
					tiny_dma_set_mode_5();
    17ba:	93 d9       	rcall	.-3290   	; 0xae2 <tiny_dma_set_mode_5>
    17bc:	1c c3       	rjmp	.+1592   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 6:
					tiny_dma_set_mode_6();
    17be:	d9 d9       	rcall	.-3150   	; 0xb72 <tiny_dma_set_mode_6>
    17c0:	1a c3       	rjmp	.+1588   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 7:
					tiny_dma_set_mode_7();
    17c2:	39 da       	rcall	.-2958   	; 0xc36 <tiny_dma_set_mode_7>
    17c4:	18 c3       	rjmp	.+1584   	; 0x1df6 <udc_process_setup+0x702>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    17c6:	e0 e4       	ldi	r30, 0x40	; 64
    17c8:	f8 e0       	ldi	r31, 0x08	; 8
    17ca:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    17cc:	ce e5       	ldi	r28, 0x5E	; 94
    17ce:	d4 e2       	ldi	r29, 0x24	; 36
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	86 ab       	std	Z+54, r24	; 0x36
    17d6:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	8f 70       	andi	r24, 0x0F	; 15
    17dc:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    17de:	6e 81       	ldd	r22, Y+6	; 0x06
    17e0:	7f 81       	ldd	r23, Y+7	; 0x07
    17e2:	8e e6       	ldi	r24, 0x6E	; 110
    17e4:	94 e2       	ldi	r25, 0x24	; 36
    17e6:	b7 d6       	rcall	.+3438   	; 0x2556 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    17e8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ea:	9f 81       	ldd	r25, Y+7	; 0x07
    17ec:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
    17f0:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
    17f4:	82 17       	cp	r24, r18
    17f6:	93 07       	cpc	r25, r19
    17f8:	09 f4       	brne	.+2      	; 0x17fc <udc_process_setup+0x108>
    17fa:	fd c2       	rjmp	.+1530   	; 0x1df6 <udc_process_setup+0x702>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    17fc:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <auxDacBufLen>
    1800:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <auxDacBufLen+0x1>
				switch(global_mode){
    1804:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    1808:	8e 2f       	mov	r24, r30
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	88 30       	cpi	r24, 0x08	; 8
    180e:	91 05       	cpc	r25, r1
    1810:	08 f0       	brcs	.+2      	; 0x1814 <udc_process_setup+0x120>
    1812:	8a c0       	rjmp	.+276    	; 0x1928 <udc_process_setup+0x234>
    1814:	fc 01       	movw	r30, r24
    1816:	ea 5e       	subi	r30, 0xEA	; 234
    1818:	fe 4f       	sbci	r31, 0xFE	; 254
    181a:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    181e:	0e 94 1f 03 	call	0x63e	; 0x63e <tiny_dma_set_mode_0>
    1822:	e9 c2       	rjmp	.+1490   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1824:	0e 94 92 03 	call	0x724	; 0x724 <tiny_dma_set_mode_1>
    1828:	e6 c2       	rjmp	.+1484   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 2:
					tiny_dma_set_mode_2();
    182a:	0e 94 0a 04 	call	0x814	; 0x814 <tiny_dma_set_mode_2>
    182e:	e3 c2       	rjmp	.+1478   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1830:	66 d8       	rcall	.-3892   	; 0x8fe <tiny_dma_set_mode_3>
    1832:	e1 c2       	rjmp	.+1474   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1834:	e0 d8       	rcall	.-3648   	; 0x9f6 <tiny_dma_set_mode_4>
    1836:	df c2       	rjmp	.+1470   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1838:	54 d9       	rcall	.-3416   	; 0xae2 <tiny_dma_set_mode_5>
    183a:	dd c2       	rjmp	.+1466   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 6:
					tiny_dma_set_mode_6();
    183c:	9a d9       	rcall	.-3276   	; 0xb72 <tiny_dma_set_mode_6>
    183e:	db c2       	rjmp	.+1462   	; 0x1df6 <udc_process_setup+0x702>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1840:	fa d9       	rcall	.-3084   	; 0xc36 <tiny_dma_set_mode_7>
    1842:	d9 c2       	rjmp	.+1458   	; 0x1df6 <udc_process_setup+0x702>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1844:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1848:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    184c:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1850:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <PSU_target>
    1854:	d0 c2       	rjmp	.+1440   	; 0x1df6 <udc_process_setup+0x702>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1856:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    185a:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    185e:	cb c2       	rjmp	.+1430   	; 0x1df6 <udc_process_setup+0x702>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1860:	e0 91 60 24 	lds	r30, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1864:	f0 91 61 24 	lds	r31, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1868:	e8 30       	cpi	r30, 0x08	; 8
    186a:	f1 05       	cpc	r31, r1
    186c:	08 f0       	brcs	.+2      	; 0x1870 <udc_process_setup+0x17c>
    186e:	5e c0       	rjmp	.+188    	; 0x192c <udc_process_setup+0x238>
    1870:	e2 5e       	subi	r30, 0xE2	; 226
    1872:	fe 4f       	sbci	r31, 0xFE	; 254
    1874:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	0e 94 a3 02 	call	0x546	; 0x546 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1880:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1884:	0e 94 71 02 	call	0x4e2	; 0x4e2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    1888:	0e 94 1f 03 	call	0x63e	; 0x63e <tiny_dma_set_mode_0>
    188c:	b4 c2       	rjmp	.+1384   	; 0x1df6 <udc_process_setup+0x702>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	0e 94 a3 02 	call	0x546	; 0x546 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1896:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    189a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    189e:	0e 94 92 03 	call	0x724	; 0x724 <tiny_dma_set_mode_1>
    18a2:	a9 c2       	rjmp	.+1362   	; 0x1df6 <udc_process_setup+0x702>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	0e 94 a3 02 	call	0x546	; 0x546 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18ac:	ce e5       	ldi	r28, 0x5E	; 94
    18ae:	d4 e2       	ldi	r29, 0x24	; 36
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
    18b2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    18b6:	8d 81       	ldd	r24, Y+5	; 0x05
    18b8:	0e 94 86 02 	call	0x50c	; 0x50c <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    18bc:	0e 94 0a 04 	call	0x814	; 0x814 <tiny_dma_set_mode_2>
    18c0:	9a c2       	rjmp	.+1332   	; 0x1df6 <udc_process_setup+0x702>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    18c2:	1d d8       	rcall	.-4038   	; 0x8fe <tiny_dma_set_mode_3>
    18c4:	98 c2       	rjmp	.+1328   	; 0x1df6 <udc_process_setup+0x702>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    18c6:	97 d8       	rcall	.-3794   	; 0x9f6 <tiny_dma_set_mode_4>
    18c8:	96 c2       	rjmp	.+1324   	; 0x1df6 <udc_process_setup+0x702>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	0e 94 a3 02 	call	0x546	; 0x546 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18d2:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    18d6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    18da:	03 d9       	rcall	.-3578   	; 0xae2 <tiny_dma_set_mode_5>
    18dc:	8c c2       	rjmp	.+1304   	; 0x1df6 <udc_process_setup+0x702>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	0e 94 a3 02 	call	0x546	; 0x546 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18e6:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    18ea:	0e 94 71 02 	call	0x4e2	; 0x4e2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    18ee:	41 d9       	rcall	.-3454   	; 0xb72 <tiny_dma_set_mode_6>
    18f0:	82 c2       	rjmp	.+1284   	; 0x1df6 <udc_process_setup+0x702>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    18f2:	62 e0       	ldi	r22, 0x02	; 2
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	0e 94 a3 02 	call	0x546	; 0x546 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    18fa:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    18fe:	80 68       	ori	r24, 0x80	; 128
    1900:	0e 94 71 02 	call	0x4e2	; 0x4e2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    1904:	98 d9       	rcall	.-3280   	; 0xc36 <tiny_dma_set_mode_7>
    1906:	77 c2       	rjmp	.+1262   	; 0x1df6 <udc_process_setup+0x702>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1908:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    190c:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1910:	72 c2       	rjmp	.+1252   	; 0x1df6 <udc_process_setup+0x702>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1912:	e9 e7       	ldi	r30, 0x79	; 121
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	88 ed       	ldi	r24, 0xD8	; 216
    191a:	f8 94       	cli
    191c:	84 bf       	out	0x34, r24	; 52
    191e:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	05 c0       	rjmp	.+10     	; 0x192e <udc_process_setup+0x23a>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	03 c0       	rjmp	.+6      	; 0x192e <udc_process_setup+0x23a>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	01 c0       	rjmp	.+2      	; 0x192e <udc_process_setup+0x23a>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    192c:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    192e:	81 11       	cpse	r24, r1
    1930:	65 c2       	rjmp	.+1226   	; 0x1dfc <udc_process_setup+0x708>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1932:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    1936:	98 2f       	mov	r25, r24
    1938:	90 76       	andi	r25, 0x60	; 96
    193a:	09 f0       	breq	.+2      	; 0x193e <udc_process_setup+0x24a>
    193c:	e1 c1       	rjmp	.+962    	; 0x1d00 <udc_process_setup+0x60c>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    193e:	88 23       	and	r24, r24
    1940:	0c f0       	brlt	.+2      	; 0x1944 <udc_process_setup+0x250>
    1942:	05 c1       	rjmp	.+522    	; 0x1b4e <udc_process_setup+0x45a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1944:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1948:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    194c:	21 15       	cp	r18, r1
    194e:	31 05       	cpc	r19, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <udc_process_setup+0x260>
    1952:	d6 c1       	rjmp	.+940    	; 0x1d00 <udc_process_setup+0x60c>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1954:	8f 71       	andi	r24, 0x1F	; 31
    1956:	09 f0       	breq	.+2      	; 0x195a <udc_process_setup+0x266>
    1958:	a3 c0       	rjmp	.+326    	; 0x1aa0 <udc_process_setup+0x3ac>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    195a:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    195e:	96 30       	cpi	r25, 0x06	; 6
    1960:	79 f0       	breq	.+30     	; 0x1980 <udc_process_setup+0x28c>
    1962:	98 30       	cpi	r25, 0x08	; 8
    1964:	09 f4       	brne	.+2      	; 0x1968 <udc_process_setup+0x274>
    1966:	92 c0       	rjmp	.+292    	; 0x1a8c <udc_process_setup+0x398>
    1968:	91 11       	cpse	r25, r1
    196a:	9a c0       	rjmp	.+308    	; 0x1aa0 <udc_process_setup+0x3ac>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    196c:	22 30       	cpi	r18, 0x02	; 2
    196e:	31 05       	cpc	r19, r1
    1970:	09 f0       	breq	.+2      	; 0x1974 <udc_process_setup+0x280>
    1972:	c6 c1       	rjmp	.+908    	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1974:	62 e0       	ldi	r22, 0x02	; 2
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	86 ec       	ldi	r24, 0xC6	; 198
    197a:	90 e2       	ldi	r25, 0x20	; 32
    197c:	ec d5       	rcall	.+3032   	; 0x2556 <udd_set_setup_payload>
    197e:	3d c2       	rjmp	.+1146   	; 0x1dfa <udc_process_setup+0x706>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1980:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1984:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1988:	29 2f       	mov	r18, r25
    198a:	33 27       	eor	r19, r19
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	a9 f0       	breq	.+42     	; 0x19bc <udc_process_setup+0x2c8>
    1992:	24 f4       	brge	.+8      	; 0x199c <udc_process_setup+0x2a8>
    1994:	21 30       	cpi	r18, 0x01	; 1
    1996:	31 05       	cpc	r19, r1
    1998:	41 f0       	breq	.+16     	; 0x19aa <udc_process_setup+0x2b6>
    199a:	a9 c1       	rjmp	.+850    	; 0x1cee <udc_process_setup+0x5fa>
    199c:	23 30       	cpi	r18, 0x03	; 3
    199e:	31 05       	cpc	r19, r1
    19a0:	d9 f1       	breq	.+118    	; 0x1a18 <udc_process_setup+0x324>
    19a2:	2f 30       	cpi	r18, 0x0F	; 15
    19a4:	31 05       	cpc	r19, r1
    19a6:	51 f1       	breq	.+84     	; 0x19fc <udc_process_setup+0x308>
    19a8:	a2 c1       	rjmp	.+836    	; 0x1cee <udc_process_setup+0x5fa>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    19aa:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <udc_config>
    19ae:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    19b2:	dc 01       	movw	r26, r24
    19b4:	6c 91       	ld	r22, X
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	ce d5       	rcall	.+2972   	; 0x2556 <udd_set_setup_payload>
    19ba:	59 c0       	rjmp	.+178    	; 0x1a6e <udc_process_setup+0x37a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    19bc:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    19c0:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
    19c4:	21 89       	ldd	r18, Z+17	; 0x11
    19c6:	82 17       	cp	r24, r18
    19c8:	08 f0       	brcs	.+2      	; 0x19cc <udc_process_setup+0x2d8>
    19ca:	9a c1       	rjmp	.+820    	; 0x1d00 <udc_process_setup+0x60c>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    19cc:	99 27       	eor	r25, r25
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    19da:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    19de:	e8 0f       	add	r30, r24
    19e0:	f9 1f       	adc	r31, r25
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    19e6:	fc 01       	movw	r30, r24
    19e8:	62 81       	ldd	r22, Z+2	; 0x02
    19ea:	73 81       	ldd	r23, Z+3	; 0x03
    19ec:	b4 d5       	rcall	.+2920   	; 0x2556 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    19ee:	e0 91 66 24 	lds	r30, 0x2466	; 0x802466 <udd_g_ctrlreq+0x8>
    19f2:	f0 91 67 24 	lds	r31, 0x2467	; 0x802467 <udd_g_ctrlreq+0x9>
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	81 83       	std	Z+1, r24	; 0x01
    19fa:	39 c0       	rjmp	.+114    	; 0x1a6e <udc_process_setup+0x37a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    19fc:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config+0x4>
    1a00:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x5>
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <udc_process_setup+0x316>
    1a08:	7b c1       	rjmp	.+758    	; 0x1d00 <udc_process_setup+0x60c>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	12 96       	adiw	r26, 0x02	; 2
    1a0e:	6d 91       	ld	r22, X+
    1a10:	7c 91       	ld	r23, X
    1a12:	13 97       	sbiw	r26, 0x03	; 3
    1a14:	a0 d5       	rcall	.+2880   	; 0x2556 <udd_set_setup_payload>
    1a16:	2b c0       	rjmp	.+86     	; 0x1a6e <udc_process_setup+0x37a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1a18:	99 27       	eor	r25, r25
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	71 f0       	breq	.+28     	; 0x1a3c <udc_process_setup+0x348>
    1a20:	38 f0       	brcs	.+14     	; 0x1a30 <udc_process_setup+0x33c>
    1a22:	02 97       	sbiw	r24, 0x02	; 2
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <udc_process_setup+0x334>
    1a26:	6c c1       	rjmp	.+728    	; 0x1d00 <udc_process_setup+0x60c>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1a28:	8a e8       	ldi	r24, 0x8A	; 138
    1a2a:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a2c:	28 e1       	ldi	r18, 0x18	; 24
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <udc_process_setup+0x34e>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a30:	64 e0       	ldi	r22, 0x04	; 4
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	8e ea       	ldi	r24, 0xAE	; 174
    1a36:	90 e2       	ldi	r25, 0x20	; 32
    1a38:	8e d5       	rcall	.+2844   	; 0x2556 <udd_set_setup_payload>
    1a3a:	19 c0       	rjmp	.+50     	; 0x1a6e <udc_process_setup+0x37a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1a3c:	83 ea       	ldi	r24, 0xA3	; 163
    1a3e:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a40:	29 e0       	ldi	r18, 0x09	; 9
    1a42:	38 2f       	mov	r19, r24
    1a44:	aa e5       	ldi	r26, 0x5A	; 90
    1a46:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a48:	e8 2f       	mov	r30, r24
    1a4a:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1a4c:	81 91       	ld	r24, Z+
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	8d 93       	st	X+, r24
    1a52:	9d 93       	st	X+, r25
    1a54:	8e 2f       	mov	r24, r30
    1a56:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1a58:	82 17       	cp	r24, r18
    1a5a:	c0 f3       	brcs	.-16     	; 0x1a4c <udc_process_setup+0x358>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1a5c:	62 2f       	mov	r22, r18
    1a5e:	66 0f       	add	r22, r22
    1a60:	6e 5f       	subi	r22, 0xFE	; 254
    1a62:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	88 e5       	ldi	r24, 0x58	; 88
    1a6a:	90 e2       	ldi	r25, 0x20	; 32
    1a6c:	74 d5       	rcall	.+2792   	; 0x2556 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1a6e:	ee e5       	ldi	r30, 0x5E	; 94
    1a70:	f4 e2       	ldi	r31, 0x24	; 36
    1a72:	86 81       	ldd	r24, Z+6	; 0x06
    1a74:	97 81       	ldd	r25, Z+7	; 0x07
    1a76:	22 85       	ldd	r18, Z+10	; 0x0a
    1a78:	33 85       	ldd	r19, Z+11	; 0x0b
    1a7a:	82 17       	cp	r24, r18
    1a7c:	93 07       	cpc	r25, r19
    1a7e:	08 f0       	brcs	.+2      	; 0x1a82 <udc_process_setup+0x38e>
    1a80:	bc c1       	rjmp	.+888    	; 0x1dfa <udc_process_setup+0x706>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1a82:	80 93 68 24 	sts	0x2468, r24	; 0x802468 <udd_g_ctrlreq+0xa>
    1a86:	90 93 69 24 	sts	0x2469, r25	; 0x802469 <udd_g_ctrlreq+0xb>
    1a8a:	b7 c1       	rjmp	.+878    	; 0x1dfa <udc_process_setup+0x706>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a8c:	21 30       	cpi	r18, 0x01	; 1
    1a8e:	31 05       	cpc	r19, r1
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <udc_process_setup+0x3a0>
    1a92:	36 c1       	rjmp	.+620    	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	82 ec       	ldi	r24, 0xC2	; 194
    1a9a:	90 e2       	ldi	r25, 0x20	; 32
    1a9c:	5c d5       	rcall	.+2744   	; 0x2556 <udd_set_setup_payload>
    1a9e:	ad c1       	rjmp	.+858    	; 0x1dfa <udc_process_setup+0x706>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	e1 f5       	brne	.+120    	; 0x1b1c <udc_process_setup+0x428>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1aa4:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1aa8:	9a 30       	cpi	r25, 0x0A	; 10
    1aaa:	c1 f5       	brne	.+112    	; 0x1b1c <udc_process_setup+0x428>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1aac:	21 30       	cpi	r18, 0x01	; 1
    1aae:	31 05       	cpc	r19, r1
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <udc_process_setup+0x3c0>
    1ab2:	26 c1       	rjmp	.+588    	; 0x1d00 <udc_process_setup+0x60c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1ab4:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1ab8:	88 23       	and	r24, r24
    1aba:	09 f4       	brne	.+2      	; 0x1abe <udc_process_setup+0x3ca>
    1abc:	21 c1       	rjmp	.+578    	; 0x1d00 <udc_process_setup+0x60c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1abe:	c0 91 62 24 	lds	r28, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1ac2:	d0 91 63 24 	lds	r29, 0x2463	; 0x802463 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ac6:	00 91 c0 20 	lds	r16, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1aca:	10 91 c1 20 	lds	r17, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1ace:	d8 01       	movw	r26, r16
    1ad0:	ed 91       	ld	r30, X+
    1ad2:	fc 91       	ld	r31, X
    1ad4:	84 81       	ldd	r24, Z+4	; 0x04
    1ad6:	c8 17       	cp	r28, r24
    1ad8:	08 f0       	brcs	.+2      	; 0x1adc <udc_process_setup+0x3e8>
    1ada:	12 c1       	rjmp	.+548    	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	8c 2f       	mov	r24, r28
    1ae0:	ff dc       	rcall	.-1538   	; 0x14e0 <udc_update_iface_desc>
    1ae2:	88 23       	and	r24, r24
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <udc_process_setup+0x3f4>
    1ae6:	0c c1       	rjmp	.+536    	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ae8:	ce 01       	movw	r24, r28
    1aea:	99 27       	eor	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	d8 01       	movw	r26, r16
    1af2:	12 96       	adiw	r26, 0x02	; 2
    1af4:	ed 91       	ld	r30, X+
    1af6:	fc 91       	ld	r31, X
    1af8:	13 97       	sbiw	r26, 0x03	; 3
    1afa:	e8 0f       	add	r30, r24
    1afc:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1afe:	01 90       	ld	r0, Z+
    1b00:	f0 81       	ld	r31, Z
    1b02:	e0 2d       	mov	r30, r0
    1b04:	86 81       	ldd	r24, Z+6	; 0x06
    1b06:	97 81       	ldd	r25, Z+7	; 0x07
    1b08:	fc 01       	movw	r30, r24
    1b0a:	09 95       	icall
    1b0c:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	84 ec       	ldi	r24, 0xC4	; 196
    1b16:	90 e2       	ldi	r25, 0x20	; 32
    1b18:	1e d5       	rcall	.+2620   	; 0x2556 <udd_set_setup_payload>
    1b1a:	6f c1       	rjmp	.+734    	; 0x1dfa <udc_process_setup+0x706>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b1c:	82 30       	cpi	r24, 0x02	; 2
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <udc_process_setup+0x42e>
    1b20:	ef c0       	rjmp	.+478    	; 0x1d00 <udc_process_setup+0x60c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b22:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1b26:	81 11       	cpse	r24, r1
    1b28:	e4 c0       	rjmp	.+456    	; 0x1cf2 <udc_process_setup+0x5fe>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1b2a:	22 30       	cpi	r18, 0x02	; 2
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <udc_process_setup+0x43e>
    1b30:	e7 c0       	rjmp	.+462    	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1b32:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1b36:	8b d5       	rcall	.+2838   	; 0x264e <udd_ep_is_halted>
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <udc_ep_status.5522>
    1b3e:	90 93 bd 20 	sts	0x20BD, r25	; 0x8020bd <udc_ep_status.5522+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1b42:	62 e0       	ldi	r22, 0x02	; 2
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	8c eb       	ldi	r24, 0xBC	; 188
    1b48:	90 e2       	ldi	r25, 0x20	; 32
    1b4a:	05 d5       	rcall	.+2570   	; 0x2556 <udd_set_setup_payload>
    1b4c:	56 c1       	rjmp	.+684    	; 0x1dfa <udc_process_setup+0x706>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b4e:	8f 71       	andi	r24, 0x1F	; 31
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <udc_process_setup+0x460>
    1b52:	83 c0       	rjmp	.+262    	; 0x1c5a <udc_process_setup+0x566>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b54:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1b58:	93 30       	cpi	r25, 0x03	; 3
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <udc_process_setup+0x46a>
    1b5c:	cc c0       	rjmp	.+408    	; 0x1cf6 <udc_process_setup+0x602>
    1b5e:	18 f4       	brcc	.+6      	; 0x1b66 <udc_process_setup+0x472>
    1b60:	91 30       	cpi	r25, 0x01	; 1
    1b62:	a1 f0       	breq	.+40     	; 0x1b8c <udc_process_setup+0x498>
    1b64:	7a c0       	rjmp	.+244    	; 0x1c5a <udc_process_setup+0x566>
    1b66:	95 30       	cpi	r25, 0x05	; 5
    1b68:	19 f0       	breq	.+6      	; 0x1b70 <udc_process_setup+0x47c>
    1b6a:	99 30       	cpi	r25, 0x09	; 9
    1b6c:	39 f1       	breq	.+78     	; 0x1bbc <udc_process_setup+0x4c8>
    1b6e:	75 c0       	rjmp	.+234    	; 0x1c5a <udc_process_setup+0x566>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b70:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1b74:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1b78:	89 2b       	or	r24, r25
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <udc_process_setup+0x48a>
    1b7c:	c1 c0       	rjmp	.+386    	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1b7e:	8a e6       	ldi	r24, 0x6A	; 106
    1b80:	9a e0       	ldi	r25, 0x0A	; 10
    1b82:	80 93 6a 24 	sts	0x246A, r24	; 0x80246a <udd_g_ctrlreq+0xc>
    1b86:	90 93 6b 24 	sts	0x246B, r25	; 0x80246b <udd_g_ctrlreq+0xd>
    1b8a:	37 c1       	rjmp	.+622    	; 0x1dfa <udc_process_setup+0x706>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b8c:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1b90:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1b94:	89 2b       	or	r24, r25
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <udc_process_setup+0x4a6>
    1b98:	b3 c0       	rjmp	.+358    	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b9a:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1b9e:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <udc_process_setup+0x4b4>
    1ba6:	ac c0       	rjmp	.+344    	; 0x1d00 <udc_process_setup+0x60c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1ba8:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udc_device_status>
    1bac:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <udc_device_status+0x1>
    1bb0:	8d 7f       	andi	r24, 0xFD	; 253
    1bb2:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udc_device_status>
    1bb6:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <udc_device_status+0x1>
    1bba:	1f c1       	rjmp	.+574    	; 0x1dfa <udc_process_setup+0x706>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1bbc:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1bc0:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1bc4:	89 2b       	or	r24, r25
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <udc_process_setup+0x4d6>
    1bc8:	9b c0       	rjmp	.+310    	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1bca:	c2 d4       	rcall	.+2436   	; 0x2550 <udd_getaddress>
    1bcc:	88 23       	and	r24, r24
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <udc_process_setup+0x4de>
    1bd0:	97 c0       	rjmp	.+302    	; 0x1d00 <udc_process_setup+0x60c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1bd2:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1bd6:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1bda:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1bdc:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    1be0:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1be4:	81 89       	ldd	r24, Z+17	; 0x11
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	82 17       	cp	r24, r18
    1bea:	93 07       	cpc	r25, r19
    1bec:	08 f4       	brcc	.+2      	; 0x1bf0 <udc_process_setup+0x4fc>
    1bee:	88 c0       	rjmp	.+272    	; 0x1d00 <udc_process_setup+0x60c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1bf0:	2c dd       	rcall	.-1448   	; 0x164a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1bf2:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1bf6:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1bfa:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1bfe:	88 23       	and	r24, r24
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <udc_process_setup+0x510>
    1c02:	fb c0       	rjmp	.+502    	; 0x1dfa <udc_process_setup+0x706>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1c04:	99 27       	eor	r25, r25
    1c06:	81 50       	subi	r24, 0x01	; 1
    1c08:	90 4c       	sbci	r25, 0xC0	; 192
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    1c16:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    1c1a:	e8 0f       	add	r30, r24
    1c1c:	f9 1f       	adc	r31, r25
    1c1e:	e0 93 c0 20 	sts	0x20C0, r30	; 0x8020c0 <udc_ptr_conf>
    1c22:	f0 93 c1 20 	sts	0x20C1, r31	; 0x8020c1 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c26:	01 90       	ld	r0, Z+
    1c28:	f0 81       	ld	r31, Z
    1c2a:	e0 2d       	mov	r30, r0
    1c2c:	84 81       	ldd	r24, Z+4	; 0x04
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <udc_process_setup+0x540>
    1c32:	e3 c0       	rjmp	.+454    	; 0x1dfa <udc_process_setup+0x706>
    1c34:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	8c 2f       	mov	r24, r28
    1c3a:	ce dc       	rcall	.-1636   	; 0x15d8 <udc_iface_enable>
    1c3c:	88 23       	and	r24, r24
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <udc_process_setup+0x54e>
    1c40:	5f c0       	rjmp	.+190    	; 0x1d00 <udc_process_setup+0x60c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c42:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c44:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1c48:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1c4c:	01 90       	ld	r0, Z+
    1c4e:	f0 81       	ld	r31, Z
    1c50:	e0 2d       	mov	r30, r0
    1c52:	84 81       	ldd	r24, Z+4	; 0x04
    1c54:	c8 17       	cp	r28, r24
    1c56:	78 f3       	brcs	.-34     	; 0x1c36 <udc_process_setup+0x542>
    1c58:	d0 c0       	rjmp	.+416    	; 0x1dfa <udc_process_setup+0x706>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	e1 f4       	brne	.+56     	; 0x1c96 <udc_process_setup+0x5a2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c5e:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1c62:	9b 30       	cpi	r25, 0x0B	; 11
    1c64:	c1 f4       	brne	.+48     	; 0x1c96 <udc_process_setup+0x5a2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1c66:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1c6a:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1c6e:	89 2b       	or	r24, r25
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <udc_process_setup+0x580>
    1c72:	46 c0       	rjmp	.+140    	; 0x1d00 <udc_process_setup+0x60c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c74:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1c78:	88 23       	and	r24, r24
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <udc_process_setup+0x58a>
    1c7c:	41 c0       	rjmp	.+130    	; 0x1d00 <udc_process_setup+0x60c>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c7e:	ee e5       	ldi	r30, 0x5E	; 94
    1c80:	f4 e2       	ldi	r31, 0x24	; 36
    1c82:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c84:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1c86:	8c 2f       	mov	r24, r28
    1c88:	65 dc       	rcall	.-1846   	; 0x1554 <udc_iface_disable>
    1c8a:	88 23       	and	r24, r24
    1c8c:	c9 f1       	breq	.+114    	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1c8e:	6d 2f       	mov	r22, r29
    1c90:	8c 2f       	mov	r24, r28
    1c92:	a2 dc       	rcall	.-1724   	; 0x15d8 <udc_iface_enable>
    1c94:	33 c0       	rjmp	.+102    	; 0x1cfc <udc_process_setup+0x608>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	99 f5       	brne	.+102    	; 0x1d00 <udc_process_setup+0x60c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c9a:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	19 f0       	breq	.+6      	; 0x1ca8 <udc_process_setup+0x5b4>
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	89 f0       	breq	.+34     	; 0x1cc8 <udc_process_setup+0x5d4>
    1ca6:	29 c0       	rjmp	.+82     	; 0x1cfa <udc_process_setup+0x606>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ca8:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1cac:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1cb0:	89 2b       	or	r24, r25
    1cb2:	31 f5       	brne	.+76     	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cb4:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1cb8:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1cbc:	89 2b       	or	r24, r25
    1cbe:	01 f5       	brne	.+64     	; 0x1d00 <udc_process_setup+0x60c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cc0:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1cc4:	df d4       	rcall	.+2494   	; 0x2684 <udd_ep_clear_halt>
    1cc6:	1a c0       	rjmp	.+52     	; 0x1cfc <udc_process_setup+0x608>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1cc8:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1ccc:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1cd0:	89 2b       	or	r24, r25
    1cd2:	b1 f4       	brne	.+44     	; 0x1d00 <udc_process_setup+0x60c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cd4:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1cd8:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1cdc:	89 2b       	or	r24, r25
    1cde:	81 f4       	brne	.+32     	; 0x1d00 <udc_process_setup+0x60c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ce0:	ce e5       	ldi	r28, 0x5E	; 94
    1ce2:	d4 e2       	ldi	r29, 0x24	; 36
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	bd d5       	rcall	.+2938   	; 0x2862 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	20 d6       	rcall	.+3136   	; 0x292c <udd_ep_set_halt>
    1cec:	07 c0       	rjmp	.+14     	; 0x1cfc <udc_process_setup+0x608>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <udc_process_setup+0x608>
				break;
			}
		}
#endif
	}
	return false;
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <udc_process_setup+0x608>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <udc_process_setup+0x608>
				break;
			}
		}
#endif
	}
	return false;
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1cfc:	81 11       	cpse	r24, r1
    1cfe:	7e c0       	rjmp	.+252    	; 0x1dfc <udc_process_setup+0x708>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1d00:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    1d04:	8f 71       	andi	r24, 0x1F	; 31
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	71 f5       	brne	.+92     	; 0x1d66 <udc_process_setup+0x672>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d0a:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1d0e:	88 23       	and	r24, r24
    1d10:	51 f1       	breq	.+84     	; 0x1d66 <udc_process_setup+0x672>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d12:	00 91 62 24 	lds	r16, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1d16:	10 91 63 24 	lds	r17, 0x2463	; 0x802463 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d1a:	c0 91 c0 20 	lds	r28, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1d1e:	d0 91 c1 20 	lds	r29, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1d22:	e8 81       	ld	r30, Y
    1d24:	f9 81       	ldd	r31, Y+1	; 0x01
    1d26:	84 81       	ldd	r24, Z+4	; 0x04
    1d28:	08 17       	cp	r16, r24
    1d2a:	e8 f4       	brcc	.+58     	; 0x1d66 <udc_process_setup+0x672>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	80 2f       	mov	r24, r16
    1d30:	d7 db       	rcall	.-2130   	; 0x14e0 <udc_update_iface_desc>
    1d32:	88 23       	and	r24, r24
    1d34:	c1 f0       	breq	.+48     	; 0x1d66 <udc_process_setup+0x672>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d36:	f8 01       	movw	r30, r16
    1d38:	ff 27       	eor	r31, r31
    1d3a:	cf 01       	movw	r24, r30
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	ea 81       	ldd	r30, Y+2	; 0x02
    1d42:	fb 81       	ldd	r31, Y+3	; 0x03
    1d44:	e8 0f       	add	r30, r24
    1d46:	f9 1f       	adc	r31, r25
    1d48:	c0 81       	ld	r28, Z
    1d4a:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d4c:	ee 81       	ldd	r30, Y+6	; 0x06
    1d4e:	ff 81       	ldd	r31, Y+7	; 0x07
    1d50:	09 95       	icall
    1d52:	68 2f       	mov	r22, r24
    1d54:	80 2f       	mov	r24, r16
    1d56:	c4 db       	rcall	.-2168   	; 0x14e0 <udc_update_iface_desc>
    1d58:	88 23       	and	r24, r24
    1d5a:	29 f0       	breq	.+10     	; 0x1d66 <udc_process_setup+0x672>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1d5c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d5e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d60:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1d62:	81 11       	cpse	r24, r1
    1d64:	4b c0       	rjmp	.+150    	; 0x1dfc <udc_process_setup+0x708>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d66:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    1d6a:	8f 71       	andi	r24, 0x1F	; 31
    1d6c:	82 30       	cpi	r24, 0x02	; 2
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <udc_process_setup+0x67e>
    1d70:	40 c0       	rjmp	.+128    	; 0x1df2 <udc_process_setup+0x6fe>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d72:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1d76:	88 23       	and	r24, r24
    1d78:	b1 f1       	breq	.+108    	; 0x1de6 <udc_process_setup+0x6f2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d7a:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1d7e:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1d82:	ed 91       	ld	r30, X+
    1d84:	fc 91       	ld	r31, X
    1d86:	11 97       	sbiw	r26, 0x01	; 1
    1d88:	84 81       	ldd	r24, Z+4	; 0x04
    1d8a:	88 23       	and	r24, r24
    1d8c:	71 f1       	breq	.+92     	; 0x1dea <udc_process_setup+0x6f6>
    1d8e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d90:	ec 2f       	mov	r30, r28
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	ee 0f       	add	r30, r30
    1d96:	ff 1f       	adc	r31, r31
    1d98:	12 96       	adiw	r26, 0x02	; 2
    1d9a:	8d 91       	ld	r24, X+
    1d9c:	9c 91       	ld	r25, X
    1d9e:	13 97       	sbiw	r26, 0x03	; 3
    1da0:	e8 0f       	add	r30, r24
    1da2:	f9 1f       	adc	r31, r25
    1da4:	00 81       	ld	r16, Z
    1da6:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1da8:	d8 01       	movw	r26, r16
    1daa:	16 96       	adiw	r26, 0x06	; 6
    1dac:	ed 91       	ld	r30, X+
    1dae:	fc 91       	ld	r31, X
    1db0:	17 97       	sbiw	r26, 0x07	; 7
    1db2:	09 95       	icall
    1db4:	68 2f       	mov	r22, r24
    1db6:	8c 2f       	mov	r24, r28
    1db8:	93 db       	rcall	.-2266   	; 0x14e0 <udc_update_iface_desc>
    1dba:	88 23       	and	r24, r24
    1dbc:	f9 f0       	breq	.+62     	; 0x1dfc <udc_process_setup+0x708>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1dbe:	d8 01       	movw	r26, r16
    1dc0:	14 96       	adiw	r26, 0x04	; 4
    1dc2:	ed 91       	ld	r30, X+
    1dc4:	fc 91       	ld	r31, X
    1dc6:	15 97       	sbiw	r26, 0x05	; 5
    1dc8:	09 95       	icall
    1dca:	81 11       	cpse	r24, r1
    1dcc:	17 c0       	rjmp	.+46     	; 0x1dfc <udc_process_setup+0x708>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1dce:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dd0:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1dd4:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1dd8:	ed 91       	ld	r30, X+
    1dda:	fc 91       	ld	r31, X
    1ddc:	11 97       	sbiw	r26, 0x01	; 1
    1dde:	94 81       	ldd	r25, Z+4	; 0x04
    1de0:	c9 17       	cp	r28, r25
    1de2:	b0 f2       	brcs	.-84     	; 0x1d90 <udc_process_setup+0x69c>
    1de4:	0b c0       	rjmp	.+22     	; 0x1dfc <udc_process_setup+0x708>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <udc_process_setup+0x708>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	07 c0       	rjmp	.+14     	; 0x1dfc <udc_process_setup+0x708>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	05 c0       	rjmp	.+10     	; 0x1dfc <udc_process_setup+0x708>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	03 c0       	rjmp	.+6      	; 0x1dfc <udc_process_setup+0x708>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	01 c0       	rjmp	.+2      	; 0x1dfc <udc_process_setup+0x708>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	08 95       	ret

00001e06 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1e06:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1e08:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1e0a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1e0c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1e0e:	60 83       	st	Z, r22
	ret                             // Return to caller
    1e10:	08 95       	ret

00001e12 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1e12:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1e16:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1e18:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1e1a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1e1e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1e20:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1e24:	08 95       	ret

00001e26 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e26:	81 11       	cpse	r24, r1
    1e28:	22 c0       	rjmp	.+68     	; 0x1e6e <udd_sleep_mode+0x48>
    1e2a:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1e2e:	99 23       	and	r25, r25
    1e30:	d9 f0       	breq	.+54     	; 0x1e68 <udd_sleep_mode+0x42>
    1e32:	90 91 4b 2e 	lds	r25, 0x2E4B	; 0x802e4b <sleepmgr_locks+0x1>
    1e36:	91 11       	cpse	r25, r1
    1e38:	01 c0       	rjmp	.+2      	; 0x1e3c <udd_sleep_mode+0x16>
    1e3a:	ff cf       	rjmp	.-2      	; 0x1e3a <udd_sleep_mode+0x14>
    1e3c:	2f b7       	in	r18, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	ea e4       	ldi	r30, 0x4A	; 74
    1e42:	fe e2       	ldi	r31, 0x2E	; 46
    1e44:	91 81       	ldd	r25, Z+1	; 0x01
    1e46:	91 50       	subi	r25, 0x01	; 1
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	2f bf       	out	0x3f, r18	; 63
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <udd_sleep_mode+0x42>
    1e4e:	90 91 4b 2e 	lds	r25, 0x2E4B	; 0x802e4b <sleepmgr_locks+0x1>
    1e52:	9f 3f       	cpi	r25, 0xFF	; 255
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <udd_sleep_mode+0x32>
    1e56:	ff cf       	rjmp	.-2      	; 0x1e56 <udd_sleep_mode+0x30>
    1e58:	2f b7       	in	r18, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	ea e4       	ldi	r30, 0x4A	; 74
    1e5e:	fe e2       	ldi	r31, 0x2E	; 46
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	9f 5f       	subi	r25, 0xFF	; 255
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	2f bf       	out	0x3f, r18	; 63
    1e68:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <udd_b_idle>
    1e6c:	08 95       	ret
    1e6e:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1e72:	99 23       	and	r25, r25
    1e74:	61 f3       	breq	.-40     	; 0x1e4e <udd_sleep_mode+0x28>
    1e76:	f8 cf       	rjmp	.-16     	; 0x1e68 <udd_sleep_mode+0x42>

00001e78 <udd_ctrl_init>:
    1e78:	0f 93       	push	r16
    1e7a:	e8 ec       	ldi	r30, 0xC8	; 200
    1e7c:	f4 e0       	ldi	r31, 0x04	; 4
    1e7e:	80 81       	ld	r24, Z
    1e80:	8f 7d       	andi	r24, 0xDF	; 223
    1e82:	80 83       	st	Z, r24
    1e84:	80 81       	ld	r24, Z
    1e86:	8f 7d       	andi	r24, 0xDF	; 223
    1e88:	80 83       	st	Z, r24
    1e8a:	ec e1       	ldi	r30, 0x1C	; 28
    1e8c:	f2 e2       	ldi	r31, 0x22	; 34
    1e8e:	02 e0       	ldi	r16, 0x02	; 2
    1e90:	05 93       	las	Z, r16
    1e92:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1e96:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1e9a:	00 e2       	ldi	r16, 0x20	; 32
    1e9c:	06 93       	lac	Z, r16
    1e9e:	00 e4       	ldi	r16, 0x40	; 64
    1ea0:	06 93       	lac	Z, r16
    1ea2:	e4 e1       	ldi	r30, 0x14	; 20
    1ea4:	f2 e2       	ldi	r31, 0x22	; 34
    1ea6:	00 e2       	ldi	r16, 0x20	; 32
    1ea8:	06 93       	lac	Z, r16
    1eaa:	00 e4       	ldi	r16, 0x40	; 64
    1eac:	06 93       	lac	Z, r16
    1eae:	ee e5       	ldi	r30, 0x5E	; 94
    1eb0:	f4 e2       	ldi	r31, 0x24	; 36
    1eb2:	14 86       	std	Z+12, r1	; 0x0c
    1eb4:	15 86       	std	Z+13, r1	; 0x0d
    1eb6:	16 86       	std	Z+14, r1	; 0x0e
    1eb8:	17 86       	std	Z+15, r1	; 0x0f
    1eba:	12 86       	std	Z+10, r1	; 0x0a
    1ebc:	13 86       	std	Z+11, r1	; 0x0b
    1ebe:	10 92 03 22 	sts	0x2203, r1	; 0x802203 <udd_ep_control_state>
    1ec2:	0f 91       	pop	r16
    1ec4:	08 95       	ret

00001ec6 <udd_ctrl_stall_data>:
    1ec6:	0f 93       	push	r16
    1ec8:	85 e0       	ldi	r24, 0x05	; 5
    1eca:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1ece:	ed e1       	ldi	r30, 0x1D	; 29
    1ed0:	f2 e2       	ldi	r31, 0x22	; 34
    1ed2:	04 e0       	ldi	r16, 0x04	; 4
    1ed4:	05 93       	las	Z, r16
    1ed6:	e5 e1       	ldi	r30, 0x15	; 21
    1ed8:	f2 e2       	ldi	r31, 0x22	; 34
    1eda:	04 e0       	ldi	r16, 0x04	; 4
    1edc:	05 93       	las	Z, r16
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <udd_ctrl_send_zlp_in>:
    1ee2:	0f 93       	push	r16
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1eea:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1eee:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1ef2:	ec e1       	ldi	r30, 0x1C	; 28
    1ef4:	f2 e2       	ldi	r31, 0x22	; 34
    1ef6:	02 e0       	ldi	r16, 0x02	; 2
    1ef8:	06 93       	lac	Z, r16
    1efa:	0f 91       	pop	r16
    1efc:	08 95       	ret

00001efe <udd_ctrl_endofrequest>:
    1efe:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <udd_g_ctrlreq+0xc>
    1f02:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <udd_g_ctrlreq+0xd>
    1f06:	30 97       	sbiw	r30, 0x00	; 0
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <udd_ctrl_endofrequest+0xe>
    1f0a:	09 95       	icall
    1f0c:	08 95       	ret

00001f0e <udd_ctrl_in_sent>:
    1f0e:	0f 93       	push	r16
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    1f18:	83 30       	cpi	r24, 0x03	; 3
    1f1a:	19 f4       	brne	.+6      	; 0x1f22 <udd_ctrl_in_sent+0x14>
    1f1c:	f0 df       	rcall	.-32     	; 0x1efe <udd_ctrl_endofrequest>
    1f1e:	ac df       	rcall	.-168    	; 0x1e78 <udd_ctrl_init>
    1f20:	5e c0       	rjmp	.+188    	; 0x1fde <udd_ctrl_in_sent+0xd0>
    1f22:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1f26:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1f2a:	c0 91 68 24 	lds	r28, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    1f2e:	d0 91 69 24 	lds	r29, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    1f32:	c8 1b       	sub	r28, r24
    1f34:	d9 0b       	sbc	r29, r25
    1f36:	71 f5       	brne	.+92     	; 0x1f94 <udd_ctrl_in_sent+0x86>
    1f38:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    1f3c:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f40:	82 0f       	add	r24, r18
    1f42:	93 1f       	adc	r25, r19
    1f44:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    1f48:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f4c:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1f50:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1f54:	82 17       	cp	r24, r18
    1f56:	93 07       	cpc	r25, r19
    1f58:	21 f0       	breq	.+8      	; 0x1f62 <udd_ctrl_in_sent+0x54>
    1f5a:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b_shortpacket.5272>
    1f5e:	88 23       	and	r24, r24
    1f60:	41 f0       	breq	.+16     	; 0x1f72 <udd_ctrl_in_sent+0x64>
    1f62:	84 e0       	ldi	r24, 0x04	; 4
    1f64:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1f68:	e4 e1       	ldi	r30, 0x14	; 20
    1f6a:	f2 e2       	ldi	r31, 0x22	; 34
    1f6c:	02 e0       	ldi	r16, 0x02	; 2
    1f6e:	06 93       	lac	Z, r16
    1f70:	36 c0       	rjmp	.+108    	; 0x1fde <udd_ctrl_in_sent+0xd0>
    1f72:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <udd_g_ctrlreq+0xe>
    1f76:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <udd_g_ctrlreq+0xf>
    1f7a:	30 97       	sbiw	r30, 0x00	; 0
    1f7c:	99 f0       	breq	.+38     	; 0x1fa4 <udd_ctrl_in_sent+0x96>
    1f7e:	09 95       	icall
    1f80:	88 23       	and	r24, r24
    1f82:	81 f0       	breq	.+32     	; 0x1fa4 <udd_ctrl_in_sent+0x96>
    1f84:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1f88:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1f8c:	c0 91 68 24 	lds	r28, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    1f90:	d0 91 69 24 	lds	r29, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    1f94:	c0 34       	cpi	r28, 0x40	; 64
    1f96:	d1 05       	cpc	r29, r1
    1f98:	28 f0       	brcs	.+10     	; 0x1fa4 <udd_ctrl_in_sent+0x96>
    1f9a:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b_shortpacket.5272>
    1f9e:	c0 e4       	ldi	r28, 0x40	; 64
    1fa0:	d0 e0       	ldi	r29, 0x00	; 0
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <udd_ctrl_in_sent+0x9c>
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <b_shortpacket.5272>
    1faa:	e4 e0       	ldi	r30, 0x04	; 4
    1fac:	f2 e2       	ldi	r31, 0x22	; 34
    1fae:	c2 8f       	std	Z+26, r28	; 0x1a
    1fb0:	d3 8f       	std	Z+27, r29	; 0x1b
    1fb2:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1fb6:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1fba:	20 91 66 24 	lds	r18, 0x2466	; 0x802466 <udd_g_ctrlreq+0x8>
    1fbe:	30 91 67 24 	lds	r19, 0x2467	; 0x802467 <udd_g_ctrlreq+0x9>
    1fc2:	28 0f       	add	r18, r24
    1fc4:	39 1f       	adc	r19, r25
    1fc6:	24 8f       	std	Z+28, r18	; 0x1c
    1fc8:	35 8f       	std	Z+29, r19	; 0x1d
    1fca:	c8 0f       	add	r28, r24
    1fcc:	d9 1f       	adc	r29, r25
    1fce:	c0 93 ff 21 	sts	0x21FF, r28	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1fd2:	d0 93 00 22 	sts	0x2200, r29	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1fd6:	ec e1       	ldi	r30, 0x1C	; 28
    1fd8:	f2 e2       	ldi	r31, 0x22	; 34
    1fda:	02 e0       	ldi	r16, 0x02	; 2
    1fdc:	06 93       	lac	Z, r16
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <udd_ep_get_size>:
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	81 81       	ldd	r24, Z+1	; 0x01
    1fea:	e8 2f       	mov	r30, r24
    1fec:	e7 70       	andi	r30, 0x07	; 7
    1fee:	8e 2f       	mov	r24, r30
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	31 97       	sbiw	r30, 0x01	; 1
    1ff6:	e7 30       	cpi	r30, 0x07	; 7
    1ff8:	f1 05       	cpc	r31, r1
    1ffa:	c0 f4       	brcc	.+48     	; 0x202c <udd_ep_get_size+0x46>
    1ffc:	ea 5d       	subi	r30, 0xDA	; 218
    1ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    2000:	7a c6       	rjmp	.+3316   	; 0x2cf6 <__tablejump2__>
    2002:	80 e1       	ldi	r24, 0x10	; 16
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	08 95       	ret
    2008:	80 e2       	ldi	r24, 0x20	; 32
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	08 95       	ret
    200e:	80 e4       	ldi	r24, 0x40	; 64
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	08 95       	ret
    2014:	80 e8       	ldi	r24, 0x80	; 128
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	08 95       	ret
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	08 95       	ret
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	92 e0       	ldi	r25, 0x02	; 2
    2024:	08 95       	ret
    2026:	8f ef       	ldi	r24, 0xFF	; 255
    2028:	93 e0       	ldi	r25, 0x03	; 3
    202a:	08 95       	ret
    202c:	88 e0       	ldi	r24, 0x08	; 8
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	08 95       	ret

00002032 <udd_ep_get_job>:
    2032:	28 2f       	mov	r18, r24
    2034:	2f 70       	andi	r18, 0x0F	; 15
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	22 0f       	add	r18, r18
    203a:	33 1f       	adc	r19, r19
    203c:	08 2e       	mov	r0, r24
    203e:	00 0c       	add	r0, r0
    2040:	99 0b       	sbc	r25, r25
    2042:	88 27       	eor	r24, r24
    2044:	99 0f       	add	r25, r25
    2046:	88 1f       	adc	r24, r24
    2048:	99 27       	eor	r25, r25
    204a:	82 0f       	add	r24, r18
    204c:	93 1f       	adc	r25, r19
    204e:	02 97       	sbiw	r24, 0x02	; 2
    2050:	9c 01       	movw	r18, r24
    2052:	22 0f       	add	r18, r18
    2054:	33 1f       	adc	r19, r19
    2056:	22 0f       	add	r18, r18
    2058:	33 1f       	adc	r19, r19
    205a:	22 0f       	add	r18, r18
    205c:	33 1f       	adc	r19, r19
    205e:	82 0f       	add	r24, r18
    2060:	93 1f       	adc	r25, r19
    2062:	87 57       	subi	r24, 0x77	; 119
    2064:	9e 4d       	sbci	r25, 0xDE	; 222
    2066:	08 95       	ret

00002068 <udd_ctrl_interrupt_tc_setup>:
    2068:	0f 93       	push	r16
    206a:	cf 93       	push	r28
    206c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2070:	80 ff       	sbrs	r24, 0
    2072:	62 c0       	rjmp	.+196    	; 0x2138 <udd_ctrl_interrupt_tc_setup+0xd0>
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    207a:	e4 e1       	ldi	r30, 0x14	; 20
    207c:	f2 e2       	ldi	r31, 0x22	; 34
    207e:	00 e8       	ldi	r16, 0x80	; 128
    2080:	06 93       	lac	Z, r16
    2082:	ec e1       	ldi	r30, 0x1C	; 28
    2084:	f2 e2       	ldi	r31, 0x22	; 34
    2086:	00 e8       	ldi	r16, 0x80	; 128
    2088:	06 93       	lac	Z, r16
    208a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    208e:	e4 e1       	ldi	r30, 0x14	; 20
    2090:	f2 e2       	ldi	r31, 0x22	; 34
    2092:	00 e1       	ldi	r16, 0x10	; 16
    2094:	06 93       	lac	Z, r16
    2096:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    209a:	88 23       	and	r24, r24
    209c:	29 f0       	breq	.+10     	; 0x20a8 <udd_ctrl_interrupt_tc_setup+0x40>
    209e:	83 50       	subi	r24, 0x03	; 3
    20a0:	82 30       	cpi	r24, 0x02	; 2
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <udd_ctrl_interrupt_tc_setup+0x3e>
    20a4:	2c df       	rcall	.-424    	; 0x1efe <udd_ctrl_endofrequest>
    20a6:	e8 de       	rcall	.-560    	; 0x1e78 <udd_ctrl_init>
    20a8:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udd_sram+0x12>
    20ac:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <udd_sram+0x13>
    20b0:	08 97       	sbiw	r24, 0x08	; 8
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <udd_ctrl_interrupt_tc_setup+0x4e>
    20b4:	43 c0       	rjmp	.+134    	; 0x213c <udd_ctrl_interrupt_tc_setup+0xd4>
    20b6:	88 e0       	ldi	r24, 0x08	; 8
    20b8:	ef eb       	ldi	r30, 0xBF	; 191
    20ba:	f1 e2       	ldi	r31, 0x21	; 33
    20bc:	ae e5       	ldi	r26, 0x5E	; 94
    20be:	b4 e2       	ldi	r27, 0x24	; 36
    20c0:	01 90       	ld	r0, Z+
    20c2:	0d 92       	st	X+, r0
    20c4:	8a 95       	dec	r24
    20c6:	e1 f7       	brne	.-8      	; 0x20c0 <udd_ctrl_interrupt_tc_setup+0x58>
    20c8:	e8 ec       	ldi	r30, 0xC8	; 200
    20ca:	f4 e0       	ldi	r31, 0x04	; 4
    20cc:	80 81       	ld	r24, Z
    20ce:	80 62       	ori	r24, 0x20	; 32
    20d0:	80 83       	st	Z, r24
    20d2:	80 81       	ld	r24, Z
    20d4:	80 62       	ori	r24, 0x20	; 32
    20d6:	80 83       	st	Z, r24
    20d8:	0d db       	rcall	.-2534   	; 0x16f4 <udc_process_setup>
    20da:	c8 2f       	mov	r28, r24
    20dc:	81 11       	cpse	r24, r1
    20de:	03 c0       	rjmp	.+6      	; 0x20e6 <udd_ctrl_interrupt_tc_setup+0x7e>
    20e0:	f2 de       	rcall	.-540    	; 0x1ec6 <udd_ctrl_stall_data>
    20e2:	c1 e0       	ldi	r28, 0x01	; 1
    20e4:	2c c0       	rjmp	.+88     	; 0x213e <udd_ctrl_interrupt_tc_setup+0xd6>
    20e6:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    20ea:	88 23       	and	r24, r24
    20ec:	6c f4       	brge	.+26     	; 0x2108 <udd_ctrl_interrupt_tc_setup+0xa0>
    20ee:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    20f2:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    20f6:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    20fa:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    20fe:	82 e0       	ldi	r24, 0x02	; 2
    2100:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    2104:	04 df       	rcall	.-504    	; 0x1f0e <udd_ctrl_in_sent>
    2106:	1b c0       	rjmp	.+54     	; 0x213e <udd_ctrl_interrupt_tc_setup+0xd6>
    2108:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    210c:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    2110:	89 2b       	or	r24, r25
    2112:	11 f4       	brne	.+4      	; 0x2118 <udd_ctrl_interrupt_tc_setup+0xb0>
    2114:	e6 de       	rcall	.-564    	; 0x1ee2 <udd_ctrl_send_zlp_in>
    2116:	13 c0       	rjmp	.+38     	; 0x213e <udd_ctrl_interrupt_tc_setup+0xd6>
    2118:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    211c:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    2120:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2124:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    212e:	e4 e1       	ldi	r30, 0x14	; 20
    2130:	f2 e2       	ldi	r31, 0x22	; 34
    2132:	02 e0       	ldi	r16, 0x02	; 2
    2134:	06 93       	lac	Z, r16
    2136:	03 c0       	rjmp	.+6      	; 0x213e <udd_ctrl_interrupt_tc_setup+0xd6>
    2138:	c0 e0       	ldi	r28, 0x00	; 0
    213a:	01 c0       	rjmp	.+2      	; 0x213e <udd_ctrl_interrupt_tc_setup+0xd6>
    213c:	c1 e0       	ldi	r28, 0x01	; 1
    213e:	8c 2f       	mov	r24, r28
    2140:	cf 91       	pop	r28
    2142:	0f 91       	pop	r16
    2144:	08 95       	ret

00002146 <udd_ep_trans_complet>:
    2146:	8f 92       	push	r8
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	df 92       	push	r13
    2150:	ef 92       	push	r14
    2152:	ff 92       	push	r15
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	d8 2e       	mov	r13, r24
    215e:	69 df       	rcall	.-302    	; 0x2032 <udd_ep_get_job>
    2160:	8c 01       	movw	r16, r24
    2162:	bd 2c       	mov	r11, r13
    2164:	bb 1c       	adc	r11, r11
    2166:	bb 24       	eor	r11, r11
    2168:	bb 1c       	adc	r11, r11
    216a:	cd 2d       	mov	r28, r13
    216c:	cf 70       	andi	r28, 0x0F	; 15
    216e:	d0 e0       	ldi	r29, 0x00	; 0
    2170:	cc 0f       	add	r28, r28
    2172:	dd 1f       	adc	r29, r29
    2174:	cb 0d       	add	r28, r11
    2176:	d1 1d       	adc	r29, r1
    2178:	ce 01       	movw	r24, r28
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	9c 01       	movw	r18, r24
    2188:	2c 5e       	subi	r18, 0xEC	; 236
    218a:	3d 4d       	sbci	r19, 0xDD	; 221
    218c:	79 01       	movw	r14, r18
    218e:	c9 01       	movw	r24, r18
    2190:	2a df       	rcall	.-428    	; 0x1fe6 <udd_ep_get_size>
    2192:	4c 01       	movw	r8, r24
    2194:	bb 20       	and	r11, r11
    2196:	09 f4       	brne	.+2      	; 0x219a <udd_ep_trans_complet+0x54>
    2198:	70 c0       	rjmp	.+224    	; 0x227a <udd_ep_trans_complet+0x134>
    219a:	fe 01       	movw	r30, r28
    219c:	ee 0f       	add	r30, r30
    219e:	ff 1f       	adc	r31, r31
    21a0:	ee 0f       	add	r30, r30
    21a2:	ff 1f       	adc	r31, r31
    21a4:	ee 0f       	add	r30, r30
    21a6:	ff 1f       	adc	r31, r31
    21a8:	ec 5f       	subi	r30, 0xFC	; 252
    21aa:	fd 4d       	sbci	r31, 0xDD	; 221
    21ac:	26 89       	ldd	r18, Z+22	; 0x16
    21ae:	37 89       	ldd	r19, Z+23	; 0x17
    21b0:	d8 01       	movw	r26, r16
    21b2:	15 96       	adiw	r26, 0x05	; 5
    21b4:	8d 91       	ld	r24, X+
    21b6:	9c 91       	ld	r25, X
    21b8:	16 97       	sbiw	r26, 0x06	; 6
    21ba:	82 0f       	add	r24, r18
    21bc:	93 1f       	adc	r25, r19
    21be:	15 96       	adiw	r26, 0x05	; 5
    21c0:	8d 93       	st	X+, r24
    21c2:	9c 93       	st	X, r25
    21c4:	16 97       	sbiw	r26, 0x06	; 6
    21c6:	13 96       	adiw	r26, 0x03	; 3
    21c8:	2d 91       	ld	r18, X+
    21ca:	3c 91       	ld	r19, X
    21cc:	14 97       	sbiw	r26, 0x04	; 4
    21ce:	82 17       	cp	r24, r18
    21d0:	93 07       	cpc	r25, r19
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <udd_ep_trans_complet+0x90>
    21d4:	3c c0       	rjmp	.+120    	; 0x224e <udd_ep_trans_complet+0x108>
    21d6:	28 1b       	sub	r18, r24
    21d8:	39 0b       	sbc	r19, r25
    21da:	21 15       	cp	r18, r1
    21dc:	b4 e0       	ldi	r27, 0x04	; 4
    21de:	3b 07       	cpc	r19, r27
    21e0:	38 f0       	brcs	.+14     	; 0x21f0 <udd_ep_trans_complet+0xaa>
    21e2:	2f ef       	ldi	r18, 0xFF	; 255
    21e4:	33 e0       	ldi	r19, 0x03	; 3
    21e6:	c9 01       	movw	r24, r18
    21e8:	b4 01       	movw	r22, r8
    21ea:	71 d5       	rcall	.+2786   	; 0x2cce <__udivmodhi4>
    21ec:	28 1b       	sub	r18, r24
    21ee:	39 0b       	sbc	r19, r25
    21f0:	f8 01       	movw	r30, r16
    21f2:	80 81       	ld	r24, Z
    21f4:	81 ff       	sbrs	r24, 1
    21f6:	09 c0       	rjmp	.+18     	; 0x220a <udd_ep_trans_complet+0xc4>
    21f8:	c9 01       	movw	r24, r18
    21fa:	b4 01       	movw	r22, r8
    21fc:	68 d5       	rcall	.+2768   	; 0x2cce <__udivmodhi4>
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	89 2b       	or	r24, r25
    2202:	09 f0       	breq	.+2      	; 0x2206 <udd_ep_trans_complet+0xc0>
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	84 2f       	mov	r24, r20
    2208:	01 c0       	rjmp	.+2      	; 0x220c <udd_ep_trans_complet+0xc6>
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	d8 01       	movw	r26, r16
    220e:	9c 91       	ld	r25, X
    2210:	80 fb       	bst	r24, 0
    2212:	91 f9       	bld	r25, 1
    2214:	9c 93       	st	X, r25
    2216:	cc 0f       	add	r28, r28
    2218:	dd 1f       	adc	r29, r29
    221a:	cc 0f       	add	r28, r28
    221c:	dd 1f       	adc	r29, r29
    221e:	cc 0f       	add	r28, r28
    2220:	dd 1f       	adc	r29, r29
    2222:	cc 5f       	subi	r28, 0xFC	; 252
    2224:	dd 4d       	sbci	r29, 0xDD	; 221
    2226:	1e 8a       	std	Y+22, r1	; 0x16
    2228:	1f 8a       	std	Y+23, r1	; 0x17
    222a:	2a 8b       	std	Y+18, r18	; 0x12
    222c:	3b 8b       	std	Y+19, r19	; 0x13
    222e:	11 96       	adiw	r26, 0x01	; 1
    2230:	2d 91       	ld	r18, X+
    2232:	3c 91       	ld	r19, X
    2234:	12 97       	sbiw	r26, 0x02	; 2
    2236:	15 96       	adiw	r26, 0x05	; 5
    2238:	8d 91       	ld	r24, X+
    223a:	9c 91       	ld	r25, X
    223c:	16 97       	sbiw	r26, 0x06	; 6
    223e:	82 0f       	add	r24, r18
    2240:	93 1f       	adc	r25, r19
    2242:	8c 8b       	std	Y+20, r24	; 0x14
    2244:	9d 8b       	std	Y+21, r25	; 0x15
    2246:	f7 01       	movw	r30, r14
    2248:	02 e0       	ldi	r16, 0x02	; 2
    224a:	06 93       	lac	Z, r16
    224c:	ca c0       	rjmp	.+404    	; 0x23e2 <udd_ep_trans_complet+0x29c>
    224e:	d8 01       	movw	r26, r16
    2250:	8c 91       	ld	r24, X
    2252:	81 ff       	sbrs	r24, 1
    2254:	b3 c0       	rjmp	.+358    	; 0x23bc <udd_ep_trans_complet+0x276>
    2256:	8d 7f       	andi	r24, 0xFD	; 253
    2258:	8c 93       	st	X, r24
    225a:	cc 0f       	add	r28, r28
    225c:	dd 1f       	adc	r29, r29
    225e:	cc 0f       	add	r28, r28
    2260:	dd 1f       	adc	r29, r29
    2262:	cc 0f       	add	r28, r28
    2264:	dd 1f       	adc	r29, r29
    2266:	cc 5f       	subi	r28, 0xFC	; 252
    2268:	dd 4d       	sbci	r29, 0xDD	; 221
    226a:	1e 8a       	std	Y+22, r1	; 0x16
    226c:	1f 8a       	std	Y+23, r1	; 0x17
    226e:	1a 8a       	std	Y+18, r1	; 0x12
    2270:	1b 8a       	std	Y+19, r1	; 0x13
    2272:	f7 01       	movw	r30, r14
    2274:	02 e0       	ldi	r16, 0x02	; 2
    2276:	06 93       	lac	Z, r16
    2278:	b4 c0       	rjmp	.+360    	; 0x23e2 <udd_ep_trans_complet+0x29c>
    227a:	fe 01       	movw	r30, r28
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	ee 0f       	add	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	ec 5f       	subi	r30, 0xFC	; 252
    228a:	fd 4d       	sbci	r31, 0xDD	; 221
    228c:	a2 88       	ldd	r10, Z+18	; 0x12
    228e:	b3 88       	ldd	r11, Z+19	; 0x13
    2290:	d8 01       	movw	r26, r16
    2292:	8c 91       	ld	r24, X
    2294:	82 ff       	sbrs	r24, 2
    2296:	19 c0       	rjmp	.+50     	; 0x22ca <udd_ep_trans_complet+0x184>
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	ed 91       	ld	r30, X+
    229c:	fc 91       	ld	r31, X
    229e:	12 97       	sbiw	r26, 0x02	; 2
    22a0:	15 96       	adiw	r26, 0x05	; 5
    22a2:	2d 91       	ld	r18, X+
    22a4:	3c 91       	ld	r19, X
    22a6:	16 97       	sbiw	r26, 0x06	; 6
    22a8:	13 96       	adiw	r26, 0x03	; 3
    22aa:	8d 91       	ld	r24, X+
    22ac:	9c 91       	ld	r25, X
    22ae:	14 97       	sbiw	r26, 0x04	; 4
    22b0:	b4 01       	movw	r22, r8
    22b2:	0d d5       	rcall	.+2586   	; 0x2cce <__udivmodhi4>
    22b4:	b0 e4       	ldi	r27, 0x40	; 64
    22b6:	db 9e       	mul	r13, r27
    22b8:	b0 01       	movw	r22, r0
    22ba:	11 24       	eor	r1, r1
    22bc:	67 57       	subi	r22, 0x77	; 119
    22be:	7f 4d       	sbci	r23, 0xDF	; 223
    22c0:	ac 01       	movw	r20, r24
    22c2:	cf 01       	movw	r24, r30
    22c4:	82 0f       	add	r24, r18
    22c6:	93 1f       	adc	r25, r19
    22c8:	1c d5       	rcall	.+2616   	; 0x2d02 <memcpy>
    22ca:	f8 01       	movw	r30, r16
    22cc:	25 81       	ldd	r18, Z+5	; 0x05
    22ce:	36 81       	ldd	r19, Z+6	; 0x06
    22d0:	2a 0d       	add	r18, r10
    22d2:	3b 1d       	adc	r19, r11
    22d4:	25 83       	std	Z+5, r18	; 0x05
    22d6:	36 83       	std	Z+6, r19	; 0x06
    22d8:	83 81       	ldd	r24, Z+3	; 0x03
    22da:	94 81       	ldd	r25, Z+4	; 0x04
    22dc:	82 17       	cp	r24, r18
    22de:	93 07       	cpc	r25, r19
    22e0:	68 f4       	brcc	.+26     	; 0x22fc <udd_ep_trans_complet+0x1b6>
    22e2:	85 83       	std	Z+5, r24	; 0x05
    22e4:	96 83       	std	Z+6, r25	; 0x06
    22e6:	cc 0f       	add	r28, r28
    22e8:	dd 1f       	adc	r29, r29
    22ea:	cc 0f       	add	r28, r28
    22ec:	dd 1f       	adc	r29, r29
    22ee:	cc 0f       	add	r28, r28
    22f0:	dd 1f       	adc	r29, r29
    22f2:	cc 5f       	subi	r28, 0xFC	; 252
    22f4:	dd 4d       	sbci	r29, 0xDD	; 221
    22f6:	8e 89       	ldd	r24, Y+22	; 0x16
    22f8:	9f 89       	ldd	r25, Y+23	; 0x17
    22fa:	60 c0       	rjmp	.+192    	; 0x23bc <udd_ep_trans_complet+0x276>
    22fc:	fe 01       	movw	r30, r28
    22fe:	ee 0f       	add	r30, r30
    2300:	ff 1f       	adc	r31, r31
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ec 5f       	subi	r30, 0xFC	; 252
    230c:	fd 4d       	sbci	r31, 0xDD	; 221
    230e:	46 89       	ldd	r20, Z+22	; 0x16
    2310:	57 89       	ldd	r21, Z+23	; 0x17
    2312:	4a 15       	cp	r20, r10
    2314:	5b 05       	cpc	r21, r11
    2316:	09 f0       	breq	.+2      	; 0x231a <udd_ep_trans_complet+0x1d4>
    2318:	51 c0       	rjmp	.+162    	; 0x23bc <udd_ep_trans_complet+0x276>
    231a:	28 17       	cp	r18, r24
    231c:	39 07       	cpc	r19, r25
    231e:	09 f4       	brne	.+2      	; 0x2322 <udd_ep_trans_complet+0x1dc>
    2320:	4d c0       	rjmp	.+154    	; 0x23bc <udd_ep_trans_complet+0x276>
    2322:	ac 01       	movw	r20, r24
    2324:	42 1b       	sub	r20, r18
    2326:	53 0b       	sbc	r21, r19
    2328:	9a 01       	movw	r18, r20
    232a:	21 15       	cp	r18, r1
    232c:	54 e0       	ldi	r21, 0x04	; 4
    232e:	35 07       	cpc	r19, r21
    2330:	50 f0       	brcs	.+20     	; 0x2346 <udd_ep_trans_complet+0x200>
    2332:	2f ef       	ldi	r18, 0xFF	; 255
    2334:	33 e0       	ldi	r19, 0x03	; 3
    2336:	c9 01       	movw	r24, r18
    2338:	b4 01       	movw	r22, r8
    233a:	c9 d4       	rcall	.+2450   	; 0x2cce <__udivmodhi4>
    233c:	d9 01       	movw	r26, r18
    233e:	a8 1b       	sub	r26, r24
    2340:	b9 0b       	sbc	r27, r25
    2342:	cd 01       	movw	r24, r26
    2344:	07 c0       	rjmp	.+14     	; 0x2354 <udd_ep_trans_complet+0x20e>
    2346:	c9 01       	movw	r24, r18
    2348:	b4 01       	movw	r22, r8
    234a:	c1 d4       	rcall	.+2434   	; 0x2cce <__udivmodhi4>
    234c:	f9 01       	movw	r30, r18
    234e:	e8 1b       	sub	r30, r24
    2350:	f9 0b       	sbc	r31, r25
    2352:	cf 01       	movw	r24, r30
    2354:	fe 01       	movw	r30, r28
    2356:	ee 0f       	add	r30, r30
    2358:	ff 1f       	adc	r31, r31
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	ee 0f       	add	r30, r30
    2360:	ff 1f       	adc	r31, r31
    2362:	ec 5f       	subi	r30, 0xFC	; 252
    2364:	fd 4d       	sbci	r31, 0xDD	; 221
    2366:	12 8a       	std	Z+18, r1	; 0x12
    2368:	13 8a       	std	Z+19, r1	; 0x13
    236a:	88 15       	cp	r24, r8
    236c:	99 05       	cpc	r25, r9
    236e:	78 f4       	brcc	.+30     	; 0x238e <udd_ep_trans_complet+0x248>
    2370:	d8 01       	movw	r26, r16
    2372:	8c 91       	ld	r24, X
    2374:	84 60       	ori	r24, 0x04	; 4
    2376:	8c 93       	st	X, r24
    2378:	b0 e4       	ldi	r27, 0x40	; 64
    237a:	db 9e       	mul	r13, r27
    237c:	c0 01       	movw	r24, r0
    237e:	11 24       	eor	r1, r1
    2380:	87 57       	subi	r24, 0x77	; 119
    2382:	9f 4d       	sbci	r25, 0xDF	; 223
    2384:	84 8b       	std	Z+20, r24	; 0x14
    2386:	95 8b       	std	Z+21, r25	; 0x15
    2388:	86 8a       	std	Z+22, r8	; 0x16
    238a:	97 8a       	std	Z+23, r9	; 0x17
    238c:	13 c0       	rjmp	.+38     	; 0x23b4 <udd_ep_trans_complet+0x26e>
    238e:	f8 01       	movw	r30, r16
    2390:	41 81       	ldd	r20, Z+1	; 0x01
    2392:	52 81       	ldd	r21, Z+2	; 0x02
    2394:	25 81       	ldd	r18, Z+5	; 0x05
    2396:	36 81       	ldd	r19, Z+6	; 0x06
    2398:	24 0f       	add	r18, r20
    239a:	35 1f       	adc	r19, r21
    239c:	cc 0f       	add	r28, r28
    239e:	dd 1f       	adc	r29, r29
    23a0:	cc 0f       	add	r28, r28
    23a2:	dd 1f       	adc	r29, r29
    23a4:	cc 0f       	add	r28, r28
    23a6:	dd 1f       	adc	r29, r29
    23a8:	cc 5f       	subi	r28, 0xFC	; 252
    23aa:	dd 4d       	sbci	r29, 0xDD	; 221
    23ac:	2c 8b       	std	Y+20, r18	; 0x14
    23ae:	3d 8b       	std	Y+21, r19	; 0x15
    23b0:	8e 8b       	std	Y+22, r24	; 0x16
    23b2:	9f 8b       	std	Y+23, r25	; 0x17
    23b4:	f7 01       	movw	r30, r14
    23b6:	02 e0       	ldi	r16, 0x02	; 2
    23b8:	06 93       	lac	Z, r16
    23ba:	13 c0       	rjmp	.+38     	; 0x23e2 <udd_ep_trans_complet+0x29c>
    23bc:	d8 01       	movw	r26, r16
    23be:	8c 91       	ld	r24, X
    23c0:	80 ff       	sbrs	r24, 0
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <udd_ep_trans_complet+0x29c>
    23c4:	8e 7f       	andi	r24, 0xFE	; 254
    23c6:	8c 93       	st	X, r24
    23c8:	17 96       	adiw	r26, 0x07	; 7
    23ca:	ed 91       	ld	r30, X+
    23cc:	fc 91       	ld	r31, X
    23ce:	18 97       	sbiw	r26, 0x08	; 8
    23d0:	30 97       	sbiw	r30, 0x00	; 0
    23d2:	39 f0       	breq	.+14     	; 0x23e2 <udd_ep_trans_complet+0x29c>
    23d4:	15 96       	adiw	r26, 0x05	; 5
    23d6:	6d 91       	ld	r22, X+
    23d8:	7c 91       	ld	r23, X
    23da:	16 97       	sbiw	r26, 0x06	; 6
    23dc:	4d 2d       	mov	r20, r13
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	09 95       	icall
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	ff 90       	pop	r15
    23ec:	ef 90       	pop	r14
    23ee:	df 90       	pop	r13
    23f0:	bf 90       	pop	r11
    23f2:	af 90       	pop	r10
    23f4:	9f 90       	pop	r9
    23f6:	8f 90       	pop	r8
    23f8:	08 95       	ret

000023fa <udd_attach>:
    23fa:	cf 93       	push	r28
    23fc:	cf b7       	in	r28, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	11 dd       	rcall	.-1502   	; 0x1e26 <udd_sleep_mode>
    2404:	ea ec       	ldi	r30, 0xCA	; 202
    2406:	f4 e0       	ldi	r31, 0x04	; 4
    2408:	80 e4       	ldi	r24, 0x40	; 64
    240a:	80 83       	st	Z, r24
    240c:	80 e2       	ldi	r24, 0x20	; 32
    240e:	80 83       	st	Z, r24
    2410:	e1 ec       	ldi	r30, 0xC1	; 193
    2412:	f4 e0       	ldi	r31, 0x04	; 4
    2414:	80 81       	ld	r24, Z
    2416:	81 60       	ori	r24, 0x01	; 1
    2418:	80 83       	st	Z, r24
    241a:	a9 ec       	ldi	r26, 0xC9	; 201
    241c:	b4 e0       	ldi	r27, 0x04	; 4
    241e:	8c 91       	ld	r24, X
    2420:	82 60       	ori	r24, 0x02	; 2
    2422:	8c 93       	st	X, r24
    2424:	e8 ec       	ldi	r30, 0xC8	; 200
    2426:	f4 e0       	ldi	r31, 0x04	; 4
    2428:	80 81       	ld	r24, Z
    242a:	80 64       	ori	r24, 0x40	; 64
    242c:	80 83       	st	Z, r24
    242e:	8c 91       	ld	r24, X
    2430:	81 60       	ori	r24, 0x01	; 1
    2432:	8c 93       	st	X, r24
    2434:	80 81       	ld	r24, Z
    2436:	80 68       	ori	r24, 0x80	; 128
    2438:	80 83       	st	Z, r24
    243a:	cf bf       	out	0x3f, r28	; 63
    243c:	cf 91       	pop	r28
    243e:	08 95       	ret

00002440 <udd_enable>:
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	c0 e6       	ldi	r28, 0x60	; 96
    2446:	d0 e0       	ldi	r29, 0x00	; 0
    2448:	18 82       	st	Y, r1
    244a:	80 e3       	ldi	r24, 0x30	; 48
    244c:	0e 94 a3 09 	call	0x1346	; 0x1346 <sysclk_enable_usb>
    2450:	e0 ec       	ldi	r30, 0xC0	; 192
    2452:	f4 e0       	ldi	r31, 0x04	; 4
    2454:	80 81       	ld	r24, Z
    2456:	80 64       	ori	r24, 0x40	; 64
    2458:	80 83       	st	Z, r24
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	88 83       	st	Y, r24
    245e:	cf b7       	in	r28, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	fc 01       	movw	r30, r24
    2468:	ee 0f       	add	r30, r30
    246a:	ff 1f       	adc	r31, r31
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	ec 5f       	subi	r30, 0xFC	; 252
    2476:	fd 4d       	sbci	r31, 0xDD	; 221
    2478:	11 8a       	std	Z+17, r1	; 0x11
    247a:	01 96       	adiw	r24, 0x01	; 1
    247c:	88 30       	cpi	r24, 0x08	; 8
    247e:	91 05       	cpc	r25, r1
    2480:	91 f7       	brne	.-28     	; 0x2466 <udd_enable+0x26>
    2482:	e9 e8       	ldi	r30, 0x89	; 137
    2484:	f1 e2       	ldi	r31, 0x21	; 33
    2486:	80 81       	ld	r24, Z
    2488:	8e 7f       	andi	r24, 0xFE	; 254
    248a:	80 83       	st	Z, r24
    248c:	e2 e9       	ldi	r30, 0x92	; 146
    248e:	f1 e2       	ldi	r31, 0x21	; 33
    2490:	80 81       	ld	r24, Z
    2492:	8e 7f       	andi	r24, 0xFE	; 254
    2494:	80 83       	st	Z, r24
    2496:	eb e9       	ldi	r30, 0x9B	; 155
    2498:	f1 e2       	ldi	r31, 0x21	; 33
    249a:	80 81       	ld	r24, Z
    249c:	8e 7f       	andi	r24, 0xFE	; 254
    249e:	80 83       	st	Z, r24
    24a0:	e4 ea       	ldi	r30, 0xA4	; 164
    24a2:	f1 e2       	ldi	r31, 0x21	; 33
    24a4:	80 81       	ld	r24, Z
    24a6:	8e 7f       	andi	r24, 0xFE	; 254
    24a8:	80 83       	st	Z, r24
    24aa:	ed ea       	ldi	r30, 0xAD	; 173
    24ac:	f1 e2       	ldi	r31, 0x21	; 33
    24ae:	80 81       	ld	r24, Z
    24b0:	8e 7f       	andi	r24, 0xFE	; 254
    24b2:	80 83       	st	Z, r24
    24b4:	e6 eb       	ldi	r30, 0xB6	; 182
    24b6:	f1 e2       	ldi	r31, 0x21	; 33
    24b8:	80 81       	ld	r24, Z
    24ba:	8e 7f       	andi	r24, 0xFE	; 254
    24bc:	80 83       	st	Z, r24
    24be:	6a e1       	ldi	r22, 0x1A	; 26
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	a6 dc       	rcall	.-1716   	; 0x1e12 <nvm_read_byte>
    24c6:	8f 3f       	cpi	r24, 0xFF	; 255
    24c8:	19 f0       	breq	.+6      	; 0x24d0 <udd_enable+0x90>
    24ca:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    24ce:	03 c0       	rjmp	.+6      	; 0x24d6 <udd_enable+0x96>
    24d0:	8f e1       	ldi	r24, 0x1F	; 31
    24d2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    24d6:	6b e1       	ldi	r22, 0x1B	; 27
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	82 e0       	ldi	r24, 0x02	; 2
    24dc:	9a dc       	rcall	.-1740   	; 0x1e12 <nvm_read_byte>
    24de:	8f 3f       	cpi	r24, 0xFF	; 255
    24e0:	19 f0       	breq	.+6      	; 0x24e8 <udd_enable+0xa8>
    24e2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <udd_enable+0xae>
    24e8:	8f e1       	ldi	r24, 0x1F	; 31
    24ea:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    24ee:	e0 ec       	ldi	r30, 0xC0	; 192
    24f0:	f4 e0       	ldi	r31, 0x04	; 4
    24f2:	80 81       	ld	r24, Z
    24f4:	83 60       	ori	r24, 0x03	; 3
    24f6:	80 83       	st	Z, r24
    24f8:	80 81       	ld	r24, Z
    24fa:	80 68       	ori	r24, 0x80	; 128
    24fc:	80 83       	st	Z, r24
    24fe:	80 81       	ld	r24, Z
    2500:	80 61       	ori	r24, 0x10	; 16
    2502:	80 83       	st	Z, r24
    2504:	84 e1       	ldi	r24, 0x14	; 20
    2506:	92 e2       	ldi	r25, 0x22	; 34
    2508:	86 83       	std	Z+6, r24	; 0x06
    250a:	97 83       	std	Z+7, r25	; 0x07
    250c:	80 81       	ld	r24, Z
    250e:	80 62       	ori	r24, 0x20	; 32
    2510:	80 83       	st	Z, r24
    2512:	8f ef       	ldi	r24, 0xFF	; 255
    2514:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2518:	e8 ec       	ldi	r30, 0xC8	; 200
    251a:	f4 e0       	ldi	r31, 0x04	; 4
    251c:	80 81       	ld	r24, Z
    251e:	82 60       	ori	r24, 0x02	; 2
    2520:	80 83       	st	Z, r24
    2522:	10 92 58 22 	sts	0x2258, r1	; 0x802258 <udd_b_idle>
    2526:	80 91 4f 2e 	lds	r24, 0x2E4F	; 0x802e4f <sleepmgr_locks+0x5>
    252a:	8f 3f       	cpi	r24, 0xFF	; 255
    252c:	09 f4       	brne	.+2      	; 0x2530 <udd_enable+0xf0>
    252e:	ff cf       	rjmp	.-2      	; 0x252e <udd_enable+0xee>
    2530:	9f b7       	in	r25, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	ea e4       	ldi	r30, 0x4A	; 74
    2536:	fe e2       	ldi	r31, 0x2E	; 46
    2538:	85 81       	ldd	r24, Z+5	; 0x05
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	85 83       	std	Z+5, r24	; 0x05
    253e:	9f bf       	out	0x3f, r25	; 63
    2540:	5c df       	rcall	.-328    	; 0x23fa <udd_attach>
    2542:	cf bf       	out	0x3f, r28	; 63
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <udd_set_address>:
    254a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    254e:	08 95       	ret

00002550 <udd_getaddress>:
    2550:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2554:	08 95       	ret

00002556 <udd_set_setup_payload>:
    2556:	ee e5       	ldi	r30, 0x5E	; 94
    2558:	f4 e2       	ldi	r31, 0x24	; 36
    255a:	80 87       	std	Z+8, r24	; 0x08
    255c:	91 87       	std	Z+9, r25	; 0x09
    255e:	62 87       	std	Z+10, r22	; 0x0a
    2560:	73 87       	std	Z+11, r23	; 0x0b
    2562:	08 95       	ret

00002564 <udd_ep_alloc>:
    2564:	28 2f       	mov	r18, r24
    2566:	2f 70       	andi	r18, 0x0F	; 15
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	22 0f       	add	r18, r18
    256c:	33 1f       	adc	r19, r19
    256e:	08 2e       	mov	r0, r24
    2570:	00 0c       	add	r0, r0
    2572:	99 0b       	sbc	r25, r25
    2574:	88 27       	eor	r24, r24
    2576:	99 0f       	add	r25, r25
    2578:	88 1f       	adc	r24, r24
    257a:	99 27       	eor	r25, r25
    257c:	82 0f       	add	r24, r18
    257e:	93 1f       	adc	r25, r19
    2580:	fc 01       	movw	r30, r24
    2582:	ee 0f       	add	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	ee 0f       	add	r30, r30
    2588:	ff 1f       	adc	r31, r31
    258a:	ee 0f       	add	r30, r30
    258c:	ff 1f       	adc	r31, r31
    258e:	ec 5f       	subi	r30, 0xFC	; 252
    2590:	fd 4d       	sbci	r31, 0xDD	; 221
    2592:	21 89       	ldd	r18, Z+17	; 0x11
    2594:	20 7c       	andi	r18, 0xC0	; 192
    2596:	09 f0       	breq	.+2      	; 0x259a <udd_ep_alloc+0x36>
    2598:	58 c0       	rjmp	.+176    	; 0x264a <udd_ep_alloc+0xe6>
    259a:	63 70       	andi	r22, 0x03	; 3
    259c:	61 30       	cpi	r22, 0x01	; 1
    259e:	11 f0       	breq	.+4      	; 0x25a4 <udd_ep_alloc+0x40>
    25a0:	18 f4       	brcc	.+6      	; 0x25a8 <udd_ep_alloc+0x44>
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <udd_ep_alloc+0x48>
    25a4:	20 ec       	ldi	r18, 0xC0	; 192
    25a6:	03 c0       	rjmp	.+6      	; 0x25ae <udd_ep_alloc+0x4a>
    25a8:	20 e8       	ldi	r18, 0x80	; 128
    25aa:	01 c0       	rjmp	.+2      	; 0x25ae <udd_ep_alloc+0x4a>
    25ac:	20 e4       	ldi	r18, 0x40	; 64
    25ae:	40 38       	cpi	r20, 0x80	; 128
    25b0:	51 05       	cpc	r21, r1
    25b2:	e9 f0       	breq	.+58     	; 0x25ee <udd_ep_alloc+0x8a>
    25b4:	50 f4       	brcc	.+20     	; 0x25ca <udd_ep_alloc+0x66>
    25b6:	40 32       	cpi	r20, 0x20	; 32
    25b8:	51 05       	cpc	r21, r1
    25ba:	a9 f0       	breq	.+42     	; 0x25e6 <udd_ep_alloc+0x82>
    25bc:	40 34       	cpi	r20, 0x40	; 64
    25be:	51 05       	cpc	r21, r1
    25c0:	a1 f0       	breq	.+40     	; 0x25ea <udd_ep_alloc+0x86>
    25c2:	40 31       	cpi	r20, 0x10	; 16
    25c4:	51 05       	cpc	r21, r1
    25c6:	d9 f4       	brne	.+54     	; 0x25fe <udd_ep_alloc+0x9a>
    25c8:	0c c0       	rjmp	.+24     	; 0x25e2 <udd_ep_alloc+0x7e>
    25ca:	41 15       	cp	r20, r1
    25cc:	32 e0       	ldi	r19, 0x02	; 2
    25ce:	53 07       	cpc	r21, r19
    25d0:	91 f0       	breq	.+36     	; 0x25f6 <udd_ep_alloc+0x92>
    25d2:	4f 3f       	cpi	r20, 0xFF	; 255
    25d4:	33 e0       	ldi	r19, 0x03	; 3
    25d6:	53 07       	cpc	r21, r19
    25d8:	81 f0       	breq	.+32     	; 0x25fa <udd_ep_alloc+0x96>
    25da:	41 15       	cp	r20, r1
    25dc:	51 40       	sbci	r21, 0x01	; 1
    25de:	79 f4       	brne	.+30     	; 0x25fe <udd_ep_alloc+0x9a>
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <udd_ep_alloc+0x8e>
    25e2:	41 e0       	ldi	r20, 0x01	; 1
    25e4:	0d c0       	rjmp	.+26     	; 0x2600 <udd_ep_alloc+0x9c>
    25e6:	42 e0       	ldi	r20, 0x02	; 2
    25e8:	0b c0       	rjmp	.+22     	; 0x2600 <udd_ep_alloc+0x9c>
    25ea:	43 e0       	ldi	r20, 0x03	; 3
    25ec:	09 c0       	rjmp	.+18     	; 0x2600 <udd_ep_alloc+0x9c>
    25ee:	44 e0       	ldi	r20, 0x04	; 4
    25f0:	07 c0       	rjmp	.+14     	; 0x2600 <udd_ep_alloc+0x9c>
    25f2:	45 e0       	ldi	r20, 0x05	; 5
    25f4:	05 c0       	rjmp	.+10     	; 0x2600 <udd_ep_alloc+0x9c>
    25f6:	46 e0       	ldi	r20, 0x06	; 6
    25f8:	03 c0       	rjmp	.+6      	; 0x2600 <udd_ep_alloc+0x9c>
    25fa:	47 e0       	ldi	r20, 0x07	; 7
    25fc:	01 c0       	rjmp	.+2      	; 0x2600 <udd_ep_alloc+0x9c>
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	fc 01       	movw	r30, r24
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	ec 5f       	subi	r30, 0xFC	; 252
    2610:	fd 4d       	sbci	r31, 0xDD	; 221
    2612:	11 8a       	std	Z+17, r1	; 0x11
    2614:	dc 01       	movw	r26, r24
    2616:	aa 0f       	add	r26, r26
    2618:	bb 1f       	adc	r27, r27
    261a:	aa 0f       	add	r26, r26
    261c:	bb 1f       	adc	r27, r27
    261e:	aa 0f       	add	r26, r26
    2620:	bb 1f       	adc	r27, r27
    2622:	ac 5e       	subi	r26, 0xEC	; 236
    2624:	bd 4d       	sbci	r27, 0xDD	; 221
    2626:	36 e0       	ldi	r19, 0x06	; 6
    2628:	3c 93       	st	X, r19
    262a:	24 2b       	or	r18, r20
    262c:	21 8b       	std	Z+17, r18	; 0x11
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	fc 01       	movw	r30, r24
    263c:	ec 5f       	subi	r30, 0xFC	; 252
    263e:	fd 4d       	sbci	r31, 0xDD	; 221
    2640:	81 89       	ldd	r24, Z+17	; 0x11
    2642:	80 62       	ori	r24, 0x20	; 32
    2644:	81 8b       	std	Z+17, r24	; 0x11
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	08 95       	ret
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	08 95       	ret

0000264e <udd_ep_is_halted>:
    264e:	e8 2f       	mov	r30, r24
    2650:	ef 70       	andi	r30, 0x0F	; 15
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	08 2e       	mov	r0, r24
    265a:	00 0c       	add	r0, r0
    265c:	99 0b       	sbc	r25, r25
    265e:	88 27       	eor	r24, r24
    2660:	99 0f       	add	r25, r25
    2662:	88 1f       	adc	r24, r24
    2664:	99 27       	eor	r25, r25
    2666:	e8 0f       	add	r30, r24
    2668:	f9 1f       	adc	r31, r25
    266a:	ee 0f       	add	r30, r30
    266c:	ff 1f       	adc	r31, r31
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	ec 5f       	subi	r30, 0xFC	; 252
    2678:	fd 4d       	sbci	r31, 0xDD	; 221
    267a:	81 89       	ldd	r24, Z+17	; 0x11
    267c:	82 fb       	bst	r24, 2
    267e:	88 27       	eor	r24, r24
    2680:	80 f9       	bld	r24, 0
    2682:	08 95       	ret

00002684 <udd_ep_clear_halt>:
    2684:	28 2f       	mov	r18, r24
    2686:	2f 70       	andi	r18, 0x0F	; 15
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	a9 01       	movw	r20, r18
    268c:	44 0f       	add	r20, r20
    268e:	55 1f       	adc	r21, r21
    2690:	28 2f       	mov	r18, r24
    2692:	08 2e       	mov	r0, r24
    2694:	00 0c       	add	r0, r0
    2696:	33 0b       	sbc	r19, r19
    2698:	22 27       	eor	r18, r18
    269a:	33 0f       	add	r19, r19
    269c:	22 1f       	adc	r18, r18
    269e:	33 27       	eor	r19, r19
    26a0:	24 0f       	add	r18, r20
    26a2:	35 1f       	adc	r19, r21
    26a4:	f9 01       	movw	r30, r18
    26a6:	ee 0f       	add	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	ee 0f       	add	r30, r30
    26ac:	ff 1f       	adc	r31, r31
    26ae:	ee 0f       	add	r30, r30
    26b0:	ff 1f       	adc	r31, r31
    26b2:	ec 5f       	subi	r30, 0xFC	; 252
    26b4:	fd 4d       	sbci	r31, 0xDD	; 221
    26b6:	91 89       	ldd	r25, Z+17	; 0x11
    26b8:	92 ff       	sbrs	r25, 2
    26ba:	17 c0       	rjmp	.+46     	; 0x26ea <udd_ep_clear_halt+0x66>
    26bc:	22 0f       	add	r18, r18
    26be:	33 1f       	adc	r19, r19
    26c0:	22 0f       	add	r18, r18
    26c2:	33 1f       	adc	r19, r19
    26c4:	22 0f       	add	r18, r18
    26c6:	33 1f       	adc	r19, r19
    26c8:	f9 01       	movw	r30, r18
    26ca:	ec 5f       	subi	r30, 0xFC	; 252
    26cc:	fd 4d       	sbci	r31, 0xDD	; 221
    26ce:	91 89       	ldd	r25, Z+17	; 0x11
    26d0:	9b 7f       	andi	r25, 0xFB	; 251
    26d2:	91 8b       	std	Z+17, r25	; 0x11
    26d4:	ae dc       	rcall	.-1700   	; 0x2032 <udd_ep_get_job>
    26d6:	fc 01       	movw	r30, r24
    26d8:	80 81       	ld	r24, Z
    26da:	80 ff       	sbrs	r24, 0
    26dc:	06 c0       	rjmp	.+12     	; 0x26ea <udd_ep_clear_halt+0x66>
    26de:	8e 7f       	andi	r24, 0xFE	; 254
    26e0:	80 83       	st	Z, r24
    26e2:	07 80       	ldd	r0, Z+7	; 0x07
    26e4:	f0 85       	ldd	r31, Z+8	; 0x08
    26e6:	e0 2d       	mov	r30, r0
    26e8:	09 95       	icall
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	08 95       	ret

000026ee <udd_ep_run>:
    26ee:	7f 92       	push	r7
    26f0:	8f 92       	push	r8
    26f2:	9f 92       	push	r9
    26f4:	af 92       	push	r10
    26f6:	bf 92       	push	r11
    26f8:	cf 92       	push	r12
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	98 2e       	mov	r9, r24
    270a:	86 2e       	mov	r8, r22
    270c:	6a 01       	movw	r12, r20
    270e:	79 01       	movw	r14, r18
    2710:	90 dc       	rcall	.-1760   	; 0x2032 <udd_ep_get_job>
    2712:	5c 01       	movw	r10, r24
    2714:	79 2c       	mov	r7, r9
    2716:	77 1c       	adc	r7, r7
    2718:	77 24       	eor	r7, r7
    271a:	77 1c       	adc	r7, r7
    271c:	c9 2d       	mov	r28, r9
    271e:	cf 70       	andi	r28, 0x0F	; 15
    2720:	d0 e0       	ldi	r29, 0x00	; 0
    2722:	cc 0f       	add	r28, r28
    2724:	dd 1f       	adc	r29, r29
    2726:	c7 0d       	add	r28, r7
    2728:	d1 1d       	adc	r29, r1
    272a:	fe 01       	movw	r30, r28
    272c:	ee 0f       	add	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	ec 5f       	subi	r30, 0xFC	; 252
    273a:	fd 4d       	sbci	r31, 0xDD	; 221
    273c:	81 89       	ldd	r24, Z+17	; 0x11
    273e:	80 7c       	andi	r24, 0xC0	; 192
    2740:	09 f4       	brne	.+2      	; 0x2744 <udd_ep_run+0x56>
    2742:	7d c0       	rjmp	.+250    	; 0x283e <udd_ep_run+0x150>
    2744:	fe 01       	movw	r30, r28
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	ee 0f       	add	r30, r30
    2750:	ff 1f       	adc	r31, r31
    2752:	ec 5f       	subi	r30, 0xFC	; 252
    2754:	fd 4d       	sbci	r31, 0xDD	; 221
    2756:	81 89       	ldd	r24, Z+17	; 0x11
    2758:	80 7c       	andi	r24, 0xC0	; 192
    275a:	80 3c       	cpi	r24, 0xC0	; 192
    275c:	61 f0       	breq	.+24     	; 0x2776 <udd_ep_run+0x88>
    275e:	fe 01       	movw	r30, r28
    2760:	ee 0f       	add	r30, r30
    2762:	ff 1f       	adc	r31, r31
    2764:	ee 0f       	add	r30, r30
    2766:	ff 1f       	adc	r31, r31
    2768:	ee 0f       	add	r30, r30
    276a:	ff 1f       	adc	r31, r31
    276c:	ec 5f       	subi	r30, 0xFC	; 252
    276e:	fd 4d       	sbci	r31, 0xDD	; 221
    2770:	81 89       	ldd	r24, Z+17	; 0x11
    2772:	82 fd       	sbrc	r24, 2
    2774:	66 c0       	rjmp	.+204    	; 0x2842 <udd_ep_run+0x154>
    2776:	8f b7       	in	r24, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	f5 01       	movw	r30, r10
    277c:	90 81       	ld	r25, Z
    277e:	90 ff       	sbrs	r25, 0
    2780:	03 c0       	rjmp	.+6      	; 0x2788 <udd_ep_run+0x9a>
    2782:	8f bf       	out	0x3f, r24	; 63
    2784:	71 2c       	mov	r7, r1
    2786:	5e c0       	rjmp	.+188    	; 0x2844 <udd_ep_run+0x156>
    2788:	f5 01       	movw	r30, r10
    278a:	90 81       	ld	r25, Z
    278c:	91 60       	ori	r25, 0x01	; 1
    278e:	90 83       	st	Z, r25
    2790:	8f bf       	out	0x3f, r24	; 63
    2792:	c1 82       	std	Z+1, r12	; 0x01
    2794:	d2 82       	std	Z+2, r13	; 0x02
    2796:	e3 82       	std	Z+3, r14	; 0x03
    2798:	f4 82       	std	Z+4, r15	; 0x04
    279a:	15 82       	std	Z+5, r1	; 0x05
    279c:	16 82       	std	Z+6, r1	; 0x06
    279e:	07 83       	std	Z+7, r16	; 0x07
    27a0:	10 87       	std	Z+8, r17	; 0x08
    27a2:	81 10       	cpse	r8, r1
    27a4:	06 c0       	rjmp	.+12     	; 0x27b2 <udd_ep_run+0xc4>
    27a6:	91 e0       	ldi	r25, 0x01	; 1
    27a8:	e1 14       	cp	r14, r1
    27aa:	f1 04       	cpc	r15, r1
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <udd_ep_run+0xc6>
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <udd_ep_run+0xc6>
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	f5 01       	movw	r30, r10
    27b6:	80 81       	ld	r24, Z
    27b8:	90 fb       	bst	r25, 0
    27ba:	81 f9       	bld	r24, 1
    27bc:	8b 7f       	andi	r24, 0xFB	; 251
    27be:	80 83       	st	Z, r24
    27c0:	77 20       	and	r7, r7
    27c2:	59 f0       	breq	.+22     	; 0x27da <udd_ep_run+0xec>
    27c4:	cc 0f       	add	r28, r28
    27c6:	dd 1f       	adc	r29, r29
    27c8:	cc 0f       	add	r28, r28
    27ca:	dd 1f       	adc	r29, r29
    27cc:	cc 0f       	add	r28, r28
    27ce:	dd 1f       	adc	r29, r29
    27d0:	cc 5f       	subi	r28, 0xFC	; 252
    27d2:	dd 4d       	sbci	r29, 0xDD	; 221
    27d4:	1e 8a       	std	Y+22, r1	; 0x16
    27d6:	1f 8a       	std	Y+23, r1	; 0x17
    27d8:	2d c0       	rjmp	.+90     	; 0x2834 <udd_ep_run+0x146>
    27da:	fe 01       	movw	r30, r28
    27dc:	ee 0f       	add	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	ee 0f       	add	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	ec 5f       	subi	r30, 0xFC	; 252
    27ea:	fd 4d       	sbci	r31, 0xDD	; 221
    27ec:	81 89       	ldd	r24, Z+17	; 0x11
    27ee:	80 7c       	andi	r24, 0xC0	; 192
    27f0:	80 3c       	cpi	r24, 0xC0	; 192
    27f2:	a1 f4       	brne	.+40     	; 0x281c <udd_ep_run+0x12e>
    27f4:	ce 01       	movw	r24, r28
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	8c 5e       	subi	r24, 0xEC	; 236
    2804:	9d 4d       	sbci	r25, 0xDD	; 221
    2806:	ef db       	rcall	.-2082   	; 0x1fe6 <udd_ep_get_size>
    2808:	bc 01       	movw	r22, r24
    280a:	c7 01       	movw	r24, r14
    280c:	60 d2       	rcall	.+1216   	; 0x2cce <__udivmodhi4>
    280e:	89 2b       	or	r24, r25
    2810:	29 f0       	breq	.+10     	; 0x281c <udd_ep_run+0x12e>
    2812:	f5 01       	movw	r30, r10
    2814:	80 81       	ld	r24, Z
    2816:	8e 7f       	andi	r24, 0xFE	; 254
    2818:	80 83       	st	Z, r24
    281a:	14 c0       	rjmp	.+40     	; 0x2844 <udd_ep_run+0x156>
    281c:	cc 0f       	add	r28, r28
    281e:	dd 1f       	adc	r29, r29
    2820:	cc 0f       	add	r28, r28
    2822:	dd 1f       	adc	r29, r29
    2824:	cc 0f       	add	r28, r28
    2826:	dd 1f       	adc	r29, r29
    2828:	cc 5f       	subi	r28, 0xFC	; 252
    282a:	dd 4d       	sbci	r29, 0xDD	; 221
    282c:	1a 8a       	std	Y+18, r1	; 0x12
    282e:	1b 8a       	std	Y+19, r1	; 0x13
    2830:	1e 8a       	std	Y+22, r1	; 0x16
    2832:	1f 8a       	std	Y+23, r1	; 0x17
    2834:	89 2d       	mov	r24, r9
    2836:	87 dc       	rcall	.-1778   	; 0x2146 <udd_ep_trans_complet>
    2838:	77 24       	eor	r7, r7
    283a:	73 94       	inc	r7
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <udd_ep_run+0x156>
    283e:	71 2c       	mov	r7, r1
    2840:	01 c0       	rjmp	.+2      	; 0x2844 <udd_ep_run+0x156>
    2842:	71 2c       	mov	r7, r1
    2844:	87 2d       	mov	r24, r7
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	bf 90       	pop	r11
    2858:	af 90       	pop	r10
    285a:	9f 90       	pop	r9
    285c:	8f 90       	pop	r8
    285e:	7f 90       	pop	r7
    2860:	08 95       	ret

00002862 <udd_ep_abort>:
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	18 2f       	mov	r17, r24
    286e:	f8 2e       	mov	r15, r24
    2870:	ff 1c       	adc	r15, r15
    2872:	ff 24       	eor	r15, r15
    2874:	ff 1c       	adc	r15, r15
    2876:	c8 2f       	mov	r28, r24
    2878:	cf 70       	andi	r28, 0x0F	; 15
    287a:	d0 e0       	ldi	r29, 0x00	; 0
    287c:	cc 0f       	add	r28, r28
    287e:	dd 1f       	adc	r29, r29
    2880:	cf 0d       	add	r28, r15
    2882:	d1 1d       	adc	r29, r1
    2884:	d6 db       	rcall	.-2132   	; 0x2032 <udd_ep_get_job>
    2886:	dc 01       	movw	r26, r24
    2888:	fe 01       	movw	r30, r28
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	ee 0f       	add	r30, r30
    2890:	ff 1f       	adc	r31, r31
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	ec 5e       	subi	r30, 0xEC	; 236
    2898:	fd 4d       	sbci	r31, 0xDD	; 221
    289a:	02 e0       	ldi	r16, 0x02	; 2
    289c:	05 93       	las	Z, r16
    289e:	8c 91       	ld	r24, X
    28a0:	80 ff       	sbrs	r24, 0
    28a2:	22 c0       	rjmp	.+68     	; 0x28e8 <udd_ep_abort+0x86>
    28a4:	8e 7f       	andi	r24, 0xFE	; 254
    28a6:	8c 93       	st	X, r24
    28a8:	17 96       	adiw	r26, 0x07	; 7
    28aa:	ed 91       	ld	r30, X+
    28ac:	fc 91       	ld	r31, X
    28ae:	18 97       	sbiw	r26, 0x08	; 8
    28b0:	30 97       	sbiw	r30, 0x00	; 0
    28b2:	d1 f0       	breq	.+52     	; 0x28e8 <udd_ep_abort+0x86>
    28b4:	ff 20       	and	r15, r15
    28b6:	59 f0       	breq	.+22     	; 0x28ce <udd_ep_abort+0x6c>
    28b8:	cc 0f       	add	r28, r28
    28ba:	dd 1f       	adc	r29, r29
    28bc:	cc 0f       	add	r28, r28
    28be:	dd 1f       	adc	r29, r29
    28c0:	cc 0f       	add	r28, r28
    28c2:	dd 1f       	adc	r29, r29
    28c4:	cc 5f       	subi	r28, 0xFC	; 252
    28c6:	dd 4d       	sbci	r29, 0xDD	; 221
    28c8:	6e 89       	ldd	r22, Y+22	; 0x16
    28ca:	7f 89       	ldd	r23, Y+23	; 0x17
    28cc:	0a c0       	rjmp	.+20     	; 0x28e2 <udd_ep_abort+0x80>
    28ce:	cc 0f       	add	r28, r28
    28d0:	dd 1f       	adc	r29, r29
    28d2:	cc 0f       	add	r28, r28
    28d4:	dd 1f       	adc	r29, r29
    28d6:	cc 0f       	add	r28, r28
    28d8:	dd 1f       	adc	r29, r29
    28da:	cc 5f       	subi	r28, 0xFC	; 252
    28dc:	dd 4d       	sbci	r29, 0xDD	; 221
    28de:	6a 89       	ldd	r22, Y+18	; 0x12
    28e0:	7b 89       	ldd	r23, Y+19	; 0x13
    28e2:	41 2f       	mov	r20, r17
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	09 95       	icall
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	ff 90       	pop	r15
    28f2:	08 95       	ret

000028f4 <udd_ep_free>:
    28f4:	cf 93       	push	r28
    28f6:	c8 2f       	mov	r28, r24
    28f8:	b4 df       	rcall	.-152    	; 0x2862 <udd_ep_abort>
    28fa:	ec 2f       	mov	r30, r28
    28fc:	ef 70       	andi	r30, 0x0F	; 15
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	ee 0f       	add	r30, r30
    2902:	ff 1f       	adc	r31, r31
    2904:	8c 2f       	mov	r24, r28
    2906:	cc 0f       	add	r28, r28
    2908:	99 0b       	sbc	r25, r25
    290a:	88 27       	eor	r24, r24
    290c:	99 0f       	add	r25, r25
    290e:	88 1f       	adc	r24, r24
    2910:	99 27       	eor	r25, r25
    2912:	e8 0f       	add	r30, r24
    2914:	f9 1f       	adc	r31, r25
    2916:	ee 0f       	add	r30, r30
    2918:	ff 1f       	adc	r31, r31
    291a:	ee 0f       	add	r30, r30
    291c:	ff 1f       	adc	r31, r31
    291e:	ee 0f       	add	r30, r30
    2920:	ff 1f       	adc	r31, r31
    2922:	ec 5f       	subi	r30, 0xFC	; 252
    2924:	fd 4d       	sbci	r31, 0xDD	; 221
    2926:	11 8a       	std	Z+17, r1	; 0x11
    2928:	cf 91       	pop	r28
    292a:	08 95       	ret

0000292c <udd_ep_set_halt>:
    292c:	0f 93       	push	r16
    292e:	e8 2f       	mov	r30, r24
    2930:	ef 70       	andi	r30, 0x0F	; 15
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	ee 0f       	add	r30, r30
    2936:	ff 1f       	adc	r31, r31
    2938:	28 2f       	mov	r18, r24
    293a:	08 2e       	mov	r0, r24
    293c:	00 0c       	add	r0, r0
    293e:	33 0b       	sbc	r19, r19
    2940:	22 27       	eor	r18, r18
    2942:	33 0f       	add	r19, r19
    2944:	22 1f       	adc	r18, r18
    2946:	33 27       	eor	r19, r19
    2948:	e2 0f       	add	r30, r18
    294a:	f3 1f       	adc	r31, r19
    294c:	df 01       	movw	r26, r30
    294e:	aa 0f       	add	r26, r26
    2950:	bb 1f       	adc	r27, r27
    2952:	aa 0f       	add	r26, r26
    2954:	bb 1f       	adc	r27, r27
    2956:	aa 0f       	add	r26, r26
    2958:	bb 1f       	adc	r27, r27
    295a:	ac 5f       	subi	r26, 0xFC	; 252
    295c:	bd 4d       	sbci	r27, 0xDD	; 221
    295e:	51 96       	adiw	r26, 0x11	; 17
    2960:	9c 91       	ld	r25, X
    2962:	51 97       	sbiw	r26, 0x11	; 17
    2964:	94 60       	ori	r25, 0x04	; 4
    2966:	51 96       	adiw	r26, 0x11	; 17
    2968:	9c 93       	st	X, r25
    296a:	ee 0f       	add	r30, r30
    296c:	ff 1f       	adc	r31, r31
    296e:	ee 0f       	add	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	ee 0f       	add	r30, r30
    2974:	ff 1f       	adc	r31, r31
    2976:	ec 5e       	subi	r30, 0xEC	; 236
    2978:	fd 4d       	sbci	r31, 0xDD	; 221
    297a:	01 e0       	ldi	r16, 0x01	; 1
    297c:	06 93       	lac	Z, r16
    297e:	71 df       	rcall	.-286    	; 0x2862 <udd_ep_abort>
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	0f 91       	pop	r16
    2984:	08 95       	ret

00002986 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2986:	1f 92       	push	r1
    2988:	0f 92       	push	r0
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	0f 92       	push	r0
    298e:	11 24       	eor	r1, r1
    2990:	0f 93       	push	r16
    2992:	2f 93       	push	r18
    2994:	3f 93       	push	r19
    2996:	4f 93       	push	r20
    2998:	5f 93       	push	r21
    299a:	6f 93       	push	r22
    299c:	7f 93       	push	r23
    299e:	8f 93       	push	r24
    29a0:	9f 93       	push	r25
    29a2:	af 93       	push	r26
    29a4:	bf 93       	push	r27
    29a6:	ef 93       	push	r30
    29a8:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    29aa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29ae:	88 23       	and	r24, r24
    29b0:	44 f4       	brge	.+16     	; 0x29c2 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    29b2:	80 e8       	ldi	r24, 0x80	; 128
    29b4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    29b8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    29bc:	0e 94 05 02 	call	0x40a	; 0x40a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    29c0:	8a c0       	rjmp	.+276    	; 0x2ad6 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    29c2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29c6:	82 ff       	sbrs	r24, 2
    29c8:	20 c0       	rjmp	.+64     	; 0x2a0a <__vector_125+0x84>
		udd_ack_underflow_event();
    29ca:	84 e0       	ldi	r24, 0x04	; 4
    29cc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    29d0:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udd_sram+0x18>
    29d4:	86 ff       	sbrs	r24, 6
    29d6:	7f c0       	rjmp	.+254    	; 0x2ad6 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    29d8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    29dc:	81 fd       	sbrc	r24, 1
    29de:	7b c0       	rjmp	.+246    	; 0x2ad6 <__vector_125+0x150>
    29e0:	43 db       	rcall	.-2426   	; 0x2068 <udd_ctrl_interrupt_tc_setup>
    29e2:	81 11       	cpse	r24, r1
    29e4:	78 c0       	rjmp	.+240    	; 0x2ad6 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    29e6:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	11 f4       	brne	.+4      	; 0x29f2 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    29ee:	79 da       	rcall	.-2830   	; 0x1ee2 <udd_ctrl_send_zlp_in>
    29f0:	72 c0       	rjmp	.+228    	; 0x2ad6 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29f2:	84 30       	cpi	r24, 0x04	; 4
    29f4:	09 f0       	breq	.+2      	; 0x29f8 <__vector_125+0x72>
    29f6:	6f c0       	rjmp	.+222    	; 0x2ad6 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    29f8:	ed e1       	ldi	r30, 0x1D	; 29
    29fa:	f2 e2       	ldi	r31, 0x22	; 34
    29fc:	04 e0       	ldi	r16, 0x04	; 4
    29fe:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2a00:	e5 e1       	ldi	r30, 0x15	; 21
    2a02:	f2 e2       	ldi	r31, 0x22	; 34
    2a04:	04 e0       	ldi	r16, 0x04	; 4
    2a06:	05 93       	las	Z, r16
    2a08:	66 c0       	rjmp	.+204    	; 0x2ad6 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2a0a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a0e:	81 ff       	sbrs	r24, 1
    2a10:	5d c0       	rjmp	.+186    	; 0x2acc <__vector_125+0x146>
		udd_ack_overflow_event();
    2a12:	82 e0       	ldi	r24, 0x02	; 2
    2a14:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2a18:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udd_sram+0x10>
    2a1c:	86 ff       	sbrs	r24, 6
    2a1e:	5b c0       	rjmp	.+182    	; 0x2ad6 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a20:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a24:	81 fd       	sbrc	r24, 1
    2a26:	57 c0       	rjmp	.+174    	; 0x2ad6 <__vector_125+0x150>
    2a28:	1f db       	rcall	.-2498   	; 0x2068 <udd_ctrl_interrupt_tc_setup>
    2a2a:	81 11       	cpse	r24, r1
    2a2c:	54 c0       	rjmp	.+168    	; 0x2ad6 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2a2e:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    2a32:	82 30       	cpi	r24, 0x02	; 2
    2a34:	41 f4       	brne	.+16     	; 0x2a46 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2a36:	84 e0       	ldi	r24, 0x04	; 4
    2a38:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2a3c:	e4 e1       	ldi	r30, 0x14	; 20
    2a3e:	f2 e2       	ldi	r31, 0x22	; 34
    2a40:	02 e0       	ldi	r16, 0x02	; 2
    2a42:	06 93       	lac	Z, r16
    2a44:	48 c0       	rjmp	.+144    	; 0x2ad6 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2a46:	83 30       	cpi	r24, 0x03	; 3
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <__vector_125+0xc6>
    2a4a:	45 c0       	rjmp	.+138    	; 0x2ad6 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2a4c:	ed e1       	ldi	r30, 0x1D	; 29
    2a4e:	f2 e2       	ldi	r31, 0x22	; 34
    2a50:	04 e0       	ldi	r16, 0x04	; 4
    2a52:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2a54:	e5 e1       	ldi	r30, 0x15	; 21
    2a56:	f2 e2       	ldi	r31, 0x22	; 34
    2a58:	04 e0       	ldi	r16, 0x04	; 4
    2a5a:	05 93       	las	Z, r16
    2a5c:	3c c0       	rjmp	.+120    	; 0x2ad6 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2a5e:	80 e1       	ldi	r24, 0x10	; 16
    2a60:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	fd de       	rcall	.-518    	; 0x2862 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a68:	81 e8       	ldi	r24, 0x81	; 129
    2a6a:	fb de       	rcall	.-522    	; 0x2862 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a6c:	82 e0       	ldi	r24, 0x02	; 2
    2a6e:	f9 de       	rcall	.-526    	; 0x2862 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a70:	82 e8       	ldi	r24, 0x82	; 130
    2a72:	f7 de       	rcall	.-530    	; 0x2862 <udd_ep_abort>
		}
#endif
		udc_reset();
    2a74:	0e 94 25 0b 	call	0x164a	; 0x164a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2a78:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a7c:	e4 e0       	ldi	r30, 0x04	; 4
    2a7e:	f2 e2       	ldi	r31, 0x22	; 34
    2a80:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2a82:	96 e0       	ldi	r25, 0x06	; 6
    2a84:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a86:	83 e4       	ldi	r24, 0x43	; 67
    2a88:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a8a:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2a8c:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a8e:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2a90:	8f eb       	ldi	r24, 0xBF	; 191
    2a92:	91 e2       	ldi	r25, 0x21	; 33
    2a94:	84 8b       	std	Z+20, r24	; 0x14
    2a96:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2a98:	ef d9       	rcall	.-3106   	; 0x1e78 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2a9a:	1d c0       	rjmp	.+58     	; 0x2ad6 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2a9c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2aa0:	86 ff       	sbrs	r24, 6
    2aa2:	08 c0       	rjmp	.+16     	; 0x2ab4 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2aa4:	80 e4       	ldi	r24, 0x40	; 64
    2aa6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	bc d9       	rcall	.-3208   	; 0x1e26 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2aae:	0e 94 03 02 	call	0x406	; 0x406 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2ab2:	11 c0       	rjmp	.+34     	; 0x2ad6 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2ab4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ab8:	85 ff       	sbrs	r24, 5
    2aba:	0d c0       	rjmp	.+26     	; 0x2ad6 <__vector_125+0x150>
		udd_ack_resume_event();
    2abc:	80 e2       	ldi	r24, 0x20	; 32
    2abe:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	b0 d9       	rcall	.-3232   	; 0x1e26 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2ac6:	0e 94 04 02 	call	0x408	; 0x408 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2aca:	05 c0       	rjmp	.+10     	; 0x2ad6 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2acc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ad0:	84 fd       	sbrc	r24, 4
    2ad2:	c5 cf       	rjmp	.-118    	; 0x2a5e <__vector_125+0xd8>
    2ad4:	e3 cf       	rjmp	.-58     	; 0x2a9c <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2ad6:	ff 91       	pop	r31
    2ad8:	ef 91       	pop	r30
    2ada:	bf 91       	pop	r27
    2adc:	af 91       	pop	r26
    2ade:	9f 91       	pop	r25
    2ae0:	8f 91       	pop	r24
    2ae2:	7f 91       	pop	r23
    2ae4:	6f 91       	pop	r22
    2ae6:	5f 91       	pop	r21
    2ae8:	4f 91       	pop	r20
    2aea:	3f 91       	pop	r19
    2aec:	2f 91       	pop	r18
    2aee:	0f 91       	pop	r16
    2af0:	0f 90       	pop	r0
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	0f 90       	pop	r0
    2af6:	1f 90       	pop	r1
    2af8:	18 95       	reti

00002afa <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2afa:	1f 92       	push	r1
    2afc:	0f 92       	push	r0
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	0f 92       	push	r0
    2b02:	11 24       	eor	r1, r1
    2b04:	0f 93       	push	r16
    2b06:	1f 93       	push	r17
    2b08:	2f 93       	push	r18
    2b0a:	3f 93       	push	r19
    2b0c:	4f 93       	push	r20
    2b0e:	5f 93       	push	r21
    2b10:	6f 93       	push	r22
    2b12:	7f 93       	push	r23
    2b14:	8f 93       	push	r24
    2b16:	9f 93       	push	r25
    2b18:	af 93       	push	r26
    2b1a:	bf 93       	push	r27
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	ef 93       	push	r30
    2b22:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2b24:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b28:	81 fd       	sbrc	r24, 1
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2b2c:	9d da       	rcall	.-2758   	; 0x2068 <udd_ctrl_interrupt_tc_setup>
    2b2e:	81 11       	cpse	r24, r1
    2b30:	b9 c0       	rjmp	.+370    	; 0x2ca4 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2b38:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2b3c:	81 95       	neg	r24
    2b3e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2b40:	e4 e1       	ldi	r30, 0x14	; 20
    2b42:	f2 e2       	ldi	r31, 0x22	; 34
    2b44:	e8 1b       	sub	r30, r24
    2b46:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2b48:	20 81       	ld	r18, Z
    2b4a:	31 81       	ldd	r19, Z+1	; 0x01
    2b4c:	24 51       	subi	r18, 0x14	; 20
    2b4e:	32 42       	sbci	r19, 0x22	; 34
    2b50:	36 95       	lsr	r19
    2b52:	27 95       	ror	r18
    2b54:	36 95       	lsr	r19
    2b56:	27 95       	ror	r18
    2b58:	36 95       	lsr	r19
    2b5a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2b5c:	82 2f       	mov	r24, r18
    2b5e:	86 95       	lsr	r24
    2b60:	20 fd       	sbrc	r18, 0
    2b62:	02 c0       	rjmp	.+4      	; 0x2b68 <__vector_126+0x6e>
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	01 c0       	rjmp	.+2      	; 0x2b6a <__vector_126+0x70>
    2b68:	90 e8       	ldi	r25, 0x80	; 128
    2b6a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b6c:	e8 2f       	mov	r30, r24
    2b6e:	ef 70       	andi	r30, 0x0F	; 15
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	ee 0f       	add	r30, r30
    2b74:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2b76:	28 2f       	mov	r18, r24
    2b78:	08 2e       	mov	r0, r24
    2b7a:	00 0c       	add	r0, r0
    2b7c:	33 0b       	sbc	r19, r19
    2b7e:	22 27       	eor	r18, r18
    2b80:	33 0f       	add	r19, r19
    2b82:	22 1f       	adc	r18, r18
    2b84:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b86:	e2 0f       	add	r30, r18
    2b88:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2b8a:	df 01       	movw	r26, r30
    2b8c:	aa 0f       	add	r26, r26
    2b8e:	bb 1f       	adc	r27, r27
    2b90:	aa 0f       	add	r26, r26
    2b92:	bb 1f       	adc	r27, r27
    2b94:	aa 0f       	add	r26, r26
    2b96:	bb 1f       	adc	r27, r27
    2b98:	ac 5e       	subi	r26, 0xEC	; 236
    2b9a:	bd 4d       	sbci	r27, 0xDD	; 221
    2b9c:	9c 91       	ld	r25, X
    2b9e:	95 ff       	sbrs	r25, 5
    2ba0:	81 c0       	rjmp	.+258    	; 0x2ca4 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2ba2:	fd 01       	movw	r30, r26
    2ba4:	00 e2       	ldi	r16, 0x20	; 32
    2ba6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2ba8:	81 11       	cpse	r24, r1
    2baa:	77 c0       	rjmp	.+238    	; 0x2c9a <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2bac:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    2bb0:	84 30       	cpi	r24, 0x04	; 4
    2bb2:	19 f4       	brne	.+6      	; 0x2bba <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2bb4:	a4 d9       	rcall	.-3256   	; 0x1efe <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2bb6:	60 d9       	rcall	.-3392   	; 0x1e78 <udd_ctrl_init>
    2bb8:	75 c0       	rjmp	.+234    	; 0x2ca4 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2bba:	00 91 16 22 	lds	r16, 0x2216	; 0x802216 <udd_sram+0x12>
    2bbe:	10 91 17 22 	lds	r17, 0x2217	; 0x802217 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2bc2:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    2bc6:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    2bca:	c0 91 ff 21 	lds	r28, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2bce:	d0 91 00 22 	lds	r29, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    2bd2:	9e 01       	movw	r18, r28
    2bd4:	20 0f       	add	r18, r16
    2bd6:	31 1f       	adc	r19, r17
    2bd8:	82 17       	cp	r24, r18
    2bda:	93 07       	cpc	r25, r19
    2bdc:	18 f4       	brcc	.+6      	; 0x2be4 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2bde:	8c 01       	movw	r16, r24
    2be0:	0c 1b       	sub	r16, r28
    2be2:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2be4:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <udd_g_ctrlreq+0x8>
    2be8:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <udd_g_ctrlreq+0x9>
    2bec:	a8 01       	movw	r20, r16
    2bee:	6f eb       	ldi	r22, 0xBF	; 191
    2bf0:	71 e2       	ldi	r23, 0x21	; 33
    2bf2:	8c 0f       	add	r24, r28
    2bf4:	9d 1f       	adc	r25, r29
    2bf6:	85 d0       	rcall	.+266    	; 0x2d02 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2bf8:	c0 0f       	add	r28, r16
    2bfa:	d1 1f       	adc	r29, r17
    2bfc:	c0 93 ff 21 	sts	0x21FF, r28	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2c00:	d0 93 00 22 	sts	0x2200, r29	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2c04:	00 34       	cpi	r16, 0x40	; 64
    2c06:	11 05       	cpc	r17, r1
    2c08:	69 f4       	brne	.+26     	; 0x2c24 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2c0a:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    2c0e:	90 91 02 22 	lds	r25, 0x2202	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c12:	8c 0f       	add	r24, r28
    2c14:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2c16:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    2c1a:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    2c1e:	82 17       	cp	r24, r18
    2c20:	93 07       	cpc	r25, r19
    2c22:	80 f0       	brcs	.+32     	; 0x2c44 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2c24:	ee e5       	ldi	r30, 0x5E	; 94
    2c26:	f4 e2       	ldi	r31, 0x24	; 36
    2c28:	c2 87       	std	Z+10, r28	; 0x0a
    2c2a:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2c2c:	06 84       	ldd	r0, Z+14	; 0x0e
    2c2e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2c30:	e0 2d       	mov	r30, r0
    2c32:	30 97       	sbiw	r30, 0x00	; 0
    2c34:	29 f0       	breq	.+10     	; 0x2c40 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2c36:	09 95       	icall
    2c38:	81 11       	cpse	r24, r1
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2c3c:	44 d9       	rcall	.-3448   	; 0x1ec6 <udd_ctrl_stall_data>
    2c3e:	32 c0       	rjmp	.+100    	; 0x2ca4 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2c40:	50 d9       	rcall	.-3424   	; 0x1ee2 <udd_ctrl_send_zlp_in>
    2c42:	30 c0       	rjmp	.+96     	; 0x2ca4 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2c44:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    2c48:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    2c4c:	c8 17       	cp	r28, r24
    2c4e:	d9 07       	cpc	r29, r25
    2c50:	f9 f4       	brne	.+62     	; 0x2c90 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2c52:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <udd_g_ctrlreq+0xe>
    2c56:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <udd_g_ctrlreq+0xf>
    2c5a:	30 97       	sbiw	r30, 0x00	; 0
    2c5c:	11 f4       	brne	.+4      	; 0x2c62 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2c5e:	33 d9       	rcall	.-3482   	; 0x1ec6 <udd_ctrl_stall_data>
    2c60:	21 c0       	rjmp	.+66     	; 0x2ca4 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2c62:	09 95       	icall
    2c64:	81 11       	cpse	r24, r1
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2c68:	2e d9       	rcall	.-3492   	; 0x1ec6 <udd_ctrl_stall_data>
    2c6a:	1c c0       	rjmp	.+56     	; 0x2ca4 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2c6c:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    2c70:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c74:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2c78:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    2c7c:	82 0f       	add	r24, r18
    2c7e:	93 1f       	adc	r25, r19
    2c80:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    2c84:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2c88:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2c8c:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2c90:	e4 e1       	ldi	r30, 0x14	; 20
    2c92:	f2 e2       	ldi	r31, 0x22	; 34
    2c94:	02 e0       	ldi	r16, 0x02	; 2
    2c96:	06 93       	lac	Z, r16
    2c98:	05 c0       	rjmp	.+10     	; 0x2ca4 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2c9a:	80 38       	cpi	r24, 0x80	; 128
    2c9c:	11 f4       	brne	.+4      	; 0x2ca2 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2c9e:	37 d9       	rcall	.-3474   	; 0x1f0e <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2ca0:	01 c0       	rjmp	.+2      	; 0x2ca4 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2ca2:	51 da       	rcall	.-2910   	; 0x2146 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2ca4:	ff 91       	pop	r31
    2ca6:	ef 91       	pop	r30
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	bf 91       	pop	r27
    2cae:	af 91       	pop	r26
    2cb0:	9f 91       	pop	r25
    2cb2:	8f 91       	pop	r24
    2cb4:	7f 91       	pop	r23
    2cb6:	6f 91       	pop	r22
    2cb8:	5f 91       	pop	r21
    2cba:	4f 91       	pop	r20
    2cbc:	3f 91       	pop	r19
    2cbe:	2f 91       	pop	r18
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	0f 90       	pop	r0
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	0f 90       	pop	r0
    2cca:	1f 90       	pop	r1
    2ccc:	18 95       	reti

00002cce <__udivmodhi4>:
    2cce:	aa 1b       	sub	r26, r26
    2cd0:	bb 1b       	sub	r27, r27
    2cd2:	51 e1       	ldi	r21, 0x11	; 17
    2cd4:	07 c0       	rjmp	.+14     	; 0x2ce4 <__udivmodhi4_ep>

00002cd6 <__udivmodhi4_loop>:
    2cd6:	aa 1f       	adc	r26, r26
    2cd8:	bb 1f       	adc	r27, r27
    2cda:	a6 17       	cp	r26, r22
    2cdc:	b7 07       	cpc	r27, r23
    2cde:	10 f0       	brcs	.+4      	; 0x2ce4 <__udivmodhi4_ep>
    2ce0:	a6 1b       	sub	r26, r22
    2ce2:	b7 0b       	sbc	r27, r23

00002ce4 <__udivmodhi4_ep>:
    2ce4:	88 1f       	adc	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	5a 95       	dec	r21
    2cea:	a9 f7       	brne	.-22     	; 0x2cd6 <__udivmodhi4_loop>
    2cec:	80 95       	com	r24
    2cee:	90 95       	com	r25
    2cf0:	bc 01       	movw	r22, r24
    2cf2:	cd 01       	movw	r24, r26
    2cf4:	08 95       	ret

00002cf6 <__tablejump2__>:
    2cf6:	ee 0f       	add	r30, r30
    2cf8:	ff 1f       	adc	r31, r31
    2cfa:	05 90       	lpm	r0, Z+
    2cfc:	f4 91       	lpm	r31, Z
    2cfe:	e0 2d       	mov	r30, r0
    2d00:	09 94       	ijmp

00002d02 <memcpy>:
    2d02:	fb 01       	movw	r30, r22
    2d04:	dc 01       	movw	r26, r24
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <memcpy+0xa>
    2d08:	01 90       	ld	r0, Z+
    2d0a:	0d 92       	st	X+, r0
    2d0c:	41 50       	subi	r20, 0x01	; 1
    2d0e:	50 40       	sbci	r21, 0x00	; 0
    2d10:	d8 f7       	brcc	.-10     	; 0x2d08 <memcpy+0x6>
    2d12:	08 95       	ret

00002d14 <_exit>:
    2d14:	f8 94       	cli

00002d16 <__stop_program>:
    2d16:	ff cf       	rjmp	.-2      	; 0x2d16 <__stop_program>
