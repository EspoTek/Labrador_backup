
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00802000  00002dea  00002e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dc4  008020c8  008020c8  00002f48  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  00002fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bb4d  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e9b  00000000  00000000  0000f01d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000097f7  00000000  00000000  00010eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b04  00000000  00000000  0001a6b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fd4d  00000000  00000000  0001b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002544  00000000  00000000  0004af01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0004d448  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be4a  00000000  00000000  0004d880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_6>
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
      1e:	00 00       	nop
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_24>
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	88 c4       	rjmp	.+2320   	; 0xa2e <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_83>
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__vector_125>
     1f8:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__vector_126>
     1fc:	d9 0b       	sbc	r29, r25
     1fe:	fe 0b       	sbc	r31, r30
     200:	3a 0c       	add	r3, r10
     202:	76 0c       	add	r7, r6
     204:	7f 0c       	add	r7, r15
     206:	84 0c       	add	r8, r4
     208:	cb 0c       	add	r12, r11
     20a:	d0 0c       	add	r13, r0
     20c:	2a 0c       	add	r2, r10
     20e:	2c 0c       	add	r2, r12
     210:	2e 0c       	add	r2, r14
     212:	30 0c       	add	r3, r0
     214:	32 0c       	add	r3, r2
     216:	34 0c       	add	r3, r4
     218:	36 0c       	add	r3, r6
     21a:	38 0c       	add	r3, r8
     21c:	66 0c       	add	r6, r6
     21e:	68 0c       	add	r6, r8
     220:	6a 0c       	add	r6, r10
     222:	6c 0c       	add	r6, r12
     224:	6e 0c       	add	r6, r14
     226:	70 0c       	add	r7, r0
     228:	72 0c       	add	r7, r2
     22a:	74 0c       	add	r7, r4
     22c:	90 0c       	add	r9, r0
     22e:	98 0c       	add	r9, r8
     230:	a0 0c       	add	r10, r0
     232:	ab 0c       	add	r10, r11
     234:	ad 0c       	add	r10, r13
     236:	af 0c       	add	r10, r15
     238:	b8 0c       	add	r11, r8
     23a:	c1 0c       	add	r12, r1
     23c:	48 10       	cpse	r4, r8
     23e:	4b 10       	cpse	r4, r11
     240:	4e 10       	cpse	r4, r14
     242:	51 10       	cpse	r5, r1
     244:	54 10       	cpse	r5, r4
     246:	57 10       	cpse	r5, r7
     248:	5a 10       	cpse	r5, r10

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	ea ee       	ldi	r30, 0xEA	; 234
     25e:	fd e2       	ldi	r31, 0x2D	; 45
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a8 3c       	cpi	r26, 0xC8	; 200
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	a8 ec       	ldi	r26, 0xC8	; 200
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	ac 38       	cpi	r26, 0x8C	; 140
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	7f d2       	rcall	.+1278   	; 0x77c <main>
     27e:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	86 d3       	rcall	.+1804   	; 0x9a2 <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <tiny_calibration_first_sof>:
     2f4:	e0 e7       	ldi	r30, 0x70	; 112
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	85 81       	ldd	r24, Z+5	; 0x05
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	85 83       	std	Z+5, r24	; 0x05
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	fa e0       	ldi	r31, 0x0A	; 10
     302:	8f eb       	ldi	r24, 0xBF	; 191
     304:	9d e5       	ldi	r25, 0x5D	; 93
     306:	86 a3       	std	Z+38, r24	; 0x26
     308:	97 a3       	std	Z+39, r25	; 0x27
     30a:	80 ee       	ldi	r24, 0xE0	; 224
     30c:	9e e2       	ldi	r25, 0x2E	; 46
     30e:	80 a3       	std	Z+32, r24	; 0x20
     310:	91 a3       	std	Z+33, r25	; 0x21
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
     316:	08 95       	ret

00000318 <tiny_calibration_maintain>:
     318:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     31c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     320:	81 3e       	cpi	r24, 0xE1	; 225
     322:	2e e2       	ldi	r18, 0x2E	; 46
     324:	92 07       	cpc	r25, r18
     326:	20 f0       	brcs	.+8      	; 0x330 <tiny_calibration_maintain+0x18>
     328:	20 91 7e 22 	lds	r18, 0x227E	; 0x80227e <cali_value_negative_gradient>
     32c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     330:	80 3e       	cpi	r24, 0xE0	; 224
     332:	2e e2       	ldi	r18, 0x2E	; 46
     334:	92 07       	cpc	r25, r18
     336:	20 f4       	brcc	.+8      	; 0x340 <tiny_calibration_maintain+0x28>
     338:	20 91 7b 22 	lds	r18, 0x227B	; 0x80227b <cali_value_positive_gradient>
     33c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     340:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     344:	22 23       	and	r18, r18
     346:	31 f0       	breq	.+12     	; 0x354 <tiny_calibration_maintain+0x3c>
     348:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     352:	1d c0       	rjmp	.+58     	; 0x38e <tiny_calibration_maintain+0x76>
     354:	88 5f       	subi	r24, 0xF8	; 248
     356:	9a 42       	sbci	r25, 0x2A	; 42
     358:	81 3d       	cpi	r24, 0xD1	; 209
     35a:	97 40       	sbci	r25, 0x07	; 7
     35c:	c0 f0       	brcs	.+48     	; 0x38e <tiny_calibration_maintain+0x76>
     35e:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <__data_end>
     362:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <outOfRange>
     366:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <outOfRange+0x1>
     36a:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <outOfRange+0x2>
     36e:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <outOfRange+0x3>
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	a1 1d       	adc	r26, r1
     376:	b1 1d       	adc	r27, r1
     378:	80 93 c9 20 	sts	0x20C9, r24	; 0x8020c9 <outOfRange>
     37c:	90 93 ca 20 	sts	0x20CA, r25	; 0x8020ca <outOfRange+0x1>
     380:	a0 93 cb 20 	sts	0x20CB, r26	; 0x8020cb <outOfRange+0x2>
     384:	b0 93 cc 20 	sts	0x20CC, r27	; 0x8020cc <outOfRange+0x3>
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     38e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     392:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	b1 f4       	brne	.+44     	; 0x3c6 <tiny_calibration_maintain+0xae>
     39a:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     39e:	8f 3f       	cpi	r24, 0xFF	; 255
     3a0:	91 f0       	breq	.+36     	; 0x3c6 <tiny_calibration_maintain+0xae>
     3a2:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3a6:	81 11       	cpse	r24, r1
     3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <tiny_calibration_maintain+0x9e>
     3aa:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3ae:	81 50       	subi	r24, 0x01	; 1
     3b0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3b4:	08 95       	ret
     3b6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3ba:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3be:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3c2:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3c6:	08 95       	ret

000003c8 <tiny_calibration_safe_add>:
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	09 f4       	brne	.+2      	; 0x3ce <tiny_calibration_safe_add+0x6>
     3cc:	66 c0       	rjmp	.+204    	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
     3ce:	0c f0       	brlt	.+2      	; 0x3d2 <tiny_calibration_safe_add+0xa>
     3d0:	9c 01       	movw	r18, r24
     3d2:	99 23       	and	r25, r25
     3d4:	34 f4       	brge	.+12     	; 0x3e2 <tiny_calibration_safe_add+0x1a>
     3d6:	22 27       	eor	r18, r18
     3d8:	33 27       	eor	r19, r19
     3da:	28 1b       	sub	r18, r24
     3dc:	39 0b       	sbc	r19, r25
     3de:	51 e0       	ldi	r21, 0x01	; 1
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <tiny_calibration_safe_add+0x1c>
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	e8 e6       	ldi	r30, 0x68	; 104
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	83 81       	ldd	r24, Z+3	; 0x03
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     3f0:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     3f4:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     3f8:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     3fc:	96 95       	lsr	r25
     3fe:	98 2f       	mov	r25, r24
     400:	88 27       	eor	r24, r24
     402:	97 95       	ror	r25
     404:	87 95       	ror	r24
     406:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     40a:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     40e:	42 81       	ldd	r20, Z+2	; 0x02
     410:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     414:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     418:	84 0f       	add	r24, r20
     41a:	91 1d       	adc	r25, r1
     41c:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     420:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     424:	00 00       	nop
     426:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     42a:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     42e:	82 17       	cp	r24, r18
     430:	93 07       	cpc	r25, r19
     432:	28 f4       	brcc	.+10     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     434:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <calTemp>
     438:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <calTemp+0x1>
     43c:	08 95       	ret
     43e:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     442:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	81 15       	cp	r24, r1
     44c:	90 42       	sbci	r25, 0x20	; 32
     44e:	38 f0       	brcs	.+14     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	9f e1       	ldi	r25, 0x1F	; 31
     454:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     458:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     45c:	08 95       	ret
     45e:	55 23       	and	r21, r21
     460:	59 f0       	breq	.+22     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
     462:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     466:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     46a:	82 1b       	sub	r24, r18
     46c:	93 0b       	sbc	r25, r19
     46e:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     472:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     476:	0a c0       	rjmp	.+20     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
     478:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     47c:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     480:	28 0f       	add	r18, r24
     482:	39 1f       	adc	r19, r25
     484:	20 93 7c 22 	sts	0x227C, r18	; 0x80227c <calTemp>
     488:	30 93 7d 22 	sts	0x227D, r19	; 0x80227d <calTemp+0x1>
     48c:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     490:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     494:	8f 77       	andi	r24, 0x7F	; 127
     496:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     49a:	08 95       	ret

0000049c <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4a0:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4a4:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4a8:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4ac:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4b0:	9e 01       	movw	r18, r28
     4b2:	28 1b       	sub	r18, r24
     4b4:	39 0b       	sbc	r19, r25
     4b6:	20 93 7f 22 	sts	0x227F, r18	; 0x80227f <gradient>
     4ba:	30 93 80 22 	sts	0x2280, r19	; 0x802280 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4be:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__data_end>
     4c2:	81 11       	cpse	r24, r1
     4c4:	4d c0       	rjmp	.+154    	; 0x560 <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4c6:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     4ca:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     4ce:	8e 3c       	cpi	r24, 0xCE	; 206
     4d0:	9f 4f       	sbci	r25, 0xFF	; 255
     4d2:	e4 f4       	brge	.+56     	; 0x50c <tiny_calibration_find_values+0x70>
     4d4:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     4d8:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     4dc:	8b 36       	cpi	r24, 0x6B	; 107
     4de:	9f 4f       	sbci	r25, 0xFF	; 255
     4e0:	ac f0       	brlt	.+42     	; 0x50c <tiny_calibration_find_values+0x70>
			if(inarow){
     4e2:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     4e6:	88 23       	and	r24, r24
     4e8:	31 f0       	breq	.+12     	; 0x4f6 <tiny_calibration_find_values+0x5a>
				inarow--;
     4ea:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     4ee:	81 50       	subi	r24, 0x01	; 1
     4f0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     4f4:	35 c0       	rjmp	.+106    	; 0x560 <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     4f6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4fa:	80 93 7e 22 	sts	0x227E, r24	; 0x80227e <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <__data_end>
				inarow = NUM_INAROW;
     504:	8c e0       	ldi	r24, 0x0C	; 12
     506:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     50a:	2a c0       	rjmp	.+84     	; 0x560 <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     50c:	8c e0       	ldi	r24, 0x0C	; 12
     50e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     512:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     516:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     51a:	8a 36       	cpi	r24, 0x6A	; 106
     51c:	9f 4f       	sbci	r25, 0xFF	; 255
     51e:	1c f0       	brlt	.+6      	; 0x526 <tiny_calibration_find_values+0x8a>
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	9f ef       	ldi	r25, 0xFF	; 255
     524:	02 c0       	rjmp	.+4      	; 0x52a <tiny_calibration_find_values+0x8e>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <calChange>
     52e:	90 93 7a 22 	sts	0x227A, r25	; 0x80227a <calChange+0x1>
			calChange -= gradient / 48;
     532:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     536:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     53a:	20 91 79 22 	lds	r18, 0x2279	; 0x802279 <calChange>
     53e:	30 91 7a 22 	lds	r19, 0x227A	; 0x80227a <calChange+0x1>
     542:	60 e3       	ldi	r22, 0x30	; 48
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__divmodhi4>
     54a:	26 1b       	sub	r18, r22
     54c:	37 0b       	sbc	r19, r23
     54e:	20 93 79 22 	sts	0x2279, r18	; 0x802279 <calChange>
     552:	30 93 7a 22 	sts	0x227A, r19	; 0x80227a <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     556:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <calChange>
     55a:	90 91 7a 22 	lds	r25, 0x227A	; 0x80227a <calChange+0x1>
     55e:	34 df       	rcall	.-408    	; 0x3c8 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     560:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__data_end>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	29 f5       	brne	.+74     	; 0x5b2 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     568:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     56c:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     570:	c3 97       	sbiw	r24, 0x33	; 51
     572:	94 f0       	brlt	.+36     	; 0x598 <tiny_calibration_find_values+0xfc>
			if(inarow){
     574:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     578:	88 23       	and	r24, r24
     57a:	31 f0       	breq	.+12     	; 0x588 <tiny_calibration_find_values+0xec>
				inarow--;
     57c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     580:	81 50       	subi	r24, 0x01	; 1
     582:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     586:	15 c0       	rjmp	.+42     	; 0x5b2 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     588:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     58c:	80 93 7b 22 	sts	0x227B, r24	; 0x80227b <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <__data_end>
     596:	0d c0       	rjmp	.+26     	; 0x5b2 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     598:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     59c:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     5a0:	87 39       	cpi	r24, 0x97	; 151
     5a2:	91 05       	cpc	r25, r1
     5a4:	1c f4       	brge	.+6      	; 0x5ac <tiny_calibration_find_values+0x110>
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <tiny_calibration_find_values+0x114>
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	9f ef       	ldi	r25, 0xFF	; 255
     5b0:	0b df       	rcall	.-490    	; 0x3c8 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5b2:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5b6:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5c0:	86 17       	cp	r24, r22
     5c2:	97 07       	cpc	r25, r23
     5c4:	79 f0       	breq	.+30     	; 0x5e4 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5c6:	68 17       	cp	r22, r24
     5c8:	79 07       	cpc	r23, r25
     5ca:	28 f4       	brcc	.+10     	; 0x5d6 <magnitude_difference+0x16>
     5cc:	9c 01       	movw	r18, r24
     5ce:	26 1b       	sub	r18, r22
     5d0:	37 0b       	sbc	r19, r23
     5d2:	b9 01       	movw	r22, r18
     5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5d6:	86 17       	cp	r24, r22
     5d8:	97 07       	cpc	r25, r23
     5da:	18 f4       	brcc	.+6      	; 0x5e2 <magnitude_difference+0x22>
     5dc:	68 1b       	sub	r22, r24
     5de:	79 0b       	sbc	r23, r25
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <magnitude_difference+0x28>
     5e2:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	86 2f       	mov	r24, r22
     5ea:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     5ec:	08 95       	ret

000005ee <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     5f2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     5f6:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     5fa:	89 2b       	or	r24, r25
     5fc:	51 f0       	breq	.+20     	; 0x612 <tiny_calibration_layer2+0x24>
		layer2_counter--;
     5fe:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     602:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     60c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     610:	65 c0       	rjmp	.+202    	; 0x6dc <tiny_calibration_layer2+0xee>
	}
	layer2_counter = LAYER2_INTERVAL;
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     61a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     61e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     622:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	09 f4       	brne	.+2      	; 0x62c <tiny_calibration_layer2+0x3e>
     62a:	58 c0       	rjmp	.+176    	; 0x6dc <tiny_calibration_layer2+0xee>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     62c:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     630:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	if(magnitude_difference(TRFCNT_temp, median_TRFCNT) > 200){
     634:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     638:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     63c:	ce 01       	movw	r24, r28
     63e:	c0 df       	rcall	.-128    	; 0x5c0 <magnitude_difference>
     640:	89 3c       	cpi	r24, 0xC9	; 201
     642:	91 05       	cpc	r25, r1
     644:	00 f1       	brcs	.+64     	; 0x686 <tiny_calibration_layer2+0x98>
		TRFCNT_temp = (TRFCNT_temp + HALFPACKET_SIZE) % PACKET_SIZE;
     646:	ae 01       	movw	r20, r28
     648:	49 58       	subi	r20, 0x89	; 137
     64a:	5e 4f       	sbci	r21, 0xFE	; 254
     64c:	9a 01       	movw	r18, r20
     64e:	36 95       	lsr	r19
     650:	27 95       	ror	r18
     652:	a1 eb       	ldi	r26, 0xB1	; 177
     654:	bb e2       	ldi	r27, 0x2B	; 43
     656:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__umulhisi3>
     65a:	ec 01       	movw	r28, r24
     65c:	00 24       	eor	r0, r0
     65e:	cc 0f       	add	r28, r28
     660:	dd 1f       	adc	r29, r29
     662:	00 1c       	adc	r0, r0
     664:	cc 0f       	add	r28, r28
     666:	dd 1f       	adc	r29, r29
     668:	00 1c       	adc	r0, r0
     66a:	cd 2f       	mov	r28, r29
     66c:	d0 2d       	mov	r29, r0
     66e:	2e ee       	ldi	r18, 0xEE	; 238
     670:	32 e0       	ldi	r19, 0x02	; 2
     672:	c2 9f       	mul	r28, r18
     674:	c0 01       	movw	r24, r0
     676:	c3 9f       	mul	r28, r19
     678:	90 0d       	add	r25, r0
     67a:	d2 9f       	mul	r29, r18
     67c:	90 0d       	add	r25, r0
     67e:	11 24       	eor	r1, r1
     680:	ea 01       	movw	r28, r20
     682:	c8 1b       	sub	r28, r24
     684:	d9 0b       	sbc	r29, r25
	}
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     686:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     68a:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68e:	8c 17       	cp	r24, r28
     690:	9d 07       	cpc	r25, r29
     692:	78 f4       	brcc	.+30     	; 0x6b2 <tiny_calibration_layer2+0xc4>
     694:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     698:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     69c:	ce 01       	movw	r24, r28
     69e:	90 df       	rcall	.-224    	; 0x5c0 <magnitude_difference>
     6a0:	02 97       	sbiw	r24, 0x02	; 2
     6a2:	38 f0       	brcs	.+14     	; 0x6b2 <tiny_calibration_layer2+0xc4>
		TC_CALI.PERBUF = 24000;
     6a4:	80 ec       	ldi	r24, 0xC0	; 192
     6a6:	9d e5       	ldi	r25, 0x5D	; 93
     6a8:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6ac:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6b0:	15 c0       	rjmp	.+42     	; 0x6dc <tiny_calibration_layer2+0xee>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6b2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6b6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6ba:	c8 17       	cp	r28, r24
     6bc:	d9 07       	cpc	r29, r25
     6be:	70 f4       	brcc	.+28     	; 0x6dc <tiny_calibration_layer2+0xee>
     6c0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6c4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6c8:	ce 01       	movw	r24, r28
     6ca:	7a df       	rcall	.-268    	; 0x5c0 <magnitude_difference>
     6cc:	02 97       	sbiw	r24, 0x02	; 2
     6ce:	30 f0       	brcs	.+12     	; 0x6dc <tiny_calibration_layer2+0xee>
		TC_CALI.PERBUF = 23999;
     6d0:	8f eb       	ldi	r24, 0xBF	; 191
     6d2:	9d e5       	ldi	r25, 0x5D	; 93
     6d4:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6d8:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6e2:	ac 01       	movw	r20, r24
     6e4:	46 0f       	add	r20, r22
     6e6:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6e8:	86 1b       	sub	r24, r22
     6ea:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6ec:	e0 e0       	ldi	r30, 0x00	; 0
     6ee:	fa e0       	ldi	r31, 0x0A	; 10
     6f0:	20 a1       	ldd	r18, Z+32	; 0x20
     6f2:	31 a1       	ldd	r19, Z+33	; 0x21
     6f4:	24 17       	cp	r18, r20
     6f6:	35 07       	cpc	r19, r21
     6f8:	d8 f7       	brcc	.-10     	; 0x6f0 <tiny_calibration_synchronise_phase+0xe>
     6fa:	20 a1       	ldd	r18, Z+32	; 0x20
     6fc:	31 a1       	ldd	r19, Z+33	; 0x21
     6fe:	82 17       	cp	r24, r18
     700:	93 07       	cpc	r25, r19
     702:	b0 f7       	brcc	.-20     	; 0x6f0 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     704:	08 95       	ret

00000706 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     706:	e0 e8       	ldi	r30, 0x80	; 128
     708:	f6 e0       	ldi	r31, 0x06	; 6
     70a:	8f e0       	ldi	r24, 0x0F	; 15
     70c:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     70e:	85 e0       	ldi	r24, 0x05	; 5
     710:	84 83       	std	Z+4, r24	; 0x04
     712:	08 95       	ret

00000714 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     714:	08 95       	ret

00000716 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, iso_callback);
     716:	40 91 d4 20 	lds	r20, 0x20D4	; 0x8020d4 <usb_state>
     71a:	27 e7       	ldi	r18, 0x77	; 119
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	42 9f       	mul	r20, r18
     720:	c0 01       	movw	r24, r0
     722:	43 9f       	mul	r20, r19
     724:	90 0d       	add	r25, r0
     726:	11 24       	eor	r1, r1
     728:	4b e8       	ldi	r20, 0x8B	; 139
     72a:	53 e0       	ldi	r21, 0x03	; 3
     72c:	6a ef       	ldi	r22, 0xFA	; 250
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	88 55       	subi	r24, 0x58	; 88
     732:	99 4d       	sbci	r25, 0xD9	; 217
     734:	af c6       	rjmp	.+3422   	; 0x1494 <udi_vendor_iso_in_run>
     736:	08 95       	ret

00000738 <iso_callback2>:
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, iso_callback2);
     738:	40 91 d4 20 	lds	r20, 0x20D4	; 0x8020d4 <usb_state>
     73c:	27 e7       	ldi	r18, 0x77	; 119
     73e:	31 e0       	ldi	r19, 0x01	; 1
     740:	42 9f       	mul	r20, r18
     742:	c0 01       	movw	r24, r0
     744:	43 9f       	mul	r20, r19
     746:	90 0d       	add	r25, r0
     748:	11 24       	eor	r1, r1
     74a:	4c e9       	ldi	r20, 0x9C	; 156
     74c:	53 e0       	ldi	r21, 0x03	; 3
     74e:	6a ef       	ldi	r22, 0xFA	; 250
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	8e 55       	subi	r24, 0x5E	; 94
     754:	98 4d       	sbci	r25, 0xD8	; 216
     756:	aa c6       	rjmp	.+3412   	; 0x14ac <udi_vendor_iso_in_run2>
     758:	08 95       	ret

0000075a <iso_callback3>:
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, iso_callback3);
     75a:	40 91 d4 20 	lds	r20, 0x20D4	; 0x8020d4 <usb_state>
     75e:	27 e7       	ldi	r18, 0x77	; 119
     760:	31 e0       	ldi	r19, 0x01	; 1
     762:	42 9f       	mul	r20, r18
     764:	c0 01       	movw	r24, r0
     766:	43 9f       	mul	r20, r19
     768:	90 0d       	add	r25, r0
     76a:	11 24       	eor	r1, r1
     76c:	4d ea       	ldi	r20, 0xAD	; 173
     76e:	53 e0       	ldi	r21, 0x03	; 3
     770:	6a ef       	ldi	r22, 0xFA	; 250
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	84 56       	subi	r24, 0x64	; 100
     776:	97 4d       	sbci	r25, 0xD7	; 215
     778:	a5 c6       	rjmp	.+3402   	; 0x14c4 <udi_vendor_iso_in_run3>
     77a:	08 95       	ret

0000077c <main>:
volatile char debug_data[8] = "DEBUG123";

unified_debug uds;

int main(void){
	irq_initialize_vectors();
     77c:	87 e0       	ldi	r24, 0x07	; 7
     77e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     782:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     784:	7f dd       	rcall	.-1282   	; 0x284 <tiny_calibration_init>
		
	board_init();
     786:	c6 df       	rcall	.-116    	; 0x714 <board_init>
	udc_start();
     788:	94 d7       	rcall	.+3880   	; 0x16b2 <udc_start>
	tiny_dac_setup();
     78a:	64 d1       	rcall	.+712    	; 0xa54 <tiny_dac_setup>
	tiny_dma_setup();
     78c:	87 d1       	rcall	.+782    	; 0xa9c <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	10 d1       	rcall	.+544    	; 0x9b4 <tiny_adc_setup>
	tiny_adc_pid_setup();
     794:	fc d0       	rcall	.+504    	; 0x98e <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     796:	8c e0       	ldi	r24, 0x0C	; 12
     798:	ef d0       	rcall	.+478    	; 0x978 <tiny_adc_ch1setup>
	tiny_timer_setup();
     79a:	12 d5       	rcall	.+2596   	; 0x11c0 <tiny_timer_setup>
	tiny_uart_setup();
     79c:	cd d5       	rcall	.+2970   	; 0x1338 <tiny_uart_setup>
	tiny_spi_setup();
     79e:	e4 d5       	rcall	.+3016   	; 0x1368 <tiny_spi_setup>
	tiny_dig_setup();
     7a0:	b2 df       	rcall	.-156    	; 0x706 <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");

	strcpy(uds.header, "debug123");
     7a2:	89 e0       	ldi	r24, 0x09	; 9
     7a4:	ee eb       	ldi	r30, 0xBE	; 190
     7a6:	f0 e2       	ldi	r31, 0x20	; 32
     7a8:	a6 e8       	ldi	r26, 0x86	; 134
     7aa:	b2 e2       	ldi	r27, 0x22	; 34
     7ac:	01 90       	ld	r0, Z+
     7ae:	0d 92       	st	X+, r0
     7b0:	8a 95       	dec	r24
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <main+0x30>
     7b4:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <debug_counter>
     7b8:	90 91 83 22 	lds	r25, 0x2283	; 0x802283 <debug_counter+0x1>
     7bc:	a0 91 84 22 	lds	r26, 0x2284	; 0x802284 <debug_counter+0x2>
     7c0:	b0 91 85 22 	lds	r27, 0x2285	; 0x802285 <debug_counter+0x3>

	while (true) {
		debug_counter++;
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	a1 1d       	adc	r26, r1
     7c8:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	21 ee       	ldi	r18, 0xE1	; 225
     7ce:	92 07       	cpc	r25, r18
     7d0:	25 ef       	ldi	r18, 0xF5	; 245
     7d2:	a2 07       	cpc	r26, r18
     7d4:	25 e0       	ldi	r18, 0x05	; 5
     7d6:	b2 07       	cpc	r27, r18
     7d8:	18 f0       	brcs	.+6      	; 0x7e0 <main+0x64>
			debug_counter = 0;
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     7fc:	e3 cf       	rjmp	.-58     	; 0x7c4 <main+0x48>

000007fe <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     7fe:	08 95       	ret

00000800 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     800:	08 95       	ret

00000802 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	cli();
     802:	f8 94       	cli
	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     804:	e0 e0       	ldi	r30, 0x00	; 0
     806:	f1 e0       	ldi	r31, 0x01	; 1
     808:	84 89       	ldd	r24, Z+20	; 0x14
     80a:	a6 e8       	ldi	r26, 0x86	; 134
     80c:	b2 e2       	ldi	r27, 0x22	; 34
     80e:	19 96       	adiw	r26, 0x09	; 9
     810:	8c 93       	st	X, r24
     812:	19 97       	sbiw	r26, 0x09	; 9
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     814:	85 89       	ldd	r24, Z+21	; 0x15
     816:	1a 96       	adiw	r26, 0x0a	; 10
     818:	8c 93       	st	X, r24
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     81a:	84 89       	ldd	r24, Z+20	; 0x14
     81c:	95 89       	ldd	r25, Z+21	; 0x15
     81e:	86 34       	cpi	r24, 0x46	; 70
     820:	91 40       	sbci	r25, 0x01	; 1
     822:	80 f0       	brcs	.+32     	; 0x844 <main_sof_action+0x42>
     824:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     828:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     82c:	89 3a       	cpi	r24, 0xA9	; 169
     82e:	91 40       	sbci	r25, 0x01	; 1
     830:	48 f4       	brcc	.+18     	; 0x844 <main_sof_action+0x42>
		currentTrfcnt = DMA.CH0.TRFCNT;
     832:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     836:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     83a:	80 93 84 2e 	sts	0x2E84, r24	; 0x802e84 <currentTrfcnt>
     83e:	90 93 85 2e 	sts	0x2E85, r25	; 0x802e85 <currentTrfcnt+0x1>
		asm("nop");
     842:	00 00       	nop
	}
	if(firstFrame){
     844:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <firstFrame>
     848:	88 23       	and	r24, r24
     84a:	41 f0       	breq	.+16     	; 0x85c <main_sof_action+0x5a>
		tiny_calibration_first_sof();
     84c:	53 dd       	rcall	.-1370   	; 0x2f4 <tiny_calibration_first_sof>
		firstFrame = 0;
     84e:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <firstFrame>
		tcinit = 1;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 93 d1 20 	sts	0x20D1, r24	; 0x8020d1 <tcinit>
		sei();
     858:	78 94       	sei
		return;
     85a:	08 95       	ret
	}
	else{
		if(tcinit){
     85c:	80 91 d1 20 	lds	r24, 0x20D1	; 0x8020d1 <tcinit>
     860:	88 23       	and	r24, r24
     862:	b9 f1       	breq	.+110    	; 0x8d2 <main_sof_action+0xd0>
			if(calibration_values_found == 0x03){
     864:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__data_end>
     868:	83 30       	cpi	r24, 0x03	; 3
     86a:	19 f4       	brne	.+6      	; 0x872 <main_sof_action+0x70>
				tiny_calibration_maintain();
     86c:	55 dd       	rcall	.-1366   	; 0x318 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     86e:	bf de       	rcall	.-642    	; 0x5ee <tiny_calibration_layer2>
     870:	01 c0       	rjmp	.+2      	; 0x874 <main_sof_action+0x72>
			} else tiny_calibration_find_values();
     872:	14 de       	rcall	.-984    	; 0x49c <tiny_calibration_find_values>
			if(debug_divider == DEBUG_DIVISION){
     874:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <debug_divider>
     878:	8f 37       	cpi	r24, 0x7F	; 127
     87a:	31 f5       	brne	.+76     	; 0x8c8 <main_sof_action+0xc6>
				debug_divider = 0;
     87c:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <debug_divider>
				cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     880:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <cntCntCnt>
     884:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <cntCntCnt+0x1>
     888:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     88c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ec 57       	subi	r30, 0x7C	; 124
     896:	f3 4d       	sbci	r31, 0xD3	; 211
     898:	80 83       	st	Z, r24
     89a:	91 83       	std	Z+1, r25	; 0x01
				if(cntCntCnt == (CNT_CNT_MAX - 1)){
     89c:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <cntCntCnt>
     8a0:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <cntCntCnt+0x1>
     8a4:	8f 3f       	cpi	r24, 0xFF	; 255
     8a6:	91 05       	cpc	r25, r1
     8a8:	29 f4       	brne	.+10     	; 0x8b4 <main_sof_action+0xb2>
					cntCntCnt = 0;
     8aa:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <cntCntCnt>
     8ae:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <cntCntCnt+0x1>
     8b2:	0f c0       	rjmp	.+30     	; 0x8d2 <main_sof_action+0xd0>
				}
				else cntCntCnt++;
     8b4:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <cntCntCnt>
     8b8:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <cntCntCnt+0x1>
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <cntCntCnt>
     8c2:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <cntCntCnt+0x1>
     8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <main_sof_action+0xd0>
			}
			else debug_divider++;
     8c8:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <debug_divider>
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	80 93 cd 20 	sts	0x20CD, r24	; 0x8020cd <debug_divider>
		}
	}
	
	if(debugOnNextEnd){
     8d2:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <debugOnNextEnd>
     8d6:	88 23       	and	r24, r24
     8d8:	51 f0       	breq	.+20     	; 0x8ee <main_sof_action+0xec>
		currentTrfcnt = DMA.CH0.TRFCNT;
     8da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8e2:	80 93 84 2e 	sts	0x2E84, r24	; 0x802e84 <currentTrfcnt>
     8e6:	90 93 85 2e 	sts	0x2E85, r25	; 0x802e85 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     8ea:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <debugOnNextEnd>
	}
	usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     8ee:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8f2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	27 37       	cpi	r18, 0x77	; 119
     8fa:	31 40       	sbci	r19, 0x01	; 1
     8fc:	08 f0       	brcs	.+2      	; 0x900 <main_sof_action+0xfe>
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <usb_state>
	sei();
     904:	78 94       	sei
     906:	08 95       	ret

00000908 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <main_b_vendor_enable>
	firstFrame = 1;
     90e:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], 250, iso_callback);
     912:	4b e8       	ldi	r20, 0x8B	; 139
     914:	53 e0       	ldi	r21, 0x03	; 3
     916:	6a ef       	ldi	r22, 0xFA	; 250
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	88 ea       	ldi	r24, 0xA8	; 168
     91c:	96 e2       	ldi	r25, 0x26	; 38
     91e:	ba d5       	rcall	.+2932   	; 0x1494 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], 250, iso_callback2);
     920:	4c e9       	ldi	r20, 0x9C	; 156
     922:	53 e0       	ldi	r21, 0x03	; 3
     924:	6a ef       	ldi	r22, 0xFA	; 250
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	82 ea       	ldi	r24, 0xA2	; 162
     92a:	97 e2       	ldi	r25, 0x27	; 39
     92c:	bf d5       	rcall	.+2942   	; 0x14ac <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], 250, iso_callback3);
     92e:	4d ea       	ldi	r20, 0xAD	; 173
     930:	53 e0       	ldi	r21, 0x03	; 3
     932:	6a ef       	ldi	r22, 0xFA	; 250
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	8c e9       	ldi	r24, 0x9C	; 156
     938:	98 e2       	ldi	r25, 0x28	; 40
     93a:	c4 d5       	rcall	.+2952   	; 0x14c4 <udi_vendor_iso_in_run3>
	return true;
}
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	08 95       	ret

00000940 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     940:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <main_b_vendor_enable>
     944:	08 95       	ret

00000946 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	08 95       	ret

0000094a <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	08 95       	ret

0000094e <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     94e:	e0 e0       	ldi	r30, 0x00	; 0
     950:	f2 e0       	ldi	r31, 0x02	; 2
     952:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     954:	98 2f       	mov	r25, r24
     956:	9c 71       	andi	r25, 0x1C	; 28
     958:	93 68       	ori	r25, 0x83	; 131
     95a:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     95c:	88 23       	and	r24, r24
     95e:	1c f4       	brge	.+6      	; 0x966 <tiny_adc_ch0setup+0x18>
     960:	90 e1       	ldi	r25, 0x10	; 16
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	02 c0       	rjmp	.+4      	; 0x96a <tiny_adc_ch0setup+0x1c>
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	89 2b       	or	r24, r25
     96c:	e0 e0       	ldi	r30, 0x00	; 0
     96e:	f2 e0       	ldi	r31, 0x02	; 2
     970:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     972:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     974:	16 a2       	std	Z+38, r1	; 0x26
     976:	08 95       	ret

00000978 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     978:	e0 e0       	ldi	r30, 0x00	; 0
     97a:	f2 e0       	ldi	r31, 0x02	; 2
     97c:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     97e:	83 68       	ori	r24, 0x83	; 131
     980:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     982:	80 e1       	ldi	r24, 0x10	; 16
     984:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_HI_gc;
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	82 ab       	std	Z+50, r24	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     98a:	16 aa       	std	Z+54, r1	; 0x36
     98c:	08 95       	ret

0000098e <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f2 e0       	ldi	r31, 0x02	; 2
     992:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     994:	83 e8       	ldi	r24, 0x83	; 131
     996:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     998:	8f e2       	ldi	r24, 0x2F	; 47
     99a:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     99c:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     99e:	16 a6       	std	Z+46, r1	; 0x2e
     9a0:	08 95       	ret

000009a2 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     9a2:	aa ec       	ldi	r26, 0xCA	; 202
     9a4:	b1 e0       	ldi	r27, 0x01	; 1
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     9aa:	e8 2f       	mov	r30, r24
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     9b0:	1c 92       	st	X, r1

	return( result );
}
     9b2:	08 95       	ret

000009b4 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     9b8:	e0 e7       	ldi	r30, 0x70	; 112
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	91 81       	ldd	r25, Z+1	; 0x01
     9be:	9d 7f       	andi	r25, 0xFD	; 253
     9c0:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     9c2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     9c6:	62 30       	cpi	r22, 0x02	; 2
     9c8:	31 f1       	breq	.+76     	; 0xa16 <tiny_adc_setup+0x62>
     9ca:	e0 e0       	ldi	r30, 0x00	; 0
     9cc:	f2 e0       	ldi	r31, 0x02	; 2
     9ce:	9c e1       	ldi	r25, 0x1C	; 28
     9d0:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     9d2:	90 e4       	ldi	r25, 0x40	; 64
     9d4:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     9d6:	81 11       	cpse	r24, r1
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <tiny_adc_setup+0x2a>
     9da:	80 e4       	ldi	r24, 0x40	; 64
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <tiny_adc_setup+0x2c>
     9de:	80 ec       	ldi	r24, 0xC0	; 192
     9e0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     9e4:	61 30       	cpi	r22, 0x01	; 1
     9e6:	11 f0       	breq	.+4      	; 0x9ec <tiny_adc_setup+0x38>
     9e8:	83 e0       	ldi	r24, 0x03	; 3
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <tiny_adc_setup+0x3a>
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	c0 e0       	ldi	r28, 0x00	; 0
     9f0:	d2 e0       	ldi	r29, 0x02	; 2
     9f2:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     9f4:	80 e2       	ldi	r24, 0x20	; 32
     9f6:	d5 df       	rcall	.-86     	; 0x9a2 <ReadCalibrationByte>
     9f8:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     9fa:	81 e2       	ldi	r24, 0x21	; 33
     9fc:	d2 df       	rcall	.-92     	; 0x9a2 <ReadCalibrationByte>
     9fe:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     a00:	18 8e       	std	Y+24, r1	; 0x18
     a02:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     a08:	c2 df       	rcall	.-124    	; 0x98e <tiny_adc_pid_setup>
     a0a:	0e c0       	rjmp	.+28     	; 0xa28 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a0c:	80 ec       	ldi	r24, 0xC0	; 192
     a0e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	ec cf       	rjmp	.-40     	; 0x9ee <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a16:	e0 e0       	ldi	r30, 0x00	; 0
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	9e e1       	ldi	r25, 0x1E	; 30
     a1c:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a1e:	90 e4       	ldi	r25, 0x40	; 64
     a20:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a22:	81 11       	cpse	r24, r1
     a24:	f3 cf       	rjmp	.-26     	; 0xa0c <tiny_adc_setup+0x58>
     a26:	d9 cf       	rjmp	.-78     	; 0x9da <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	08 95       	ret

00000a2e <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     a48:	8f 91       	pop	r24
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     a58:	e0 e7       	ldi	r30, 0x70	; 112
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	82 81       	ldd	r24, Z+2	; 0x02
     a5e:	8b 7f       	andi	r24, 0xFB	; 251
     a60:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     a62:	c0 e2       	ldi	r28, 0x20	; 32
     a64:	d3 e0       	ldi	r29, 0x03	; 3
     a66:	8d e0       	ldi	r24, 0x0D	; 13
     a68:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     a6a:	80 e4       	ldi	r24, 0x40	; 64
     a6c:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     a6e:	89 e0       	ldi	r24, 0x09	; 9
     a70:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     a72:	83 e3       	ldi	r24, 0x33	; 51
     a74:	96 df       	rcall	.-212    	; 0x9a2 <ReadCalibrationByte>
     a76:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     a78:	82 e3       	ldi	r24, 0x32	; 50
     a7a:	93 df       	rcall	.-218    	; 0x9a2 <ReadCalibrationByte>
     a7c:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     a7e:	87 e3       	ldi	r24, 0x37	; 55
     a80:	90 df       	rcall	.-224    	; 0x9a2 <ReadCalibrationByte>
     a82:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     a84:	86 e3       	ldi	r24, 0x36	; 54
     a86:	8d df       	rcall	.-230    	; 0x9a2 <ReadCalibrationByte>
     a88:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     a8a:	e0 e2       	ldi	r30, 0x20	; 32
     a8c:	f6 e0       	ldi	r31, 0x06	; 6
     a8e:	80 81       	ld	r24, Z
     a90:	83 60       	ori	r24, 0x03	; 3
     a92:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     a94:	14 82       	std	Z+4, r1	; 0x04
	
	

     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     a9c:	e0 e7       	ldi	r30, 0x70	; 112
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	8e 7f       	andi	r24, 0xFE	; 254
     aa4:	80 83       	st	Z, r24
     aa6:	83 e8       	ldi	r24, 0x83	; 131
     aa8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     aac:	08 95       	ret

00000aae <tiny_dma_flush>:
     aae:	e0 e0       	ldi	r30, 0x00	; 0
     ab0:	f1 e0       	ldi	r31, 0x01	; 1
     ab2:	10 8a       	std	Z+16, r1	; 0x10
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	80 8b       	std	Z+16, r24	; 0x10
     ab8:	10 a2       	std	Z+32, r1	; 0x20
     aba:	80 a3       	std	Z+32, r24	; 0x20
     abc:	10 aa       	std	Z+48, r1	; 0x30
     abe:	80 ab       	std	Z+48, r24	; 0x30
     ac0:	e0 e4       	ldi	r30, 0x40	; 64
     ac2:	f1 e0       	ldi	r31, 0x01	; 1
     ac4:	10 82       	st	Z, r1
     ac6:	80 83       	st	Z, r24
     ac8:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <b1_state>
     acc:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <b2_state>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <usb_state>
     ad6:	08 95       	ret

00000ad8 <tiny_dma_set_mode_0>:
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	f8 94       	cli
     ade:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     ae2:	e5 df       	rcall	.-54     	; 0xaae <tiny_dma_flush>
     ae4:	c0 e0       	ldi	r28, 0x00	; 0
     ae6:	d1 e0       	ldi	r29, 0x01	; 1
     ae8:	1e aa       	std	Y+54, r1	; 0x36
     aea:	84 e2       	ldi	r24, 0x24	; 36
     aec:	88 ab       	std	Y+48, r24	; 0x30
     aee:	19 aa       	std	Y+49, r1	; 0x31
     af0:	49 e5       	ldi	r20, 0x59	; 89
     af2:	4a ab       	std	Y+50, r20	; 0x32
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	9b ab       	std	Y+51, r25	; 0x33
     af8:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     afc:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     b00:	2c ab       	std	Y+52, r18	; 0x34
     b02:	3d ab       	std	Y+53, r19	; 0x35
     b04:	28 ea       	ldi	r18, 0xA8	; 168
     b06:	34 e2       	ldi	r19, 0x24	; 36
     b08:	28 af       	std	Y+56, r18	; 0x38
     b0a:	39 af       	std	Y+57, r19	; 0x39
     b0c:	1a ae       	std	Y+58, r1	; 0x3a
     b0e:	2b e3       	ldi	r18, 0x3B	; 59
     b10:	2c af       	std	Y+60, r18	; 0x3c
     b12:	23 e0       	ldi	r18, 0x03	; 3
     b14:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b18:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b1c:	38 a9       	ldd	r19, Y+48	; 0x30
     b1e:	30 68       	ori	r19, 0x80	; 128
     b20:	38 ab       	std	Y+48, r19	; 0x30
     b22:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b26:	e0 e4       	ldi	r30, 0x40	; 64
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	80 83       	st	Z, r24
     b2c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b30:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b34:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b38:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     b3c:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     b40:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b44:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     b48:	48 e9       	ldi	r20, 0x98	; 152
     b4a:	52 e2       	ldi	r21, 0x22	; 34
     b4c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b50:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b54:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b58:	39 e3       	ldi	r19, 0x39	; 57
     b5a:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b5e:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b62:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b66:	20 81       	ld	r18, Z
     b68:	20 68       	ori	r18, 0x80	; 128
     b6a:	20 83       	st	Z, r18
     b6c:	18 8a       	std	Y+16, r1	; 0x10
     b6e:	20 e4       	ldi	r18, 0x40	; 64
     b70:	28 8b       	std	Y+16, r18	; 0x10
     b72:	88 8b       	std	Y+16, r24	; 0x10
     b74:	99 8b       	std	Y+17, r25	; 0x11
     b76:	25 e9       	ldi	r18, 0x95	; 149
     b78:	2a 8b       	std	Y+18, r18	; 0x12
     b7a:	20 e1       	ldi	r18, 0x10	; 16
     b7c:	2b 8b       	std	Y+19, r18	; 0x13
     b7e:	2e ee       	ldi	r18, 0xEE	; 238
     b80:	32 e0       	ldi	r19, 0x02	; 2
     b82:	2c 8b       	std	Y+20, r18	; 0x14
     b84:	3d 8b       	std	Y+21, r19	; 0x15
     b86:	88 8f       	std	Y+24, r24	; 0x18
     b88:	99 8f       	std	Y+25, r25	; 0x19
     b8a:	1a 8e       	std	Y+26, r1	; 0x1a
     b8c:	88 ea       	ldi	r24, 0xA8	; 168
     b8e:	96 e2       	ldi	r25, 0x26	; 38
     b90:	8c 8f       	std	Y+28, r24	; 0x1c
     b92:	9d 8f       	std	Y+29, r25	; 0x1d
     b94:	1e 8e       	std	Y+30, r1	; 0x1e
     b96:	68 ec       	ldi	r22, 0xC8	; 200
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	84 ef       	ldi	r24, 0xF4	; 244
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	a1 dd       	rcall	.-1214   	; 0x6e2 <tiny_calibration_synchronise_phase>
     ba0:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <b1_state>
     ba4:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <b2_state>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <usb_state>
     bae:	2f ef       	ldi	r18, 0xFF	; 255
     bb0:	3f ef       	ldi	r19, 0xFF	; 255
     bb2:	20 93 07 20 	sts	0x2007, r18	; 0x802007 <median_TRFCNT>
     bb6:	30 93 08 20 	sts	0x2008, r19	; 0x802008 <median_TRFCNT+0x1>
     bba:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     bbe:	88 89       	ldd	r24, Y+16	; 0x10
     bc0:	80 68       	ori	r24, 0x80	; 128
     bc2:	88 8b       	std	Y+16, r24	; 0x10
     bc4:	78 94       	sei
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <tiny_dma_set_mode_1>:
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
     bd6:	6b df       	rcall	.-298    	; 0xaae <tiny_dma_flush>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	10 aa       	std	Z+48, r1	; 0x30
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	80 ab       	std	Z+48, r24	; 0x30
     be2:	94 e0       	ldi	r25, 0x04	; 4
     be4:	90 ab       	std	Z+48, r25	; 0x30
     be6:	11 aa       	std	Z+49, r1	; 0x31
     be8:	12 aa       	std	Z+50, r1	; 0x32
     bea:	5b e4       	ldi	r21, 0x4B	; 75
     bec:	53 ab       	std	Z+51, r21	; 0x33
     bee:	14 aa       	std	Z+52, r1	; 0x34
     bf0:	15 aa       	std	Z+53, r1	; 0x35
     bf2:	16 aa       	std	Z+54, r1	; 0x36
     bf4:	2a e0       	ldi	r18, 0x0A	; 10
     bf6:	30 e2       	ldi	r19, 0x20	; 32
     bf8:	20 af       	std	Z+56, r18	; 0x38
     bfa:	31 af       	std	Z+57, r19	; 0x39
     bfc:	12 ae       	std	Z+58, r1	; 0x3a
     bfe:	40 ea       	ldi	r20, 0xA0	; 160
     c00:	44 af       	std	Z+60, r20	; 0x3c
     c02:	38 e0       	ldi	r19, 0x08	; 8
     c04:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c08:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c0c:	80 a9       	ldd	r24, Z+48	; 0x30
     c0e:	80 6a       	ori	r24, 0xA0	; 160
     c10:	80 ab       	std	Z+48, r24	; 0x30
     c12:	85 e5       	ldi	r24, 0x55	; 85
     c14:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     c18:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c1c:	a0 e4       	ldi	r26, 0x40	; 64
     c1e:	b1 e0       	ldi	r27, 0x01	; 1
     c20:	d4 e2       	ldi	r29, 0x24	; 36
     c22:	dc 93       	st	X, r29
     c24:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c28:	89 e5       	ldi	r24, 0x59	; 89
     c2a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c2e:	c2 e0       	ldi	r28, 0x02	; 2
     c30:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c34:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     c38:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     c3c:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c40:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c44:	68 ea       	ldi	r22, 0xA8	; 168
     c46:	74 e2       	ldi	r23, 0x24	; 36
     c48:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c4c:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c50:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c54:	8b e3       	ldi	r24, 0x3B	; 59
     c56:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c60:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c64:	2c 91       	ld	r18, X
     c66:	20 68       	ori	r18, 0x80	; 128
     c68:	2c 93       	st	X, r18
     c6a:	90 8b       	std	Z+16, r25	; 0x10
     c6c:	81 8b       	std	Z+17, r24	; 0x11
     c6e:	a1 e9       	ldi	r26, 0x91	; 145
     c70:	a2 8b       	std	Z+18, r26	; 0x12
     c72:	20 e1       	ldi	r18, 0x10	; 16
     c74:	23 8b       	std	Z+19, r18	; 0x13
     c76:	67 e7       	ldi	r22, 0x77	; 119
     c78:	71 e0       	ldi	r23, 0x01	; 1
     c7a:	64 8b       	std	Z+20, r22	; 0x14
     c7c:	75 8b       	std	Z+21, r23	; 0x15
     c7e:	d0 8f       	std	Z+24, r29	; 0x18
     c80:	c1 8f       	std	Z+25, r28	; 0x19
     c82:	12 8e       	std	Z+26, r1	; 0x1a
     c84:	c8 ea       	ldi	r28, 0xA8	; 168
     c86:	d6 e2       	ldi	r29, 0x26	; 38
     c88:	c4 8f       	std	Z+28, r28	; 0x1c
     c8a:	d5 8f       	std	Z+29, r29	; 0x1d
     c8c:	16 8e       	std	Z+30, r1	; 0x1e
     c8e:	20 89       	ldd	r18, Z+16	; 0x10
     c90:	20 68       	ori	r18, 0x80	; 128
     c92:	20 8b       	std	Z+16, r18	; 0x10
     c94:	90 a3       	std	Z+32, r25	; 0x20
     c96:	81 a3       	std	Z+33, r24	; 0x21
     c98:	a2 a3       	std	Z+34, r26	; 0x22
     c9a:	53 a3       	std	Z+35, r21	; 0x23
     c9c:	64 a3       	std	Z+36, r22	; 0x24
     c9e:	75 a3       	std	Z+37, r23	; 0x25
     ca0:	40 a7       	std	Z+40, r20	; 0x28
     ca2:	31 a7       	std	Z+41, r19	; 0x29
     ca4:	12 a6       	std	Z+42, r1	; 0x2a
     ca6:	8f e1       	ldi	r24, 0x1F	; 31
     ca8:	98 e2       	ldi	r25, 0x28	; 40
     caa:	84 a7       	std	Z+44, r24	; 0x2c
     cac:	95 a7       	std	Z+45, r25	; 0x2d
     cae:	16 a6       	std	Z+46, r1	; 0x2e
     cb0:	80 a1       	ldd	r24, Z+32	; 0x20
     cb2:	80 68       	ori	r24, 0x80	; 128
     cb4:	80 a3       	std	Z+32, r24	; 0x20
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <tiny_dma_set_mode_2>:
     cbc:	cf 93       	push	r28
     cbe:	f8 94       	cli
     cc0:	c2 e0       	ldi	r28, 0x02	; 2
     cc2:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     cc6:	f3 de       	rcall	.-538    	; 0xaae <tiny_dma_flush>
     cc8:	e0 e0       	ldi	r30, 0x00	; 0
     cca:	f1 e0       	ldi	r31, 0x01	; 1
     ccc:	16 aa       	std	Z+54, r1	; 0x36
     cce:	94 e2       	ldi	r25, 0x24	; 36
     cd0:	90 ab       	std	Z+48, r25	; 0x30
     cd2:	11 aa       	std	Z+49, r1	; 0x31
     cd4:	39 e5       	ldi	r19, 0x59	; 89
     cd6:	32 ab       	std	Z+50, r19	; 0x32
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	83 ab       	std	Z+51, r24	; 0x33
     cdc:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     ce0:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     ce4:	44 ab       	std	Z+52, r20	; 0x34
     ce6:	55 ab       	std	Z+53, r21	; 0x35
     ce8:	48 e9       	ldi	r20, 0x98	; 152
     cea:	52 e2       	ldi	r21, 0x22	; 34
     cec:	40 af       	std	Z+56, r20	; 0x38
     cee:	51 af       	std	Z+57, r21	; 0x39
     cf0:	12 ae       	std	Z+58, r1	; 0x3a
     cf2:	29 e3       	ldi	r18, 0x39	; 57
     cf4:	24 af       	std	Z+60, r18	; 0x3c
     cf6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     cfa:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     cfe:	20 a9       	ldd	r18, Z+48	; 0x30
     d00:	20 68       	ori	r18, 0x80	; 128
     d02:	20 ab       	std	Z+48, r18	; 0x30
     d04:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     d08:	a0 e4       	ldi	r26, 0x40	; 64
     d0a:	b1 e0       	ldi	r27, 0x01	; 1
     d0c:	9c 93       	st	X, r25
     d0e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d12:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     d16:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d1a:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     d1e:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     d22:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d26:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     d2a:	28 ea       	ldi	r18, 0xA8	; 168
     d2c:	34 e2       	ldi	r19, 0x24	; 36
     d2e:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d32:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d36:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d3a:	2b e3       	ldi	r18, 0x3B	; 59
     d3c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d40:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d44:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d48:	2c 91       	ld	r18, X
     d4a:	20 68       	ori	r18, 0x80	; 128
     d4c:	2c 93       	st	X, r18
     d4e:	54 e0       	ldi	r21, 0x04	; 4
     d50:	50 8b       	std	Z+16, r21	; 0x10
     d52:	81 8b       	std	Z+17, r24	; 0x11
     d54:	41 e9       	ldi	r20, 0x91	; 145
     d56:	42 8b       	std	Z+18, r20	; 0x12
     d58:	20 e1       	ldi	r18, 0x10	; 16
     d5a:	23 8b       	std	Z+19, r18	; 0x13
     d5c:	27 e7       	ldi	r18, 0x77	; 119
     d5e:	31 e0       	ldi	r19, 0x01	; 1
     d60:	24 8b       	std	Z+20, r18	; 0x14
     d62:	35 8b       	std	Z+21, r19	; 0x15
     d64:	90 8f       	std	Z+24, r25	; 0x18
     d66:	c1 8f       	std	Z+25, r28	; 0x19
     d68:	12 8e       	std	Z+26, r1	; 0x1a
     d6a:	68 ea       	ldi	r22, 0xA8	; 168
     d6c:	76 e2       	ldi	r23, 0x26	; 38
     d6e:	64 8f       	std	Z+28, r22	; 0x1c
     d70:	75 8f       	std	Z+29, r23	; 0x1d
     d72:	16 8e       	std	Z+30, r1	; 0x1e
     d74:	90 89       	ldd	r25, Z+16	; 0x10
     d76:	90 68       	ori	r25, 0x80	; 128
     d78:	90 8b       	std	Z+16, r25	; 0x10
     d7a:	50 a3       	std	Z+32, r21	; 0x20
     d7c:	81 a3       	std	Z+33, r24	; 0x21
     d7e:	42 a3       	std	Z+34, r20	; 0x22
     d80:	82 e1       	ldi	r24, 0x12	; 18
     d82:	83 a3       	std	Z+35, r24	; 0x23
     d84:	24 a3       	std	Z+36, r18	; 0x24
     d86:	35 a3       	std	Z+37, r19	; 0x25
     d88:	84 e3       	ldi	r24, 0x34	; 52
     d8a:	80 a7       	std	Z+40, r24	; 0x28
     d8c:	c1 a7       	std	Z+41, r28	; 0x29
     d8e:	12 a6       	std	Z+42, r1	; 0x2a
     d90:	8f e1       	ldi	r24, 0x1F	; 31
     d92:	98 e2       	ldi	r25, 0x28	; 40
     d94:	84 a7       	std	Z+44, r24	; 0x2c
     d96:	95 a7       	std	Z+45, r25	; 0x2d
     d98:	16 a6       	std	Z+46, r1	; 0x2e
     d9a:	80 a1       	ldd	r24, Z+32	; 0x20
     d9c:	80 68       	ori	r24, 0x80	; 128
     d9e:	80 a3       	std	Z+32, r24	; 0x20
     da0:	78 94       	sei
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <tiny_dma_set_mode_3>:
     da6:	cf 93       	push	r28
     da8:	c3 e0       	ldi	r28, 0x03	; 3
     daa:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     dae:	7f de       	rcall	.-770    	; 0xaae <tiny_dma_flush>
     db0:	e0 e0       	ldi	r30, 0x00	; 0
     db2:	f1 e0       	ldi	r31, 0x01	; 1
     db4:	10 a2       	std	Z+32, r1	; 0x20
     db6:	50 e4       	ldi	r21, 0x40	; 64
     db8:	50 a3       	std	Z+32, r21	; 0x20
     dba:	44 e0       	ldi	r20, 0x04	; 4
     dbc:	40 a3       	std	Z+32, r20	; 0x20
     dbe:	11 a2       	std	Z+33, r1	; 0x21
     dc0:	12 a2       	std	Z+34, r1	; 0x22
     dc2:	3b e4       	ldi	r19, 0x4B	; 75
     dc4:	33 a3       	std	Z+35, r19	; 0x23
     dc6:	14 a2       	std	Z+36, r1	; 0x24
     dc8:	15 a2       	std	Z+37, r1	; 0x25
     dca:	16 a2       	std	Z+38, r1	; 0x26
     dcc:	8a e0       	ldi	r24, 0x0A	; 10
     dce:	90 e2       	ldi	r25, 0x20	; 32
     dd0:	80 a7       	std	Z+40, r24	; 0x28
     dd2:	91 a7       	std	Z+41, r25	; 0x29
     dd4:	12 a6       	std	Z+42, r1	; 0x2a
     dd6:	20 ea       	ldi	r18, 0xA0	; 160
     dd8:	24 a7       	std	Z+44, r18	; 0x2c
     dda:	98 e0       	ldi	r25, 0x08	; 8
     ddc:	95 a7       	std	Z+45, r25	; 0x2d
     dde:	16 a6       	std	Z+46, r1	; 0x2e
     de0:	80 a1       	ldd	r24, Z+32	; 0x20
     de2:	80 6a       	ori	r24, 0xA0	; 160
     de4:	80 a3       	std	Z+32, r24	; 0x20
     de6:	85 e5       	ldi	r24, 0x55	; 85
     de8:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     dec:	16 aa       	std	Z+54, r1	; 0x36
     dee:	74 e2       	ldi	r23, 0x24	; 36
     df0:	70 ab       	std	Z+48, r23	; 0x30
     df2:	11 aa       	std	Z+49, r1	; 0x31
     df4:	69 e5       	ldi	r22, 0x59	; 89
     df6:	62 ab       	std	Z+50, r22	; 0x32
     df8:	c3 ab       	std	Z+51, r28	; 0x33
     dfa:	a0 91 0d 20 	lds	r26, 0x200D	; 0x80200d <dacBuf_len>
     dfe:	b0 91 0e 20 	lds	r27, 0x200E	; 0x80200e <dacBuf_len+0x1>
     e02:	a4 ab       	std	Z+52, r26	; 0x34
     e04:	b5 ab       	std	Z+53, r27	; 0x35
     e06:	a8 e9       	ldi	r26, 0x98	; 152
     e08:	b2 e2       	ldi	r27, 0x22	; 34
     e0a:	a0 af       	std	Z+56, r26	; 0x38
     e0c:	b1 af       	std	Z+57, r27	; 0x39
     e0e:	12 ae       	std	Z+58, r1	; 0x3a
     e10:	89 e3       	ldi	r24, 0x39	; 57
     e12:	84 af       	std	Z+60, r24	; 0x3c
     e14:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     e18:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     e1c:	80 a9       	ldd	r24, Z+48	; 0x30
     e1e:	80 68       	ori	r24, 0x80	; 128
     e20:	80 ab       	std	Z+48, r24	; 0x30
     e22:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     e26:	a0 e4       	ldi	r26, 0x40	; 64
     e28:	b1 e0       	ldi	r27, 0x01	; 1
     e2a:	7c 93       	st	X, r23
     e2c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e30:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e3a:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     e3e:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     e42:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     e46:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     e4a:	68 ea       	ldi	r22, 0xA8	; 168
     e4c:	74 e2       	ldi	r23, 0x24	; 36
     e4e:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e52:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e56:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e5a:	8b e3       	ldi	r24, 0x3B	; 59
     e5c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e60:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e64:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e68:	8c 91       	ld	r24, X
     e6a:	80 68       	ori	r24, 0x80	; 128
     e6c:	8c 93       	st	X, r24
     e6e:	10 8a       	std	Z+16, r1	; 0x10
     e70:	50 8b       	std	Z+16, r21	; 0x10
     e72:	40 8b       	std	Z+16, r20	; 0x10
     e74:	c1 8b       	std	Z+17, r28	; 0x11
     e76:	81 e9       	ldi	r24, 0x91	; 145
     e78:	82 8b       	std	Z+18, r24	; 0x12
     e7a:	33 8b       	std	Z+19, r19	; 0x13
     e7c:	47 e7       	ldi	r20, 0x77	; 119
     e7e:	51 e0       	ldi	r21, 0x01	; 1
     e80:	44 8b       	std	Z+20, r20	; 0x14
     e82:	55 8b       	std	Z+21, r21	; 0x15
     e84:	20 8f       	std	Z+24, r18	; 0x18
     e86:	91 8f       	std	Z+25, r25	; 0x19
     e88:	12 8e       	std	Z+26, r1	; 0x1a
     e8a:	88 ea       	ldi	r24, 0xA8	; 168
     e8c:	96 e2       	ldi	r25, 0x26	; 38
     e8e:	84 8f       	std	Z+28, r24	; 0x1c
     e90:	95 8f       	std	Z+29, r25	; 0x1d
     e92:	16 8e       	std	Z+30, r1	; 0x1e
     e94:	80 89       	ldd	r24, Z+16	; 0x10
     e96:	80 68       	ori	r24, 0x80	; 128
     e98:	80 8b       	std	Z+16, r24	; 0x10
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <tiny_dma_set_mode_4>:
     e9e:	cf 93       	push	r28
     ea0:	c4 e0       	ldi	r28, 0x04	; 4
     ea2:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     ea6:	03 de       	rcall	.-1018   	; 0xaae <tiny_dma_flush>
     ea8:	e0 e0       	ldi	r30, 0x00	; 0
     eaa:	f1 e0       	ldi	r31, 0x01	; 1
     eac:	10 a2       	std	Z+32, r1	; 0x20
     eae:	80 e4       	ldi	r24, 0x40	; 64
     eb0:	80 a3       	std	Z+32, r24	; 0x20
     eb2:	c0 a3       	std	Z+32, r28	; 0x20
     eb4:	11 a2       	std	Z+33, r1	; 0x21
     eb6:	12 a2       	std	Z+34, r1	; 0x22
     eb8:	4b e4       	ldi	r20, 0x4B	; 75
     eba:	43 a3       	std	Z+35, r20	; 0x23
     ebc:	14 a2       	std	Z+36, r1	; 0x24
     ebe:	15 a2       	std	Z+37, r1	; 0x25
     ec0:	16 a2       	std	Z+38, r1	; 0x26
     ec2:	8a e0       	ldi	r24, 0x0A	; 10
     ec4:	90 e2       	ldi	r25, 0x20	; 32
     ec6:	80 a7       	std	Z+40, r24	; 0x28
     ec8:	91 a7       	std	Z+41, r25	; 0x29
     eca:	12 a6       	std	Z+42, r1	; 0x2a
     ecc:	60 ea       	ldi	r22, 0xA0	; 160
     ece:	64 a7       	std	Z+44, r22	; 0x2c
     ed0:	88 e0       	ldi	r24, 0x08	; 8
     ed2:	85 a7       	std	Z+45, r24	; 0x2d
     ed4:	16 a6       	std	Z+46, r1	; 0x2e
     ed6:	90 a1       	ldd	r25, Z+32	; 0x20
     ed8:	90 6a       	ori	r25, 0xA0	; 160
     eda:	90 a3       	std	Z+32, r25	; 0x20
     edc:	95 e5       	ldi	r25, 0x55	; 85
     ede:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     ee2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ee6:	a0 e4       	ldi	r26, 0x40	; 64
     ee8:	b1 e0       	ldi	r27, 0x01	; 1
     eea:	94 e2       	ldi	r25, 0x24	; 36
     eec:	9c 93       	st	X, r25
     eee:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ef2:	99 e5       	ldi	r25, 0x59	; 89
     ef4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     efe:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     f02:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     f06:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f0a:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f0e:	28 ea       	ldi	r18, 0xA8	; 168
     f10:	34 e2       	ldi	r19, 0x24	; 36
     f12:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f16:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f1a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f1e:	9b e3       	ldi	r25, 0x3B	; 59
     f20:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f24:	93 e0       	ldi	r25, 0x03	; 3
     f26:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f2a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f2e:	2c 91       	ld	r18, X
     f30:	20 68       	ori	r18, 0x80	; 128
     f32:	2c 93       	st	X, r18
     f34:	c0 8b       	std	Z+16, r28	; 0x10
     f36:	91 8b       	std	Z+17, r25	; 0x11
     f38:	31 e9       	ldi	r19, 0x91	; 145
     f3a:	32 8b       	std	Z+18, r19	; 0x12
     f3c:	43 8b       	std	Z+19, r20	; 0x13
     f3e:	47 e7       	ldi	r20, 0x77	; 119
     f40:	51 e0       	ldi	r21, 0x01	; 1
     f42:	44 8b       	std	Z+20, r20	; 0x14
     f44:	55 8b       	std	Z+21, r21	; 0x15
     f46:	60 8f       	std	Z+24, r22	; 0x18
     f48:	81 8f       	std	Z+25, r24	; 0x19
     f4a:	12 8e       	std	Z+26, r1	; 0x1a
     f4c:	68 ea       	ldi	r22, 0xA8	; 168
     f4e:	76 e2       	ldi	r23, 0x26	; 38
     f50:	64 8f       	std	Z+28, r22	; 0x1c
     f52:	75 8f       	std	Z+29, r23	; 0x1d
     f54:	16 8e       	std	Z+30, r1	; 0x1e
     f56:	20 89       	ldd	r18, Z+16	; 0x10
     f58:	20 68       	ori	r18, 0x80	; 128
     f5a:	20 8b       	std	Z+16, r18	; 0x10
     f5c:	c0 ab       	std	Z+48, r28	; 0x30
     f5e:	91 ab       	std	Z+49, r25	; 0x31
     f60:	32 ab       	std	Z+50, r19	; 0x32
     f62:	9a e4       	ldi	r25, 0x4A	; 74
     f64:	93 ab       	std	Z+51, r25	; 0x33
     f66:	44 ab       	std	Z+52, r20	; 0x34
     f68:	55 ab       	std	Z+53, r21	; 0x35
     f6a:	93 ec       	ldi	r25, 0xC3	; 195
     f6c:	90 af       	std	Z+56, r25	; 0x38
     f6e:	81 af       	std	Z+57, r24	; 0x39
     f70:	12 ae       	std	Z+58, r1	; 0x3a
     f72:	8f e1       	ldi	r24, 0x1F	; 31
     f74:	98 e2       	ldi	r25, 0x28	; 40
     f76:	84 af       	std	Z+60, r24	; 0x3c
     f78:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f7c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f80:	80 a9       	ldd	r24, Z+48	; 0x30
     f82:	80 68       	ori	r24, 0x80	; 128
     f84:	80 ab       	std	Z+48, r24	; 0x30
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <tiny_dma_set_mode_5>:
     f8a:	85 e0       	ldi	r24, 0x05	; 5
     f8c:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
     f90:	8e dd       	rcall	.-1252   	; 0xaae <tiny_dma_flush>
     f92:	e0 e0       	ldi	r30, 0x00	; 0
     f94:	f1 e0       	ldi	r31, 0x01	; 1
     f96:	16 aa       	std	Z+54, r1	; 0x36
     f98:	34 e2       	ldi	r19, 0x24	; 36
     f9a:	30 ab       	std	Z+48, r19	; 0x30
     f9c:	11 aa       	std	Z+49, r1	; 0x31
     f9e:	29 e5       	ldi	r18, 0x59	; 89
     fa0:	22 ab       	std	Z+50, r18	; 0x32
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	83 ab       	std	Z+51, r24	; 0x33
     fa6:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     faa:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     fae:	44 ab       	std	Z+52, r20	; 0x34
     fb0:	55 ab       	std	Z+53, r21	; 0x35
     fb2:	48 e9       	ldi	r20, 0x98	; 152
     fb4:	52 e2       	ldi	r21, 0x22	; 34
     fb6:	40 af       	std	Z+56, r20	; 0x38
     fb8:	51 af       	std	Z+57, r21	; 0x39
     fba:	12 ae       	std	Z+58, r1	; 0x3a
     fbc:	99 e3       	ldi	r25, 0x39	; 57
     fbe:	94 af       	std	Z+60, r25	; 0x3c
     fc0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     fc4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     fc8:	90 a9       	ldd	r25, Z+48	; 0x30
     fca:	90 68       	ori	r25, 0x80	; 128
     fcc:	90 ab       	std	Z+48, r25	; 0x30
     fce:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     fd2:	e0 e4       	ldi	r30, 0x40	; 64
     fd4:	f1 e0       	ldi	r31, 0x01	; 1
     fd6:	30 83       	st	Z, r19
     fd8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     fdc:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     fe0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     fe4:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     fe8:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     fec:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ff0:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     ff4:	28 ea       	ldi	r18, 0xA8	; 168
     ff6:	34 e2       	ldi	r19, 0x24	; 36
     ff8:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     ffc:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1000:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1004:	9b e3       	ldi	r25, 0x3B	; 59
    1006:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    100a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    100e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1012:	80 81       	ld	r24, Z
    1014:	80 68       	ori	r24, 0x80	; 128
    1016:	80 83       	st	Z, r24
    1018:	08 95       	ret

0000101a <tiny_dma_set_mode_6>:
    101a:	86 e0       	ldi	r24, 0x06	; 6
    101c:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    1020:	46 dd       	rcall	.-1396   	; 0xaae <tiny_dma_flush>
    1022:	e0 e0       	ldi	r30, 0x00	; 0
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	16 aa       	std	Z+54, r1	; 0x36
    1028:	94 e2       	ldi	r25, 0x24	; 36
    102a:	90 ab       	std	Z+48, r25	; 0x30
    102c:	11 aa       	std	Z+49, r1	; 0x31
    102e:	39 e5       	ldi	r19, 0x59	; 89
    1030:	32 ab       	std	Z+50, r19	; 0x32
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	83 ab       	std	Z+51, r24	; 0x33
    1036:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    103a:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    103e:	44 ab       	std	Z+52, r20	; 0x34
    1040:	55 ab       	std	Z+53, r21	; 0x35
    1042:	48 e9       	ldi	r20, 0x98	; 152
    1044:	52 e2       	ldi	r21, 0x22	; 34
    1046:	40 af       	std	Z+56, r20	; 0x38
    1048:	51 af       	std	Z+57, r21	; 0x39
    104a:	12 ae       	std	Z+58, r1	; 0x3a
    104c:	29 e3       	ldi	r18, 0x39	; 57
    104e:	24 af       	std	Z+60, r18	; 0x3c
    1050:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1054:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1058:	20 a9       	ldd	r18, Z+48	; 0x30
    105a:	20 68       	ori	r18, 0x80	; 128
    105c:	20 ab       	std	Z+48, r18	; 0x30
    105e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1062:	a0 e4       	ldi	r26, 0x40	; 64
    1064:	b1 e0       	ldi	r27, 0x01	; 1
    1066:	9c 93       	st	X, r25
    1068:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    106c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1070:	32 e0       	ldi	r19, 0x02	; 2
    1072:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1076:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    107a:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    107e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1082:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1086:	48 ea       	ldi	r20, 0xA8	; 168
    1088:	54 e2       	ldi	r21, 0x24	; 36
    108a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    108e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1092:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1096:	2b e3       	ldi	r18, 0x3B	; 59
    1098:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    109c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    10a0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    10a4:	2c 91       	ld	r18, X
    10a6:	20 68       	ori	r18, 0x80	; 128
    10a8:	2c 93       	st	X, r18
    10aa:	10 8a       	std	Z+16, r1	; 0x10
    10ac:	20 e4       	ldi	r18, 0x40	; 64
    10ae:	20 8b       	std	Z+16, r18	; 0x10
    10b0:	24 e0       	ldi	r18, 0x04	; 4
    10b2:	20 8b       	std	Z+16, r18	; 0x10
    10b4:	81 8b       	std	Z+17, r24	; 0x11
    10b6:	81 e9       	ldi	r24, 0x91	; 145
    10b8:	82 8b       	std	Z+18, r24	; 0x12
    10ba:	80 e1       	ldi	r24, 0x10	; 16
    10bc:	83 8b       	std	Z+19, r24	; 0x13
    10be:	4e ee       	ldi	r20, 0xEE	; 238
    10c0:	52 e0       	ldi	r21, 0x02	; 2
    10c2:	44 8b       	std	Z+20, r20	; 0x14
    10c4:	55 8b       	std	Z+21, r21	; 0x15
    10c6:	90 8f       	std	Z+24, r25	; 0x18
    10c8:	31 8f       	std	Z+25, r19	; 0x19
    10ca:	12 8e       	std	Z+26, r1	; 0x1a
    10cc:	88 ea       	ldi	r24, 0xA8	; 168
    10ce:	96 e2       	ldi	r25, 0x26	; 38
    10d0:	84 8f       	std	Z+28, r24	; 0x1c
    10d2:	95 8f       	std	Z+29, r25	; 0x1d
    10d4:	16 8e       	std	Z+30, r1	; 0x1e
    10d6:	80 89       	ldd	r24, Z+16	; 0x10
    10d8:	80 68       	ori	r24, 0x80	; 128
    10da:	80 8b       	std	Z+16, r24	; 0x10
    10dc:	08 95       	ret

000010de <tiny_dma_set_mode_7>:
    10de:	87 e0       	ldi	r24, 0x07	; 7
    10e0:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    10e4:	e4 dc       	rcall	.-1592   	; 0xaae <tiny_dma_flush>
    10e6:	e0 e0       	ldi	r30, 0x00	; 0
    10e8:	f1 e0       	ldi	r31, 0x01	; 1
    10ea:	16 aa       	std	Z+54, r1	; 0x36
    10ec:	94 e2       	ldi	r25, 0x24	; 36
    10ee:	90 ab       	std	Z+48, r25	; 0x30
    10f0:	11 aa       	std	Z+49, r1	; 0x31
    10f2:	39 e5       	ldi	r19, 0x59	; 89
    10f4:	32 ab       	std	Z+50, r19	; 0x32
    10f6:	83 e0       	ldi	r24, 0x03	; 3
    10f8:	83 ab       	std	Z+51, r24	; 0x33
    10fa:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    10fe:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1102:	44 ab       	std	Z+52, r20	; 0x34
    1104:	55 ab       	std	Z+53, r21	; 0x35
    1106:	48 e9       	ldi	r20, 0x98	; 152
    1108:	52 e2       	ldi	r21, 0x22	; 34
    110a:	40 af       	std	Z+56, r20	; 0x38
    110c:	51 af       	std	Z+57, r21	; 0x39
    110e:	12 ae       	std	Z+58, r1	; 0x3a
    1110:	29 e3       	ldi	r18, 0x39	; 57
    1112:	24 af       	std	Z+60, r18	; 0x3c
    1114:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1118:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    111c:	20 a9       	ldd	r18, Z+48	; 0x30
    111e:	20 68       	ori	r18, 0x80	; 128
    1120:	20 ab       	std	Z+48, r18	; 0x30
    1122:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1126:	a0 e4       	ldi	r26, 0x40	; 64
    1128:	b1 e0       	ldi	r27, 0x01	; 1
    112a:	9c 93       	st	X, r25
    112c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1130:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1134:	32 e0       	ldi	r19, 0x02	; 2
    1136:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    113a:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    113e:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1142:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1146:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    114a:	48 ea       	ldi	r20, 0xA8	; 168
    114c:	54 e2       	ldi	r21, 0x24	; 36
    114e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1152:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1156:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    115a:	2b e3       	ldi	r18, 0x3B	; 59
    115c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1160:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1164:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1168:	2c 91       	ld	r18, X
    116a:	20 68       	ori	r18, 0x80	; 128
    116c:	2c 93       	st	X, r18
    116e:	10 8a       	std	Z+16, r1	; 0x10
    1170:	20 e4       	ldi	r18, 0x40	; 64
    1172:	20 8b       	std	Z+16, r18	; 0x10
    1174:	25 e0       	ldi	r18, 0x05	; 5
    1176:	20 8b       	std	Z+16, r18	; 0x10
    1178:	81 8b       	std	Z+17, r24	; 0x11
    117a:	81 e9       	ldi	r24, 0x91	; 145
    117c:	82 8b       	std	Z+18, r24	; 0x12
    117e:	80 e1       	ldi	r24, 0x10	; 16
    1180:	83 8b       	std	Z+19, r24	; 0x13
    1182:	4e ee       	ldi	r20, 0xEE	; 238
    1184:	52 e0       	ldi	r21, 0x02	; 2
    1186:	44 8b       	std	Z+20, r20	; 0x14
    1188:	55 8b       	std	Z+21, r21	; 0x15
    118a:	90 8f       	std	Z+24, r25	; 0x18
    118c:	31 8f       	std	Z+25, r19	; 0x19
    118e:	12 8e       	std	Z+26, r1	; 0x1a
    1190:	88 ea       	ldi	r24, 0xA8	; 168
    1192:	96 e2       	ldi	r25, 0x26	; 38
    1194:	84 8f       	std	Z+28, r24	; 0x1c
    1196:	95 8f       	std	Z+29, r25	; 0x1d
    1198:	16 8e       	std	Z+30, r1	; 0x1e
    119a:	80 89       	ldd	r24, Z+16	; 0x10
    119c:	80 68       	ori	r24, 0x80	; 128
    119e:	80 8b       	std	Z+16, r24	; 0x10
    11a0:	08 95       	ret

000011a2 <__vector_6>:
}

ISR(DMA_CH0_vect){
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	8f 93       	push	r24
	DMA.INTFLAGS = 0x01;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
}
    11b4:	8f 91       	pop	r24
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	0f 90       	pop	r0
    11bc:	1f 90       	pop	r1
    11be:	18 95       	reti

000011c0 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    11c0:	e0 e7       	ldi	r30, 0x70	; 112
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	83 81       	ldd	r24, Z+3	; 0x03
    11c6:	8c 7f       	andi	r24, 0xFC	; 252
    11c8:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    11ca:	84 81       	ldd	r24, Z+4	; 0x04
    11cc:	8c 7f       	andi	r24, 0xFC	; 252
    11ce:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    11d0:	80 81       	ld	r24, Z
    11d2:	8d 7f       	andi	r24, 0xFD	; 253
    11d4:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    11d6:	e0 e8       	ldi	r30, 0x80	; 128
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	80 ec       	ldi	r24, 0xC0	; 192
    11dc:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    11de:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    11e0:	88 ec       	ldi	r24, 0xC8	; 200
    11e2:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    11e4:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    11e6:	a0 e0       	ldi	r26, 0x00	; 0
    11e8:	b8 e0       	ldi	r27, 0x08	; 8
    11ea:	34 e0       	ldi	r19, 0x04	; 4
    11ec:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    11ee:	23 e0       	ldi	r18, 0x03	; 3
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	2c 93       	st	X, r18
    11f4:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    11f6:	14 96       	adiw	r26, 0x04	; 4
    11f8:	1c 92       	st	X, r1
    11fa:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    11fc:	85 ed       	ldi	r24, 0xD5	; 213
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	96 96       	adiw	r26, 0x26	; 38
    1202:	8d 93       	st	X+, r24
    1204:	9c 93       	st	X, r25
    1206:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    1208:	16 96       	adiw	r26, 0x06	; 6
    120a:	1c 92       	st	X, r1
    120c:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    120e:	e0 e4       	ldi	r30, 0x40	; 64
    1210:	f8 e0       	ldi	r31, 0x08	; 8
    1212:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1214:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1216:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    1218:	86 a3       	std	Z+38, r24	; 0x26
    121a:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    121c:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    121e:	e0 e6       	ldi	r30, 0x60	; 96
    1220:	f6 e0       	ldi	r31, 0x06	; 6
    1222:	80 81       	ld	r24, Z
    1224:	80 61       	ori	r24, 0x10	; 16
    1226:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    1228:	e0 e4       	ldi	r30, 0x40	; 64
    122a:	f9 e0       	ldi	r31, 0x09	; 9
    122c:	83 e1       	ldi	r24, 0x13	; 19
    122e:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    1230:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    1236:	a6 a3       	std	Z+38, r26	; 0x26
    1238:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    123a:	10 a6       	std	Z+40, r1	; 0x28
    123c:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	80 83       	st	Z, r24
    1242:	08 95       	ret

00001244 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	ef 93       	push	r30
    125c:	ff 93       	push	r31
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	1f 92       	push	r1
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    1268:	8f ef       	ldi	r24, 0xFF	; 255
    126a:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    126e:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    1272:	87 30       	cpi	r24, 0x07	; 7
    1274:	31 f4       	brne	.+12     	; 0x1282 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    1276:	e0 e0       	ldi	r30, 0x00	; 0
    1278:	f2 e0       	ldi	r31, 0x02	; 2
    127a:	84 a5       	ldd	r24, Z+44	; 0x2c
    127c:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    127e:	95 a5       	ldd	r25, Z+45	; 0x2d
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1282:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    1286:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <PSU_target>
    128a:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    128c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1290:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	0c f4       	brge	.+2      	; 0x129c <__vector_83+0x58>
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	99 23       	and	r25, r25
    129e:	c9 f0       	breq	.+50     	; 0x12d2 <__vector_83+0x8e>
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	2a 3f       	cpi	r18, 0xFA	; 250
    12a4:	37 40       	sbci	r19, 0x07	; 7
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <__vector_83+0x66>
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	99 23       	and	r25, r25
    12ac:	91 f0       	breq	.+36     	; 0x12d2 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    12ae:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12b2:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12b6:	89 30       	cpi	r24, 0x09	; 9
    12b8:	1c f4       	brge	.+6      	; 0x12c0 <__vector_83+0x7c>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <__vector_83+0x80>
    12c0:	86 e0       	ldi	r24, 0x06	; 6
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	82 0f       	add	r24, r18
    12c6:	93 1f       	adc	r25, r19
    12c8:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    12cc:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    12d0:	23 c0       	rjmp	.+70     	; 0x1318 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    12d2:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12d6:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	8f 3f       	cpi	r24, 0xFF	; 255
    12de:	0c f0       	brlt	.+2      	; 0x12e2 <__vector_83+0x9e>
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	99 23       	and	r25, r25
    12e4:	c9 f0       	breq	.+50     	; 0x1318 <__vector_83+0xd4>
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	27 30       	cpi	r18, 0x07	; 7
    12ea:	31 05       	cpc	r19, r1
    12ec:	08 f4       	brcc	.+2      	; 0x12f0 <__vector_83+0xac>
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	99 23       	and	r25, r25
    12f2:	91 f0       	breq	.+36     	; 0x1318 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    12f4:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12f8:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12fc:	88 3f       	cpi	r24, 0xF8	; 248
    12fe:	1c f0       	brlt	.+6      	; 0x1306 <__vector_83+0xc2>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 c0       	rjmp	.+4      	; 0x130a <__vector_83+0xc6>
    1306:	86 e0       	ldi	r24, 0x06	; 6
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	48 1b       	sub	r20, r24
    130e:	59 0b       	sbc	r21, r25
    1310:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1314:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    1318:	0f 90       	pop	r0
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	ff 91       	pop	r31
    1320:	ef 91       	pop	r30
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	5f 91       	pop	r21
    1328:	4f 91       	pop	r20
    132a:	3f 91       	pop	r19
    132c:	2f 91       	pop	r18
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0
    1334:	1f 90       	pop	r1
    1336:	18 95       	reti

00001338 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    1338:	e0 e7       	ldi	r30, 0x70	; 112
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	83 81       	ldd	r24, Z+3	; 0x03
    133e:	8f 7e       	andi	r24, 0xEF	; 239
    1340:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    1342:	e0 e4       	ldi	r30, 0x40	; 64
    1344:	f6 e0       	ldi	r31, 0x06	; 6
    1346:	80 81       	ld	r24, Z
    1348:	8a 6a       	ori	r24, 0xAA	; 170
    134a:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1350:	88 e5       	ldi	r24, 0x58	; 88
    1352:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1354:	e0 ea       	ldi	r30, 0xA0	; 160
    1356:	f8 e0       	ldi	r31, 0x08	; 8
    1358:	84 ec       	ldi	r24, 0xC4	; 196
    135a:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    1360:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1362:	88 e1       	ldi	r24, 0x18	; 24
    1364:	84 83       	std	Z+4, r24	; 0x04
    1366:	08 95       	ret

00001368 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    1368:	e0 e7       	ldi	r30, 0x70	; 112
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	83 81       	ldd	r24, Z+3	; 0x03
    136e:	87 7f       	andi	r24, 0xF7	; 247
    1370:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1372:	e0 ec       	ldi	r30, 0xC0	; 192
    1374:	f8 e0       	ldi	r31, 0x08	; 8
    1376:	80 e4       	ldi	r24, 0x40	; 64
    1378:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    137a:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    137c:	88 e5       	ldi	r24, 0x58	; 88
    137e:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1382:	08 95       	ret

00001384 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	0f 92       	push	r0
    138c:	11 24       	eor	r1, r1
	asm("nop");
    138e:	00 00       	nop
}
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	0f 90       	pop	r0
    1396:	1f 90       	pop	r1
    1398:	18 95       	reti

0000139a <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    139a:	9f b7       	in	r25, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	e8 2f       	mov	r30, r24
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	e0 59       	subi	r30, 0x90	; 144
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	60 95       	com	r22
    13a8:	80 81       	ld	r24, Z
    13aa:	68 23       	and	r22, r24
    13ac:	60 83       	st	Z, r22
    13ae:	9f bf       	out	0x3f, r25	; 63
    13b0:	08 95       	ret

000013b2 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    13b2:	86 30       	cpi	r24, 0x06	; 6
    13b4:	11 f0       	breq	.+4      	; 0x13ba <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    13ba:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    13bc:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    13c0:	81 fd       	sbrc	r24, 1
    13c2:	26 c0       	rjmp	.+76     	; 0x1410 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    13c4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    13c6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    13c8:	e0 e5       	ldi	r30, 0x50	; 80
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	82 60       	ori	r24, 0x02	; 2
    13d0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13d2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    13d4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    13d6:	81 ff       	sbrs	r24, 1
    13d8:	fd cf       	rjmp	.-6      	; 0x13d4 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    13da:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    13dc:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    13de:	a0 e5       	ldi	r26, 0x50	; 80
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	16 96       	adiw	r26, 0x06	; 6
    13e4:	8c 91       	ld	r24, X
    13e6:	16 97       	sbiw	r26, 0x06	; 6
    13e8:	89 7f       	andi	r24, 0xF9	; 249
    13ea:	16 96       	adiw	r26, 0x06	; 6
    13ec:	8c 93       	st	X, r24
    13ee:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    13f0:	e0 e6       	ldi	r30, 0x60	; 96
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 e8       	ldi	r24, 0x80	; 128
    13f6:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    13f8:	8b eb       	ldi	r24, 0xBB	; 187
    13fa:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    13fc:	16 96       	adiw	r26, 0x06	; 6
    13fe:	8c 91       	ld	r24, X
    1400:	16 97       	sbiw	r26, 0x06	; 6
    1402:	84 60       	ori	r24, 0x04	; 4
    1404:	16 96       	adiw	r26, 0x06	; 6
    1406:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1408:	80 81       	ld	r24, Z
    140a:	81 60       	ori	r24, 0x01	; 1
    140c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    140e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1410:	63 60       	ori	r22, 0x03	; 3
    1412:	84 e4       	ldi	r24, 0x44	; 68
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	3e d5       	rcall	.+2684   	; 0x1e94 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1418:	60 e4       	ldi	r22, 0x40	; 64
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	be cf       	rjmp	.-132    	; 0x139a <sysclk_enable_module>
    141e:	08 95       	ret

00001420 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1420:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <udi_vendor_alternate_setting>
    1424:	08 95       	ret

00001426 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    1426:	40 d1       	rcall	.+640    	; 0x16a8 <udc_get_interface_desc>
    1428:	fc 01       	movw	r30, r24
    142a:	83 81       	ldd	r24, Z+3	; 0x03
    142c:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    1430:	81 11       	cpse	r24, r1
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    1434:	69 ca       	rjmp	.-2862   	; 0x908 <main_vendor_enable>
    1436:	08 95       	ret
			return false;
		}
	}
	return true;
    1438:	81 e0       	ldi	r24, 0x01	; 1
}
    143a:	08 95       	ret

0000143c <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    143c:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <udi_vendor_alternate_setting>
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	09 f4       	brne	.+2      	; 0x1446 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    1444:	7d ca       	rjmp	.-2822   	; 0x940 <main_vendor_disable>
    1446:	08 95       	ret

00001448 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    1448:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq>
    144c:	88 23       	and	r24, r24
    144e:	4c f4       	brge	.+18     	; 0x1462 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1450:	80 76       	andi	r24, 0x60	; 96
    1452:	80 34       	cpi	r24, 0x40	; 64
    1454:	a9 f4       	brne	.+42     	; 0x1480 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1456:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <udd_g_ctrlreq+0x1>
    145a:	81 11       	cpse	r24, r1
    145c:	13 c0       	rjmp	.+38     	; 0x1484 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    145e:	75 ca       	rjmp	.-2838   	; 0x94a <main_setup_in_received>
    1460:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1462:	80 76       	andi	r24, 0x60	; 96
    1464:	80 34       	cpi	r24, 0x40	; 64
    1466:	81 f4       	brne	.+32     	; 0x1488 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1468:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <udd_g_ctrlreq+0x1>
    146c:	81 11       	cpse	r24, r1
    146e:	0e c0       	rjmp	.+28     	; 0x148c <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1470:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    1474:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    1478:	89 2b       	or	r24, r25
    147a:	51 f0       	breq	.+20     	; 0x1490 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    147c:	64 ca       	rjmp	.-2872   	; 0x946 <main_setup_out_received>
    147e:	08 95       	ret
		}
	}
	return false; // Not supported request
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	08 95       	ret
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	08 95       	ret
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	08 95       	ret
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	08 95       	ret
    1490:	80 e0       	ldi	r24, 0x00	; 0
}
    1492:	08 95       	ret

00001494 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    149a:	8a 01       	movw	r16, r20
    149c:	ac 01       	movw	r20, r24
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	81 e8       	ldi	r24, 0x81	; 129
    14a2:	0e 94 be 13 	call	0x277c	; 0x277c <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	08 95       	ret

000014ac <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    14b2:	8a 01       	movw	r16, r20
    14b4:	ac 01       	movw	r20, r24
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	82 e8       	ldi	r24, 0x82	; 130
    14ba:	0e 94 be 13 	call	0x277c	; 0x277c <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	08 95       	ret

000014c4 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    14ca:	8a 01       	movw	r16, r20
    14cc:	ac 01       	movw	r20, r24
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	83 e8       	ldi	r24, 0x83	; 131
    14d2:	0e 94 be 13 	call	0x277c	; 0x277c <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    14dc:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    14e0:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    14e4:	01 90       	ld	r0, Z+
    14e6:	f0 81       	ld	r31, Z
    14e8:	e0 2d       	mov	r30, r0
    14ea:	22 81       	ldd	r18, Z+2	; 0x02
    14ec:	33 81       	ldd	r19, Z+3	; 0x03
    14ee:	2e 0f       	add	r18, r30
    14f0:	3f 1f       	adc	r19, r31
    14f2:	fc 01       	movw	r30, r24
    14f4:	40 81       	ld	r20, Z
    14f6:	e4 0f       	add	r30, r20
    14f8:	f1 1d       	adc	r31, r1
    14fa:	e2 17       	cp	r30, r18
    14fc:	f3 07       	cpc	r31, r19
    14fe:	b8 f4       	brcc	.+46     	; 0x152e <udc_next_desc_in_iface+0x52>
    1500:	81 81       	ldd	r24, Z+1	; 0x01
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	b9 f0       	breq	.+46     	; 0x1534 <udc_next_desc_in_iface+0x58>
    1506:	86 13       	cpse	r24, r22
    1508:	09 c0       	rjmp	.+18     	; 0x151c <udc_next_desc_in_iface+0x40>
    150a:	05 c0       	rjmp	.+10     	; 0x1516 <udc_next_desc_in_iface+0x3a>
    150c:	81 81       	ldd	r24, Z+1	; 0x01
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	a1 f0       	breq	.+40     	; 0x153a <udc_next_desc_in_iface+0x5e>
    1512:	86 13       	cpse	r24, r22
    1514:	03 c0       	rjmp	.+6      	; 0x151c <udc_next_desc_in_iface+0x40>
    1516:	8e 2f       	mov	r24, r30
    1518:	9f 2f       	mov	r25, r31
    151a:	08 95       	ret
    151c:	80 81       	ld	r24, Z
    151e:	e8 0f       	add	r30, r24
    1520:	f1 1d       	adc	r31, r1
    1522:	e2 17       	cp	r30, r18
    1524:	f3 07       	cpc	r31, r19
    1526:	90 f3       	brcs	.-28     	; 0x150c <udc_next_desc_in_iface+0x30>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	08 95       	ret
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	08 95       	ret
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	08 95       	ret
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	08 95       	ret

00001540 <udc_valid_address>:
    1540:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    1544:	8f 77       	andi	r24, 0x7F	; 127
    1546:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <udd_set_address>
    154a:	08 95       	ret

0000154c <udc_update_iface_desc>:
    154c:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1550:	99 23       	and	r25, r25
    1552:	81 f1       	breq	.+96     	; 0x15b4 <udc_update_iface_desc+0x68>
    1554:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1558:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    155c:	01 90       	ld	r0, Z+
    155e:	f0 81       	ld	r31, Z
    1560:	e0 2d       	mov	r30, r0
    1562:	94 81       	ldd	r25, Z+4	; 0x04
    1564:	89 17       	cp	r24, r25
    1566:	40 f5       	brcc	.+80     	; 0x15b8 <udc_update_iface_desc+0x6c>
    1568:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <udc_ptr_iface>
    156c:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <udc_ptr_iface+0x1>
    1570:	22 81       	ldd	r18, Z+2	; 0x02
    1572:	33 81       	ldd	r19, Z+3	; 0x03
    1574:	2e 0f       	add	r18, r30
    1576:	3f 1f       	adc	r19, r31
    1578:	e2 17       	cp	r30, r18
    157a:	f3 07       	cpc	r31, r19
    157c:	f8 f4       	brcc	.+62     	; 0x15bc <udc_update_iface_desc+0x70>
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	94 30       	cpi	r25, 0x04	; 4
    1582:	61 f4       	brne	.+24     	; 0x159c <udc_update_iface_desc+0x50>
    1584:	92 81       	ldd	r25, Z+2	; 0x02
    1586:	98 13       	cpse	r25, r24
    1588:	09 c0       	rjmp	.+18     	; 0x159c <udc_update_iface_desc+0x50>
    158a:	93 81       	ldd	r25, Z+3	; 0x03
    158c:	96 13       	cpse	r25, r22
    158e:	06 c0       	rjmp	.+12     	; 0x159c <udc_update_iface_desc+0x50>
    1590:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <udc_ptr_iface>
    1594:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <udc_ptr_iface+0x1>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	08 95       	ret
    159c:	90 81       	ld	r25, Z
    159e:	e9 0f       	add	r30, r25
    15a0:	f1 1d       	adc	r31, r1
    15a2:	e2 17       	cp	r30, r18
    15a4:	f3 07       	cpc	r31, r19
    15a6:	58 f3       	brcs	.-42     	; 0x157e <udc_update_iface_desc+0x32>
    15a8:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <udc_ptr_iface>
    15ac:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <udc_ptr_iface+0x1>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	08 95       	ret
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	08 95       	ret
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	08 95       	ret
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	08 95       	ret

000015c0 <udc_iface_disable>:
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	c8 2f       	mov	r28, r24
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	be df       	rcall	.-132    	; 0x154c <udc_update_iface_desc>
    15d0:	18 2f       	mov	r17, r24
    15d2:	88 23       	and	r24, r24
    15d4:	81 f1       	breq	.+96     	; 0x1636 <udc_iface_disable+0x76>
    15d6:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    15da:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    15de:	ec 2f       	mov	r30, r28
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	12 96       	adiw	r26, 0x02	; 2
    15e8:	8d 91       	ld	r24, X+
    15ea:	9c 91       	ld	r25, X
    15ec:	13 97       	sbiw	r26, 0x03	; 3
    15ee:	e8 0f       	add	r30, r24
    15f0:	f9 1f       	adc	r31, r25
    15f2:	e0 80       	ld	r14, Z
    15f4:	f1 80       	ldd	r15, Z+1	; 0x01
    15f6:	d7 01       	movw	r26, r14
    15f8:	16 96       	adiw	r26, 0x06	; 6
    15fa:	ed 91       	ld	r30, X+
    15fc:	fc 91       	ld	r31, X
    15fe:	17 97       	sbiw	r26, 0x07	; 7
    1600:	09 95       	icall
    1602:	68 2f       	mov	r22, r24
    1604:	8c 2f       	mov	r24, r28
    1606:	a2 df       	rcall	.-188    	; 0x154c <udc_update_iface_desc>
    1608:	18 2f       	mov	r17, r24
    160a:	88 23       	and	r24, r24
    160c:	a1 f0       	breq	.+40     	; 0x1636 <udc_iface_disable+0x76>
    160e:	c0 91 db 20 	lds	r28, 0x20DB	; 0x8020db <udc_ptr_iface>
    1612:	d0 91 dc 20 	lds	r29, 0x20DC	; 0x8020dc <udc_ptr_iface+0x1>
    1616:	65 e0       	ldi	r22, 0x05	; 5
    1618:	ce 01       	movw	r24, r28
    161a:	60 df       	rcall	.-320    	; 0x14dc <udc_next_desc_in_iface>
    161c:	ec 01       	movw	r28, r24
    161e:	89 2b       	or	r24, r25
    1620:	21 f0       	breq	.+8      	; 0x162a <udc_iface_disable+0x6a>
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	0e 94 c1 14 	call	0x2982	; 0x2982 <udd_ep_free>
    1628:	f6 cf       	rjmp	.-20     	; 0x1616 <udc_iface_disable+0x56>
    162a:	d7 01       	movw	r26, r14
    162c:	12 96       	adiw	r26, 0x02	; 2
    162e:	ed 91       	ld	r30, X+
    1630:	fc 91       	ld	r31, X
    1632:	13 97       	sbiw	r26, 0x03	; 3
    1634:	09 95       	icall
    1636:	81 2f       	mov	r24, r17
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	08 95       	ret

00001644 <udc_iface_enable>:
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	18 2f       	mov	r17, r24
    164c:	7f df       	rcall	.-258    	; 0x154c <udc_update_iface_desc>
    164e:	88 23       	and	r24, r24
    1650:	39 f1       	breq	.+78     	; 0x16a0 <udc_iface_enable+0x5c>
    1652:	c0 91 db 20 	lds	r28, 0x20DB	; 0x8020db <udc_ptr_iface>
    1656:	d0 91 dc 20 	lds	r29, 0x20DC	; 0x8020dc <udc_ptr_iface+0x1>
    165a:	65 e0       	ldi	r22, 0x05	; 5
    165c:	ce 01       	movw	r24, r28
    165e:	3e df       	rcall	.-388    	; 0x14dc <udc_next_desc_in_iface>
    1660:	ec 01       	movw	r28, r24
    1662:	89 2b       	or	r24, r25
    1664:	41 f0       	breq	.+16     	; 0x1676 <udc_iface_enable+0x32>
    1666:	4c 81       	ldd	r20, Y+4	; 0x04
    1668:	5d 81       	ldd	r21, Y+5	; 0x05
    166a:	6b 81       	ldd	r22, Y+3	; 0x03
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	c1 d7       	rcall	.+3970   	; 0x25f2 <udd_ep_alloc>
    1670:	81 11       	cpse	r24, r1
    1672:	f3 cf       	rjmp	.-26     	; 0x165a <udc_iface_enable+0x16>
    1674:	15 c0       	rjmp	.+42     	; 0x16a0 <udc_iface_enable+0x5c>
    1676:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    167a:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    167e:	e1 2f       	mov	r30, r17
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	12 96       	adiw	r26, 0x02	; 2
    1688:	8d 91       	ld	r24, X+
    168a:	9c 91       	ld	r25, X
    168c:	13 97       	sbiw	r26, 0x03	; 3
    168e:	e8 0f       	add	r30, r24
    1690:	f9 1f       	adc	r31, r25
    1692:	01 90       	ld	r0, Z+
    1694:	f0 81       	ld	r31, Z
    1696:	e0 2d       	mov	r30, r0
    1698:	01 90       	ld	r0, Z+
    169a:	f0 81       	ld	r31, Z
    169c:	e0 2d       	mov	r30, r0
    169e:	09 95       	icall
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	08 95       	ret

000016a8 <udc_get_interface_desc>:
    16a8:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <udc_ptr_iface>
    16ac:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <udc_ptr_iface+0x1>
    16b0:	08 95       	ret

000016b2 <udc_start>:
    16b2:	0d c7       	rjmp	.+3610   	; 0x24ce <udd_enable>
    16b4:	08 95       	ret

000016b6 <udc_reset>:
    16b6:	cf 93       	push	r28
    16b8:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    16bc:	88 23       	and	r24, r24
    16be:	c1 f0       	breq	.+48     	; 0x16f0 <udc_reset+0x3a>
    16c0:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    16c4:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    16c8:	01 90       	ld	r0, Z+
    16ca:	f0 81       	ld	r31, Z
    16cc:	e0 2d       	mov	r30, r0
    16ce:	84 81       	ldd	r24, Z+4	; 0x04
    16d0:	88 23       	and	r24, r24
    16d2:	71 f0       	breq	.+28     	; 0x16f0 <udc_reset+0x3a>
    16d4:	c0 e0       	ldi	r28, 0x00	; 0
    16d6:	8c 2f       	mov	r24, r28
    16d8:	73 df       	rcall	.-282    	; 0x15c0 <udc_iface_disable>
    16da:	cf 5f       	subi	r28, 0xFF	; 255
    16dc:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    16e0:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    16e4:	01 90       	ld	r0, Z+
    16e6:	f0 81       	ld	r31, Z
    16e8:	e0 2d       	mov	r30, r0
    16ea:	84 81       	ldd	r24, Z+4	; 0x04
    16ec:	c8 17       	cp	r28, r24
    16ee:	98 f3       	brcs	.-26     	; 0x16d6 <udc_reset+0x20>
    16f0:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <udc_num_configuration>
    16f4:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <udc_device_status>
    16f8:	10 92 e5 20 	sts	0x20E5, r1	; 0x8020e5 <udc_device_status+0x1>
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1700:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1702:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1706:	88 23       	and	r24, r24
    1708:	49 f1       	breq	.+82     	; 0x175c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    170a:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    170e:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1718:	84 81       	ldd	r24, Z+4	; 0x04
    171a:	88 23       	and	r24, r24
    171c:	f9 f0       	breq	.+62     	; 0x175c <udc_sof_notify+0x5c>
    171e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1720:	ec 2f       	mov	r30, r28
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	12 96       	adiw	r26, 0x02	; 2
    172a:	8d 91       	ld	r24, X+
    172c:	9c 91       	ld	r25, X
    172e:	13 97       	sbiw	r26, 0x03	; 3
    1730:	e8 0f       	add	r30, r24
    1732:	f9 1f       	adc	r31, r25
    1734:	01 90       	ld	r0, Z+
    1736:	f0 81       	ld	r31, Z
    1738:	e0 2d       	mov	r30, r0
    173a:	00 84       	ldd	r0, Z+8	; 0x08
    173c:	f1 85       	ldd	r31, Z+9	; 0x09
    173e:	e0 2d       	mov	r30, r0
    1740:	30 97       	sbiw	r30, 0x00	; 0
    1742:	09 f0       	breq	.+2      	; 0x1746 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1744:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1746:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1748:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    174c:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1750:	ed 91       	ld	r30, X+
    1752:	fc 91       	ld	r31, X
    1754:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1756:	84 81       	ldd	r24, Z+4	; 0x04
    1758:	c8 17       	cp	r28, r24
    175a:	10 f3       	brcs	.-60     	; 0x1720 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    175c:	cf 91       	pop	r28
    175e:	08 95       	ret

00001760 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1768:	e8 e9       	ldi	r30, 0x98	; 152
    176a:	f4 e2       	ldi	r31, 0x24	; 36
    176c:	12 86       	std	Z+10, r1	; 0x0a
    176e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1770:	14 86       	std	Z+12, r1	; 0x0c
    1772:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1774:	16 86       	std	Z+14, r1	; 0x0e
    1776:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1778:	80 81       	ld	r24, Z
    177a:	88 23       	and	r24, r24
    177c:	3c f4       	brge	.+14     	; 0x178c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    177e:	20 91 9e 24 	lds	r18, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    1782:	30 91 9f 24 	lds	r19, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    1786:	23 2b       	or	r18, r19
    1788:	09 f4       	brne	.+2      	; 0x178c <udc_process_setup+0x2c>
    178a:	78 c3       	rjmp	.+1776   	; 0x1e7c <udc_process_setup+0x71c>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    178c:	80 76       	andi	r24, 0x60	; 96
    178e:	80 34       	cpi	r24, 0x40	; 64
    1790:	09 f0       	breq	.+2      	; 0x1794 <udc_process_setup+0x34>
    1792:	16 c1       	rjmp	.+556    	; 0x19c0 <udc_process_setup+0x260>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    1794:	e0 91 99 24 	lds	r30, 0x2499	; 0x802499 <udd_g_ctrlreq+0x1>
    1798:	8e 2f       	mov	r24, r30
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	fc 01       	movw	r30, r24
    179e:	e0 5a       	subi	r30, 0xA0	; 160
    17a0:	f1 09       	sbc	r31, r1
    17a2:	e8 30       	cpi	r30, 0x08	; 8
    17a4:	f1 05       	cpc	r31, r1
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <udc_process_setup+0x4a>
    17a8:	02 c1       	rjmp	.+516    	; 0x19ae <udc_process_setup+0x24e>
    17aa:	e2 50       	subi	r30, 0x02	; 2
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    17b8:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    17bc:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    17c0:	e6 e8       	ldi	r30, 0x86	; 134
    17c2:	f2 e2       	ldi	r31, 0x22	; 34
    17c4:	83 87       	std	Z+11, r24	; 0x0b
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    17c6:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    17ca:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    17ce:	94 87       	std	Z+12, r25	; 0x0c
			uds.calValNeg = cali_value_negative_gradient;
    17d0:	80 91 7e 22 	lds	r24, 0x227E	; 0x80227e <cali_value_negative_gradient>
    17d4:	85 87       	std	Z+13, r24	; 0x0d
			uds.calValPos = cali_value_positive_gradient;
    17d6:	80 91 7b 22 	lds	r24, 0x227B	; 0x80227b <cali_value_positive_gradient>
    17da:	86 87       	std	Z+14, r24	; 0x0e
			uds.CALA = DFLLRC2M.CALA;
    17dc:	a8 e6       	ldi	r26, 0x68	; 104
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	12 96       	adiw	r26, 0x02	; 2
    17e2:	8c 91       	ld	r24, X
    17e4:	12 97       	sbiw	r26, 0x02	; 2
    17e6:	87 87       	std	Z+15, r24	; 0x0f
			uds.CALB = DFLLRC2M.CALB;
    17e8:	13 96       	adiw	r26, 0x03	; 3
    17ea:	8c 91       	ld	r24, X
    17ec:	80 8b       	std	Z+16, r24	; 0x10
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    17ee:	60 91 9e 24 	lds	r22, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    17f2:	70 91 9f 24 	lds	r23, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    17f6:	cf 01       	movw	r24, r30
    17f8:	f5 d6       	rcall	.+3562   	; 0x25e4 <udd_set_setup_payload>
    17fa:	44 c3       	rjmp	.+1672   	; 0x1e84 <udc_process_setup+0x724>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    17fc:	e0 e0       	ldi	r30, 0x00	; 0
    17fe:	f8 e0       	ldi	r31, 0x08	; 8
    1800:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1802:	c8 e9       	ldi	r28, 0x98	; 152
    1804:	d4 e2       	ldi	r29, 0x24	; 36
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	86 ab       	std	Z+54, r24	; 0x36
    180c:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    180e:	8c 81       	ldd	r24, Y+4	; 0x04
    1810:	8f 70       	andi	r24, 0x0F	; 15
    1812:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1814:	6e 81       	ldd	r22, Y+6	; 0x06
    1816:	7f 81       	ldd	r23, Y+7	; 0x07
    1818:	88 e9       	ldi	r24, 0x98	; 152
    181a:	92 e2       	ldi	r25, 0x22	; 34
    181c:	e3 d6       	rcall	.+3526   	; 0x25e4 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    181e:	8e 81       	ldd	r24, Y+6	; 0x06
    1820:	9f 81       	ldd	r25, Y+7	; 0x07
    1822:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    1826:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    182a:	82 17       	cp	r24, r18
    182c:	93 07       	cpc	r25, r19
    182e:	09 f4       	brne	.+2      	; 0x1832 <udc_process_setup+0xd2>
    1830:	29 c3       	rjmp	.+1618   	; 0x1e84 <udc_process_setup+0x724>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1832:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    1836:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				switch(global_mode){
    183a:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    183e:	8e 2f       	mov	r24, r30
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	88 30       	cpi	r24, 0x08	; 8
    1844:	91 05       	cpc	r25, r1
    1846:	08 f0       	brcs	.+2      	; 0x184a <udc_process_setup+0xea>
    1848:	b4 c0       	rjmp	.+360    	; 0x19b2 <udc_process_setup+0x252>
    184a:	fc 01       	movw	r30, r24
    184c:	ea 5f       	subi	r30, 0xFA	; 250
    184e:	fe 4f       	sbci	r31, 0xFE	; 254
    1850:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1854:	41 d9       	rcall	.-3454   	; 0xad8 <tiny_dma_set_mode_0>
    1856:	16 c3       	rjmp	.+1580   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1858:	b9 d9       	rcall	.-3214   	; 0xbcc <tiny_dma_set_mode_1>
    185a:	14 c3       	rjmp	.+1576   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 2:
					tiny_dma_set_mode_2();
    185c:	2f da       	rcall	.-2978   	; 0xcbc <tiny_dma_set_mode_2>
    185e:	12 c3       	rjmp	.+1572   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1860:	a2 da       	rcall	.-2748   	; 0xda6 <tiny_dma_set_mode_3>
    1862:	10 c3       	rjmp	.+1568   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1864:	1c db       	rcall	.-2504   	; 0xe9e <tiny_dma_set_mode_4>
    1866:	0e c3       	rjmp	.+1564   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1868:	90 db       	rcall	.-2272   	; 0xf8a <tiny_dma_set_mode_5>
    186a:	0c c3       	rjmp	.+1560   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 6:
					tiny_dma_set_mode_6();
    186c:	d6 db       	rcall	.-2132   	; 0x101a <tiny_dma_set_mode_6>
    186e:	0a c3       	rjmp	.+1556   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1870:	36 dc       	rcall	.-1940   	; 0x10de <tiny_dma_set_mode_7>
    1872:	08 c3       	rjmp	.+1552   	; 0x1e84 <udc_process_setup+0x724>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    1874:	e0 e4       	ldi	r30, 0x40	; 64
    1876:	f8 e0       	ldi	r31, 0x08	; 8
    1878:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    187a:	c8 e9       	ldi	r28, 0x98	; 152
    187c:	d4 e2       	ldi	r29, 0x24	; 36
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	86 ab       	std	Z+54, r24	; 0x36
    1884:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	8f 70       	andi	r24, 0x0F	; 15
    188a:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    188c:	6e 81       	ldd	r22, Y+6	; 0x06
    188e:	7f 81       	ldd	r23, Y+7	; 0x07
    1890:	88 ea       	ldi	r24, 0xA8	; 168
    1892:	94 e2       	ldi	r25, 0x24	; 36
    1894:	a7 d6       	rcall	.+3406   	; 0x25e4 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1896:	8e 81       	ldd	r24, Y+6	; 0x06
    1898:	9f 81       	ldd	r25, Y+7	; 0x07
    189a:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    189e:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    18a2:	82 17       	cp	r24, r18
    18a4:	93 07       	cpc	r25, r19
    18a6:	09 f4       	brne	.+2      	; 0x18aa <udc_process_setup+0x14a>
    18a8:	ed c2       	rjmp	.+1498   	; 0x1e84 <udc_process_setup+0x724>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    18aa:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    18ae:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				switch(global_mode){
    18b2:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    18b6:	8e 2f       	mov	r24, r30
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	88 30       	cpi	r24, 0x08	; 8
    18bc:	91 05       	cpc	r25, r1
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <udc_process_setup+0x162>
    18c0:	7a c0       	rjmp	.+244    	; 0x19b6 <udc_process_setup+0x256>
    18c2:	fc 01       	movw	r30, r24
    18c4:	e2 5f       	subi	r30, 0xF2	; 242
    18c6:	fe 4f       	sbci	r31, 0xFE	; 254
    18c8:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    18cc:	05 d9       	rcall	.-3574   	; 0xad8 <tiny_dma_set_mode_0>
    18ce:	da c2       	rjmp	.+1460   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 1:
					tiny_dma_set_mode_1();
    18d0:	7d d9       	rcall	.-3334   	; 0xbcc <tiny_dma_set_mode_1>
    18d2:	d8 c2       	rjmp	.+1456   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 2:
					tiny_dma_set_mode_2();
    18d4:	f3 d9       	rcall	.-3098   	; 0xcbc <tiny_dma_set_mode_2>
    18d6:	d6 c2       	rjmp	.+1452   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 3:
					tiny_dma_set_mode_3();
    18d8:	66 da       	rcall	.-2868   	; 0xda6 <tiny_dma_set_mode_3>
    18da:	d4 c2       	rjmp	.+1448   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 4:
					tiny_dma_set_mode_4();
    18dc:	e0 da       	rcall	.-2624   	; 0xe9e <tiny_dma_set_mode_4>
    18de:	d2 c2       	rjmp	.+1444   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 5:
					tiny_dma_set_mode_5();
    18e0:	54 db       	rcall	.-2392   	; 0xf8a <tiny_dma_set_mode_5>
    18e2:	d0 c2       	rjmp	.+1440   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 6:
					tiny_dma_set_mode_6();
    18e4:	9a db       	rcall	.-2252   	; 0x101a <tiny_dma_set_mode_6>
    18e6:	ce c2       	rjmp	.+1436   	; 0x1e84 <udc_process_setup+0x724>
					break;
					case 7:
					tiny_dma_set_mode_7();
    18e8:	fa db       	rcall	.-2060   	; 0x10de <tiny_dma_set_mode_7>
    18ea:	cc c2       	rjmp	.+1432   	; 0x1e84 <udc_process_setup+0x724>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    18ec:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    18f0:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    18f4:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    18f8:	80 93 d3 20 	sts	0x20D3, r24	; 0x8020d3 <PSU_target>
    18fc:	c3 c2       	rjmp	.+1414   	; 0x1e84 <udc_process_setup+0x724>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    18fe:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    1902:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1906:	be c2       	rjmp	.+1404   	; 0x1e84 <udc_process_setup+0x724>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1908:	e0 91 9a 24 	lds	r30, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    190c:	f0 91 9b 24 	lds	r31, 0x249B	; 0x80249b <udd_g_ctrlreq+0x3>
    1910:	e8 30       	cpi	r30, 0x08	; 8
    1912:	f1 05       	cpc	r31, r1
    1914:	08 f0       	brcs	.+2      	; 0x1918 <udc_process_setup+0x1b8>
    1916:	51 c0       	rjmp	.+162    	; 0x19ba <udc_process_setup+0x25a>
    1918:	ea 5e       	subi	r30, 0xEA	; 234
    191a:	fe 4f       	sbci	r31, 0xFE	; 254
    191c:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	47 d8       	rcall	.-3954   	; 0x9b4 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1926:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x4>
    192a:	11 d8       	rcall	.-4062   	; 0x94e <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    192c:	d5 d8       	rcall	.-3670   	; 0xad8 <tiny_dma_set_mode_0>
    192e:	aa c2       	rjmp	.+1364   	; 0x1e84 <udc_process_setup+0x724>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	3f d8       	rcall	.-3970   	; 0x9b4 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1936:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x4>
    193a:	09 d8       	rcall	.-4078   	; 0x94e <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    193c:	47 d9       	rcall	.-3442   	; 0xbcc <tiny_dma_set_mode_1>
    193e:	a2 c2       	rjmp	.+1348   	; 0x1e84 <udc_process_setup+0x724>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	37 d8       	rcall	.-3986   	; 0x9b4 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1946:	c8 e9       	ldi	r28, 0x98	; 152
    1948:	d4 e2       	ldi	r29, 0x24	; 36
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	00 d8       	rcall	.-4096   	; 0x94e <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	13 d8       	rcall	.-4058   	; 0x978 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    1952:	b4 d9       	rcall	.-3224   	; 0xcbc <tiny_dma_set_mode_2>
    1954:	97 c2       	rjmp	.+1326   	; 0x1e84 <udc_process_setup+0x724>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    1956:	27 da       	rcall	.-2994   	; 0xda6 <tiny_dma_set_mode_3>
    1958:	95 c2       	rjmp	.+1322   	; 0x1e84 <udc_process_setup+0x724>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    195a:	a1 da       	rcall	.-2750   	; 0xe9e <tiny_dma_set_mode_4>
    195c:	93 c2       	rjmp	.+1318   	; 0x1e84 <udc_process_setup+0x724>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	28 d8       	rcall	.-4016   	; 0x9b4 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1964:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x4>
    1968:	0e 94 a7 04 	call	0x94e	; 0x94e <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    196c:	0e db       	rcall	.-2532   	; 0xf8a <tiny_dma_set_mode_5>
    196e:	8a c2       	rjmp	.+1300   	; 0x1e84 <udc_process_setup+0x724>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	1f d8       	rcall	.-4034   	; 0x9b4 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1976:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x4>
    197a:	0e 94 a7 04 	call	0x94e	; 0x94e <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    197e:	4d db       	rcall	.-2406   	; 0x101a <tiny_dma_set_mode_6>
    1980:	81 c2       	rjmp	.+1282   	; 0x1e84 <udc_process_setup+0x724>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1982:	62 e0       	ldi	r22, 0x02	; 2
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	16 d8       	rcall	.-4052   	; 0x9b4 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1988:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x4>
    198c:	80 68       	ori	r24, 0x80	; 128
    198e:	0e 94 a7 04 	call	0x94e	; 0x94e <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    1992:	a5 db       	rcall	.-2230   	; 0x10de <tiny_dma_set_mode_7>
    1994:	77 c2       	rjmp	.+1262   	; 0x1e84 <udc_process_setup+0x724>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1996:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    199a:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    199e:	72 c2       	rjmp	.+1252   	; 0x1e84 <udc_process_setup+0x724>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    19a0:	e9 e7       	ldi	r30, 0x79	; 121
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	88 ed       	ldi	r24, 0xD8	; 216
    19a8:	f8 94       	cli
    19aa:	84 bf       	out	0x34, r24	; 52
    19ac:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	05 c0       	rjmp	.+10     	; 0x19bc <udc_process_setup+0x25c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <udc_process_setup+0x25c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <udc_process_setup+0x25c>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    19ba:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    19bc:	81 11       	cpse	r24, r1
    19be:	65 c2       	rjmp	.+1226   	; 0x1e8a <udc_process_setup+0x72a>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    19c0:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq>
    19c4:	98 2f       	mov	r25, r24
    19c6:	90 76       	andi	r25, 0x60	; 96
    19c8:	09 f0       	breq	.+2      	; 0x19cc <udc_process_setup+0x26c>
    19ca:	e1 c1       	rjmp	.+962    	; 0x1d8e <udc_process_setup+0x62e>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    19cc:	88 23       	and	r24, r24
    19ce:	0c f0       	brlt	.+2      	; 0x19d2 <udc_process_setup+0x272>
    19d0:	05 c1       	rjmp	.+522    	; 0x1bdc <udc_process_setup+0x47c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    19d2:	20 91 9e 24 	lds	r18, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    19d6:	30 91 9f 24 	lds	r19, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    19da:	21 15       	cp	r18, r1
    19dc:	31 05       	cpc	r19, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <udc_process_setup+0x282>
    19e0:	d6 c1       	rjmp	.+940    	; 0x1d8e <udc_process_setup+0x62e>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    19e2:	8f 71       	andi	r24, 0x1F	; 31
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <udc_process_setup+0x288>
    19e6:	a3 c0       	rjmp	.+326    	; 0x1b2e <udc_process_setup+0x3ce>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    19e8:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <udd_g_ctrlreq+0x1>
    19ec:	96 30       	cpi	r25, 0x06	; 6
    19ee:	79 f0       	breq	.+30     	; 0x1a0e <udc_process_setup+0x2ae>
    19f0:	98 30       	cpi	r25, 0x08	; 8
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <udc_process_setup+0x296>
    19f4:	92 c0       	rjmp	.+292    	; 0x1b1a <udc_process_setup+0x3ba>
    19f6:	91 11       	cpse	r25, r1
    19f8:	9a c0       	rjmp	.+308    	; 0x1b2e <udc_process_setup+0x3ce>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <udc_process_setup+0x2a2>
    1a00:	c6 c1       	rjmp	.+908    	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1a02:	62 e0       	ldi	r22, 0x02	; 2
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	84 ee       	ldi	r24, 0xE4	; 228
    1a08:	90 e2       	ldi	r25, 0x20	; 32
    1a0a:	ec d5       	rcall	.+3032   	; 0x25e4 <udd_set_setup_payload>
    1a0c:	3d c2       	rjmp	.+1146   	; 0x1e88 <udc_process_setup+0x728>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1a0e:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    1a12:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1a16:	29 2f       	mov	r18, r25
    1a18:	33 27       	eor	r19, r19
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	a9 f0       	breq	.+42     	; 0x1a4a <udc_process_setup+0x2ea>
    1a20:	24 f4       	brge	.+8      	; 0x1a2a <udc_process_setup+0x2ca>
    1a22:	21 30       	cpi	r18, 0x01	; 1
    1a24:	31 05       	cpc	r19, r1
    1a26:	41 f0       	breq	.+16     	; 0x1a38 <udc_process_setup+0x2d8>
    1a28:	a9 c1       	rjmp	.+850    	; 0x1d7c <udc_process_setup+0x61c>
    1a2a:	23 30       	cpi	r18, 0x03	; 3
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	d9 f1       	breq	.+118    	; 0x1aa6 <udc_process_setup+0x346>
    1a30:	2f 30       	cpi	r18, 0x0F	; 15
    1a32:	31 05       	cpc	r19, r1
    1a34:	51 f1       	breq	.+84     	; 0x1a8a <udc_process_setup+0x32a>
    1a36:	a2 c1       	rjmp	.+836    	; 0x1d7c <udc_process_setup+0x61c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1a38:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1a3c:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1a40:	dc 01       	movw	r26, r24
    1a42:	6c 91       	ld	r22, X
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	ce d5       	rcall	.+2972   	; 0x25e4 <udd_set_setup_payload>
    1a48:	59 c0       	rjmp	.+178    	; 0x1afc <udc_process_setup+0x39c>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1a4a:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1a4e:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1a52:	21 89       	ldd	r18, Z+17	; 0x11
    1a54:	82 17       	cp	r24, r18
    1a56:	08 f0       	brcs	.+2      	; 0x1a5a <udc_process_setup+0x2fa>
    1a58:	9a c1       	rjmp	.+820    	; 0x1d8e <udc_process_setup+0x62e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1a5a:	99 27       	eor	r25, r25
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1a68:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1a6c:	e8 0f       	add	r30, r24
    1a6e:	f9 1f       	adc	r31, r25
    1a70:	80 81       	ld	r24, Z
    1a72:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1a74:	fc 01       	movw	r30, r24
    1a76:	62 81       	ldd	r22, Z+2	; 0x02
    1a78:	73 81       	ldd	r23, Z+3	; 0x03
    1a7a:	b4 d5       	rcall	.+2920   	; 0x25e4 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1a7c:	e0 91 a0 24 	lds	r30, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x8>
    1a80:	f0 91 a1 24 	lds	r31, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0x9>
    1a84:	82 e0       	ldi	r24, 0x02	; 2
    1a86:	81 83       	std	Z+1, r24	; 0x01
    1a88:	39 c0       	rjmp	.+114    	; 0x1afc <udc_process_setup+0x39c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1a8a:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1a8e:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <udc_process_setup+0x338>
    1a96:	7b c1       	rjmp	.+758    	; 0x1d8e <udc_process_setup+0x62e>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1a98:	dc 01       	movw	r26, r24
    1a9a:	12 96       	adiw	r26, 0x02	; 2
    1a9c:	6d 91       	ld	r22, X+
    1a9e:	7c 91       	ld	r23, X
    1aa0:	13 97       	sbiw	r26, 0x03	; 3
    1aa2:	a0 d5       	rcall	.+2880   	; 0x25e4 <udd_set_setup_payload>
    1aa4:	2b c0       	rjmp	.+86     	; 0x1afc <udc_process_setup+0x39c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1aa6:	99 27       	eor	r25, r25
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	91 05       	cpc	r25, r1
    1aac:	71 f0       	breq	.+28     	; 0x1aca <udc_process_setup+0x36a>
    1aae:	38 f0       	brcs	.+14     	; 0x1abe <udc_process_setup+0x35e>
    1ab0:	02 97       	sbiw	r24, 0x02	; 2
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <udc_process_setup+0x356>
    1ab4:	6c c1       	rjmp	.+728    	; 0x1d8e <udc_process_setup+0x62e>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1ab6:	86 e9       	ldi	r24, 0x96	; 150
    1ab8:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1aba:	28 e1       	ldi	r18, 0x18	; 24
    1abc:	09 c0       	rjmp	.+18     	; 0x1ad0 <udc_process_setup+0x370>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	8a eb       	ldi	r24, 0xBA	; 186
    1ac4:	90 e2       	ldi	r25, 0x20	; 32
    1ac6:	8e d5       	rcall	.+2844   	; 0x25e4 <udd_set_setup_payload>
    1ac8:	19 c0       	rjmp	.+50     	; 0x1afc <udc_process_setup+0x39c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1aca:	8f ea       	ldi	r24, 0xAF	; 175
    1acc:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1ace:	29 e0       	ldi	r18, 0x09	; 9
    1ad0:	38 2f       	mov	r19, r24
    1ad2:	a6 e6       	ldi	r26, 0x66	; 102
    1ad4:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1ad6:	e8 2f       	mov	r30, r24
    1ad8:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1ada:	81 91       	ld	r24, Z+
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	8d 93       	st	X+, r24
    1ae0:	9d 93       	st	X+, r25
    1ae2:	8e 2f       	mov	r24, r30
    1ae4:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1ae6:	82 17       	cp	r24, r18
    1ae8:	c0 f3       	brcs	.-16     	; 0x1ada <udc_process_setup+0x37a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1aea:	62 2f       	mov	r22, r18
    1aec:	66 0f       	add	r22, r22
    1aee:	6e 5f       	subi	r22, 0xFE	; 254
    1af0:	60 93 64 20 	sts	0x2064, r22	; 0x802064 <udc_string_desc>
		udd_set_setup_payload(
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	84 e6       	ldi	r24, 0x64	; 100
    1af8:	90 e2       	ldi	r25, 0x20	; 32
    1afa:	74 d5       	rcall	.+2792   	; 0x25e4 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1afc:	e8 e9       	ldi	r30, 0x98	; 152
    1afe:	f4 e2       	ldi	r31, 0x24	; 36
    1b00:	86 81       	ldd	r24, Z+6	; 0x06
    1b02:	97 81       	ldd	r25, Z+7	; 0x07
    1b04:	22 85       	ldd	r18, Z+10	; 0x0a
    1b06:	33 85       	ldd	r19, Z+11	; 0x0b
    1b08:	82 17       	cp	r24, r18
    1b0a:	93 07       	cpc	r25, r19
    1b0c:	08 f0       	brcs	.+2      	; 0x1b10 <udc_process_setup+0x3b0>
    1b0e:	bc c1       	rjmp	.+888    	; 0x1e88 <udc_process_setup+0x728>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1b10:	80 93 a2 24 	sts	0x24A2, r24	; 0x8024a2 <udd_g_ctrlreq+0xa>
    1b14:	90 93 a3 24 	sts	0x24A3, r25	; 0x8024a3 <udd_g_ctrlreq+0xb>
    1b18:	b7 c1       	rjmp	.+878    	; 0x1e88 <udc_process_setup+0x728>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1b1a:	21 30       	cpi	r18, 0x01	; 1
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <udc_process_setup+0x3c2>
    1b20:	36 c1       	rjmp	.+620    	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	80 ee       	ldi	r24, 0xE0	; 224
    1b28:	90 e2       	ldi	r25, 0x20	; 32
    1b2a:	5c d5       	rcall	.+2744   	; 0x25e4 <udd_set_setup_payload>
    1b2c:	ad c1       	rjmp	.+858    	; 0x1e88 <udc_process_setup+0x728>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	e1 f5       	brne	.+120    	; 0x1baa <udc_process_setup+0x44a>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b32:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <udd_g_ctrlreq+0x1>
    1b36:	9a 30       	cpi	r25, 0x0A	; 10
    1b38:	c1 f5       	brne	.+112    	; 0x1baa <udc_process_setup+0x44a>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1b3a:	21 30       	cpi	r18, 0x01	; 1
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <udc_process_setup+0x3e2>
    1b40:	26 c1       	rjmp	.+588    	; 0x1d8e <udc_process_setup+0x62e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1b42:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1b46:	88 23       	and	r24, r24
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <udc_process_setup+0x3ec>
    1b4a:	21 c1       	rjmp	.+578    	; 0x1d8e <udc_process_setup+0x62e>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b4c:	c0 91 9c 24 	lds	r28, 0x249C	; 0x80249c <udd_g_ctrlreq+0x4>
    1b50:	d0 91 9d 24 	lds	r29, 0x249D	; 0x80249d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b54:	00 91 dd 20 	lds	r16, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1b58:	10 91 de 20 	lds	r17, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1b5c:	d8 01       	movw	r26, r16
    1b5e:	ed 91       	ld	r30, X+
    1b60:	fc 91       	ld	r31, X
    1b62:	84 81       	ldd	r24, Z+4	; 0x04
    1b64:	c8 17       	cp	r28, r24
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <udc_process_setup+0x40a>
    1b68:	12 c1       	rjmp	.+548    	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	8c 2f       	mov	r24, r28
    1b6e:	ee dc       	rcall	.-1572   	; 0x154c <udc_update_iface_desc>
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <udc_process_setup+0x416>
    1b74:	0c c1       	rjmp	.+536    	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b76:	ce 01       	movw	r24, r28
    1b78:	99 27       	eor	r25, r25
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	d8 01       	movw	r26, r16
    1b80:	12 96       	adiw	r26, 0x02	; 2
    1b82:	ed 91       	ld	r30, X+
    1b84:	fc 91       	ld	r31, X
    1b86:	13 97       	sbiw	r26, 0x03	; 3
    1b88:	e8 0f       	add	r30, r24
    1b8a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1b8c:	01 90       	ld	r0, Z+
    1b8e:	f0 81       	ld	r31, Z
    1b90:	e0 2d       	mov	r30, r0
    1b92:	86 81       	ldd	r24, Z+6	; 0x06
    1b94:	97 81       	ldd	r25, Z+7	; 0x07
    1b96:	fc 01       	movw	r30, r24
    1b98:	09 95       	icall
    1b9a:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	82 ee       	ldi	r24, 0xE2	; 226
    1ba4:	90 e2       	ldi	r25, 0x20	; 32
    1ba6:	1e d5       	rcall	.+2620   	; 0x25e4 <udd_set_setup_payload>
    1ba8:	6f c1       	rjmp	.+734    	; 0x1e88 <udc_process_setup+0x728>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <udc_process_setup+0x450>
    1bae:	ef c0       	rjmp	.+478    	; 0x1d8e <udc_process_setup+0x62e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1bb0:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <udd_g_ctrlreq+0x1>
    1bb4:	81 11       	cpse	r24, r1
    1bb6:	e4 c0       	rjmp	.+456    	; 0x1d80 <udc_process_setup+0x620>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	31 05       	cpc	r19, r1
    1bbc:	09 f0       	breq	.+2      	; 0x1bc0 <udc_process_setup+0x460>
    1bbe:	e7 c0       	rjmp	.+462    	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1bc0:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x4>
    1bc4:	8b d5       	rcall	.+2838   	; 0x26dc <udd_ep_is_halted>
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <udc_ep_status.5555>
    1bcc:	90 93 da 20 	sts	0x20DA, r25	; 0x8020da <udc_ep_status.5555+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1bd0:	62 e0       	ldi	r22, 0x02	; 2
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	89 ed       	ldi	r24, 0xD9	; 217
    1bd6:	90 e2       	ldi	r25, 0x20	; 32
    1bd8:	05 d5       	rcall	.+2570   	; 0x25e4 <udd_set_setup_payload>
    1bda:	56 c1       	rjmp	.+684    	; 0x1e88 <udc_process_setup+0x728>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1bdc:	8f 71       	andi	r24, 0x1F	; 31
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <udc_process_setup+0x482>
    1be0:	83 c0       	rjmp	.+262    	; 0x1ce8 <udc_process_setup+0x588>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1be2:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <udd_g_ctrlreq+0x1>
    1be6:	93 30       	cpi	r25, 0x03	; 3
    1be8:	09 f4       	brne	.+2      	; 0x1bec <udc_process_setup+0x48c>
    1bea:	cc c0       	rjmp	.+408    	; 0x1d84 <udc_process_setup+0x624>
    1bec:	18 f4       	brcc	.+6      	; 0x1bf4 <udc_process_setup+0x494>
    1bee:	91 30       	cpi	r25, 0x01	; 1
    1bf0:	a1 f0       	breq	.+40     	; 0x1c1a <udc_process_setup+0x4ba>
    1bf2:	7a c0       	rjmp	.+244    	; 0x1ce8 <udc_process_setup+0x588>
    1bf4:	95 30       	cpi	r25, 0x05	; 5
    1bf6:	19 f0       	breq	.+6      	; 0x1bfe <udc_process_setup+0x49e>
    1bf8:	99 30       	cpi	r25, 0x09	; 9
    1bfa:	39 f1       	breq	.+78     	; 0x1c4a <udc_process_setup+0x4ea>
    1bfc:	75 c0       	rjmp	.+234    	; 0x1ce8 <udc_process_setup+0x588>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1bfe:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    1c02:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    1c06:	89 2b       	or	r24, r25
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <udc_process_setup+0x4ac>
    1c0a:	c1 c0       	rjmp	.+386    	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1c0c:	80 ea       	ldi	r24, 0xA0	; 160
    1c0e:	9a e0       	ldi	r25, 0x0A	; 10
    1c10:	80 93 a4 24 	sts	0x24A4, r24	; 0x8024a4 <udd_g_ctrlreq+0xc>
    1c14:	90 93 a5 24 	sts	0x24A5, r25	; 0x8024a5 <udd_g_ctrlreq+0xd>
    1c18:	37 c1       	rjmp	.+622    	; 0x1e88 <udc_process_setup+0x728>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c1a:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    1c1e:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    1c22:	89 2b       	or	r24, r25
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <udc_process_setup+0x4c8>
    1c26:	b3 c0       	rjmp	.+358    	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1c28:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    1c2c:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x3>
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <udc_process_setup+0x4d6>
    1c34:	ac c0       	rjmp	.+344    	; 0x1d8e <udc_process_setup+0x62e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1c36:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <udc_device_status>
    1c3a:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <udc_device_status+0x1>
    1c3e:	8d 7f       	andi	r24, 0xFD	; 253
    1c40:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <udc_device_status>
    1c44:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <udc_device_status+0x1>
    1c48:	1f c1       	rjmp	.+574    	; 0x1e88 <udc_process_setup+0x728>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1c4a:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    1c4e:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    1c52:	89 2b       	or	r24, r25
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <udc_process_setup+0x4f8>
    1c56:	9b c0       	rjmp	.+310    	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1c58:	c2 d4       	rcall	.+2436   	; 0x25de <udd_getaddress>
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <udc_process_setup+0x500>
    1c5e:	97 c0       	rjmp	.+302    	; 0x1d8e <udc_process_setup+0x62e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c60:	20 91 9a 24 	lds	r18, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    1c64:	30 91 9b 24 	lds	r19, 0x249B	; 0x80249b <udd_g_ctrlreq+0x3>
    1c68:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1c6a:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1c6e:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c72:	81 89       	ldd	r24, Z+17	; 0x11
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	82 17       	cp	r24, r18
    1c78:	93 07       	cpc	r25, r19
    1c7a:	08 f4       	brcc	.+2      	; 0x1c7e <udc_process_setup+0x51e>
    1c7c:	88 c0       	rjmp	.+272    	; 0x1d8e <udc_process_setup+0x62e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1c7e:	1b dd       	rcall	.-1482   	; 0x16b6 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1c80:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    1c84:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x3>
    1c88:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1c8c:	88 23       	and	r24, r24
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <udc_process_setup+0x532>
    1c90:	fb c0       	rjmp	.+502    	; 0x1e88 <udc_process_setup+0x728>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1c92:	99 27       	eor	r25, r25
    1c94:	81 50       	subi	r24, 0x01	; 1
    1c96:	90 4c       	sbci	r25, 0xC0	; 192
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1ca4:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1ca8:	e8 0f       	add	r30, r24
    1caa:	f9 1f       	adc	r31, r25
    1cac:	e0 93 dd 20 	sts	0x20DD, r30	; 0x8020dd <udc_ptr_conf>
    1cb0:	f0 93 de 20 	sts	0x20DE, r31	; 0x8020de <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cb4:	01 90       	ld	r0, Z+
    1cb6:	f0 81       	ld	r31, Z
    1cb8:	e0 2d       	mov	r30, r0
    1cba:	84 81       	ldd	r24, Z+4	; 0x04
    1cbc:	88 23       	and	r24, r24
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <udc_process_setup+0x562>
    1cc0:	e3 c0       	rjmp	.+454    	; 0x1e88 <udc_process_setup+0x728>
    1cc2:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	8c 2f       	mov	r24, r28
    1cc8:	bd dc       	rcall	.-1670   	; 0x1644 <udc_iface_enable>
    1cca:	88 23       	and	r24, r24
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <udc_process_setup+0x570>
    1cce:	5f c0       	rjmp	.+190    	; 0x1d8e <udc_process_setup+0x62e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1cd0:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cd2:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1cd6:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1cda:	01 90       	ld	r0, Z+
    1cdc:	f0 81       	ld	r31, Z
    1cde:	e0 2d       	mov	r30, r0
    1ce0:	84 81       	ldd	r24, Z+4	; 0x04
    1ce2:	c8 17       	cp	r28, r24
    1ce4:	78 f3       	brcs	.-34     	; 0x1cc4 <udc_process_setup+0x564>
    1ce6:	d0 c0       	rjmp	.+416    	; 0x1e88 <udc_process_setup+0x728>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	e1 f4       	brne	.+56     	; 0x1d24 <udc_process_setup+0x5c4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cec:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <udd_g_ctrlreq+0x1>
    1cf0:	9b 30       	cpi	r25, 0x0B	; 11
    1cf2:	c1 f4       	brne	.+48     	; 0x1d24 <udc_process_setup+0x5c4>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1cf4:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    1cf8:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    1cfc:	89 2b       	or	r24, r25
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <udc_process_setup+0x5a2>
    1d00:	46 c0       	rjmp	.+140    	; 0x1d8e <udc_process_setup+0x62e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1d02:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1d06:	88 23       	and	r24, r24
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <udc_process_setup+0x5ac>
    1d0a:	41 c0       	rjmp	.+130    	; 0x1d8e <udc_process_setup+0x62e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d0c:	e8 e9       	ldi	r30, 0x98	; 152
    1d0e:	f4 e2       	ldi	r31, 0x24	; 36
    1d10:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1d12:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1d14:	8c 2f       	mov	r24, r28
    1d16:	54 dc       	rcall	.-1880   	; 0x15c0 <udc_iface_disable>
    1d18:	88 23       	and	r24, r24
    1d1a:	c9 f1       	breq	.+114    	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1d1c:	6d 2f       	mov	r22, r29
    1d1e:	8c 2f       	mov	r24, r28
    1d20:	91 dc       	rcall	.-1758   	; 0x1644 <udc_iface_enable>
    1d22:	33 c0       	rjmp	.+102    	; 0x1d8a <udc_process_setup+0x62a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	99 f5       	brne	.+102    	; 0x1d8e <udc_process_setup+0x62e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d28:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <udd_g_ctrlreq+0x1>
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	19 f0       	breq	.+6      	; 0x1d36 <udc_process_setup+0x5d6>
    1d30:	83 30       	cpi	r24, 0x03	; 3
    1d32:	89 f0       	breq	.+34     	; 0x1d56 <udc_process_setup+0x5f6>
    1d34:	29 c0       	rjmp	.+82     	; 0x1d88 <udc_process_setup+0x628>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d36:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    1d3a:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    1d3e:	89 2b       	or	r24, r25
    1d40:	31 f5       	brne	.+76     	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1d42:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    1d46:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x3>
    1d4a:	89 2b       	or	r24, r25
    1d4c:	01 f5       	brne	.+64     	; 0x1d8e <udc_process_setup+0x62e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d4e:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x4>
    1d52:	df d4       	rcall	.+2494   	; 0x2712 <udd_ep_clear_halt>
    1d54:	1a c0       	rjmp	.+52     	; 0x1d8a <udc_process_setup+0x62a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d56:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    1d5a:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    1d5e:	89 2b       	or	r24, r25
    1d60:	b1 f4       	brne	.+44     	; 0x1d8e <udc_process_setup+0x62e>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1d62:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x2>
    1d66:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x3>
    1d6a:	89 2b       	or	r24, r25
    1d6c:	81 f4       	brne	.+32     	; 0x1d8e <udc_process_setup+0x62e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d6e:	c8 e9       	ldi	r28, 0x98	; 152
    1d70:	d4 e2       	ldi	r29, 0x24	; 36
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	bd d5       	rcall	.+2938   	; 0x28f0 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d76:	8c 81       	ldd	r24, Y+4	; 0x04
    1d78:	20 d6       	rcall	.+3136   	; 0x29ba <udd_ep_set_halt>
    1d7a:	07 c0       	rjmp	.+14     	; 0x1d8a <udc_process_setup+0x62a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	05 c0       	rjmp	.+10     	; 0x1d8a <udc_process_setup+0x62a>
				break;
			}
		}
#endif
	}
	return false;
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	03 c0       	rjmp	.+6      	; 0x1d8a <udc_process_setup+0x62a>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <udc_process_setup+0x62a>
				break;
			}
		}
#endif
	}
	return false;
    1d88:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	7e c0       	rjmp	.+252    	; 0x1e8a <udc_process_setup+0x72a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1d8e:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq>
    1d92:	8f 71       	andi	r24, 0x1F	; 31
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	71 f5       	brne	.+92     	; 0x1df4 <udc_process_setup+0x694>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d98:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1d9c:	88 23       	and	r24, r24
    1d9e:	51 f1       	breq	.+84     	; 0x1df4 <udc_process_setup+0x694>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1da0:	00 91 9c 24 	lds	r16, 0x249C	; 0x80249c <udd_g_ctrlreq+0x4>
    1da4:	10 91 9d 24 	lds	r17, 0x249D	; 0x80249d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1da8:	c0 91 dd 20 	lds	r28, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1dac:	d0 91 de 20 	lds	r29, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1db0:	e8 81       	ld	r30, Y
    1db2:	f9 81       	ldd	r31, Y+1	; 0x01
    1db4:	84 81       	ldd	r24, Z+4	; 0x04
    1db6:	08 17       	cp	r16, r24
    1db8:	e8 f4       	brcc	.+58     	; 0x1df4 <udc_process_setup+0x694>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1dba:	60 e0       	ldi	r22, 0x00	; 0
    1dbc:	80 2f       	mov	r24, r16
    1dbe:	c6 db       	rcall	.-2164   	; 0x154c <udc_update_iface_desc>
    1dc0:	88 23       	and	r24, r24
    1dc2:	c1 f0       	breq	.+48     	; 0x1df4 <udc_process_setup+0x694>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	ff 27       	eor	r31, r31
    1dc8:	cf 01       	movw	r24, r30
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd2:	e8 0f       	add	r30, r24
    1dd4:	f9 1f       	adc	r31, r25
    1dd6:	c0 81       	ld	r28, Z
    1dd8:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1dda:	ee 81       	ldd	r30, Y+6	; 0x06
    1ddc:	ff 81       	ldd	r31, Y+7	; 0x07
    1dde:	09 95       	icall
    1de0:	68 2f       	mov	r22, r24
    1de2:	80 2f       	mov	r24, r16
    1de4:	b3 db       	rcall	.-2202   	; 0x154c <udc_update_iface_desc>
    1de6:	88 23       	and	r24, r24
    1de8:	29 f0       	breq	.+10     	; 0x1df4 <udc_process_setup+0x694>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1dea:	ec 81       	ldd	r30, Y+4	; 0x04
    1dec:	fd 81       	ldd	r31, Y+5	; 0x05
    1dee:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1df0:	81 11       	cpse	r24, r1
    1df2:	4b c0       	rjmp	.+150    	; 0x1e8a <udc_process_setup+0x72a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1df4:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq>
    1df8:	8f 71       	andi	r24, 0x1F	; 31
    1dfa:	82 30       	cpi	r24, 0x02	; 2
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <udc_process_setup+0x6a0>
    1dfe:	40 c0       	rjmp	.+128    	; 0x1e80 <udc_process_setup+0x720>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1e00:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1e04:	88 23       	and	r24, r24
    1e06:	b1 f1       	breq	.+108    	; 0x1e74 <udc_process_setup+0x714>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e08:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1e0c:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1e10:	ed 91       	ld	r30, X+
    1e12:	fc 91       	ld	r31, X
    1e14:	11 97       	sbiw	r26, 0x01	; 1
    1e16:	84 81       	ldd	r24, Z+4	; 0x04
    1e18:	88 23       	and	r24, r24
    1e1a:	71 f1       	breq	.+92     	; 0x1e78 <udc_process_setup+0x718>
    1e1c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e1e:	ec 2f       	mov	r30, r28
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	ee 0f       	add	r30, r30
    1e24:	ff 1f       	adc	r31, r31
    1e26:	12 96       	adiw	r26, 0x02	; 2
    1e28:	8d 91       	ld	r24, X+
    1e2a:	9c 91       	ld	r25, X
    1e2c:	13 97       	sbiw	r26, 0x03	; 3
    1e2e:	e8 0f       	add	r30, r24
    1e30:	f9 1f       	adc	r31, r25
    1e32:	00 81       	ld	r16, Z
    1e34:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e36:	d8 01       	movw	r26, r16
    1e38:	16 96       	adiw	r26, 0x06	; 6
    1e3a:	ed 91       	ld	r30, X+
    1e3c:	fc 91       	ld	r31, X
    1e3e:	17 97       	sbiw	r26, 0x07	; 7
    1e40:	09 95       	icall
    1e42:	68 2f       	mov	r22, r24
    1e44:	8c 2f       	mov	r24, r28
    1e46:	82 db       	rcall	.-2300   	; 0x154c <udc_update_iface_desc>
    1e48:	88 23       	and	r24, r24
    1e4a:	f9 f0       	breq	.+62     	; 0x1e8a <udc_process_setup+0x72a>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1e4c:	d8 01       	movw	r26, r16
    1e4e:	14 96       	adiw	r26, 0x04	; 4
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	15 97       	sbiw	r26, 0x05	; 5
    1e56:	09 95       	icall
    1e58:	81 11       	cpse	r24, r1
    1e5a:	17 c0       	rjmp	.+46     	; 0x1e8a <udc_process_setup+0x72a>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1e5c:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e5e:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1e62:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1e66:	ed 91       	ld	r30, X+
    1e68:	fc 91       	ld	r31, X
    1e6a:	11 97       	sbiw	r26, 0x01	; 1
    1e6c:	94 81       	ldd	r25, Z+4	; 0x04
    1e6e:	c9 17       	cp	r28, r25
    1e70:	b0 f2       	brcs	.-84     	; 0x1e1e <udc_process_setup+0x6be>
    1e72:	0b c0       	rjmp	.+22     	; 0x1e8a <udc_process_setup+0x72a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	09 c0       	rjmp	.+18     	; 0x1e8a <udc_process_setup+0x72a>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <udc_process_setup+0x72a>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <udc_process_setup+0x72a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <udc_process_setup+0x72a>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <udc_process_setup+0x72a>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	08 95       	ret

00001e94 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1e94:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1e96:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1e98:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1e9a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1e9c:	60 83       	st	Z, r22
	ret                             // Return to caller
    1e9e:	08 95       	ret

00001ea0 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1ea0:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1ea4:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1ea6:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1ea8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1eac:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1eae:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1eb2:	08 95       	ret

00001eb4 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1eb4:	81 11       	cpse	r24, r1
    1eb6:	22 c0       	rjmp	.+68     	; 0x1efc <udd_sleep_mode+0x48>
    1eb8:	90 91 78 22 	lds	r25, 0x2278	; 0x802278 <udd_b_idle>
    1ebc:	99 23       	and	r25, r25
    1ebe:	d9 f0       	breq	.+54     	; 0x1ef6 <udd_sleep_mode+0x42>
    1ec0:	90 91 87 2e 	lds	r25, 0x2E87	; 0x802e87 <sleepmgr_locks+0x1>
    1ec4:	91 11       	cpse	r25, r1
    1ec6:	01 c0       	rjmp	.+2      	; 0x1eca <udd_sleep_mode+0x16>
    1ec8:	ff cf       	rjmp	.-2      	; 0x1ec8 <udd_sleep_mode+0x14>
    1eca:	2f b7       	in	r18, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	e6 e8       	ldi	r30, 0x86	; 134
    1ed0:	fe e2       	ldi	r31, 0x2E	; 46
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	91 50       	subi	r25, 0x01	; 1
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	2f bf       	out	0x3f, r18	; 63
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <udd_sleep_mode+0x42>
    1edc:	90 91 87 2e 	lds	r25, 0x2E87	; 0x802e87 <sleepmgr_locks+0x1>
    1ee0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <udd_sleep_mode+0x32>
    1ee4:	ff cf       	rjmp	.-2      	; 0x1ee4 <udd_sleep_mode+0x30>
    1ee6:	2f b7       	in	r18, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	e6 e8       	ldi	r30, 0x86	; 134
    1eec:	fe e2       	ldi	r31, 0x2E	; 46
    1eee:	91 81       	ldd	r25, Z+1	; 0x01
    1ef0:	9f 5f       	subi	r25, 0xFF	; 255
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	2f bf       	out	0x3f, r18	; 63
    1ef6:	80 93 78 22 	sts	0x2278, r24	; 0x802278 <udd_b_idle>
    1efa:	08 95       	ret
    1efc:	90 91 78 22 	lds	r25, 0x2278	; 0x802278 <udd_b_idle>
    1f00:	99 23       	and	r25, r25
    1f02:	61 f3       	breq	.-40     	; 0x1edc <udd_sleep_mode+0x28>
    1f04:	f8 cf       	rjmp	.-16     	; 0x1ef6 <udd_sleep_mode+0x42>

00001f06 <udd_ctrl_init>:
    1f06:	0f 93       	push	r16
    1f08:	e8 ec       	ldi	r30, 0xC8	; 200
    1f0a:	f4 e0       	ldi	r31, 0x04	; 4
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8f 7d       	andi	r24, 0xDF	; 223
    1f10:	80 83       	st	Z, r24
    1f12:	80 81       	ld	r24, Z
    1f14:	8f 7d       	andi	r24, 0xDF	; 223
    1f16:	80 83       	st	Z, r24
    1f18:	ec e3       	ldi	r30, 0x3C	; 60
    1f1a:	f2 e2       	ldi	r31, 0x22	; 34
    1f1c:	02 e0       	ldi	r16, 0x02	; 2
    1f1e:	05 93       	las	Z, r16
    1f20:	10 92 3e 22 	sts	0x223E, r1	; 0x80223e <udd_sram+0x1a>
    1f24:	10 92 3f 22 	sts	0x223F, r1	; 0x80223f <udd_sram+0x1b>
    1f28:	00 e2       	ldi	r16, 0x20	; 32
    1f2a:	06 93       	lac	Z, r16
    1f2c:	00 e4       	ldi	r16, 0x40	; 64
    1f2e:	06 93       	lac	Z, r16
    1f30:	e4 e3       	ldi	r30, 0x34	; 52
    1f32:	f2 e2       	ldi	r31, 0x22	; 34
    1f34:	00 e2       	ldi	r16, 0x20	; 32
    1f36:	06 93       	lac	Z, r16
    1f38:	00 e4       	ldi	r16, 0x40	; 64
    1f3a:	06 93       	lac	Z, r16
    1f3c:	e8 e9       	ldi	r30, 0x98	; 152
    1f3e:	f4 e2       	ldi	r31, 0x24	; 36
    1f40:	14 86       	std	Z+12, r1	; 0x0c
    1f42:	15 86       	std	Z+13, r1	; 0x0d
    1f44:	16 86       	std	Z+14, r1	; 0x0e
    1f46:	17 86       	std	Z+15, r1	; 0x0f
    1f48:	12 86       	std	Z+10, r1	; 0x0a
    1f4a:	13 86       	std	Z+11, r1	; 0x0b
    1f4c:	10 92 21 22 	sts	0x2221, r1	; 0x802221 <udd_ep_control_state>
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <udd_ctrl_stall_data>:
    1f54:	0f 93       	push	r16
    1f56:	85 e0       	ldi	r24, 0x05	; 5
    1f58:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    1f5c:	ed e3       	ldi	r30, 0x3D	; 61
    1f5e:	f2 e2       	ldi	r31, 0x22	; 34
    1f60:	04 e0       	ldi	r16, 0x04	; 4
    1f62:	05 93       	las	Z, r16
    1f64:	e5 e3       	ldi	r30, 0x35	; 53
    1f66:	f2 e2       	ldi	r31, 0x22	; 34
    1f68:	04 e0       	ldi	r16, 0x04	; 4
    1f6a:	05 93       	las	Z, r16
    1f6c:	0f 91       	pop	r16
    1f6e:	08 95       	ret

00001f70 <udd_ctrl_send_zlp_in>:
    1f70:	0f 93       	push	r16
    1f72:	83 e0       	ldi	r24, 0x03	; 3
    1f74:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    1f78:	10 92 3e 22 	sts	0x223E, r1	; 0x80223e <udd_sram+0x1a>
    1f7c:	10 92 3f 22 	sts	0x223F, r1	; 0x80223f <udd_sram+0x1b>
    1f80:	ec e3       	ldi	r30, 0x3C	; 60
    1f82:	f2 e2       	ldi	r31, 0x22	; 34
    1f84:	02 e0       	ldi	r16, 0x02	; 2
    1f86:	06 93       	lac	Z, r16
    1f88:	0f 91       	pop	r16
    1f8a:	08 95       	ret

00001f8c <udd_ctrl_endofrequest>:
    1f8c:	e0 91 a4 24 	lds	r30, 0x24A4	; 0x8024a4 <udd_g_ctrlreq+0xc>
    1f90:	f0 91 a5 24 	lds	r31, 0x24A5	; 0x8024a5 <udd_g_ctrlreq+0xd>
    1f94:	30 97       	sbiw	r30, 0x00	; 0
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <udd_ctrl_endofrequest+0xe>
    1f98:	09 95       	icall
    1f9a:	08 95       	ret

00001f9c <udd_ctrl_in_sent>:
    1f9c:	0f 93       	push	r16
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    1fa6:	83 30       	cpi	r24, 0x03	; 3
    1fa8:	19 f4       	brne	.+6      	; 0x1fb0 <udd_ctrl_in_sent+0x14>
    1faa:	f0 df       	rcall	.-32     	; 0x1f8c <udd_ctrl_endofrequest>
    1fac:	ac df       	rcall	.-168    	; 0x1f06 <udd_ctrl_init>
    1fae:	5e c0       	rjmp	.+188    	; 0x206c <udd_ctrl_in_sent+0xd0>
    1fb0:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    1fb4:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    1fb8:	c0 91 a2 24 	lds	r28, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0xa>
    1fbc:	d0 91 a3 24 	lds	r29, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0xb>
    1fc0:	c8 1b       	sub	r28, r24
    1fc2:	d9 0b       	sbc	r29, r25
    1fc4:	71 f5       	brne	.+92     	; 0x2022 <udd_ctrl_in_sent+0x86>
    1fc6:	20 91 1f 22 	lds	r18, 0x221F	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    1fca:	30 91 20 22 	lds	r19, 0x2220	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fce:	82 0f       	add	r24, r18
    1fd0:	93 1f       	adc	r25, r19
    1fd2:	80 93 1f 22 	sts	0x221F, r24	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    1fd6:	90 93 20 22 	sts	0x2220, r25	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fda:	20 91 9e 24 	lds	r18, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    1fde:	30 91 9f 24 	lds	r19, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    1fe2:	82 17       	cp	r24, r18
    1fe4:	93 07       	cpc	r25, r19
    1fe6:	21 f0       	breq	.+8      	; 0x1ff0 <udd_ctrl_in_sent+0x54>
    1fe8:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <b_shortpacket.5272>
    1fec:	88 23       	and	r24, r24
    1fee:	41 f0       	breq	.+16     	; 0x2000 <udd_ctrl_in_sent+0x64>
    1ff0:	84 e0       	ldi	r24, 0x04	; 4
    1ff2:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    1ff6:	e4 e3       	ldi	r30, 0x34	; 52
    1ff8:	f2 e2       	ldi	r31, 0x22	; 34
    1ffa:	02 e0       	ldi	r16, 0x02	; 2
    1ffc:	06 93       	lac	Z, r16
    1ffe:	36 c0       	rjmp	.+108    	; 0x206c <udd_ctrl_in_sent+0xd0>
    2000:	e0 91 a6 24 	lds	r30, 0x24A6	; 0x8024a6 <udd_g_ctrlreq+0xe>
    2004:	f0 91 a7 24 	lds	r31, 0x24A7	; 0x8024a7 <udd_g_ctrlreq+0xf>
    2008:	30 97       	sbiw	r30, 0x00	; 0
    200a:	99 f0       	breq	.+38     	; 0x2032 <udd_ctrl_in_sent+0x96>
    200c:	09 95       	icall
    200e:	88 23       	and	r24, r24
    2010:	81 f0       	breq	.+32     	; 0x2032 <udd_ctrl_in_sent+0x96>
    2012:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    2016:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    201a:	c0 91 a2 24 	lds	r28, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0xa>
    201e:	d0 91 a3 24 	lds	r29, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0xb>
    2022:	c0 34       	cpi	r28, 0x40	; 64
    2024:	d1 05       	cpc	r29, r1
    2026:	28 f0       	brcs	.+10     	; 0x2032 <udd_ctrl_in_sent+0x96>
    2028:	10 92 e6 20 	sts	0x20E6, r1	; 0x8020e6 <b_shortpacket.5272>
    202c:	c0 e4       	ldi	r28, 0x40	; 64
    202e:	d0 e0       	ldi	r29, 0x00	; 0
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <udd_ctrl_in_sent+0x9c>
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <b_shortpacket.5272>
    2038:	e4 e2       	ldi	r30, 0x24	; 36
    203a:	f2 e2       	ldi	r31, 0x22	; 34
    203c:	c2 8f       	std	Z+26, r28	; 0x1a
    203e:	d3 8f       	std	Z+27, r29	; 0x1b
    2040:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    2044:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2048:	20 91 a0 24 	lds	r18, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x8>
    204c:	30 91 a1 24 	lds	r19, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0x9>
    2050:	28 0f       	add	r18, r24
    2052:	39 1f       	adc	r19, r25
    2054:	24 8f       	std	Z+28, r18	; 0x1c
    2056:	35 8f       	std	Z+29, r19	; 0x1d
    2058:	c8 0f       	add	r28, r24
    205a:	d9 1f       	adc	r29, r25
    205c:	c0 93 1d 22 	sts	0x221D, r28	; 0x80221d <udd_ctrl_payload_nb_trans>
    2060:	d0 93 1e 22 	sts	0x221E, r29	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2064:	ec e3       	ldi	r30, 0x3C	; 60
    2066:	f2 e2       	ldi	r31, 0x22	; 34
    2068:	02 e0       	ldi	r16, 0x02	; 2
    206a:	06 93       	lac	Z, r16
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	0f 91       	pop	r16
    2072:	08 95       	ret

00002074 <udd_ep_get_size>:
    2074:	fc 01       	movw	r30, r24
    2076:	81 81       	ldd	r24, Z+1	; 0x01
    2078:	e8 2f       	mov	r30, r24
    207a:	e7 70       	andi	r30, 0x07	; 7
    207c:	8e 2f       	mov	r24, r30
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	fc 01       	movw	r30, r24
    2082:	31 97       	sbiw	r30, 0x01	; 1
    2084:	e7 30       	cpi	r30, 0x07	; 7
    2086:	f1 05       	cpc	r31, r1
    2088:	c0 f4       	brcc	.+48     	; 0x20ba <udd_ep_get_size+0x46>
    208a:	e2 5e       	subi	r30, 0xE2	; 226
    208c:	fe 4f       	sbci	r31, 0xFE	; 254
    208e:	8d c6       	rjmp	.+3354   	; 0x2daa <__tablejump2__>
    2090:	80 e1       	ldi	r24, 0x10	; 16
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	08 95       	ret
    2096:	80 e2       	ldi	r24, 0x20	; 32
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	08 95       	ret
    209c:	80 e4       	ldi	r24, 0x40	; 64
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	08 95       	ret
    20a2:	80 e8       	ldi	r24, 0x80	; 128
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	08 95       	ret
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	08 95       	ret
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	92 e0       	ldi	r25, 0x02	; 2
    20b2:	08 95       	ret
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	93 e0       	ldi	r25, 0x03	; 3
    20b8:	08 95       	ret
    20ba:	88 e0       	ldi	r24, 0x08	; 8
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	08 95       	ret

000020c0 <udd_ep_get_job>:
    20c0:	28 2f       	mov	r18, r24
    20c2:	2f 70       	andi	r18, 0x0F	; 15
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	22 0f       	add	r18, r18
    20c8:	33 1f       	adc	r19, r19
    20ca:	08 2e       	mov	r0, r24
    20cc:	00 0c       	add	r0, r0
    20ce:	99 0b       	sbc	r25, r25
    20d0:	88 27       	eor	r24, r24
    20d2:	99 0f       	add	r25, r25
    20d4:	88 1f       	adc	r24, r24
    20d6:	99 27       	eor	r25, r25
    20d8:	82 0f       	add	r24, r18
    20da:	93 1f       	adc	r25, r19
    20dc:	02 97       	sbiw	r24, 0x02	; 2
    20de:	9c 01       	movw	r18, r24
    20e0:	22 0f       	add	r18, r18
    20e2:	33 1f       	adc	r19, r19
    20e4:	22 0f       	add	r18, r18
    20e6:	33 1f       	adc	r19, r19
    20e8:	22 0f       	add	r18, r18
    20ea:	33 1f       	adc	r19, r19
    20ec:	82 0f       	add	r24, r18
    20ee:	93 1f       	adc	r25, r19
    20f0:	89 55       	subi	r24, 0x59	; 89
    20f2:	9e 4d       	sbci	r25, 0xDE	; 222
    20f4:	08 95       	ret

000020f6 <udd_ctrl_interrupt_tc_setup>:
    20f6:	0f 93       	push	r16
    20f8:	cf 93       	push	r28
    20fa:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    20fe:	80 ff       	sbrs	r24, 0
    2100:	62 c0       	rjmp	.+196    	; 0x21c6 <udd_ctrl_interrupt_tc_setup+0xd0>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2108:	e4 e3       	ldi	r30, 0x34	; 52
    210a:	f2 e2       	ldi	r31, 0x22	; 34
    210c:	00 e8       	ldi	r16, 0x80	; 128
    210e:	06 93       	lac	Z, r16
    2110:	ec e3       	ldi	r30, 0x3C	; 60
    2112:	f2 e2       	ldi	r31, 0x22	; 34
    2114:	00 e8       	ldi	r16, 0x80	; 128
    2116:	06 93       	lac	Z, r16
    2118:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    211c:	e4 e3       	ldi	r30, 0x34	; 52
    211e:	f2 e2       	ldi	r31, 0x22	; 34
    2120:	00 e1       	ldi	r16, 0x10	; 16
    2122:	06 93       	lac	Z, r16
    2124:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2128:	88 23       	and	r24, r24
    212a:	29 f0       	breq	.+10     	; 0x2136 <udd_ctrl_interrupt_tc_setup+0x40>
    212c:	83 50       	subi	r24, 0x03	; 3
    212e:	82 30       	cpi	r24, 0x02	; 2
    2130:	08 f4       	brcc	.+2      	; 0x2134 <udd_ctrl_interrupt_tc_setup+0x3e>
    2132:	2c df       	rcall	.-424    	; 0x1f8c <udd_ctrl_endofrequest>
    2134:	e8 de       	rcall	.-560    	; 0x1f06 <udd_ctrl_init>
    2136:	80 91 36 22 	lds	r24, 0x2236	; 0x802236 <udd_sram+0x12>
    213a:	90 91 37 22 	lds	r25, 0x2237	; 0x802237 <udd_sram+0x13>
    213e:	08 97       	sbiw	r24, 0x08	; 8
    2140:	09 f0       	breq	.+2      	; 0x2144 <udd_ctrl_interrupt_tc_setup+0x4e>
    2142:	43 c0       	rjmp	.+134    	; 0x21ca <udd_ctrl_interrupt_tc_setup+0xd4>
    2144:	88 e0       	ldi	r24, 0x08	; 8
    2146:	ed ed       	ldi	r30, 0xDD	; 221
    2148:	f1 e2       	ldi	r31, 0x21	; 33
    214a:	a8 e9       	ldi	r26, 0x98	; 152
    214c:	b4 e2       	ldi	r27, 0x24	; 36
    214e:	01 90       	ld	r0, Z+
    2150:	0d 92       	st	X+, r0
    2152:	8a 95       	dec	r24
    2154:	e1 f7       	brne	.-8      	; 0x214e <udd_ctrl_interrupt_tc_setup+0x58>
    2156:	e8 ec       	ldi	r30, 0xC8	; 200
    2158:	f4 e0       	ldi	r31, 0x04	; 4
    215a:	80 81       	ld	r24, Z
    215c:	80 62       	ori	r24, 0x20	; 32
    215e:	80 83       	st	Z, r24
    2160:	80 81       	ld	r24, Z
    2162:	80 62       	ori	r24, 0x20	; 32
    2164:	80 83       	st	Z, r24
    2166:	fc da       	rcall	.-2568   	; 0x1760 <udc_process_setup>
    2168:	c8 2f       	mov	r28, r24
    216a:	81 11       	cpse	r24, r1
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <udd_ctrl_interrupt_tc_setup+0x7e>
    216e:	f2 de       	rcall	.-540    	; 0x1f54 <udd_ctrl_stall_data>
    2170:	c1 e0       	ldi	r28, 0x01	; 1
    2172:	2c c0       	rjmp	.+88     	; 0x21cc <udd_ctrl_interrupt_tc_setup+0xd6>
    2174:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq>
    2178:	88 23       	and	r24, r24
    217a:	6c f4       	brge	.+26     	; 0x2196 <udd_ctrl_interrupt_tc_setup+0xa0>
    217c:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2180:	10 92 20 22 	sts	0x2220, r1	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2184:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    2188:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    2192:	04 df       	rcall	.-504    	; 0x1f9c <udd_ctrl_in_sent>
    2194:	1b c0       	rjmp	.+54     	; 0x21cc <udd_ctrl_interrupt_tc_setup+0xd6>
    2196:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    219a:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    219e:	89 2b       	or	r24, r25
    21a0:	11 f4       	brne	.+4      	; 0x21a6 <udd_ctrl_interrupt_tc_setup+0xb0>
    21a2:	e6 de       	rcall	.-564    	; 0x1f70 <udd_ctrl_send_zlp_in>
    21a4:	13 c0       	rjmp	.+38     	; 0x21cc <udd_ctrl_interrupt_tc_setup+0xd6>
    21a6:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    21aa:	10 92 20 22 	sts	0x2220, r1	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    21ae:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    21b2:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    21bc:	e4 e3       	ldi	r30, 0x34	; 52
    21be:	f2 e2       	ldi	r31, 0x22	; 34
    21c0:	02 e0       	ldi	r16, 0x02	; 2
    21c2:	06 93       	lac	Z, r16
    21c4:	03 c0       	rjmp	.+6      	; 0x21cc <udd_ctrl_interrupt_tc_setup+0xd6>
    21c6:	c0 e0       	ldi	r28, 0x00	; 0
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <udd_ctrl_interrupt_tc_setup+0xd6>
    21ca:	c1 e0       	ldi	r28, 0x01	; 1
    21cc:	8c 2f       	mov	r24, r28
    21ce:	cf 91       	pop	r28
    21d0:	0f 91       	pop	r16
    21d2:	08 95       	ret

000021d4 <udd_ep_trans_complet>:
    21d4:	8f 92       	push	r8
    21d6:	9f 92       	push	r9
    21d8:	af 92       	push	r10
    21da:	bf 92       	push	r11
    21dc:	df 92       	push	r13
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	d8 2e       	mov	r13, r24
    21ec:	69 df       	rcall	.-302    	; 0x20c0 <udd_ep_get_job>
    21ee:	8c 01       	movw	r16, r24
    21f0:	bd 2c       	mov	r11, r13
    21f2:	bb 1c       	adc	r11, r11
    21f4:	bb 24       	eor	r11, r11
    21f6:	bb 1c       	adc	r11, r11
    21f8:	cd 2d       	mov	r28, r13
    21fa:	cf 70       	andi	r28, 0x0F	; 15
    21fc:	d0 e0       	ldi	r29, 0x00	; 0
    21fe:	cc 0f       	add	r28, r28
    2200:	dd 1f       	adc	r29, r29
    2202:	cb 0d       	add	r28, r11
    2204:	d1 1d       	adc	r29, r1
    2206:	ce 01       	movw	r24, r28
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	9c 01       	movw	r18, r24
    2216:	2c 5c       	subi	r18, 0xCC	; 204
    2218:	3d 4d       	sbci	r19, 0xDD	; 221
    221a:	79 01       	movw	r14, r18
    221c:	c9 01       	movw	r24, r18
    221e:	2a df       	rcall	.-428    	; 0x2074 <udd_ep_get_size>
    2220:	4c 01       	movw	r8, r24
    2222:	bb 20       	and	r11, r11
    2224:	09 f4       	brne	.+2      	; 0x2228 <udd_ep_trans_complet+0x54>
    2226:	70 c0       	rjmp	.+224    	; 0x2308 <udd_ep_trans_complet+0x134>
    2228:	fe 01       	movw	r30, r28
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	ee 0f       	add	r30, r30
    2234:	ff 1f       	adc	r31, r31
    2236:	ec 5d       	subi	r30, 0xDC	; 220
    2238:	fd 4d       	sbci	r31, 0xDD	; 221
    223a:	26 89       	ldd	r18, Z+22	; 0x16
    223c:	37 89       	ldd	r19, Z+23	; 0x17
    223e:	d8 01       	movw	r26, r16
    2240:	15 96       	adiw	r26, 0x05	; 5
    2242:	8d 91       	ld	r24, X+
    2244:	9c 91       	ld	r25, X
    2246:	16 97       	sbiw	r26, 0x06	; 6
    2248:	82 0f       	add	r24, r18
    224a:	93 1f       	adc	r25, r19
    224c:	15 96       	adiw	r26, 0x05	; 5
    224e:	8d 93       	st	X+, r24
    2250:	9c 93       	st	X, r25
    2252:	16 97       	sbiw	r26, 0x06	; 6
    2254:	13 96       	adiw	r26, 0x03	; 3
    2256:	2d 91       	ld	r18, X+
    2258:	3c 91       	ld	r19, X
    225a:	14 97       	sbiw	r26, 0x04	; 4
    225c:	82 17       	cp	r24, r18
    225e:	93 07       	cpc	r25, r19
    2260:	09 f4       	brne	.+2      	; 0x2264 <udd_ep_trans_complet+0x90>
    2262:	3c c0       	rjmp	.+120    	; 0x22dc <udd_ep_trans_complet+0x108>
    2264:	28 1b       	sub	r18, r24
    2266:	39 0b       	sbc	r19, r25
    2268:	21 15       	cp	r18, r1
    226a:	b4 e0       	ldi	r27, 0x04	; 4
    226c:	3b 07       	cpc	r19, r27
    226e:	38 f0       	brcs	.+14     	; 0x227e <udd_ep_trans_complet+0xaa>
    2270:	2f ef       	ldi	r18, 0xFF	; 255
    2272:	33 e0       	ldi	r19, 0x03	; 3
    2274:	c9 01       	movw	r24, r18
    2276:	b4 01       	movw	r22, r8
    2278:	71 d5       	rcall	.+2786   	; 0x2d5c <__udivmodhi4>
    227a:	28 1b       	sub	r18, r24
    227c:	39 0b       	sbc	r19, r25
    227e:	f8 01       	movw	r30, r16
    2280:	80 81       	ld	r24, Z
    2282:	81 ff       	sbrs	r24, 1
    2284:	09 c0       	rjmp	.+18     	; 0x2298 <udd_ep_trans_complet+0xc4>
    2286:	c9 01       	movw	r24, r18
    2288:	b4 01       	movw	r22, r8
    228a:	68 d5       	rcall	.+2768   	; 0x2d5c <__udivmodhi4>
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	89 2b       	or	r24, r25
    2290:	09 f0       	breq	.+2      	; 0x2294 <udd_ep_trans_complet+0xc0>
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	84 2f       	mov	r24, r20
    2296:	01 c0       	rjmp	.+2      	; 0x229a <udd_ep_trans_complet+0xc6>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	d8 01       	movw	r26, r16
    229c:	9c 91       	ld	r25, X
    229e:	80 fb       	bst	r24, 0
    22a0:	91 f9       	bld	r25, 1
    22a2:	9c 93       	st	X, r25
    22a4:	cc 0f       	add	r28, r28
    22a6:	dd 1f       	adc	r29, r29
    22a8:	cc 0f       	add	r28, r28
    22aa:	dd 1f       	adc	r29, r29
    22ac:	cc 0f       	add	r28, r28
    22ae:	dd 1f       	adc	r29, r29
    22b0:	cc 5d       	subi	r28, 0xDC	; 220
    22b2:	dd 4d       	sbci	r29, 0xDD	; 221
    22b4:	1e 8a       	std	Y+22, r1	; 0x16
    22b6:	1f 8a       	std	Y+23, r1	; 0x17
    22b8:	2a 8b       	std	Y+18, r18	; 0x12
    22ba:	3b 8b       	std	Y+19, r19	; 0x13
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	2d 91       	ld	r18, X+
    22c0:	3c 91       	ld	r19, X
    22c2:	12 97       	sbiw	r26, 0x02	; 2
    22c4:	15 96       	adiw	r26, 0x05	; 5
    22c6:	8d 91       	ld	r24, X+
    22c8:	9c 91       	ld	r25, X
    22ca:	16 97       	sbiw	r26, 0x06	; 6
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
    22d0:	8c 8b       	std	Y+20, r24	; 0x14
    22d2:	9d 8b       	std	Y+21, r25	; 0x15
    22d4:	f7 01       	movw	r30, r14
    22d6:	02 e0       	ldi	r16, 0x02	; 2
    22d8:	06 93       	lac	Z, r16
    22da:	ca c0       	rjmp	.+404    	; 0x2470 <udd_ep_trans_complet+0x29c>
    22dc:	d8 01       	movw	r26, r16
    22de:	8c 91       	ld	r24, X
    22e0:	81 ff       	sbrs	r24, 1
    22e2:	b3 c0       	rjmp	.+358    	; 0x244a <udd_ep_trans_complet+0x276>
    22e4:	8d 7f       	andi	r24, 0xFD	; 253
    22e6:	8c 93       	st	X, r24
    22e8:	cc 0f       	add	r28, r28
    22ea:	dd 1f       	adc	r29, r29
    22ec:	cc 0f       	add	r28, r28
    22ee:	dd 1f       	adc	r29, r29
    22f0:	cc 0f       	add	r28, r28
    22f2:	dd 1f       	adc	r29, r29
    22f4:	cc 5d       	subi	r28, 0xDC	; 220
    22f6:	dd 4d       	sbci	r29, 0xDD	; 221
    22f8:	1e 8a       	std	Y+22, r1	; 0x16
    22fa:	1f 8a       	std	Y+23, r1	; 0x17
    22fc:	1a 8a       	std	Y+18, r1	; 0x12
    22fe:	1b 8a       	std	Y+19, r1	; 0x13
    2300:	f7 01       	movw	r30, r14
    2302:	02 e0       	ldi	r16, 0x02	; 2
    2304:	06 93       	lac	Z, r16
    2306:	b4 c0       	rjmp	.+360    	; 0x2470 <udd_ep_trans_complet+0x29c>
    2308:	fe 01       	movw	r30, r28
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	ec 5d       	subi	r30, 0xDC	; 220
    2318:	fd 4d       	sbci	r31, 0xDD	; 221
    231a:	a2 88       	ldd	r10, Z+18	; 0x12
    231c:	b3 88       	ldd	r11, Z+19	; 0x13
    231e:	d8 01       	movw	r26, r16
    2320:	8c 91       	ld	r24, X
    2322:	82 ff       	sbrs	r24, 2
    2324:	19 c0       	rjmp	.+50     	; 0x2358 <udd_ep_trans_complet+0x184>
    2326:	11 96       	adiw	r26, 0x01	; 1
    2328:	ed 91       	ld	r30, X+
    232a:	fc 91       	ld	r31, X
    232c:	12 97       	sbiw	r26, 0x02	; 2
    232e:	15 96       	adiw	r26, 0x05	; 5
    2330:	2d 91       	ld	r18, X+
    2332:	3c 91       	ld	r19, X
    2334:	16 97       	sbiw	r26, 0x06	; 6
    2336:	13 96       	adiw	r26, 0x03	; 3
    2338:	8d 91       	ld	r24, X+
    233a:	9c 91       	ld	r25, X
    233c:	14 97       	sbiw	r26, 0x04	; 4
    233e:	b4 01       	movw	r22, r8
    2340:	0d d5       	rcall	.+2586   	; 0x2d5c <__udivmodhi4>
    2342:	b0 e4       	ldi	r27, 0x40	; 64
    2344:	db 9e       	mul	r13, r27
    2346:	b0 01       	movw	r22, r0
    2348:	11 24       	eor	r1, r1
    234a:	69 55       	subi	r22, 0x59	; 89
    234c:	7f 4d       	sbci	r23, 0xDF	; 223
    234e:	ac 01       	movw	r20, r24
    2350:	cf 01       	movw	r24, r30
    2352:	82 0f       	add	r24, r18
    2354:	93 1f       	adc	r25, r19
    2356:	3e d5       	rcall	.+2684   	; 0x2dd4 <memcpy>
    2358:	f8 01       	movw	r30, r16
    235a:	25 81       	ldd	r18, Z+5	; 0x05
    235c:	36 81       	ldd	r19, Z+6	; 0x06
    235e:	2a 0d       	add	r18, r10
    2360:	3b 1d       	adc	r19, r11
    2362:	25 83       	std	Z+5, r18	; 0x05
    2364:	36 83       	std	Z+6, r19	; 0x06
    2366:	83 81       	ldd	r24, Z+3	; 0x03
    2368:	94 81       	ldd	r25, Z+4	; 0x04
    236a:	82 17       	cp	r24, r18
    236c:	93 07       	cpc	r25, r19
    236e:	68 f4       	brcc	.+26     	; 0x238a <udd_ep_trans_complet+0x1b6>
    2370:	85 83       	std	Z+5, r24	; 0x05
    2372:	96 83       	std	Z+6, r25	; 0x06
    2374:	cc 0f       	add	r28, r28
    2376:	dd 1f       	adc	r29, r29
    2378:	cc 0f       	add	r28, r28
    237a:	dd 1f       	adc	r29, r29
    237c:	cc 0f       	add	r28, r28
    237e:	dd 1f       	adc	r29, r29
    2380:	cc 5d       	subi	r28, 0xDC	; 220
    2382:	dd 4d       	sbci	r29, 0xDD	; 221
    2384:	8e 89       	ldd	r24, Y+22	; 0x16
    2386:	9f 89       	ldd	r25, Y+23	; 0x17
    2388:	60 c0       	rjmp	.+192    	; 0x244a <udd_ep_trans_complet+0x276>
    238a:	fe 01       	movw	r30, r28
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	ec 5d       	subi	r30, 0xDC	; 220
    239a:	fd 4d       	sbci	r31, 0xDD	; 221
    239c:	46 89       	ldd	r20, Z+22	; 0x16
    239e:	57 89       	ldd	r21, Z+23	; 0x17
    23a0:	4a 15       	cp	r20, r10
    23a2:	5b 05       	cpc	r21, r11
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <udd_ep_trans_complet+0x1d4>
    23a6:	51 c0       	rjmp	.+162    	; 0x244a <udd_ep_trans_complet+0x276>
    23a8:	28 17       	cp	r18, r24
    23aa:	39 07       	cpc	r19, r25
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <udd_ep_trans_complet+0x1dc>
    23ae:	4d c0       	rjmp	.+154    	; 0x244a <udd_ep_trans_complet+0x276>
    23b0:	ac 01       	movw	r20, r24
    23b2:	42 1b       	sub	r20, r18
    23b4:	53 0b       	sbc	r21, r19
    23b6:	9a 01       	movw	r18, r20
    23b8:	21 15       	cp	r18, r1
    23ba:	54 e0       	ldi	r21, 0x04	; 4
    23bc:	35 07       	cpc	r19, r21
    23be:	50 f0       	brcs	.+20     	; 0x23d4 <udd_ep_trans_complet+0x200>
    23c0:	2f ef       	ldi	r18, 0xFF	; 255
    23c2:	33 e0       	ldi	r19, 0x03	; 3
    23c4:	c9 01       	movw	r24, r18
    23c6:	b4 01       	movw	r22, r8
    23c8:	c9 d4       	rcall	.+2450   	; 0x2d5c <__udivmodhi4>
    23ca:	d9 01       	movw	r26, r18
    23cc:	a8 1b       	sub	r26, r24
    23ce:	b9 0b       	sbc	r27, r25
    23d0:	cd 01       	movw	r24, r26
    23d2:	07 c0       	rjmp	.+14     	; 0x23e2 <udd_ep_trans_complet+0x20e>
    23d4:	c9 01       	movw	r24, r18
    23d6:	b4 01       	movw	r22, r8
    23d8:	c1 d4       	rcall	.+2434   	; 0x2d5c <__udivmodhi4>
    23da:	f9 01       	movw	r30, r18
    23dc:	e8 1b       	sub	r30, r24
    23de:	f9 0b       	sbc	r31, r25
    23e0:	cf 01       	movw	r24, r30
    23e2:	fe 01       	movw	r30, r28
    23e4:	ee 0f       	add	r30, r30
    23e6:	ff 1f       	adc	r31, r31
    23e8:	ee 0f       	add	r30, r30
    23ea:	ff 1f       	adc	r31, r31
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	ec 5d       	subi	r30, 0xDC	; 220
    23f2:	fd 4d       	sbci	r31, 0xDD	; 221
    23f4:	12 8a       	std	Z+18, r1	; 0x12
    23f6:	13 8a       	std	Z+19, r1	; 0x13
    23f8:	88 15       	cp	r24, r8
    23fa:	99 05       	cpc	r25, r9
    23fc:	78 f4       	brcc	.+30     	; 0x241c <udd_ep_trans_complet+0x248>
    23fe:	d8 01       	movw	r26, r16
    2400:	8c 91       	ld	r24, X
    2402:	84 60       	ori	r24, 0x04	; 4
    2404:	8c 93       	st	X, r24
    2406:	b0 e4       	ldi	r27, 0x40	; 64
    2408:	db 9e       	mul	r13, r27
    240a:	c0 01       	movw	r24, r0
    240c:	11 24       	eor	r1, r1
    240e:	89 55       	subi	r24, 0x59	; 89
    2410:	9f 4d       	sbci	r25, 0xDF	; 223
    2412:	84 8b       	std	Z+20, r24	; 0x14
    2414:	95 8b       	std	Z+21, r25	; 0x15
    2416:	86 8a       	std	Z+22, r8	; 0x16
    2418:	97 8a       	std	Z+23, r9	; 0x17
    241a:	13 c0       	rjmp	.+38     	; 0x2442 <udd_ep_trans_complet+0x26e>
    241c:	f8 01       	movw	r30, r16
    241e:	41 81       	ldd	r20, Z+1	; 0x01
    2420:	52 81       	ldd	r21, Z+2	; 0x02
    2422:	25 81       	ldd	r18, Z+5	; 0x05
    2424:	36 81       	ldd	r19, Z+6	; 0x06
    2426:	24 0f       	add	r18, r20
    2428:	35 1f       	adc	r19, r21
    242a:	cc 0f       	add	r28, r28
    242c:	dd 1f       	adc	r29, r29
    242e:	cc 0f       	add	r28, r28
    2430:	dd 1f       	adc	r29, r29
    2432:	cc 0f       	add	r28, r28
    2434:	dd 1f       	adc	r29, r29
    2436:	cc 5d       	subi	r28, 0xDC	; 220
    2438:	dd 4d       	sbci	r29, 0xDD	; 221
    243a:	2c 8b       	std	Y+20, r18	; 0x14
    243c:	3d 8b       	std	Y+21, r19	; 0x15
    243e:	8e 8b       	std	Y+22, r24	; 0x16
    2440:	9f 8b       	std	Y+23, r25	; 0x17
    2442:	f7 01       	movw	r30, r14
    2444:	02 e0       	ldi	r16, 0x02	; 2
    2446:	06 93       	lac	Z, r16
    2448:	13 c0       	rjmp	.+38     	; 0x2470 <udd_ep_trans_complet+0x29c>
    244a:	d8 01       	movw	r26, r16
    244c:	8c 91       	ld	r24, X
    244e:	80 ff       	sbrs	r24, 0
    2450:	0f c0       	rjmp	.+30     	; 0x2470 <udd_ep_trans_complet+0x29c>
    2452:	8e 7f       	andi	r24, 0xFE	; 254
    2454:	8c 93       	st	X, r24
    2456:	17 96       	adiw	r26, 0x07	; 7
    2458:	ed 91       	ld	r30, X+
    245a:	fc 91       	ld	r31, X
    245c:	18 97       	sbiw	r26, 0x08	; 8
    245e:	30 97       	sbiw	r30, 0x00	; 0
    2460:	39 f0       	breq	.+14     	; 0x2470 <udd_ep_trans_complet+0x29c>
    2462:	15 96       	adiw	r26, 0x05	; 5
    2464:	6d 91       	ld	r22, X+
    2466:	7c 91       	ld	r23, X
    2468:	16 97       	sbiw	r26, 0x06	; 6
    246a:	4d 2d       	mov	r20, r13
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	09 95       	icall
    2470:	df 91       	pop	r29
    2472:	cf 91       	pop	r28
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	ff 90       	pop	r15
    247a:	ef 90       	pop	r14
    247c:	df 90       	pop	r13
    247e:	bf 90       	pop	r11
    2480:	af 90       	pop	r10
    2482:	9f 90       	pop	r9
    2484:	8f 90       	pop	r8
    2486:	08 95       	ret

00002488 <udd_attach>:
    2488:	cf 93       	push	r28
    248a:	cf b7       	in	r28, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	11 dd       	rcall	.-1502   	; 0x1eb4 <udd_sleep_mode>
    2492:	ea ec       	ldi	r30, 0xCA	; 202
    2494:	f4 e0       	ldi	r31, 0x04	; 4
    2496:	80 e4       	ldi	r24, 0x40	; 64
    2498:	80 83       	st	Z, r24
    249a:	80 e2       	ldi	r24, 0x20	; 32
    249c:	80 83       	st	Z, r24
    249e:	e1 ec       	ldi	r30, 0xC1	; 193
    24a0:	f4 e0       	ldi	r31, 0x04	; 4
    24a2:	80 81       	ld	r24, Z
    24a4:	81 60       	ori	r24, 0x01	; 1
    24a6:	80 83       	st	Z, r24
    24a8:	a9 ec       	ldi	r26, 0xC9	; 201
    24aa:	b4 e0       	ldi	r27, 0x04	; 4
    24ac:	8c 91       	ld	r24, X
    24ae:	82 60       	ori	r24, 0x02	; 2
    24b0:	8c 93       	st	X, r24
    24b2:	e8 ec       	ldi	r30, 0xC8	; 200
    24b4:	f4 e0       	ldi	r31, 0x04	; 4
    24b6:	80 81       	ld	r24, Z
    24b8:	80 64       	ori	r24, 0x40	; 64
    24ba:	80 83       	st	Z, r24
    24bc:	8c 91       	ld	r24, X
    24be:	81 60       	ori	r24, 0x01	; 1
    24c0:	8c 93       	st	X, r24
    24c2:	80 81       	ld	r24, Z
    24c4:	80 68       	ori	r24, 0x80	; 128
    24c6:	80 83       	st	Z, r24
    24c8:	cf bf       	out	0x3f, r28	; 63
    24ca:	cf 91       	pop	r28
    24cc:	08 95       	ret

000024ce <udd_enable>:
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	c0 e6       	ldi	r28, 0x60	; 96
    24d4:	d0 e0       	ldi	r29, 0x00	; 0
    24d6:	18 82       	st	Y, r1
    24d8:	80 e3       	ldi	r24, 0x30	; 48
    24da:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <sysclk_enable_usb>
    24de:	e0 ec       	ldi	r30, 0xC0	; 192
    24e0:	f4 e0       	ldi	r31, 0x04	; 4
    24e2:	80 81       	ld	r24, Z
    24e4:	80 64       	ori	r24, 0x40	; 64
    24e6:	80 83       	st	Z, r24
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	88 83       	st	Y, r24
    24ec:	cf b7       	in	r28, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	fc 01       	movw	r30, r24
    24f6:	ee 0f       	add	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	ee 0f       	add	r30, r30
    24fc:	ff 1f       	adc	r31, r31
    24fe:	ee 0f       	add	r30, r30
    2500:	ff 1f       	adc	r31, r31
    2502:	ec 5d       	subi	r30, 0xDC	; 220
    2504:	fd 4d       	sbci	r31, 0xDD	; 221
    2506:	11 8a       	std	Z+17, r1	; 0x11
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	88 30       	cpi	r24, 0x08	; 8
    250c:	91 05       	cpc	r25, r1
    250e:	91 f7       	brne	.-28     	; 0x24f4 <udd_enable+0x26>
    2510:	e7 ea       	ldi	r30, 0xA7	; 167
    2512:	f1 e2       	ldi	r31, 0x21	; 33
    2514:	80 81       	ld	r24, Z
    2516:	8e 7f       	andi	r24, 0xFE	; 254
    2518:	80 83       	st	Z, r24
    251a:	e0 eb       	ldi	r30, 0xB0	; 176
    251c:	f1 e2       	ldi	r31, 0x21	; 33
    251e:	80 81       	ld	r24, Z
    2520:	8e 7f       	andi	r24, 0xFE	; 254
    2522:	80 83       	st	Z, r24
    2524:	e9 eb       	ldi	r30, 0xB9	; 185
    2526:	f1 e2       	ldi	r31, 0x21	; 33
    2528:	80 81       	ld	r24, Z
    252a:	8e 7f       	andi	r24, 0xFE	; 254
    252c:	80 83       	st	Z, r24
    252e:	e2 ec       	ldi	r30, 0xC2	; 194
    2530:	f1 e2       	ldi	r31, 0x21	; 33
    2532:	80 81       	ld	r24, Z
    2534:	8e 7f       	andi	r24, 0xFE	; 254
    2536:	80 83       	st	Z, r24
    2538:	eb ec       	ldi	r30, 0xCB	; 203
    253a:	f1 e2       	ldi	r31, 0x21	; 33
    253c:	80 81       	ld	r24, Z
    253e:	8e 7f       	andi	r24, 0xFE	; 254
    2540:	80 83       	st	Z, r24
    2542:	e4 ed       	ldi	r30, 0xD4	; 212
    2544:	f1 e2       	ldi	r31, 0x21	; 33
    2546:	80 81       	ld	r24, Z
    2548:	8e 7f       	andi	r24, 0xFE	; 254
    254a:	80 83       	st	Z, r24
    254c:	6a e1       	ldi	r22, 0x1A	; 26
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	a6 dc       	rcall	.-1716   	; 0x1ea0 <nvm_read_byte>
    2554:	8f 3f       	cpi	r24, 0xFF	; 255
    2556:	19 f0       	breq	.+6      	; 0x255e <udd_enable+0x90>
    2558:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    255c:	03 c0       	rjmp	.+6      	; 0x2564 <udd_enable+0x96>
    255e:	8f e1       	ldi	r24, 0x1F	; 31
    2560:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2564:	6b e1       	ldi	r22, 0x1B	; 27
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	9a dc       	rcall	.-1740   	; 0x1ea0 <nvm_read_byte>
    256c:	8f 3f       	cpi	r24, 0xFF	; 255
    256e:	19 f0       	breq	.+6      	; 0x2576 <udd_enable+0xa8>
    2570:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2574:	03 c0       	rjmp	.+6      	; 0x257c <udd_enable+0xae>
    2576:	8f e1       	ldi	r24, 0x1F	; 31
    2578:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    257c:	e0 ec       	ldi	r30, 0xC0	; 192
    257e:	f4 e0       	ldi	r31, 0x04	; 4
    2580:	80 81       	ld	r24, Z
    2582:	83 60       	ori	r24, 0x03	; 3
    2584:	80 83       	st	Z, r24
    2586:	80 81       	ld	r24, Z
    2588:	80 68       	ori	r24, 0x80	; 128
    258a:	80 83       	st	Z, r24
    258c:	80 81       	ld	r24, Z
    258e:	80 61       	ori	r24, 0x10	; 16
    2590:	80 83       	st	Z, r24
    2592:	84 e3       	ldi	r24, 0x34	; 52
    2594:	92 e2       	ldi	r25, 0x22	; 34
    2596:	86 83       	std	Z+6, r24	; 0x06
    2598:	97 83       	std	Z+7, r25	; 0x07
    259a:	80 81       	ld	r24, Z
    259c:	80 62       	ori	r24, 0x20	; 32
    259e:	80 83       	st	Z, r24
    25a0:	8f ef       	ldi	r24, 0xFF	; 255
    25a2:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    25a6:	e8 ec       	ldi	r30, 0xC8	; 200
    25a8:	f4 e0       	ldi	r31, 0x04	; 4
    25aa:	80 81       	ld	r24, Z
    25ac:	82 60       	ori	r24, 0x02	; 2
    25ae:	80 83       	st	Z, r24
    25b0:	10 92 78 22 	sts	0x2278, r1	; 0x802278 <udd_b_idle>
    25b4:	80 91 8b 2e 	lds	r24, 0x2E8B	; 0x802e8b <sleepmgr_locks+0x5>
    25b8:	8f 3f       	cpi	r24, 0xFF	; 255
    25ba:	09 f4       	brne	.+2      	; 0x25be <udd_enable+0xf0>
    25bc:	ff cf       	rjmp	.-2      	; 0x25bc <udd_enable+0xee>
    25be:	9f b7       	in	r25, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	e6 e8       	ldi	r30, 0x86	; 134
    25c4:	fe e2       	ldi	r31, 0x2E	; 46
    25c6:	85 81       	ldd	r24, Z+5	; 0x05
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	85 83       	std	Z+5, r24	; 0x05
    25cc:	9f bf       	out	0x3f, r25	; 63
    25ce:	5c df       	rcall	.-328    	; 0x2488 <udd_attach>
    25d0:	cf bf       	out	0x3f, r28	; 63
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	08 95       	ret

000025d8 <udd_set_address>:
    25d8:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25dc:	08 95       	ret

000025de <udd_getaddress>:
    25de:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25e2:	08 95       	ret

000025e4 <udd_set_setup_payload>:
    25e4:	e8 e9       	ldi	r30, 0x98	; 152
    25e6:	f4 e2       	ldi	r31, 0x24	; 36
    25e8:	80 87       	std	Z+8, r24	; 0x08
    25ea:	91 87       	std	Z+9, r25	; 0x09
    25ec:	62 87       	std	Z+10, r22	; 0x0a
    25ee:	73 87       	std	Z+11, r23	; 0x0b
    25f0:	08 95       	ret

000025f2 <udd_ep_alloc>:
    25f2:	28 2f       	mov	r18, r24
    25f4:	2f 70       	andi	r18, 0x0F	; 15
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	22 0f       	add	r18, r18
    25fa:	33 1f       	adc	r19, r19
    25fc:	08 2e       	mov	r0, r24
    25fe:	00 0c       	add	r0, r0
    2600:	99 0b       	sbc	r25, r25
    2602:	88 27       	eor	r24, r24
    2604:	99 0f       	add	r25, r25
    2606:	88 1f       	adc	r24, r24
    2608:	99 27       	eor	r25, r25
    260a:	82 0f       	add	r24, r18
    260c:	93 1f       	adc	r25, r19
    260e:	fc 01       	movw	r30, r24
    2610:	ee 0f       	add	r30, r30
    2612:	ff 1f       	adc	r31, r31
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	ee 0f       	add	r30, r30
    261a:	ff 1f       	adc	r31, r31
    261c:	ec 5d       	subi	r30, 0xDC	; 220
    261e:	fd 4d       	sbci	r31, 0xDD	; 221
    2620:	21 89       	ldd	r18, Z+17	; 0x11
    2622:	20 7c       	andi	r18, 0xC0	; 192
    2624:	09 f0       	breq	.+2      	; 0x2628 <udd_ep_alloc+0x36>
    2626:	58 c0       	rjmp	.+176    	; 0x26d8 <udd_ep_alloc+0xe6>
    2628:	63 70       	andi	r22, 0x03	; 3
    262a:	61 30       	cpi	r22, 0x01	; 1
    262c:	11 f0       	breq	.+4      	; 0x2632 <udd_ep_alloc+0x40>
    262e:	18 f4       	brcc	.+6      	; 0x2636 <udd_ep_alloc+0x44>
    2630:	04 c0       	rjmp	.+8      	; 0x263a <udd_ep_alloc+0x48>
    2632:	20 ec       	ldi	r18, 0xC0	; 192
    2634:	03 c0       	rjmp	.+6      	; 0x263c <udd_ep_alloc+0x4a>
    2636:	20 e8       	ldi	r18, 0x80	; 128
    2638:	01 c0       	rjmp	.+2      	; 0x263c <udd_ep_alloc+0x4a>
    263a:	20 e4       	ldi	r18, 0x40	; 64
    263c:	40 38       	cpi	r20, 0x80	; 128
    263e:	51 05       	cpc	r21, r1
    2640:	e9 f0       	breq	.+58     	; 0x267c <udd_ep_alloc+0x8a>
    2642:	50 f4       	brcc	.+20     	; 0x2658 <udd_ep_alloc+0x66>
    2644:	40 32       	cpi	r20, 0x20	; 32
    2646:	51 05       	cpc	r21, r1
    2648:	a9 f0       	breq	.+42     	; 0x2674 <udd_ep_alloc+0x82>
    264a:	40 34       	cpi	r20, 0x40	; 64
    264c:	51 05       	cpc	r21, r1
    264e:	a1 f0       	breq	.+40     	; 0x2678 <udd_ep_alloc+0x86>
    2650:	40 31       	cpi	r20, 0x10	; 16
    2652:	51 05       	cpc	r21, r1
    2654:	d9 f4       	brne	.+54     	; 0x268c <udd_ep_alloc+0x9a>
    2656:	0c c0       	rjmp	.+24     	; 0x2670 <udd_ep_alloc+0x7e>
    2658:	41 15       	cp	r20, r1
    265a:	32 e0       	ldi	r19, 0x02	; 2
    265c:	53 07       	cpc	r21, r19
    265e:	91 f0       	breq	.+36     	; 0x2684 <udd_ep_alloc+0x92>
    2660:	4f 3f       	cpi	r20, 0xFF	; 255
    2662:	33 e0       	ldi	r19, 0x03	; 3
    2664:	53 07       	cpc	r21, r19
    2666:	81 f0       	breq	.+32     	; 0x2688 <udd_ep_alloc+0x96>
    2668:	41 15       	cp	r20, r1
    266a:	51 40       	sbci	r21, 0x01	; 1
    266c:	79 f4       	brne	.+30     	; 0x268c <udd_ep_alloc+0x9a>
    266e:	08 c0       	rjmp	.+16     	; 0x2680 <udd_ep_alloc+0x8e>
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0d c0       	rjmp	.+26     	; 0x268e <udd_ep_alloc+0x9c>
    2674:	42 e0       	ldi	r20, 0x02	; 2
    2676:	0b c0       	rjmp	.+22     	; 0x268e <udd_ep_alloc+0x9c>
    2678:	43 e0       	ldi	r20, 0x03	; 3
    267a:	09 c0       	rjmp	.+18     	; 0x268e <udd_ep_alloc+0x9c>
    267c:	44 e0       	ldi	r20, 0x04	; 4
    267e:	07 c0       	rjmp	.+14     	; 0x268e <udd_ep_alloc+0x9c>
    2680:	45 e0       	ldi	r20, 0x05	; 5
    2682:	05 c0       	rjmp	.+10     	; 0x268e <udd_ep_alloc+0x9c>
    2684:	46 e0       	ldi	r20, 0x06	; 6
    2686:	03 c0       	rjmp	.+6      	; 0x268e <udd_ep_alloc+0x9c>
    2688:	47 e0       	ldi	r20, 0x07	; 7
    268a:	01 c0       	rjmp	.+2      	; 0x268e <udd_ep_alloc+0x9c>
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	fc 01       	movw	r30, r24
    2690:	ee 0f       	add	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	ec 5d       	subi	r30, 0xDC	; 220
    269e:	fd 4d       	sbci	r31, 0xDD	; 221
    26a0:	11 8a       	std	Z+17, r1	; 0x11
    26a2:	dc 01       	movw	r26, r24
    26a4:	aa 0f       	add	r26, r26
    26a6:	bb 1f       	adc	r27, r27
    26a8:	aa 0f       	add	r26, r26
    26aa:	bb 1f       	adc	r27, r27
    26ac:	aa 0f       	add	r26, r26
    26ae:	bb 1f       	adc	r27, r27
    26b0:	ac 5c       	subi	r26, 0xCC	; 204
    26b2:	bd 4d       	sbci	r27, 0xDD	; 221
    26b4:	36 e0       	ldi	r19, 0x06	; 6
    26b6:	3c 93       	st	X, r19
    26b8:	24 2b       	or	r18, r20
    26ba:	21 8b       	std	Z+17, r18	; 0x11
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	fc 01       	movw	r30, r24
    26ca:	ec 5d       	subi	r30, 0xDC	; 220
    26cc:	fd 4d       	sbci	r31, 0xDD	; 221
    26ce:	81 89       	ldd	r24, Z+17	; 0x11
    26d0:	80 62       	ori	r24, 0x20	; 32
    26d2:	81 8b       	std	Z+17, r24	; 0x11
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	08 95       	ret
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	08 95       	ret

000026dc <udd_ep_is_halted>:
    26dc:	e8 2f       	mov	r30, r24
    26de:	ef 70       	andi	r30, 0x0F	; 15
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	ee 0f       	add	r30, r30
    26e4:	ff 1f       	adc	r31, r31
    26e6:	08 2e       	mov	r0, r24
    26e8:	00 0c       	add	r0, r0
    26ea:	99 0b       	sbc	r25, r25
    26ec:	88 27       	eor	r24, r24
    26ee:	99 0f       	add	r25, r25
    26f0:	88 1f       	adc	r24, r24
    26f2:	99 27       	eor	r25, r25
    26f4:	e8 0f       	add	r30, r24
    26f6:	f9 1f       	adc	r31, r25
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	ec 5d       	subi	r30, 0xDC	; 220
    2706:	fd 4d       	sbci	r31, 0xDD	; 221
    2708:	81 89       	ldd	r24, Z+17	; 0x11
    270a:	82 fb       	bst	r24, 2
    270c:	88 27       	eor	r24, r24
    270e:	80 f9       	bld	r24, 0
    2710:	08 95       	ret

00002712 <udd_ep_clear_halt>:
    2712:	28 2f       	mov	r18, r24
    2714:	2f 70       	andi	r18, 0x0F	; 15
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	a9 01       	movw	r20, r18
    271a:	44 0f       	add	r20, r20
    271c:	55 1f       	adc	r21, r21
    271e:	28 2f       	mov	r18, r24
    2720:	08 2e       	mov	r0, r24
    2722:	00 0c       	add	r0, r0
    2724:	33 0b       	sbc	r19, r19
    2726:	22 27       	eor	r18, r18
    2728:	33 0f       	add	r19, r19
    272a:	22 1f       	adc	r18, r18
    272c:	33 27       	eor	r19, r19
    272e:	24 0f       	add	r18, r20
    2730:	35 1f       	adc	r19, r21
    2732:	f9 01       	movw	r30, r18
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	ec 5d       	subi	r30, 0xDC	; 220
    2742:	fd 4d       	sbci	r31, 0xDD	; 221
    2744:	91 89       	ldd	r25, Z+17	; 0x11
    2746:	92 ff       	sbrs	r25, 2
    2748:	17 c0       	rjmp	.+46     	; 0x2778 <udd_ep_clear_halt+0x66>
    274a:	22 0f       	add	r18, r18
    274c:	33 1f       	adc	r19, r19
    274e:	22 0f       	add	r18, r18
    2750:	33 1f       	adc	r19, r19
    2752:	22 0f       	add	r18, r18
    2754:	33 1f       	adc	r19, r19
    2756:	f9 01       	movw	r30, r18
    2758:	ec 5d       	subi	r30, 0xDC	; 220
    275a:	fd 4d       	sbci	r31, 0xDD	; 221
    275c:	91 89       	ldd	r25, Z+17	; 0x11
    275e:	9b 7f       	andi	r25, 0xFB	; 251
    2760:	91 8b       	std	Z+17, r25	; 0x11
    2762:	ae dc       	rcall	.-1700   	; 0x20c0 <udd_ep_get_job>
    2764:	fc 01       	movw	r30, r24
    2766:	80 81       	ld	r24, Z
    2768:	80 ff       	sbrs	r24, 0
    276a:	06 c0       	rjmp	.+12     	; 0x2778 <udd_ep_clear_halt+0x66>
    276c:	8e 7f       	andi	r24, 0xFE	; 254
    276e:	80 83       	st	Z, r24
    2770:	07 80       	ldd	r0, Z+7	; 0x07
    2772:	f0 85       	ldd	r31, Z+8	; 0x08
    2774:	e0 2d       	mov	r30, r0
    2776:	09 95       	icall
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	08 95       	ret

0000277c <udd_ep_run>:
    277c:	7f 92       	push	r7
    277e:	8f 92       	push	r8
    2780:	9f 92       	push	r9
    2782:	af 92       	push	r10
    2784:	bf 92       	push	r11
    2786:	cf 92       	push	r12
    2788:	df 92       	push	r13
    278a:	ef 92       	push	r14
    278c:	ff 92       	push	r15
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	98 2e       	mov	r9, r24
    2798:	86 2e       	mov	r8, r22
    279a:	6a 01       	movw	r12, r20
    279c:	79 01       	movw	r14, r18
    279e:	90 dc       	rcall	.-1760   	; 0x20c0 <udd_ep_get_job>
    27a0:	5c 01       	movw	r10, r24
    27a2:	79 2c       	mov	r7, r9
    27a4:	77 1c       	adc	r7, r7
    27a6:	77 24       	eor	r7, r7
    27a8:	77 1c       	adc	r7, r7
    27aa:	c9 2d       	mov	r28, r9
    27ac:	cf 70       	andi	r28, 0x0F	; 15
    27ae:	d0 e0       	ldi	r29, 0x00	; 0
    27b0:	cc 0f       	add	r28, r28
    27b2:	dd 1f       	adc	r29, r29
    27b4:	c7 0d       	add	r28, r7
    27b6:	d1 1d       	adc	r29, r1
    27b8:	fe 01       	movw	r30, r28
    27ba:	ee 0f       	add	r30, r30
    27bc:	ff 1f       	adc	r31, r31
    27be:	ee 0f       	add	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	ee 0f       	add	r30, r30
    27c4:	ff 1f       	adc	r31, r31
    27c6:	ec 5d       	subi	r30, 0xDC	; 220
    27c8:	fd 4d       	sbci	r31, 0xDD	; 221
    27ca:	81 89       	ldd	r24, Z+17	; 0x11
    27cc:	80 7c       	andi	r24, 0xC0	; 192
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <udd_ep_run+0x56>
    27d0:	7d c0       	rjmp	.+250    	; 0x28cc <udd_ep_run+0x150>
    27d2:	fe 01       	movw	r30, r28
    27d4:	ee 0f       	add	r30, r30
    27d6:	ff 1f       	adc	r31, r31
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	ee 0f       	add	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	ec 5d       	subi	r30, 0xDC	; 220
    27e2:	fd 4d       	sbci	r31, 0xDD	; 221
    27e4:	81 89       	ldd	r24, Z+17	; 0x11
    27e6:	80 7c       	andi	r24, 0xC0	; 192
    27e8:	80 3c       	cpi	r24, 0xC0	; 192
    27ea:	61 f0       	breq	.+24     	; 0x2804 <udd_ep_run+0x88>
    27ec:	fe 01       	movw	r30, r28
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	ec 5d       	subi	r30, 0xDC	; 220
    27fc:	fd 4d       	sbci	r31, 0xDD	; 221
    27fe:	81 89       	ldd	r24, Z+17	; 0x11
    2800:	82 fd       	sbrc	r24, 2
    2802:	66 c0       	rjmp	.+204    	; 0x28d0 <udd_ep_run+0x154>
    2804:	8f b7       	in	r24, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	f5 01       	movw	r30, r10
    280a:	90 81       	ld	r25, Z
    280c:	90 ff       	sbrs	r25, 0
    280e:	03 c0       	rjmp	.+6      	; 0x2816 <udd_ep_run+0x9a>
    2810:	8f bf       	out	0x3f, r24	; 63
    2812:	71 2c       	mov	r7, r1
    2814:	5e c0       	rjmp	.+188    	; 0x28d2 <udd_ep_run+0x156>
    2816:	f5 01       	movw	r30, r10
    2818:	90 81       	ld	r25, Z
    281a:	91 60       	ori	r25, 0x01	; 1
    281c:	90 83       	st	Z, r25
    281e:	8f bf       	out	0x3f, r24	; 63
    2820:	c1 82       	std	Z+1, r12	; 0x01
    2822:	d2 82       	std	Z+2, r13	; 0x02
    2824:	e3 82       	std	Z+3, r14	; 0x03
    2826:	f4 82       	std	Z+4, r15	; 0x04
    2828:	15 82       	std	Z+5, r1	; 0x05
    282a:	16 82       	std	Z+6, r1	; 0x06
    282c:	07 83       	std	Z+7, r16	; 0x07
    282e:	10 87       	std	Z+8, r17	; 0x08
    2830:	81 10       	cpse	r8, r1
    2832:	06 c0       	rjmp	.+12     	; 0x2840 <udd_ep_run+0xc4>
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	e1 14       	cp	r14, r1
    2838:	f1 04       	cpc	r15, r1
    283a:	19 f0       	breq	.+6      	; 0x2842 <udd_ep_run+0xc6>
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	01 c0       	rjmp	.+2      	; 0x2842 <udd_ep_run+0xc6>
    2840:	91 e0       	ldi	r25, 0x01	; 1
    2842:	f5 01       	movw	r30, r10
    2844:	80 81       	ld	r24, Z
    2846:	90 fb       	bst	r25, 0
    2848:	81 f9       	bld	r24, 1
    284a:	8b 7f       	andi	r24, 0xFB	; 251
    284c:	80 83       	st	Z, r24
    284e:	77 20       	and	r7, r7
    2850:	59 f0       	breq	.+22     	; 0x2868 <udd_ep_run+0xec>
    2852:	cc 0f       	add	r28, r28
    2854:	dd 1f       	adc	r29, r29
    2856:	cc 0f       	add	r28, r28
    2858:	dd 1f       	adc	r29, r29
    285a:	cc 0f       	add	r28, r28
    285c:	dd 1f       	adc	r29, r29
    285e:	cc 5d       	subi	r28, 0xDC	; 220
    2860:	dd 4d       	sbci	r29, 0xDD	; 221
    2862:	1e 8a       	std	Y+22, r1	; 0x16
    2864:	1f 8a       	std	Y+23, r1	; 0x17
    2866:	2d c0       	rjmp	.+90     	; 0x28c2 <udd_ep_run+0x146>
    2868:	fe 01       	movw	r30, r28
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	ee 0f       	add	r30, r30
    2874:	ff 1f       	adc	r31, r31
    2876:	ec 5d       	subi	r30, 0xDC	; 220
    2878:	fd 4d       	sbci	r31, 0xDD	; 221
    287a:	81 89       	ldd	r24, Z+17	; 0x11
    287c:	80 7c       	andi	r24, 0xC0	; 192
    287e:	80 3c       	cpi	r24, 0xC0	; 192
    2880:	a1 f4       	brne	.+40     	; 0x28aa <udd_ep_run+0x12e>
    2882:	ce 01       	movw	r24, r28
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	8c 5c       	subi	r24, 0xCC	; 204
    2892:	9d 4d       	sbci	r25, 0xDD	; 221
    2894:	ef db       	rcall	.-2082   	; 0x2074 <udd_ep_get_size>
    2896:	bc 01       	movw	r22, r24
    2898:	c7 01       	movw	r24, r14
    289a:	60 d2       	rcall	.+1216   	; 0x2d5c <__udivmodhi4>
    289c:	89 2b       	or	r24, r25
    289e:	29 f0       	breq	.+10     	; 0x28aa <udd_ep_run+0x12e>
    28a0:	f5 01       	movw	r30, r10
    28a2:	80 81       	ld	r24, Z
    28a4:	8e 7f       	andi	r24, 0xFE	; 254
    28a6:	80 83       	st	Z, r24
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <udd_ep_run+0x156>
    28aa:	cc 0f       	add	r28, r28
    28ac:	dd 1f       	adc	r29, r29
    28ae:	cc 0f       	add	r28, r28
    28b0:	dd 1f       	adc	r29, r29
    28b2:	cc 0f       	add	r28, r28
    28b4:	dd 1f       	adc	r29, r29
    28b6:	cc 5d       	subi	r28, 0xDC	; 220
    28b8:	dd 4d       	sbci	r29, 0xDD	; 221
    28ba:	1a 8a       	std	Y+18, r1	; 0x12
    28bc:	1b 8a       	std	Y+19, r1	; 0x13
    28be:	1e 8a       	std	Y+22, r1	; 0x16
    28c0:	1f 8a       	std	Y+23, r1	; 0x17
    28c2:	89 2d       	mov	r24, r9
    28c4:	87 dc       	rcall	.-1778   	; 0x21d4 <udd_ep_trans_complet>
    28c6:	77 24       	eor	r7, r7
    28c8:	73 94       	inc	r7
    28ca:	03 c0       	rjmp	.+6      	; 0x28d2 <udd_ep_run+0x156>
    28cc:	71 2c       	mov	r7, r1
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <udd_ep_run+0x156>
    28d0:	71 2c       	mov	r7, r1
    28d2:	87 2d       	mov	r24, r7
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	df 90       	pop	r13
    28e2:	cf 90       	pop	r12
    28e4:	bf 90       	pop	r11
    28e6:	af 90       	pop	r10
    28e8:	9f 90       	pop	r9
    28ea:	8f 90       	pop	r8
    28ec:	7f 90       	pop	r7
    28ee:	08 95       	ret

000028f0 <udd_ep_abort>:
    28f0:	ff 92       	push	r15
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	18 2f       	mov	r17, r24
    28fc:	f8 2e       	mov	r15, r24
    28fe:	ff 1c       	adc	r15, r15
    2900:	ff 24       	eor	r15, r15
    2902:	ff 1c       	adc	r15, r15
    2904:	c8 2f       	mov	r28, r24
    2906:	cf 70       	andi	r28, 0x0F	; 15
    2908:	d0 e0       	ldi	r29, 0x00	; 0
    290a:	cc 0f       	add	r28, r28
    290c:	dd 1f       	adc	r29, r29
    290e:	cf 0d       	add	r28, r15
    2910:	d1 1d       	adc	r29, r1
    2912:	d6 db       	rcall	.-2132   	; 0x20c0 <udd_ep_get_job>
    2914:	dc 01       	movw	r26, r24
    2916:	fe 01       	movw	r30, r28
    2918:	ee 0f       	add	r30, r30
    291a:	ff 1f       	adc	r31, r31
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	ee 0f       	add	r30, r30
    2922:	ff 1f       	adc	r31, r31
    2924:	ec 5c       	subi	r30, 0xCC	; 204
    2926:	fd 4d       	sbci	r31, 0xDD	; 221
    2928:	02 e0       	ldi	r16, 0x02	; 2
    292a:	05 93       	las	Z, r16
    292c:	8c 91       	ld	r24, X
    292e:	80 ff       	sbrs	r24, 0
    2930:	22 c0       	rjmp	.+68     	; 0x2976 <udd_ep_abort+0x86>
    2932:	8e 7f       	andi	r24, 0xFE	; 254
    2934:	8c 93       	st	X, r24
    2936:	17 96       	adiw	r26, 0x07	; 7
    2938:	ed 91       	ld	r30, X+
    293a:	fc 91       	ld	r31, X
    293c:	18 97       	sbiw	r26, 0x08	; 8
    293e:	30 97       	sbiw	r30, 0x00	; 0
    2940:	d1 f0       	breq	.+52     	; 0x2976 <udd_ep_abort+0x86>
    2942:	ff 20       	and	r15, r15
    2944:	59 f0       	breq	.+22     	; 0x295c <udd_ep_abort+0x6c>
    2946:	cc 0f       	add	r28, r28
    2948:	dd 1f       	adc	r29, r29
    294a:	cc 0f       	add	r28, r28
    294c:	dd 1f       	adc	r29, r29
    294e:	cc 0f       	add	r28, r28
    2950:	dd 1f       	adc	r29, r29
    2952:	cc 5d       	subi	r28, 0xDC	; 220
    2954:	dd 4d       	sbci	r29, 0xDD	; 221
    2956:	6e 89       	ldd	r22, Y+22	; 0x16
    2958:	7f 89       	ldd	r23, Y+23	; 0x17
    295a:	0a c0       	rjmp	.+20     	; 0x2970 <udd_ep_abort+0x80>
    295c:	cc 0f       	add	r28, r28
    295e:	dd 1f       	adc	r29, r29
    2960:	cc 0f       	add	r28, r28
    2962:	dd 1f       	adc	r29, r29
    2964:	cc 0f       	add	r28, r28
    2966:	dd 1f       	adc	r29, r29
    2968:	cc 5d       	subi	r28, 0xDC	; 220
    296a:	dd 4d       	sbci	r29, 0xDD	; 221
    296c:	6a 89       	ldd	r22, Y+18	; 0x12
    296e:	7b 89       	ldd	r23, Y+19	; 0x13
    2970:	41 2f       	mov	r20, r17
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	09 95       	icall
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	08 95       	ret

00002982 <udd_ep_free>:
    2982:	cf 93       	push	r28
    2984:	c8 2f       	mov	r28, r24
    2986:	b4 df       	rcall	.-152    	; 0x28f0 <udd_ep_abort>
    2988:	ec 2f       	mov	r30, r28
    298a:	ef 70       	andi	r30, 0x0F	; 15
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	ee 0f       	add	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	8c 2f       	mov	r24, r28
    2994:	cc 0f       	add	r28, r28
    2996:	99 0b       	sbc	r25, r25
    2998:	88 27       	eor	r24, r24
    299a:	99 0f       	add	r25, r25
    299c:	88 1f       	adc	r24, r24
    299e:	99 27       	eor	r25, r25
    29a0:	e8 0f       	add	r30, r24
    29a2:	f9 1f       	adc	r31, r25
    29a4:	ee 0f       	add	r30, r30
    29a6:	ff 1f       	adc	r31, r31
    29a8:	ee 0f       	add	r30, r30
    29aa:	ff 1f       	adc	r31, r31
    29ac:	ee 0f       	add	r30, r30
    29ae:	ff 1f       	adc	r31, r31
    29b0:	ec 5d       	subi	r30, 0xDC	; 220
    29b2:	fd 4d       	sbci	r31, 0xDD	; 221
    29b4:	11 8a       	std	Z+17, r1	; 0x11
    29b6:	cf 91       	pop	r28
    29b8:	08 95       	ret

000029ba <udd_ep_set_halt>:
    29ba:	0f 93       	push	r16
    29bc:	e8 2f       	mov	r30, r24
    29be:	ef 70       	andi	r30, 0x0F	; 15
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	ee 0f       	add	r30, r30
    29c4:	ff 1f       	adc	r31, r31
    29c6:	28 2f       	mov	r18, r24
    29c8:	08 2e       	mov	r0, r24
    29ca:	00 0c       	add	r0, r0
    29cc:	33 0b       	sbc	r19, r19
    29ce:	22 27       	eor	r18, r18
    29d0:	33 0f       	add	r19, r19
    29d2:	22 1f       	adc	r18, r18
    29d4:	33 27       	eor	r19, r19
    29d6:	e2 0f       	add	r30, r18
    29d8:	f3 1f       	adc	r31, r19
    29da:	df 01       	movw	r26, r30
    29dc:	aa 0f       	add	r26, r26
    29de:	bb 1f       	adc	r27, r27
    29e0:	aa 0f       	add	r26, r26
    29e2:	bb 1f       	adc	r27, r27
    29e4:	aa 0f       	add	r26, r26
    29e6:	bb 1f       	adc	r27, r27
    29e8:	ac 5d       	subi	r26, 0xDC	; 220
    29ea:	bd 4d       	sbci	r27, 0xDD	; 221
    29ec:	51 96       	adiw	r26, 0x11	; 17
    29ee:	9c 91       	ld	r25, X
    29f0:	51 97       	sbiw	r26, 0x11	; 17
    29f2:	94 60       	ori	r25, 0x04	; 4
    29f4:	51 96       	adiw	r26, 0x11	; 17
    29f6:	9c 93       	st	X, r25
    29f8:	ee 0f       	add	r30, r30
    29fa:	ff 1f       	adc	r31, r31
    29fc:	ee 0f       	add	r30, r30
    29fe:	ff 1f       	adc	r31, r31
    2a00:	ee 0f       	add	r30, r30
    2a02:	ff 1f       	adc	r31, r31
    2a04:	ec 5c       	subi	r30, 0xCC	; 204
    2a06:	fd 4d       	sbci	r31, 0xDD	; 221
    2a08:	01 e0       	ldi	r16, 0x01	; 1
    2a0a:	06 93       	lac	Z, r16
    2a0c:	71 df       	rcall	.-286    	; 0x28f0 <udd_ep_abort>
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	0f 91       	pop	r16
    2a12:	08 95       	ret

00002a14 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2a14:	1f 92       	push	r1
    2a16:	0f 92       	push	r0
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	0f 92       	push	r0
    2a1c:	11 24       	eor	r1, r1
    2a1e:	0f 93       	push	r16
    2a20:	2f 93       	push	r18
    2a22:	3f 93       	push	r19
    2a24:	4f 93       	push	r20
    2a26:	5f 93       	push	r21
    2a28:	6f 93       	push	r22
    2a2a:	7f 93       	push	r23
    2a2c:	8f 93       	push	r24
    2a2e:	9f 93       	push	r25
    2a30:	af 93       	push	r26
    2a32:	bf 93       	push	r27
    2a34:	ef 93       	push	r30
    2a36:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2a38:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a3c:	88 23       	and	r24, r24
    2a3e:	44 f4       	brge	.+16     	; 0x2a50 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2a40:	80 e8       	ldi	r24, 0x80	; 128
    2a42:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2a46:	0e 94 80 0b 	call	0x1700	; 0x1700 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2a4a:	0e 94 01 04 	call	0x802	; 0x802 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a4e:	8a c0       	rjmp	.+276    	; 0x2b64 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2a50:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a54:	82 ff       	sbrs	r24, 2
    2a56:	20 c0       	rjmp	.+64     	; 0x2a98 <__vector_125+0x84>
		udd_ack_underflow_event();
    2a58:	84 e0       	ldi	r24, 0x04	; 4
    2a5a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2a5e:	80 91 3c 22 	lds	r24, 0x223C	; 0x80223c <udd_sram+0x18>
    2a62:	86 ff       	sbrs	r24, 6
    2a64:	7f c0       	rjmp	.+254    	; 0x2b64 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a66:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a6a:	81 fd       	sbrc	r24, 1
    2a6c:	7b c0       	rjmp	.+246    	; 0x2b64 <__vector_125+0x150>
    2a6e:	43 db       	rcall	.-2426   	; 0x20f6 <udd_ctrl_interrupt_tc_setup>
    2a70:	81 11       	cpse	r24, r1
    2a72:	78 c0       	rjmp	.+240    	; 0x2b64 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2a74:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2a78:	81 30       	cpi	r24, 0x01	; 1
    2a7a:	11 f4       	brne	.+4      	; 0x2a80 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2a7c:	79 da       	rcall	.-2830   	; 0x1f70 <udd_ctrl_send_zlp_in>
    2a7e:	72 c0       	rjmp	.+228    	; 0x2b64 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2a80:	84 30       	cpi	r24, 0x04	; 4
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <__vector_125+0x72>
    2a84:	6f c0       	rjmp	.+222    	; 0x2b64 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2a86:	ed e3       	ldi	r30, 0x3D	; 61
    2a88:	f2 e2       	ldi	r31, 0x22	; 34
    2a8a:	04 e0       	ldi	r16, 0x04	; 4
    2a8c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2a8e:	e5 e3       	ldi	r30, 0x35	; 53
    2a90:	f2 e2       	ldi	r31, 0x22	; 34
    2a92:	04 e0       	ldi	r16, 0x04	; 4
    2a94:	05 93       	las	Z, r16
    2a96:	66 c0       	rjmp	.+204    	; 0x2b64 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2a98:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a9c:	81 ff       	sbrs	r24, 1
    2a9e:	5d c0       	rjmp	.+186    	; 0x2b5a <__vector_125+0x146>
		udd_ack_overflow_event();
    2aa0:	82 e0       	ldi	r24, 0x02	; 2
    2aa2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2aa6:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <udd_sram+0x10>
    2aaa:	86 ff       	sbrs	r24, 6
    2aac:	5b c0       	rjmp	.+182    	; 0x2b64 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2aae:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ab2:	81 fd       	sbrc	r24, 1
    2ab4:	57 c0       	rjmp	.+174    	; 0x2b64 <__vector_125+0x150>
    2ab6:	1f db       	rcall	.-2498   	; 0x20f6 <udd_ctrl_interrupt_tc_setup>
    2ab8:	81 11       	cpse	r24, r1
    2aba:	54 c0       	rjmp	.+168    	; 0x2b64 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2abc:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2ac0:	82 30       	cpi	r24, 0x02	; 2
    2ac2:	41 f4       	brne	.+16     	; 0x2ad4 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2ac4:	84 e0       	ldi	r24, 0x04	; 4
    2ac6:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2aca:	e4 e3       	ldi	r30, 0x34	; 52
    2acc:	f2 e2       	ldi	r31, 0x22	; 34
    2ace:	02 e0       	ldi	r16, 0x02	; 2
    2ad0:	06 93       	lac	Z, r16
    2ad2:	48 c0       	rjmp	.+144    	; 0x2b64 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2ad4:	83 30       	cpi	r24, 0x03	; 3
    2ad6:	09 f0       	breq	.+2      	; 0x2ada <__vector_125+0xc6>
    2ad8:	45 c0       	rjmp	.+138    	; 0x2b64 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2ada:	ed e3       	ldi	r30, 0x3D	; 61
    2adc:	f2 e2       	ldi	r31, 0x22	; 34
    2ade:	04 e0       	ldi	r16, 0x04	; 4
    2ae0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2ae2:	e5 e3       	ldi	r30, 0x35	; 53
    2ae4:	f2 e2       	ldi	r31, 0x22	; 34
    2ae6:	04 e0       	ldi	r16, 0x04	; 4
    2ae8:	05 93       	las	Z, r16
    2aea:	3c c0       	rjmp	.+120    	; 0x2b64 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2aec:	80 e1       	ldi	r24, 0x10	; 16
    2aee:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	fd de       	rcall	.-518    	; 0x28f0 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2af6:	81 e8       	ldi	r24, 0x81	; 129
    2af8:	fb de       	rcall	.-522    	; 0x28f0 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	f9 de       	rcall	.-526    	; 0x28f0 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2afe:	82 e8       	ldi	r24, 0x82	; 130
    2b00:	f7 de       	rcall	.-530    	; 0x28f0 <udd_ep_abort>
		}
#endif
		udc_reset();
    2b02:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2b06:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b0a:	e4 e2       	ldi	r30, 0x24	; 36
    2b0c:	f2 e2       	ldi	r31, 0x22	; 34
    2b0e:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2b10:	96 e0       	ldi	r25, 0x06	; 6
    2b12:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b14:	83 e4       	ldi	r24, 0x43	; 67
    2b16:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b18:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2b1a:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b1c:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2b1e:	8d ed       	ldi	r24, 0xDD	; 221
    2b20:	91 e2       	ldi	r25, 0x21	; 33
    2b22:	84 8b       	std	Z+20, r24	; 0x14
    2b24:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2b26:	ef d9       	rcall	.-3106   	; 0x1f06 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2b28:	1d c0       	rjmp	.+58     	; 0x2b64 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2b2a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b2e:	86 ff       	sbrs	r24, 6
    2b30:	08 c0       	rjmp	.+16     	; 0x2b42 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2b32:	80 e4       	ldi	r24, 0x40	; 64
    2b34:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	bc d9       	rcall	.-3208   	; 0x1eb4 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2b3c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b40:	11 c0       	rjmp	.+34     	; 0x2b64 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2b42:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b46:	85 ff       	sbrs	r24, 5
    2b48:	0d c0       	rjmp	.+26     	; 0x2b64 <__vector_125+0x150>
		udd_ack_resume_event();
    2b4a:	80 e2       	ldi	r24, 0x20	; 32
    2b4c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	b0 d9       	rcall	.-3232   	; 0x1eb4 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2b54:	0e 94 00 04 	call	0x800	; 0x800 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b58:	05 c0       	rjmp	.+10     	; 0x2b64 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2b5a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b5e:	84 fd       	sbrc	r24, 4
    2b60:	c5 cf       	rjmp	.-118    	; 0x2aec <__vector_125+0xd8>
    2b62:	e3 cf       	rjmp	.-58     	; 0x2b2a <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2b64:	ff 91       	pop	r31
    2b66:	ef 91       	pop	r30
    2b68:	bf 91       	pop	r27
    2b6a:	af 91       	pop	r26
    2b6c:	9f 91       	pop	r25
    2b6e:	8f 91       	pop	r24
    2b70:	7f 91       	pop	r23
    2b72:	6f 91       	pop	r22
    2b74:	5f 91       	pop	r21
    2b76:	4f 91       	pop	r20
    2b78:	3f 91       	pop	r19
    2b7a:	2f 91       	pop	r18
    2b7c:	0f 91       	pop	r16
    2b7e:	0f 90       	pop	r0
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	0f 90       	pop	r0
    2b84:	1f 90       	pop	r1
    2b86:	18 95       	reti

00002b88 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2b88:	1f 92       	push	r1
    2b8a:	0f 92       	push	r0
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	0f 92       	push	r0
    2b90:	11 24       	eor	r1, r1
    2b92:	0f 93       	push	r16
    2b94:	1f 93       	push	r17
    2b96:	2f 93       	push	r18
    2b98:	3f 93       	push	r19
    2b9a:	4f 93       	push	r20
    2b9c:	5f 93       	push	r21
    2b9e:	6f 93       	push	r22
    2ba0:	7f 93       	push	r23
    2ba2:	8f 93       	push	r24
    2ba4:	9f 93       	push	r25
    2ba6:	af 93       	push	r26
    2ba8:	bf 93       	push	r27
    2baa:	cf 93       	push	r28
    2bac:	df 93       	push	r29
    2bae:	ef 93       	push	r30
    2bb0:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2bb2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2bb6:	81 fd       	sbrc	r24, 1
    2bb8:	03 c0       	rjmp	.+6      	; 0x2bc0 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2bba:	9d da       	rcall	.-2758   	; 0x20f6 <udd_ctrl_interrupt_tc_setup>
    2bbc:	81 11       	cpse	r24, r1
    2bbe:	b9 c0       	rjmp	.+370    	; 0x2d32 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2bc6:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2bca:	81 95       	neg	r24
    2bcc:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2bce:	e4 e3       	ldi	r30, 0x34	; 52
    2bd0:	f2 e2       	ldi	r31, 0x22	; 34
    2bd2:	e8 1b       	sub	r30, r24
    2bd4:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2bd6:	20 81       	ld	r18, Z
    2bd8:	31 81       	ldd	r19, Z+1	; 0x01
    2bda:	24 53       	subi	r18, 0x34	; 52
    2bdc:	32 42       	sbci	r19, 0x22	; 34
    2bde:	36 95       	lsr	r19
    2be0:	27 95       	ror	r18
    2be2:	36 95       	lsr	r19
    2be4:	27 95       	ror	r18
    2be6:	36 95       	lsr	r19
    2be8:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2bea:	82 2f       	mov	r24, r18
    2bec:	86 95       	lsr	r24
    2bee:	20 fd       	sbrc	r18, 0
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <__vector_126+0x6e>
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	01 c0       	rjmp	.+2      	; 0x2bf8 <__vector_126+0x70>
    2bf6:	90 e8       	ldi	r25, 0x80	; 128
    2bf8:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2bfa:	e8 2f       	mov	r30, r24
    2bfc:	ef 70       	andi	r30, 0x0F	; 15
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	ee 0f       	add	r30, r30
    2c02:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2c04:	28 2f       	mov	r18, r24
    2c06:	08 2e       	mov	r0, r24
    2c08:	00 0c       	add	r0, r0
    2c0a:	33 0b       	sbc	r19, r19
    2c0c:	22 27       	eor	r18, r18
    2c0e:	33 0f       	add	r19, r19
    2c10:	22 1f       	adc	r18, r18
    2c12:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c14:	e2 0f       	add	r30, r18
    2c16:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2c18:	df 01       	movw	r26, r30
    2c1a:	aa 0f       	add	r26, r26
    2c1c:	bb 1f       	adc	r27, r27
    2c1e:	aa 0f       	add	r26, r26
    2c20:	bb 1f       	adc	r27, r27
    2c22:	aa 0f       	add	r26, r26
    2c24:	bb 1f       	adc	r27, r27
    2c26:	ac 5c       	subi	r26, 0xCC	; 204
    2c28:	bd 4d       	sbci	r27, 0xDD	; 221
    2c2a:	9c 91       	ld	r25, X
    2c2c:	95 ff       	sbrs	r25, 5
    2c2e:	81 c0       	rjmp	.+258    	; 0x2d32 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2c30:	fd 01       	movw	r30, r26
    2c32:	00 e2       	ldi	r16, 0x20	; 32
    2c34:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2c36:	81 11       	cpse	r24, r1
    2c38:	77 c0       	rjmp	.+238    	; 0x2d28 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c3a:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2c3e:	84 30       	cpi	r24, 0x04	; 4
    2c40:	19 f4       	brne	.+6      	; 0x2c48 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2c42:	a4 d9       	rcall	.-3256   	; 0x1f8c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2c44:	60 d9       	rcall	.-3392   	; 0x1f06 <udd_ctrl_init>
    2c46:	75 c0       	rjmp	.+234    	; 0x2d32 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2c48:	00 91 36 22 	lds	r16, 0x2236	; 0x802236 <udd_sram+0x12>
    2c4c:	10 91 37 22 	lds	r17, 0x2237	; 0x802237 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2c50:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0xa>
    2c54:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0xb>
    2c58:	c0 91 1d 22 	lds	r28, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    2c5c:	d0 91 1e 22 	lds	r29, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2c60:	9e 01       	movw	r18, r28
    2c62:	20 0f       	add	r18, r16
    2c64:	31 1f       	adc	r19, r17
    2c66:	82 17       	cp	r24, r18
    2c68:	93 07       	cpc	r25, r19
    2c6a:	18 f4       	brcc	.+6      	; 0x2c72 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2c6c:	8c 01       	movw	r16, r24
    2c6e:	0c 1b       	sub	r16, r28
    2c70:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2c72:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x8>
    2c76:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0x9>
    2c7a:	a8 01       	movw	r20, r16
    2c7c:	6d ed       	ldi	r22, 0xDD	; 221
    2c7e:	71 e2       	ldi	r23, 0x21	; 33
    2c80:	8c 0f       	add	r24, r28
    2c82:	9d 1f       	adc	r25, r29
    2c84:	a7 d0       	rcall	.+334    	; 0x2dd4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2c86:	c0 0f       	add	r28, r16
    2c88:	d1 1f       	adc	r29, r17
    2c8a:	c0 93 1d 22 	sts	0x221D, r28	; 0x80221d <udd_ctrl_payload_nb_trans>
    2c8e:	d0 93 1e 22 	sts	0x221E, r29	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2c92:	00 34       	cpi	r16, 0x40	; 64
    2c94:	11 05       	cpc	r17, r1
    2c96:	69 f4       	brne	.+26     	; 0x2cb2 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2c98:	80 91 1f 22 	lds	r24, 0x221F	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2c9c:	90 91 20 22 	lds	r25, 0x2220	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2ca0:	8c 0f       	add	r24, r28
    2ca2:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2ca4:	20 91 9e 24 	lds	r18, 0x249E	; 0x80249e <udd_g_ctrlreq+0x6>
    2ca8:	30 91 9f 24 	lds	r19, 0x249F	; 0x80249f <udd_g_ctrlreq+0x7>
    2cac:	82 17       	cp	r24, r18
    2cae:	93 07       	cpc	r25, r19
    2cb0:	80 f0       	brcs	.+32     	; 0x2cd2 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2cb2:	e8 e9       	ldi	r30, 0x98	; 152
    2cb4:	f4 e2       	ldi	r31, 0x24	; 36
    2cb6:	c2 87       	std	Z+10, r28	; 0x0a
    2cb8:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2cba:	06 84       	ldd	r0, Z+14	; 0x0e
    2cbc:	f7 85       	ldd	r31, Z+15	; 0x0f
    2cbe:	e0 2d       	mov	r30, r0
    2cc0:	30 97       	sbiw	r30, 0x00	; 0
    2cc2:	29 f0       	breq	.+10     	; 0x2cce <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2cc4:	09 95       	icall
    2cc6:	81 11       	cpse	r24, r1
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2cca:	44 d9       	rcall	.-3448   	; 0x1f54 <udd_ctrl_stall_data>
    2ccc:	32 c0       	rjmp	.+100    	; 0x2d32 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2cce:	50 d9       	rcall	.-3424   	; 0x1f70 <udd_ctrl_send_zlp_in>
    2cd0:	30 c0       	rjmp	.+96     	; 0x2d32 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2cd2:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0xa>
    2cd6:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0xb>
    2cda:	c8 17       	cp	r28, r24
    2cdc:	d9 07       	cpc	r29, r25
    2cde:	f9 f4       	brne	.+62     	; 0x2d1e <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2ce0:	e0 91 a6 24 	lds	r30, 0x24A6	; 0x8024a6 <udd_g_ctrlreq+0xe>
    2ce4:	f0 91 a7 24 	lds	r31, 0x24A7	; 0x8024a7 <udd_g_ctrlreq+0xf>
    2ce8:	30 97       	sbiw	r30, 0x00	; 0
    2cea:	11 f4       	brne	.+4      	; 0x2cf0 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2cec:	33 d9       	rcall	.-3482   	; 0x1f54 <udd_ctrl_stall_data>
    2cee:	21 c0       	rjmp	.+66     	; 0x2d32 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2cf0:	09 95       	icall
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2cf6:	2e d9       	rcall	.-3492   	; 0x1f54 <udd_ctrl_stall_data>
    2cf8:	1c c0       	rjmp	.+56     	; 0x2d32 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2cfa:	20 91 1f 22 	lds	r18, 0x221F	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2cfe:	30 91 20 22 	lds	r19, 0x2220	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2d02:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    2d06:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2d0a:	82 0f       	add	r24, r18
    2d0c:	93 1f       	adc	r25, r19
    2d0e:	80 93 1f 22 	sts	0x221F, r24	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2d12:	90 93 20 22 	sts	0x2220, r25	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2d16:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    2d1a:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2d1e:	e4 e3       	ldi	r30, 0x34	; 52
    2d20:	f2 e2       	ldi	r31, 0x22	; 34
    2d22:	02 e0       	ldi	r16, 0x02	; 2
    2d24:	06 93       	lac	Z, r16
    2d26:	05 c0       	rjmp	.+10     	; 0x2d32 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2d28:	80 38       	cpi	r24, 0x80	; 128
    2d2a:	11 f4       	brne	.+4      	; 0x2d30 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2d2c:	37 d9       	rcall	.-3474   	; 0x1f9c <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2d2e:	01 c0       	rjmp	.+2      	; 0x2d32 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2d30:	51 da       	rcall	.-2910   	; 0x21d4 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2d32:	ff 91       	pop	r31
    2d34:	ef 91       	pop	r30
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	bf 91       	pop	r27
    2d3c:	af 91       	pop	r26
    2d3e:	9f 91       	pop	r25
    2d40:	8f 91       	pop	r24
    2d42:	7f 91       	pop	r23
    2d44:	6f 91       	pop	r22
    2d46:	5f 91       	pop	r21
    2d48:	4f 91       	pop	r20
    2d4a:	3f 91       	pop	r19
    2d4c:	2f 91       	pop	r18
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	0f 90       	pop	r0
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	0f 90       	pop	r0
    2d58:	1f 90       	pop	r1
    2d5a:	18 95       	reti

00002d5c <__udivmodhi4>:
    2d5c:	aa 1b       	sub	r26, r26
    2d5e:	bb 1b       	sub	r27, r27
    2d60:	51 e1       	ldi	r21, 0x11	; 17
    2d62:	07 c0       	rjmp	.+14     	; 0x2d72 <__udivmodhi4_ep>

00002d64 <__udivmodhi4_loop>:
    2d64:	aa 1f       	adc	r26, r26
    2d66:	bb 1f       	adc	r27, r27
    2d68:	a6 17       	cp	r26, r22
    2d6a:	b7 07       	cpc	r27, r23
    2d6c:	10 f0       	brcs	.+4      	; 0x2d72 <__udivmodhi4_ep>
    2d6e:	a6 1b       	sub	r26, r22
    2d70:	b7 0b       	sbc	r27, r23

00002d72 <__udivmodhi4_ep>:
    2d72:	88 1f       	adc	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	5a 95       	dec	r21
    2d78:	a9 f7       	brne	.-22     	; 0x2d64 <__udivmodhi4_loop>
    2d7a:	80 95       	com	r24
    2d7c:	90 95       	com	r25
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	08 95       	ret

00002d84 <__divmodhi4>:
    2d84:	97 fb       	bst	r25, 7
    2d86:	07 2e       	mov	r0, r23
    2d88:	16 f4       	brtc	.+4      	; 0x2d8e <__divmodhi4+0xa>
    2d8a:	00 94       	com	r0
    2d8c:	06 d0       	rcall	.+12     	; 0x2d9a <__divmodhi4_neg1>
    2d8e:	77 fd       	sbrc	r23, 7
    2d90:	08 d0       	rcall	.+16     	; 0x2da2 <__divmodhi4_neg2>
    2d92:	e4 df       	rcall	.-56     	; 0x2d5c <__udivmodhi4>
    2d94:	07 fc       	sbrc	r0, 7
    2d96:	05 d0       	rcall	.+10     	; 0x2da2 <__divmodhi4_neg2>
    2d98:	3e f4       	brtc	.+14     	; 0x2da8 <__divmodhi4_exit>

00002d9a <__divmodhi4_neg1>:
    2d9a:	90 95       	com	r25
    2d9c:	81 95       	neg	r24
    2d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2da0:	08 95       	ret

00002da2 <__divmodhi4_neg2>:
    2da2:	70 95       	com	r23
    2da4:	61 95       	neg	r22
    2da6:	7f 4f       	sbci	r23, 0xFF	; 255

00002da8 <__divmodhi4_exit>:
    2da8:	08 95       	ret

00002daa <__tablejump2__>:
    2daa:	ee 0f       	add	r30, r30
    2dac:	ff 1f       	adc	r31, r31
    2dae:	05 90       	lpm	r0, Z+
    2db0:	f4 91       	lpm	r31, Z
    2db2:	e0 2d       	mov	r30, r0
    2db4:	09 94       	ijmp

00002db6 <__umulhisi3>:
    2db6:	a2 9f       	mul	r26, r18
    2db8:	b0 01       	movw	r22, r0
    2dba:	b3 9f       	mul	r27, r19
    2dbc:	c0 01       	movw	r24, r0
    2dbe:	a3 9f       	mul	r26, r19
    2dc0:	70 0d       	add	r23, r0
    2dc2:	81 1d       	adc	r24, r1
    2dc4:	11 24       	eor	r1, r1
    2dc6:	91 1d       	adc	r25, r1
    2dc8:	b2 9f       	mul	r27, r18
    2dca:	70 0d       	add	r23, r0
    2dcc:	81 1d       	adc	r24, r1
    2dce:	11 24       	eor	r1, r1
    2dd0:	91 1d       	adc	r25, r1
    2dd2:	08 95       	ret

00002dd4 <memcpy>:
    2dd4:	fb 01       	movw	r30, r22
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <memcpy+0xa>
    2dda:	01 90       	ld	r0, Z+
    2ddc:	0d 92       	st	X+, r0
    2dde:	41 50       	subi	r20, 0x01	; 1
    2de0:	50 40       	sbci	r21, 0x00	; 0
    2de2:	d8 f7       	brcc	.-10     	; 0x2dda <memcpy+0x6>
    2de4:	08 95       	ret

00002de6 <_exit>:
    2de6:	f8 94       	cli

00002de8 <__stop_program>:
    2de8:	ff cf       	rjmp	.-2      	; 0x2de8 <__stop_program>
