
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00802000  00002f72  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000f02  008020dc  008020dc  000030e4  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003114  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000508  00000000  00000000  00003158  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c4c6  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f4e  00000000  00000000  0000fb26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009872  00000000  00000000  00011a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b68  00000000  00000000  0001b2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00030265  00000000  00000000  0001be50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024b7  00000000  00000000  0004c0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  0004e570  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be50  00000000  00000000  0004e998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__vector_6>
      1c:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_7>
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_24>
      64:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_25>
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	da c4       	rjmp	.+2484   	; 0xad2 <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_83>
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__vector_125>
     1f8:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__vector_126>
     1fc:	7e 0c       	add	r7, r14
     1fe:	a3 0c       	add	r10, r3
     200:	df 0c       	add	r13, r15
     202:	1b 0d       	add	r17, r11
     204:	24 0d       	add	r18, r4
     206:	29 0d       	add	r18, r9
     208:	7a 0d       	add	r23, r10
     20a:	7f 0d       	add	r23, r15
     20c:	cf 0c       	add	r12, r15
     20e:	d1 0c       	add	r13, r1
     210:	d3 0c       	add	r13, r3
     212:	d5 0c       	add	r13, r5
     214:	d7 0c       	add	r13, r7
     216:	d9 0c       	add	r13, r9
     218:	db 0c       	add	r13, r11
     21a:	dd 0c       	add	r13, r13
     21c:	0b 0d       	add	r16, r11
     21e:	0d 0d       	add	r16, r13
     220:	0f 0d       	add	r16, r15
     222:	11 0d       	add	r17, r1
     224:	13 0d       	add	r17, r3
     226:	15 0d       	add	r17, r5
     228:	17 0d       	add	r17, r7
     22a:	19 0d       	add	r17, r9
     22c:	35 0d       	add	r19, r5
     22e:	3f 0d       	add	r19, r15
     230:	49 0d       	add	r20, r9
     232:	57 0d       	add	r21, r7
     234:	59 0d       	add	r21, r9
     236:	5b 0d       	add	r21, r11
     238:	65 0d       	add	r22, r5
     23a:	6f 0d       	add	r22, r15
     23c:	f7 10       	cpse	r15, r7
     23e:	fa 10       	cpse	r15, r10
     240:	fd 10       	cpse	r15, r13
     242:	00 11       	cpse	r16, r0
     244:	03 11       	cpse	r16, r3
     246:	06 11       	cpse	r16, r6
     248:	09 11       	cpse	r16, r9

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	e2 e7       	ldi	r30, 0x72	; 114
     25e:	ff e2       	ldi	r31, 0x2F	; 47
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	ac 3d       	cpi	r26, 0xDC	; 220
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2f e2       	ldi	r18, 0x2F	; 47
     26e:	ac ed       	ldi	r26, 0xDC	; 220
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	ae 3d       	cpi	r26, 0xDE	; 222
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	91 d2       	rcall	.+1314   	; 0x7a0 <main>
     27e:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	d8 d3       	rcall	.+1968   	; 0xa46 <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <tiny_calibration_first_sof>:
     2f4:	e0 e7       	ldi	r30, 0x70	; 112
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	85 81       	ldd	r24, Z+5	; 0x05
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	85 83       	std	Z+5, r24	; 0x05
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	fa e0       	ldi	r31, 0x0A	; 10
     302:	8f eb       	ldi	r24, 0xBF	; 191
     304:	9d e5       	ldi	r25, 0x5D	; 93
     306:	86 a3       	std	Z+38, r24	; 0x26
     308:	97 a3       	std	Z+39, r25	; 0x27
     30a:	80 ee       	ldi	r24, 0xE0	; 224
     30c:	9e e2       	ldi	r25, 0x2E	; 46
     30e:	80 a3       	std	Z+32, r24	; 0x20
     310:	91 a3       	std	Z+33, r25	; 0x21
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
     316:	08 95       	ret

00000318 <tiny_calibration_maintain>:
     318:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     31c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     320:	81 3e       	cpi	r24, 0xE1	; 225
     322:	2e e2       	ldi	r18, 0x2E	; 46
     324:	92 07       	cpc	r25, r18
     326:	20 f0       	brcs	.+8      	; 0x330 <tiny_calibration_maintain+0x18>
     328:	20 91 c2 23 	lds	r18, 0x23C2	; 0x8023c2 <cali_value_negative_gradient>
     32c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     330:	80 3e       	cpi	r24, 0xE0	; 224
     332:	2e e2       	ldi	r18, 0x2E	; 46
     334:	92 07       	cpc	r25, r18
     336:	20 f4       	brcc	.+8      	; 0x340 <tiny_calibration_maintain+0x28>
     338:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <cali_value_positive_gradient>
     33c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     340:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     344:	22 23       	and	r18, r18
     346:	31 f0       	breq	.+12     	; 0x354 <tiny_calibration_maintain+0x3c>
     348:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     352:	35 c0       	rjmp	.+106    	; 0x3be <tiny_calibration_maintain+0xa6>
     354:	88 5f       	subi	r24, 0xF8	; 248
     356:	9a 42       	sbci	r25, 0x2A	; 42
     358:	81 3d       	cpi	r24, 0xD1	; 209
     35a:	97 40       	sbci	r25, 0x07	; 7
     35c:	80 f1       	brcs	.+96     	; 0x3be <tiny_calibration_maintain+0xa6>
     35e:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <__data_end>
     362:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <outOfRange>
     366:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <outOfRange+0x1>
     36a:	a0 91 df 20 	lds	r26, 0x20DF	; 0x8020df <outOfRange+0x2>
     36e:	b0 91 e0 20 	lds	r27, 0x20E0	; 0x8020e0 <outOfRange+0x3>
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	a1 1d       	adc	r26, r1
     376:	b1 1d       	adc	r27, r1
     378:	80 93 dd 20 	sts	0x20DD, r24	; 0x8020dd <outOfRange>
     37c:	90 93 de 20 	sts	0x20DE, r25	; 0x8020de <outOfRange+0x1>
     380:	a0 93 df 20 	sts	0x20DF, r26	; 0x8020df <outOfRange+0x2>
     384:	b0 93 e0 20 	sts	0x20E0, r27	; 0x8020e0 <outOfRange+0x3>
     388:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <outOfRange>
     38c:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <outOfRange+0x1>
     390:	a0 91 df 20 	lds	r26, 0x20DF	; 0x8020df <outOfRange+0x2>
     394:	b0 91 e0 20 	lds	r27, 0x20E0	; 0x8020e0 <outOfRange+0x3>
     398:	89 2f       	mov	r24, r25
     39a:	9a 2f       	mov	r25, r26
     39c:	ab 2f       	mov	r26, r27
     39e:	bb 27       	eor	r27, r27
     3a0:	ee ec       	ldi	r30, 0xCE	; 206
     3a2:	f3 e2       	ldi	r31, 0x23	; 35
     3a4:	84 8b       	std	Z+20, r24	; 0x14
     3a6:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <outOfRange>
     3aa:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <outOfRange+0x1>
     3ae:	a0 91 df 20 	lds	r26, 0x20DF	; 0x8020df <outOfRange+0x2>
     3b2:	b0 91 e0 20 	lds	r27, 0x20E0	; 0x8020e0 <outOfRange+0x3>
     3b6:	83 8b       	std	Z+19, r24	; 0x13
     3b8:	86 e0       	ldi	r24, 0x06	; 6
     3ba:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     3be:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     3c2:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	b1 f4       	brne	.+44     	; 0x3f6 <tiny_calibration_maintain+0xde>
     3ca:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     3ce:	8f 3f       	cpi	r24, 0xFF	; 255
     3d0:	91 f0       	breq	.+36     	; 0x3f6 <tiny_calibration_maintain+0xde>
     3d2:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3d6:	81 11       	cpse	r24, r1
     3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <tiny_calibration_maintain+0xce>
     3da:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3de:	81 50       	subi	r24, 0x01	; 1
     3e0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3e4:	08 95       	ret
     3e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3ea:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3ee:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3f2:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3f6:	08 95       	ret

000003f8 <tiny_calibration_safe_add>:
     3f8:	00 97       	sbiw	r24, 0x00	; 0
     3fa:	09 f4       	brne	.+2      	; 0x3fe <tiny_calibration_safe_add+0x6>
     3fc:	66 c0       	rjmp	.+204    	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
     3fe:	0c f0       	brlt	.+2      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     400:	9c 01       	movw	r18, r24
     402:	99 23       	and	r25, r25
     404:	34 f4       	brge	.+12     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     406:	22 27       	eor	r18, r18
     408:	33 27       	eor	r19, r19
     40a:	28 1b       	sub	r18, r24
     40c:	39 0b       	sbc	r19, r25
     40e:	51 e0       	ldi	r21, 0x01	; 1
     410:	01 c0       	rjmp	.+2      	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	e8 e6       	ldi	r30, 0x68	; 104
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	83 81       	ldd	r24, Z+3	; 0x03
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <calTemp>
     420:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <calTemp+0x1>
     424:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <calTemp>
     428:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <calTemp+0x1>
     42c:	96 95       	lsr	r25
     42e:	98 2f       	mov	r25, r24
     430:	88 27       	eor	r24, r24
     432:	97 95       	ror	r25
     434:	87 95       	ror	r24
     436:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <calTemp>
     43a:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <calTemp+0x1>
     43e:	42 81       	ldd	r20, Z+2	; 0x02
     440:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <calTemp>
     444:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <calTemp+0x1>
     448:	84 0f       	add	r24, r20
     44a:	91 1d       	adc	r25, r1
     44c:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <calTemp>
     450:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <calTemp+0x1>
     454:	00 00       	nop
     456:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <calTemp>
     45a:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <calTemp+0x1>
     45e:	82 17       	cp	r24, r18
     460:	93 07       	cpc	r25, r19
     462:	28 f4       	brcc	.+10     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
     464:	10 92 c0 23 	sts	0x23C0, r1	; 0x8023c0 <calTemp>
     468:	10 92 c1 23 	sts	0x23C1, r1	; 0x8023c1 <calTemp+0x1>
     46c:	08 95       	ret
     46e:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <calTemp>
     472:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <calTemp+0x1>
     476:	82 0f       	add	r24, r18
     478:	93 1f       	adc	r25, r19
     47a:	81 15       	cp	r24, r1
     47c:	90 42       	sbci	r25, 0x20	; 32
     47e:	38 f0       	brcs	.+14     	; 0x48e <__FUSE_REGION_LENGTH__+0x8e>
     480:	8f ef       	ldi	r24, 0xFF	; 255
     482:	9f e1       	ldi	r25, 0x1F	; 31
     484:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <calTemp>
     488:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <calTemp+0x1>
     48c:	08 95       	ret
     48e:	55 23       	and	r21, r21
     490:	59 f0       	breq	.+22     	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
     492:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <calTemp>
     496:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <calTemp+0x1>
     49a:	82 1b       	sub	r24, r18
     49c:	93 0b       	sbc	r25, r19
     49e:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <calTemp>
     4a2:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <calTemp+0x1>
     4a6:	0a c0       	rjmp	.+20     	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
     4a8:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <calTemp>
     4ac:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <calTemp+0x1>
     4b0:	28 0f       	add	r18, r24
     4b2:	39 1f       	adc	r19, r25
     4b4:	20 93 c0 23 	sts	0x23C0, r18	; 0x8023c0 <calTemp>
     4b8:	30 93 c1 23 	sts	0x23C1, r19	; 0x8023c1 <calTemp+0x1>
     4bc:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <calTemp>
     4c0:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <calTemp+0x1>
     4c4:	8f 77       	andi	r24, 0x7F	; 127
     4c6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4ca:	08 95       	ret

000004cc <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4d0:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4d4:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4d8:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4dc:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4e0:	9e 01       	movw	r18, r28
     4e2:	28 1b       	sub	r18, r24
     4e4:	39 0b       	sbc	r19, r25
     4e6:	20 93 c3 23 	sts	0x23C3, r18	; 0x8023c3 <gradient>
     4ea:	30 93 c4 23 	sts	0x23C4, r19	; 0x8023c4 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4ee:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <__data_end>
     4f2:	81 11       	cpse	r24, r1
     4f4:	4d c0       	rjmp	.+154    	; 0x590 <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4f6:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <gradient>
     4fa:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <gradient+0x1>
     4fe:	8e 3c       	cpi	r24, 0xCE	; 206
     500:	9f 4f       	sbci	r25, 0xFF	; 255
     502:	e4 f4       	brge	.+56     	; 0x53c <tiny_calibration_find_values+0x70>
     504:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <gradient>
     508:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <gradient+0x1>
     50c:	8b 36       	cpi	r24, 0x6B	; 107
     50e:	9f 4f       	sbci	r25, 0xFF	; 255
     510:	ac f0       	brlt	.+42     	; 0x53c <tiny_calibration_find_values+0x70>
			if(inarow){
     512:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     516:	88 23       	and	r24, r24
     518:	31 f0       	breq	.+12     	; 0x526 <tiny_calibration_find_values+0x5a>
				inarow--;
     51a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     51e:	81 50       	subi	r24, 0x01	; 1
     520:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     524:	35 c0       	rjmp	.+106    	; 0x590 <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     526:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     52a:	80 93 c2 23 	sts	0x23C2, r24	; 0x8023c2 <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <__data_end>
				inarow = NUM_INAROW;
     534:	8c e0       	ldi	r24, 0x0C	; 12
     536:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     53a:	2a c0       	rjmp	.+84     	; 0x590 <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     53c:	8c e0       	ldi	r24, 0x0C	; 12
     53e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     542:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <gradient>
     546:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <gradient+0x1>
     54a:	8a 36       	cpi	r24, 0x6A	; 106
     54c:	9f 4f       	sbci	r25, 0xFF	; 255
     54e:	1c f0       	brlt	.+6      	; 0x556 <tiny_calibration_find_values+0x8a>
     550:	8f ef       	ldi	r24, 0xFF	; 255
     552:	9f ef       	ldi	r25, 0xFF	; 255
     554:	02 c0       	rjmp	.+4      	; 0x55a <tiny_calibration_find_values+0x8e>
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	80 93 bd 23 	sts	0x23BD, r24	; 0x8023bd <calChange>
     55e:	90 93 be 23 	sts	0x23BE, r25	; 0x8023be <calChange+0x1>
			calChange -= gradient / 48;
     562:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <gradient>
     566:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <gradient+0x1>
     56a:	20 91 bd 23 	lds	r18, 0x23BD	; 0x8023bd <calChange>
     56e:	30 91 be 23 	lds	r19, 0x23BE	; 0x8023be <calChange+0x1>
     572:	60 e3       	ldi	r22, 0x30	; 48
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__divmodhi4>
     57a:	26 1b       	sub	r18, r22
     57c:	37 0b       	sbc	r19, r23
     57e:	20 93 bd 23 	sts	0x23BD, r18	; 0x8023bd <calChange>
     582:	30 93 be 23 	sts	0x23BE, r19	; 0x8023be <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     586:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <calChange>
     58a:	90 91 be 23 	lds	r25, 0x23BE	; 0x8023be <calChange+0x1>
     58e:	34 df       	rcall	.-408    	; 0x3f8 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     590:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <__data_end>
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	29 f5       	brne	.+74     	; 0x5e2 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     598:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <gradient>
     59c:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <gradient+0x1>
     5a0:	c3 97       	sbiw	r24, 0x33	; 51
     5a2:	94 f0       	brlt	.+36     	; 0x5c8 <tiny_calibration_find_values+0xfc>
			if(inarow){
     5a4:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     5a8:	88 23       	and	r24, r24
     5aa:	31 f0       	breq	.+12     	; 0x5b8 <tiny_calibration_find_values+0xec>
				inarow--;
     5ac:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     5b0:	81 50       	subi	r24, 0x01	; 1
     5b2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     5b6:	15 c0       	rjmp	.+42     	; 0x5e2 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     5b8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     5bc:	80 93 bf 23 	sts	0x23BF, r24	; 0x8023bf <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     5c0:	83 e0       	ldi	r24, 0x03	; 3
     5c2:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <__data_end>
     5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     5c8:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <gradient>
     5cc:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <gradient+0x1>
     5d0:	87 39       	cpi	r24, 0x97	; 151
     5d2:	91 05       	cpc	r25, r1
     5d4:	1c f4       	brge	.+6      	; 0x5dc <tiny_calibration_find_values+0x110>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <tiny_calibration_find_values+0x114>
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
     5de:	9f ef       	ldi	r25, 0xFF	; 255
     5e0:	0b df       	rcall	.-490    	; 0x3f8 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5e2:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5e6:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5f0:	86 17       	cp	r24, r22
     5f2:	97 07       	cpc	r25, r23
     5f4:	79 f0       	breq	.+30     	; 0x614 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5f6:	68 17       	cp	r22, r24
     5f8:	79 07       	cpc	r23, r25
     5fa:	28 f4       	brcc	.+10     	; 0x606 <magnitude_difference+0x16>
     5fc:	9c 01       	movw	r18, r24
     5fe:	26 1b       	sub	r18, r22
     600:	37 0b       	sbc	r19, r23
     602:	b9 01       	movw	r22, r18
     604:	09 c0       	rjmp	.+18     	; 0x618 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     606:	86 17       	cp	r24, r22
     608:	97 07       	cpc	r25, r23
     60a:	18 f4       	brcc	.+6      	; 0x612 <magnitude_difference+0x22>
     60c:	68 1b       	sub	r22, r24
     60e:	79 0b       	sbc	r23, r25
     610:	03 c0       	rjmp	.+6      	; 0x618 <magnitude_difference+0x28>
     612:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	86 2f       	mov	r24, r22
     61a:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     61c:	08 95       	ret

0000061e <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     622:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     626:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     62a:	89 2b       	or	r24, r25
     62c:	51 f0       	breq	.+20     	; 0x642 <tiny_calibration_layer2+0x24>
		layer2_counter--;
     62e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     632:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     63c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     640:	65 c0       	rjmp	.+202    	; 0x70c <tiny_calibration_layer2+0xee>
	}
	layer2_counter = LAYER2_INTERVAL;
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     64a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     64e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     652:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     656:	01 96       	adiw	r24, 0x01	; 1
     658:	09 f4       	brne	.+2      	; 0x65c <tiny_calibration_layer2+0x3e>
     65a:	58 c0       	rjmp	.+176    	; 0x70c <tiny_calibration_layer2+0xee>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     65c:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     660:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	if(magnitude_difference(TRFCNT_temp, median_TRFCNT) > 200){
     664:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     668:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     66c:	ce 01       	movw	r24, r28
     66e:	c0 df       	rcall	.-128    	; 0x5f0 <magnitude_difference>
     670:	89 3c       	cpi	r24, 0xC9	; 201
     672:	91 05       	cpc	r25, r1
     674:	00 f1       	brcs	.+64     	; 0x6b6 <tiny_calibration_layer2+0x98>
		TRFCNT_temp = (TRFCNT_temp + HALFPACKET_SIZE) % PACKET_SIZE;
     676:	ae 01       	movw	r20, r28
     678:	49 58       	subi	r20, 0x89	; 137
     67a:	5e 4f       	sbci	r21, 0xFE	; 254
     67c:	9a 01       	movw	r18, r20
     67e:	36 95       	lsr	r19
     680:	27 95       	ror	r18
     682:	a1 eb       	ldi	r26, 0xB1	; 177
     684:	bb e2       	ldi	r27, 0x2B	; 43
     686:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__umulhisi3>
     68a:	ec 01       	movw	r28, r24
     68c:	00 24       	eor	r0, r0
     68e:	cc 0f       	add	r28, r28
     690:	dd 1f       	adc	r29, r29
     692:	00 1c       	adc	r0, r0
     694:	cc 0f       	add	r28, r28
     696:	dd 1f       	adc	r29, r29
     698:	00 1c       	adc	r0, r0
     69a:	cd 2f       	mov	r28, r29
     69c:	d0 2d       	mov	r29, r0
     69e:	2e ee       	ldi	r18, 0xEE	; 238
     6a0:	32 e0       	ldi	r19, 0x02	; 2
     6a2:	c2 9f       	mul	r28, r18
     6a4:	c0 01       	movw	r24, r0
     6a6:	c3 9f       	mul	r28, r19
     6a8:	90 0d       	add	r25, r0
     6aa:	d2 9f       	mul	r29, r18
     6ac:	90 0d       	add	r25, r0
     6ae:	11 24       	eor	r1, r1
     6b0:	ea 01       	movw	r28, r20
     6b2:	c8 1b       	sub	r28, r24
     6b4:	d9 0b       	sbc	r29, r25
	}
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6b6:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6ba:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6be:	8c 17       	cp	r24, r28
     6c0:	9d 07       	cpc	r25, r29
     6c2:	78 f4       	brcc	.+30     	; 0x6e2 <tiny_calibration_layer2+0xc4>
     6c4:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6c8:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6cc:	ce 01       	movw	r24, r28
     6ce:	90 df       	rcall	.-224    	; 0x5f0 <magnitude_difference>
     6d0:	02 97       	sbiw	r24, 0x02	; 2
     6d2:	38 f0       	brcs	.+14     	; 0x6e2 <tiny_calibration_layer2+0xc4>
		TC_CALI.PERBUF = 24000;
     6d4:	80 ec       	ldi	r24, 0xC0	; 192
     6d6:	9d e5       	ldi	r25, 0x5D	; 93
     6d8:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6dc:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6e0:	15 c0       	rjmp	.+42     	; 0x70c <tiny_calibration_layer2+0xee>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6e2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6e6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6ea:	c8 17       	cp	r28, r24
     6ec:	d9 07       	cpc	r29, r25
     6ee:	70 f4       	brcc	.+28     	; 0x70c <tiny_calibration_layer2+0xee>
     6f0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6f4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6f8:	ce 01       	movw	r24, r28
     6fa:	7a df       	rcall	.-268    	; 0x5f0 <magnitude_difference>
     6fc:	02 97       	sbiw	r24, 0x02	; 2
     6fe:	30 f0       	brcs	.+12     	; 0x70c <tiny_calibration_layer2+0xee>
		TC_CALI.PERBUF = 23999;
     700:	8f eb       	ldi	r24, 0xBF	; 191
     702:	9d e5       	ldi	r25, 0x5D	; 93
     704:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     708:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     712:	ac 01       	movw	r20, r24
     714:	46 0f       	add	r20, r22
     716:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     718:	86 1b       	sub	r24, r22
     71a:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     71c:	e0 e0       	ldi	r30, 0x00	; 0
     71e:	fa e0       	ldi	r31, 0x0A	; 10
     720:	20 a1       	ldd	r18, Z+32	; 0x20
     722:	31 a1       	ldd	r19, Z+33	; 0x21
     724:	24 17       	cp	r18, r20
     726:	35 07       	cpc	r19, r21
     728:	d8 f7       	brcc	.-10     	; 0x720 <tiny_calibration_synchronise_phase+0xe>
     72a:	20 a1       	ldd	r18, Z+32	; 0x20
     72c:	31 a1       	ldd	r19, Z+33	; 0x21
     72e:	82 17       	cp	r24, r18
     730:	93 07       	cpc	r25, r19
     732:	b0 f7       	brcc	.-20     	; 0x720 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     734:	08 95       	ret

00000736 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     736:	e0 e8       	ldi	r30, 0x80	; 128
     738:	f6 e0       	ldi	r31, 0x06	; 6
     73a:	8f e0       	ldi	r24, 0x0F	; 15
     73c:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	84 83       	std	Z+4, r24	; 0x04
     742:	08 95       	ret

00000744 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     744:	08 95       	ret

00000746 <iso_callback>:
bool main_setup_in_received(void)
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	84 2f       	mov	r24, r20
	unsigned short offset = (ep - 0x81) * 125;
     74c:	64 2f       	mov	r22, r20
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	61 58       	subi	r22, 0x81	; 129
     752:	71 09       	sbc	r23, r1
     754:	9d e7       	ldi	r25, 0x7D	; 125
     756:	96 9f       	mul	r25, r22
     758:	a0 01       	movw	r20, r0
     75a:	97 9f       	mul	r25, r23
     75c:	50 0d       	add	r21, r0
     75e:	11 24       	eor	r1, r1
	if ((global_mode < 5) && (ep > 0x83)) offset += 375; //Shift from range [375, 750]  to [750, 1125]  Don't do this in modes 6 and 7 because they use 750 byte long sub-buffers.
     760:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <global_mode>
     764:	95 30       	cpi	r25, 0x05	; 5
     766:	20 f4       	brcc	.+8      	; 0x770 <iso_callback+0x2a>
     768:	84 38       	cpi	r24, 0x84	; 132
     76a:	10 f0       	brcs	.+4      	; 0x770 <iso_callback+0x2a>
     76c:	49 58       	subi	r20, 0x89	; 137
     76e:	5e 4f       	sbci	r21, 0xFE	; 254
	udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + offset], 125, iso_callback);
     770:	90 91 e8 20 	lds	r25, 0x20E8	; 0x8020e8 <usb_state>
     774:	67 e7       	ldi	r22, 0x77	; 119
     776:	71 e0       	ldi	r23, 0x01	; 1
     778:	96 9f       	mul	r25, r22
     77a:	90 01       	movw	r18, r0
     77c:	97 9f       	mul	r25, r23
     77e:	30 0d       	add	r19, r0
     780:	11 24       	eor	r1, r1
     782:	24 0f       	add	r18, r20
     784:	35 1f       	adc	r19, r21
     786:	a9 01       	movw	r20, r18
     788:	46 50       	subi	r20, 0x06	; 6
     78a:	58 4d       	sbci	r21, 0xD8	; 216
     78c:	03 ea       	ldi	r16, 0xA3	; 163
     78e:	13 e0       	ldi	r17, 0x03	; 3
     790:	2d e7       	ldi	r18, 0x7D	; 125
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	0e 94 7d 14 	call	0x28fa	; 0x28fa <udd_ep_run>
	return;
}
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <main>:
volatile unsigned short dma_ch1_ran;

unified_debug uds;

int main(void){
	irq_initialize_vectors();
     7a0:	87 e0       	ldi	r24, 0x07	; 7
     7a2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     7a6:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     7a8:	6d dd       	rcall	.-1318   	; 0x284 <tiny_calibration_init>
		
	board_init();
     7aa:	cc df       	rcall	.-104    	; 0x744 <board_init>
	udc_start();
     7ac:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <udc_start>
	tiny_dac_setup();
     7b0:	a3 d1       	rcall	.+838    	; 0xaf8 <tiny_dac_setup>
	tiny_dma_setup();
     7b2:	c6 d1       	rcall	.+908    	; 0xb40 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	4f d1       	rcall	.+670    	; 0xa58 <tiny_adc_setup>
	tiny_adc_pid_setup();
     7ba:	3b d1       	rcall	.+630    	; 0xa32 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     7bc:	8c e0       	ldi	r24, 0x0C	; 12
     7be:	2f d1       	rcall	.+606    	; 0xa1e <tiny_adc_ch1setup>
	tiny_timer_setup();
     7c0:	b2 d5       	rcall	.+2916   	; 0x1326 <tiny_timer_setup>
	tiny_uart_setup();
     7c2:	6d d6       	rcall	.+3290   	; 0x149e <tiny_uart_setup>
	tiny_spi_setup();
     7c4:	86 d6       	rcall	.+3340   	; 0x14d2 <tiny_spi_setup>
	tiny_dig_setup();
     7c6:	b7 df       	rcall	.-146    	; 0x736 <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");

	strcpy(uds.header, "debug123");
     7c8:	89 e0       	ldi	r24, 0x09	; 9
     7ca:	e2 ed       	ldi	r30, 0xD2	; 210
     7cc:	f0 e2       	ldi	r31, 0x20	; 32
     7ce:	ae ec       	ldi	r26, 0xCE	; 206
     7d0:	b3 e2       	ldi	r27, 0x23	; 35
     7d2:	01 90       	ld	r0, Z+
     7d4:	0d 92       	st	X+, r0
     7d6:	8a 95       	dec	r24
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <main+0x32>
     7da:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <debug_counter>
     7de:	90 91 c7 23 	lds	r25, 0x23C7	; 0x8023c7 <debug_counter+0x1>
     7e2:	a0 91 c8 23 	lds	r26, 0x23C8	; 0x8023c8 <debug_counter+0x2>
     7e6:	b0 91 c9 23 	lds	r27, 0x23C9	; 0x8023c9 <debug_counter+0x3>

	while (true) {
		debug_counter++;
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	a1 1d       	adc	r26, r1
     7ee:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	21 ee       	ldi	r18, 0xE1	; 225
     7f4:	92 07       	cpc	r25, r18
     7f6:	25 ef       	ldi	r18, 0xF5	; 245
     7f8:	a2 07       	cpc	r26, r18
     7fa:	25 e0       	ldi	r18, 0x05	; 5
     7fc:	b2 07       	cpc	r27, r18
     7fe:	18 f0       	brcs	.+6      	; 0x806 <main+0x66>
			debug_counter = 0;
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     822:	e3 cf       	rjmp	.-58     	; 0x7ea <main+0x4a>

00000824 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     824:	08 95       	ret

00000826 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     826:	08 95       	ret

00000828 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
	cli();
     82c:	f8 94       	cli
	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     82e:	a0 e0       	ldi	r26, 0x00	; 0
     830:	b1 e0       	ldi	r27, 0x01	; 1
     832:	54 96       	adiw	r26, 0x14	; 20
     834:	8c 91       	ld	r24, X
     836:	54 97       	sbiw	r26, 0x14	; 20
     838:	ee ec       	ldi	r30, 0xCE	; 206
     83a:	f3 e2       	ldi	r31, 0x23	; 35
     83c:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     83e:	55 96       	adiw	r26, 0x15	; 21
     840:	8c 91       	ld	r24, X
     842:	55 97       	sbiw	r26, 0x15	; 21
     844:	82 87       	std	Z+10, r24	; 0x0a
	uds.trfcntL1 = DMA.CH1.TRFCNTL;
     846:	94 96       	adiw	r26, 0x24	; 36
     848:	8c 91       	ld	r24, X
     84a:	94 97       	sbiw	r26, 0x24	; 36
     84c:	83 87       	std	Z+11, r24	; 0x0b
	uds.trfcntH1 = DMA.CH1.TRFCNTH;
     84e:	95 96       	adiw	r26, 0x25	; 37
     850:	8c 91       	ld	r24, X
     852:	95 97       	sbiw	r26, 0x25	; 37
     854:	84 87       	std	Z+12, r24	; 0x0c
	uds.counterL = TC_CALI.CNTL;
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	da e0       	ldi	r29, 0x0A	; 10
     85a:	88 a1       	ldd	r24, Y+32	; 0x20
     85c:	85 8b       	std	Z+21, r24	; 0x15
	uds.counterH = TC_CALI.CNTH;
     85e:	89 a1       	ldd	r24, Y+33	; 0x21
     860:	86 8b       	std	Z+22, r24	; 0x16
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     862:	54 96       	adiw	r26, 0x14	; 20
     864:	8d 91       	ld	r24, X+
     866:	9c 91       	ld	r25, X
     868:	55 97       	sbiw	r26, 0x15	; 21
     86a:	86 34       	cpi	r24, 0x46	; 70
     86c:	91 40       	sbci	r25, 0x01	; 1
     86e:	80 f0       	brcs	.+32     	; 0x890 <main_sof_action+0x68>
     870:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     874:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     878:	89 3a       	cpi	r24, 0xA9	; 169
     87a:	91 40       	sbci	r25, 0x01	; 1
     87c:	48 f4       	brcc	.+18     	; 0x890 <main_sof_action+0x68>
		currentTrfcnt = DMA.CH0.TRFCNT;
     87e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     882:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     886:	80 93 d6 2f 	sts	0x2FD6, r24	; 0x802fd6 <currentTrfcnt>
     88a:	90 93 d7 2f 	sts	0x2FD7, r25	; 0x802fd7 <currentTrfcnt+0x1>
		asm("nop");
     88e:	00 00       	nop
	}
	if(firstFrame){
     890:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <firstFrame>
     894:	88 23       	and	r24, r24
     896:	41 f0       	breq	.+16     	; 0x8a8 <main_sof_action+0x80>
		tiny_calibration_first_sof();
     898:	2d dd       	rcall	.-1446   	; 0x2f4 <tiny_calibration_first_sof>
		firstFrame = 0;
     89a:	10 92 e6 20 	sts	0x20E6, r1	; 0x8020e6 <firstFrame>
		tcinit = 1;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 e5 20 	sts	0x20E5, r24	; 0x8020e5 <tcinit>
		sei();
     8a4:	78 94       	sei
		return;
     8a6:	65 c0       	rjmp	.+202    	; 0x972 <main_sof_action+0x14a>
	}
	else{
		if(tcinit){
     8a8:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <tcinit>
     8ac:	88 23       	and	r24, r24
     8ae:	b9 f1       	breq	.+110    	; 0x91e <main_sof_action+0xf6>
			if(calibration_values_found == 0x03){
     8b0:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <__data_end>
     8b4:	83 30       	cpi	r24, 0x03	; 3
     8b6:	19 f4       	brne	.+6      	; 0x8be <main_sof_action+0x96>
				tiny_calibration_maintain();
     8b8:	2f dd       	rcall	.-1442   	; 0x318 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     8ba:	b1 de       	rcall	.-670    	; 0x61e <tiny_calibration_layer2>
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <main_sof_action+0x98>
			} else tiny_calibration_find_values();
     8be:	06 de       	rcall	.-1012   	; 0x4cc <tiny_calibration_find_values>
			if(debug_divider == DEBUG_DIVISION){
     8c0:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <debug_divider>
     8c4:	8f 37       	cpi	r24, 0x7F	; 127
     8c6:	31 f5       	brne	.+76     	; 0x914 <main_sof_action+0xec>
				debug_divider = 0;
     8c8:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <debug_divider>
				cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     8cc:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <cntCntCnt>
     8d0:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <cntCntCnt+0x1>
     8d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	ea 52       	subi	r30, 0x2A	; 42
     8e2:	f2 4d       	sbci	r31, 0xD2	; 210
     8e4:	80 83       	st	Z, r24
     8e6:	91 83       	std	Z+1, r25	; 0x01
				if(cntCntCnt == (CNT_CNT_MAX - 1)){
     8e8:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <cntCntCnt>
     8ec:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <cntCntCnt+0x1>
     8f0:	8f 3f       	cpi	r24, 0xFF	; 255
     8f2:	91 05       	cpc	r25, r1
     8f4:	29 f4       	brne	.+10     	; 0x900 <main_sof_action+0xd8>
					cntCntCnt = 0;
     8f6:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <cntCntCnt>
     8fa:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <cntCntCnt+0x1>
     8fe:	0f c0       	rjmp	.+30     	; 0x91e <main_sof_action+0xf6>
				}
				else cntCntCnt++;
     900:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <cntCntCnt>
     904:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <cntCntCnt+0x1>
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <cntCntCnt>
     90e:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <cntCntCnt+0x1>
     912:	05 c0       	rjmp	.+10     	; 0x91e <main_sof_action+0xf6>
			}
			else debug_divider++;
     914:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <debug_divider>
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	80 93 e1 20 	sts	0x20E1, r24	; 0x8020e1 <debug_divider>
		}
	}
	
	if(debugOnNextEnd){
     91e:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <debugOnNextEnd>
     922:	88 23       	and	r24, r24
     924:	51 f0       	breq	.+20     	; 0x93a <main_sof_action+0x112>
		currentTrfcnt = DMA.CH0.TRFCNT;
     926:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     92a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     92e:	80 93 d6 2f 	sts	0x2FD6, r24	; 0x802fd6 <currentTrfcnt>
     932:	90 93 d7 2f 	sts	0x2FD7, r25	; 0x802fd7 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     936:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <debugOnNextEnd>
	}
	if(global_mode < 5){
     93a:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     93e:	85 30       	cpi	r24, 0x05	; 5
     940:	60 f4       	brcc	.+24     	; 0x95a <main_sof_action+0x132>
		usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     942:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     946:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	27 37       	cpi	r18, 0x77	; 119
     94e:	31 40       	sbci	r19, 0x01	; 1
     950:	08 f0       	brcs	.+2      	; 0x954 <main_sof_action+0x12c>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <usb_state>
     958:	0b c0       	rjmp	.+22     	; 0x970 <main_sof_action+0x148>
	}
	else{
		usb_state = (DMA.CH0.TRFCNT < 750) ? 1 : 0;
     95a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     95e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	2e 3e       	cpi	r18, 0xEE	; 238
     966:	32 40       	sbci	r19, 0x02	; 2
     968:	08 f0       	brcs	.+2      	; 0x96c <main_sof_action+0x144>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <usb_state>
	}
	sei();
     970:	78 94       	sei
	return;
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <main_vendor_enable>:

bool main_vendor_enable(void)
{
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
	main_b_vendor_enable = true;
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	80 93 eb 20 	sts	0x20EB, r24	; 0x8020eb <main_b_vendor_enable>
	firstFrame = 1;
     982:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <firstFrame>
	udd_ep_run(0x81, false, (uint8_t *)&isoBuf[0], 125, iso_callback);
     986:	03 ea       	ldi	r16, 0xA3	; 163
     988:	13 e0       	ldi	r17, 0x03	; 3
     98a:	2d e7       	ldi	r18, 0x7D	; 125
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	4a ef       	ldi	r20, 0xFA	; 250
     990:	57 e2       	ldi	r21, 0x27	; 39
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	81 e8       	ldi	r24, 0x81	; 129
     996:	0e 94 7d 14 	call	0x28fa	; 0x28fa <udd_ep_run>
	udd_ep_run(0x82, false, (uint8_t *)&isoBuf[125], 125, iso_callback);
     99a:	2d e7       	ldi	r18, 0x7D	; 125
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	47 e7       	ldi	r20, 0x77	; 119
     9a0:	58 e2       	ldi	r21, 0x28	; 40
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	82 e8       	ldi	r24, 0x82	; 130
     9a6:	0e 94 7d 14 	call	0x28fa	; 0x28fa <udd_ep_run>
	udd_ep_run(0x83, false, (uint8_t *)&isoBuf[250], 125, iso_callback);
     9aa:	2d e7       	ldi	r18, 0x7D	; 125
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	44 ef       	ldi	r20, 0xF4	; 244
     9b0:	58 e2       	ldi	r21, 0x28	; 40
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	83 e8       	ldi	r24, 0x83	; 131
     9b6:	0e 94 7d 14 	call	0x28fa	; 0x28fa <udd_ep_run>
	udd_ep_run(0x84, false, (uint8_t *)&isoBuf[375], 125, iso_callback);
     9ba:	2d e7       	ldi	r18, 0x7D	; 125
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	41 e7       	ldi	r20, 0x71	; 113
     9c0:	59 e2       	ldi	r21, 0x29	; 41
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	84 e8       	ldi	r24, 0x84	; 132
     9c6:	0e 94 7d 14 	call	0x28fa	; 0x28fa <udd_ep_run>
	udd_ep_run(0x85, false, (uint8_t *)&isoBuf[500], 125, iso_callback);
     9ca:	2d e7       	ldi	r18, 0x7D	; 125
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	4e ee       	ldi	r20, 0xEE	; 238
     9d0:	59 e2       	ldi	r21, 0x29	; 41
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	85 e8       	ldi	r24, 0x85	; 133
     9d6:	0e 94 7d 14 	call	0x28fa	; 0x28fa <udd_ep_run>
	udd_ep_run(0x86, false, (uint8_t *)&isoBuf[625], 125, iso_callback);
     9da:	2d e7       	ldi	r18, 0x7D	; 125
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	4b e6       	ldi	r20, 0x6B	; 107
     9e0:	5a e2       	ldi	r21, 0x2A	; 42
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	86 e8       	ldi	r24, 0x86	; 134
     9e6:	0e 94 7d 14 	call	0x28fa	; 0x28fa <udd_ep_run>
	return true;
}
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	08 95       	ret

000009f2 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     9f2:	10 92 eb 20 	sts	0x20EB, r1	; 0x8020eb <main_b_vendor_enable>
     9f6:	08 95       	ret

000009f8 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 95       	ret

000009fc <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	08 95       	ret

00000a00 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     a00:	e0 e0       	ldi	r30, 0x00	; 0
     a02:	f2 e0       	ldi	r31, 0x02	; 2
     a04:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a06:	98 2f       	mov	r25, r24
     a08:	9c 71       	andi	r25, 0x1C	; 28
     a0a:	93 68       	ori	r25, 0x83	; 131
     a0c:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     a0e:	88 1f       	adc	r24, r24
     a10:	88 27       	eor	r24, r24
     a12:	88 1f       	adc	r24, r24
     a14:	88 0f       	add	r24, r24
     a16:	81 a3       	std	Z+33, r24	; 0x21
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a18:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     a1a:	16 a2       	std	Z+38, r1	; 0x26
     a1c:	08 95       	ret

00000a1e <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     a1e:	e0 e0       	ldi	r30, 0x00	; 0
     a20:	f2 e0       	ldi	r31, 0x02	; 2
     a22:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a24:	83 68       	ori	r24, 0x83	; 131
     a26:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     a28:	80 e1       	ldi	r24, 0x10	; 16
     a2a:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a2c:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     a2e:	16 aa       	std	Z+54, r1	; 0x36
     a30:	08 95       	ret

00000a32 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     a32:	e0 e0       	ldi	r30, 0x00	; 0
     a34:	f2 e0       	ldi	r31, 0x02	; 2
     a36:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a38:	83 e8       	ldi	r24, 0x83	; 131
     a3a:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     a3c:	8f e2       	ldi	r24, 0x2F	; 47
     a3e:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a40:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     a42:	16 a6       	std	Z+46, r1	; 0x2e
     a44:	08 95       	ret

00000a46 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     a46:	aa ec       	ldi	r26, 0xCA	; 202
     a48:	b1 e0       	ldi	r27, 0x01	; 1
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     a4e:	e8 2f       	mov	r30, r24
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     a54:	1c 92       	st	X, r1

	return( result );
}
     a56:	08 95       	ret

00000a58 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     a5c:	e0 e7       	ldi	r30, 0x70	; 112
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	9d 7f       	andi	r25, 0xFD	; 253
     a64:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     a66:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a6a:	62 30       	cpi	r22, 0x02	; 2
     a6c:	31 f1       	breq	.+76     	; 0xaba <tiny_adc_setup+0x62>
     a6e:	e0 e0       	ldi	r30, 0x00	; 0
     a70:	f2 e0       	ldi	r31, 0x02	; 2
     a72:	9c e1       	ldi	r25, 0x1C	; 28
     a74:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a76:	90 e4       	ldi	r25, 0x40	; 64
     a78:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a7a:	81 11       	cpse	r24, r1
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <tiny_adc_setup+0x2a>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <tiny_adc_setup+0x2c>
     a82:	80 ec       	ldi	r24, 0xC0	; 192
     a84:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     a88:	61 30       	cpi	r22, 0x01	; 1
     a8a:	11 f0       	breq	.+4      	; 0xa90 <tiny_adc_setup+0x38>
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <tiny_adc_setup+0x3a>
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	c0 e0       	ldi	r28, 0x00	; 0
     a94:	d2 e0       	ldi	r29, 0x02	; 2
     a96:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     a98:	80 e2       	ldi	r24, 0x20	; 32
     a9a:	d5 df       	rcall	.-86     	; 0xa46 <ReadCalibrationByte>
     a9c:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     a9e:	81 e2       	ldi	r24, 0x21	; 33
     aa0:	d2 df       	rcall	.-92     	; 0xa46 <ReadCalibrationByte>
     aa2:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     aa4:	18 8e       	std	Y+24, r1	; 0x18
     aa6:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     aac:	c2 df       	rcall	.-124    	; 0xa32 <tiny_adc_pid_setup>
     aae:	0e c0       	rjmp	.+28     	; 0xacc <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ab0:	80 ec       	ldi	r24, 0xC0	; 192
     ab2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	ec cf       	rjmp	.-40     	; 0xa92 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     aba:	e0 e0       	ldi	r30, 0x00	; 0
     abc:	f2 e0       	ldi	r31, 0x02	; 2
     abe:	9e e1       	ldi	r25, 0x1E	; 30
     ac0:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     ac2:	90 e4       	ldi	r25, 0x40	; 64
     ac4:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ac6:	81 11       	cpse	r24, r1
     ac8:	f3 cf       	rjmp	.-26     	; 0xab0 <tiny_adc_setup+0x58>
     aca:	d9 cf       	rjmp	.-78     	; 0xa7e <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     aec:	8f 91       	pop	r24
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	0f 90       	pop	r0
     af4:	1f 90       	pop	r1
     af6:	18 95       	reti

00000af8 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     afc:	e0 e7       	ldi	r30, 0x70	; 112
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	82 81       	ldd	r24, Z+2	; 0x02
     b02:	8b 7f       	andi	r24, 0xFB	; 251
     b04:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     b06:	c0 e2       	ldi	r28, 0x20	; 32
     b08:	d3 e0       	ldi	r29, 0x03	; 3
     b0a:	8d e0       	ldi	r24, 0x0D	; 13
     b0c:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     b0e:	80 e4       	ldi	r24, 0x40	; 64
     b10:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     b12:	89 e0       	ldi	r24, 0x09	; 9
     b14:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     b16:	83 e3       	ldi	r24, 0x33	; 51
     b18:	96 df       	rcall	.-212    	; 0xa46 <ReadCalibrationByte>
     b1a:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     b1c:	82 e3       	ldi	r24, 0x32	; 50
     b1e:	93 df       	rcall	.-218    	; 0xa46 <ReadCalibrationByte>
     b20:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     b22:	87 e3       	ldi	r24, 0x37	; 55
     b24:	90 df       	rcall	.-224    	; 0xa46 <ReadCalibrationByte>
     b26:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     b28:	86 e3       	ldi	r24, 0x36	; 54
     b2a:	8d df       	rcall	.-230    	; 0xa46 <ReadCalibrationByte>
     b2c:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     b2e:	e0 e2       	ldi	r30, 0x20	; 32
     b30:	f6 e0       	ldi	r31, 0x06	; 6
     b32:	80 81       	ld	r24, Z
     b34:	83 60       	ori	r24, 0x03	; 3
     b36:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     b38:	14 82       	std	Z+4, r1	; 0x04
	
	

     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     b40:	e0 e7       	ldi	r30, 0x70	; 112
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	8e 7f       	andi	r24, 0xFE	; 254
     b48:	80 83       	st	Z, r24
     b4a:	83 e8       	ldi	r24, 0x83	; 131
     b4c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     b50:	08 95       	ret

00000b52 <tiny_dma_flush>:
     b52:	e0 e0       	ldi	r30, 0x00	; 0
     b54:	f1 e0       	ldi	r31, 0x01	; 1
     b56:	10 8a       	std	Z+16, r1	; 0x10
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	80 8b       	std	Z+16, r24	; 0x10
     b5c:	10 a2       	std	Z+32, r1	; 0x20
     b5e:	80 a3       	std	Z+32, r24	; 0x20
     b60:	10 aa       	std	Z+48, r1	; 0x30
     b62:	80 ab       	std	Z+48, r24	; 0x30
     b64:	e0 e4       	ldi	r30, 0x40	; 64
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	10 82       	st	Z, r1
     b6a:	80 83       	st	Z, r24
     b6c:	10 92 ea 20 	sts	0x20EA, r1	; 0x8020ea <b1_state>
     b70:	10 92 e9 20 	sts	0x20E9, r1	; 0x8020e9 <b2_state>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <usb_state>
     b7a:	10 92 cc 23 	sts	0x23CC, r1	; 0x8023cc <dma_ch0_ran>
     b7e:	10 92 cd 23 	sts	0x23CD, r1	; 0x8023cd <dma_ch0_ran+0x1>
     b82:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <dma_ch1_ran>
     b86:	10 92 cb 23 	sts	0x23CB, r1	; 0x8023cb <dma_ch1_ran+0x1>
     b8a:	08 95       	ret

00000b8c <tiny_dma_set_mode_0>:
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	f8 94       	cli
     b92:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     b96:	dd df       	rcall	.-70     	; 0xb52 <tiny_dma_flush>
     b98:	c0 e0       	ldi	r28, 0x00	; 0
     b9a:	d1 e0       	ldi	r29, 0x01	; 1
     b9c:	1e aa       	std	Y+54, r1	; 0x36
     b9e:	84 e2       	ldi	r24, 0x24	; 36
     ba0:	88 ab       	std	Y+48, r24	; 0x30
     ba2:	19 aa       	std	Y+49, r1	; 0x31
     ba4:	49 e5       	ldi	r20, 0x59	; 89
     ba6:	4a ab       	std	Y+50, r20	; 0x32
     ba8:	32 e0       	ldi	r19, 0x02	; 2
     baa:	3b ab       	std	Y+51, r19	; 0x33
     bac:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     bb0:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     bb4:	6c ab       	std	Y+52, r22	; 0x34
     bb6:	7d ab       	std	Y+53, r23	; 0x35
     bb8:	6a ef       	ldi	r22, 0xFA	; 250
     bba:	75 e2       	ldi	r23, 0x25	; 37
     bbc:	68 af       	std	Y+56, r22	; 0x38
     bbe:	79 af       	std	Y+57, r23	; 0x39
     bc0:	1a ae       	std	Y+58, r1	; 0x3a
     bc2:	9b e3       	ldi	r25, 0x3B	; 59
     bc4:	9c af       	std	Y+60, r25	; 0x3c
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     bcc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bd0:	28 a9       	ldd	r18, Y+48	; 0x30
     bd2:	20 68       	ori	r18, 0x80	; 128
     bd4:	28 ab       	std	Y+48, r18	; 0x30
     bd6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     bda:	e0 e4       	ldi	r30, 0x40	; 64
     bdc:	f1 e0       	ldi	r31, 0x01	; 1
     bde:	80 83       	st	Z, r24
     be0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     be4:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     be8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bec:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     bf0:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     bf4:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bf8:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     bfc:	4a ee       	ldi	r20, 0xEA	; 234
     bfe:	53 e2       	ldi	r21, 0x23	; 35
     c00:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c04:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c08:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c0c:	29 e3       	ldi	r18, 0x39	; 57
     c0e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c12:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c16:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c1a:	90 81       	ld	r25, Z
     c1c:	90 68       	ori	r25, 0x80	; 128
     c1e:	90 83       	st	Z, r25
     c20:	18 8a       	std	Y+16, r1	; 0x10
     c22:	90 e4       	ldi	r25, 0x40	; 64
     c24:	98 8b       	std	Y+16, r25	; 0x10
     c26:	88 8b       	std	Y+16, r24	; 0x10
     c28:	19 8a       	std	Y+17, r1	; 0x11
     c2a:	95 e9       	ldi	r25, 0x95	; 149
     c2c:	9a 8b       	std	Y+18, r25	; 0x12
     c2e:	90 e1       	ldi	r25, 0x10	; 16
     c30:	9b 8b       	std	Y+19, r25	; 0x13
     c32:	4e ee       	ldi	r20, 0xEE	; 238
     c34:	52 e0       	ldi	r21, 0x02	; 2
     c36:	4c 8b       	std	Y+20, r20	; 0x14
     c38:	5d 8b       	std	Y+21, r21	; 0x15
     c3a:	88 8f       	std	Y+24, r24	; 0x18
     c3c:	39 8f       	std	Y+25, r19	; 0x19
     c3e:	1a 8e       	std	Y+26, r1	; 0x1a
     c40:	8a ef       	ldi	r24, 0xFA	; 250
     c42:	97 e2       	ldi	r25, 0x27	; 39
     c44:	8c 8f       	std	Y+28, r24	; 0x1c
     c46:	9d 8f       	std	Y+29, r25	; 0x1d
     c48:	1e 8e       	std	Y+30, r1	; 0x1e
     c4a:	68 ec       	ldi	r22, 0xC8	; 200
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	84 ef       	ldi	r24, 0xF4	; 244
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	5f dd       	rcall	.-1346   	; 0x712 <tiny_calibration_synchronise_phase>
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	9f ef       	ldi	r25, 0xFF	; 255
     c58:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     c5c:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     c66:	88 89       	ldd	r24, Y+16	; 0x10
     c68:	80 68       	ori	r24, 0x80	; 128
     c6a:	88 8b       	std	Y+16, r24	; 0x10
     c6c:	78 94       	sei
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <tiny_dma_set_mode_1>:
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	f8 94       	cli
     c7c:	11 e0       	ldi	r17, 0x01	; 1
     c7e:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     c82:	67 df       	rcall	.-306    	; 0xb52 <tiny_dma_flush>
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	d1 e0       	ldi	r29, 0x01	; 1
     c88:	18 aa       	std	Y+48, r1	; 0x30
     c8a:	80 e4       	ldi	r24, 0x40	; 64
     c8c:	88 ab       	std	Y+48, r24	; 0x30
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	88 ab       	std	Y+48, r24	; 0x30
     c92:	19 aa       	std	Y+49, r1	; 0x31
     c94:	1a aa       	std	Y+50, r1	; 0x32
     c96:	4b e4       	ldi	r20, 0x4B	; 75
     c98:	4b ab       	std	Y+51, r20	; 0x33
     c9a:	1c aa       	std	Y+52, r1	; 0x34
     c9c:	1d aa       	std	Y+53, r1	; 0x35
     c9e:	1e aa       	std	Y+54, r1	; 0x36
     ca0:	8a e0       	ldi	r24, 0x0A	; 10
     ca2:	90 e2       	ldi	r25, 0x20	; 32
     ca4:	88 af       	std	Y+56, r24	; 0x38
     ca6:	99 af       	std	Y+57, r25	; 0x39
     ca8:	1a ae       	std	Y+58, r1	; 0x3a
     caa:	70 ea       	ldi	r23, 0xA0	; 160
     cac:	7c af       	std	Y+60, r23	; 0x3c
     cae:	68 e0       	ldi	r22, 0x08	; 8
     cb0:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     cb4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     cb8:	88 a9       	ldd	r24, Y+48	; 0x30
     cba:	80 6a       	ori	r24, 0xA0	; 160
     cbc:	88 ab       	std	Y+48, r24	; 0x30
     cbe:	e0 ea       	ldi	r30, 0xA0	; 160
     cc0:	f8 e0       	ldi	r31, 0x08	; 8
     cc2:	85 e5       	ldi	r24, 0x55	; 85
     cc4:	80 83       	st	Z, r24
     cc6:	80 83       	st	Z, r24
     cc8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ccc:	e0 e4       	ldi	r30, 0x40	; 64
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	84 e2       	ldi	r24, 0x24	; 36
     cd2:	80 83       	st	Z, r24
     cd4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     cd8:	99 e5       	ldi	r25, 0x59	; 89
     cda:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     cde:	32 e0       	ldi	r19, 0x02	; 2
     ce0:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ce4:	a0 91 0b 20 	lds	r26, 0x200B	; 0x80200b <auxDacBufLen>
     ce8:	b0 91 0c 20 	lds	r27, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     cec:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     cf0:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     cf4:	aa ef       	ldi	r26, 0xFA	; 250
     cf6:	b5 e2       	ldi	r27, 0x25	; 37
     cf8:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     cfc:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d00:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d04:	9b e3       	ldi	r25, 0x3B	; 59
     d06:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d0a:	93 e0       	ldi	r25, 0x03	; 3
     d0c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d10:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d14:	20 81       	ld	r18, Z
     d16:	20 68       	ori	r18, 0x80	; 128
     d18:	20 83       	st	Z, r18
     d1a:	88 a3       	std	Y+32, r24	; 0x20
     d1c:	99 a3       	std	Y+33, r25	; 0x21
     d1e:	25 e9       	ldi	r18, 0x95	; 149
     d20:	2a a3       	std	Y+34, r18	; 0x22
     d22:	4b a3       	std	Y+35, r20	; 0x23
     d24:	4e ee       	ldi	r20, 0xEE	; 238
     d26:	52 e0       	ldi	r21, 0x02	; 2
     d28:	4c a3       	std	Y+36, r20	; 0x24
     d2a:	5d a3       	std	Y+37, r21	; 0x25
     d2c:	78 a7       	std	Y+40, r23	; 0x28
     d2e:	69 a7       	std	Y+41, r22	; 0x29
     d30:	1a a6       	std	Y+42, r1	; 0x2a
     d32:	68 ee       	ldi	r22, 0xE8	; 232
     d34:	7a e2       	ldi	r23, 0x2A	; 42
     d36:	6c a7       	std	Y+44, r22	; 0x2c
     d38:	7d a7       	std	Y+45, r23	; 0x2d
     d3a:	1e a6       	std	Y+46, r1	; 0x2e
     d3c:	88 8b       	std	Y+16, r24	; 0x10
     d3e:	99 8b       	std	Y+17, r25	; 0x11
     d40:	2a 8b       	std	Y+18, r18	; 0x12
     d42:	90 e1       	ldi	r25, 0x10	; 16
     d44:	9b 8b       	std	Y+19, r25	; 0x13
     d46:	4c 8b       	std	Y+20, r20	; 0x14
     d48:	5d 8b       	std	Y+21, r21	; 0x15
     d4a:	88 8f       	std	Y+24, r24	; 0x18
     d4c:	39 8f       	std	Y+25, r19	; 0x19
     d4e:	1a 8e       	std	Y+26, r1	; 0x1a
     d50:	8a ef       	ldi	r24, 0xFA	; 250
     d52:	97 e2       	ldi	r25, 0x27	; 39
     d54:	8c 8f       	std	Y+28, r24	; 0x1c
     d56:	9d 8f       	std	Y+29, r25	; 0x1d
     d58:	1e 8e       	std	Y+30, r1	; 0x1e
     d5a:	68 ec       	ldi	r22, 0xC8	; 200
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	84 ef       	ldi	r24, 0xF4	; 244
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	d7 dc       	rcall	.-1618   	; 0x712 <tiny_calibration_synchronise_phase>
     d64:	8f ef       	ldi	r24, 0xFF	; 255
     d66:	9f ef       	ldi	r25, 0xFF	; 255
     d68:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     d6c:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     d70:	10 93 06 20 	sts	0x2006, r17	; 0x802006 <median_TRFCNT_delay>
     d74:	88 a1       	ldd	r24, Y+32	; 0x20
     d76:	80 68       	ori	r24, 0x80	; 128
     d78:	88 a3       	std	Y+32, r24	; 0x20
     d7a:	88 89       	ldd	r24, Y+16	; 0x10
     d7c:	80 68       	ori	r24, 0x80	; 128
     d7e:	88 8b       	std	Y+16, r24	; 0x10
     d80:	78 94       	sei
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	08 95       	ret

00000d8a <tiny_dma_set_mode_2>:
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	f8 94       	cli
     d92:	12 e0       	ldi	r17, 0x02	; 2
     d94:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     d98:	dc de       	rcall	.-584    	; 0xb52 <tiny_dma_flush>
     d9a:	c0 e0       	ldi	r28, 0x00	; 0
     d9c:	d1 e0       	ldi	r29, 0x01	; 1
     d9e:	1e aa       	std	Y+54, r1	; 0x36
     da0:	84 e2       	ldi	r24, 0x24	; 36
     da2:	88 ab       	std	Y+48, r24	; 0x30
     da4:	19 aa       	std	Y+49, r1	; 0x31
     da6:	39 e5       	ldi	r19, 0x59	; 89
     da8:	3a ab       	std	Y+50, r19	; 0x32
     daa:	1b ab       	std	Y+51, r17	; 0x33
     dac:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
     db0:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     db4:	4c ab       	std	Y+52, r20	; 0x34
     db6:	5d ab       	std	Y+53, r21	; 0x35
     db8:	4a ef       	ldi	r20, 0xFA	; 250
     dba:	55 e2       	ldi	r21, 0x25	; 37
     dbc:	48 af       	std	Y+56, r20	; 0x38
     dbe:	59 af       	std	Y+57, r21	; 0x39
     dc0:	1a ae       	std	Y+58, r1	; 0x3a
     dc2:	9b e3       	ldi	r25, 0x3B	; 59
     dc4:	9c af       	std	Y+60, r25	; 0x3c
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     dcc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     dd0:	28 a9       	ldd	r18, Y+48	; 0x30
     dd2:	20 68       	ori	r18, 0x80	; 128
     dd4:	28 ab       	std	Y+48, r18	; 0x30
     dd6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     dda:	e0 e4       	ldi	r30, 0x40	; 64
     ddc:	f1 e0       	ldi	r31, 0x01	; 1
     dde:	80 83       	st	Z, r24
     de0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     de4:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     de8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dec:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     df0:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     df4:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     df8:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     dfc:	2a ee       	ldi	r18, 0xEA	; 234
     dfe:	33 e2       	ldi	r19, 0x23	; 35
     e00:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e04:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e08:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e0c:	29 e3       	ldi	r18, 0x39	; 57
     e0e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e12:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e16:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e1a:	90 81       	ld	r25, Z
     e1c:	90 68       	ori	r25, 0x80	; 128
     e1e:	90 83       	st	Z, r25
     e20:	18 8a       	std	Y+16, r1	; 0x10
     e22:	90 e4       	ldi	r25, 0x40	; 64
     e24:	98 8b       	std	Y+16, r25	; 0x10
     e26:	88 8b       	std	Y+16, r24	; 0x10
     e28:	19 8a       	std	Y+17, r1	; 0x11
     e2a:	45 e9       	ldi	r20, 0x95	; 149
     e2c:	4a 8b       	std	Y+18, r20	; 0x12
     e2e:	90 e1       	ldi	r25, 0x10	; 16
     e30:	9b 8b       	std	Y+19, r25	; 0x13
     e32:	2e ee       	ldi	r18, 0xEE	; 238
     e34:	32 e0       	ldi	r19, 0x02	; 2
     e36:	2c 8b       	std	Y+20, r18	; 0x14
     e38:	3d 8b       	std	Y+21, r19	; 0x15
     e3a:	88 8f       	std	Y+24, r24	; 0x18
     e3c:	19 8f       	std	Y+25, r17	; 0x19
     e3e:	1a 8e       	std	Y+26, r1	; 0x1a
     e40:	6a ef       	ldi	r22, 0xFA	; 250
     e42:	77 e2       	ldi	r23, 0x27	; 39
     e44:	6c 8f       	std	Y+28, r22	; 0x1c
     e46:	7d 8f       	std	Y+29, r23	; 0x1d
     e48:	1e 8e       	std	Y+30, r1	; 0x1e
     e4a:	88 a3       	std	Y+32, r24	; 0x20
     e4c:	19 a2       	std	Y+33, r1	; 0x21
     e4e:	4a a3       	std	Y+34, r20	; 0x22
     e50:	9b a3       	std	Y+35, r25	; 0x23
     e52:	2c a3       	std	Y+36, r18	; 0x24
     e54:	3d a3       	std	Y+37, r19	; 0x25
     e56:	84 e3       	ldi	r24, 0x34	; 52
     e58:	88 a7       	std	Y+40, r24	; 0x28
     e5a:	19 a7       	std	Y+41, r17	; 0x29
     e5c:	1a a6       	std	Y+42, r1	; 0x2a
     e5e:	88 ee       	ldi	r24, 0xE8	; 232
     e60:	9a e2       	ldi	r25, 0x2A	; 42
     e62:	8c a7       	std	Y+44, r24	; 0x2c
     e64:	9d a7       	std	Y+45, r25	; 0x2d
     e66:	1e a6       	std	Y+46, r1	; 0x2e
     e68:	68 ec       	ldi	r22, 0xC8	; 200
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	84 ef       	ldi	r24, 0xF4	; 244
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	50 dc       	rcall	.-1888   	; 0x712 <tiny_calibration_synchronise_phase>
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	9f ef       	ldi	r25, 0xFF	; 255
     e76:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     e7a:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     e84:	88 89       	ldd	r24, Y+16	; 0x10
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	88 8b       	std	Y+16, r24	; 0x10
     e8a:	88 a1       	ldd	r24, Y+32	; 0x20
     e8c:	80 68       	ori	r24, 0x80	; 128
     e8e:	88 a3       	std	Y+32, r24	; 0x20
     e90:	78 94       	sei
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	08 95       	ret

00000e9a <tiny_dma_set_mode_3>:
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	f8 94       	cli
     ea2:	13 e0       	ldi	r17, 0x03	; 3
     ea4:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     ea8:	54 de       	rcall	.-856    	; 0xb52 <tiny_dma_flush>
     eaa:	c0 e0       	ldi	r28, 0x00	; 0
     eac:	d1 e0       	ldi	r29, 0x01	; 1
     eae:	18 a2       	std	Y+32, r1	; 0x20
     eb0:	50 e4       	ldi	r21, 0x40	; 64
     eb2:	58 a3       	std	Y+32, r21	; 0x20
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	88 a3       	std	Y+32, r24	; 0x20
     eb8:	19 a2       	std	Y+33, r1	; 0x21
     eba:	1a a2       	std	Y+34, r1	; 0x22
     ebc:	4b e4       	ldi	r20, 0x4B	; 75
     ebe:	4b a3       	std	Y+35, r20	; 0x23
     ec0:	1c a2       	std	Y+36, r1	; 0x24
     ec2:	1d a2       	std	Y+37, r1	; 0x25
     ec4:	1e a2       	std	Y+38, r1	; 0x26
     ec6:	8a e0       	ldi	r24, 0x0A	; 10
     ec8:	90 e2       	ldi	r25, 0x20	; 32
     eca:	88 a7       	std	Y+40, r24	; 0x28
     ecc:	99 a7       	std	Y+41, r25	; 0x29
     ece:	1a a6       	std	Y+42, r1	; 0x2a
     ed0:	30 ea       	ldi	r19, 0xA0	; 160
     ed2:	3c a7       	std	Y+44, r19	; 0x2c
     ed4:	28 e0       	ldi	r18, 0x08	; 8
     ed6:	2d a7       	std	Y+45, r18	; 0x2d
     ed8:	1e a6       	std	Y+46, r1	; 0x2e
     eda:	88 a1       	ldd	r24, Y+32	; 0x20
     edc:	80 6a       	ori	r24, 0xA0	; 160
     ede:	88 a3       	std	Y+32, r24	; 0x20
     ee0:	85 e5       	ldi	r24, 0x55	; 85
     ee2:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     ee6:	1e aa       	std	Y+54, r1	; 0x36
     ee8:	84 e2       	ldi	r24, 0x24	; 36
     eea:	88 ab       	std	Y+48, r24	; 0x30
     eec:	19 aa       	std	Y+49, r1	; 0x31
     eee:	69 e5       	ldi	r22, 0x59	; 89
     ef0:	6a ab       	std	Y+50, r22	; 0x32
     ef2:	1b ab       	std	Y+51, r17	; 0x33
     ef4:	e0 91 0d 20 	lds	r30, 0x200D	; 0x80200d <dacBuf_len>
     ef8:	f0 91 0e 20 	lds	r31, 0x200E	; 0x80200e <dacBuf_len+0x1>
     efc:	ec ab       	std	Y+52, r30	; 0x34
     efe:	fd ab       	std	Y+53, r31	; 0x35
     f00:	ea ee       	ldi	r30, 0xEA	; 234
     f02:	f3 e2       	ldi	r31, 0x23	; 35
     f04:	e8 af       	std	Y+56, r30	; 0x38
     f06:	f9 af       	std	Y+57, r31	; 0x39
     f08:	1a ae       	std	Y+58, r1	; 0x3a
     f0a:	99 e3       	ldi	r25, 0x39	; 57
     f0c:	9c af       	std	Y+60, r25	; 0x3c
     f0e:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f12:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f16:	98 a9       	ldd	r25, Y+48	; 0x30
     f18:	90 68       	ori	r25, 0x80	; 128
     f1a:	98 ab       	std	Y+48, r25	; 0x30
     f1c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f20:	e0 e4       	ldi	r30, 0x40	; 64
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	80 83       	st	Z, r24
     f26:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f2a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f34:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     f38:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     f3c:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f40:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f44:	6a ef       	ldi	r22, 0xFA	; 250
     f46:	75 e2       	ldi	r23, 0x25	; 37
     f48:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f4c:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f50:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f54:	9b e3       	ldi	r25, 0x3B	; 59
     f56:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f5a:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f5e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f62:	90 81       	ld	r25, Z
     f64:	90 68       	ori	r25, 0x80	; 128
     f66:	90 83       	st	Z, r25
     f68:	18 8a       	std	Y+16, r1	; 0x10
     f6a:	58 8b       	std	Y+16, r21	; 0x10
     f6c:	88 8b       	std	Y+16, r24	; 0x10
     f6e:	19 8a       	std	Y+17, r1	; 0x11
     f70:	85 e9       	ldi	r24, 0x95	; 149
     f72:	8a 8b       	std	Y+18, r24	; 0x12
     f74:	4b 8b       	std	Y+19, r20	; 0x13
     f76:	8e ee       	ldi	r24, 0xEE	; 238
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	8c 8b       	std	Y+20, r24	; 0x14
     f7c:	9d 8b       	std	Y+21, r25	; 0x15
     f7e:	38 8f       	std	Y+24, r19	; 0x18
     f80:	29 8f       	std	Y+25, r18	; 0x19
     f82:	1a 8e       	std	Y+26, r1	; 0x1a
     f84:	8a ef       	ldi	r24, 0xFA	; 250
     f86:	97 e2       	ldi	r25, 0x27	; 39
     f88:	8c 8f       	std	Y+28, r24	; 0x1c
     f8a:	9d 8f       	std	Y+29, r25	; 0x1d
     f8c:	1e 8e       	std	Y+30, r1	; 0x1e
     f8e:	68 ec       	ldi	r22, 0xC8	; 200
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	84 ef       	ldi	r24, 0xF4	; 244
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	bd db       	rcall	.-2182   	; 0x712 <tiny_calibration_synchronise_phase>
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	9f ef       	ldi	r25, 0xFF	; 255
     f9c:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     fa0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     faa:	88 89       	ldd	r24, Y+16	; 0x10
     fac:	80 68       	ori	r24, 0x80	; 128
     fae:	88 8b       	std	Y+16, r24	; 0x10
     fb0:	78 94       	sei
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	08 95       	ret

00000fba <tiny_dma_set_mode_4>:
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	f8 94       	cli
     fc2:	14 e0       	ldi	r17, 0x04	; 4
     fc4:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     fc8:	c4 dd       	rcall	.-1144   	; 0xb52 <tiny_dma_flush>
     fca:	c0 e0       	ldi	r28, 0x00	; 0
     fcc:	d1 e0       	ldi	r29, 0x01	; 1
     fce:	18 aa       	std	Y+48, r1	; 0x30
     fd0:	80 e4       	ldi	r24, 0x40	; 64
     fd2:	88 ab       	std	Y+48, r24	; 0x30
     fd4:	18 ab       	std	Y+48, r17	; 0x30
     fd6:	19 aa       	std	Y+49, r1	; 0x31
     fd8:	1a aa       	std	Y+50, r1	; 0x32
     fda:	3b e4       	ldi	r19, 0x4B	; 75
     fdc:	3b ab       	std	Y+51, r19	; 0x33
     fde:	1c aa       	std	Y+52, r1	; 0x34
     fe0:	1d aa       	std	Y+53, r1	; 0x35
     fe2:	1e aa       	std	Y+54, r1	; 0x36
     fe4:	8a e0       	ldi	r24, 0x0A	; 10
     fe6:	90 e2       	ldi	r25, 0x20	; 32
     fe8:	88 af       	std	Y+56, r24	; 0x38
     fea:	99 af       	std	Y+57, r25	; 0x39
     fec:	1a ae       	std	Y+58, r1	; 0x3a
     fee:	50 ea       	ldi	r21, 0xA0	; 160
     ff0:	5c af       	std	Y+60, r21	; 0x3c
     ff2:	88 e0       	ldi	r24, 0x08	; 8
     ff4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     ff8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ffc:	98 a9       	ldd	r25, Y+48	; 0x30
     ffe:	90 6a       	ori	r25, 0xA0	; 160
    1000:	98 ab       	std	Y+48, r25	; 0x30
    1002:	95 e5       	ldi	r25, 0x55	; 85
    1004:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1008:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    100c:	e0 e4       	ldi	r30, 0x40	; 64
    100e:	f1 e0       	ldi	r31, 0x01	; 1
    1010:	94 e2       	ldi	r25, 0x24	; 36
    1012:	90 83       	st	Z, r25
    1014:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1018:	29 e5       	ldi	r18, 0x59	; 89
    101a:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    101e:	22 e0       	ldi	r18, 0x02	; 2
    1020:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1024:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
    1028:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    102c:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1030:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1034:	6a ef       	ldi	r22, 0xFA	; 250
    1036:	75 e2       	ldi	r23, 0x25	; 37
    1038:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    103c:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1040:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1044:	2b e3       	ldi	r18, 0x3B	; 59
    1046:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    104a:	23 e0       	ldi	r18, 0x03	; 3
    104c:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1050:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1054:	20 81       	ld	r18, Z
    1056:	20 68       	ori	r18, 0x80	; 128
    1058:	20 83       	st	Z, r18
    105a:	98 8b       	std	Y+16, r25	; 0x10
    105c:	19 8a       	std	Y+17, r1	; 0x11
    105e:	45 e9       	ldi	r20, 0x95	; 149
    1060:	4a 8b       	std	Y+18, r20	; 0x12
    1062:	3b 8b       	std	Y+19, r19	; 0x13
    1064:	2e ee       	ldi	r18, 0xEE	; 238
    1066:	32 e0       	ldi	r19, 0x02	; 2
    1068:	2c 8b       	std	Y+20, r18	; 0x14
    106a:	3d 8b       	std	Y+21, r19	; 0x15
    106c:	58 8f       	std	Y+24, r21	; 0x18
    106e:	89 8f       	std	Y+25, r24	; 0x19
    1070:	1a 8e       	std	Y+26, r1	; 0x1a
    1072:	6a ef       	ldi	r22, 0xFA	; 250
    1074:	77 e2       	ldi	r23, 0x27	; 39
    1076:	6c 8f       	std	Y+28, r22	; 0x1c
    1078:	7d 8f       	std	Y+29, r23	; 0x1d
    107a:	1e 8e       	std	Y+30, r1	; 0x1e
    107c:	98 a3       	std	Y+32, r25	; 0x20
    107e:	19 a2       	std	Y+33, r1	; 0x21
    1080:	4a a3       	std	Y+34, r20	; 0x22
    1082:	9a e4       	ldi	r25, 0x4A	; 74
    1084:	9b a3       	std	Y+35, r25	; 0x23
    1086:	2c a3       	std	Y+36, r18	; 0x24
    1088:	3d a3       	std	Y+37, r19	; 0x25
    108a:	93 ec       	ldi	r25, 0xC3	; 195
    108c:	98 a7       	std	Y+40, r25	; 0x28
    108e:	89 a7       	std	Y+41, r24	; 0x29
    1090:	1a a6       	std	Y+42, r1	; 0x2a
    1092:	88 ee       	ldi	r24, 0xE8	; 232
    1094:	9a e2       	ldi	r25, 0x2A	; 42
    1096:	8c a7       	std	Y+44, r24	; 0x2c
    1098:	9d a7       	std	Y+45, r25	; 0x2d
    109a:	1e a6       	std	Y+46, r1	; 0x2e
    109c:	68 ec       	ldi	r22, 0xC8	; 200
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	84 ef       	ldi	r24, 0xF4	; 244
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	36 db       	rcall	.-2452   	; 0x712 <tiny_calibration_synchronise_phase>
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	9f ef       	ldi	r25, 0xFF	; 255
    10aa:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    10ae:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    10b8:	88 89       	ldd	r24, Y+16	; 0x10
    10ba:	80 68       	ori	r24, 0x80	; 128
    10bc:	88 8b       	std	Y+16, r24	; 0x10
    10be:	88 a1       	ldd	r24, Y+32	; 0x20
    10c0:	80 68       	ori	r24, 0x80	; 128
    10c2:	88 a3       	std	Y+32, r24	; 0x20
    10c4:	78 94       	sei
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	08 95       	ret

000010ce <tiny_dma_set_mode_5>:
    10ce:	ff cf       	rjmp	.-2      	; 0x10ce <tiny_dma_set_mode_5>

000010d0 <tiny_dma_set_mode_6>:
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	f8 94       	cli
    10d6:	86 e0       	ldi	r24, 0x06	; 6
    10d8:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    10dc:	3a dd       	rcall	.-1420   	; 0xb52 <tiny_dma_flush>
    10de:	c0 e0       	ldi	r28, 0x00	; 0
    10e0:	d1 e0       	ldi	r29, 0x01	; 1
    10e2:	1e aa       	std	Y+54, r1	; 0x36
    10e4:	84 e2       	ldi	r24, 0x24	; 36
    10e6:	88 ab       	std	Y+48, r24	; 0x30
    10e8:	19 aa       	std	Y+49, r1	; 0x31
    10ea:	39 e5       	ldi	r19, 0x59	; 89
    10ec:	3a ab       	std	Y+50, r19	; 0x32
    10ee:	93 e0       	ldi	r25, 0x03	; 3
    10f0:	9b ab       	std	Y+51, r25	; 0x33
    10f2:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    10f6:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    10fa:	4c ab       	std	Y+52, r20	; 0x34
    10fc:	5d ab       	std	Y+53, r21	; 0x35
    10fe:	4a ee       	ldi	r20, 0xEA	; 234
    1100:	53 e2       	ldi	r21, 0x23	; 35
    1102:	48 af       	std	Y+56, r20	; 0x38
    1104:	59 af       	std	Y+57, r21	; 0x39
    1106:	1a ae       	std	Y+58, r1	; 0x3a
    1108:	29 e3       	ldi	r18, 0x39	; 57
    110a:	2c af       	std	Y+60, r18	; 0x3c
    110c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1110:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1114:	28 a9       	ldd	r18, Y+48	; 0x30
    1116:	20 68       	ori	r18, 0x80	; 128
    1118:	28 ab       	std	Y+48, r18	; 0x30
    111a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    111e:	e0 e4       	ldi	r30, 0x40	; 64
    1120:	f1 e0       	ldi	r31, 0x01	; 1
    1122:	80 83       	st	Z, r24
    1124:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1128:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    112c:	32 e0       	ldi	r19, 0x02	; 2
    112e:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1132:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    1136:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    113a:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    113e:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1142:	4a ef       	ldi	r20, 0xFA	; 250
    1144:	55 e2       	ldi	r21, 0x25	; 37
    1146:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    114a:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    114e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1152:	2b e3       	ldi	r18, 0x3B	; 59
    1154:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1158:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    115c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1160:	20 81       	ld	r18, Z
    1162:	20 68       	ori	r18, 0x80	; 128
    1164:	20 83       	st	Z, r18
    1166:	18 8a       	std	Y+16, r1	; 0x10
    1168:	20 e4       	ldi	r18, 0x40	; 64
    116a:	28 8b       	std	Y+16, r18	; 0x10
    116c:	88 8b       	std	Y+16, r24	; 0x10
    116e:	99 8b       	std	Y+17, r25	; 0x11
    1170:	95 e9       	ldi	r25, 0x95	; 149
    1172:	9a 8b       	std	Y+18, r25	; 0x12
    1174:	90 e1       	ldi	r25, 0x10	; 16
    1176:	9b 8b       	std	Y+19, r25	; 0x13
    1178:	4c ed       	ldi	r20, 0xDC	; 220
    117a:	55 e0       	ldi	r21, 0x05	; 5
    117c:	4c 8b       	std	Y+20, r20	; 0x14
    117e:	5d 8b       	std	Y+21, r21	; 0x15
    1180:	88 8f       	std	Y+24, r24	; 0x18
    1182:	39 8f       	std	Y+25, r19	; 0x19
    1184:	1a 8e       	std	Y+26, r1	; 0x1a
    1186:	8a ef       	ldi	r24, 0xFA	; 250
    1188:	97 e2       	ldi	r25, 0x27	; 39
    118a:	8c 8f       	std	Y+28, r24	; 0x1c
    118c:	9d 8f       	std	Y+29, r25	; 0x1d
    118e:	1e 8e       	std	Y+30, r1	; 0x1e
    1190:	68 ec       	ldi	r22, 0xC8	; 200
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	84 ef       	ldi	r24, 0xF4	; 244
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	bc da       	rcall	.-2696   	; 0x712 <tiny_calibration_synchronise_phase>
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	9f ef       	ldi	r25, 0xFF	; 255
    119e:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    11a2:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    11ac:	88 89       	ldd	r24, Y+16	; 0x10
    11ae:	80 68       	ori	r24, 0x80	; 128
    11b0:	88 8b       	std	Y+16, r24	; 0x10
    11b2:	78 94       	sei
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <tiny_dma_set_mode_7>:
    11ba:	87 e0       	ldi	r24, 0x07	; 7
    11bc:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    11c0:	c8 dc       	rcall	.-1648   	; 0xb52 <tiny_dma_flush>
    11c2:	e0 e0       	ldi	r30, 0x00	; 0
    11c4:	f1 e0       	ldi	r31, 0x01	; 1
    11c6:	16 aa       	std	Z+54, r1	; 0x36
    11c8:	94 e2       	ldi	r25, 0x24	; 36
    11ca:	90 ab       	std	Z+48, r25	; 0x30
    11cc:	11 aa       	std	Z+49, r1	; 0x31
    11ce:	39 e5       	ldi	r19, 0x59	; 89
    11d0:	32 ab       	std	Z+50, r19	; 0x32
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	83 ab       	std	Z+51, r24	; 0x33
    11d6:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    11da:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    11de:	44 ab       	std	Z+52, r20	; 0x34
    11e0:	55 ab       	std	Z+53, r21	; 0x35
    11e2:	4a ee       	ldi	r20, 0xEA	; 234
    11e4:	53 e2       	ldi	r21, 0x23	; 35
    11e6:	40 af       	std	Z+56, r20	; 0x38
    11e8:	51 af       	std	Z+57, r21	; 0x39
    11ea:	12 ae       	std	Z+58, r1	; 0x3a
    11ec:	29 e3       	ldi	r18, 0x39	; 57
    11ee:	24 af       	std	Z+60, r18	; 0x3c
    11f0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    11f4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    11f8:	20 a9       	ldd	r18, Z+48	; 0x30
    11fa:	20 68       	ori	r18, 0x80	; 128
    11fc:	20 ab       	std	Z+48, r18	; 0x30
    11fe:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1202:	a0 e4       	ldi	r26, 0x40	; 64
    1204:	b1 e0       	ldi	r27, 0x01	; 1
    1206:	9c 93       	st	X, r25
    1208:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    120c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1210:	32 e0       	ldi	r19, 0x02	; 2
    1212:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1216:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    121a:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    121e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1222:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1226:	4a ef       	ldi	r20, 0xFA	; 250
    1228:	55 e2       	ldi	r21, 0x25	; 37
    122a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    122e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1232:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1236:	2b e3       	ldi	r18, 0x3B	; 59
    1238:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    123c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1240:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1244:	2c 91       	ld	r18, X
    1246:	20 68       	ori	r18, 0x80	; 128
    1248:	2c 93       	st	X, r18
    124a:	10 8a       	std	Z+16, r1	; 0x10
    124c:	20 e4       	ldi	r18, 0x40	; 64
    124e:	20 8b       	std	Z+16, r18	; 0x10
    1250:	25 e0       	ldi	r18, 0x05	; 5
    1252:	20 8b       	std	Z+16, r18	; 0x10
    1254:	81 8b       	std	Z+17, r24	; 0x11
    1256:	81 e9       	ldi	r24, 0x91	; 145
    1258:	82 8b       	std	Z+18, r24	; 0x12
    125a:	80 e1       	ldi	r24, 0x10	; 16
    125c:	83 8b       	std	Z+19, r24	; 0x13
    125e:	4e ee       	ldi	r20, 0xEE	; 238
    1260:	52 e0       	ldi	r21, 0x02	; 2
    1262:	44 8b       	std	Z+20, r20	; 0x14
    1264:	55 8b       	std	Z+21, r21	; 0x15
    1266:	90 8f       	std	Z+24, r25	; 0x18
    1268:	31 8f       	std	Z+25, r19	; 0x19
    126a:	12 8e       	std	Z+26, r1	; 0x1a
    126c:	8a ef       	ldi	r24, 0xFA	; 250
    126e:	97 e2       	ldi	r25, 0x27	; 39
    1270:	84 8f       	std	Z+28, r24	; 0x1c
    1272:	95 8f       	std	Z+29, r25	; 0x1d
    1274:	16 8e       	std	Z+30, r1	; 0x1e
    1276:	80 89       	ldd	r24, Z+16	; 0x10
    1278:	80 68       	ori	r24, 0x80	; 128
    127a:	80 8b       	std	Z+16, r24	; 0x10
    127c:	08 95       	ret

0000127e <__vector_6>:
}

ISR(DMA_CH0_vect){
    127e:	1f 92       	push	r1
    1280:	0f 92       	push	r0
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	0f 92       	push	r0
    1286:	11 24       	eor	r1, r1
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    128c:	ef 93       	push	r30
    128e:	ff 93       	push	r31
	DMA.INTFLAGS = 0x01;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch0_ran++;
    1296:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <dma_ch0_ran>
    129a:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <dma_ch0_ran+0x1>
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	80 93 cc 23 	sts	0x23CC, r24	; 0x8023cc <dma_ch0_ran>
    12a4:	90 93 cd 23 	sts	0x23CD, r25	; 0x8023cd <dma_ch0_ran+0x1>
	uds.dma_ch0_cntL = dma_ch0_ran & 0xff;
    12a8:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <dma_ch0_ran>
    12ac:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <dma_ch0_ran+0x1>
    12b0:	ee ec       	ldi	r30, 0xCE	; 206
    12b2:	f3 e2       	ldi	r31, 0x23	; 35
    12b4:	87 8b       	std	Z+23, r24	; 0x17
	uds.dma_ch0_cntH = (dma_ch0_ran >> 8) & 0xff;
    12b6:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <dma_ch0_ran>
    12ba:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <dma_ch0_ran+0x1>
    12be:	90 8f       	std	Z+24, r25	; 0x18
}
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <__vector_7>:

ISR(DMA_CH1_vect){
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	8f 93       	push	r24
    12de:	9f 93       	push	r25
    12e0:	ef 93       	push	r30
    12e2:	ff 93       	push	r31
	DMA.INTFLAGS = 0x02;
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch1_ran++;
    12ea:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <dma_ch1_ran>
    12ee:	90 91 cb 23 	lds	r25, 0x23CB	; 0x8023cb <dma_ch1_ran+0x1>
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	80 93 ca 23 	sts	0x23CA, r24	; 0x8023ca <dma_ch1_ran>
    12f8:	90 93 cb 23 	sts	0x23CB, r25	; 0x8023cb <dma_ch1_ran+0x1>
	uds.dma_ch1_cntL = dma_ch1_ran & 0xff;
    12fc:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <dma_ch1_ran>
    1300:	90 91 cb 23 	lds	r25, 0x23CB	; 0x8023cb <dma_ch1_ran+0x1>
    1304:	ee ec       	ldi	r30, 0xCE	; 206
    1306:	f3 e2       	ldi	r31, 0x23	; 35
    1308:	81 8f       	std	Z+25, r24	; 0x19
	uds.dma_ch1_cntH = (dma_ch1_ran >> 8) & 0xff;
    130a:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <dma_ch1_ran>
    130e:	90 91 cb 23 	lds	r25, 0x23CB	; 0x8023cb <dma_ch1_ran+0x1>
    1312:	92 8f       	std	Z+26, r25	; 0x1a
}
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	9f 91       	pop	r25
    131a:	8f 91       	pop	r24
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    1326:	e0 e7       	ldi	r30, 0x70	; 112
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	83 81       	ldd	r24, Z+3	; 0x03
    132c:	8c 7f       	andi	r24, 0xFC	; 252
    132e:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    1330:	84 81       	ldd	r24, Z+4	; 0x04
    1332:	8c 7f       	andi	r24, 0xFC	; 252
    1334:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1336:	80 81       	ld	r24, Z
    1338:	8d 7f       	andi	r24, 0xFD	; 253
    133a:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    133c:	e0 e8       	ldi	r30, 0x80	; 128
    133e:	f1 e0       	ldi	r31, 0x01	; 1
    1340:	80 ec       	ldi	r24, 0xC0	; 192
    1342:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1344:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1346:	88 ec       	ldi	r24, 0xC8	; 200
    1348:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    134a:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    134c:	a0 e0       	ldi	r26, 0x00	; 0
    134e:	b8 e0       	ldi	r27, 0x08	; 8
    1350:	34 e0       	ldi	r19, 0x04	; 4
    1352:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1354:	23 e0       	ldi	r18, 0x03	; 3
    1356:	11 96       	adiw	r26, 0x01	; 1
    1358:	2c 93       	st	X, r18
    135a:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    135c:	14 96       	adiw	r26, 0x04	; 4
    135e:	1c 92       	st	X, r1
    1360:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1362:	85 ed       	ldi	r24, 0xD5	; 213
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	96 96       	adiw	r26, 0x26	; 38
    1368:	8d 93       	st	X+, r24
    136a:	9c 93       	st	X, r25
    136c:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    136e:	16 96       	adiw	r26, 0x06	; 6
    1370:	1c 92       	st	X, r1
    1372:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1374:	e0 e4       	ldi	r30, 0x40	; 64
    1376:	f8 e0       	ldi	r31, 0x08	; 8
    1378:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    137a:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    137c:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    137e:	86 a3       	std	Z+38, r24	; 0x26
    1380:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    1382:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    1384:	e0 e6       	ldi	r30, 0x60	; 96
    1386:	f6 e0       	ldi	r31, 0x06	; 6
    1388:	80 81       	ld	r24, Z
    138a:	80 61       	ori	r24, 0x10	; 16
    138c:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    138e:	e0 e4       	ldi	r30, 0x40	; 64
    1390:	f9 e0       	ldi	r31, 0x09	; 9
    1392:	83 e1       	ldi	r24, 0x13	; 19
    1394:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    1396:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    139c:	a6 a3       	std	Z+38, r26	; 0x26
    139e:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    13a0:	10 a6       	std	Z+40, r1	; 0x28
    13a2:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	80 83       	st	Z, r24
    13a8:	08 95       	ret

000013aa <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	2f 93       	push	r18
    13b6:	3f 93       	push	r19
    13b8:	4f 93       	push	r20
    13ba:	5f 93       	push	r21
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	ef 93       	push	r30
    13c2:	ff 93       	push	r31
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	1f 92       	push	r1
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    13ce:	8f ef       	ldi	r24, 0xFF	; 255
    13d0:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    13d4:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    13d8:	87 30       	cpi	r24, 0x07	; 7
    13da:	31 f4       	brne	.+12     	; 0x13e8 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    13dc:	e0 e0       	ldi	r30, 0x00	; 0
    13de:	f2 e0       	ldi	r31, 0x02	; 2
    13e0:	84 a5       	ldd	r24, Z+44	; 0x2c
    13e2:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    13e4:	95 a5       	ldd	r25, Z+45	; 0x2d
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    13e8:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    13ec:	80 91 e7 20 	lds	r24, 0x20E7	; 0x8020e7 <PSU_target>
    13f0:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    13f2:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    13f6:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	0c f4       	brge	.+2      	; 0x1402 <__vector_83+0x58>
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	99 23       	and	r25, r25
    1404:	c9 f0       	breq	.+50     	; 0x1438 <__vector_83+0x8e>
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	2a 3f       	cpi	r18, 0xFA	; 250
    140a:	37 40       	sbci	r19, 0x07	; 7
    140c:	08 f0       	brcs	.+2      	; 0x1410 <__vector_83+0x66>
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	99 23       	and	r25, r25
    1412:	91 f0       	breq	.+36     	; 0x1438 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    1414:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1418:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    141c:	89 30       	cpi	r24, 0x09	; 9
    141e:	1c f4       	brge	.+6      	; 0x1426 <__vector_83+0x7c>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <__vector_83+0x80>
    1426:	86 e0       	ldi	r24, 0x06	; 6
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	82 0f       	add	r24, r18
    142c:	93 1f       	adc	r25, r19
    142e:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1432:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1436:	23 c0       	rjmp	.+70     	; 0x147e <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1438:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    143c:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	8f 3f       	cpi	r24, 0xFF	; 255
    1444:	0c f0       	brlt	.+2      	; 0x1448 <__vector_83+0x9e>
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	99 23       	and	r25, r25
    144a:	c9 f0       	breq	.+50     	; 0x147e <__vector_83+0xd4>
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	27 30       	cpi	r18, 0x07	; 7
    1450:	31 05       	cpc	r19, r1
    1452:	08 f4       	brcc	.+2      	; 0x1456 <__vector_83+0xac>
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	99 23       	and	r25, r25
    1458:	91 f0       	breq	.+36     	; 0x147e <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    145a:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    145e:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1462:	88 3f       	cpi	r24, 0xF8	; 248
    1464:	1c f0       	brlt	.+6      	; 0x146c <__vector_83+0xc2>
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <__vector_83+0xc6>
    146c:	86 e0       	ldi	r24, 0x06	; 6
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a9 01       	movw	r20, r18
    1472:	48 1b       	sub	r20, r24
    1474:	59 0b       	sbc	r21, r25
    1476:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    147a:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    147e:	0f 90       	pop	r0
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	5f 91       	pop	r21
    148e:	4f 91       	pop	r20
    1490:	3f 91       	pop	r19
    1492:	2f 91       	pop	r18
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    149e:	e0 e7       	ldi	r30, 0x70	; 112
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	83 81       	ldd	r24, Z+3	; 0x03
    14a4:	8f 7e       	andi	r24, 0xEF	; 239
    14a6:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    14a8:	e0 e4       	ldi	r30, 0x40	; 64
    14aa:	f6 e0       	ldi	r31, 0x06	; 6
    14ac:	80 81       	ld	r24, Z
    14ae:	8a 6a       	ori	r24, 0xAA	; 170
    14b0:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14b6:	88 e5       	ldi	r24, 0x58	; 88
    14b8:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLA = USART_RXCINTLVL_HI_gc;
    14ba:	e0 ea       	ldi	r30, 0xA0	; 160
    14bc:	f8 e0       	ldi	r31, 0x08	; 8
    14be:	80 e3       	ldi	r24, 0x30	; 48
    14c0:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    14c2:	84 ec       	ldi	r24, 0xC4	; 196
    14c4:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;// USART_BSCALE0_bm goes to 1.5MHz for some reason;
    14ca:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    14cc:	88 e1       	ldi	r24, 0x18	; 24
    14ce:	84 83       	std	Z+4, r24	; 0x04
    14d0:	08 95       	ret

000014d2 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    14d2:	e0 e7       	ldi	r30, 0x70	; 112
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	83 81       	ldd	r24, Z+3	; 0x03
    14d8:	87 7f       	andi	r24, 0xF7	; 247
    14da:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    14dc:	e0 ec       	ldi	r30, 0xC0	; 192
    14de:	f8 e0       	ldi	r31, 0x08	; 8
    14e0:	80 e4       	ldi	r24, 0x40	; 64
    14e2:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    14e4:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14e6:	88 e5       	ldi	r24, 0x58	; 88
    14e8:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    14ec:	08 95       	ret

000014ee <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
	asm("nop");
    14f8:	00 00       	nop
}
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <__vector_25>:

ISR(USARTC0_RXC_vect){
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
    150e:	8f 93       	push	r24
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
	unsigned char temp = USARTC0.DATA;
    1514:	e0 ea       	ldi	r30, 0xA0	; 160
    1516:	f8 e0       	ldi	r31, 0x08	; 8
    1518:	80 81       	ld	r24, Z
	USARTC0.DATA = temp;
    151a:	80 83       	st	Z, r24
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	8f 91       	pop	r24
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    152c:	9f b7       	in	r25, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	e8 2f       	mov	r30, r24
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	e0 59       	subi	r30, 0x90	; 144
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	60 95       	com	r22
    153a:	80 81       	ld	r24, Z
    153c:	68 23       	and	r22, r24
    153e:	60 83       	st	Z, r22
    1540:	9f bf       	out	0x3f, r25	; 63
    1542:	08 95       	ret

00001544 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1544:	86 30       	cpi	r24, 0x06	; 6
    1546:	11 f0       	breq	.+4      	; 0x154c <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	01 c0       	rjmp	.+2      	; 0x154e <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    154c:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    154e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1552:	81 fd       	sbrc	r24, 1
    1554:	26 c0       	rjmp	.+76     	; 0x15a2 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1556:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1558:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    155a:	e0 e5       	ldi	r30, 0x50	; 80
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	82 60       	ori	r24, 0x02	; 2
    1562:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1564:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1566:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1568:	81 ff       	sbrs	r24, 1
    156a:	fd cf       	rjmp	.-6      	; 0x1566 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    156c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    156e:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1570:	a0 e5       	ldi	r26, 0x50	; 80
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	16 96       	adiw	r26, 0x06	; 6
    1576:	8c 91       	ld	r24, X
    1578:	16 97       	sbiw	r26, 0x06	; 6
    157a:	89 7f       	andi	r24, 0xF9	; 249
    157c:	16 96       	adiw	r26, 0x06	; 6
    157e:	8c 93       	st	X, r24
    1580:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1582:	e0 e6       	ldi	r30, 0x60	; 96
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 e8       	ldi	r24, 0x80	; 128
    1588:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    158a:	8b eb       	ldi	r24, 0xBB	; 187
    158c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    158e:	16 96       	adiw	r26, 0x06	; 6
    1590:	8c 91       	ld	r24, X
    1592:	16 97       	sbiw	r26, 0x06	; 6
    1594:	84 60       	ori	r24, 0x04	; 4
    1596:	16 96       	adiw	r26, 0x06	; 6
    1598:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    159a:	80 81       	ld	r24, Z
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15a0:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    15a2:	63 60       	ori	r22, 0x03	; 3
    15a4:	84 e4       	ldi	r24, 0x44	; 68
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	24 d5       	rcall	.+2632   	; 0x1ff2 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    15aa:	60 e4       	ldi	r22, 0x40	; 64
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	be cf       	rjmp	.-132    	; 0x152c <sysclk_enable_module>
    15b0:	08 95       	ret

000015b2 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    15b2:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <udi_vendor_alternate_setting>
    15b6:	08 95       	ret

000015b8 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    15b8:	1c d1       	rcall	.+568    	; 0x17f2 <udc_get_interface_desc>
    15ba:	fc 01       	movw	r30, r24
    15bc:	83 81       	ldd	r24, Z+3	; 0x03
    15be:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    15c2:	81 11       	cpse	r24, r1
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    15c6:	d8 c9       	rjmp	.-3152   	; 0x978 <main_vendor_enable>
    15c8:	08 95       	ret
			return false;
		}
	}
	return true;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
}
    15cc:	08 95       	ret

000015ce <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    15ce:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <udi_vendor_alternate_setting>
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    15d6:	0d ca       	rjmp	.-3046   	; 0x9f2 <main_vendor_disable>
    15d8:	08 95       	ret

000015da <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    15da:	80 91 ea 25 	lds	r24, 0x25EA	; 0x8025ea <udd_g_ctrlreq>
    15de:	88 23       	and	r24, r24
    15e0:	4c f4       	brge	.+18     	; 0x15f4 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    15e2:	80 76       	andi	r24, 0x60	; 96
    15e4:	80 34       	cpi	r24, 0x40	; 64
    15e6:	a9 f4       	brne	.+42     	; 0x1612 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    15e8:	80 91 eb 25 	lds	r24, 0x25EB	; 0x8025eb <udd_g_ctrlreq+0x1>
    15ec:	81 11       	cpse	r24, r1
    15ee:	13 c0       	rjmp	.+38     	; 0x1616 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    15f0:	05 ca       	rjmp	.-3062   	; 0x9fc <main_setup_in_received>
    15f2:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    15f4:	80 76       	andi	r24, 0x60	; 96
    15f6:	80 34       	cpi	r24, 0x40	; 64
    15f8:	81 f4       	brne	.+32     	; 0x161a <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    15fa:	80 91 eb 25 	lds	r24, 0x25EB	; 0x8025eb <udd_g_ctrlreq+0x1>
    15fe:	81 11       	cpse	r24, r1
    1600:	0e c0       	rjmp	.+28     	; 0x161e <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1602:	80 91 f0 25 	lds	r24, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    1606:	90 91 f1 25 	lds	r25, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    160a:	89 2b       	or	r24, r25
    160c:	51 f0       	breq	.+20     	; 0x1622 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    160e:	f4 c9       	rjmp	.-3096   	; 0x9f8 <main_setup_out_received>
    1610:	08 95       	ret
		}
	}
	return false; // Not supported request
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	08 95       	ret
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	08 95       	ret
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	08 95       	ret
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	08 95       	ret
    1622:	80 e0       	ldi	r24, 0x00	; 0
}
    1624:	08 95       	ret

00001626 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1626:	e0 91 f1 20 	lds	r30, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    162a:	f0 91 f2 20 	lds	r31, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    162e:	01 90       	ld	r0, Z+
    1630:	f0 81       	ld	r31, Z
    1632:	e0 2d       	mov	r30, r0
    1634:	22 81       	ldd	r18, Z+2	; 0x02
    1636:	33 81       	ldd	r19, Z+3	; 0x03
    1638:	2e 0f       	add	r18, r30
    163a:	3f 1f       	adc	r19, r31
    163c:	fc 01       	movw	r30, r24
    163e:	40 81       	ld	r20, Z
    1640:	e4 0f       	add	r30, r20
    1642:	f1 1d       	adc	r31, r1
    1644:	e2 17       	cp	r30, r18
    1646:	f3 07       	cpc	r31, r19
    1648:	b8 f4       	brcc	.+46     	; 0x1678 <udc_next_desc_in_iface+0x52>
    164a:	81 81       	ldd	r24, Z+1	; 0x01
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	b9 f0       	breq	.+46     	; 0x167e <udc_next_desc_in_iface+0x58>
    1650:	86 13       	cpse	r24, r22
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <udc_next_desc_in_iface+0x40>
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <udc_next_desc_in_iface+0x3a>
    1656:	81 81       	ldd	r24, Z+1	; 0x01
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	a1 f0       	breq	.+40     	; 0x1684 <udc_next_desc_in_iface+0x5e>
    165c:	86 13       	cpse	r24, r22
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <udc_next_desc_in_iface+0x40>
    1660:	8e 2f       	mov	r24, r30
    1662:	9f 2f       	mov	r25, r31
    1664:	08 95       	ret
    1666:	80 81       	ld	r24, Z
    1668:	e8 0f       	add	r30, r24
    166a:	f1 1d       	adc	r31, r1
    166c:	e2 17       	cp	r30, r18
    166e:	f3 07       	cpc	r31, r19
    1670:	90 f3       	brcs	.-28     	; 0x1656 <udc_next_desc_in_iface+0x30>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	08 95       	ret
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	08 95       	ret
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	08 95       	ret
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	08 95       	ret

0000168a <udc_valid_address>:
    168a:	80 91 ec 25 	lds	r24, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    168e:	8f 77       	andi	r24, 0x7F	; 127
    1690:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <udd_set_address>
    1694:	08 95       	ret

00001696 <udc_update_iface_desc>:
    1696:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <udc_num_configuration>
    169a:	99 23       	and	r25, r25
    169c:	81 f1       	breq	.+96     	; 0x16fe <udc_update_iface_desc+0x68>
    169e:	e0 91 f1 20 	lds	r30, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    16a2:	f0 91 f2 20 	lds	r31, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    16a6:	01 90       	ld	r0, Z+
    16a8:	f0 81       	ld	r31, Z
    16aa:	e0 2d       	mov	r30, r0
    16ac:	94 81       	ldd	r25, Z+4	; 0x04
    16ae:	89 17       	cp	r24, r25
    16b0:	40 f5       	brcc	.+80     	; 0x1702 <udc_update_iface_desc+0x6c>
    16b2:	e0 93 ef 20 	sts	0x20EF, r30	; 0x8020ef <udc_ptr_iface>
    16b6:	f0 93 f0 20 	sts	0x20F0, r31	; 0x8020f0 <udc_ptr_iface+0x1>
    16ba:	22 81       	ldd	r18, Z+2	; 0x02
    16bc:	33 81       	ldd	r19, Z+3	; 0x03
    16be:	2e 0f       	add	r18, r30
    16c0:	3f 1f       	adc	r19, r31
    16c2:	e2 17       	cp	r30, r18
    16c4:	f3 07       	cpc	r31, r19
    16c6:	f8 f4       	brcc	.+62     	; 0x1706 <udc_update_iface_desc+0x70>
    16c8:	91 81       	ldd	r25, Z+1	; 0x01
    16ca:	94 30       	cpi	r25, 0x04	; 4
    16cc:	61 f4       	brne	.+24     	; 0x16e6 <udc_update_iface_desc+0x50>
    16ce:	92 81       	ldd	r25, Z+2	; 0x02
    16d0:	98 13       	cpse	r25, r24
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <udc_update_iface_desc+0x50>
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	96 13       	cpse	r25, r22
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <udc_update_iface_desc+0x50>
    16da:	e0 93 ef 20 	sts	0x20EF, r30	; 0x8020ef <udc_ptr_iface>
    16de:	f0 93 f0 20 	sts	0x20F0, r31	; 0x8020f0 <udc_ptr_iface+0x1>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	08 95       	ret
    16e6:	90 81       	ld	r25, Z
    16e8:	e9 0f       	add	r30, r25
    16ea:	f1 1d       	adc	r31, r1
    16ec:	e2 17       	cp	r30, r18
    16ee:	f3 07       	cpc	r31, r19
    16f0:	58 f3       	brcs	.-42     	; 0x16c8 <udc_update_iface_desc+0x32>
    16f2:	e0 93 ef 20 	sts	0x20EF, r30	; 0x8020ef <udc_ptr_iface>
    16f6:	f0 93 f0 20 	sts	0x20F0, r31	; 0x8020f0 <udc_ptr_iface+0x1>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	08 95       	ret
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	08 95       	ret
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	08 95       	ret
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	08 95       	ret

0000170a <udc_iface_disable>:
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	c8 2f       	mov	r28, r24
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	be df       	rcall	.-132    	; 0x1696 <udc_update_iface_desc>
    171a:	18 2f       	mov	r17, r24
    171c:	88 23       	and	r24, r24
    171e:	81 f1       	breq	.+96     	; 0x1780 <udc_iface_disable+0x76>
    1720:	a0 91 f1 20 	lds	r26, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    1724:	b0 91 f2 20 	lds	r27, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    1728:	ec 2f       	mov	r30, r28
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	12 96       	adiw	r26, 0x02	; 2
    1732:	8d 91       	ld	r24, X+
    1734:	9c 91       	ld	r25, X
    1736:	13 97       	sbiw	r26, 0x03	; 3
    1738:	e8 0f       	add	r30, r24
    173a:	f9 1f       	adc	r31, r25
    173c:	e0 80       	ld	r14, Z
    173e:	f1 80       	ldd	r15, Z+1	; 0x01
    1740:	d7 01       	movw	r26, r14
    1742:	16 96       	adiw	r26, 0x06	; 6
    1744:	ed 91       	ld	r30, X+
    1746:	fc 91       	ld	r31, X
    1748:	17 97       	sbiw	r26, 0x07	; 7
    174a:	09 95       	icall
    174c:	68 2f       	mov	r22, r24
    174e:	8c 2f       	mov	r24, r28
    1750:	a2 df       	rcall	.-188    	; 0x1696 <udc_update_iface_desc>
    1752:	18 2f       	mov	r17, r24
    1754:	88 23       	and	r24, r24
    1756:	a1 f0       	breq	.+40     	; 0x1780 <udc_iface_disable+0x76>
    1758:	c0 91 ef 20 	lds	r28, 0x20EF	; 0x8020ef <udc_ptr_iface>
    175c:	d0 91 f0 20 	lds	r29, 0x20F0	; 0x8020f0 <udc_ptr_iface+0x1>
    1760:	65 e0       	ldi	r22, 0x05	; 5
    1762:	ce 01       	movw	r24, r28
    1764:	60 df       	rcall	.-320    	; 0x1626 <udc_next_desc_in_iface>
    1766:	ec 01       	movw	r28, r24
    1768:	89 2b       	or	r24, r25
    176a:	21 f0       	breq	.+8      	; 0x1774 <udc_iface_disable+0x6a>
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	0e 94 80 15 	call	0x2b00	; 0x2b00 <udd_ep_free>
    1772:	f6 cf       	rjmp	.-20     	; 0x1760 <udc_iface_disable+0x56>
    1774:	d7 01       	movw	r26, r14
    1776:	12 96       	adiw	r26, 0x02	; 2
    1778:	ed 91       	ld	r30, X+
    177a:	fc 91       	ld	r31, X
    177c:	13 97       	sbiw	r26, 0x03	; 3
    177e:	09 95       	icall
    1780:	81 2f       	mov	r24, r17
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	08 95       	ret

0000178e <udc_iface_enable>:
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	18 2f       	mov	r17, r24
    1796:	7f df       	rcall	.-258    	; 0x1696 <udc_update_iface_desc>
    1798:	88 23       	and	r24, r24
    179a:	39 f1       	breq	.+78     	; 0x17ea <udc_iface_enable+0x5c>
    179c:	c0 91 ef 20 	lds	r28, 0x20EF	; 0x8020ef <udc_ptr_iface>
    17a0:	d0 91 f0 20 	lds	r29, 0x20F0	; 0x8020f0 <udc_ptr_iface+0x1>
    17a4:	65 e0       	ldi	r22, 0x05	; 5
    17a6:	ce 01       	movw	r24, r28
    17a8:	3e df       	rcall	.-388    	; 0x1626 <udc_next_desc_in_iface>
    17aa:	ec 01       	movw	r28, r24
    17ac:	89 2b       	or	r24, r25
    17ae:	41 f0       	breq	.+16     	; 0x17c0 <udc_iface_enable+0x32>
    17b0:	4c 81       	ldd	r20, Y+4	; 0x04
    17b2:	5d 81       	ldd	r21, Y+5	; 0x05
    17b4:	6b 81       	ldd	r22, Y+3	; 0x03
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	e4 d7       	rcall	.+4040   	; 0x2782 <udd_ep_alloc>
    17ba:	81 11       	cpse	r24, r1
    17bc:	f3 cf       	rjmp	.-26     	; 0x17a4 <udc_iface_enable+0x16>
    17be:	15 c0       	rjmp	.+42     	; 0x17ea <udc_iface_enable+0x5c>
    17c0:	a0 91 f1 20 	lds	r26, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    17c4:	b0 91 f2 20 	lds	r27, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    17c8:	e1 2f       	mov	r30, r17
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	ee 0f       	add	r30, r30
    17ce:	ff 1f       	adc	r31, r31
    17d0:	12 96       	adiw	r26, 0x02	; 2
    17d2:	8d 91       	ld	r24, X+
    17d4:	9c 91       	ld	r25, X
    17d6:	13 97       	sbiw	r26, 0x03	; 3
    17d8:	e8 0f       	add	r30, r24
    17da:	f9 1f       	adc	r31, r25
    17dc:	01 90       	ld	r0, Z+
    17de:	f0 81       	ld	r31, Z
    17e0:	e0 2d       	mov	r30, r0
    17e2:	01 90       	ld	r0, Z+
    17e4:	f0 81       	ld	r31, Z
    17e6:	e0 2d       	mov	r30, r0
    17e8:	09 95       	icall
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	08 95       	ret

000017f2 <udc_get_interface_desc>:
    17f2:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <udc_ptr_iface>
    17f6:	90 91 f0 20 	lds	r25, 0x20F0	; 0x8020f0 <udc_ptr_iface+0x1>
    17fa:	08 95       	ret

000017fc <udc_start>:
    17fc:	3a c7       	rjmp	.+3700   	; 0x2672 <udd_enable>
    17fe:	08 95       	ret

00001800 <udc_reset>:
    1800:	cf 93       	push	r28
    1802:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <udc_num_configuration>
    1806:	88 23       	and	r24, r24
    1808:	c1 f0       	breq	.+48     	; 0x183a <udc_reset+0x3a>
    180a:	e0 91 f1 20 	lds	r30, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    180e:	f0 91 f2 20 	lds	r31, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    1812:	01 90       	ld	r0, Z+
    1814:	f0 81       	ld	r31, Z
    1816:	e0 2d       	mov	r30, r0
    1818:	84 81       	ldd	r24, Z+4	; 0x04
    181a:	88 23       	and	r24, r24
    181c:	71 f0       	breq	.+28     	; 0x183a <udc_reset+0x3a>
    181e:	c0 e0       	ldi	r28, 0x00	; 0
    1820:	8c 2f       	mov	r24, r28
    1822:	73 df       	rcall	.-282    	; 0x170a <udc_iface_disable>
    1824:	cf 5f       	subi	r28, 0xFF	; 255
    1826:	e0 91 f1 20 	lds	r30, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    182a:	f0 91 f2 20 	lds	r31, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    182e:	01 90       	ld	r0, Z+
    1830:	f0 81       	ld	r31, Z
    1832:	e0 2d       	mov	r30, r0
    1834:	84 81       	ldd	r24, Z+4	; 0x04
    1836:	c8 17       	cp	r28, r24
    1838:	98 f3       	brcs	.-26     	; 0x1820 <udc_reset+0x20>
    183a:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <udc_num_configuration>
    183e:	10 92 f8 20 	sts	0x20F8, r1	; 0x8020f8 <udc_device_status>
    1842:	10 92 f9 20 	sts	0x20F9, r1	; 0x8020f9 <udc_device_status+0x1>
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret

0000184a <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    184a:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    184c:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <udc_num_configuration>
    1850:	88 23       	and	r24, r24
    1852:	49 f1       	breq	.+82     	; 0x18a6 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1854:	a0 91 f1 20 	lds	r26, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    1858:	b0 91 f2 20 	lds	r27, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    185c:	ed 91       	ld	r30, X+
    185e:	fc 91       	ld	r31, X
    1860:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1862:	84 81       	ldd	r24, Z+4	; 0x04
    1864:	88 23       	and	r24, r24
    1866:	f9 f0       	breq	.+62     	; 0x18a6 <udc_sof_notify+0x5c>
    1868:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    186a:	ec 2f       	mov	r30, r28
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	12 96       	adiw	r26, 0x02	; 2
    1874:	8d 91       	ld	r24, X+
    1876:	9c 91       	ld	r25, X
    1878:	13 97       	sbiw	r26, 0x03	; 3
    187a:	e8 0f       	add	r30, r24
    187c:	f9 1f       	adc	r31, r25
    187e:	01 90       	ld	r0, Z+
    1880:	f0 81       	ld	r31, Z
    1882:	e0 2d       	mov	r30, r0
    1884:	00 84       	ldd	r0, Z+8	; 0x08
    1886:	f1 85       	ldd	r31, Z+9	; 0x09
    1888:	e0 2d       	mov	r30, r0
    188a:	30 97       	sbiw	r30, 0x00	; 0
    188c:	09 f0       	breq	.+2      	; 0x1890 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    188e:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1890:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1892:	a0 91 f1 20 	lds	r26, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    1896:	b0 91 f2 20 	lds	r27, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    189a:	ed 91       	ld	r30, X+
    189c:	fc 91       	ld	r31, X
    189e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    18a0:	84 81       	ldd	r24, Z+4	; 0x04
    18a2:	c8 17       	cp	r28, r24
    18a4:	10 f3       	brcs	.-60     	; 0x186a <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    18b2:	ea ee       	ldi	r30, 0xEA	; 234
    18b4:	f5 e2       	ldi	r31, 0x25	; 37
    18b6:	12 86       	std	Z+10, r1	; 0x0a
    18b8:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    18ba:	14 86       	std	Z+12, r1	; 0x0c
    18bc:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    18be:	16 86       	std	Z+14, r1	; 0x0e
    18c0:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    18c2:	80 81       	ld	r24, Z
    18c4:	88 23       	and	r24, r24
    18c6:	3c f4       	brge	.+14     	; 0x18d6 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    18c8:	20 91 f0 25 	lds	r18, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    18cc:	30 91 f1 25 	lds	r19, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    18d0:	23 2b       	or	r18, r19
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <udc_process_setup+0x2c>
    18d4:	82 c3       	rjmp	.+1796   	; 0x1fda <udc_process_setup+0x730>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    18d6:	80 76       	andi	r24, 0x60	; 96
    18d8:	80 34       	cpi	r24, 0x40	; 64
    18da:	09 f0       	breq	.+2      	; 0x18de <udc_process_setup+0x34>
    18dc:	20 c1       	rjmp	.+576    	; 0x1b1e <udc_process_setup+0x274>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    18de:	e0 91 eb 25 	lds	r30, 0x25EB	; 0x8025eb <udd_g_ctrlreq+0x1>
    18e2:	8e 2f       	mov	r24, r30
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	fc 01       	movw	r30, r24
    18e8:	e0 5a       	subi	r30, 0xA0	; 160
    18ea:	f1 09       	sbc	r31, r1
    18ec:	e8 30       	cpi	r30, 0x08	; 8
    18ee:	f1 05       	cpc	r31, r1
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <udc_process_setup+0x4a>
    18f2:	0c c1       	rjmp	.+536    	; 0x1b0c <udc_process_setup+0x262>
    18f4:	e2 50       	subi	r30, 0x02	; 2
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    1902:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1906:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    190a:	ee ec       	ldi	r30, 0xCE	; 206
    190c:	f3 e2       	ldi	r31, 0x23	; 35
    190e:	85 87       	std	Z+13, r24	; 0x0d
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    1910:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1914:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1918:	96 87       	std	Z+14, r25	; 0x0e
			uds.calValNeg = cali_value_negative_gradient;
    191a:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <cali_value_negative_gradient>
    191e:	87 87       	std	Z+15, r24	; 0x0f
			uds.calValPos = cali_value_positive_gradient;
    1920:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <cali_value_positive_gradient>
    1924:	80 8b       	std	Z+16, r24	; 0x10
			uds.CALA = DFLLRC2M.CALA;
    1926:	a8 e6       	ldi	r26, 0x68	; 104
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	12 96       	adiw	r26, 0x02	; 2
    192c:	8c 91       	ld	r24, X
    192e:	12 97       	sbiw	r26, 0x02	; 2
    1930:	81 8b       	std	Z+17, r24	; 0x11
			uds.CALB = DFLLRC2M.CALB;
    1932:	13 96       	adiw	r26, 0x03	; 3
    1934:	8c 91       	ld	r24, X
    1936:	82 8b       	std	Z+18, r24	; 0x12
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    1938:	60 91 f0 25 	lds	r22, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    193c:	70 91 f1 25 	lds	r23, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    1940:	cf 01       	movw	r24, r30
    1942:	18 d7       	rcall	.+3632   	; 0x2774 <udd_set_setup_payload>
    1944:	4e c3       	rjmp	.+1692   	; 0x1fe2 <udc_process_setup+0x738>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1946:	e0 e0       	ldi	r30, 0x00	; 0
    1948:	f8 e0       	ldi	r31, 0x08	; 8
    194a:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    194c:	ca ee       	ldi	r28, 0xEA	; 234
    194e:	d5 e2       	ldi	r29, 0x25	; 37
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	86 ab       	std	Z+54, r24	; 0x36
    1956:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	8f 70       	andi	r24, 0x0F	; 15
    195c:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    195e:	6e 81       	ldd	r22, Y+6	; 0x06
    1960:	7f 81       	ldd	r23, Y+7	; 0x07
    1962:	8a ee       	ldi	r24, 0xEA	; 234
    1964:	93 e2       	ldi	r25, 0x23	; 35
    1966:	06 d7       	rcall	.+3596   	; 0x2774 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	9f 81       	ldd	r25, Y+7	; 0x07
    196c:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    1970:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1974:	82 17       	cp	r24, r18
    1976:	93 07       	cpc	r25, r19
    1978:	09 f4       	brne	.+2      	; 0x197c <udc_process_setup+0xd2>
    197a:	33 c3       	rjmp	.+1638   	; 0x1fe2 <udc_process_setup+0x738>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    197c:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    1980:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				switch(global_mode){
    1984:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    1988:	8e 2f       	mov	r24, r30
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	88 30       	cpi	r24, 0x08	; 8
    198e:	91 05       	cpc	r25, r1
    1990:	08 f0       	brcs	.+2      	; 0x1994 <udc_process_setup+0xea>
    1992:	be c0       	rjmp	.+380    	; 0x1b10 <udc_process_setup+0x266>
    1994:	fc 01       	movw	r30, r24
    1996:	ea 5f       	subi	r30, 0xFA	; 250
    1998:	fe 4f       	sbci	r31, 0xFE	; 254
    199a:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    199e:	f6 d8       	rcall	.-3604   	; 0xb8c <tiny_dma_set_mode_0>
    19a0:	20 c3       	rjmp	.+1600   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 1:
					tiny_dma_set_mode_1();
    19a2:	68 d9       	rcall	.-3376   	; 0xc74 <tiny_dma_set_mode_1>
    19a4:	1e c3       	rjmp	.+1596   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 2:
					tiny_dma_set_mode_2();
    19a6:	f1 d9       	rcall	.-3102   	; 0xd8a <tiny_dma_set_mode_2>
    19a8:	1c c3       	rjmp	.+1592   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 3:
					tiny_dma_set_mode_3();
    19aa:	77 da       	rcall	.-2834   	; 0xe9a <tiny_dma_set_mode_3>
    19ac:	1a c3       	rjmp	.+1588   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 4:
					tiny_dma_set_mode_4();
    19ae:	05 db       	rcall	.-2550   	; 0xfba <tiny_dma_set_mode_4>
    19b0:	18 c3       	rjmp	.+1584   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 5:
					tiny_dma_set_mode_5();
    19b2:	8d db       	rcall	.-2278   	; 0x10ce <tiny_dma_set_mode_5>
    19b4:	16 c3       	rjmp	.+1580   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 6:
					tiny_dma_set_mode_6();
    19b6:	8c db       	rcall	.-2280   	; 0x10d0 <tiny_dma_set_mode_6>
    19b8:	14 c3       	rjmp	.+1576   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 7:
					tiny_dma_set_mode_7();
    19ba:	ff db       	rcall	.-2050   	; 0x11ba <tiny_dma_set_mode_7>
    19bc:	12 c3       	rjmp	.+1572   	; 0x1fe2 <udc_process_setup+0x738>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    19be:	e0 e4       	ldi	r30, 0x40	; 64
    19c0:	f8 e0       	ldi	r31, 0x08	; 8
    19c2:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    19c4:	ca ee       	ldi	r28, 0xEA	; 234
    19c6:	d5 e2       	ldi	r29, 0x25	; 37
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	9b 81       	ldd	r25, Y+3	; 0x03
    19cc:	86 ab       	std	Z+54, r24	; 0x36
    19ce:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	8f 70       	andi	r24, 0x0F	; 15
    19d4:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    19d6:	6e 81       	ldd	r22, Y+6	; 0x06
    19d8:	7f 81       	ldd	r23, Y+7	; 0x07
    19da:	8a ef       	ldi	r24, 0xFA	; 250
    19dc:	95 e2       	ldi	r25, 0x25	; 37
    19de:	ca d6       	rcall	.+3476   	; 0x2774 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    19e0:	8e 81       	ldd	r24, Y+6	; 0x06
    19e2:	9f 81       	ldd	r25, Y+7	; 0x07
    19e4:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    19e8:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    19ec:	82 17       	cp	r24, r18
    19ee:	93 07       	cpc	r25, r19
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <udc_process_setup+0x14a>
    19f2:	f7 c2       	rjmp	.+1518   	; 0x1fe2 <udc_process_setup+0x738>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    19f4:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    19f8:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				switch(global_mode){
    19fc:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    1a00:	8e 2f       	mov	r24, r30
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	88 30       	cpi	r24, 0x08	; 8
    1a06:	91 05       	cpc	r25, r1
    1a08:	08 f0       	brcs	.+2      	; 0x1a0c <udc_process_setup+0x162>
    1a0a:	84 c0       	rjmp	.+264    	; 0x1b14 <udc_process_setup+0x26a>
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	e2 5f       	subi	r30, 0xF2	; 242
    1a10:	fe 4f       	sbci	r31, 0xFE	; 254
    1a12:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1a16:	ba d8       	rcall	.-3724   	; 0xb8c <tiny_dma_set_mode_0>
    1a18:	e4 c2       	rjmp	.+1480   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1a1a:	2c d9       	rcall	.-3496   	; 0xc74 <tiny_dma_set_mode_1>
    1a1c:	e2 c2       	rjmp	.+1476   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1a1e:	b5 d9       	rcall	.-3222   	; 0xd8a <tiny_dma_set_mode_2>
    1a20:	e0 c2       	rjmp	.+1472   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1a22:	3b da       	rcall	.-2954   	; 0xe9a <tiny_dma_set_mode_3>
    1a24:	de c2       	rjmp	.+1468   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1a26:	c9 da       	rcall	.-2670   	; 0xfba <tiny_dma_set_mode_4>
    1a28:	dc c2       	rjmp	.+1464   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1a2a:	51 db       	rcall	.-2398   	; 0x10ce <tiny_dma_set_mode_5>
    1a2c:	da c2       	rjmp	.+1460   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1a2e:	50 db       	rcall	.-2400   	; 0x10d0 <tiny_dma_set_mode_6>
    1a30:	d8 c2       	rjmp	.+1456   	; 0x1fe2 <udc_process_setup+0x738>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1a32:	c3 db       	rcall	.-2170   	; 0x11ba <tiny_dma_set_mode_7>
    1a34:	d6 c2       	rjmp	.+1452   	; 0x1fe2 <udc_process_setup+0x738>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1a36:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1a3a:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1a3e:	80 91 ec 25 	lds	r24, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1a42:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <PSU_target>
    1a46:	cd c2       	rjmp	.+1434   	; 0x1fe2 <udc_process_setup+0x738>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1a48:	80 91 ec 25 	lds	r24, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1a4c:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1a50:	c8 c2       	rjmp	.+1424   	; 0x1fe2 <udc_process_setup+0x738>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1a52:	e0 91 ec 25 	lds	r30, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1a56:	f0 91 ed 25 	lds	r31, 0x25ED	; 0x8025ed <udd_g_ctrlreq+0x3>
    1a5a:	e8 30       	cpi	r30, 0x08	; 8
    1a5c:	f1 05       	cpc	r31, r1
    1a5e:	08 f0       	brcs	.+2      	; 0x1a62 <udc_process_setup+0x1b8>
    1a60:	5b c0       	rjmp	.+182    	; 0x1b18 <udc_process_setup+0x26e>
    1a62:	ea 5e       	subi	r30, 0xEA	; 234
    1a64:	fe 4f       	sbci	r31, 0xFE	; 254
    1a66:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	0e 94 2c 05 	call	0xa58	; 0xa58 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a72:	80 91 ee 25 	lds	r24, 0x25EE	; 0x8025ee <udd_g_ctrlreq+0x4>
    1a76:	0e 94 00 05 	call	0xa00	; 0xa00 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    1a7a:	88 d8       	rcall	.-3824   	; 0xb8c <tiny_dma_set_mode_0>
    1a7c:	b2 c2       	rjmp	.+1380   	; 0x1fe2 <udc_process_setup+0x738>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	0e 94 2c 05 	call	0xa58	; 0xa58 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a86:	80 91 ee 25 	lds	r24, 0x25EE	; 0x8025ee <udd_g_ctrlreq+0x4>
    1a8a:	0e 94 00 05 	call	0xa00	; 0xa00 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1a8e:	f2 d8       	rcall	.-3612   	; 0xc74 <tiny_dma_set_mode_1>
    1a90:	a8 c2       	rjmp	.+1360   	; 0x1fe2 <udc_process_setup+0x738>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	0e 94 2c 05 	call	0xa58	; 0xa58 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a9a:	ca ee       	ldi	r28, 0xEA	; 234
    1a9c:	d5 e2       	ldi	r29, 0x25	; 37
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa0:	0e 94 00 05 	call	0xa00	; 0xa00 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    1aaa:	6f d9       	rcall	.-3362   	; 0xd8a <tiny_dma_set_mode_2>
    1aac:	9a c2       	rjmp	.+1332   	; 0x1fe2 <udc_process_setup+0x738>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    1aae:	f5 d9       	rcall	.-3094   	; 0xe9a <tiny_dma_set_mode_3>
    1ab0:	98 c2       	rjmp	.+1328   	; 0x1fe2 <udc_process_setup+0x738>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    1ab2:	83 da       	rcall	.-2810   	; 0xfba <tiny_dma_set_mode_4>
    1ab4:	96 c2       	rjmp	.+1324   	; 0x1fe2 <udc_process_setup+0x738>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	0e 94 2c 05 	call	0xa58	; 0xa58 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1abe:	80 91 ee 25 	lds	r24, 0x25EE	; 0x8025ee <udd_g_ctrlreq+0x4>
    1ac2:	0e 94 00 05 	call	0xa00	; 0xa00 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    1ac6:	03 db       	rcall	.-2554   	; 0x10ce <tiny_dma_set_mode_5>
    1ac8:	8c c2       	rjmp	.+1304   	; 0x1fe2 <udc_process_setup+0x738>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	0e 94 2c 05 	call	0xa58	; 0xa58 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1ad2:	80 91 ee 25 	lds	r24, 0x25EE	; 0x8025ee <udd_g_ctrlreq+0x4>
    1ad6:	0e 94 00 05 	call	0xa00	; 0xa00 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    1ada:	fa da       	rcall	.-2572   	; 0x10d0 <tiny_dma_set_mode_6>
    1adc:	82 c2       	rjmp	.+1284   	; 0x1fe2 <udc_process_setup+0x738>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1ade:	62 e0       	ldi	r22, 0x02	; 2
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	0e 94 2c 05 	call	0xa58	; 0xa58 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1ae6:	80 91 ee 25 	lds	r24, 0x25EE	; 0x8025ee <udd_g_ctrlreq+0x4>
    1aea:	80 68       	ori	r24, 0x80	; 128
    1aec:	0e 94 00 05 	call	0xa00	; 0xa00 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    1af0:	64 db       	rcall	.-2360   	; 0x11ba <tiny_dma_set_mode_7>
    1af2:	77 c2       	rjmp	.+1262   	; 0x1fe2 <udc_process_setup+0x738>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1af4:	80 91 ec 25 	lds	r24, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1af8:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1afc:	72 c2       	rjmp	.+1252   	; 0x1fe2 <udc_process_setup+0x738>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1afe:	e9 e7       	ldi	r30, 0x79	; 121
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	88 ed       	ldi	r24, 0xD8	; 216
    1b06:	f8 94       	cli
    1b08:	84 bf       	out	0x34, r24	; 52
    1b0a:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <udc_process_setup+0x270>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <udc_process_setup+0x270>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <udc_process_setup+0x270>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    1b18:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	65 c2       	rjmp	.+1226   	; 0x1fe8 <udc_process_setup+0x73e>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1b1e:	80 91 ea 25 	lds	r24, 0x25EA	; 0x8025ea <udd_g_ctrlreq>
    1b22:	98 2f       	mov	r25, r24
    1b24:	90 76       	andi	r25, 0x60	; 96
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <udc_process_setup+0x280>
    1b28:	e1 c1       	rjmp	.+962    	; 0x1eec <udc_process_setup+0x642>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1b2a:	88 23       	and	r24, r24
    1b2c:	0c f0       	brlt	.+2      	; 0x1b30 <udc_process_setup+0x286>
    1b2e:	05 c1       	rjmp	.+522    	; 0x1d3a <udc_process_setup+0x490>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1b30:	20 91 f0 25 	lds	r18, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    1b34:	30 91 f1 25 	lds	r19, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    1b38:	21 15       	cp	r18, r1
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <udc_process_setup+0x296>
    1b3e:	d6 c1       	rjmp	.+940    	; 0x1eec <udc_process_setup+0x642>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b40:	8f 71       	andi	r24, 0x1F	; 31
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <udc_process_setup+0x29c>
    1b44:	a3 c0       	rjmp	.+326    	; 0x1c8c <udc_process_setup+0x3e2>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b46:	90 91 eb 25 	lds	r25, 0x25EB	; 0x8025eb <udd_g_ctrlreq+0x1>
    1b4a:	96 30       	cpi	r25, 0x06	; 6
    1b4c:	79 f0       	breq	.+30     	; 0x1b6c <udc_process_setup+0x2c2>
    1b4e:	98 30       	cpi	r25, 0x08	; 8
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <udc_process_setup+0x2aa>
    1b52:	92 c0       	rjmp	.+292    	; 0x1c78 <udc_process_setup+0x3ce>
    1b54:	91 11       	cpse	r25, r1
    1b56:	9a c0       	rjmp	.+308    	; 0x1c8c <udc_process_setup+0x3e2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <udc_process_setup+0x2b6>
    1b5e:	c6 c1       	rjmp	.+908    	; 0x1eec <udc_process_setup+0x642>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	88 ef       	ldi	r24, 0xF8	; 248
    1b66:	90 e2       	ldi	r25, 0x20	; 32
    1b68:	05 d6       	rcall	.+3082   	; 0x2774 <udd_set_setup_payload>
    1b6a:	3d c2       	rjmp	.+1146   	; 0x1fe6 <udc_process_setup+0x73c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1b6c:	80 91 ec 25 	lds	r24, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1b70:	90 91 ed 25 	lds	r25, 0x25ED	; 0x8025ed <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b74:	29 2f       	mov	r18, r25
    1b76:	33 27       	eor	r19, r19
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	a9 f0       	breq	.+42     	; 0x1ba8 <udc_process_setup+0x2fe>
    1b7e:	24 f4       	brge	.+8      	; 0x1b88 <udc_process_setup+0x2de>
    1b80:	21 30       	cpi	r18, 0x01	; 1
    1b82:	31 05       	cpc	r19, r1
    1b84:	41 f0       	breq	.+16     	; 0x1b96 <udc_process_setup+0x2ec>
    1b86:	a9 c1       	rjmp	.+850    	; 0x1eda <udc_process_setup+0x630>
    1b88:	23 30       	cpi	r18, 0x03	; 3
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	d9 f1       	breq	.+118    	; 0x1c04 <udc_process_setup+0x35a>
    1b8e:	2f 30       	cpi	r18, 0x0F	; 15
    1b90:	31 05       	cpc	r19, r1
    1b92:	51 f1       	breq	.+84     	; 0x1be8 <udc_process_setup+0x33e>
    1b94:	a2 c1       	rjmp	.+836    	; 0x1eda <udc_process_setup+0x630>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1b96:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1b9a:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	6c 91       	ld	r22, X
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	e7 d5       	rcall	.+3022   	; 0x2774 <udd_set_setup_payload>
    1ba6:	59 c0       	rjmp	.+178    	; 0x1c5a <udc_process_setup+0x3b0>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1ba8:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1bac:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1bb0:	21 89       	ldd	r18, Z+17	; 0x11
    1bb2:	82 17       	cp	r24, r18
    1bb4:	08 f0       	brcs	.+2      	; 0x1bb8 <udc_process_setup+0x30e>
    1bb6:	9a c1       	rjmp	.+820    	; 0x1eec <udc_process_setup+0x642>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1bb8:	99 27       	eor	r25, r25
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1bc6:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1bca:	e8 0f       	add	r30, r24
    1bcc:	f9 1f       	adc	r31, r25
    1bce:	80 81       	ld	r24, Z
    1bd0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	62 81       	ldd	r22, Z+2	; 0x02
    1bd6:	73 81       	ldd	r23, Z+3	; 0x03
    1bd8:	cd d5       	rcall	.+2970   	; 0x2774 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1bda:	e0 91 f2 25 	lds	r30, 0x25F2	; 0x8025f2 <udd_g_ctrlreq+0x8>
    1bde:	f0 91 f3 25 	lds	r31, 0x25F3	; 0x8025f3 <udd_g_ctrlreq+0x9>
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	81 83       	std	Z+1, r24	; 0x01
    1be6:	39 c0       	rjmp	.+114    	; 0x1c5a <udc_process_setup+0x3b0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1be8:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1bec:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <udc_process_setup+0x34c>
    1bf4:	7b c1       	rjmp	.+758    	; 0x1eec <udc_process_setup+0x642>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	12 96       	adiw	r26, 0x02	; 2
    1bfa:	6d 91       	ld	r22, X+
    1bfc:	7c 91       	ld	r23, X
    1bfe:	13 97       	sbiw	r26, 0x03	; 3
    1c00:	b9 d5       	rcall	.+2930   	; 0x2774 <udd_set_setup_payload>
    1c02:	2b c0       	rjmp	.+86     	; 0x1c5a <udc_process_setup+0x3b0>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1c04:	99 27       	eor	r25, r25
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	91 05       	cpc	r25, r1
    1c0a:	71 f0       	breq	.+28     	; 0x1c28 <udc_process_setup+0x37e>
    1c0c:	38 f0       	brcs	.+14     	; 0x1c1c <udc_process_setup+0x372>
    1c0e:	02 97       	sbiw	r24, 0x02	; 2
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <udc_process_setup+0x36a>
    1c12:	6c c1       	rjmp	.+728    	; 0x1eec <udc_process_setup+0x642>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1c14:	8a ea       	ldi	r24, 0xAA	; 170
    1c16:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1c18:	28 e1       	ldi	r18, 0x18	; 24
    1c1a:	09 c0       	rjmp	.+18     	; 0x1c2e <udc_process_setup+0x384>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1c1c:	64 e0       	ldi	r22, 0x04	; 4
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	8e ec       	ldi	r24, 0xCE	; 206
    1c22:	90 e2       	ldi	r25, 0x20	; 32
    1c24:	a7 d5       	rcall	.+2894   	; 0x2774 <udd_set_setup_payload>
    1c26:	19 c0       	rjmp	.+50     	; 0x1c5a <udc_process_setup+0x3b0>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1c28:	83 ec       	ldi	r24, 0xC3	; 195
    1c2a:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1c2c:	29 e0       	ldi	r18, 0x09	; 9
    1c2e:	38 2f       	mov	r19, r24
    1c30:	aa e7       	ldi	r26, 0x7A	; 122
    1c32:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1c34:	e8 2f       	mov	r30, r24
    1c36:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1c38:	81 91       	ld	r24, Z+
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	8d 93       	st	X+, r24
    1c3e:	9d 93       	st	X+, r25
    1c40:	8e 2f       	mov	r24, r30
    1c42:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1c44:	82 17       	cp	r24, r18
    1c46:	c0 f3       	brcs	.-16     	; 0x1c38 <udc_process_setup+0x38e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1c48:	62 2f       	mov	r22, r18
    1c4a:	66 0f       	add	r22, r22
    1c4c:	6e 5f       	subi	r22, 0xFE	; 254
    1c4e:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
		udd_set_setup_payload(
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	88 e7       	ldi	r24, 0x78	; 120
    1c56:	90 e2       	ldi	r25, 0x20	; 32
    1c58:	8d d5       	rcall	.+2842   	; 0x2774 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1c5a:	ea ee       	ldi	r30, 0xEA	; 234
    1c5c:	f5 e2       	ldi	r31, 0x25	; 37
    1c5e:	86 81       	ldd	r24, Z+6	; 0x06
    1c60:	97 81       	ldd	r25, Z+7	; 0x07
    1c62:	22 85       	ldd	r18, Z+10	; 0x0a
    1c64:	33 85       	ldd	r19, Z+11	; 0x0b
    1c66:	82 17       	cp	r24, r18
    1c68:	93 07       	cpc	r25, r19
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <udc_process_setup+0x3c4>
    1c6c:	bc c1       	rjmp	.+888    	; 0x1fe6 <udc_process_setup+0x73c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1c6e:	80 93 f4 25 	sts	0x25F4, r24	; 0x8025f4 <udd_g_ctrlreq+0xa>
    1c72:	90 93 f5 25 	sts	0x25F5, r25	; 0x8025f5 <udd_g_ctrlreq+0xb>
    1c76:	b7 c1       	rjmp	.+878    	; 0x1fe6 <udc_process_setup+0x73c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1c78:	21 30       	cpi	r18, 0x01	; 1
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <udc_process_setup+0x3d6>
    1c7e:	36 c1       	rjmp	.+620    	; 0x1eec <udc_process_setup+0x642>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	84 ef       	ldi	r24, 0xF4	; 244
    1c86:	90 e2       	ldi	r25, 0x20	; 32
    1c88:	75 d5       	rcall	.+2794   	; 0x2774 <udd_set_setup_payload>
    1c8a:	ad c1       	rjmp	.+858    	; 0x1fe6 <udc_process_setup+0x73c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	e1 f5       	brne	.+120    	; 0x1d08 <udc_process_setup+0x45e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c90:	90 91 eb 25 	lds	r25, 0x25EB	; 0x8025eb <udd_g_ctrlreq+0x1>
    1c94:	9a 30       	cpi	r25, 0x0A	; 10
    1c96:	c1 f5       	brne	.+112    	; 0x1d08 <udc_process_setup+0x45e>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1c98:	21 30       	cpi	r18, 0x01	; 1
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <udc_process_setup+0x3f6>
    1c9e:	26 c1       	rjmp	.+588    	; 0x1eec <udc_process_setup+0x642>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1ca0:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <udc_num_configuration>
    1ca4:	88 23       	and	r24, r24
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <udc_process_setup+0x400>
    1ca8:	21 c1       	rjmp	.+578    	; 0x1eec <udc_process_setup+0x642>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1caa:	c0 91 ee 25 	lds	r28, 0x25EE	; 0x8025ee <udd_g_ctrlreq+0x4>
    1cae:	d0 91 ef 25 	lds	r29, 0x25EF	; 0x8025ef <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1cb2:	00 91 f1 20 	lds	r16, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    1cb6:	10 91 f2 20 	lds	r17, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    1cba:	d8 01       	movw	r26, r16
    1cbc:	ed 91       	ld	r30, X+
    1cbe:	fc 91       	ld	r31, X
    1cc0:	84 81       	ldd	r24, Z+4	; 0x04
    1cc2:	c8 17       	cp	r28, r24
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <udc_process_setup+0x41e>
    1cc6:	12 c1       	rjmp	.+548    	; 0x1eec <udc_process_setup+0x642>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	8c 2f       	mov	r24, r28
    1ccc:	e4 dc       	rcall	.-1592   	; 0x1696 <udc_update_iface_desc>
    1cce:	88 23       	and	r24, r24
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <udc_process_setup+0x42a>
    1cd2:	0c c1       	rjmp	.+536    	; 0x1eec <udc_process_setup+0x642>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	99 27       	eor	r25, r25
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	d8 01       	movw	r26, r16
    1cde:	12 96       	adiw	r26, 0x02	; 2
    1ce0:	ed 91       	ld	r30, X+
    1ce2:	fc 91       	ld	r31, X
    1ce4:	13 97       	sbiw	r26, 0x03	; 3
    1ce6:	e8 0f       	add	r30, r24
    1ce8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1cea:	01 90       	ld	r0, Z+
    1cec:	f0 81       	ld	r31, Z
    1cee:	e0 2d       	mov	r30, r0
    1cf0:	86 81       	ldd	r24, Z+6	; 0x06
    1cf2:	97 81       	ldd	r25, Z+7	; 0x07
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	09 95       	icall
    1cf8:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	86 ef       	ldi	r24, 0xF6	; 246
    1d02:	90 e2       	ldi	r25, 0x20	; 32
    1d04:	37 d5       	rcall	.+2670   	; 0x2774 <udd_set_setup_payload>
    1d06:	6f c1       	rjmp	.+734    	; 0x1fe6 <udc_process_setup+0x73c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1d08:	82 30       	cpi	r24, 0x02	; 2
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <udc_process_setup+0x464>
    1d0c:	ef c0       	rjmp	.+478    	; 0x1eec <udc_process_setup+0x642>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d0e:	80 91 eb 25 	lds	r24, 0x25EB	; 0x8025eb <udd_g_ctrlreq+0x1>
    1d12:	81 11       	cpse	r24, r1
    1d14:	e4 c0       	rjmp	.+456    	; 0x1ede <udc_process_setup+0x634>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <udc_process_setup+0x474>
    1d1c:	e7 c0       	rjmp	.+462    	; 0x1eec <udc_process_setup+0x642>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1d1e:	80 91 ee 25 	lds	r24, 0x25EE	; 0x8025ee <udd_g_ctrlreq+0x4>
    1d22:	9b d5       	rcall	.+2870   	; 0x285a <udd_ep_is_halted>
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	80 93 ed 20 	sts	0x20ED, r24	; 0x8020ed <udc_ep_status.5554>
    1d2a:	90 93 ee 20 	sts	0x20EE, r25	; 0x8020ee <udc_ep_status.5554+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1d2e:	62 e0       	ldi	r22, 0x02	; 2
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	8d ee       	ldi	r24, 0xED	; 237
    1d34:	90 e2       	ldi	r25, 0x20	; 32
    1d36:	1e d5       	rcall	.+2620   	; 0x2774 <udd_set_setup_payload>
    1d38:	56 c1       	rjmp	.+684    	; 0x1fe6 <udc_process_setup+0x73c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1d3a:	8f 71       	andi	r24, 0x1F	; 31
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <udc_process_setup+0x496>
    1d3e:	83 c0       	rjmp	.+262    	; 0x1e46 <udc_process_setup+0x59c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d40:	90 91 eb 25 	lds	r25, 0x25EB	; 0x8025eb <udd_g_ctrlreq+0x1>
    1d44:	93 30       	cpi	r25, 0x03	; 3
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <udc_process_setup+0x4a0>
    1d48:	cc c0       	rjmp	.+408    	; 0x1ee2 <udc_process_setup+0x638>
    1d4a:	18 f4       	brcc	.+6      	; 0x1d52 <udc_process_setup+0x4a8>
    1d4c:	91 30       	cpi	r25, 0x01	; 1
    1d4e:	a1 f0       	breq	.+40     	; 0x1d78 <udc_process_setup+0x4ce>
    1d50:	7a c0       	rjmp	.+244    	; 0x1e46 <udc_process_setup+0x59c>
    1d52:	95 30       	cpi	r25, 0x05	; 5
    1d54:	19 f0       	breq	.+6      	; 0x1d5c <udc_process_setup+0x4b2>
    1d56:	99 30       	cpi	r25, 0x09	; 9
    1d58:	39 f1       	breq	.+78     	; 0x1da8 <udc_process_setup+0x4fe>
    1d5a:	75 c0       	rjmp	.+234    	; 0x1e46 <udc_process_setup+0x59c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d5c:	80 91 f0 25 	lds	r24, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    1d60:	90 91 f1 25 	lds	r25, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    1d64:	89 2b       	or	r24, r25
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <udc_process_setup+0x4c0>
    1d68:	c1 c0       	rjmp	.+386    	; 0x1eec <udc_process_setup+0x642>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1d6a:	85 e4       	ldi	r24, 0x45	; 69
    1d6c:	9b e0       	ldi	r25, 0x0B	; 11
    1d6e:	80 93 f6 25 	sts	0x25F6, r24	; 0x8025f6 <udd_g_ctrlreq+0xc>
    1d72:	90 93 f7 25 	sts	0x25F7, r25	; 0x8025f7 <udd_g_ctrlreq+0xd>
    1d76:	37 c1       	rjmp	.+622    	; 0x1fe6 <udc_process_setup+0x73c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d78:	80 91 f0 25 	lds	r24, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    1d7c:	90 91 f1 25 	lds	r25, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    1d80:	89 2b       	or	r24, r25
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <udc_process_setup+0x4dc>
    1d84:	b3 c0       	rjmp	.+358    	; 0x1eec <udc_process_setup+0x642>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1d86:	80 91 ec 25 	lds	r24, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1d8a:	90 91 ed 25 	lds	r25, 0x25ED	; 0x8025ed <udd_g_ctrlreq+0x3>
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <udc_process_setup+0x4ea>
    1d92:	ac c0       	rjmp	.+344    	; 0x1eec <udc_process_setup+0x642>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1d94:	80 91 f8 20 	lds	r24, 0x20F8	; 0x8020f8 <udc_device_status>
    1d98:	90 91 f9 20 	lds	r25, 0x20F9	; 0x8020f9 <udc_device_status+0x1>
    1d9c:	8d 7f       	andi	r24, 0xFD	; 253
    1d9e:	80 93 f8 20 	sts	0x20F8, r24	; 0x8020f8 <udc_device_status>
    1da2:	90 93 f9 20 	sts	0x20F9, r25	; 0x8020f9 <udc_device_status+0x1>
    1da6:	1f c1       	rjmp	.+574    	; 0x1fe6 <udc_process_setup+0x73c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1da8:	80 91 f0 25 	lds	r24, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    1dac:	90 91 f1 25 	lds	r25, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    1db0:	89 2b       	or	r24, r25
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <udc_process_setup+0x50c>
    1db4:	9b c0       	rjmp	.+310    	; 0x1eec <udc_process_setup+0x642>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1db6:	db d4       	rcall	.+2486   	; 0x276e <udd_getaddress>
    1db8:	88 23       	and	r24, r24
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <udc_process_setup+0x514>
    1dbc:	97 c0       	rjmp	.+302    	; 0x1eec <udc_process_setup+0x642>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1dbe:	20 91 ec 25 	lds	r18, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1dc2:	30 91 ed 25 	lds	r19, 0x25ED	; 0x8025ed <udd_g_ctrlreq+0x3>
    1dc6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1dc8:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1dcc:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1dd0:	81 89       	ldd	r24, Z+17	; 0x11
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	82 17       	cp	r24, r18
    1dd6:	93 07       	cpc	r25, r19
    1dd8:	08 f4       	brcc	.+2      	; 0x1ddc <udc_process_setup+0x532>
    1dda:	88 c0       	rjmp	.+272    	; 0x1eec <udc_process_setup+0x642>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1ddc:	11 dd       	rcall	.-1502   	; 0x1800 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1dde:	80 91 ec 25 	lds	r24, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1de2:	90 91 ed 25 	lds	r25, 0x25ED	; 0x8025ed <udd_g_ctrlreq+0x3>
    1de6:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1dea:	88 23       	and	r24, r24
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <udc_process_setup+0x546>
    1dee:	fb c0       	rjmp	.+502    	; 0x1fe6 <udc_process_setup+0x73c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1df0:	99 27       	eor	r25, r25
    1df2:	81 50       	subi	r24, 0x01	; 1
    1df4:	90 4c       	sbci	r25, 0xC0	; 192
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1e02:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1e06:	e8 0f       	add	r30, r24
    1e08:	f9 1f       	adc	r31, r25
    1e0a:	e0 93 f1 20 	sts	0x20F1, r30	; 0x8020f1 <udc_ptr_conf>
    1e0e:	f0 93 f2 20 	sts	0x20F2, r31	; 0x8020f2 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e12:	01 90       	ld	r0, Z+
    1e14:	f0 81       	ld	r31, Z
    1e16:	e0 2d       	mov	r30, r0
    1e18:	84 81       	ldd	r24, Z+4	; 0x04
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <udc_process_setup+0x576>
    1e1e:	e3 c0       	rjmp	.+454    	; 0x1fe6 <udc_process_setup+0x73c>
    1e20:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	8c 2f       	mov	r24, r28
    1e26:	b3 dc       	rcall	.-1690   	; 0x178e <udc_iface_enable>
    1e28:	88 23       	and	r24, r24
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <udc_process_setup+0x584>
    1e2c:	5f c0       	rjmp	.+190    	; 0x1eec <udc_process_setup+0x642>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1e2e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e30:	e0 91 f1 20 	lds	r30, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    1e34:	f0 91 f2 20 	lds	r31, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    1e38:	01 90       	ld	r0, Z+
    1e3a:	f0 81       	ld	r31, Z
    1e3c:	e0 2d       	mov	r30, r0
    1e3e:	84 81       	ldd	r24, Z+4	; 0x04
    1e40:	c8 17       	cp	r28, r24
    1e42:	78 f3       	brcs	.-34     	; 0x1e22 <udc_process_setup+0x578>
    1e44:	d0 c0       	rjmp	.+416    	; 0x1fe6 <udc_process_setup+0x73c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	e1 f4       	brne	.+56     	; 0x1e82 <udc_process_setup+0x5d8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e4a:	90 91 eb 25 	lds	r25, 0x25EB	; 0x8025eb <udd_g_ctrlreq+0x1>
    1e4e:	9b 30       	cpi	r25, 0x0B	; 11
    1e50:	c1 f4       	brne	.+48     	; 0x1e82 <udc_process_setup+0x5d8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1e52:	80 91 f0 25 	lds	r24, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    1e56:	90 91 f1 25 	lds	r25, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    1e5a:	89 2b       	or	r24, r25
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <udc_process_setup+0x5b6>
    1e5e:	46 c0       	rjmp	.+140    	; 0x1eec <udc_process_setup+0x642>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1e60:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <udc_num_configuration>
    1e64:	88 23       	and	r24, r24
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <udc_process_setup+0x5c0>
    1e68:	41 c0       	rjmp	.+130    	; 0x1eec <udc_process_setup+0x642>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e6a:	ea ee       	ldi	r30, 0xEA	; 234
    1e6c:	f5 e2       	ldi	r31, 0x25	; 37
    1e6e:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1e70:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1e72:	8c 2f       	mov	r24, r28
    1e74:	4a dc       	rcall	.-1900   	; 0x170a <udc_iface_disable>
    1e76:	88 23       	and	r24, r24
    1e78:	c9 f1       	breq	.+114    	; 0x1eec <udc_process_setup+0x642>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1e7a:	6d 2f       	mov	r22, r29
    1e7c:	8c 2f       	mov	r24, r28
    1e7e:	87 dc       	rcall	.-1778   	; 0x178e <udc_iface_enable>
    1e80:	33 c0       	rjmp	.+102    	; 0x1ee8 <udc_process_setup+0x63e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e82:	82 30       	cpi	r24, 0x02	; 2
    1e84:	99 f5       	brne	.+102    	; 0x1eec <udc_process_setup+0x642>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e86:	80 91 eb 25 	lds	r24, 0x25EB	; 0x8025eb <udd_g_ctrlreq+0x1>
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	19 f0       	breq	.+6      	; 0x1e94 <udc_process_setup+0x5ea>
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	89 f0       	breq	.+34     	; 0x1eb4 <udc_process_setup+0x60a>
    1e92:	29 c0       	rjmp	.+82     	; 0x1ee6 <udc_process_setup+0x63c>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e94:	80 91 f0 25 	lds	r24, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    1e98:	90 91 f1 25 	lds	r25, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    1e9c:	89 2b       	or	r24, r25
    1e9e:	31 f5       	brne	.+76     	; 0x1eec <udc_process_setup+0x642>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1ea0:	80 91 ec 25 	lds	r24, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1ea4:	90 91 ed 25 	lds	r25, 0x25ED	; 0x8025ed <udd_g_ctrlreq+0x3>
    1ea8:	89 2b       	or	r24, r25
    1eaa:	01 f5       	brne	.+64     	; 0x1eec <udc_process_setup+0x642>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1eac:	80 91 ee 25 	lds	r24, 0x25EE	; 0x8025ee <udd_g_ctrlreq+0x4>
    1eb0:	ef d4       	rcall	.+2526   	; 0x2890 <udd_ep_clear_halt>
    1eb2:	1a c0       	rjmp	.+52     	; 0x1ee8 <udc_process_setup+0x63e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1eb4:	80 91 f0 25 	lds	r24, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    1eb8:	90 91 f1 25 	lds	r25, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    1ebc:	89 2b       	or	r24, r25
    1ebe:	b1 f4       	brne	.+44     	; 0x1eec <udc_process_setup+0x642>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1ec0:	80 91 ec 25 	lds	r24, 0x25EC	; 0x8025ec <udd_g_ctrlreq+0x2>
    1ec4:	90 91 ed 25 	lds	r25, 0x25ED	; 0x8025ed <udd_g_ctrlreq+0x3>
    1ec8:	89 2b       	or	r24, r25
    1eca:	81 f4       	brne	.+32     	; 0x1eec <udc_process_setup+0x642>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ecc:	ca ee       	ldi	r28, 0xEA	; 234
    1ece:	d5 e2       	ldi	r29, 0x25	; 37
    1ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed2:	cd d5       	rcall	.+2970   	; 0x2a6e <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	30 d6       	rcall	.+3168   	; 0x2b38 <udd_ep_set_halt>
    1ed8:	07 c0       	rjmp	.+14     	; 0x1ee8 <udc_process_setup+0x63e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	05 c0       	rjmp	.+10     	; 0x1ee8 <udc_process_setup+0x63e>
				break;
			}
		}
#endif
	}
	return false;
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	03 c0       	rjmp	.+6      	; 0x1ee8 <udc_process_setup+0x63e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <udc_process_setup+0x63e>
				break;
			}
		}
#endif
	}
	return false;
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1ee8:	81 11       	cpse	r24, r1
    1eea:	7e c0       	rjmp	.+252    	; 0x1fe8 <udc_process_setup+0x73e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1eec:	80 91 ea 25 	lds	r24, 0x25EA	; 0x8025ea <udd_g_ctrlreq>
    1ef0:	8f 71       	andi	r24, 0x1F	; 31
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	71 f5       	brne	.+92     	; 0x1f52 <udc_process_setup+0x6a8>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ef6:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <udc_num_configuration>
    1efa:	88 23       	and	r24, r24
    1efc:	51 f1       	breq	.+84     	; 0x1f52 <udc_process_setup+0x6a8>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1efe:	00 91 ee 25 	lds	r16, 0x25EE	; 0x8025ee <udd_g_ctrlreq+0x4>
    1f02:	10 91 ef 25 	lds	r17, 0x25EF	; 0x8025ef <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1f06:	c0 91 f1 20 	lds	r28, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    1f0a:	d0 91 f2 20 	lds	r29, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    1f0e:	e8 81       	ld	r30, Y
    1f10:	f9 81       	ldd	r31, Y+1	; 0x01
    1f12:	84 81       	ldd	r24, Z+4	; 0x04
    1f14:	08 17       	cp	r16, r24
    1f16:	e8 f4       	brcc	.+58     	; 0x1f52 <udc_process_setup+0x6a8>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	80 2f       	mov	r24, r16
    1f1c:	bc db       	rcall	.-2184   	; 0x1696 <udc_update_iface_desc>
    1f1e:	88 23       	and	r24, r24
    1f20:	c1 f0       	breq	.+48     	; 0x1f52 <udc_process_setup+0x6a8>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f22:	f8 01       	movw	r30, r16
    1f24:	ff 27       	eor	r31, r31
    1f26:	cf 01       	movw	r24, r30
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f30:	e8 0f       	add	r30, r24
    1f32:	f9 1f       	adc	r31, r25
    1f34:	c0 81       	ld	r28, Z
    1f36:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f38:	ee 81       	ldd	r30, Y+6	; 0x06
    1f3a:	ff 81       	ldd	r31, Y+7	; 0x07
    1f3c:	09 95       	icall
    1f3e:	68 2f       	mov	r22, r24
    1f40:	80 2f       	mov	r24, r16
    1f42:	a9 db       	rcall	.-2222   	; 0x1696 <udc_update_iface_desc>
    1f44:	88 23       	and	r24, r24
    1f46:	29 f0       	breq	.+10     	; 0x1f52 <udc_process_setup+0x6a8>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1f48:	ec 81       	ldd	r30, Y+4	; 0x04
    1f4a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f4c:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1f4e:	81 11       	cpse	r24, r1
    1f50:	4b c0       	rjmp	.+150    	; 0x1fe8 <udc_process_setup+0x73e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1f52:	80 91 ea 25 	lds	r24, 0x25EA	; 0x8025ea <udd_g_ctrlreq>
    1f56:	8f 71       	andi	r24, 0x1F	; 31
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <udc_process_setup+0x6b4>
    1f5c:	40 c0       	rjmp	.+128    	; 0x1fde <udc_process_setup+0x734>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1f5e:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <udc_num_configuration>
    1f62:	88 23       	and	r24, r24
    1f64:	b1 f1       	breq	.+108    	; 0x1fd2 <udc_process_setup+0x728>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f66:	a0 91 f1 20 	lds	r26, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    1f6a:	b0 91 f2 20 	lds	r27, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    1f6e:	ed 91       	ld	r30, X+
    1f70:	fc 91       	ld	r31, X
    1f72:	11 97       	sbiw	r26, 0x01	; 1
    1f74:	84 81       	ldd	r24, Z+4	; 0x04
    1f76:	88 23       	and	r24, r24
    1f78:	71 f1       	breq	.+92     	; 0x1fd6 <udc_process_setup+0x72c>
    1f7a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f7c:	ec 2f       	mov	r30, r28
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	12 96       	adiw	r26, 0x02	; 2
    1f86:	8d 91       	ld	r24, X+
    1f88:	9c 91       	ld	r25, X
    1f8a:	13 97       	sbiw	r26, 0x03	; 3
    1f8c:	e8 0f       	add	r30, r24
    1f8e:	f9 1f       	adc	r31, r25
    1f90:	00 81       	ld	r16, Z
    1f92:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f94:	d8 01       	movw	r26, r16
    1f96:	16 96       	adiw	r26, 0x06	; 6
    1f98:	ed 91       	ld	r30, X+
    1f9a:	fc 91       	ld	r31, X
    1f9c:	17 97       	sbiw	r26, 0x07	; 7
    1f9e:	09 95       	icall
    1fa0:	68 2f       	mov	r22, r24
    1fa2:	8c 2f       	mov	r24, r28
    1fa4:	78 db       	rcall	.-2320   	; 0x1696 <udc_update_iface_desc>
    1fa6:	88 23       	and	r24, r24
    1fa8:	f9 f0       	breq	.+62     	; 0x1fe8 <udc_process_setup+0x73e>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1faa:	d8 01       	movw	r26, r16
    1fac:	14 96       	adiw	r26, 0x04	; 4
    1fae:	ed 91       	ld	r30, X+
    1fb0:	fc 91       	ld	r31, X
    1fb2:	15 97       	sbiw	r26, 0x05	; 5
    1fb4:	09 95       	icall
    1fb6:	81 11       	cpse	r24, r1
    1fb8:	17 c0       	rjmp	.+46     	; 0x1fe8 <udc_process_setup+0x73e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1fba:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fbc:	a0 91 f1 20 	lds	r26, 0x20F1	; 0x8020f1 <udc_ptr_conf>
    1fc0:	b0 91 f2 20 	lds	r27, 0x20F2	; 0x8020f2 <udc_ptr_conf+0x1>
    1fc4:	ed 91       	ld	r30, X+
    1fc6:	fc 91       	ld	r31, X
    1fc8:	11 97       	sbiw	r26, 0x01	; 1
    1fca:	94 81       	ldd	r25, Z+4	; 0x04
    1fcc:	c9 17       	cp	r28, r25
    1fce:	b0 f2       	brcs	.-84     	; 0x1f7c <udc_process_setup+0x6d2>
    1fd0:	0b c0       	rjmp	.+22     	; 0x1fe8 <udc_process_setup+0x73e>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	09 c0       	rjmp	.+18     	; 0x1fe8 <udc_process_setup+0x73e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	07 c0       	rjmp	.+14     	; 0x1fe8 <udc_process_setup+0x73e>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	05 c0       	rjmp	.+10     	; 0x1fe8 <udc_process_setup+0x73e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	03 c0       	rjmp	.+6      	; 0x1fe8 <udc_process_setup+0x73e>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <udc_process_setup+0x73e>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	08 95       	ret

00001ff2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1ff2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1ff4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1ff6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1ff8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1ffa:	60 83       	st	Z, r22
	ret                             // Return to caller
    1ffc:	08 95       	ret

00001ffe <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1ffe:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2002:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2004:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2006:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    200a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    200c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2010:	08 95       	ret

00002012 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    2012:	81 11       	cpse	r24, r1
    2014:	22 c0       	rjmp	.+68     	; 0x205a <udd_sleep_mode+0x48>
    2016:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_b_idle>
    201a:	99 23       	and	r25, r25
    201c:	d9 f0       	breq	.+54     	; 0x2054 <udd_sleep_mode+0x42>
    201e:	90 91 d9 2f 	lds	r25, 0x2FD9	; 0x802fd9 <sleepmgr_locks+0x1>
    2022:	91 11       	cpse	r25, r1
    2024:	01 c0       	rjmp	.+2      	; 0x2028 <udd_sleep_mode+0x16>
    2026:	ff cf       	rjmp	.-2      	; 0x2026 <udd_sleep_mode+0x14>
    2028:	2f b7       	in	r18, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	e8 ed       	ldi	r30, 0xD8	; 216
    202e:	ff e2       	ldi	r31, 0x2F	; 47
    2030:	91 81       	ldd	r25, Z+1	; 0x01
    2032:	91 50       	subi	r25, 0x01	; 1
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	2f bf       	out	0x3f, r18	; 63
    2038:	0d c0       	rjmp	.+26     	; 0x2054 <udd_sleep_mode+0x42>
    203a:	90 91 d9 2f 	lds	r25, 0x2FD9	; 0x802fd9 <sleepmgr_locks+0x1>
    203e:	9f 3f       	cpi	r25, 0xFF	; 255
    2040:	09 f4       	brne	.+2      	; 0x2044 <udd_sleep_mode+0x32>
    2042:	ff cf       	rjmp	.-2      	; 0x2042 <udd_sleep_mode+0x30>
    2044:	2f b7       	in	r18, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	e8 ed       	ldi	r30, 0xD8	; 216
    204a:	ff e2       	ldi	r31, 0x2F	; 47
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	9f 5f       	subi	r25, 0xFF	; 255
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	2f bf       	out	0x3f, r18	; 63
    2054:	80 93 bc 23 	sts	0x23BC, r24	; 0x8023bc <udd_b_idle>
    2058:	08 95       	ret
    205a:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_b_idle>
    205e:	99 23       	and	r25, r25
    2060:	61 f3       	breq	.-40     	; 0x203a <udd_sleep_mode+0x28>
    2062:	f8 cf       	rjmp	.-16     	; 0x2054 <udd_sleep_mode+0x42>

00002064 <udd_ctrl_init>:
    2064:	0f 93       	push	r16
    2066:	e8 ec       	ldi	r30, 0xC8	; 200
    2068:	f4 e0       	ldi	r31, 0x04	; 4
    206a:	80 81       	ld	r24, Z
    206c:	8f 7d       	andi	r24, 0xDF	; 223
    206e:	80 83       	st	Z, r24
    2070:	80 81       	ld	r24, Z
    2072:	8f 7d       	andi	r24, 0xDF	; 223
    2074:	80 83       	st	Z, r24
    2076:	e0 e5       	ldi	r30, 0x50	; 80
    2078:	f3 e2       	ldi	r31, 0x23	; 35
    207a:	02 e0       	ldi	r16, 0x02	; 2
    207c:	05 93       	las	Z, r16
    207e:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <udd_sram+0x26>
    2082:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <udd_sram+0x27>
    2086:	00 e2       	ldi	r16, 0x20	; 32
    2088:	06 93       	lac	Z, r16
    208a:	00 e4       	ldi	r16, 0x40	; 64
    208c:	06 93       	lac	Z, r16
    208e:	e8 e4       	ldi	r30, 0x48	; 72
    2090:	f3 e2       	ldi	r31, 0x23	; 35
    2092:	00 e2       	ldi	r16, 0x20	; 32
    2094:	06 93       	lac	Z, r16
    2096:	00 e4       	ldi	r16, 0x40	; 64
    2098:	06 93       	lac	Z, r16
    209a:	ea ee       	ldi	r30, 0xEA	; 234
    209c:	f5 e2       	ldi	r31, 0x25	; 37
    209e:	14 86       	std	Z+12, r1	; 0x0c
    20a0:	15 86       	std	Z+13, r1	; 0x0d
    20a2:	16 86       	std	Z+14, r1	; 0x0e
    20a4:	17 86       	std	Z+15, r1	; 0x0f
    20a6:	12 86       	std	Z+10, r1	; 0x0a
    20a8:	13 86       	std	Z+11, r1	; 0x0b
    20aa:	10 92 2b 23 	sts	0x232B, r1	; 0x80232b <udd_ep_control_state>
    20ae:	0f 91       	pop	r16
    20b0:	08 95       	ret

000020b2 <udd_ctrl_stall_data>:
    20b2:	0f 93       	push	r16
    20b4:	85 e0       	ldi	r24, 0x05	; 5
    20b6:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <udd_ep_control_state>
    20ba:	e1 e5       	ldi	r30, 0x51	; 81
    20bc:	f3 e2       	ldi	r31, 0x23	; 35
    20be:	04 e0       	ldi	r16, 0x04	; 4
    20c0:	05 93       	las	Z, r16
    20c2:	e9 e4       	ldi	r30, 0x49	; 73
    20c4:	f3 e2       	ldi	r31, 0x23	; 35
    20c6:	04 e0       	ldi	r16, 0x04	; 4
    20c8:	05 93       	las	Z, r16
    20ca:	0f 91       	pop	r16
    20cc:	08 95       	ret

000020ce <udd_ctrl_send_zlp_in>:
    20ce:	0f 93       	push	r16
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <udd_ep_control_state>
    20d6:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <udd_sram+0x26>
    20da:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <udd_sram+0x27>
    20de:	e0 e5       	ldi	r30, 0x50	; 80
    20e0:	f3 e2       	ldi	r31, 0x23	; 35
    20e2:	02 e0       	ldi	r16, 0x02	; 2
    20e4:	06 93       	lac	Z, r16
    20e6:	0f 91       	pop	r16
    20e8:	08 95       	ret

000020ea <udd_ctrl_endofrequest>:
    20ea:	e0 91 f6 25 	lds	r30, 0x25F6	; 0x8025f6 <udd_g_ctrlreq+0xc>
    20ee:	f0 91 f7 25 	lds	r31, 0x25F7	; 0x8025f7 <udd_g_ctrlreq+0xd>
    20f2:	30 97       	sbiw	r30, 0x00	; 0
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <udd_ctrl_endofrequest+0xe>
    20f6:	09 95       	icall
    20f8:	08 95       	ret

000020fa <udd_ctrl_in_sent>:
    20fa:	0f 93       	push	r16
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <udd_ep_control_state>
    2104:	83 30       	cpi	r24, 0x03	; 3
    2106:	19 f4       	brne	.+6      	; 0x210e <udd_ctrl_in_sent+0x14>
    2108:	f0 df       	rcall	.-32     	; 0x20ea <udd_ctrl_endofrequest>
    210a:	ac df       	rcall	.-168    	; 0x2064 <udd_ctrl_init>
    210c:	5e c0       	rjmp	.+188    	; 0x21ca <udd_ctrl_in_sent+0xd0>
    210e:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <udd_ctrl_payload_nb_trans>
    2112:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>
    2116:	c0 91 f4 25 	lds	r28, 0x25F4	; 0x8025f4 <udd_g_ctrlreq+0xa>
    211a:	d0 91 f5 25 	lds	r29, 0x25F5	; 0x8025f5 <udd_g_ctrlreq+0xb>
    211e:	c8 1b       	sub	r28, r24
    2120:	d9 0b       	sbc	r29, r25
    2122:	71 f5       	brne	.+92     	; 0x2180 <udd_ctrl_in_sent+0x86>
    2124:	20 91 29 23 	lds	r18, 0x2329	; 0x802329 <udd_ctrl_prev_payload_nb_trans>
    2128:	30 91 2a 23 	lds	r19, 0x232A	; 0x80232a <udd_ctrl_prev_payload_nb_trans+0x1>
    212c:	82 0f       	add	r24, r18
    212e:	93 1f       	adc	r25, r19
    2130:	80 93 29 23 	sts	0x2329, r24	; 0x802329 <udd_ctrl_prev_payload_nb_trans>
    2134:	90 93 2a 23 	sts	0x232A, r25	; 0x80232a <udd_ctrl_prev_payload_nb_trans+0x1>
    2138:	20 91 f0 25 	lds	r18, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    213c:	30 91 f1 25 	lds	r19, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    2140:	82 17       	cp	r24, r18
    2142:	93 07       	cpc	r25, r19
    2144:	21 f0       	breq	.+8      	; 0x214e <udd_ctrl_in_sent+0x54>
    2146:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <b_shortpacket.5259>
    214a:	88 23       	and	r24, r24
    214c:	41 f0       	breq	.+16     	; 0x215e <udd_ctrl_in_sent+0x64>
    214e:	84 e0       	ldi	r24, 0x04	; 4
    2150:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <udd_ep_control_state>
    2154:	e8 e4       	ldi	r30, 0x48	; 72
    2156:	f3 e2       	ldi	r31, 0x23	; 35
    2158:	02 e0       	ldi	r16, 0x02	; 2
    215a:	06 93       	lac	Z, r16
    215c:	36 c0       	rjmp	.+108    	; 0x21ca <udd_ctrl_in_sent+0xd0>
    215e:	e0 91 f8 25 	lds	r30, 0x25F8	; 0x8025f8 <udd_g_ctrlreq+0xe>
    2162:	f0 91 f9 25 	lds	r31, 0x25F9	; 0x8025f9 <udd_g_ctrlreq+0xf>
    2166:	30 97       	sbiw	r30, 0x00	; 0
    2168:	99 f0       	breq	.+38     	; 0x2190 <udd_ctrl_in_sent+0x96>
    216a:	09 95       	icall
    216c:	88 23       	and	r24, r24
    216e:	81 f0       	breq	.+32     	; 0x2190 <udd_ctrl_in_sent+0x96>
    2170:	10 92 27 23 	sts	0x2327, r1	; 0x802327 <udd_ctrl_payload_nb_trans>
    2174:	10 92 28 23 	sts	0x2328, r1	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>
    2178:	c0 91 f4 25 	lds	r28, 0x25F4	; 0x8025f4 <udd_g_ctrlreq+0xa>
    217c:	d0 91 f5 25 	lds	r29, 0x25F5	; 0x8025f5 <udd_g_ctrlreq+0xb>
    2180:	c0 34       	cpi	r28, 0x40	; 64
    2182:	d1 05       	cpc	r29, r1
    2184:	28 f0       	brcs	.+10     	; 0x2190 <udd_ctrl_in_sent+0x96>
    2186:	10 92 fa 20 	sts	0x20FA, r1	; 0x8020fa <b_shortpacket.5259>
    218a:	c0 e4       	ldi	r28, 0x40	; 64
    218c:	d0 e0       	ldi	r29, 0x00	; 0
    218e:	03 c0       	rjmp	.+6      	; 0x2196 <udd_ctrl_in_sent+0x9c>
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 93 fa 20 	sts	0x20FA, r24	; 0x8020fa <b_shortpacket.5259>
    2196:	ec e2       	ldi	r30, 0x2C	; 44
    2198:	f3 e2       	ldi	r31, 0x23	; 35
    219a:	c6 a3       	std	Z+38, r28	; 0x26
    219c:	d7 a3       	std	Z+39, r29	; 0x27
    219e:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <udd_ctrl_payload_nb_trans>
    21a2:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>
    21a6:	20 91 f2 25 	lds	r18, 0x25F2	; 0x8025f2 <udd_g_ctrlreq+0x8>
    21aa:	30 91 f3 25 	lds	r19, 0x25F3	; 0x8025f3 <udd_g_ctrlreq+0x9>
    21ae:	28 0f       	add	r18, r24
    21b0:	39 1f       	adc	r19, r25
    21b2:	20 a7       	std	Z+40, r18	; 0x28
    21b4:	31 a7       	std	Z+41, r19	; 0x29
    21b6:	c8 0f       	add	r28, r24
    21b8:	d9 1f       	adc	r29, r25
    21ba:	c0 93 27 23 	sts	0x2327, r28	; 0x802327 <udd_ctrl_payload_nb_trans>
    21be:	d0 93 28 23 	sts	0x2328, r29	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>
    21c2:	e0 e5       	ldi	r30, 0x50	; 80
    21c4:	f3 e2       	ldi	r31, 0x23	; 35
    21c6:	02 e0       	ldi	r16, 0x02	; 2
    21c8:	06 93       	lac	Z, r16
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	0f 91       	pop	r16
    21d0:	08 95       	ret

000021d2 <udd_ep_get_size>:
    21d2:	fc 01       	movw	r30, r24
    21d4:	81 81       	ldd	r24, Z+1	; 0x01
    21d6:	e8 2f       	mov	r30, r24
    21d8:	e7 70       	andi	r30, 0x07	; 7
    21da:	8e 2f       	mov	r24, r30
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	fc 01       	movw	r30, r24
    21e0:	31 97       	sbiw	r30, 0x01	; 1
    21e2:	e7 30       	cpi	r30, 0x07	; 7
    21e4:	f1 05       	cpc	r31, r1
    21e6:	c0 f4       	brcc	.+48     	; 0x2218 <udd_ep_get_size+0x46>
    21e8:	e2 5e       	subi	r30, 0xE2	; 226
    21ea:	fe 4f       	sbci	r31, 0xFE	; 254
    21ec:	a2 c6       	rjmp	.+3396   	; 0x2f32 <__tablejump2__>
    21ee:	80 e1       	ldi	r24, 0x10	; 16
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	08 95       	ret
    21f4:	80 e2       	ldi	r24, 0x20	; 32
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	08 95       	ret
    21fa:	80 e4       	ldi	r24, 0x40	; 64
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	08 95       	ret
    2200:	80 e8       	ldi	r24, 0x80	; 128
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	08 95       	ret
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	08 95       	ret
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	92 e0       	ldi	r25, 0x02	; 2
    2210:	08 95       	ret
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	93 e0       	ldi	r25, 0x03	; 3
    2216:	08 95       	ret
    2218:	88 e0       	ldi	r24, 0x08	; 8
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	08 95       	ret

0000221e <udd_ep_get_job>:
    221e:	28 2f       	mov	r18, r24
    2220:	2f 70       	andi	r18, 0x0F	; 15
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	22 0f       	add	r18, r18
    2226:	33 1f       	adc	r19, r19
    2228:	08 2e       	mov	r0, r24
    222a:	00 0c       	add	r0, r0
    222c:	99 0b       	sbc	r25, r25
    222e:	88 27       	eor	r24, r24
    2230:	99 0f       	add	r25, r25
    2232:	88 1f       	adc	r24, r24
    2234:	99 27       	eor	r25, r25
    2236:	82 0f       	add	r24, r18
    2238:	93 1f       	adc	r25, r19
    223a:	02 97       	sbiw	r24, 0x02	; 2
    223c:	9c 01       	movw	r18, r24
    223e:	22 0f       	add	r18, r18
    2240:	33 1f       	adc	r19, r19
    2242:	22 0f       	add	r18, r18
    2244:	33 1f       	adc	r19, r19
    2246:	22 0f       	add	r18, r18
    2248:	33 1f       	adc	r19, r19
    224a:	82 0f       	add	r24, r18
    224c:	93 1f       	adc	r25, r19
    224e:	85 58       	subi	r24, 0x85	; 133
    2250:	9d 4d       	sbci	r25, 0xDD	; 221
    2252:	08 95       	ret

00002254 <udd_ctrl_interrupt_tc_setup>:
    2254:	0f 93       	push	r16
    2256:	cf 93       	push	r28
    2258:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    225c:	80 ff       	sbrs	r24, 0
    225e:	62 c0       	rjmp	.+196    	; 0x2324 <udd_ctrl_interrupt_tc_setup+0xd0>
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2266:	e8 e4       	ldi	r30, 0x48	; 72
    2268:	f3 e2       	ldi	r31, 0x23	; 35
    226a:	00 e8       	ldi	r16, 0x80	; 128
    226c:	06 93       	lac	Z, r16
    226e:	e0 e5       	ldi	r30, 0x50	; 80
    2270:	f3 e2       	ldi	r31, 0x23	; 35
    2272:	00 e8       	ldi	r16, 0x80	; 128
    2274:	06 93       	lac	Z, r16
    2276:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    227a:	e8 e4       	ldi	r30, 0x48	; 72
    227c:	f3 e2       	ldi	r31, 0x23	; 35
    227e:	00 e1       	ldi	r16, 0x10	; 16
    2280:	06 93       	lac	Z, r16
    2282:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <udd_ep_control_state>
    2286:	88 23       	and	r24, r24
    2288:	29 f0       	breq	.+10     	; 0x2294 <udd_ctrl_interrupt_tc_setup+0x40>
    228a:	83 50       	subi	r24, 0x03	; 3
    228c:	82 30       	cpi	r24, 0x02	; 2
    228e:	08 f4       	brcc	.+2      	; 0x2292 <udd_ctrl_interrupt_tc_setup+0x3e>
    2290:	2c df       	rcall	.-424    	; 0x20ea <udd_ctrl_endofrequest>
    2292:	e8 de       	rcall	.-560    	; 0x2064 <udd_ctrl_init>
    2294:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <udd_sram+0x1e>
    2298:	90 91 4b 23 	lds	r25, 0x234B	; 0x80234b <udd_sram+0x1f>
    229c:	08 97       	sbiw	r24, 0x08	; 8
    229e:	09 f0       	breq	.+2      	; 0x22a2 <udd_ctrl_interrupt_tc_setup+0x4e>
    22a0:	43 c0       	rjmp	.+134    	; 0x2328 <udd_ctrl_interrupt_tc_setup+0xd4>
    22a2:	88 e0       	ldi	r24, 0x08	; 8
    22a4:	e7 ee       	ldi	r30, 0xE7	; 231
    22a6:	f2 e2       	ldi	r31, 0x22	; 34
    22a8:	aa ee       	ldi	r26, 0xEA	; 234
    22aa:	b5 e2       	ldi	r27, 0x25	; 37
    22ac:	01 90       	ld	r0, Z+
    22ae:	0d 92       	st	X+, r0
    22b0:	8a 95       	dec	r24
    22b2:	e1 f7       	brne	.-8      	; 0x22ac <udd_ctrl_interrupt_tc_setup+0x58>
    22b4:	e8 ec       	ldi	r30, 0xC8	; 200
    22b6:	f4 e0       	ldi	r31, 0x04	; 4
    22b8:	80 81       	ld	r24, Z
    22ba:	80 62       	ori	r24, 0x20	; 32
    22bc:	80 83       	st	Z, r24
    22be:	80 81       	ld	r24, Z
    22c0:	80 62       	ori	r24, 0x20	; 32
    22c2:	80 83       	st	Z, r24
    22c4:	f2 da       	rcall	.-2588   	; 0x18aa <udc_process_setup>
    22c6:	c8 2f       	mov	r28, r24
    22c8:	81 11       	cpse	r24, r1
    22ca:	03 c0       	rjmp	.+6      	; 0x22d2 <udd_ctrl_interrupt_tc_setup+0x7e>
    22cc:	f2 de       	rcall	.-540    	; 0x20b2 <udd_ctrl_stall_data>
    22ce:	c1 e0       	ldi	r28, 0x01	; 1
    22d0:	2c c0       	rjmp	.+88     	; 0x232a <udd_ctrl_interrupt_tc_setup+0xd6>
    22d2:	80 91 ea 25 	lds	r24, 0x25EA	; 0x8025ea <udd_g_ctrlreq>
    22d6:	88 23       	and	r24, r24
    22d8:	6c f4       	brge	.+26     	; 0x22f4 <udd_ctrl_interrupt_tc_setup+0xa0>
    22da:	10 92 29 23 	sts	0x2329, r1	; 0x802329 <udd_ctrl_prev_payload_nb_trans>
    22de:	10 92 2a 23 	sts	0x232A, r1	; 0x80232a <udd_ctrl_prev_payload_nb_trans+0x1>
    22e2:	10 92 27 23 	sts	0x2327, r1	; 0x802327 <udd_ctrl_payload_nb_trans>
    22e6:	10 92 28 23 	sts	0x2328, r1	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>
    22ea:	82 e0       	ldi	r24, 0x02	; 2
    22ec:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <udd_ep_control_state>
    22f0:	04 df       	rcall	.-504    	; 0x20fa <udd_ctrl_in_sent>
    22f2:	1b c0       	rjmp	.+54     	; 0x232a <udd_ctrl_interrupt_tc_setup+0xd6>
    22f4:	80 91 f0 25 	lds	r24, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    22f8:	90 91 f1 25 	lds	r25, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    22fc:	89 2b       	or	r24, r25
    22fe:	11 f4       	brne	.+4      	; 0x2304 <udd_ctrl_interrupt_tc_setup+0xb0>
    2300:	e6 de       	rcall	.-564    	; 0x20ce <udd_ctrl_send_zlp_in>
    2302:	13 c0       	rjmp	.+38     	; 0x232a <udd_ctrl_interrupt_tc_setup+0xd6>
    2304:	10 92 29 23 	sts	0x2329, r1	; 0x802329 <udd_ctrl_prev_payload_nb_trans>
    2308:	10 92 2a 23 	sts	0x232A, r1	; 0x80232a <udd_ctrl_prev_payload_nb_trans+0x1>
    230c:	10 92 27 23 	sts	0x2327, r1	; 0x802327 <udd_ctrl_payload_nb_trans>
    2310:	10 92 28 23 	sts	0x2328, r1	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <udd_ep_control_state>
    231a:	e8 e4       	ldi	r30, 0x48	; 72
    231c:	f3 e2       	ldi	r31, 0x23	; 35
    231e:	02 e0       	ldi	r16, 0x02	; 2
    2320:	06 93       	lac	Z, r16
    2322:	03 c0       	rjmp	.+6      	; 0x232a <udd_ctrl_interrupt_tc_setup+0xd6>
    2324:	c0 e0       	ldi	r28, 0x00	; 0
    2326:	01 c0       	rjmp	.+2      	; 0x232a <udd_ctrl_interrupt_tc_setup+0xd6>
    2328:	c1 e0       	ldi	r28, 0x01	; 1
    232a:	8c 2f       	mov	r24, r28
    232c:	cf 91       	pop	r28
    232e:	0f 91       	pop	r16
    2330:	08 95       	ret

00002332 <udd_ep_trans_complet>:
    2332:	8f 92       	push	r8
    2334:	9f 92       	push	r9
    2336:	af 92       	push	r10
    2338:	bf 92       	push	r11
    233a:	df 92       	push	r13
    233c:	ef 92       	push	r14
    233e:	ff 92       	push	r15
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	d8 2e       	mov	r13, r24
    234a:	69 df       	rcall	.-302    	; 0x221e <udd_ep_get_job>
    234c:	8c 01       	movw	r16, r24
    234e:	bd 2c       	mov	r11, r13
    2350:	bb 1c       	adc	r11, r11
    2352:	bb 24       	eor	r11, r11
    2354:	bb 1c       	adc	r11, r11
    2356:	cd 2d       	mov	r28, r13
    2358:	cf 70       	andi	r28, 0x0F	; 15
    235a:	d0 e0       	ldi	r29, 0x00	; 0
    235c:	cc 0f       	add	r28, r28
    235e:	dd 1f       	adc	r29, r29
    2360:	cb 0d       	add	r28, r11
    2362:	d1 1d       	adc	r29, r1
    2364:	ce 01       	movw	r24, r28
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	9c 01       	movw	r18, r24
    2374:	28 5b       	subi	r18, 0xB8	; 184
    2376:	3c 4d       	sbci	r19, 0xDC	; 220
    2378:	79 01       	movw	r14, r18
    237a:	c9 01       	movw	r24, r18
    237c:	2a df       	rcall	.-428    	; 0x21d2 <udd_ep_get_size>
    237e:	4c 01       	movw	r8, r24
    2380:	bb 20       	and	r11, r11
    2382:	09 f4       	brne	.+2      	; 0x2386 <udd_ep_trans_complet+0x54>
    2384:	79 c0       	rjmp	.+242    	; 0x2478 <udd_ep_trans_complet+0x146>
    2386:	fe 01       	movw	r30, r28
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	e4 5d       	subi	r30, 0xD4	; 212
    2396:	fc 4d       	sbci	r31, 0xDC	; 220
    2398:	22 a1       	ldd	r18, Z+34	; 0x22
    239a:	33 a1       	ldd	r19, Z+35	; 0x23
    239c:	d8 01       	movw	r26, r16
    239e:	15 96       	adiw	r26, 0x05	; 5
    23a0:	8d 91       	ld	r24, X+
    23a2:	9c 91       	ld	r25, X
    23a4:	16 97       	sbiw	r26, 0x06	; 6
    23a6:	82 0f       	add	r24, r18
    23a8:	93 1f       	adc	r25, r19
    23aa:	15 96       	adiw	r26, 0x05	; 5
    23ac:	8d 93       	st	X+, r24
    23ae:	9c 93       	st	X, r25
    23b0:	16 97       	sbiw	r26, 0x06	; 6
    23b2:	13 96       	adiw	r26, 0x03	; 3
    23b4:	2d 91       	ld	r18, X+
    23b6:	3c 91       	ld	r19, X
    23b8:	14 97       	sbiw	r26, 0x04	; 4
    23ba:	82 17       	cp	r24, r18
    23bc:	93 07       	cpc	r25, r19
    23be:	09 f4       	brne	.+2      	; 0x23c2 <udd_ep_trans_complet+0x90>
    23c0:	45 c0       	rjmp	.+138    	; 0x244c <udd_ep_trans_complet+0x11a>
    23c2:	28 1b       	sub	r18, r24
    23c4:	39 0b       	sbc	r19, r25
    23c6:	21 15       	cp	r18, r1
    23c8:	b4 e0       	ldi	r27, 0x04	; 4
    23ca:	3b 07       	cpc	r19, r27
    23cc:	38 f0       	brcs	.+14     	; 0x23dc <udd_ep_trans_complet+0xaa>
    23ce:	2f ef       	ldi	r18, 0xFF	; 255
    23d0:	33 e0       	ldi	r19, 0x03	; 3
    23d2:	c9 01       	movw	r24, r18
    23d4:	b4 01       	movw	r22, r8
    23d6:	86 d5       	rcall	.+2828   	; 0x2ee4 <__udivmodhi4>
    23d8:	28 1b       	sub	r18, r24
    23da:	39 0b       	sbc	r19, r25
    23dc:	f8 01       	movw	r30, r16
    23de:	80 81       	ld	r24, Z
    23e0:	81 ff       	sbrs	r24, 1
    23e2:	09 c0       	rjmp	.+18     	; 0x23f6 <udd_ep_trans_complet+0xc4>
    23e4:	c9 01       	movw	r24, r18
    23e6:	b4 01       	movw	r22, r8
    23e8:	7d d5       	rcall	.+2810   	; 0x2ee4 <__udivmodhi4>
    23ea:	41 e0       	ldi	r20, 0x01	; 1
    23ec:	89 2b       	or	r24, r25
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <udd_ep_trans_complet+0xc0>
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	84 2f       	mov	r24, r20
    23f4:	01 c0       	rjmp	.+2      	; 0x23f8 <udd_ep_trans_complet+0xc6>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	d8 01       	movw	r26, r16
    23fa:	9c 91       	ld	r25, X
    23fc:	80 fb       	bst	r24, 0
    23fe:	91 f9       	bld	r25, 1
    2400:	9c 93       	st	X, r25
    2402:	fe 01       	movw	r30, r28
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	ee 0f       	add	r30, r30
    240e:	ff 1f       	adc	r31, r31
    2410:	e4 5d       	subi	r30, 0xD4	; 212
    2412:	fc 4d       	sbci	r31, 0xDC	; 220
    2414:	12 a2       	std	Z+34, r1	; 0x22
    2416:	13 a2       	std	Z+35, r1	; 0x23
    2418:	26 8f       	std	Z+30, r18	; 0x1e
    241a:	37 8f       	std	Z+31, r19	; 0x1f
    241c:	11 96       	adiw	r26, 0x01	; 1
    241e:	2d 91       	ld	r18, X+
    2420:	3c 91       	ld	r19, X
    2422:	12 97       	sbiw	r26, 0x02	; 2
    2424:	15 96       	adiw	r26, 0x05	; 5
    2426:	8d 91       	ld	r24, X+
    2428:	9c 91       	ld	r25, X
    242a:	16 97       	sbiw	r26, 0x06	; 6
    242c:	82 0f       	add	r24, r18
    242e:	93 1f       	adc	r25, r19
    2430:	cc 0f       	add	r28, r28
    2432:	dd 1f       	adc	r29, r29
    2434:	cc 0f       	add	r28, r28
    2436:	dd 1f       	adc	r29, r29
    2438:	cc 0f       	add	r28, r28
    243a:	dd 1f       	adc	r29, r29
    243c:	c4 5b       	subi	r28, 0xB4	; 180
    243e:	dc 4d       	sbci	r29, 0xDC	; 220
    2440:	88 83       	st	Y, r24
    2442:	99 83       	std	Y+1, r25	; 0x01
    2444:	f7 01       	movw	r30, r14
    2446:	02 e0       	ldi	r16, 0x02	; 2
    2448:	06 93       	lac	Z, r16
    244a:	e4 c0       	rjmp	.+456    	; 0x2614 <udd_ep_trans_complet+0x2e2>
    244c:	d8 01       	movw	r26, r16
    244e:	8c 91       	ld	r24, X
    2450:	81 ff       	sbrs	r24, 1
    2452:	cd c0       	rjmp	.+410    	; 0x25ee <udd_ep_trans_complet+0x2bc>
    2454:	8d 7f       	andi	r24, 0xFD	; 253
    2456:	8c 93       	st	X, r24
    2458:	cc 0f       	add	r28, r28
    245a:	dd 1f       	adc	r29, r29
    245c:	cc 0f       	add	r28, r28
    245e:	dd 1f       	adc	r29, r29
    2460:	cc 0f       	add	r28, r28
    2462:	dd 1f       	adc	r29, r29
    2464:	c4 5d       	subi	r28, 0xD4	; 212
    2466:	dc 4d       	sbci	r29, 0xDC	; 220
    2468:	1a a2       	std	Y+34, r1	; 0x22
    246a:	1b a2       	std	Y+35, r1	; 0x23
    246c:	1e 8e       	std	Y+30, r1	; 0x1e
    246e:	1f 8e       	std	Y+31, r1	; 0x1f
    2470:	f7 01       	movw	r30, r14
    2472:	02 e0       	ldi	r16, 0x02	; 2
    2474:	06 93       	lac	Z, r16
    2476:	ce c0       	rjmp	.+412    	; 0x2614 <udd_ep_trans_complet+0x2e2>
    2478:	fe 01       	movw	r30, r28
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	e4 5d       	subi	r30, 0xD4	; 212
    2488:	fc 4d       	sbci	r31, 0xDC	; 220
    248a:	a6 8c       	ldd	r10, Z+30	; 0x1e
    248c:	b7 8c       	ldd	r11, Z+31	; 0x1f
    248e:	d8 01       	movw	r26, r16
    2490:	8c 91       	ld	r24, X
    2492:	82 ff       	sbrs	r24, 2
    2494:	19 c0       	rjmp	.+50     	; 0x24c8 <udd_ep_trans_complet+0x196>
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	ed 91       	ld	r30, X+
    249a:	fc 91       	ld	r31, X
    249c:	12 97       	sbiw	r26, 0x02	; 2
    249e:	15 96       	adiw	r26, 0x05	; 5
    24a0:	2d 91       	ld	r18, X+
    24a2:	3c 91       	ld	r19, X
    24a4:	16 97       	sbiw	r26, 0x06	; 6
    24a6:	13 96       	adiw	r26, 0x03	; 3
    24a8:	8d 91       	ld	r24, X+
    24aa:	9c 91       	ld	r25, X
    24ac:	14 97       	sbiw	r26, 0x04	; 4
    24ae:	b4 01       	movw	r22, r8
    24b0:	19 d5       	rcall	.+2610   	; 0x2ee4 <__udivmodhi4>
    24b2:	b0 e4       	ldi	r27, 0x40	; 64
    24b4:	db 9e       	mul	r13, r27
    24b6:	b0 01       	movw	r22, r0
    24b8:	11 24       	eor	r1, r1
    24ba:	65 54       	subi	r22, 0x45	; 69
    24bc:	7f 4d       	sbci	r23, 0xDF	; 223
    24be:	ac 01       	movw	r20, r24
    24c0:	cf 01       	movw	r24, r30
    24c2:	82 0f       	add	r24, r18
    24c4:	93 1f       	adc	r25, r19
    24c6:	4a d5       	rcall	.+2708   	; 0x2f5c <memcpy>
    24c8:	f8 01       	movw	r30, r16
    24ca:	25 81       	ldd	r18, Z+5	; 0x05
    24cc:	36 81       	ldd	r19, Z+6	; 0x06
    24ce:	2a 0d       	add	r18, r10
    24d0:	3b 1d       	adc	r19, r11
    24d2:	25 83       	std	Z+5, r18	; 0x05
    24d4:	36 83       	std	Z+6, r19	; 0x06
    24d6:	83 81       	ldd	r24, Z+3	; 0x03
    24d8:	94 81       	ldd	r25, Z+4	; 0x04
    24da:	82 17       	cp	r24, r18
    24dc:	93 07       	cpc	r25, r19
    24de:	68 f4       	brcc	.+26     	; 0x24fa <udd_ep_trans_complet+0x1c8>
    24e0:	85 83       	std	Z+5, r24	; 0x05
    24e2:	96 83       	std	Z+6, r25	; 0x06
    24e4:	cc 0f       	add	r28, r28
    24e6:	dd 1f       	adc	r29, r29
    24e8:	cc 0f       	add	r28, r28
    24ea:	dd 1f       	adc	r29, r29
    24ec:	cc 0f       	add	r28, r28
    24ee:	dd 1f       	adc	r29, r29
    24f0:	c4 5d       	subi	r28, 0xD4	; 212
    24f2:	dc 4d       	sbci	r29, 0xDC	; 220
    24f4:	8a a1       	ldd	r24, Y+34	; 0x22
    24f6:	9b a1       	ldd	r25, Y+35	; 0x23
    24f8:	7a c0       	rjmp	.+244    	; 0x25ee <udd_ep_trans_complet+0x2bc>
    24fa:	fe 01       	movw	r30, r28
    24fc:	ee 0f       	add	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ee 0f       	add	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	e4 5d       	subi	r30, 0xD4	; 212
    250a:	fc 4d       	sbci	r31, 0xDC	; 220
    250c:	42 a1       	ldd	r20, Z+34	; 0x22
    250e:	53 a1       	ldd	r21, Z+35	; 0x23
    2510:	4a 15       	cp	r20, r10
    2512:	5b 05       	cpc	r21, r11
    2514:	09 f0       	breq	.+2      	; 0x2518 <udd_ep_trans_complet+0x1e6>
    2516:	6b c0       	rjmp	.+214    	; 0x25ee <udd_ep_trans_complet+0x2bc>
    2518:	28 17       	cp	r18, r24
    251a:	39 07       	cpc	r19, r25
    251c:	09 f4       	brne	.+2      	; 0x2520 <udd_ep_trans_complet+0x1ee>
    251e:	67 c0       	rjmp	.+206    	; 0x25ee <udd_ep_trans_complet+0x2bc>
    2520:	ac 01       	movw	r20, r24
    2522:	42 1b       	sub	r20, r18
    2524:	53 0b       	sbc	r21, r19
    2526:	9a 01       	movw	r18, r20
    2528:	21 15       	cp	r18, r1
    252a:	54 e0       	ldi	r21, 0x04	; 4
    252c:	35 07       	cpc	r19, r21
    252e:	50 f0       	brcs	.+20     	; 0x2544 <udd_ep_trans_complet+0x212>
    2530:	2f ef       	ldi	r18, 0xFF	; 255
    2532:	33 e0       	ldi	r19, 0x03	; 3
    2534:	c9 01       	movw	r24, r18
    2536:	b4 01       	movw	r22, r8
    2538:	d5 d4       	rcall	.+2474   	; 0x2ee4 <__udivmodhi4>
    253a:	d9 01       	movw	r26, r18
    253c:	a8 1b       	sub	r26, r24
    253e:	b9 0b       	sbc	r27, r25
    2540:	cd 01       	movw	r24, r26
    2542:	07 c0       	rjmp	.+14     	; 0x2552 <udd_ep_trans_complet+0x220>
    2544:	c9 01       	movw	r24, r18
    2546:	b4 01       	movw	r22, r8
    2548:	cd d4       	rcall	.+2458   	; 0x2ee4 <__udivmodhi4>
    254a:	f9 01       	movw	r30, r18
    254c:	e8 1b       	sub	r30, r24
    254e:	f9 0b       	sbc	r31, r25
    2550:	cf 01       	movw	r24, r30
    2552:	fe 01       	movw	r30, r28
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	ee 0f       	add	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	e4 5d       	subi	r30, 0xD4	; 212
    2562:	fc 4d       	sbci	r31, 0xDC	; 220
    2564:	16 8e       	std	Z+30, r1	; 0x1e
    2566:	17 8e       	std	Z+31, r1	; 0x1f
    2568:	88 15       	cp	r24, r8
    256a:	99 05       	cpc	r25, r9
    256c:	00 f5       	brcc	.+64     	; 0x25ae <udd_ep_trans_complet+0x27c>
    256e:	d8 01       	movw	r26, r16
    2570:	8c 91       	ld	r24, X
    2572:	84 60       	ori	r24, 0x04	; 4
    2574:	8c 93       	st	X, r24
    2576:	b0 e4       	ldi	r27, 0x40	; 64
    2578:	db 9e       	mul	r13, r27
    257a:	c0 01       	movw	r24, r0
    257c:	11 24       	eor	r1, r1
    257e:	85 54       	subi	r24, 0x45	; 69
    2580:	9f 4d       	sbci	r25, 0xDF	; 223
    2582:	fe 01       	movw	r30, r28
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	ee 0f       	add	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	ee 0f       	add	r30, r30
    258e:	ff 1f       	adc	r31, r31
    2590:	e4 5b       	subi	r30, 0xB4	; 180
    2592:	fc 4d       	sbci	r31, 0xDC	; 220
    2594:	80 83       	st	Z, r24
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	cc 0f       	add	r28, r28
    259a:	dd 1f       	adc	r29, r29
    259c:	cc 0f       	add	r28, r28
    259e:	dd 1f       	adc	r29, r29
    25a0:	cc 0f       	add	r28, r28
    25a2:	dd 1f       	adc	r29, r29
    25a4:	c4 5d       	subi	r28, 0xD4	; 212
    25a6:	dc 4d       	sbci	r29, 0xDC	; 220
    25a8:	8a a2       	std	Y+34, r8	; 0x22
    25aa:	9b a2       	std	Y+35, r9	; 0x23
    25ac:	1c c0       	rjmp	.+56     	; 0x25e6 <udd_ep_trans_complet+0x2b4>
    25ae:	f8 01       	movw	r30, r16
    25b0:	41 81       	ldd	r20, Z+1	; 0x01
    25b2:	52 81       	ldd	r21, Z+2	; 0x02
    25b4:	25 81       	ldd	r18, Z+5	; 0x05
    25b6:	36 81       	ldd	r19, Z+6	; 0x06
    25b8:	24 0f       	add	r18, r20
    25ba:	35 1f       	adc	r19, r21
    25bc:	fe 01       	movw	r30, r28
    25be:	ee 0f       	add	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	e4 5b       	subi	r30, 0xB4	; 180
    25cc:	fc 4d       	sbci	r31, 0xDC	; 220
    25ce:	20 83       	st	Z, r18
    25d0:	31 83       	std	Z+1, r19	; 0x01
    25d2:	cc 0f       	add	r28, r28
    25d4:	dd 1f       	adc	r29, r29
    25d6:	cc 0f       	add	r28, r28
    25d8:	dd 1f       	adc	r29, r29
    25da:	cc 0f       	add	r28, r28
    25dc:	dd 1f       	adc	r29, r29
    25de:	c4 5d       	subi	r28, 0xD4	; 212
    25e0:	dc 4d       	sbci	r29, 0xDC	; 220
    25e2:	8a a3       	std	Y+34, r24	; 0x22
    25e4:	9b a3       	std	Y+35, r25	; 0x23
    25e6:	f7 01       	movw	r30, r14
    25e8:	02 e0       	ldi	r16, 0x02	; 2
    25ea:	06 93       	lac	Z, r16
    25ec:	13 c0       	rjmp	.+38     	; 0x2614 <udd_ep_trans_complet+0x2e2>
    25ee:	d8 01       	movw	r26, r16
    25f0:	8c 91       	ld	r24, X
    25f2:	80 ff       	sbrs	r24, 0
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <udd_ep_trans_complet+0x2e2>
    25f6:	8e 7f       	andi	r24, 0xFE	; 254
    25f8:	8c 93       	st	X, r24
    25fa:	17 96       	adiw	r26, 0x07	; 7
    25fc:	ed 91       	ld	r30, X+
    25fe:	fc 91       	ld	r31, X
    2600:	18 97       	sbiw	r26, 0x08	; 8
    2602:	30 97       	sbiw	r30, 0x00	; 0
    2604:	39 f0       	breq	.+14     	; 0x2614 <udd_ep_trans_complet+0x2e2>
    2606:	15 96       	adiw	r26, 0x05	; 5
    2608:	6d 91       	ld	r22, X+
    260a:	7c 91       	ld	r23, X
    260c:	16 97       	sbiw	r26, 0x06	; 6
    260e:	4d 2d       	mov	r20, r13
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	09 95       	icall
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	ff 90       	pop	r15
    261e:	ef 90       	pop	r14
    2620:	df 90       	pop	r13
    2622:	bf 90       	pop	r11
    2624:	af 90       	pop	r10
    2626:	9f 90       	pop	r9
    2628:	8f 90       	pop	r8
    262a:	08 95       	ret

0000262c <udd_attach>:
    262c:	cf 93       	push	r28
    262e:	cf b7       	in	r28, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	ee dc       	rcall	.-1572   	; 0x2012 <udd_sleep_mode>
    2636:	ea ec       	ldi	r30, 0xCA	; 202
    2638:	f4 e0       	ldi	r31, 0x04	; 4
    263a:	80 e4       	ldi	r24, 0x40	; 64
    263c:	80 83       	st	Z, r24
    263e:	80 e2       	ldi	r24, 0x20	; 32
    2640:	80 83       	st	Z, r24
    2642:	e1 ec       	ldi	r30, 0xC1	; 193
    2644:	f4 e0       	ldi	r31, 0x04	; 4
    2646:	80 81       	ld	r24, Z
    2648:	81 60       	ori	r24, 0x01	; 1
    264a:	80 83       	st	Z, r24
    264c:	a9 ec       	ldi	r26, 0xC9	; 201
    264e:	b4 e0       	ldi	r27, 0x04	; 4
    2650:	8c 91       	ld	r24, X
    2652:	82 60       	ori	r24, 0x02	; 2
    2654:	8c 93       	st	X, r24
    2656:	e8 ec       	ldi	r30, 0xC8	; 200
    2658:	f4 e0       	ldi	r31, 0x04	; 4
    265a:	80 81       	ld	r24, Z
    265c:	80 64       	ori	r24, 0x40	; 64
    265e:	80 83       	st	Z, r24
    2660:	8c 91       	ld	r24, X
    2662:	81 60       	ori	r24, 0x01	; 1
    2664:	8c 93       	st	X, r24
    2666:	80 81       	ld	r24, Z
    2668:	80 68       	ori	r24, 0x80	; 128
    266a:	80 83       	st	Z, r24
    266c:	cf bf       	out	0x3f, r28	; 63
    266e:	cf 91       	pop	r28
    2670:	08 95       	ret

00002672 <udd_enable>:
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	c0 e6       	ldi	r28, 0x60	; 96
    2678:	d0 e0       	ldi	r29, 0x00	; 0
    267a:	18 82       	st	Y, r1
    267c:	80 e3       	ldi	r24, 0x30	; 48
    267e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <sysclk_enable_usb>
    2682:	e0 ec       	ldi	r30, 0xC0	; 192
    2684:	f4 e0       	ldi	r31, 0x04	; 4
    2686:	80 81       	ld	r24, Z
    2688:	80 64       	ori	r24, 0x40	; 64
    268a:	80 83       	st	Z, r24
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	88 83       	st	Y, r24
    2690:	cf b7       	in	r28, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	fc 01       	movw	r30, r24
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	e4 5d       	subi	r30, 0xD4	; 212
    26a8:	fc 4d       	sbci	r31, 0xDC	; 220
    26aa:	15 8e       	std	Z+29, r1	; 0x1d
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	8e 30       	cpi	r24, 0x0E	; 14
    26b0:	91 05       	cpc	r25, r1
    26b2:	91 f7       	brne	.-28     	; 0x2698 <udd_enable+0x26>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	fc 01       	movw	r30, r24
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	ee 0f       	add	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	ee 0f       	add	r30, r30
    26c4:	ff 1f       	adc	r31, r31
    26c6:	e8 0f       	add	r30, r24
    26c8:	f9 1f       	adc	r31, r25
    26ca:	e5 58       	subi	r30, 0x85	; 133
    26cc:	fd 4d       	sbci	r31, 0xDD	; 221
    26ce:	20 81       	ld	r18, Z
    26d0:	2e 7f       	andi	r18, 0xFE	; 254
    26d2:	20 83       	st	Z, r18
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	8c 30       	cpi	r24, 0x0C	; 12
    26d8:	91 05       	cpc	r25, r1
    26da:	71 f7       	brne	.-36     	; 0x26b8 <udd_enable+0x46>
    26dc:	6a e1       	ldi	r22, 0x1A	; 26
    26de:	70 e0       	ldi	r23, 0x00	; 0
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	8d dc       	rcall	.-1766   	; 0x1ffe <nvm_read_byte>
    26e4:	8f 3f       	cpi	r24, 0xFF	; 255
    26e6:	19 f0       	breq	.+6      	; 0x26ee <udd_enable+0x7c>
    26e8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <udd_enable+0x82>
    26ee:	8f e1       	ldi	r24, 0x1F	; 31
    26f0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    26f4:	6b e1       	ldi	r22, 0x1B	; 27
    26f6:	70 e0       	ldi	r23, 0x00	; 0
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	81 dc       	rcall	.-1790   	; 0x1ffe <nvm_read_byte>
    26fc:	8f 3f       	cpi	r24, 0xFF	; 255
    26fe:	19 f0       	breq	.+6      	; 0x2706 <udd_enable+0x94>
    2700:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2704:	03 c0       	rjmp	.+6      	; 0x270c <udd_enable+0x9a>
    2706:	8f e1       	ldi	r24, 0x1F	; 31
    2708:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    270c:	e0 ec       	ldi	r30, 0xC0	; 192
    270e:	f4 e0       	ldi	r31, 0x04	; 4
    2710:	80 81       	ld	r24, Z
    2712:	86 60       	ori	r24, 0x06	; 6
    2714:	80 83       	st	Z, r24
    2716:	80 81       	ld	r24, Z
    2718:	80 68       	ori	r24, 0x80	; 128
    271a:	80 83       	st	Z, r24
    271c:	80 81       	ld	r24, Z
    271e:	80 61       	ori	r24, 0x10	; 16
    2720:	80 83       	st	Z, r24
    2722:	88 e4       	ldi	r24, 0x48	; 72
    2724:	93 e2       	ldi	r25, 0x23	; 35
    2726:	86 83       	std	Z+6, r24	; 0x06
    2728:	97 83       	std	Z+7, r25	; 0x07
    272a:	80 81       	ld	r24, Z
    272c:	80 62       	ori	r24, 0x20	; 32
    272e:	80 83       	st	Z, r24
    2730:	8f ef       	ldi	r24, 0xFF	; 255
    2732:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2736:	e8 ec       	ldi	r30, 0xC8	; 200
    2738:	f4 e0       	ldi	r31, 0x04	; 4
    273a:	80 81       	ld	r24, Z
    273c:	82 60       	ori	r24, 0x02	; 2
    273e:	80 83       	st	Z, r24
    2740:	10 92 bc 23 	sts	0x23BC, r1	; 0x8023bc <udd_b_idle>
    2744:	80 91 dd 2f 	lds	r24, 0x2FDD	; 0x802fdd <sleepmgr_locks+0x5>
    2748:	8f 3f       	cpi	r24, 0xFF	; 255
    274a:	09 f4       	brne	.+2      	; 0x274e <udd_enable+0xdc>
    274c:	ff cf       	rjmp	.-2      	; 0x274c <udd_enable+0xda>
    274e:	9f b7       	in	r25, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	e8 ed       	ldi	r30, 0xD8	; 216
    2754:	ff e2       	ldi	r31, 0x2F	; 47
    2756:	85 81       	ldd	r24, Z+5	; 0x05
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	85 83       	std	Z+5, r24	; 0x05
    275c:	9f bf       	out	0x3f, r25	; 63
    275e:	66 df       	rcall	.-308    	; 0x262c <udd_attach>
    2760:	cf bf       	out	0x3f, r28	; 63
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	08 95       	ret

00002768 <udd_set_address>:
    2768:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    276c:	08 95       	ret

0000276e <udd_getaddress>:
    276e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2772:	08 95       	ret

00002774 <udd_set_setup_payload>:
    2774:	ea ee       	ldi	r30, 0xEA	; 234
    2776:	f5 e2       	ldi	r31, 0x25	; 37
    2778:	80 87       	std	Z+8, r24	; 0x08
    277a:	91 87       	std	Z+9, r25	; 0x09
    277c:	62 87       	std	Z+10, r22	; 0x0a
    277e:	73 87       	std	Z+11, r23	; 0x0b
    2780:	08 95       	ret

00002782 <udd_ep_alloc>:
    2782:	28 2f       	mov	r18, r24
    2784:	2f 70       	andi	r18, 0x0F	; 15
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	22 0f       	add	r18, r18
    278a:	33 1f       	adc	r19, r19
    278c:	08 2e       	mov	r0, r24
    278e:	00 0c       	add	r0, r0
    2790:	99 0b       	sbc	r25, r25
    2792:	88 27       	eor	r24, r24
    2794:	99 0f       	add	r25, r25
    2796:	88 1f       	adc	r24, r24
    2798:	99 27       	eor	r25, r25
    279a:	82 0f       	add	r24, r18
    279c:	93 1f       	adc	r25, r19
    279e:	fc 01       	movw	r30, r24
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	ee 0f       	add	r30, r30
    27aa:	ff 1f       	adc	r31, r31
    27ac:	e4 5d       	subi	r30, 0xD4	; 212
    27ae:	fc 4d       	sbci	r31, 0xDC	; 220
    27b0:	25 8d       	ldd	r18, Z+29	; 0x1d
    27b2:	20 7c       	andi	r18, 0xC0	; 192
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <udd_ep_alloc+0x36>
    27b6:	4f c0       	rjmp	.+158    	; 0x2856 <udd_ep_alloc+0xd4>
    27b8:	63 70       	andi	r22, 0x03	; 3
    27ba:	61 30       	cpi	r22, 0x01	; 1
    27bc:	11 f0       	breq	.+4      	; 0x27c2 <udd_ep_alloc+0x40>
    27be:	18 f4       	brcc	.+6      	; 0x27c6 <udd_ep_alloc+0x44>
    27c0:	04 c0       	rjmp	.+8      	; 0x27ca <udd_ep_alloc+0x48>
    27c2:	20 ec       	ldi	r18, 0xC0	; 192
    27c4:	03 c0       	rjmp	.+6      	; 0x27cc <udd_ep_alloc+0x4a>
    27c6:	20 e8       	ldi	r18, 0x80	; 128
    27c8:	01 c0       	rjmp	.+2      	; 0x27cc <udd_ep_alloc+0x4a>
    27ca:	20 e4       	ldi	r18, 0x40	; 64
    27cc:	40 38       	cpi	r20, 0x80	; 128
    27ce:	51 05       	cpc	r21, r1
    27d0:	e9 f0       	breq	.+58     	; 0x280c <udd_ep_alloc+0x8a>
    27d2:	50 f4       	brcc	.+20     	; 0x27e8 <udd_ep_alloc+0x66>
    27d4:	40 32       	cpi	r20, 0x20	; 32
    27d6:	51 05       	cpc	r21, r1
    27d8:	a9 f0       	breq	.+42     	; 0x2804 <udd_ep_alloc+0x82>
    27da:	40 34       	cpi	r20, 0x40	; 64
    27dc:	51 05       	cpc	r21, r1
    27de:	a1 f0       	breq	.+40     	; 0x2808 <udd_ep_alloc+0x86>
    27e0:	40 31       	cpi	r20, 0x10	; 16
    27e2:	51 05       	cpc	r21, r1
    27e4:	d9 f4       	brne	.+54     	; 0x281c <udd_ep_alloc+0x9a>
    27e6:	0c c0       	rjmp	.+24     	; 0x2800 <udd_ep_alloc+0x7e>
    27e8:	41 15       	cp	r20, r1
    27ea:	32 e0       	ldi	r19, 0x02	; 2
    27ec:	53 07       	cpc	r21, r19
    27ee:	91 f0       	breq	.+36     	; 0x2814 <udd_ep_alloc+0x92>
    27f0:	4f 3f       	cpi	r20, 0xFF	; 255
    27f2:	33 e0       	ldi	r19, 0x03	; 3
    27f4:	53 07       	cpc	r21, r19
    27f6:	81 f0       	breq	.+32     	; 0x2818 <udd_ep_alloc+0x96>
    27f8:	41 15       	cp	r20, r1
    27fa:	51 40       	sbci	r21, 0x01	; 1
    27fc:	79 f4       	brne	.+30     	; 0x281c <udd_ep_alloc+0x9a>
    27fe:	08 c0       	rjmp	.+16     	; 0x2810 <udd_ep_alloc+0x8e>
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0d c0       	rjmp	.+26     	; 0x281e <udd_ep_alloc+0x9c>
    2804:	42 e0       	ldi	r20, 0x02	; 2
    2806:	0b c0       	rjmp	.+22     	; 0x281e <udd_ep_alloc+0x9c>
    2808:	43 e0       	ldi	r20, 0x03	; 3
    280a:	09 c0       	rjmp	.+18     	; 0x281e <udd_ep_alloc+0x9c>
    280c:	44 e0       	ldi	r20, 0x04	; 4
    280e:	07 c0       	rjmp	.+14     	; 0x281e <udd_ep_alloc+0x9c>
    2810:	45 e0       	ldi	r20, 0x05	; 5
    2812:	05 c0       	rjmp	.+10     	; 0x281e <udd_ep_alloc+0x9c>
    2814:	46 e0       	ldi	r20, 0x06	; 6
    2816:	03 c0       	rjmp	.+6      	; 0x281e <udd_ep_alloc+0x9c>
    2818:	47 e0       	ldi	r20, 0x07	; 7
    281a:	01 c0       	rjmp	.+2      	; 0x281e <udd_ep_alloc+0x9c>
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	fc 01       	movw	r30, r24
    2820:	ee 0f       	add	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	ee 0f       	add	r30, r30
    2826:	ff 1f       	adc	r31, r31
    2828:	ee 0f       	add	r30, r30
    282a:	ff 1f       	adc	r31, r31
    282c:	e4 5d       	subi	r30, 0xD4	; 212
    282e:	fc 4d       	sbci	r31, 0xDC	; 220
    2830:	15 8e       	std	Z+29, r1	; 0x1d
    2832:	36 e0       	ldi	r19, 0x06	; 6
    2834:	34 8f       	std	Z+28, r19	; 0x1c
    2836:	24 2b       	or	r18, r20
    2838:	25 8f       	std	Z+29, r18	; 0x1d
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	fc 01       	movw	r30, r24
    2848:	e4 5d       	subi	r30, 0xD4	; 212
    284a:	fc 4d       	sbci	r31, 0xDC	; 220
    284c:	85 8d       	ldd	r24, Z+29	; 0x1d
    284e:	80 62       	ori	r24, 0x20	; 32
    2850:	85 8f       	std	Z+29, r24	; 0x1d
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	08 95       	ret
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	08 95       	ret

0000285a <udd_ep_is_halted>:
    285a:	e8 2f       	mov	r30, r24
    285c:	ef 70       	andi	r30, 0x0F	; 15
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	ee 0f       	add	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	08 2e       	mov	r0, r24
    2866:	00 0c       	add	r0, r0
    2868:	99 0b       	sbc	r25, r25
    286a:	88 27       	eor	r24, r24
    286c:	99 0f       	add	r25, r25
    286e:	88 1f       	adc	r24, r24
    2870:	99 27       	eor	r25, r25
    2872:	e8 0f       	add	r30, r24
    2874:	f9 1f       	adc	r31, r25
    2876:	ee 0f       	add	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	ee 0f       	add	r30, r30
    287c:	ff 1f       	adc	r31, r31
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	e4 5d       	subi	r30, 0xD4	; 212
    2884:	fc 4d       	sbci	r31, 0xDC	; 220
    2886:	85 8d       	ldd	r24, Z+29	; 0x1d
    2888:	82 fb       	bst	r24, 2
    288a:	88 27       	eor	r24, r24
    288c:	80 f9       	bld	r24, 0
    288e:	08 95       	ret

00002890 <udd_ep_clear_halt>:
    2890:	28 2f       	mov	r18, r24
    2892:	2f 70       	andi	r18, 0x0F	; 15
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	a9 01       	movw	r20, r18
    2898:	44 0f       	add	r20, r20
    289a:	55 1f       	adc	r21, r21
    289c:	28 2f       	mov	r18, r24
    289e:	08 2e       	mov	r0, r24
    28a0:	00 0c       	add	r0, r0
    28a2:	33 0b       	sbc	r19, r19
    28a4:	22 27       	eor	r18, r18
    28a6:	33 0f       	add	r19, r19
    28a8:	22 1f       	adc	r18, r18
    28aa:	33 27       	eor	r19, r19
    28ac:	24 0f       	add	r18, r20
    28ae:	35 1f       	adc	r19, r21
    28b0:	f9 01       	movw	r30, r18
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	ee 0f       	add	r30, r30
    28bc:	ff 1f       	adc	r31, r31
    28be:	e4 5d       	subi	r30, 0xD4	; 212
    28c0:	fc 4d       	sbci	r31, 0xDC	; 220
    28c2:	95 8d       	ldd	r25, Z+29	; 0x1d
    28c4:	92 ff       	sbrs	r25, 2
    28c6:	17 c0       	rjmp	.+46     	; 0x28f6 <udd_ep_clear_halt+0x66>
    28c8:	22 0f       	add	r18, r18
    28ca:	33 1f       	adc	r19, r19
    28cc:	22 0f       	add	r18, r18
    28ce:	33 1f       	adc	r19, r19
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	f9 01       	movw	r30, r18
    28d6:	e4 5d       	subi	r30, 0xD4	; 212
    28d8:	fc 4d       	sbci	r31, 0xDC	; 220
    28da:	95 8d       	ldd	r25, Z+29	; 0x1d
    28dc:	9b 7f       	andi	r25, 0xFB	; 251
    28de:	95 8f       	std	Z+29, r25	; 0x1d
    28e0:	9e dc       	rcall	.-1732   	; 0x221e <udd_ep_get_job>
    28e2:	fc 01       	movw	r30, r24
    28e4:	80 81       	ld	r24, Z
    28e6:	80 ff       	sbrs	r24, 0
    28e8:	06 c0       	rjmp	.+12     	; 0x28f6 <udd_ep_clear_halt+0x66>
    28ea:	8e 7f       	andi	r24, 0xFE	; 254
    28ec:	80 83       	st	Z, r24
    28ee:	07 80       	ldd	r0, Z+7	; 0x07
    28f0:	f0 85       	ldd	r31, Z+8	; 0x08
    28f2:	e0 2d       	mov	r30, r0
    28f4:	09 95       	icall
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	08 95       	ret

000028fa <udd_ep_run>:
    28fa:	7f 92       	push	r7
    28fc:	8f 92       	push	r8
    28fe:	9f 92       	push	r9
    2900:	af 92       	push	r10
    2902:	bf 92       	push	r11
    2904:	cf 92       	push	r12
    2906:	df 92       	push	r13
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	98 2e       	mov	r9, r24
    2916:	86 2e       	mov	r8, r22
    2918:	6a 01       	movw	r12, r20
    291a:	79 01       	movw	r14, r18
    291c:	80 dc       	rcall	.-1792   	; 0x221e <udd_ep_get_job>
    291e:	5c 01       	movw	r10, r24
    2920:	79 2c       	mov	r7, r9
    2922:	77 1c       	adc	r7, r7
    2924:	77 24       	eor	r7, r7
    2926:	77 1c       	adc	r7, r7
    2928:	c9 2d       	mov	r28, r9
    292a:	cf 70       	andi	r28, 0x0F	; 15
    292c:	d0 e0       	ldi	r29, 0x00	; 0
    292e:	cc 0f       	add	r28, r28
    2930:	dd 1f       	adc	r29, r29
    2932:	c7 0d       	add	r28, r7
    2934:	d1 1d       	adc	r29, r1
    2936:	fe 01       	movw	r30, r28
    2938:	ee 0f       	add	r30, r30
    293a:	ff 1f       	adc	r31, r31
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	ee 0f       	add	r30, r30
    2942:	ff 1f       	adc	r31, r31
    2944:	e4 5d       	subi	r30, 0xD4	; 212
    2946:	fc 4d       	sbci	r31, 0xDC	; 220
    2948:	85 8d       	ldd	r24, Z+29	; 0x1d
    294a:	80 7c       	andi	r24, 0xC0	; 192
    294c:	09 f4       	brne	.+2      	; 0x2950 <udd_ep_run+0x56>
    294e:	7d c0       	rjmp	.+250    	; 0x2a4a <udd_ep_run+0x150>
    2950:	fe 01       	movw	r30, r28
    2952:	ee 0f       	add	r30, r30
    2954:	ff 1f       	adc	r31, r31
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	e4 5d       	subi	r30, 0xD4	; 212
    2960:	fc 4d       	sbci	r31, 0xDC	; 220
    2962:	85 8d       	ldd	r24, Z+29	; 0x1d
    2964:	80 7c       	andi	r24, 0xC0	; 192
    2966:	80 3c       	cpi	r24, 0xC0	; 192
    2968:	61 f0       	breq	.+24     	; 0x2982 <udd_ep_run+0x88>
    296a:	fe 01       	movw	r30, r28
    296c:	ee 0f       	add	r30, r30
    296e:	ff 1f       	adc	r31, r31
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	e4 5d       	subi	r30, 0xD4	; 212
    297a:	fc 4d       	sbci	r31, 0xDC	; 220
    297c:	85 8d       	ldd	r24, Z+29	; 0x1d
    297e:	82 fd       	sbrc	r24, 2
    2980:	66 c0       	rjmp	.+204    	; 0x2a4e <udd_ep_run+0x154>
    2982:	8f b7       	in	r24, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	f5 01       	movw	r30, r10
    2988:	90 81       	ld	r25, Z
    298a:	90 ff       	sbrs	r25, 0
    298c:	03 c0       	rjmp	.+6      	; 0x2994 <udd_ep_run+0x9a>
    298e:	8f bf       	out	0x3f, r24	; 63
    2990:	71 2c       	mov	r7, r1
    2992:	5e c0       	rjmp	.+188    	; 0x2a50 <udd_ep_run+0x156>
    2994:	f5 01       	movw	r30, r10
    2996:	90 81       	ld	r25, Z
    2998:	91 60       	ori	r25, 0x01	; 1
    299a:	90 83       	st	Z, r25
    299c:	8f bf       	out	0x3f, r24	; 63
    299e:	c1 82       	std	Z+1, r12	; 0x01
    29a0:	d2 82       	std	Z+2, r13	; 0x02
    29a2:	e3 82       	std	Z+3, r14	; 0x03
    29a4:	f4 82       	std	Z+4, r15	; 0x04
    29a6:	15 82       	std	Z+5, r1	; 0x05
    29a8:	16 82       	std	Z+6, r1	; 0x06
    29aa:	07 83       	std	Z+7, r16	; 0x07
    29ac:	10 87       	std	Z+8, r17	; 0x08
    29ae:	81 10       	cpse	r8, r1
    29b0:	06 c0       	rjmp	.+12     	; 0x29be <udd_ep_run+0xc4>
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	e1 14       	cp	r14, r1
    29b6:	f1 04       	cpc	r15, r1
    29b8:	19 f0       	breq	.+6      	; 0x29c0 <udd_ep_run+0xc6>
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	01 c0       	rjmp	.+2      	; 0x29c0 <udd_ep_run+0xc6>
    29be:	91 e0       	ldi	r25, 0x01	; 1
    29c0:	f5 01       	movw	r30, r10
    29c2:	80 81       	ld	r24, Z
    29c4:	90 fb       	bst	r25, 0
    29c6:	81 f9       	bld	r24, 1
    29c8:	8b 7f       	andi	r24, 0xFB	; 251
    29ca:	80 83       	st	Z, r24
    29cc:	77 20       	and	r7, r7
    29ce:	59 f0       	breq	.+22     	; 0x29e6 <udd_ep_run+0xec>
    29d0:	cc 0f       	add	r28, r28
    29d2:	dd 1f       	adc	r29, r29
    29d4:	cc 0f       	add	r28, r28
    29d6:	dd 1f       	adc	r29, r29
    29d8:	cc 0f       	add	r28, r28
    29da:	dd 1f       	adc	r29, r29
    29dc:	c4 5d       	subi	r28, 0xD4	; 212
    29de:	dc 4d       	sbci	r29, 0xDC	; 220
    29e0:	1a a2       	std	Y+34, r1	; 0x22
    29e2:	1b a2       	std	Y+35, r1	; 0x23
    29e4:	2d c0       	rjmp	.+90     	; 0x2a40 <udd_ep_run+0x146>
    29e6:	fe 01       	movw	r30, r28
    29e8:	ee 0f       	add	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	ee 0f       	add	r30, r30
    29ee:	ff 1f       	adc	r31, r31
    29f0:	ee 0f       	add	r30, r30
    29f2:	ff 1f       	adc	r31, r31
    29f4:	e4 5d       	subi	r30, 0xD4	; 212
    29f6:	fc 4d       	sbci	r31, 0xDC	; 220
    29f8:	85 8d       	ldd	r24, Z+29	; 0x1d
    29fa:	80 7c       	andi	r24, 0xC0	; 192
    29fc:	80 3c       	cpi	r24, 0xC0	; 192
    29fe:	a1 f4       	brne	.+40     	; 0x2a28 <udd_ep_run+0x12e>
    2a00:	ce 01       	movw	r24, r28
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	88 5b       	subi	r24, 0xB8	; 184
    2a10:	9c 4d       	sbci	r25, 0xDC	; 220
    2a12:	df db       	rcall	.-2114   	; 0x21d2 <udd_ep_get_size>
    2a14:	bc 01       	movw	r22, r24
    2a16:	c7 01       	movw	r24, r14
    2a18:	65 d2       	rcall	.+1226   	; 0x2ee4 <__udivmodhi4>
    2a1a:	89 2b       	or	r24, r25
    2a1c:	29 f0       	breq	.+10     	; 0x2a28 <udd_ep_run+0x12e>
    2a1e:	f5 01       	movw	r30, r10
    2a20:	80 81       	ld	r24, Z
    2a22:	8e 7f       	andi	r24, 0xFE	; 254
    2a24:	80 83       	st	Z, r24
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <udd_ep_run+0x156>
    2a28:	cc 0f       	add	r28, r28
    2a2a:	dd 1f       	adc	r29, r29
    2a2c:	cc 0f       	add	r28, r28
    2a2e:	dd 1f       	adc	r29, r29
    2a30:	cc 0f       	add	r28, r28
    2a32:	dd 1f       	adc	r29, r29
    2a34:	c4 5d       	subi	r28, 0xD4	; 212
    2a36:	dc 4d       	sbci	r29, 0xDC	; 220
    2a38:	1e 8e       	std	Y+30, r1	; 0x1e
    2a3a:	1f 8e       	std	Y+31, r1	; 0x1f
    2a3c:	1a a2       	std	Y+34, r1	; 0x22
    2a3e:	1b a2       	std	Y+35, r1	; 0x23
    2a40:	89 2d       	mov	r24, r9
    2a42:	77 dc       	rcall	.-1810   	; 0x2332 <udd_ep_trans_complet>
    2a44:	77 24       	eor	r7, r7
    2a46:	73 94       	inc	r7
    2a48:	03 c0       	rjmp	.+6      	; 0x2a50 <udd_ep_run+0x156>
    2a4a:	71 2c       	mov	r7, r1
    2a4c:	01 c0       	rjmp	.+2      	; 0x2a50 <udd_ep_run+0x156>
    2a4e:	71 2c       	mov	r7, r1
    2a50:	87 2d       	mov	r24, r7
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	1f 91       	pop	r17
    2a58:	0f 91       	pop	r16
    2a5a:	ff 90       	pop	r15
    2a5c:	ef 90       	pop	r14
    2a5e:	df 90       	pop	r13
    2a60:	cf 90       	pop	r12
    2a62:	bf 90       	pop	r11
    2a64:	af 90       	pop	r10
    2a66:	9f 90       	pop	r9
    2a68:	8f 90       	pop	r8
    2a6a:	7f 90       	pop	r7
    2a6c:	08 95       	ret

00002a6e <udd_ep_abort>:
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	18 2f       	mov	r17, r24
    2a7a:	f8 2e       	mov	r15, r24
    2a7c:	ff 1c       	adc	r15, r15
    2a7e:	ff 24       	eor	r15, r15
    2a80:	ff 1c       	adc	r15, r15
    2a82:	c8 2f       	mov	r28, r24
    2a84:	cf 70       	andi	r28, 0x0F	; 15
    2a86:	d0 e0       	ldi	r29, 0x00	; 0
    2a88:	cc 0f       	add	r28, r28
    2a8a:	dd 1f       	adc	r29, r29
    2a8c:	cf 0d       	add	r28, r15
    2a8e:	d1 1d       	adc	r29, r1
    2a90:	c6 db       	rcall	.-2164   	; 0x221e <udd_ep_get_job>
    2a92:	dc 01       	movw	r26, r24
    2a94:	fe 01       	movw	r30, r28
    2a96:	ee 0f       	add	r30, r30
    2a98:	ff 1f       	adc	r31, r31
    2a9a:	ee 0f       	add	r30, r30
    2a9c:	ff 1f       	adc	r31, r31
    2a9e:	ee 0f       	add	r30, r30
    2aa0:	ff 1f       	adc	r31, r31
    2aa2:	e8 5b       	subi	r30, 0xB8	; 184
    2aa4:	fc 4d       	sbci	r31, 0xDC	; 220
    2aa6:	02 e0       	ldi	r16, 0x02	; 2
    2aa8:	05 93       	las	Z, r16
    2aaa:	8c 91       	ld	r24, X
    2aac:	80 ff       	sbrs	r24, 0
    2aae:	22 c0       	rjmp	.+68     	; 0x2af4 <udd_ep_abort+0x86>
    2ab0:	8e 7f       	andi	r24, 0xFE	; 254
    2ab2:	8c 93       	st	X, r24
    2ab4:	17 96       	adiw	r26, 0x07	; 7
    2ab6:	ed 91       	ld	r30, X+
    2ab8:	fc 91       	ld	r31, X
    2aba:	18 97       	sbiw	r26, 0x08	; 8
    2abc:	30 97       	sbiw	r30, 0x00	; 0
    2abe:	d1 f0       	breq	.+52     	; 0x2af4 <udd_ep_abort+0x86>
    2ac0:	ff 20       	and	r15, r15
    2ac2:	59 f0       	breq	.+22     	; 0x2ada <udd_ep_abort+0x6c>
    2ac4:	cc 0f       	add	r28, r28
    2ac6:	dd 1f       	adc	r29, r29
    2ac8:	cc 0f       	add	r28, r28
    2aca:	dd 1f       	adc	r29, r29
    2acc:	cc 0f       	add	r28, r28
    2ace:	dd 1f       	adc	r29, r29
    2ad0:	c4 5d       	subi	r28, 0xD4	; 212
    2ad2:	dc 4d       	sbci	r29, 0xDC	; 220
    2ad4:	6a a1       	ldd	r22, Y+34	; 0x22
    2ad6:	7b a1       	ldd	r23, Y+35	; 0x23
    2ad8:	0a c0       	rjmp	.+20     	; 0x2aee <udd_ep_abort+0x80>
    2ada:	cc 0f       	add	r28, r28
    2adc:	dd 1f       	adc	r29, r29
    2ade:	cc 0f       	add	r28, r28
    2ae0:	dd 1f       	adc	r29, r29
    2ae2:	cc 0f       	add	r28, r28
    2ae4:	dd 1f       	adc	r29, r29
    2ae6:	c4 5d       	subi	r28, 0xD4	; 212
    2ae8:	dc 4d       	sbci	r29, 0xDC	; 220
    2aea:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2aec:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2aee:	41 2f       	mov	r20, r17
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	09 95       	icall
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	ff 90       	pop	r15
    2afe:	08 95       	ret

00002b00 <udd_ep_free>:
    2b00:	cf 93       	push	r28
    2b02:	c8 2f       	mov	r28, r24
    2b04:	b4 df       	rcall	.-152    	; 0x2a6e <udd_ep_abort>
    2b06:	ec 2f       	mov	r30, r28
    2b08:	ef 70       	andi	r30, 0x0F	; 15
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	ee 0f       	add	r30, r30
    2b0e:	ff 1f       	adc	r31, r31
    2b10:	8c 2f       	mov	r24, r28
    2b12:	cc 0f       	add	r28, r28
    2b14:	99 0b       	sbc	r25, r25
    2b16:	88 27       	eor	r24, r24
    2b18:	99 0f       	add	r25, r25
    2b1a:	88 1f       	adc	r24, r24
    2b1c:	99 27       	eor	r25, r25
    2b1e:	e8 0f       	add	r30, r24
    2b20:	f9 1f       	adc	r31, r25
    2b22:	ee 0f       	add	r30, r30
    2b24:	ff 1f       	adc	r31, r31
    2b26:	ee 0f       	add	r30, r30
    2b28:	ff 1f       	adc	r31, r31
    2b2a:	ee 0f       	add	r30, r30
    2b2c:	ff 1f       	adc	r31, r31
    2b2e:	e4 5d       	subi	r30, 0xD4	; 212
    2b30:	fc 4d       	sbci	r31, 0xDC	; 220
    2b32:	15 8e       	std	Z+29, r1	; 0x1d
    2b34:	cf 91       	pop	r28
    2b36:	08 95       	ret

00002b38 <udd_ep_set_halt>:
    2b38:	0f 93       	push	r16
    2b3a:	e8 2f       	mov	r30, r24
    2b3c:	ef 70       	andi	r30, 0x0F	; 15
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	ee 0f       	add	r30, r30
    2b42:	ff 1f       	adc	r31, r31
    2b44:	28 2f       	mov	r18, r24
    2b46:	08 2e       	mov	r0, r24
    2b48:	00 0c       	add	r0, r0
    2b4a:	33 0b       	sbc	r19, r19
    2b4c:	22 27       	eor	r18, r18
    2b4e:	33 0f       	add	r19, r19
    2b50:	22 1f       	adc	r18, r18
    2b52:	33 27       	eor	r19, r19
    2b54:	e2 0f       	add	r30, r18
    2b56:	f3 1f       	adc	r31, r19
    2b58:	ee 0f       	add	r30, r30
    2b5a:	ff 1f       	adc	r31, r31
    2b5c:	ee 0f       	add	r30, r30
    2b5e:	ff 1f       	adc	r31, r31
    2b60:	ee 0f       	add	r30, r30
    2b62:	ff 1f       	adc	r31, r31
    2b64:	df 01       	movw	r26, r30
    2b66:	a4 5d       	subi	r26, 0xD4	; 212
    2b68:	bc 4d       	sbci	r27, 0xDC	; 220
    2b6a:	5d 96       	adiw	r26, 0x1d	; 29
    2b6c:	9c 91       	ld	r25, X
    2b6e:	5d 97       	sbiw	r26, 0x1d	; 29
    2b70:	94 60       	ori	r25, 0x04	; 4
    2b72:	5d 96       	adiw	r26, 0x1d	; 29
    2b74:	9c 93       	st	X, r25
    2b76:	e8 5b       	subi	r30, 0xB8	; 184
    2b78:	fc 4d       	sbci	r31, 0xDC	; 220
    2b7a:	01 e0       	ldi	r16, 0x01	; 1
    2b7c:	06 93       	lac	Z, r16
    2b7e:	77 df       	rcall	.-274    	; 0x2a6e <udd_ep_abort>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	0f 91       	pop	r16
    2b84:	08 95       	ret

00002b86 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2b86:	1f 92       	push	r1
    2b88:	0f 92       	push	r0
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	0f 92       	push	r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	0f 93       	push	r16
    2b92:	2f 93       	push	r18
    2b94:	3f 93       	push	r19
    2b96:	4f 93       	push	r20
    2b98:	5f 93       	push	r21
    2b9a:	6f 93       	push	r22
    2b9c:	7f 93       	push	r23
    2b9e:	8f 93       	push	r24
    2ba0:	9f 93       	push	r25
    2ba2:	af 93       	push	r26
    2ba4:	bf 93       	push	r27
    2ba6:	cf 93       	push	r28
    2ba8:	ef 93       	push	r30
    2baa:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2bac:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2bb0:	88 23       	and	r24, r24
    2bb2:	44 f4       	brge	.+16     	; 0x2bc4 <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    2bb4:	80 e8       	ldi	r24, 0x80	; 128
    2bb6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2bba:	0e 94 25 0c 	call	0x184a	; 0x184a <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2bbe:	0e 94 14 04 	call	0x828	; 0x828 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2bc2:	8b c0       	rjmp	.+278    	; 0x2cda <__vector_125+0x154>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2bc4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2bc8:	82 ff       	sbrs	r24, 2
    2bca:	20 c0       	rjmp	.+64     	; 0x2c0c <__vector_125+0x86>
		udd_ack_underflow_event();
    2bcc:	84 e0       	ldi	r24, 0x04	; 4
    2bce:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2bd2:	80 91 50 23 	lds	r24, 0x2350	; 0x802350 <udd_sram+0x24>
    2bd6:	86 ff       	sbrs	r24, 6
    2bd8:	80 c0       	rjmp	.+256    	; 0x2cda <__vector_125+0x154>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2bda:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2bde:	81 fd       	sbrc	r24, 1
    2be0:	7c c0       	rjmp	.+248    	; 0x2cda <__vector_125+0x154>
    2be2:	38 db       	rcall	.-2448   	; 0x2254 <udd_ctrl_interrupt_tc_setup>
    2be4:	81 11       	cpse	r24, r1
    2be6:	79 c0       	rjmp	.+242    	; 0x2cda <__vector_125+0x154>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2be8:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <udd_ep_control_state>
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	11 f4       	brne	.+4      	; 0x2bf4 <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2bf0:	6e da       	rcall	.-2852   	; 0x20ce <udd_ctrl_send_zlp_in>
    2bf2:	73 c0       	rjmp	.+230    	; 0x2cda <__vector_125+0x154>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2bf4:	84 30       	cpi	r24, 0x04	; 4
    2bf6:	09 f0       	breq	.+2      	; 0x2bfa <__vector_125+0x74>
    2bf8:	70 c0       	rjmp	.+224    	; 0x2cda <__vector_125+0x154>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2bfa:	e1 e5       	ldi	r30, 0x51	; 81
    2bfc:	f3 e2       	ldi	r31, 0x23	; 35
    2bfe:	04 e0       	ldi	r16, 0x04	; 4
    2c00:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c02:	e9 e4       	ldi	r30, 0x49	; 73
    2c04:	f3 e2       	ldi	r31, 0x23	; 35
    2c06:	04 e0       	ldi	r16, 0x04	; 4
    2c08:	05 93       	las	Z, r16
    2c0a:	67 c0       	rjmp	.+206    	; 0x2cda <__vector_125+0x154>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2c0c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c10:	81 ff       	sbrs	r24, 1
    2c12:	5e c0       	rjmp	.+188    	; 0x2cd0 <__vector_125+0x14a>
		udd_ack_overflow_event();
    2c14:	82 e0       	ldi	r24, 0x02	; 2
    2c16:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2c1a:	80 91 48 23 	lds	r24, 0x2348	; 0x802348 <udd_sram+0x1c>
    2c1e:	86 ff       	sbrs	r24, 6
    2c20:	5c c0       	rjmp	.+184    	; 0x2cda <__vector_125+0x154>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c22:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c26:	81 fd       	sbrc	r24, 1
    2c28:	58 c0       	rjmp	.+176    	; 0x2cda <__vector_125+0x154>
    2c2a:	14 db       	rcall	.-2520   	; 0x2254 <udd_ctrl_interrupt_tc_setup>
    2c2c:	81 11       	cpse	r24, r1
    2c2e:	55 c0       	rjmp	.+170    	; 0x2cda <__vector_125+0x154>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2c30:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <udd_ep_control_state>
    2c34:	82 30       	cpi	r24, 0x02	; 2
    2c36:	41 f4       	brne	.+16     	; 0x2c48 <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2c38:	84 e0       	ldi	r24, 0x04	; 4
    2c3a:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2c3e:	e8 e4       	ldi	r30, 0x48	; 72
    2c40:	f3 e2       	ldi	r31, 0x23	; 35
    2c42:	02 e0       	ldi	r16, 0x02	; 2
    2c44:	06 93       	lac	Z, r16
    2c46:	49 c0       	rjmp	.+146    	; 0x2cda <__vector_125+0x154>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2c48:	83 30       	cpi	r24, 0x03	; 3
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <__vector_125+0xc8>
    2c4c:	46 c0       	rjmp	.+140    	; 0x2cda <__vector_125+0x154>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2c4e:	e1 e5       	ldi	r30, 0x51	; 81
    2c50:	f3 e2       	ldi	r31, 0x23	; 35
    2c52:	04 e0       	ldi	r16, 0x04	; 4
    2c54:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c56:	e9 e4       	ldi	r30, 0x49	; 73
    2c58:	f3 e2       	ldi	r31, 0x23	; 35
    2c5a:	04 e0       	ldi	r16, 0x04	; 4
    2c5c:	05 93       	las	Z, r16
    2c5e:	3d c0       	rjmp	.+122    	; 0x2cda <__vector_125+0x154>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2c60:	80 e1       	ldi	r24, 0x10	; 16
    2c62:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2c66:	c1 e0       	ldi	r28, 0x01	; 1
			udd_ep_abort(i);
    2c68:	8c 2f       	mov	r24, r28
    2c6a:	01 df       	rcall	.-510    	; 0x2a6e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2c6c:	8c 2f       	mov	r24, r28
    2c6e:	80 68       	ori	r24, 0x80	; 128
    2c70:	fe de       	rcall	.-516    	; 0x2a6e <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2c72:	cf 5f       	subi	r28, 0xFF	; 255
    2c74:	c6 30       	cpi	r28, 0x06	; 6
    2c76:	c1 f7       	brne	.-16     	; 0x2c68 <__vector_125+0xe2>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2c78:	0e 94 00 0c 	call	0x1800	; 0x1800 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2c7c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c80:	ec e2       	ldi	r30, 0x2C	; 44
    2c82:	f3 e2       	ldi	r31, 0x23	; 35
    2c84:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
    2c86:	96 e0       	ldi	r25, 0x06	; 6
    2c88:	94 8f       	std	Z+28, r25	; 0x1c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c8a:	83 e4       	ldi	r24, 0x43	; 67
    2c8c:	85 8f       	std	Z+29, r24	; 0x1d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c8e:	15 a2       	std	Z+37, r1	; 0x25
	udd_endpoint_clear_status(ep_ctrl);
    2c90:	94 a3       	std	Z+36, r25	; 0x24
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c92:	85 a3       	std	Z+37, r24	; 0x25
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2c94:	87 ee       	ldi	r24, 0xE7	; 231
    2c96:	92 e2       	ldi	r25, 0x22	; 34
    2c98:	80 a3       	std	Z+32, r24	; 0x20
    2c9a:	91 a3       	std	Z+33, r25	; 0x21
		// Reset endpoint control management
		udd_ctrl_init();
    2c9c:	e3 d9       	rcall	.-3130   	; 0x2064 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2c9e:	1d c0       	rjmp	.+58     	; 0x2cda <__vector_125+0x154>
	}

	if (udd_is_suspend_event()) {
    2ca0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ca4:	86 ff       	sbrs	r24, 6
    2ca6:	08 c0       	rjmp	.+16     	; 0x2cb8 <__vector_125+0x132>
		udd_ack_suspend_event();
    2ca8:	80 e4       	ldi	r24, 0x40	; 64
    2caa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	b0 d9       	rcall	.-3232   	; 0x2012 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2cb2:	0e 94 12 04 	call	0x824	; 0x824 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2cb6:	11 c0       	rjmp	.+34     	; 0x2cda <__vector_125+0x154>
	}

	if (udd_is_resume_event()) {
    2cb8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cbc:	85 ff       	sbrs	r24, 5
    2cbe:	0d c0       	rjmp	.+26     	; 0x2cda <__vector_125+0x154>
		udd_ack_resume_event();
    2cc0:	80 e2       	ldi	r24, 0x20	; 32
    2cc2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	a4 d9       	rcall	.-3256   	; 0x2012 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2cca:	0e 94 13 04 	call	0x826	; 0x826 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2cce:	05 c0       	rjmp	.+10     	; 0x2cda <__vector_125+0x154>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2cd0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cd4:	84 fd       	sbrc	r24, 4
    2cd6:	c4 cf       	rjmp	.-120    	; 0x2c60 <__vector_125+0xda>
    2cd8:	e3 cf       	rjmp	.-58     	; 0x2ca0 <__vector_125+0x11a>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2cda:	ff 91       	pop	r31
    2cdc:	ef 91       	pop	r30
    2cde:	cf 91       	pop	r28
    2ce0:	bf 91       	pop	r27
    2ce2:	af 91       	pop	r26
    2ce4:	9f 91       	pop	r25
    2ce6:	8f 91       	pop	r24
    2ce8:	7f 91       	pop	r23
    2cea:	6f 91       	pop	r22
    2cec:	5f 91       	pop	r21
    2cee:	4f 91       	pop	r20
    2cf0:	3f 91       	pop	r19
    2cf2:	2f 91       	pop	r18
    2cf4:	0f 91       	pop	r16
    2cf6:	0f 90       	pop	r0
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	0f 90       	pop	r0
    2cfc:	1f 90       	pop	r1
    2cfe:	18 95       	reti

00002d00 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2d00:	1f 92       	push	r1
    2d02:	0f 92       	push	r0
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	0f 92       	push	r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	2f 93       	push	r18
    2d10:	3f 93       	push	r19
    2d12:	4f 93       	push	r20
    2d14:	5f 93       	push	r21
    2d16:	6f 93       	push	r22
    2d18:	7f 93       	push	r23
    2d1a:	8f 93       	push	r24
    2d1c:	9f 93       	push	r25
    2d1e:	af 93       	push	r26
    2d20:	bf 93       	push	r27
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	ef 93       	push	r30
    2d28:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2d2a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2d2e:	81 fd       	sbrc	r24, 1
    2d30:	03 c0       	rjmp	.+6      	; 0x2d38 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2d32:	90 da       	rcall	.-2784   	; 0x2254 <udd_ctrl_interrupt_tc_setup>
    2d34:	81 11       	cpse	r24, r1
    2d36:	c1 c0       	rjmp	.+386    	; 0x2eba <__vector_126+0x1ba>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2d3e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2d42:	81 95       	neg	r24
    2d44:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2d46:	e8 e4       	ldi	r30, 0x48	; 72
    2d48:	f3 e2       	ldi	r31, 0x23	; 35
    2d4a:	e8 1b       	sub	r30, r24
    2d4c:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2d4e:	20 81       	ld	r18, Z
    2d50:	31 81       	ldd	r19, Z+1	; 0x01
    2d52:	28 54       	subi	r18, 0x48	; 72
    2d54:	33 42       	sbci	r19, 0x23	; 35
    2d56:	36 95       	lsr	r19
    2d58:	27 95       	ror	r18
    2d5a:	36 95       	lsr	r19
    2d5c:	27 95       	ror	r18
    2d5e:	36 95       	lsr	r19
    2d60:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2d62:	82 2f       	mov	r24, r18
    2d64:	86 95       	lsr	r24
    2d66:	20 fd       	sbrc	r18, 0
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <__vector_126+0x6e>
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	01 c0       	rjmp	.+2      	; 0x2d70 <__vector_126+0x70>
    2d6e:	90 e8       	ldi	r25, 0x80	; 128
    2d70:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d72:	e8 2f       	mov	r30, r24
    2d74:	ef 70       	andi	r30, 0x0F	; 15
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	ee 0f       	add	r30, r30
    2d7a:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	08 2e       	mov	r0, r24
    2d80:	00 0c       	add	r0, r0
    2d82:	33 0b       	sbc	r19, r19
    2d84:	22 27       	eor	r18, r18
    2d86:	33 0f       	add	r19, r19
    2d88:	22 1f       	adc	r18, r18
    2d8a:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d8c:	e2 0f       	add	r30, r18
    2d8e:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2d90:	df 01       	movw	r26, r30
    2d92:	aa 0f       	add	r26, r26
    2d94:	bb 1f       	adc	r27, r27
    2d96:	aa 0f       	add	r26, r26
    2d98:	bb 1f       	adc	r27, r27
    2d9a:	aa 0f       	add	r26, r26
    2d9c:	bb 1f       	adc	r27, r27
    2d9e:	a4 5d       	subi	r26, 0xD4	; 212
    2da0:	bc 4d       	sbci	r27, 0xDC	; 220
    2da2:	5c 96       	adiw	r26, 0x1c	; 28
    2da4:	9c 91       	ld	r25, X
    2da6:	95 ff       	sbrs	r25, 5
    2da8:	88 c0       	rjmp	.+272    	; 0x2eba <__vector_126+0x1ba>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2daa:	ee 0f       	add	r30, r30
    2dac:	ff 1f       	adc	r31, r31
    2dae:	ee 0f       	add	r30, r30
    2db0:	ff 1f       	adc	r31, r31
    2db2:	ee 0f       	add	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	e8 5b       	subi	r30, 0xB8	; 184
    2db8:	fc 4d       	sbci	r31, 0xDC	; 220
    2dba:	00 e2       	ldi	r16, 0x20	; 32
    2dbc:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	77 c0       	rjmp	.+238    	; 0x2eb0 <__vector_126+0x1b0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2dc2:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <udd_ep_control_state>
    2dc6:	84 30       	cpi	r24, 0x04	; 4
    2dc8:	19 f4       	brne	.+6      	; 0x2dd0 <__vector_126+0xd0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2dca:	8f d9       	rcall	.-3298   	; 0x20ea <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2dcc:	4b d9       	rcall	.-3434   	; 0x2064 <udd_ctrl_init>
    2dce:	75 c0       	rjmp	.+234    	; 0x2eba <__vector_126+0x1ba>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2dd0:	00 91 4a 23 	lds	r16, 0x234A	; 0x80234a <udd_sram+0x1e>
    2dd4:	10 91 4b 23 	lds	r17, 0x234B	; 0x80234b <udd_sram+0x1f>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2dd8:	80 91 f4 25 	lds	r24, 0x25F4	; 0x8025f4 <udd_g_ctrlreq+0xa>
    2ddc:	90 91 f5 25 	lds	r25, 0x25F5	; 0x8025f5 <udd_g_ctrlreq+0xb>
    2de0:	c0 91 27 23 	lds	r28, 0x2327	; 0x802327 <udd_ctrl_payload_nb_trans>
    2de4:	d0 91 28 23 	lds	r29, 0x2328	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>
    2de8:	9e 01       	movw	r18, r28
    2dea:	20 0f       	add	r18, r16
    2dec:	31 1f       	adc	r19, r17
    2dee:	82 17       	cp	r24, r18
    2df0:	93 07       	cpc	r25, r19
    2df2:	18 f4       	brcc	.+6      	; 0x2dfa <__vector_126+0xfa>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2df4:	8c 01       	movw	r16, r24
    2df6:	0c 1b       	sub	r16, r28
    2df8:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2dfa:	80 91 f2 25 	lds	r24, 0x25F2	; 0x8025f2 <udd_g_ctrlreq+0x8>
    2dfe:	90 91 f3 25 	lds	r25, 0x25F3	; 0x8025f3 <udd_g_ctrlreq+0x9>
    2e02:	a8 01       	movw	r20, r16
    2e04:	67 ee       	ldi	r22, 0xE7	; 231
    2e06:	72 e2       	ldi	r23, 0x22	; 34
    2e08:	8c 0f       	add	r24, r28
    2e0a:	9d 1f       	adc	r25, r29
    2e0c:	a7 d0       	rcall	.+334    	; 0x2f5c <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2e0e:	c0 0f       	add	r28, r16
    2e10:	d1 1f       	adc	r29, r17
    2e12:	c0 93 27 23 	sts	0x2327, r28	; 0x802327 <udd_ctrl_payload_nb_trans>
    2e16:	d0 93 28 23 	sts	0x2328, r29	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e1a:	00 34       	cpi	r16, 0x40	; 64
    2e1c:	11 05       	cpc	r17, r1
    2e1e:	69 f4       	brne	.+26     	; 0x2e3a <__vector_126+0x13a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2e20:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <udd_ctrl_prev_payload_nb_trans>
    2e24:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <udd_ctrl_prev_payload_nb_trans+0x1>
    2e28:	8c 0f       	add	r24, r28
    2e2a:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e2c:	20 91 f0 25 	lds	r18, 0x25F0	; 0x8025f0 <udd_g_ctrlreq+0x6>
    2e30:	30 91 f1 25 	lds	r19, 0x25F1	; 0x8025f1 <udd_g_ctrlreq+0x7>
    2e34:	82 17       	cp	r24, r18
    2e36:	93 07       	cpc	r25, r19
    2e38:	80 f0       	brcs	.+32     	; 0x2e5a <__vector_126+0x15a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e3a:	ea ee       	ldi	r30, 0xEA	; 234
    2e3c:	f5 e2       	ldi	r31, 0x25	; 37
    2e3e:	c2 87       	std	Z+10, r28	; 0x0a
    2e40:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2e42:	06 84       	ldd	r0, Z+14	; 0x0e
    2e44:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e46:	e0 2d       	mov	r30, r0
    2e48:	30 97       	sbiw	r30, 0x00	; 0
    2e4a:	29 f0       	breq	.+10     	; 0x2e56 <__vector_126+0x156>
			if (!udd_g_ctrlreq.over_under_run()) {
    2e4c:	09 95       	icall
    2e4e:	81 11       	cpse	r24, r1
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <__vector_126+0x156>
				// Stall ZLP
				udd_ctrl_stall_data();
    2e52:	2f d9       	rcall	.-3490   	; 0x20b2 <udd_ctrl_stall_data>
    2e54:	32 c0       	rjmp	.+100    	; 0x2eba <__vector_126+0x1ba>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2e56:	3b d9       	rcall	.-3466   	; 0x20ce <udd_ctrl_send_zlp_in>
    2e58:	30 c0       	rjmp	.+96     	; 0x2eba <__vector_126+0x1ba>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e5a:	80 91 f4 25 	lds	r24, 0x25F4	; 0x8025f4 <udd_g_ctrlreq+0xa>
    2e5e:	90 91 f5 25 	lds	r25, 0x25F5	; 0x8025f5 <udd_g_ctrlreq+0xb>
    2e62:	c8 17       	cp	r28, r24
    2e64:	d9 07       	cpc	r29, r25
    2e66:	f9 f4       	brne	.+62     	; 0x2ea6 <__vector_126+0x1a6>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2e68:	e0 91 f8 25 	lds	r30, 0x25F8	; 0x8025f8 <udd_g_ctrlreq+0xe>
    2e6c:	f0 91 f9 25 	lds	r31, 0x25F9	; 0x8025f9 <udd_g_ctrlreq+0xf>
    2e70:	30 97       	sbiw	r30, 0x00	; 0
    2e72:	11 f4       	brne	.+4      	; 0x2e78 <__vector_126+0x178>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2e74:	1e d9       	rcall	.-3524   	; 0x20b2 <udd_ctrl_stall_data>
    2e76:	21 c0       	rjmp	.+66     	; 0x2eba <__vector_126+0x1ba>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2e78:	09 95       	icall
    2e7a:	81 11       	cpse	r24, r1
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <__vector_126+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2e7e:	19 d9       	rcall	.-3534   	; 0x20b2 <udd_ctrl_stall_data>
    2e80:	1c c0       	rjmp	.+56     	; 0x2eba <__vector_126+0x1ba>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2e82:	20 91 29 23 	lds	r18, 0x2329	; 0x802329 <udd_ctrl_prev_payload_nb_trans>
    2e86:	30 91 2a 23 	lds	r19, 0x232A	; 0x80232a <udd_ctrl_prev_payload_nb_trans+0x1>
    2e8a:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <udd_ctrl_payload_nb_trans>
    2e8e:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>
    2e92:	82 0f       	add	r24, r18
    2e94:	93 1f       	adc	r25, r19
    2e96:	80 93 29 23 	sts	0x2329, r24	; 0x802329 <udd_ctrl_prev_payload_nb_trans>
    2e9a:	90 93 2a 23 	sts	0x232A, r25	; 0x80232a <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2e9e:	10 92 27 23 	sts	0x2327, r1	; 0x802327 <udd_ctrl_payload_nb_trans>
    2ea2:	10 92 28 23 	sts	0x2328, r1	; 0x802328 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2ea6:	e8 e4       	ldi	r30, 0x48	; 72
    2ea8:	f3 e2       	ldi	r31, 0x23	; 35
    2eaa:	02 e0       	ldi	r16, 0x02	; 2
    2eac:	06 93       	lac	Z, r16
    2eae:	05 c0       	rjmp	.+10     	; 0x2eba <__vector_126+0x1ba>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2eb0:	80 38       	cpi	r24, 0x80	; 128
    2eb2:	11 f4       	brne	.+4      	; 0x2eb8 <__vector_126+0x1b8>
		udd_ctrl_in_sent();
    2eb4:	22 d9       	rcall	.-3516   	; 0x20fa <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <__vector_126+0x1ba>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2eb8:	3c da       	rcall	.-2952   	; 0x2332 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2eba:	ff 91       	pop	r31
    2ebc:	ef 91       	pop	r30
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	bf 91       	pop	r27
    2ec4:	af 91       	pop	r26
    2ec6:	9f 91       	pop	r25
    2ec8:	8f 91       	pop	r24
    2eca:	7f 91       	pop	r23
    2ecc:	6f 91       	pop	r22
    2ece:	5f 91       	pop	r21
    2ed0:	4f 91       	pop	r20
    2ed2:	3f 91       	pop	r19
    2ed4:	2f 91       	pop	r18
    2ed6:	1f 91       	pop	r17
    2ed8:	0f 91       	pop	r16
    2eda:	0f 90       	pop	r0
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	0f 90       	pop	r0
    2ee0:	1f 90       	pop	r1
    2ee2:	18 95       	reti

00002ee4 <__udivmodhi4>:
    2ee4:	aa 1b       	sub	r26, r26
    2ee6:	bb 1b       	sub	r27, r27
    2ee8:	51 e1       	ldi	r21, 0x11	; 17
    2eea:	07 c0       	rjmp	.+14     	; 0x2efa <__udivmodhi4_ep>

00002eec <__udivmodhi4_loop>:
    2eec:	aa 1f       	adc	r26, r26
    2eee:	bb 1f       	adc	r27, r27
    2ef0:	a6 17       	cp	r26, r22
    2ef2:	b7 07       	cpc	r27, r23
    2ef4:	10 f0       	brcs	.+4      	; 0x2efa <__udivmodhi4_ep>
    2ef6:	a6 1b       	sub	r26, r22
    2ef8:	b7 0b       	sbc	r27, r23

00002efa <__udivmodhi4_ep>:
    2efa:	88 1f       	adc	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	5a 95       	dec	r21
    2f00:	a9 f7       	brne	.-22     	; 0x2eec <__udivmodhi4_loop>
    2f02:	80 95       	com	r24
    2f04:	90 95       	com	r25
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	08 95       	ret

00002f0c <__divmodhi4>:
    2f0c:	97 fb       	bst	r25, 7
    2f0e:	07 2e       	mov	r0, r23
    2f10:	16 f4       	brtc	.+4      	; 0x2f16 <__divmodhi4+0xa>
    2f12:	00 94       	com	r0
    2f14:	06 d0       	rcall	.+12     	; 0x2f22 <__divmodhi4_neg1>
    2f16:	77 fd       	sbrc	r23, 7
    2f18:	08 d0       	rcall	.+16     	; 0x2f2a <__divmodhi4_neg2>
    2f1a:	e4 df       	rcall	.-56     	; 0x2ee4 <__udivmodhi4>
    2f1c:	07 fc       	sbrc	r0, 7
    2f1e:	05 d0       	rcall	.+10     	; 0x2f2a <__divmodhi4_neg2>
    2f20:	3e f4       	brtc	.+14     	; 0x2f30 <__divmodhi4_exit>

00002f22 <__divmodhi4_neg1>:
    2f22:	90 95       	com	r25
    2f24:	81 95       	neg	r24
    2f26:	9f 4f       	sbci	r25, 0xFF	; 255
    2f28:	08 95       	ret

00002f2a <__divmodhi4_neg2>:
    2f2a:	70 95       	com	r23
    2f2c:	61 95       	neg	r22
    2f2e:	7f 4f       	sbci	r23, 0xFF	; 255

00002f30 <__divmodhi4_exit>:
    2f30:	08 95       	ret

00002f32 <__tablejump2__>:
    2f32:	ee 0f       	add	r30, r30
    2f34:	ff 1f       	adc	r31, r31
    2f36:	05 90       	lpm	r0, Z+
    2f38:	f4 91       	lpm	r31, Z
    2f3a:	e0 2d       	mov	r30, r0
    2f3c:	09 94       	ijmp

00002f3e <__umulhisi3>:
    2f3e:	a2 9f       	mul	r26, r18
    2f40:	b0 01       	movw	r22, r0
    2f42:	b3 9f       	mul	r27, r19
    2f44:	c0 01       	movw	r24, r0
    2f46:	a3 9f       	mul	r26, r19
    2f48:	70 0d       	add	r23, r0
    2f4a:	81 1d       	adc	r24, r1
    2f4c:	11 24       	eor	r1, r1
    2f4e:	91 1d       	adc	r25, r1
    2f50:	b2 9f       	mul	r27, r18
    2f52:	70 0d       	add	r23, r0
    2f54:	81 1d       	adc	r24, r1
    2f56:	11 24       	eor	r1, r1
    2f58:	91 1d       	adc	r25, r1
    2f5a:	08 95       	ret

00002f5c <memcpy>:
    2f5c:	fb 01       	movw	r30, r22
    2f5e:	dc 01       	movw	r26, r24
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <memcpy+0xa>
    2f62:	01 90       	ld	r0, Z+
    2f64:	0d 92       	st	X+, r0
    2f66:	41 50       	subi	r20, 0x01	; 1
    2f68:	50 40       	sbci	r21, 0x00	; 0
    2f6a:	d8 f7       	brcc	.-10     	; 0x2f62 <memcpy+0x6>
    2f6c:	08 95       	ret

00002f6e <_exit>:
    2f6e:	f8 94       	cli

00002f70 <__stop_program>:
    2f70:	ff cf       	rjmp	.-2      	; 0x2f70 <__stop_program>
