
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00802000  00002d56  00002dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000db0  008020be  008020be  00002eaa  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002eaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002edc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  00002f20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b84a  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e53  00000000  00000000  0000ec82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000096d5  00000000  00000000  00010ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b10  00000000  00000000  0001a1ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fcdf  00000000  00000000  0001acbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002573  00000000  00000000  0004a99b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0004cf10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bdd8  00000000  00000000  0004d348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_6>
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
      1e:	00 00       	nop
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_24>
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	61 c4       	rjmp	.+2242   	; 0x9e0 <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_83>
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__vector_125>
     1f8:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__vector_126>
     1fc:	b3 0b       	sbc	r27, r19
     1fe:	b7 0b       	sbc	r27, r23
     200:	f3 0b       	sbc	r31, r19
     202:	2f 0c       	add	r2, r15
     204:	38 0c       	add	r3, r8
     206:	3d 0c       	add	r3, r13
     208:	81 0c       	add	r8, r1
     20a:	86 0c       	add	r8, r6
     20c:	e3 0b       	sbc	r30, r19
     20e:	e5 0b       	sbc	r30, r21
     210:	e7 0b       	sbc	r30, r23
     212:	e9 0b       	sbc	r30, r25
     214:	eb 0b       	sbc	r30, r27
     216:	ed 0b       	sbc	r30, r29
     218:	ef 0b       	sbc	r30, r31
     21a:	f1 0b       	sbc	r31, r17
     21c:	1f 0c       	add	r1, r15
     21e:	21 0c       	add	r2, r1
     220:	23 0c       	add	r2, r3
     222:	25 0c       	add	r2, r5
     224:	27 0c       	add	r2, r7
     226:	29 0c       	add	r2, r9
     228:	2b 0c       	add	r2, r11
     22a:	2d 0c       	add	r2, r13
     22c:	49 0c       	add	r4, r9
     22e:	51 0c       	add	r5, r1
     230:	59 0c       	add	r5, r9
     232:	64 0c       	add	r6, r4
     234:	66 0c       	add	r6, r6
     236:	68 0c       	add	r6, r8
     238:	70 0c       	add	r7, r0
     23a:	78 0c       	add	r7, r8
     23c:	fe 0f       	add	r31, r30
     23e:	01 10       	cpse	r0, r1
     240:	04 10       	cpse	r0, r4
     242:	07 10       	cpse	r0, r7
     244:	0a 10       	cpse	r0, r10
     246:	0d 10       	cpse	r0, r13
     248:	10 10       	cpse	r1, r0

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	e6 e5       	ldi	r30, 0x56	; 86
     25e:	fd e2       	ldi	r31, 0x2D	; 45
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	ae 3b       	cpi	r26, 0xBE	; 190
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	ae eb       	ldi	r26, 0xBE	; 190
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	ae 36       	cpi	r26, 0x6E	; 110
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	4c d2       	rcall	.+1176   	; 0x716 <main>
     27e:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	5f d3       	rcall	.+1726   	; 0x954 <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <tiny_calibration_first_sof>:
     2f4:	e0 e7       	ldi	r30, 0x70	; 112
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	85 81       	ldd	r24, Z+5	; 0x05
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	85 83       	std	Z+5, r24	; 0x05
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	fa e0       	ldi	r31, 0x0A	; 10
     302:	8f eb       	ldi	r24, 0xBF	; 191
     304:	9d e5       	ldi	r25, 0x5D	; 93
     306:	86 a3       	std	Z+38, r24	; 0x26
     308:	97 a3       	std	Z+39, r25	; 0x27
     30a:	80 ee       	ldi	r24, 0xE0	; 224
     30c:	9e e2       	ldi	r25, 0x2E	; 46
     30e:	80 a3       	std	Z+32, r24	; 0x20
     310:	91 a3       	std	Z+33, r25	; 0x21
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
     316:	08 95       	ret

00000318 <tiny_calibration_maintain>:
     318:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     31c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     320:	81 3e       	cpi	r24, 0xE1	; 225
     322:	2e e2       	ldi	r18, 0x2E	; 46
     324:	92 07       	cpc	r25, r18
     326:	20 f0       	brcs	.+8      	; 0x330 <tiny_calibration_maintain+0x18>
     328:	20 91 72 22 	lds	r18, 0x2272	; 0x802272 <cali_value_negative_gradient>
     32c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     330:	80 3e       	cpi	r24, 0xE0	; 224
     332:	2e e2       	ldi	r18, 0x2E	; 46
     334:	92 07       	cpc	r25, r18
     336:	20 f4       	brcc	.+8      	; 0x340 <tiny_calibration_maintain+0x28>
     338:	20 91 6f 22 	lds	r18, 0x226F	; 0x80226f <cali_value_positive_gradient>
     33c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     340:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     344:	22 23       	and	r18, r18
     346:	31 f0       	breq	.+12     	; 0x354 <tiny_calibration_maintain+0x3c>
     348:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     352:	1d c0       	rjmp	.+58     	; 0x38e <tiny_calibration_maintain+0x76>
     354:	88 5f       	subi	r24, 0xF8	; 248
     356:	9a 42       	sbci	r25, 0x2A	; 42
     358:	81 3d       	cpi	r24, 0xD1	; 209
     35a:	97 40       	sbci	r25, 0x07	; 7
     35c:	c0 f0       	brcs	.+48     	; 0x38e <tiny_calibration_maintain+0x76>
     35e:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <__data_end>
     362:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <outOfRange>
     366:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <outOfRange+0x1>
     36a:	a0 91 c1 20 	lds	r26, 0x20C1	; 0x8020c1 <outOfRange+0x2>
     36e:	b0 91 c2 20 	lds	r27, 0x20C2	; 0x8020c2 <outOfRange+0x3>
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	a1 1d       	adc	r26, r1
     376:	b1 1d       	adc	r27, r1
     378:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <outOfRange>
     37c:	90 93 c0 20 	sts	0x20C0, r25	; 0x8020c0 <outOfRange+0x1>
     380:	a0 93 c1 20 	sts	0x20C1, r26	; 0x8020c1 <outOfRange+0x2>
     384:	b0 93 c2 20 	sts	0x20C2, r27	; 0x8020c2 <outOfRange+0x3>
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     38e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     392:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	b1 f4       	brne	.+44     	; 0x3c6 <tiny_calibration_maintain+0xae>
     39a:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     39e:	8f 3f       	cpi	r24, 0xFF	; 255
     3a0:	91 f0       	breq	.+36     	; 0x3c6 <tiny_calibration_maintain+0xae>
     3a2:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3a6:	81 11       	cpse	r24, r1
     3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <tiny_calibration_maintain+0x9e>
     3aa:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3ae:	81 50       	subi	r24, 0x01	; 1
     3b0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3b4:	08 95       	ret
     3b6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3ba:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3be:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3c2:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3c6:	08 95       	ret

000003c8 <tiny_calibration_safe_add>:
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	09 f4       	brne	.+2      	; 0x3ce <tiny_calibration_safe_add+0x6>
     3cc:	66 c0       	rjmp	.+204    	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
     3ce:	0c f0       	brlt	.+2      	; 0x3d2 <tiny_calibration_safe_add+0xa>
     3d0:	9c 01       	movw	r18, r24
     3d2:	99 23       	and	r25, r25
     3d4:	34 f4       	brge	.+12     	; 0x3e2 <tiny_calibration_safe_add+0x1a>
     3d6:	22 27       	eor	r18, r18
     3d8:	33 27       	eor	r19, r19
     3da:	28 1b       	sub	r18, r24
     3dc:	39 0b       	sbc	r19, r25
     3de:	51 e0       	ldi	r21, 0x01	; 1
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <tiny_calibration_safe_add+0x1c>
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	e8 e6       	ldi	r30, 0x68	; 104
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	83 81       	ldd	r24, Z+3	; 0x03
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <calTemp>
     3f0:	90 93 71 22 	sts	0x2271, r25	; 0x802271 <calTemp+0x1>
     3f4:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <calTemp>
     3f8:	90 91 71 22 	lds	r25, 0x2271	; 0x802271 <calTemp+0x1>
     3fc:	96 95       	lsr	r25
     3fe:	98 2f       	mov	r25, r24
     400:	88 27       	eor	r24, r24
     402:	97 95       	ror	r25
     404:	87 95       	ror	r24
     406:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <calTemp>
     40a:	90 93 71 22 	sts	0x2271, r25	; 0x802271 <calTemp+0x1>
     40e:	42 81       	ldd	r20, Z+2	; 0x02
     410:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <calTemp>
     414:	90 91 71 22 	lds	r25, 0x2271	; 0x802271 <calTemp+0x1>
     418:	84 0f       	add	r24, r20
     41a:	91 1d       	adc	r25, r1
     41c:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <calTemp>
     420:	90 93 71 22 	sts	0x2271, r25	; 0x802271 <calTemp+0x1>
     424:	00 00       	nop
     426:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <calTemp>
     42a:	90 91 71 22 	lds	r25, 0x2271	; 0x802271 <calTemp+0x1>
     42e:	82 17       	cp	r24, r18
     430:	93 07       	cpc	r25, r19
     432:	28 f4       	brcc	.+10     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     434:	10 92 70 22 	sts	0x2270, r1	; 0x802270 <calTemp>
     438:	10 92 71 22 	sts	0x2271, r1	; 0x802271 <calTemp+0x1>
     43c:	08 95       	ret
     43e:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <calTemp>
     442:	90 91 71 22 	lds	r25, 0x2271	; 0x802271 <calTemp+0x1>
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	81 15       	cp	r24, r1
     44c:	90 42       	sbci	r25, 0x20	; 32
     44e:	38 f0       	brcs	.+14     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	9f e1       	ldi	r25, 0x1F	; 31
     454:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <calTemp>
     458:	90 93 71 22 	sts	0x2271, r25	; 0x802271 <calTemp+0x1>
     45c:	08 95       	ret
     45e:	55 23       	and	r21, r21
     460:	59 f0       	breq	.+22     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
     462:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <calTemp>
     466:	90 91 71 22 	lds	r25, 0x2271	; 0x802271 <calTemp+0x1>
     46a:	82 1b       	sub	r24, r18
     46c:	93 0b       	sbc	r25, r19
     46e:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <calTemp>
     472:	90 93 71 22 	sts	0x2271, r25	; 0x802271 <calTemp+0x1>
     476:	0a c0       	rjmp	.+20     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
     478:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <calTemp>
     47c:	90 91 71 22 	lds	r25, 0x2271	; 0x802271 <calTemp+0x1>
     480:	28 0f       	add	r18, r24
     482:	39 1f       	adc	r19, r25
     484:	20 93 70 22 	sts	0x2270, r18	; 0x802270 <calTemp>
     488:	30 93 71 22 	sts	0x2271, r19	; 0x802271 <calTemp+0x1>
     48c:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <calTemp>
     490:	90 91 71 22 	lds	r25, 0x2271	; 0x802271 <calTemp+0x1>
     494:	8f 77       	andi	r24, 0x7F	; 127
     496:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     49a:	08 95       	ret

0000049c <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4a0:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4a4:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4a8:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4ac:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4b0:	9e 01       	movw	r18, r28
     4b2:	28 1b       	sub	r18, r24
     4b4:	39 0b       	sbc	r19, r25
     4b6:	20 93 73 22 	sts	0x2273, r18	; 0x802273 <gradient>
     4ba:	30 93 74 22 	sts	0x2274, r19	; 0x802274 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4be:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <__data_end>
     4c2:	81 11       	cpse	r24, r1
     4c4:	4d c0       	rjmp	.+154    	; 0x560 <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4c6:	80 91 73 22 	lds	r24, 0x2273	; 0x802273 <gradient>
     4ca:	90 91 74 22 	lds	r25, 0x2274	; 0x802274 <gradient+0x1>
     4ce:	8e 3c       	cpi	r24, 0xCE	; 206
     4d0:	9f 4f       	sbci	r25, 0xFF	; 255
     4d2:	e4 f4       	brge	.+56     	; 0x50c <tiny_calibration_find_values+0x70>
     4d4:	80 91 73 22 	lds	r24, 0x2273	; 0x802273 <gradient>
     4d8:	90 91 74 22 	lds	r25, 0x2274	; 0x802274 <gradient+0x1>
     4dc:	8b 36       	cpi	r24, 0x6B	; 107
     4de:	9f 4f       	sbci	r25, 0xFF	; 255
     4e0:	ac f0       	brlt	.+42     	; 0x50c <tiny_calibration_find_values+0x70>
			if(inarow){
     4e2:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     4e6:	88 23       	and	r24, r24
     4e8:	31 f0       	breq	.+12     	; 0x4f6 <tiny_calibration_find_values+0x5a>
				inarow--;
     4ea:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     4ee:	81 50       	subi	r24, 0x01	; 1
     4f0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     4f4:	35 c0       	rjmp	.+106    	; 0x560 <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     4f6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4fa:	80 93 72 22 	sts	0x2272, r24	; 0x802272 <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <__data_end>
				inarow = NUM_INAROW;
     504:	8c e0       	ldi	r24, 0x0C	; 12
     506:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     50a:	2a c0       	rjmp	.+84     	; 0x560 <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     50c:	8c e0       	ldi	r24, 0x0C	; 12
     50e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     512:	80 91 73 22 	lds	r24, 0x2273	; 0x802273 <gradient>
     516:	90 91 74 22 	lds	r25, 0x2274	; 0x802274 <gradient+0x1>
     51a:	8a 36       	cpi	r24, 0x6A	; 106
     51c:	9f 4f       	sbci	r25, 0xFF	; 255
     51e:	1c f0       	brlt	.+6      	; 0x526 <tiny_calibration_find_values+0x8a>
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	9f ef       	ldi	r25, 0xFF	; 255
     524:	02 c0       	rjmp	.+4      	; 0x52a <tiny_calibration_find_values+0x8e>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	80 93 6d 22 	sts	0x226D, r24	; 0x80226d <calChange>
     52e:	90 93 6e 22 	sts	0x226E, r25	; 0x80226e <calChange+0x1>
			calChange -= gradient / 48;
     532:	80 91 73 22 	lds	r24, 0x2273	; 0x802273 <gradient>
     536:	90 91 74 22 	lds	r25, 0x2274	; 0x802274 <gradient+0x1>
     53a:	20 91 6d 22 	lds	r18, 0x226D	; 0x80226d <calChange>
     53e:	30 91 6e 22 	lds	r19, 0x226E	; 0x80226e <calChange+0x1>
     542:	60 e3       	ldi	r22, 0x30	; 48
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__divmodhi4>
     54a:	26 1b       	sub	r18, r22
     54c:	37 0b       	sbc	r19, r23
     54e:	20 93 6d 22 	sts	0x226D, r18	; 0x80226d <calChange>
     552:	30 93 6e 22 	sts	0x226E, r19	; 0x80226e <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     556:	80 91 6d 22 	lds	r24, 0x226D	; 0x80226d <calChange>
     55a:	90 91 6e 22 	lds	r25, 0x226E	; 0x80226e <calChange+0x1>
     55e:	34 df       	rcall	.-408    	; 0x3c8 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     560:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <__data_end>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	29 f5       	brne	.+74     	; 0x5b2 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     568:	80 91 73 22 	lds	r24, 0x2273	; 0x802273 <gradient>
     56c:	90 91 74 22 	lds	r25, 0x2274	; 0x802274 <gradient+0x1>
     570:	c3 97       	sbiw	r24, 0x33	; 51
     572:	94 f0       	brlt	.+36     	; 0x598 <tiny_calibration_find_values+0xfc>
			if(inarow){
     574:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     578:	88 23       	and	r24, r24
     57a:	31 f0       	breq	.+12     	; 0x588 <tiny_calibration_find_values+0xec>
				inarow--;
     57c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     580:	81 50       	subi	r24, 0x01	; 1
     582:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     586:	15 c0       	rjmp	.+42     	; 0x5b2 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     588:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     58c:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <__data_end>
     596:	0d c0       	rjmp	.+26     	; 0x5b2 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     598:	80 91 73 22 	lds	r24, 0x2273	; 0x802273 <gradient>
     59c:	90 91 74 22 	lds	r25, 0x2274	; 0x802274 <gradient+0x1>
     5a0:	87 39       	cpi	r24, 0x97	; 151
     5a2:	91 05       	cpc	r25, r1
     5a4:	1c f4       	brge	.+6      	; 0x5ac <tiny_calibration_find_values+0x110>
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <tiny_calibration_find_values+0x114>
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	9f ef       	ldi	r25, 0xFF	; 255
     5b0:	0b df       	rcall	.-490    	; 0x3c8 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5b2:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5b6:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5c0:	86 17       	cp	r24, r22
     5c2:	97 07       	cpc	r25, r23
     5c4:	79 f0       	breq	.+30     	; 0x5e4 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5c6:	68 17       	cp	r22, r24
     5c8:	79 07       	cpc	r23, r25
     5ca:	28 f4       	brcc	.+10     	; 0x5d6 <magnitude_difference+0x16>
     5cc:	9c 01       	movw	r18, r24
     5ce:	26 1b       	sub	r18, r22
     5d0:	37 0b       	sbc	r19, r23
     5d2:	b9 01       	movw	r22, r18
     5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5d6:	86 17       	cp	r24, r22
     5d8:	97 07       	cpc	r25, r23
     5da:	18 f4       	brcc	.+6      	; 0x5e2 <magnitude_difference+0x22>
     5dc:	68 1b       	sub	r22, r24
     5de:	79 0b       	sbc	r23, r25
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <magnitude_difference+0x28>
     5e2:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	86 2f       	mov	r24, r22
     5ea:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     5ec:	08 95       	ret

000005ee <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     5f2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     5f6:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     5fa:	89 2b       	or	r24, r25
     5fc:	51 f0       	breq	.+20     	; 0x612 <tiny_calibration_layer2+0x24>
		layer2_counter--;
     5fe:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     602:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     60c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     610:	65 c0       	rjmp	.+202    	; 0x6dc <tiny_calibration_layer2+0xee>
	}
	layer2_counter = LAYER2_INTERVAL;
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     61a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     61e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     622:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	09 f4       	brne	.+2      	; 0x62c <tiny_calibration_layer2+0x3e>
     62a:	58 c0       	rjmp	.+176    	; 0x6dc <tiny_calibration_layer2+0xee>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     62c:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     630:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	if(magnitude_difference(TRFCNT_temp, median_TRFCNT) > 200){
     634:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     638:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     63c:	ce 01       	movw	r24, r28
     63e:	c0 df       	rcall	.-128    	; 0x5c0 <magnitude_difference>
     640:	89 3c       	cpi	r24, 0xC9	; 201
     642:	91 05       	cpc	r25, r1
     644:	00 f1       	brcs	.+64     	; 0x686 <tiny_calibration_layer2+0x98>
		TRFCNT_temp = (TRFCNT_temp + HALFPACKET_SIZE) % PACKET_SIZE;
     646:	ae 01       	movw	r20, r28
     648:	49 58       	subi	r20, 0x89	; 137
     64a:	5e 4f       	sbci	r21, 0xFE	; 254
     64c:	9a 01       	movw	r18, r20
     64e:	36 95       	lsr	r19
     650:	27 95       	ror	r18
     652:	a1 eb       	ldi	r26, 0xB1	; 177
     654:	bb e2       	ldi	r27, 0x2B	; 43
     656:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__umulhisi3>
     65a:	ec 01       	movw	r28, r24
     65c:	00 24       	eor	r0, r0
     65e:	cc 0f       	add	r28, r28
     660:	dd 1f       	adc	r29, r29
     662:	00 1c       	adc	r0, r0
     664:	cc 0f       	add	r28, r28
     666:	dd 1f       	adc	r29, r29
     668:	00 1c       	adc	r0, r0
     66a:	cd 2f       	mov	r28, r29
     66c:	d0 2d       	mov	r29, r0
     66e:	2e ee       	ldi	r18, 0xEE	; 238
     670:	32 e0       	ldi	r19, 0x02	; 2
     672:	c2 9f       	mul	r28, r18
     674:	c0 01       	movw	r24, r0
     676:	c3 9f       	mul	r28, r19
     678:	90 0d       	add	r25, r0
     67a:	d2 9f       	mul	r29, r18
     67c:	90 0d       	add	r25, r0
     67e:	11 24       	eor	r1, r1
     680:	ea 01       	movw	r28, r20
     682:	c8 1b       	sub	r28, r24
     684:	d9 0b       	sbc	r29, r25
	}
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     686:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     68a:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68e:	8c 17       	cp	r24, r28
     690:	9d 07       	cpc	r25, r29
     692:	78 f4       	brcc	.+30     	; 0x6b2 <tiny_calibration_layer2+0xc4>
     694:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     698:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     69c:	ce 01       	movw	r24, r28
     69e:	90 df       	rcall	.-224    	; 0x5c0 <magnitude_difference>
     6a0:	02 97       	sbiw	r24, 0x02	; 2
     6a2:	38 f0       	brcs	.+14     	; 0x6b2 <tiny_calibration_layer2+0xc4>
		TC_CALI.PERBUF = 24000;
     6a4:	80 ec       	ldi	r24, 0xC0	; 192
     6a6:	9d e5       	ldi	r25, 0x5D	; 93
     6a8:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6ac:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6b0:	15 c0       	rjmp	.+42     	; 0x6dc <tiny_calibration_layer2+0xee>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6b2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6b6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6ba:	c8 17       	cp	r28, r24
     6bc:	d9 07       	cpc	r29, r25
     6be:	70 f4       	brcc	.+28     	; 0x6dc <tiny_calibration_layer2+0xee>
     6c0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6c4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6c8:	ce 01       	movw	r24, r28
     6ca:	7a df       	rcall	.-268    	; 0x5c0 <magnitude_difference>
     6cc:	02 97       	sbiw	r24, 0x02	; 2
     6ce:	30 f0       	brcs	.+12     	; 0x6dc <tiny_calibration_layer2+0xee>
		TC_CALI.PERBUF = 23999;
     6d0:	8f eb       	ldi	r24, 0xBF	; 191
     6d2:	9d e5       	ldi	r25, 0x5D	; 93
     6d4:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6d8:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6e2:	ac 01       	movw	r20, r24
     6e4:	46 0f       	add	r20, r22
     6e6:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6e8:	86 1b       	sub	r24, r22
     6ea:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6ec:	e0 e0       	ldi	r30, 0x00	; 0
     6ee:	fa e0       	ldi	r31, 0x0A	; 10
     6f0:	20 a1       	ldd	r18, Z+32	; 0x20
     6f2:	31 a1       	ldd	r19, Z+33	; 0x21
     6f4:	24 17       	cp	r18, r20
     6f6:	35 07       	cpc	r19, r21
     6f8:	d8 f7       	brcc	.-10     	; 0x6f0 <tiny_calibration_synchronise_phase+0xe>
     6fa:	20 a1       	ldd	r18, Z+32	; 0x20
     6fc:	31 a1       	ldd	r19, Z+33	; 0x21
     6fe:	82 17       	cp	r24, r18
     700:	93 07       	cpc	r25, r19
     702:	b0 f7       	brcc	.-20     	; 0x6f0 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     704:	08 95       	ret

00000706 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     706:	e0 e8       	ldi	r30, 0x80	; 128
     708:	f6 e0       	ldi	r31, 0x06	; 6
     70a:	8f e0       	ldi	r24, 0x0F	; 15
     70c:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     70e:	85 e0       	ldi	r24, 0x05	; 5
     710:	84 83       	std	Z+4, r24	; 0x04
     712:	08 95       	ret

00000714 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     714:	08 95       	ret

00000716 <main>:
volatile unsigned int median_TRFCNT = 65535;

volatile unsigned char swap_iso = 0;

int main(void){
	irq_initialize_vectors();
     716:	87 e0       	ldi	r24, 0x07	; 7
     718:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     71c:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     71e:	b2 dd       	rcall	.-1180   	; 0x284 <tiny_calibration_init>
		
	board_init();
     720:	f9 df       	rcall	.-14     	; 0x714 <board_init>
	udc_start();
     722:	a1 d7       	rcall	.+3906   	; 0x1666 <udc_start>
	tiny_dac_setup();
     724:	70 d1       	rcall	.+736    	; 0xa06 <tiny_dac_setup>
	tiny_dma_setup();
     726:	93 d1       	rcall	.+806    	; 0xa4e <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	1c d1       	rcall	.+568    	; 0x966 <tiny_adc_setup>
	tiny_adc_pid_setup();
     72e:	08 d1       	rcall	.+528    	; 0x940 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     730:	8c e0       	ldi	r24, 0x0C	; 12
     732:	fb d0       	rcall	.+502    	; 0x92a <tiny_adc_ch1setup>
	tiny_timer_setup();
     734:	1f d5       	rcall	.+2622   	; 0x1174 <tiny_timer_setup>
	tiny_uart_setup();
     736:	da d5       	rcall	.+2996   	; 0x12ec <tiny_uart_setup>
	tiny_spi_setup();
     738:	f1 d5       	rcall	.+3042   	; 0x131c <tiny_spi_setup>
	tiny_dig_setup();
     73a:	e5 df       	rcall	.-54     	; 0x706 <tiny_dig_setup>
     73c:	80 91 76 22 	lds	r24, 0x2276	; 0x802276 <debug_counter>
     740:	90 91 77 22 	lds	r25, 0x2277	; 0x802277 <debug_counter+0x1>
     744:	a0 91 78 22 	lds	r26, 0x2278	; 0x802278 <debug_counter+0x2>
     748:	b0 91 79 22 	lds	r27, 0x2279	; 0x802279 <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	a1 1d       	adc	r26, r1
     750:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	21 ee       	ldi	r18, 0xE1	; 225
     756:	92 07       	cpc	r25, r18
     758:	25 ef       	ldi	r18, 0xF5	; 245
     75a:	a2 07       	cpc	r26, r18
     75c:	25 e0       	ldi	r18, 0x05	; 5
     75e:	b2 07       	cpc	r27, r18
     760:	18 f0       	brcs	.+6      	; 0x768 <main+0x52>
			debug_counter = 0;
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     784:	e3 cf       	rjmp	.-58     	; 0x74c <main+0x36>

00000786 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     786:	08 95       	ret

00000788 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     788:	08 95       	ret

0000078a <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
	cli();
     78e:	f8 94       	cli
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     790:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     794:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     798:	86 34       	cpi	r24, 0x46	; 70
     79a:	91 40       	sbci	r25, 0x01	; 1
     79c:	80 f0       	brcs	.+32     	; 0x7be <main_sof_action+0x34>
     79e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     7a2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     7a6:	89 3a       	cpi	r24, 0xA9	; 169
     7a8:	91 40       	sbci	r25, 0x01	; 1
     7aa:	48 f4       	brcc	.+18     	; 0x7be <main_sof_action+0x34>
		currentTrfcnt = DMA.CH0.TRFCNT;
     7ac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     7b0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     7b4:	80 93 66 2e 	sts	0x2E66, r24	; 0x802e66 <currentTrfcnt>
     7b8:	90 93 67 2e 	sts	0x2E67, r25	; 0x802e67 <currentTrfcnt+0x1>
		asm("nop");
     7bc:	00 00       	nop
	}
	if(firstFrame){
     7be:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <firstFrame>
     7c2:	88 23       	and	r24, r24
     7c4:	41 f0       	breq	.+16     	; 0x7d6 <main_sof_action+0x4c>
		tiny_calibration_first_sof();
     7c6:	96 dd       	rcall	.-1236   	; 0x2f4 <tiny_calibration_first_sof>
		firstFrame = 0;
     7c8:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <firstFrame>
		tcinit = 1;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <tcinit>
		sei();
     7d2:	78 94       	sei
		return;
     7d4:	85 c0       	rjmp	.+266    	; 0x8e0 <main_sof_action+0x156>
	}
	else{
		if(tcinit){
     7d6:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <tcinit>
     7da:	88 23       	and	r24, r24
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <main_sof_action+0x56>
     7de:	66 c0       	rjmp	.+204    	; 0x8ac <main_sof_action+0x122>
			if(calibration_values_found == 0x03){
     7e0:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <__data_end>
     7e4:	83 30       	cpi	r24, 0x03	; 3
     7e6:	91 f5       	brne	.+100    	; 0x84c <main_sof_action+0xc2>
				swap_iso = 1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <swap_iso>
				udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, NULL);
     7ee:	20 91 cb 20 	lds	r18, 0x20CB	; 0x8020cb <usb_state>
     7f2:	c7 e7       	ldi	r28, 0x77	; 119
     7f4:	d1 e0       	ldi	r29, 0x01	; 1
     7f6:	2c 9f       	mul	r18, r28
     7f8:	c0 01       	movw	r24, r0
     7fa:	2d 9f       	mul	r18, r29
     7fc:	90 0d       	add	r25, r0
     7fe:	11 24       	eor	r1, r1
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	6a ef       	ldi	r22, 0xFA	; 250
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	86 57       	subi	r24, 0x76	; 118
     80a:	99 4d       	sbci	r25, 0xD9	; 217
     80c:	1d d6       	rcall	.+3130   	; 0x1448 <udi_vendor_iso_in_run>
				udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, NULL);
     80e:	20 91 cb 20 	lds	r18, 0x20CB	; 0x8020cb <usb_state>
     812:	2c 9f       	mul	r18, r28
     814:	c0 01       	movw	r24, r0
     816:	2d 9f       	mul	r18, r29
     818:	90 0d       	add	r25, r0
     81a:	11 24       	eor	r1, r1
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	6a ef       	ldi	r22, 0xFA	; 250
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	8c 57       	subi	r24, 0x7C	; 124
     826:	98 4d       	sbci	r25, 0xD8	; 216
     828:	1b d6       	rcall	.+3126   	; 0x1460 <udi_vendor_iso_in_run2>
				udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, NULL);
     82a:	20 91 cb 20 	lds	r18, 0x20CB	; 0x8020cb <usb_state>
     82e:	2c 9f       	mul	r18, r28
     830:	c0 01       	movw	r24, r0
     832:	2d 9f       	mul	r18, r29
     834:	90 0d       	add	r25, r0
     836:	11 24       	eor	r1, r1
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	6a ef       	ldi	r22, 0xFA	; 250
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	82 58       	subi	r24, 0x82	; 130
     842:	97 4d       	sbci	r25, 0xD7	; 215
     844:	19 d6       	rcall	.+3122   	; 0x1478 <udi_vendor_iso_in_run3>
				tiny_calibration_maintain();
     846:	68 dd       	rcall	.-1328   	; 0x318 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     848:	d2 de       	rcall	.-604    	; 0x5ee <tiny_calibration_layer2>
     84a:	01 c0       	rjmp	.+2      	; 0x84e <main_sof_action+0xc4>
				
			} else tiny_calibration_find_values();
     84c:	27 de       	rcall	.-946    	; 0x49c <tiny_calibration_find_values>
			if(debug_divider == DEBUG_DIVISION){
     84e:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <debug_divider>
     852:	8f 37       	cpi	r24, 0x7F	; 127
     854:	31 f5       	brne	.+76     	; 0x8a2 <main_sof_action+0x118>
				debug_divider = 0;
     856:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <debug_divider>
				cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     85a:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <cntCntCnt>
     85e:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <cntCntCnt+0x1>
     862:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     866:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     86a:	ee 0f       	add	r30, r30
     86c:	ff 1f       	adc	r31, r31
     86e:	ea 59       	subi	r30, 0x9A	; 154
     870:	f3 4d       	sbci	r31, 0xD3	; 211
     872:	80 83       	st	Z, r24
     874:	91 83       	std	Z+1, r25	; 0x01
				if(cntCntCnt == (CNT_CNT_MAX - 1)){
     876:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <cntCntCnt>
     87a:	90 91 c6 20 	lds	r25, 0x20C6	; 0x8020c6 <cntCntCnt+0x1>
     87e:	8f 3f       	cpi	r24, 0xFF	; 255
     880:	91 05       	cpc	r25, r1
     882:	29 f4       	brne	.+10     	; 0x88e <main_sof_action+0x104>
					cntCntCnt = 0;
     884:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <cntCntCnt>
     888:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <cntCntCnt+0x1>
     88c:	0f c0       	rjmp	.+30     	; 0x8ac <main_sof_action+0x122>
				}
				else cntCntCnt++;
     88e:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <cntCntCnt>
     892:	90 91 c6 20 	lds	r25, 0x20C6	; 0x8020c6 <cntCntCnt+0x1>
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <cntCntCnt>
     89c:	90 93 c6 20 	sts	0x20C6, r25	; 0x8020c6 <cntCntCnt+0x1>
     8a0:	05 c0       	rjmp	.+10     	; 0x8ac <main_sof_action+0x122>
			}
			else debug_divider++;
     8a2:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <debug_divider>
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <debug_divider>
		}
	}
	
	if(debugOnNextEnd){
     8ac:	80 91 c7 20 	lds	r24, 0x20C7	; 0x8020c7 <debugOnNextEnd>
     8b0:	88 23       	and	r24, r24
     8b2:	51 f0       	breq	.+20     	; 0x8c8 <main_sof_action+0x13e>
		currentTrfcnt = DMA.CH0.TRFCNT;
     8b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8bc:	80 93 66 2e 	sts	0x2E66, r24	; 0x802e66 <currentTrfcnt>
     8c0:	90 93 67 2e 	sts	0x2E67, r25	; 0x802e67 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     8c4:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <debugOnNextEnd>
	}
	usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     8c8:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8cc:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	27 37       	cpi	r18, 0x77	; 119
     8d4:	31 40       	sbci	r19, 0x01	; 1
     8d6:	08 f0       	brcs	.+2      	; 0x8da <main_sof_action+0x150>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <usb_state>
	sei();
     8de:	78 94       	sei
	return;
}
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <main_vendor_enable>:

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <main_b_vendor_enable>
	firstFrame = 1;
     8ec:	80 93 c9 20 	sts	0x20C9, r24	; 0x8020c9 <firstFrame>
	//udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	//udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
	//udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
	return true;
}
     8f0:	08 95       	ret

000008f2 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     8f2:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <main_b_vendor_enable>
     8f6:	08 95       	ret

000008f8 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	08 95       	ret

000008fc <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	08 95       	ret

00000900 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     900:	e0 e0       	ldi	r30, 0x00	; 0
     902:	f2 e0       	ldi	r31, 0x02	; 2
     904:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     906:	98 2f       	mov	r25, r24
     908:	9c 71       	andi	r25, 0x1C	; 28
     90a:	93 68       	ori	r25, 0x83	; 131
     90c:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     90e:	88 23       	and	r24, r24
     910:	1c f4       	brge	.+6      	; 0x918 <tiny_adc_ch0setup+0x18>
     912:	90 e1       	ldi	r25, 0x10	; 16
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	02 c0       	rjmp	.+4      	; 0x91c <tiny_adc_ch0setup+0x1c>
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	89 2b       	or	r24, r25
     91e:	e0 e0       	ldi	r30, 0x00	; 0
     920:	f2 e0       	ldi	r31, 0x02	; 2
     922:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     924:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     926:	16 a2       	std	Z+38, r1	; 0x26
     928:	08 95       	ret

0000092a <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     92a:	e0 e0       	ldi	r30, 0x00	; 0
     92c:	f2 e0       	ldi	r31, 0x02	; 2
     92e:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     930:	83 68       	ori	r24, 0x83	; 131
     932:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     934:	80 e1       	ldi	r24, 0x10	; 16
     936:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_HI_gc;
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	82 ab       	std	Z+50, r24	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     93c:	16 aa       	std	Z+54, r1	; 0x36
     93e:	08 95       	ret

00000940 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     940:	e0 e0       	ldi	r30, 0x00	; 0
     942:	f2 e0       	ldi	r31, 0x02	; 2
     944:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     946:	83 e8       	ldi	r24, 0x83	; 131
     948:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     94a:	8f e2       	ldi	r24, 0x2F	; 47
     94c:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     94e:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     950:	16 a6       	std	Z+46, r1	; 0x2e
     952:	08 95       	ret

00000954 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     954:	aa ec       	ldi	r26, 0xCA	; 202
     956:	b1 e0       	ldi	r27, 0x01	; 1
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     95c:	e8 2f       	mov	r30, r24
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     962:	1c 92       	st	X, r1

	return( result );
}
     964:	08 95       	ret

00000966 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     96a:	e0 e7       	ldi	r30, 0x70	; 112
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	91 81       	ldd	r25, Z+1	; 0x01
     970:	9d 7f       	andi	r25, 0xFD	; 253
     972:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     974:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     978:	62 30       	cpi	r22, 0x02	; 2
     97a:	31 f1       	breq	.+76     	; 0x9c8 <tiny_adc_setup+0x62>
     97c:	e0 e0       	ldi	r30, 0x00	; 0
     97e:	f2 e0       	ldi	r31, 0x02	; 2
     980:	9c e1       	ldi	r25, 0x1C	; 28
     982:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     984:	90 e4       	ldi	r25, 0x40	; 64
     986:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     988:	81 11       	cpse	r24, r1
     98a:	02 c0       	rjmp	.+4      	; 0x990 <tiny_adc_setup+0x2a>
     98c:	80 e4       	ldi	r24, 0x40	; 64
     98e:	01 c0       	rjmp	.+2      	; 0x992 <tiny_adc_setup+0x2c>
     990:	80 ec       	ldi	r24, 0xC0	; 192
     992:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     996:	61 30       	cpi	r22, 0x01	; 1
     998:	11 f0       	breq	.+4      	; 0x99e <tiny_adc_setup+0x38>
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <tiny_adc_setup+0x3a>
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	c0 e0       	ldi	r28, 0x00	; 0
     9a2:	d2 e0       	ldi	r29, 0x02	; 2
     9a4:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     9a6:	80 e2       	ldi	r24, 0x20	; 32
     9a8:	d5 df       	rcall	.-86     	; 0x954 <ReadCalibrationByte>
     9aa:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     9ac:	81 e2       	ldi	r24, 0x21	; 33
     9ae:	d2 df       	rcall	.-92     	; 0x954 <ReadCalibrationByte>
     9b0:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     9b2:	18 8e       	std	Y+24, r1	; 0x18
     9b4:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     9ba:	c2 df       	rcall	.-124    	; 0x940 <tiny_adc_pid_setup>
     9bc:	0e c0       	rjmp	.+28     	; 0x9da <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     9be:	80 ec       	ldi	r24, 0xC0	; 192
     9c0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	ec cf       	rjmp	.-40     	; 0x9a0 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     9c8:	e0 e0       	ldi	r30, 0x00	; 0
     9ca:	f2 e0       	ldi	r31, 0x02	; 2
     9cc:	9e e1       	ldi	r25, 0x1E	; 30
     9ce:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     9d0:	90 e4       	ldi	r25, 0x40	; 64
     9d2:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     9d4:	81 11       	cpse	r24, r1
     9d6:	f3 cf       	rjmp	.-26     	; 0x9be <tiny_adc_setup+0x58>
     9d8:	d9 cf       	rjmp	.-78     	; 0x98c <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     9e0:	1f 92       	push	r1
     9e2:	0f 92       	push	r0
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	0f 92       	push	r0
     9e8:	11 24       	eor	r1, r1
     9ea:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     9fa:	8f 91       	pop	r24
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     a0a:	e0 e7       	ldi	r30, 0x70	; 112
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	82 81       	ldd	r24, Z+2	; 0x02
     a10:	8b 7f       	andi	r24, 0xFB	; 251
     a12:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     a14:	c0 e2       	ldi	r28, 0x20	; 32
     a16:	d3 e0       	ldi	r29, 0x03	; 3
     a18:	8d e0       	ldi	r24, 0x0D	; 13
     a1a:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     a1c:	80 e4       	ldi	r24, 0x40	; 64
     a1e:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     a20:	89 e0       	ldi	r24, 0x09	; 9
     a22:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     a24:	83 e3       	ldi	r24, 0x33	; 51
     a26:	96 df       	rcall	.-212    	; 0x954 <ReadCalibrationByte>
     a28:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     a2a:	82 e3       	ldi	r24, 0x32	; 50
     a2c:	93 df       	rcall	.-218    	; 0x954 <ReadCalibrationByte>
     a2e:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     a30:	87 e3       	ldi	r24, 0x37	; 55
     a32:	90 df       	rcall	.-224    	; 0x954 <ReadCalibrationByte>
     a34:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     a36:	86 e3       	ldi	r24, 0x36	; 54
     a38:	8d df       	rcall	.-230    	; 0x954 <ReadCalibrationByte>
     a3a:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     a3c:	e0 e2       	ldi	r30, 0x20	; 32
     a3e:	f6 e0       	ldi	r31, 0x06	; 6
     a40:	80 81       	ld	r24, Z
     a42:	83 60       	ori	r24, 0x03	; 3
     a44:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     a46:	14 82       	std	Z+4, r1	; 0x04
	
	

     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     a4e:	e0 e7       	ldi	r30, 0x70	; 112
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	8e 7f       	andi	r24, 0xFE	; 254
     a56:	80 83       	st	Z, r24
     a58:	83 e8       	ldi	r24, 0x83	; 131
     a5a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     a5e:	08 95       	ret

00000a60 <tiny_dma_flush>:
     a60:	e0 e0       	ldi	r30, 0x00	; 0
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	10 8a       	std	Z+16, r1	; 0x10
     a66:	80 e4       	ldi	r24, 0x40	; 64
     a68:	80 8b       	std	Z+16, r24	; 0x10
     a6a:	10 a2       	std	Z+32, r1	; 0x20
     a6c:	80 a3       	std	Z+32, r24	; 0x20
     a6e:	10 aa       	std	Z+48, r1	; 0x30
     a70:	80 ab       	std	Z+48, r24	; 0x30
     a72:	e0 e4       	ldi	r30, 0x40	; 64
     a74:	f1 e0       	ldi	r31, 0x01	; 1
     a76:	10 82       	st	Z, r1
     a78:	80 83       	st	Z, r24
     a7a:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <b1_state>
     a7e:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <b2_state>
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <usb_state>
     a88:	08 95       	ret

00000a8a <tiny_dma_set_mode_0>:
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	f8 94       	cli
     a90:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     a94:	e5 df       	rcall	.-54     	; 0xa60 <tiny_dma_flush>
     a96:	c0 e0       	ldi	r28, 0x00	; 0
     a98:	d1 e0       	ldi	r29, 0x01	; 1
     a9a:	1e aa       	std	Y+54, r1	; 0x36
     a9c:	84 e2       	ldi	r24, 0x24	; 36
     a9e:	88 ab       	std	Y+48, r24	; 0x30
     aa0:	19 aa       	std	Y+49, r1	; 0x31
     aa2:	49 e5       	ldi	r20, 0x59	; 89
     aa4:	4a ab       	std	Y+50, r20	; 0x32
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	9b ab       	std	Y+51, r25	; 0x33
     aaa:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     aae:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     ab2:	2c ab       	std	Y+52, r18	; 0x34
     ab4:	3d ab       	std	Y+53, r19	; 0x35
     ab6:	2a e8       	ldi	r18, 0x8A	; 138
     ab8:	34 e2       	ldi	r19, 0x24	; 36
     aba:	28 af       	std	Y+56, r18	; 0x38
     abc:	39 af       	std	Y+57, r19	; 0x39
     abe:	1a ae       	std	Y+58, r1	; 0x3a
     ac0:	2b e3       	ldi	r18, 0x3B	; 59
     ac2:	2c af       	std	Y+60, r18	; 0x3c
     ac4:	23 e0       	ldi	r18, 0x03	; 3
     ac6:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     aca:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ace:	38 a9       	ldd	r19, Y+48	; 0x30
     ad0:	30 68       	ori	r19, 0x80	; 128
     ad2:	38 ab       	std	Y+48, r19	; 0x30
     ad4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ad8:	e0 e4       	ldi	r30, 0x40	; 64
     ada:	f1 e0       	ldi	r31, 0x01	; 1
     adc:	80 83       	st	Z, r24
     ade:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ae2:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ae6:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     aea:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     aee:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     af2:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     af6:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	52 e2       	ldi	r21, 0x22	; 34
     afe:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b02:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b06:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b0a:	39 e3       	ldi	r19, 0x39	; 57
     b0c:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b10:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b14:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b18:	20 81       	ld	r18, Z
     b1a:	20 68       	ori	r18, 0x80	; 128
     b1c:	20 83       	st	Z, r18
     b1e:	18 8a       	std	Y+16, r1	; 0x10
     b20:	20 e4       	ldi	r18, 0x40	; 64
     b22:	28 8b       	std	Y+16, r18	; 0x10
     b24:	88 8b       	std	Y+16, r24	; 0x10
     b26:	99 8b       	std	Y+17, r25	; 0x11
     b28:	25 e9       	ldi	r18, 0x95	; 149
     b2a:	2a 8b       	std	Y+18, r18	; 0x12
     b2c:	20 e1       	ldi	r18, 0x10	; 16
     b2e:	2b 8b       	std	Y+19, r18	; 0x13
     b30:	2e ee       	ldi	r18, 0xEE	; 238
     b32:	32 e0       	ldi	r19, 0x02	; 2
     b34:	2c 8b       	std	Y+20, r18	; 0x14
     b36:	3d 8b       	std	Y+21, r19	; 0x15
     b38:	88 8f       	std	Y+24, r24	; 0x18
     b3a:	99 8f       	std	Y+25, r25	; 0x19
     b3c:	1a 8e       	std	Y+26, r1	; 0x1a
     b3e:	8a e8       	ldi	r24, 0x8A	; 138
     b40:	96 e2       	ldi	r25, 0x26	; 38
     b42:	8c 8f       	std	Y+28, r24	; 0x1c
     b44:	9d 8f       	std	Y+29, r25	; 0x1d
     b46:	1e 8e       	std	Y+30, r1	; 0x1e
     b48:	68 ec       	ldi	r22, 0xC8	; 200
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	84 ef       	ldi	r24, 0xF4	; 244
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	c8 dd       	rcall	.-1136   	; 0x6e2 <tiny_calibration_synchronise_phase>
     b52:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <b1_state>
     b56:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <b2_state>
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <usb_state>
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	9f ef       	ldi	r25, 0xFF	; 255
     b64:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     b68:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     b72:	88 89       	ldd	r24, Y+16	; 0x10
     b74:	80 68       	ori	r24, 0x80	; 128
     b76:	88 8b       	std	Y+16, r24	; 0x10
     b78:	78 94       	sei
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <tiny_dma_set_mode_1>:
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
     b8a:	6a df       	rcall	.-300    	; 0xa60 <tiny_dma_flush>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f1 e0       	ldi	r31, 0x01	; 1
     b90:	10 aa       	std	Z+48, r1	; 0x30
     b92:	80 e4       	ldi	r24, 0x40	; 64
     b94:	80 ab       	std	Z+48, r24	; 0x30
     b96:	94 e0       	ldi	r25, 0x04	; 4
     b98:	90 ab       	std	Z+48, r25	; 0x30
     b9a:	11 aa       	std	Z+49, r1	; 0x31
     b9c:	12 aa       	std	Z+50, r1	; 0x32
     b9e:	5b e4       	ldi	r21, 0x4B	; 75
     ba0:	53 ab       	std	Z+51, r21	; 0x33
     ba2:	14 aa       	std	Z+52, r1	; 0x34
     ba4:	15 aa       	std	Z+53, r1	; 0x35
     ba6:	16 aa       	std	Z+54, r1	; 0x36
     ba8:	2a e0       	ldi	r18, 0x0A	; 10
     baa:	30 e2       	ldi	r19, 0x20	; 32
     bac:	20 af       	std	Z+56, r18	; 0x38
     bae:	31 af       	std	Z+57, r19	; 0x39
     bb0:	12 ae       	std	Z+58, r1	; 0x3a
     bb2:	40 ea       	ldi	r20, 0xA0	; 160
     bb4:	44 af       	std	Z+60, r20	; 0x3c
     bb6:	38 e0       	ldi	r19, 0x08	; 8
     bb8:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     bbc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bc0:	80 a9       	ldd	r24, Z+48	; 0x30
     bc2:	80 6a       	ori	r24, 0xA0	; 160
     bc4:	80 ab       	std	Z+48, r24	; 0x30
     bc6:	85 e5       	ldi	r24, 0x55	; 85
     bc8:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     bcc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     bd0:	a0 e4       	ldi	r26, 0x40	; 64
     bd2:	b1 e0       	ldi	r27, 0x01	; 1
     bd4:	d4 e2       	ldi	r29, 0x24	; 36
     bd6:	dc 93       	st	X, r29
     bd8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bdc:	89 e5       	ldi	r24, 0x59	; 89
     bde:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     be2:	c2 e0       	ldi	r28, 0x02	; 2
     be4:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     be8:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     bec:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     bf0:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bf4:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     bf8:	6a e8       	ldi	r22, 0x8A	; 138
     bfa:	74 e2       	ldi	r23, 0x24	; 36
     bfc:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c00:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c04:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c08:	8b e3       	ldi	r24, 0x3B	; 59
     c0a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c14:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c18:	2c 91       	ld	r18, X
     c1a:	20 68       	ori	r18, 0x80	; 128
     c1c:	2c 93       	st	X, r18
     c1e:	90 8b       	std	Z+16, r25	; 0x10
     c20:	81 8b       	std	Z+17, r24	; 0x11
     c22:	a1 e9       	ldi	r26, 0x91	; 145
     c24:	a2 8b       	std	Z+18, r26	; 0x12
     c26:	20 e1       	ldi	r18, 0x10	; 16
     c28:	23 8b       	std	Z+19, r18	; 0x13
     c2a:	67 e7       	ldi	r22, 0x77	; 119
     c2c:	71 e0       	ldi	r23, 0x01	; 1
     c2e:	64 8b       	std	Z+20, r22	; 0x14
     c30:	75 8b       	std	Z+21, r23	; 0x15
     c32:	d0 8f       	std	Z+24, r29	; 0x18
     c34:	c1 8f       	std	Z+25, r28	; 0x19
     c36:	12 8e       	std	Z+26, r1	; 0x1a
     c38:	ca e8       	ldi	r28, 0x8A	; 138
     c3a:	d6 e2       	ldi	r29, 0x26	; 38
     c3c:	c4 8f       	std	Z+28, r28	; 0x1c
     c3e:	d5 8f       	std	Z+29, r29	; 0x1d
     c40:	16 8e       	std	Z+30, r1	; 0x1e
     c42:	20 89       	ldd	r18, Z+16	; 0x10
     c44:	20 68       	ori	r18, 0x80	; 128
     c46:	20 8b       	std	Z+16, r18	; 0x10
     c48:	90 a3       	std	Z+32, r25	; 0x20
     c4a:	81 a3       	std	Z+33, r24	; 0x21
     c4c:	a2 a3       	std	Z+34, r26	; 0x22
     c4e:	53 a3       	std	Z+35, r21	; 0x23
     c50:	64 a3       	std	Z+36, r22	; 0x24
     c52:	75 a3       	std	Z+37, r23	; 0x25
     c54:	40 a7       	std	Z+40, r20	; 0x28
     c56:	31 a7       	std	Z+41, r19	; 0x29
     c58:	12 a6       	std	Z+42, r1	; 0x2a
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	98 e2       	ldi	r25, 0x28	; 40
     c5e:	84 a7       	std	Z+44, r24	; 0x2c
     c60:	95 a7       	std	Z+45, r25	; 0x2d
     c62:	16 a6       	std	Z+46, r1	; 0x2e
     c64:	80 a1       	ldd	r24, Z+32	; 0x20
     c66:	80 68       	ori	r24, 0x80	; 128
     c68:	80 a3       	std	Z+32, r24	; 0x20
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <tiny_dma_set_mode_2>:
     c70:	cf 93       	push	r28
     c72:	f8 94       	cli
     c74:	c2 e0       	ldi	r28, 0x02	; 2
     c76:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     c7a:	f2 de       	rcall	.-540    	; 0xa60 <tiny_dma_flush>
     c7c:	e0 e0       	ldi	r30, 0x00	; 0
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	16 aa       	std	Z+54, r1	; 0x36
     c82:	94 e2       	ldi	r25, 0x24	; 36
     c84:	90 ab       	std	Z+48, r25	; 0x30
     c86:	11 aa       	std	Z+49, r1	; 0x31
     c88:	39 e5       	ldi	r19, 0x59	; 89
     c8a:	32 ab       	std	Z+50, r19	; 0x32
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	83 ab       	std	Z+51, r24	; 0x33
     c90:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     c94:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     c98:	44 ab       	std	Z+52, r20	; 0x34
     c9a:	55 ab       	std	Z+53, r21	; 0x35
     c9c:	4a e7       	ldi	r20, 0x7A	; 122
     c9e:	52 e2       	ldi	r21, 0x22	; 34
     ca0:	40 af       	std	Z+56, r20	; 0x38
     ca2:	51 af       	std	Z+57, r21	; 0x39
     ca4:	12 ae       	std	Z+58, r1	; 0x3a
     ca6:	29 e3       	ldi	r18, 0x39	; 57
     ca8:	24 af       	std	Z+60, r18	; 0x3c
     caa:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     cae:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     cb2:	20 a9       	ldd	r18, Z+48	; 0x30
     cb4:	20 68       	ori	r18, 0x80	; 128
     cb6:	20 ab       	std	Z+48, r18	; 0x30
     cb8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     cbc:	a0 e4       	ldi	r26, 0x40	; 64
     cbe:	b1 e0       	ldi	r27, 0x01	; 1
     cc0:	9c 93       	st	X, r25
     cc2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     cc6:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     cca:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     cce:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     cd2:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     cd6:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     cda:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     cde:	2a e8       	ldi	r18, 0x8A	; 138
     ce0:	34 e2       	ldi	r19, 0x24	; 36
     ce2:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     ce6:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     cea:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     cee:	2b e3       	ldi	r18, 0x3B	; 59
     cf0:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     cf4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     cf8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     cfc:	2c 91       	ld	r18, X
     cfe:	20 68       	ori	r18, 0x80	; 128
     d00:	2c 93       	st	X, r18
     d02:	54 e0       	ldi	r21, 0x04	; 4
     d04:	50 8b       	std	Z+16, r21	; 0x10
     d06:	81 8b       	std	Z+17, r24	; 0x11
     d08:	41 e9       	ldi	r20, 0x91	; 145
     d0a:	42 8b       	std	Z+18, r20	; 0x12
     d0c:	20 e1       	ldi	r18, 0x10	; 16
     d0e:	23 8b       	std	Z+19, r18	; 0x13
     d10:	27 e7       	ldi	r18, 0x77	; 119
     d12:	31 e0       	ldi	r19, 0x01	; 1
     d14:	24 8b       	std	Z+20, r18	; 0x14
     d16:	35 8b       	std	Z+21, r19	; 0x15
     d18:	90 8f       	std	Z+24, r25	; 0x18
     d1a:	c1 8f       	std	Z+25, r28	; 0x19
     d1c:	12 8e       	std	Z+26, r1	; 0x1a
     d1e:	6a e8       	ldi	r22, 0x8A	; 138
     d20:	76 e2       	ldi	r23, 0x26	; 38
     d22:	64 8f       	std	Z+28, r22	; 0x1c
     d24:	75 8f       	std	Z+29, r23	; 0x1d
     d26:	16 8e       	std	Z+30, r1	; 0x1e
     d28:	90 89       	ldd	r25, Z+16	; 0x10
     d2a:	90 68       	ori	r25, 0x80	; 128
     d2c:	90 8b       	std	Z+16, r25	; 0x10
     d2e:	50 a3       	std	Z+32, r21	; 0x20
     d30:	81 a3       	std	Z+33, r24	; 0x21
     d32:	42 a3       	std	Z+34, r20	; 0x22
     d34:	82 e1       	ldi	r24, 0x12	; 18
     d36:	83 a3       	std	Z+35, r24	; 0x23
     d38:	24 a3       	std	Z+36, r18	; 0x24
     d3a:	35 a3       	std	Z+37, r19	; 0x25
     d3c:	84 e3       	ldi	r24, 0x34	; 52
     d3e:	80 a7       	std	Z+40, r24	; 0x28
     d40:	c1 a7       	std	Z+41, r28	; 0x29
     d42:	12 a6       	std	Z+42, r1	; 0x2a
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	98 e2       	ldi	r25, 0x28	; 40
     d48:	84 a7       	std	Z+44, r24	; 0x2c
     d4a:	95 a7       	std	Z+45, r25	; 0x2d
     d4c:	16 a6       	std	Z+46, r1	; 0x2e
     d4e:	80 a1       	ldd	r24, Z+32	; 0x20
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	80 a3       	std	Z+32, r24	; 0x20
     d54:	78 94       	sei
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <tiny_dma_set_mode_3>:
     d5a:	cf 93       	push	r28
     d5c:	c3 e0       	ldi	r28, 0x03	; 3
     d5e:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     d62:	7e de       	rcall	.-772    	; 0xa60 <tiny_dma_flush>
     d64:	e0 e0       	ldi	r30, 0x00	; 0
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	10 a2       	std	Z+32, r1	; 0x20
     d6a:	50 e4       	ldi	r21, 0x40	; 64
     d6c:	50 a3       	std	Z+32, r21	; 0x20
     d6e:	44 e0       	ldi	r20, 0x04	; 4
     d70:	40 a3       	std	Z+32, r20	; 0x20
     d72:	11 a2       	std	Z+33, r1	; 0x21
     d74:	12 a2       	std	Z+34, r1	; 0x22
     d76:	3b e4       	ldi	r19, 0x4B	; 75
     d78:	33 a3       	std	Z+35, r19	; 0x23
     d7a:	14 a2       	std	Z+36, r1	; 0x24
     d7c:	15 a2       	std	Z+37, r1	; 0x25
     d7e:	16 a2       	std	Z+38, r1	; 0x26
     d80:	8a e0       	ldi	r24, 0x0A	; 10
     d82:	90 e2       	ldi	r25, 0x20	; 32
     d84:	80 a7       	std	Z+40, r24	; 0x28
     d86:	91 a7       	std	Z+41, r25	; 0x29
     d88:	12 a6       	std	Z+42, r1	; 0x2a
     d8a:	20 ea       	ldi	r18, 0xA0	; 160
     d8c:	24 a7       	std	Z+44, r18	; 0x2c
     d8e:	98 e0       	ldi	r25, 0x08	; 8
     d90:	95 a7       	std	Z+45, r25	; 0x2d
     d92:	16 a6       	std	Z+46, r1	; 0x2e
     d94:	80 a1       	ldd	r24, Z+32	; 0x20
     d96:	80 6a       	ori	r24, 0xA0	; 160
     d98:	80 a3       	std	Z+32, r24	; 0x20
     d9a:	85 e5       	ldi	r24, 0x55	; 85
     d9c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     da0:	16 aa       	std	Z+54, r1	; 0x36
     da2:	74 e2       	ldi	r23, 0x24	; 36
     da4:	70 ab       	std	Z+48, r23	; 0x30
     da6:	11 aa       	std	Z+49, r1	; 0x31
     da8:	69 e5       	ldi	r22, 0x59	; 89
     daa:	62 ab       	std	Z+50, r22	; 0x32
     dac:	c3 ab       	std	Z+51, r28	; 0x33
     dae:	a0 91 0d 20 	lds	r26, 0x200D	; 0x80200d <dacBuf_len>
     db2:	b0 91 0e 20 	lds	r27, 0x200E	; 0x80200e <dacBuf_len+0x1>
     db6:	a4 ab       	std	Z+52, r26	; 0x34
     db8:	b5 ab       	std	Z+53, r27	; 0x35
     dba:	aa e7       	ldi	r26, 0x7A	; 122
     dbc:	b2 e2       	ldi	r27, 0x22	; 34
     dbe:	a0 af       	std	Z+56, r26	; 0x38
     dc0:	b1 af       	std	Z+57, r27	; 0x39
     dc2:	12 ae       	std	Z+58, r1	; 0x3a
     dc4:	89 e3       	ldi	r24, 0x39	; 57
     dc6:	84 af       	std	Z+60, r24	; 0x3c
     dc8:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     dcc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     dd0:	80 a9       	ldd	r24, Z+48	; 0x30
     dd2:	80 68       	ori	r24, 0x80	; 128
     dd4:	80 ab       	std	Z+48, r24	; 0x30
     dd6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     dda:	a0 e4       	ldi	r26, 0x40	; 64
     ddc:	b1 e0       	ldi	r27, 0x01	; 1
     dde:	7c 93       	st	X, r23
     de0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     de4:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dee:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     df2:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     df6:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     dfa:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     dfe:	6a e8       	ldi	r22, 0x8A	; 138
     e00:	74 e2       	ldi	r23, 0x24	; 36
     e02:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e06:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e0a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e0e:	8b e3       	ldi	r24, 0x3B	; 59
     e10:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e14:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e18:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e1c:	8c 91       	ld	r24, X
     e1e:	80 68       	ori	r24, 0x80	; 128
     e20:	8c 93       	st	X, r24
     e22:	10 8a       	std	Z+16, r1	; 0x10
     e24:	50 8b       	std	Z+16, r21	; 0x10
     e26:	40 8b       	std	Z+16, r20	; 0x10
     e28:	c1 8b       	std	Z+17, r28	; 0x11
     e2a:	81 e9       	ldi	r24, 0x91	; 145
     e2c:	82 8b       	std	Z+18, r24	; 0x12
     e2e:	33 8b       	std	Z+19, r19	; 0x13
     e30:	47 e7       	ldi	r20, 0x77	; 119
     e32:	51 e0       	ldi	r21, 0x01	; 1
     e34:	44 8b       	std	Z+20, r20	; 0x14
     e36:	55 8b       	std	Z+21, r21	; 0x15
     e38:	20 8f       	std	Z+24, r18	; 0x18
     e3a:	91 8f       	std	Z+25, r25	; 0x19
     e3c:	12 8e       	std	Z+26, r1	; 0x1a
     e3e:	8a e8       	ldi	r24, 0x8A	; 138
     e40:	96 e2       	ldi	r25, 0x26	; 38
     e42:	84 8f       	std	Z+28, r24	; 0x1c
     e44:	95 8f       	std	Z+29, r25	; 0x1d
     e46:	16 8e       	std	Z+30, r1	; 0x1e
     e48:	80 89       	ldd	r24, Z+16	; 0x10
     e4a:	80 68       	ori	r24, 0x80	; 128
     e4c:	80 8b       	std	Z+16, r24	; 0x10
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <tiny_dma_set_mode_4>:
     e52:	cf 93       	push	r28
     e54:	c4 e0       	ldi	r28, 0x04	; 4
     e56:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     e5a:	02 de       	rcall	.-1020   	; 0xa60 <tiny_dma_flush>
     e5c:	e0 e0       	ldi	r30, 0x00	; 0
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	10 a2       	std	Z+32, r1	; 0x20
     e62:	80 e4       	ldi	r24, 0x40	; 64
     e64:	80 a3       	std	Z+32, r24	; 0x20
     e66:	c0 a3       	std	Z+32, r28	; 0x20
     e68:	11 a2       	std	Z+33, r1	; 0x21
     e6a:	12 a2       	std	Z+34, r1	; 0x22
     e6c:	4b e4       	ldi	r20, 0x4B	; 75
     e6e:	43 a3       	std	Z+35, r20	; 0x23
     e70:	14 a2       	std	Z+36, r1	; 0x24
     e72:	15 a2       	std	Z+37, r1	; 0x25
     e74:	16 a2       	std	Z+38, r1	; 0x26
     e76:	8a e0       	ldi	r24, 0x0A	; 10
     e78:	90 e2       	ldi	r25, 0x20	; 32
     e7a:	80 a7       	std	Z+40, r24	; 0x28
     e7c:	91 a7       	std	Z+41, r25	; 0x29
     e7e:	12 a6       	std	Z+42, r1	; 0x2a
     e80:	60 ea       	ldi	r22, 0xA0	; 160
     e82:	64 a7       	std	Z+44, r22	; 0x2c
     e84:	88 e0       	ldi	r24, 0x08	; 8
     e86:	85 a7       	std	Z+45, r24	; 0x2d
     e88:	16 a6       	std	Z+46, r1	; 0x2e
     e8a:	90 a1       	ldd	r25, Z+32	; 0x20
     e8c:	90 6a       	ori	r25, 0xA0	; 160
     e8e:	90 a3       	std	Z+32, r25	; 0x20
     e90:	95 e5       	ldi	r25, 0x55	; 85
     e92:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     e96:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     e9a:	a0 e4       	ldi	r26, 0x40	; 64
     e9c:	b1 e0       	ldi	r27, 0x01	; 1
     e9e:	94 e2       	ldi	r25, 0x24	; 36
     ea0:	9c 93       	st	X, r25
     ea2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ea6:	99 e5       	ldi	r25, 0x59	; 89
     ea8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     eb2:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     eb6:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     eba:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ebe:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     ec2:	2a e8       	ldi	r18, 0x8A	; 138
     ec4:	34 e2       	ldi	r19, 0x24	; 36
     ec6:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     eca:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     ece:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     ed2:	9b e3       	ldi	r25, 0x3B	; 59
     ed4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ed8:	93 e0       	ldi	r25, 0x03	; 3
     eda:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     ede:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     ee2:	2c 91       	ld	r18, X
     ee4:	20 68       	ori	r18, 0x80	; 128
     ee6:	2c 93       	st	X, r18
     ee8:	c0 8b       	std	Z+16, r28	; 0x10
     eea:	91 8b       	std	Z+17, r25	; 0x11
     eec:	31 e9       	ldi	r19, 0x91	; 145
     eee:	32 8b       	std	Z+18, r19	; 0x12
     ef0:	43 8b       	std	Z+19, r20	; 0x13
     ef2:	47 e7       	ldi	r20, 0x77	; 119
     ef4:	51 e0       	ldi	r21, 0x01	; 1
     ef6:	44 8b       	std	Z+20, r20	; 0x14
     ef8:	55 8b       	std	Z+21, r21	; 0x15
     efa:	60 8f       	std	Z+24, r22	; 0x18
     efc:	81 8f       	std	Z+25, r24	; 0x19
     efe:	12 8e       	std	Z+26, r1	; 0x1a
     f00:	6a e8       	ldi	r22, 0x8A	; 138
     f02:	76 e2       	ldi	r23, 0x26	; 38
     f04:	64 8f       	std	Z+28, r22	; 0x1c
     f06:	75 8f       	std	Z+29, r23	; 0x1d
     f08:	16 8e       	std	Z+30, r1	; 0x1e
     f0a:	20 89       	ldd	r18, Z+16	; 0x10
     f0c:	20 68       	ori	r18, 0x80	; 128
     f0e:	20 8b       	std	Z+16, r18	; 0x10
     f10:	c0 ab       	std	Z+48, r28	; 0x30
     f12:	91 ab       	std	Z+49, r25	; 0x31
     f14:	32 ab       	std	Z+50, r19	; 0x32
     f16:	9a e4       	ldi	r25, 0x4A	; 74
     f18:	93 ab       	std	Z+51, r25	; 0x33
     f1a:	44 ab       	std	Z+52, r20	; 0x34
     f1c:	55 ab       	std	Z+53, r21	; 0x35
     f1e:	93 ec       	ldi	r25, 0xC3	; 195
     f20:	90 af       	std	Z+56, r25	; 0x38
     f22:	81 af       	std	Z+57, r24	; 0x39
     f24:	12 ae       	std	Z+58, r1	; 0x3a
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	98 e2       	ldi	r25, 0x28	; 40
     f2a:	84 af       	std	Z+60, r24	; 0x3c
     f2c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f30:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f34:	80 a9       	ldd	r24, Z+48	; 0x30
     f36:	80 68       	ori	r24, 0x80	; 128
     f38:	80 ab       	std	Z+48, r24	; 0x30
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <tiny_dma_set_mode_5>:
     f3e:	85 e0       	ldi	r24, 0x05	; 5
     f40:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
     f44:	8d dd       	rcall	.-1254   	; 0xa60 <tiny_dma_flush>
     f46:	e0 e0       	ldi	r30, 0x00	; 0
     f48:	f1 e0       	ldi	r31, 0x01	; 1
     f4a:	16 aa       	std	Z+54, r1	; 0x36
     f4c:	34 e2       	ldi	r19, 0x24	; 36
     f4e:	30 ab       	std	Z+48, r19	; 0x30
     f50:	11 aa       	std	Z+49, r1	; 0x31
     f52:	29 e5       	ldi	r18, 0x59	; 89
     f54:	22 ab       	std	Z+50, r18	; 0x32
     f56:	83 e0       	ldi	r24, 0x03	; 3
     f58:	83 ab       	std	Z+51, r24	; 0x33
     f5a:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     f5e:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     f62:	44 ab       	std	Z+52, r20	; 0x34
     f64:	55 ab       	std	Z+53, r21	; 0x35
     f66:	4a e7       	ldi	r20, 0x7A	; 122
     f68:	52 e2       	ldi	r21, 0x22	; 34
     f6a:	40 af       	std	Z+56, r20	; 0x38
     f6c:	51 af       	std	Z+57, r21	; 0x39
     f6e:	12 ae       	std	Z+58, r1	; 0x3a
     f70:	99 e3       	ldi	r25, 0x39	; 57
     f72:	94 af       	std	Z+60, r25	; 0x3c
     f74:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f78:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f7c:	90 a9       	ldd	r25, Z+48	; 0x30
     f7e:	90 68       	ori	r25, 0x80	; 128
     f80:	90 ab       	std	Z+48, r25	; 0x30
     f82:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f86:	e0 e4       	ldi	r30, 0x40	; 64
     f88:	f1 e0       	ldi	r31, 0x01	; 1
     f8a:	30 83       	st	Z, r19
     f8c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f90:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f94:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f98:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     f9c:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     fa0:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     fa4:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     fa8:	2a e8       	ldi	r18, 0x8A	; 138
     faa:	34 e2       	ldi	r19, 0x24	; 36
     fac:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     fb0:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     fb4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     fb8:	9b e3       	ldi	r25, 0x3B	; 59
     fba:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     fbe:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     fc2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     fc6:	80 81       	ld	r24, Z
     fc8:	80 68       	ori	r24, 0x80	; 128
     fca:	80 83       	st	Z, r24
     fcc:	08 95       	ret

00000fce <tiny_dma_set_mode_6>:
     fce:	86 e0       	ldi	r24, 0x06	; 6
     fd0:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
     fd4:	45 dd       	rcall	.-1398   	; 0xa60 <tiny_dma_flush>
     fd6:	e0 e0       	ldi	r30, 0x00	; 0
     fd8:	f1 e0       	ldi	r31, 0x01	; 1
     fda:	16 aa       	std	Z+54, r1	; 0x36
     fdc:	94 e2       	ldi	r25, 0x24	; 36
     fde:	90 ab       	std	Z+48, r25	; 0x30
     fe0:	11 aa       	std	Z+49, r1	; 0x31
     fe2:	39 e5       	ldi	r19, 0x59	; 89
     fe4:	32 ab       	std	Z+50, r19	; 0x32
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	83 ab       	std	Z+51, r24	; 0x33
     fea:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     fee:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     ff2:	44 ab       	std	Z+52, r20	; 0x34
     ff4:	55 ab       	std	Z+53, r21	; 0x35
     ff6:	4a e7       	ldi	r20, 0x7A	; 122
     ff8:	52 e2       	ldi	r21, 0x22	; 34
     ffa:	40 af       	std	Z+56, r20	; 0x38
     ffc:	51 af       	std	Z+57, r21	; 0x39
     ffe:	12 ae       	std	Z+58, r1	; 0x3a
    1000:	29 e3       	ldi	r18, 0x39	; 57
    1002:	24 af       	std	Z+60, r18	; 0x3c
    1004:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1008:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    100c:	20 a9       	ldd	r18, Z+48	; 0x30
    100e:	20 68       	ori	r18, 0x80	; 128
    1010:	20 ab       	std	Z+48, r18	; 0x30
    1012:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1016:	a0 e4       	ldi	r26, 0x40	; 64
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	9c 93       	st	X, r25
    101c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1020:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1024:	32 e0       	ldi	r19, 0x02	; 2
    1026:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    102a:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    102e:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1032:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1036:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    103a:	4a e8       	ldi	r20, 0x8A	; 138
    103c:	54 e2       	ldi	r21, 0x24	; 36
    103e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1042:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1046:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    104a:	2b e3       	ldi	r18, 0x3B	; 59
    104c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1050:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1054:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1058:	2c 91       	ld	r18, X
    105a:	20 68       	ori	r18, 0x80	; 128
    105c:	2c 93       	st	X, r18
    105e:	10 8a       	std	Z+16, r1	; 0x10
    1060:	20 e4       	ldi	r18, 0x40	; 64
    1062:	20 8b       	std	Z+16, r18	; 0x10
    1064:	24 e0       	ldi	r18, 0x04	; 4
    1066:	20 8b       	std	Z+16, r18	; 0x10
    1068:	81 8b       	std	Z+17, r24	; 0x11
    106a:	81 e9       	ldi	r24, 0x91	; 145
    106c:	82 8b       	std	Z+18, r24	; 0x12
    106e:	80 e1       	ldi	r24, 0x10	; 16
    1070:	83 8b       	std	Z+19, r24	; 0x13
    1072:	4e ee       	ldi	r20, 0xEE	; 238
    1074:	52 e0       	ldi	r21, 0x02	; 2
    1076:	44 8b       	std	Z+20, r20	; 0x14
    1078:	55 8b       	std	Z+21, r21	; 0x15
    107a:	90 8f       	std	Z+24, r25	; 0x18
    107c:	31 8f       	std	Z+25, r19	; 0x19
    107e:	12 8e       	std	Z+26, r1	; 0x1a
    1080:	8a e8       	ldi	r24, 0x8A	; 138
    1082:	96 e2       	ldi	r25, 0x26	; 38
    1084:	84 8f       	std	Z+28, r24	; 0x1c
    1086:	95 8f       	std	Z+29, r25	; 0x1d
    1088:	16 8e       	std	Z+30, r1	; 0x1e
    108a:	80 89       	ldd	r24, Z+16	; 0x10
    108c:	80 68       	ori	r24, 0x80	; 128
    108e:	80 8b       	std	Z+16, r24	; 0x10
    1090:	08 95       	ret

00001092 <tiny_dma_set_mode_7>:
    1092:	87 e0       	ldi	r24, 0x07	; 7
    1094:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    1098:	e3 dc       	rcall	.-1594   	; 0xa60 <tiny_dma_flush>
    109a:	e0 e0       	ldi	r30, 0x00	; 0
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	16 aa       	std	Z+54, r1	; 0x36
    10a0:	94 e2       	ldi	r25, 0x24	; 36
    10a2:	90 ab       	std	Z+48, r25	; 0x30
    10a4:	11 aa       	std	Z+49, r1	; 0x31
    10a6:	39 e5       	ldi	r19, 0x59	; 89
    10a8:	32 ab       	std	Z+50, r19	; 0x32
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	83 ab       	std	Z+51, r24	; 0x33
    10ae:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    10b2:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    10b6:	44 ab       	std	Z+52, r20	; 0x34
    10b8:	55 ab       	std	Z+53, r21	; 0x35
    10ba:	4a e7       	ldi	r20, 0x7A	; 122
    10bc:	52 e2       	ldi	r21, 0x22	; 34
    10be:	40 af       	std	Z+56, r20	; 0x38
    10c0:	51 af       	std	Z+57, r21	; 0x39
    10c2:	12 ae       	std	Z+58, r1	; 0x3a
    10c4:	29 e3       	ldi	r18, 0x39	; 57
    10c6:	24 af       	std	Z+60, r18	; 0x3c
    10c8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    10cc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    10d0:	20 a9       	ldd	r18, Z+48	; 0x30
    10d2:	20 68       	ori	r18, 0x80	; 128
    10d4:	20 ab       	std	Z+48, r18	; 0x30
    10d6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    10da:	a0 e4       	ldi	r26, 0x40	; 64
    10dc:	b1 e0       	ldi	r27, 0x01	; 1
    10de:	9c 93       	st	X, r25
    10e0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    10e4:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    10e8:	32 e0       	ldi	r19, 0x02	; 2
    10ea:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    10ee:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    10f2:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    10f6:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    10fa:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    10fe:	4a e8       	ldi	r20, 0x8A	; 138
    1100:	54 e2       	ldi	r21, 0x24	; 36
    1102:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1106:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    110a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    110e:	2b e3       	ldi	r18, 0x3B	; 59
    1110:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1114:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1118:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    111c:	2c 91       	ld	r18, X
    111e:	20 68       	ori	r18, 0x80	; 128
    1120:	2c 93       	st	X, r18
    1122:	10 8a       	std	Z+16, r1	; 0x10
    1124:	20 e4       	ldi	r18, 0x40	; 64
    1126:	20 8b       	std	Z+16, r18	; 0x10
    1128:	25 e0       	ldi	r18, 0x05	; 5
    112a:	20 8b       	std	Z+16, r18	; 0x10
    112c:	81 8b       	std	Z+17, r24	; 0x11
    112e:	81 e9       	ldi	r24, 0x91	; 145
    1130:	82 8b       	std	Z+18, r24	; 0x12
    1132:	80 e1       	ldi	r24, 0x10	; 16
    1134:	83 8b       	std	Z+19, r24	; 0x13
    1136:	4e ee       	ldi	r20, 0xEE	; 238
    1138:	52 e0       	ldi	r21, 0x02	; 2
    113a:	44 8b       	std	Z+20, r20	; 0x14
    113c:	55 8b       	std	Z+21, r21	; 0x15
    113e:	90 8f       	std	Z+24, r25	; 0x18
    1140:	31 8f       	std	Z+25, r19	; 0x19
    1142:	12 8e       	std	Z+26, r1	; 0x1a
    1144:	8a e8       	ldi	r24, 0x8A	; 138
    1146:	96 e2       	ldi	r25, 0x26	; 38
    1148:	84 8f       	std	Z+28, r24	; 0x1c
    114a:	95 8f       	std	Z+29, r25	; 0x1d
    114c:	16 8e       	std	Z+30, r1	; 0x1e
    114e:	80 89       	ldd	r24, Z+16	; 0x10
    1150:	80 68       	ori	r24, 0x80	; 128
    1152:	80 8b       	std	Z+16, r24	; 0x10
    1154:	08 95       	ret

00001156 <__vector_6>:
}

ISR(DMA_CH0_vect){
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	8f 93       	push	r24
	DMA.INTFLAGS = 0x01;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
}
    1168:	8f 91       	pop	r24
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    1174:	e0 e7       	ldi	r30, 0x70	; 112
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	83 81       	ldd	r24, Z+3	; 0x03
    117a:	8c 7f       	andi	r24, 0xFC	; 252
    117c:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    117e:	84 81       	ldd	r24, Z+4	; 0x04
    1180:	8c 7f       	andi	r24, 0xFC	; 252
    1182:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1184:	80 81       	ld	r24, Z
    1186:	8d 7f       	andi	r24, 0xFD	; 253
    1188:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    118a:	e0 e8       	ldi	r30, 0x80	; 128
    118c:	f1 e0       	ldi	r31, 0x01	; 1
    118e:	80 ec       	ldi	r24, 0xC0	; 192
    1190:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1192:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1194:	88 ec       	ldi	r24, 0xC8	; 200
    1196:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1198:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    119a:	a0 e0       	ldi	r26, 0x00	; 0
    119c:	b8 e0       	ldi	r27, 0x08	; 8
    119e:	34 e0       	ldi	r19, 0x04	; 4
    11a0:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    11a2:	23 e0       	ldi	r18, 0x03	; 3
    11a4:	11 96       	adiw	r26, 0x01	; 1
    11a6:	2c 93       	st	X, r18
    11a8:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    11aa:	14 96       	adiw	r26, 0x04	; 4
    11ac:	1c 92       	st	X, r1
    11ae:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    11b0:	85 ed       	ldi	r24, 0xD5	; 213
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	96 96       	adiw	r26, 0x26	; 38
    11b6:	8d 93       	st	X+, r24
    11b8:	9c 93       	st	X, r25
    11ba:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	1c 92       	st	X, r1
    11c0:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    11c2:	e0 e4       	ldi	r30, 0x40	; 64
    11c4:	f8 e0       	ldi	r31, 0x08	; 8
    11c6:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    11c8:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    11ca:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    11cc:	86 a3       	std	Z+38, r24	; 0x26
    11ce:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    11d0:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    11d2:	e0 e6       	ldi	r30, 0x60	; 96
    11d4:	f6 e0       	ldi	r31, 0x06	; 6
    11d6:	80 81       	ld	r24, Z
    11d8:	80 61       	ori	r24, 0x10	; 16
    11da:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    11dc:	e0 e4       	ldi	r30, 0x40	; 64
    11de:	f9 e0       	ldi	r31, 0x09	; 9
    11e0:	83 e1       	ldi	r24, 0x13	; 19
    11e2:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    11e4:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    11ea:	a6 a3       	std	Z+38, r26	; 0x26
    11ec:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    11ee:	10 a6       	std	Z+40, r1	; 0x28
    11f0:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 83       	st	Z, r24
    11f6:	08 95       	ret

000011f8 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	ef 93       	push	r30
    1210:	ff 93       	push	r31
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	1f 92       	push	r1
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    1222:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    1226:	87 30       	cpi	r24, 0x07	; 7
    1228:	31 f4       	brne	.+12     	; 0x1236 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    122a:	e0 e0       	ldi	r30, 0x00	; 0
    122c:	f2 e0       	ldi	r31, 0x02	; 2
    122e:	84 a5       	ldd	r24, Z+44	; 0x2c
    1230:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    1232:	95 a5       	ldd	r25, Z+45	; 0x2d
    1234:	02 c0       	rjmp	.+4      	; 0x123a <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1236:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    123a:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <PSU_target>
    123e:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    1240:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1244:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	0c f4       	brge	.+2      	; 0x1250 <__vector_83+0x58>
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	99 23       	and	r25, r25
    1252:	c9 f0       	breq	.+50     	; 0x1286 <__vector_83+0x8e>
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	2a 3f       	cpi	r18, 0xFA	; 250
    1258:	37 40       	sbci	r19, 0x07	; 7
    125a:	08 f0       	brcs	.+2      	; 0x125e <__vector_83+0x66>
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	99 23       	and	r25, r25
    1260:	91 f0       	breq	.+36     	; 0x1286 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    1262:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1266:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    126a:	89 30       	cpi	r24, 0x09	; 9
    126c:	1c f4       	brge	.+6      	; 0x1274 <__vector_83+0x7c>
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <__vector_83+0x80>
    1274:	86 e0       	ldi	r24, 0x06	; 6
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	82 0f       	add	r24, r18
    127a:	93 1f       	adc	r25, r19
    127c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1280:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1284:	23 c0       	rjmp	.+70     	; 0x12cc <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1286:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    128a:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	8f 3f       	cpi	r24, 0xFF	; 255
    1292:	0c f0       	brlt	.+2      	; 0x1296 <__vector_83+0x9e>
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	99 23       	and	r25, r25
    1298:	c9 f0       	breq	.+50     	; 0x12cc <__vector_83+0xd4>
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	27 30       	cpi	r18, 0x07	; 7
    129e:	31 05       	cpc	r19, r1
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <__vector_83+0xac>
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	99 23       	and	r25, r25
    12a6:	91 f0       	breq	.+36     	; 0x12cc <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    12a8:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12ac:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12b0:	88 3f       	cpi	r24, 0xF8	; 248
    12b2:	1c f0       	brlt	.+6      	; 0x12ba <__vector_83+0xc2>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <__vector_83+0xc6>
    12ba:	86 e0       	ldi	r24, 0x06	; 6
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	48 1b       	sub	r20, r24
    12c2:	59 0b       	sbc	r21, r25
    12c4:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    12c8:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    12cc:	0f 90       	pop	r0
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    12ec:	e0 e7       	ldi	r30, 0x70	; 112
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	83 81       	ldd	r24, Z+3	; 0x03
    12f2:	8f 7e       	andi	r24, 0xEF	; 239
    12f4:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    12f6:	e0 e4       	ldi	r30, 0x40	; 64
    12f8:	f6 e0       	ldi	r31, 0x06	; 6
    12fa:	80 81       	ld	r24, Z
    12fc:	8a 6a       	ori	r24, 0xAA	; 170
    12fe:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1304:	88 e5       	ldi	r24, 0x58	; 88
    1306:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1308:	e0 ea       	ldi	r30, 0xA0	; 160
    130a:	f8 e0       	ldi	r31, 0x08	; 8
    130c:	84 ec       	ldi	r24, 0xC4	; 196
    130e:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    1314:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1316:	88 e1       	ldi	r24, 0x18	; 24
    1318:	84 83       	std	Z+4, r24	; 0x04
    131a:	08 95       	ret

0000131c <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    131c:	e0 e7       	ldi	r30, 0x70	; 112
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	83 81       	ldd	r24, Z+3	; 0x03
    1322:	87 7f       	andi	r24, 0xF7	; 247
    1324:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1326:	e0 ec       	ldi	r30, 0xC0	; 192
    1328:	f8 e0       	ldi	r31, 0x08	; 8
    132a:	80 e4       	ldi	r24, 0x40	; 64
    132c:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    132e:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1330:	88 e5       	ldi	r24, 0x58	; 88
    1332:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1336:	08 95       	ret

00001338 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
	asm("nop");
    1342:	00 00       	nop
}
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    134e:	9f b7       	in	r25, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	e8 2f       	mov	r30, r24
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	e0 59       	subi	r30, 0x90	; 144
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	60 95       	com	r22
    135c:	80 81       	ld	r24, Z
    135e:	68 23       	and	r22, r24
    1360:	60 83       	st	Z, r22
    1362:	9f bf       	out	0x3f, r25	; 63
    1364:	08 95       	ret

00001366 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1366:	86 30       	cpi	r24, 0x06	; 6
    1368:	11 f0       	breq	.+4      	; 0x136e <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    136e:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1370:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1374:	81 fd       	sbrc	r24, 1
    1376:	26 c0       	rjmp	.+76     	; 0x13c4 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1378:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    137a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    137c:	e0 e5       	ldi	r30, 0x50	; 80
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	82 60       	ori	r24, 0x02	; 2
    1384:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1386:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1388:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    138a:	81 ff       	sbrs	r24, 1
    138c:	fd cf       	rjmp	.-6      	; 0x1388 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    138e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1390:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1392:	a0 e5       	ldi	r26, 0x50	; 80
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	16 96       	adiw	r26, 0x06	; 6
    1398:	8c 91       	ld	r24, X
    139a:	16 97       	sbiw	r26, 0x06	; 6
    139c:	89 7f       	andi	r24, 0xF9	; 249
    139e:	16 96       	adiw	r26, 0x06	; 6
    13a0:	8c 93       	st	X, r24
    13a2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    13a4:	e0 e6       	ldi	r30, 0x60	; 96
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 e8       	ldi	r24, 0x80	; 128
    13aa:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    13ac:	8b eb       	ldi	r24, 0xBB	; 187
    13ae:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    13b0:	16 96       	adiw	r26, 0x06	; 6
    13b2:	8c 91       	ld	r24, X
    13b4:	16 97       	sbiw	r26, 0x06	; 6
    13b6:	84 60       	ori	r24, 0x04	; 4
    13b8:	16 96       	adiw	r26, 0x06	; 6
    13ba:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    13bc:	80 81       	ld	r24, Z
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13c2:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    13c4:	63 60       	ori	r22, 0x03	; 3
    13c6:	84 e4       	ldi	r24, 0x44	; 68
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	1a d5       	rcall	.+2612   	; 0x1e00 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    13cc:	60 e4       	ldi	r22, 0x40	; 64
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	be cf       	rjmp	.-132    	; 0x134e <sysclk_enable_module>
    13d2:	08 95       	ret

000013d4 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    13d4:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <udi_vendor_alternate_setting>
    13d8:	08 95       	ret

000013da <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    13da:	40 d1       	rcall	.+640    	; 0x165c <udc_get_interface_desc>
    13dc:	fc 01       	movw	r30, r24
    13de:	83 81       	ldd	r24, Z+3	; 0x03
    13e0:	80 93 cf 20 	sts	0x20CF, r24	; 0x8020cf <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    13e4:	81 11       	cpse	r24, r1
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    13e8:	7e ca       	rjmp	.-2820   	; 0x8e6 <main_vendor_enable>
    13ea:	08 95       	ret
			return false;
		}
	}
	return true;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
}
    13ee:	08 95       	ret

000013f0 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    13f0:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <udi_vendor_alternate_setting>
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	09 f4       	brne	.+2      	; 0x13fa <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    13f8:	7c ca       	rjmp	.-2824   	; 0x8f2 <main_vendor_disable>
    13fa:	08 95       	ret

000013fc <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    13fc:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq>
    1400:	88 23       	and	r24, r24
    1402:	4c f4       	brge	.+18     	; 0x1416 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1404:	80 76       	andi	r24, 0x60	; 96
    1406:	80 34       	cpi	r24, 0x40	; 64
    1408:	a9 f4       	brne	.+42     	; 0x1434 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    140a:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x1>
    140e:	81 11       	cpse	r24, r1
    1410:	13 c0       	rjmp	.+38     	; 0x1438 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    1412:	74 ca       	rjmp	.-2840   	; 0x8fc <main_setup_in_received>
    1414:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1416:	80 76       	andi	r24, 0x60	; 96
    1418:	80 34       	cpi	r24, 0x40	; 64
    141a:	81 f4       	brne	.+32     	; 0x143c <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    141c:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x1>
    1420:	81 11       	cpse	r24, r1
    1422:	0e c0       	rjmp	.+28     	; 0x1440 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1424:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1428:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    142c:	89 2b       	or	r24, r25
    142e:	51 f0       	breq	.+20     	; 0x1444 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1430:	63 ca       	rjmp	.-2874   	; 0x8f8 <main_setup_out_received>
    1432:	08 95       	ret
		}
	}
	return false; // Not supported request
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	08 95       	ret
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	08 95       	ret
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	08 95       	ret
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	08 95       	ret
    1444:	80 e0       	ldi	r24, 0x00	; 0
}
    1446:	08 95       	ret

00001448 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    144e:	8a 01       	movw	r16, r20
    1450:	ac 01       	movw	r20, r24
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	81 e8       	ldi	r24, 0x81	; 129
    1456:	0e 94 74 13 	call	0x26e8	; 0x26e8 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    1466:	8a 01       	movw	r16, r20
    1468:	ac 01       	movw	r20, r24
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	82 e8       	ldi	r24, 0x82	; 130
    146e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    147e:	8a 01       	movw	r16, r20
    1480:	ac 01       	movw	r20, r24
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	83 e8       	ldi	r24, 0x83	; 131
    1486:	0e 94 74 13 	call	0x26e8	; 0x26e8 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1490:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    1494:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1498:	01 90       	ld	r0, Z+
    149a:	f0 81       	ld	r31, Z
    149c:	e0 2d       	mov	r30, r0
    149e:	22 81       	ldd	r18, Z+2	; 0x02
    14a0:	33 81       	ldd	r19, Z+3	; 0x03
    14a2:	2e 0f       	add	r18, r30
    14a4:	3f 1f       	adc	r19, r31
    14a6:	fc 01       	movw	r30, r24
    14a8:	40 81       	ld	r20, Z
    14aa:	e4 0f       	add	r30, r20
    14ac:	f1 1d       	adc	r31, r1
    14ae:	e2 17       	cp	r30, r18
    14b0:	f3 07       	cpc	r31, r19
    14b2:	b8 f4       	brcc	.+46     	; 0x14e2 <udc_next_desc_in_iface+0x52>
    14b4:	81 81       	ldd	r24, Z+1	; 0x01
    14b6:	84 30       	cpi	r24, 0x04	; 4
    14b8:	b9 f0       	breq	.+46     	; 0x14e8 <udc_next_desc_in_iface+0x58>
    14ba:	86 13       	cpse	r24, r22
    14bc:	09 c0       	rjmp	.+18     	; 0x14d0 <udc_next_desc_in_iface+0x40>
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <udc_next_desc_in_iface+0x3a>
    14c0:	81 81       	ldd	r24, Z+1	; 0x01
    14c2:	84 30       	cpi	r24, 0x04	; 4
    14c4:	a1 f0       	breq	.+40     	; 0x14ee <udc_next_desc_in_iface+0x5e>
    14c6:	86 13       	cpse	r24, r22
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <udc_next_desc_in_iface+0x40>
    14ca:	8e 2f       	mov	r24, r30
    14cc:	9f 2f       	mov	r25, r31
    14ce:	08 95       	ret
    14d0:	80 81       	ld	r24, Z
    14d2:	e8 0f       	add	r30, r24
    14d4:	f1 1d       	adc	r31, r1
    14d6:	e2 17       	cp	r30, r18
    14d8:	f3 07       	cpc	r31, r19
    14da:	90 f3       	brcs	.-28     	; 0x14c0 <udc_next_desc_in_iface+0x30>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	08 95       	ret
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	08 95       	ret
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	08 95       	ret
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	08 95       	ret

000014f4 <udc_valid_address>:
    14f4:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    14f8:	8f 77       	andi	r24, 0x7F	; 127
    14fa:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <udd_set_address>
    14fe:	08 95       	ret

00001500 <udc_update_iface_desc>:
    1500:	90 91 d6 20 	lds	r25, 0x20D6	; 0x8020d6 <udc_num_configuration>
    1504:	99 23       	and	r25, r25
    1506:	81 f1       	breq	.+96     	; 0x1568 <udc_update_iface_desc+0x68>
    1508:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    150c:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1510:	01 90       	ld	r0, Z+
    1512:	f0 81       	ld	r31, Z
    1514:	e0 2d       	mov	r30, r0
    1516:	94 81       	ldd	r25, Z+4	; 0x04
    1518:	89 17       	cp	r24, r25
    151a:	40 f5       	brcc	.+80     	; 0x156c <udc_update_iface_desc+0x6c>
    151c:	e0 93 d2 20 	sts	0x20D2, r30	; 0x8020d2 <udc_ptr_iface>
    1520:	f0 93 d3 20 	sts	0x20D3, r31	; 0x8020d3 <udc_ptr_iface+0x1>
    1524:	22 81       	ldd	r18, Z+2	; 0x02
    1526:	33 81       	ldd	r19, Z+3	; 0x03
    1528:	2e 0f       	add	r18, r30
    152a:	3f 1f       	adc	r19, r31
    152c:	e2 17       	cp	r30, r18
    152e:	f3 07       	cpc	r31, r19
    1530:	f8 f4       	brcc	.+62     	; 0x1570 <udc_update_iface_desc+0x70>
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	94 30       	cpi	r25, 0x04	; 4
    1536:	61 f4       	brne	.+24     	; 0x1550 <udc_update_iface_desc+0x50>
    1538:	92 81       	ldd	r25, Z+2	; 0x02
    153a:	98 13       	cpse	r25, r24
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <udc_update_iface_desc+0x50>
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	96 13       	cpse	r25, r22
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <udc_update_iface_desc+0x50>
    1544:	e0 93 d2 20 	sts	0x20D2, r30	; 0x8020d2 <udc_ptr_iface>
    1548:	f0 93 d3 20 	sts	0x20D3, r31	; 0x8020d3 <udc_ptr_iface+0x1>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	08 95       	ret
    1550:	90 81       	ld	r25, Z
    1552:	e9 0f       	add	r30, r25
    1554:	f1 1d       	adc	r31, r1
    1556:	e2 17       	cp	r30, r18
    1558:	f3 07       	cpc	r31, r19
    155a:	58 f3       	brcs	.-42     	; 0x1532 <udc_update_iface_desc+0x32>
    155c:	e0 93 d2 20 	sts	0x20D2, r30	; 0x8020d2 <udc_ptr_iface>
    1560:	f0 93 d3 20 	sts	0x20D3, r31	; 0x8020d3 <udc_ptr_iface+0x1>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	08 95       	ret
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	08 95       	ret
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	08 95       	ret
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	08 95       	ret

00001574 <udc_iface_disable>:
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	1f 93       	push	r17
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	c8 2f       	mov	r28, r24
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	be df       	rcall	.-132    	; 0x1500 <udc_update_iface_desc>
    1584:	18 2f       	mov	r17, r24
    1586:	88 23       	and	r24, r24
    1588:	81 f1       	breq	.+96     	; 0x15ea <udc_iface_disable+0x76>
    158a:	a0 91 d4 20 	lds	r26, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    158e:	b0 91 d5 20 	lds	r27, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1592:	ec 2f       	mov	r30, r28
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	12 96       	adiw	r26, 0x02	; 2
    159c:	8d 91       	ld	r24, X+
    159e:	9c 91       	ld	r25, X
    15a0:	13 97       	sbiw	r26, 0x03	; 3
    15a2:	e8 0f       	add	r30, r24
    15a4:	f9 1f       	adc	r31, r25
    15a6:	e0 80       	ld	r14, Z
    15a8:	f1 80       	ldd	r15, Z+1	; 0x01
    15aa:	d7 01       	movw	r26, r14
    15ac:	16 96       	adiw	r26, 0x06	; 6
    15ae:	ed 91       	ld	r30, X+
    15b0:	fc 91       	ld	r31, X
    15b2:	17 97       	sbiw	r26, 0x07	; 7
    15b4:	09 95       	icall
    15b6:	68 2f       	mov	r22, r24
    15b8:	8c 2f       	mov	r24, r28
    15ba:	a2 df       	rcall	.-188    	; 0x1500 <udc_update_iface_desc>
    15bc:	18 2f       	mov	r17, r24
    15be:	88 23       	and	r24, r24
    15c0:	a1 f0       	breq	.+40     	; 0x15ea <udc_iface_disable+0x76>
    15c2:	c0 91 d2 20 	lds	r28, 0x20D2	; 0x8020d2 <udc_ptr_iface>
    15c6:	d0 91 d3 20 	lds	r29, 0x20D3	; 0x8020d3 <udc_ptr_iface+0x1>
    15ca:	65 e0       	ldi	r22, 0x05	; 5
    15cc:	ce 01       	movw	r24, r28
    15ce:	60 df       	rcall	.-320    	; 0x1490 <udc_next_desc_in_iface>
    15d0:	ec 01       	movw	r28, r24
    15d2:	89 2b       	or	r24, r25
    15d4:	21 f0       	breq	.+8      	; 0x15de <udc_iface_disable+0x6a>
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	0e 94 77 14 	call	0x28ee	; 0x28ee <udd_ep_free>
    15dc:	f6 cf       	rjmp	.-20     	; 0x15ca <udc_iface_disable+0x56>
    15de:	d7 01       	movw	r26, r14
    15e0:	12 96       	adiw	r26, 0x02	; 2
    15e2:	ed 91       	ld	r30, X+
    15e4:	fc 91       	ld	r31, X
    15e6:	13 97       	sbiw	r26, 0x03	; 3
    15e8:	09 95       	icall
    15ea:	81 2f       	mov	r24, r17
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	08 95       	ret

000015f8 <udc_iface_enable>:
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	18 2f       	mov	r17, r24
    1600:	7f df       	rcall	.-258    	; 0x1500 <udc_update_iface_desc>
    1602:	88 23       	and	r24, r24
    1604:	39 f1       	breq	.+78     	; 0x1654 <udc_iface_enable+0x5c>
    1606:	c0 91 d2 20 	lds	r28, 0x20D2	; 0x8020d2 <udc_ptr_iface>
    160a:	d0 91 d3 20 	lds	r29, 0x20D3	; 0x8020d3 <udc_ptr_iface+0x1>
    160e:	65 e0       	ldi	r22, 0x05	; 5
    1610:	ce 01       	movw	r24, r28
    1612:	3e df       	rcall	.-388    	; 0x1490 <udc_next_desc_in_iface>
    1614:	ec 01       	movw	r28, r24
    1616:	89 2b       	or	r24, r25
    1618:	41 f0       	breq	.+16     	; 0x162a <udc_iface_enable+0x32>
    161a:	4c 81       	ldd	r20, Y+4	; 0x04
    161c:	5d 81       	ldd	r21, Y+5	; 0x05
    161e:	6b 81       	ldd	r22, Y+3	; 0x03
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9d d7       	rcall	.+3898   	; 0x255e <udd_ep_alloc>
    1624:	81 11       	cpse	r24, r1
    1626:	f3 cf       	rjmp	.-26     	; 0x160e <udc_iface_enable+0x16>
    1628:	15 c0       	rjmp	.+42     	; 0x1654 <udc_iface_enable+0x5c>
    162a:	a0 91 d4 20 	lds	r26, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    162e:	b0 91 d5 20 	lds	r27, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1632:	e1 2f       	mov	r30, r17
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	ee 0f       	add	r30, r30
    1638:	ff 1f       	adc	r31, r31
    163a:	12 96       	adiw	r26, 0x02	; 2
    163c:	8d 91       	ld	r24, X+
    163e:	9c 91       	ld	r25, X
    1640:	13 97       	sbiw	r26, 0x03	; 3
    1642:	e8 0f       	add	r30, r24
    1644:	f9 1f       	adc	r31, r25
    1646:	01 90       	ld	r0, Z+
    1648:	f0 81       	ld	r31, Z
    164a:	e0 2d       	mov	r30, r0
    164c:	01 90       	ld	r0, Z+
    164e:	f0 81       	ld	r31, Z
    1650:	e0 2d       	mov	r30, r0
    1652:	09 95       	icall
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	08 95       	ret

0000165c <udc_get_interface_desc>:
    165c:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <udc_ptr_iface>
    1660:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <udc_ptr_iface+0x1>
    1664:	08 95       	ret

00001666 <udc_start>:
    1666:	e9 c6       	rjmp	.+3538   	; 0x243a <udd_enable>
    1668:	08 95       	ret

0000166a <udc_reset>:
    166a:	cf 93       	push	r28
    166c:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <udc_num_configuration>
    1670:	88 23       	and	r24, r24
    1672:	c1 f0       	breq	.+48     	; 0x16a4 <udc_reset+0x3a>
    1674:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    1678:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    167c:	01 90       	ld	r0, Z+
    167e:	f0 81       	ld	r31, Z
    1680:	e0 2d       	mov	r30, r0
    1682:	84 81       	ldd	r24, Z+4	; 0x04
    1684:	88 23       	and	r24, r24
    1686:	71 f0       	breq	.+28     	; 0x16a4 <udc_reset+0x3a>
    1688:	c0 e0       	ldi	r28, 0x00	; 0
    168a:	8c 2f       	mov	r24, r28
    168c:	73 df       	rcall	.-282    	; 0x1574 <udc_iface_disable>
    168e:	cf 5f       	subi	r28, 0xFF	; 255
    1690:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    1694:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1698:	01 90       	ld	r0, Z+
    169a:	f0 81       	ld	r31, Z
    169c:	e0 2d       	mov	r30, r0
    169e:	84 81       	ldd	r24, Z+4	; 0x04
    16a0:	c8 17       	cp	r28, r24
    16a2:	98 f3       	brcs	.-26     	; 0x168a <udc_reset+0x20>
    16a4:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <udc_num_configuration>
    16a8:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <udc_device_status>
    16ac:	10 92 db 20 	sts	0x20DB, r1	; 0x8020db <udc_device_status+0x1>
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    16b4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    16b6:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <udc_num_configuration>
    16ba:	88 23       	and	r24, r24
    16bc:	49 f1       	breq	.+82     	; 0x1710 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16be:	a0 91 d4 20 	lds	r26, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    16c2:	b0 91 d5 20 	lds	r27, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    16c6:	ed 91       	ld	r30, X+
    16c8:	fc 91       	ld	r31, X
    16ca:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    16cc:	84 81       	ldd	r24, Z+4	; 0x04
    16ce:	88 23       	and	r24, r24
    16d0:	f9 f0       	breq	.+62     	; 0x1710 <udc_sof_notify+0x5c>
    16d2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    16d4:	ec 2f       	mov	r30, r28
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	12 96       	adiw	r26, 0x02	; 2
    16de:	8d 91       	ld	r24, X+
    16e0:	9c 91       	ld	r25, X
    16e2:	13 97       	sbiw	r26, 0x03	; 3
    16e4:	e8 0f       	add	r30, r24
    16e6:	f9 1f       	adc	r31, r25
    16e8:	01 90       	ld	r0, Z+
    16ea:	f0 81       	ld	r31, Z
    16ec:	e0 2d       	mov	r30, r0
    16ee:	00 84       	ldd	r0, Z+8	; 0x08
    16f0:	f1 85       	ldd	r31, Z+9	; 0x09
    16f2:	e0 2d       	mov	r30, r0
    16f4:	30 97       	sbiw	r30, 0x00	; 0
    16f6:	09 f0       	breq	.+2      	; 0x16fa <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    16f8:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    16fa:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16fc:	a0 91 d4 20 	lds	r26, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    1700:	b0 91 d5 20 	lds	r27, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1704:	ed 91       	ld	r30, X+
    1706:	fc 91       	ld	r31, X
    1708:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    170a:	84 81       	ldd	r24, Z+4	; 0x04
    170c:	c8 17       	cp	r28, r24
    170e:	10 f3       	brcs	.-60     	; 0x16d4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1710:	cf 91       	pop	r28
    1712:	08 95       	ret

00001714 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    171c:	ea e7       	ldi	r30, 0x7A	; 122
    171e:	f4 e2       	ldi	r31, 0x24	; 36
    1720:	12 86       	std	Z+10, r1	; 0x0a
    1722:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1724:	14 86       	std	Z+12, r1	; 0x0c
    1726:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1728:	16 86       	std	Z+14, r1	; 0x0e
    172a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    172c:	80 81       	ld	r24, Z
    172e:	88 23       	and	r24, r24
    1730:	3c f4       	brge	.+14     	; 0x1740 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1732:	20 91 80 24 	lds	r18, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1736:	30 91 81 24 	lds	r19, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    173a:	23 2b       	or	r18, r19
    173c:	09 f4       	brne	.+2      	; 0x1740 <udc_process_setup+0x2c>
    173e:	54 c3       	rjmp	.+1704   	; 0x1de8 <udc_process_setup+0x6d4>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1740:	80 76       	andi	r24, 0x60	; 96
    1742:	80 34       	cpi	r24, 0x40	; 64
    1744:	09 f0       	breq	.+2      	; 0x1748 <udc_process_setup+0x34>
    1746:	f2 c0       	rjmp	.+484    	; 0x192c <udc_process_setup+0x218>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    1748:	e0 91 7b 24 	lds	r30, 0x247B	; 0x80247b <udd_g_ctrlreq+0x1>
    174c:	8e 2f       	mov	r24, r30
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	e0 5a       	subi	r30, 0xA0	; 160
    1754:	f1 09       	sbc	r31, r1
    1756:	e8 30       	cpi	r30, 0x08	; 8
    1758:	f1 05       	cpc	r31, r1
    175a:	08 f0       	brcs	.+2      	; 0x175e <udc_process_setup+0x4a>
    175c:	de c0       	rjmp	.+444    	; 0x191a <udc_process_setup+0x206>
    175e:	e2 50       	subi	r30, 0x02	; 2
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	80 93 c7 20 	sts	0x20C7, r24	; 0x8020c7 <debugOnNextEnd>
    176c:	41 c3       	rjmp	.+1666   	; 0x1df0 <udc_process_setup+0x6dc>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    176e:	e0 e0       	ldi	r30, 0x00	; 0
    1770:	f8 e0       	ldi	r31, 0x08	; 8
    1772:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1774:	ca e7       	ldi	r28, 0x7A	; 122
    1776:	d4 e2       	ldi	r29, 0x24	; 36
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	9b 81       	ldd	r25, Y+3	; 0x03
    177c:	86 ab       	std	Z+54, r24	; 0x36
    177e:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	8f 70       	andi	r24, 0x0F	; 15
    1784:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1786:	6e 81       	ldd	r22, Y+6	; 0x06
    1788:	7f 81       	ldd	r23, Y+7	; 0x07
    178a:	8a e7       	ldi	r24, 0x7A	; 122
    178c:	92 e2       	ldi	r25, 0x22	; 34
    178e:	e0 d6       	rcall	.+3520   	; 0x2550 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1790:	8e 81       	ldd	r24, Y+6	; 0x06
    1792:	9f 81       	ldd	r25, Y+7	; 0x07
    1794:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    1798:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    179c:	82 17       	cp	r24, r18
    179e:	93 07       	cpc	r25, r19
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <udc_process_setup+0x90>
    17a2:	26 c3       	rjmp	.+1612   	; 0x1df0 <udc_process_setup+0x6dc>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    17a4:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    17a8:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				switch(global_mode){
    17ac:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    17b0:	8e 2f       	mov	r24, r30
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	88 30       	cpi	r24, 0x08	; 8
    17b6:	91 05       	cpc	r25, r1
    17b8:	08 f0       	brcs	.+2      	; 0x17bc <udc_process_setup+0xa8>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <udc_process_setup+0x20a>
    17bc:	fc 01       	movw	r30, r24
    17be:	ea 5f       	subi	r30, 0xFA	; 250
    17c0:	fe 4f       	sbci	r31, 0xFE	; 254
    17c2:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    17c6:	61 d9       	rcall	.-3390   	; 0xa8a <tiny_dma_set_mode_0>
    17c8:	13 c3       	rjmp	.+1574   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    17ca:	da d9       	rcall	.-3148   	; 0xb80 <tiny_dma_set_mode_1>
    17cc:	11 c3       	rjmp	.+1570   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    17ce:	50 da       	rcall	.-2912   	; 0xc70 <tiny_dma_set_mode_2>
    17d0:	0f c3       	rjmp	.+1566   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    17d2:	c3 da       	rcall	.-2682   	; 0xd5a <tiny_dma_set_mode_3>
    17d4:	0d c3       	rjmp	.+1562   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    17d6:	3d db       	rcall	.-2438   	; 0xe52 <tiny_dma_set_mode_4>
    17d8:	0b c3       	rjmp	.+1558   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    17da:	b1 db       	rcall	.-2206   	; 0xf3e <tiny_dma_set_mode_5>
    17dc:	09 c3       	rjmp	.+1554   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    17de:	f7 db       	rcall	.-2066   	; 0xfce <tiny_dma_set_mode_6>
    17e0:	07 c3       	rjmp	.+1550   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    17e2:	57 dc       	rcall	.-1874   	; 0x1092 <tiny_dma_set_mode_7>
    17e4:	05 c3       	rjmp	.+1546   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    17e6:	e0 e4       	ldi	r30, 0x40	; 64
    17e8:	f8 e0       	ldi	r31, 0x08	; 8
    17ea:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    17ec:	ca e7       	ldi	r28, 0x7A	; 122
    17ee:	d4 e2       	ldi	r29, 0x24	; 36
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	9b 81       	ldd	r25, Y+3	; 0x03
    17f4:	86 ab       	std	Z+54, r24	; 0x36
    17f6:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	8f 70       	andi	r24, 0x0F	; 15
    17fc:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    17fe:	6e 81       	ldd	r22, Y+6	; 0x06
    1800:	7f 81       	ldd	r23, Y+7	; 0x07
    1802:	8a e8       	ldi	r24, 0x8A	; 138
    1804:	94 e2       	ldi	r25, 0x24	; 36
    1806:	a4 d6       	rcall	.+3400   	; 0x2550 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1808:	8e 81       	ldd	r24, Y+6	; 0x06
    180a:	9f 81       	ldd	r25, Y+7	; 0x07
    180c:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    1810:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1814:	82 17       	cp	r24, r18
    1816:	93 07       	cpc	r25, r19
    1818:	09 f4       	brne	.+2      	; 0x181c <udc_process_setup+0x108>
    181a:	ea c2       	rjmp	.+1492   	; 0x1df0 <udc_process_setup+0x6dc>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    181c:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    1820:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				switch(global_mode){
    1824:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    1828:	8e 2f       	mov	r24, r30
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	88 30       	cpi	r24, 0x08	; 8
    182e:	91 05       	cpc	r25, r1
    1830:	08 f0       	brcs	.+2      	; 0x1834 <udc_process_setup+0x120>
    1832:	77 c0       	rjmp	.+238    	; 0x1922 <udc_process_setup+0x20e>
    1834:	fc 01       	movw	r30, r24
    1836:	e2 5f       	subi	r30, 0xF2	; 242
    1838:	fe 4f       	sbci	r31, 0xFE	; 254
    183a:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    183e:	25 d9       	rcall	.-3510   	; 0xa8a <tiny_dma_set_mode_0>
    1840:	d7 c2       	rjmp	.+1454   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1842:	9e d9       	rcall	.-3268   	; 0xb80 <tiny_dma_set_mode_1>
    1844:	d5 c2       	rjmp	.+1450   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1846:	14 da       	rcall	.-3032   	; 0xc70 <tiny_dma_set_mode_2>
    1848:	d3 c2       	rjmp	.+1446   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    184a:	87 da       	rcall	.-2802   	; 0xd5a <tiny_dma_set_mode_3>
    184c:	d1 c2       	rjmp	.+1442   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    184e:	01 db       	rcall	.-2558   	; 0xe52 <tiny_dma_set_mode_4>
    1850:	cf c2       	rjmp	.+1438   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1852:	75 db       	rcall	.-2326   	; 0xf3e <tiny_dma_set_mode_5>
    1854:	cd c2       	rjmp	.+1434   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1856:	bb db       	rcall	.-2186   	; 0xfce <tiny_dma_set_mode_6>
    1858:	cb c2       	rjmp	.+1430   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    185a:	1b dc       	rcall	.-1994   	; 0x1092 <tiny_dma_set_mode_7>
    185c:	c9 c2       	rjmp	.+1426   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    185e:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1862:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1866:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    186a:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <PSU_target>
    186e:	c0 c2       	rjmp	.+1408   	; 0x1df0 <udc_process_setup+0x6dc>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1870:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    1874:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1878:	bb c2       	rjmp	.+1398   	; 0x1df0 <udc_process_setup+0x6dc>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    187a:	e0 91 7c 24 	lds	r30, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    187e:	f0 91 7d 24 	lds	r31, 0x247D	; 0x80247d <udd_g_ctrlreq+0x3>
    1882:	e8 30       	cpi	r30, 0x08	; 8
    1884:	f1 05       	cpc	r31, r1
    1886:	08 f0       	brcs	.+2      	; 0x188a <udc_process_setup+0x176>
    1888:	4e c0       	rjmp	.+156    	; 0x1926 <udc_process_setup+0x212>
    188a:	ea 5e       	subi	r30, 0xEA	; 234
    188c:	fe 4f       	sbci	r31, 0xFE	; 254
    188e:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	67 d8       	rcall	.-3890   	; 0x966 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1898:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x4>
    189c:	31 d8       	rcall	.-3998   	; 0x900 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    189e:	f5 d8       	rcall	.-3606   	; 0xa8a <tiny_dma_set_mode_0>
    18a0:	a7 c2       	rjmp	.+1358   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	5f d8       	rcall	.-3906   	; 0x966 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18a8:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x4>
    18ac:	29 d8       	rcall	.-4014   	; 0x900 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    18ae:	68 d9       	rcall	.-3376   	; 0xb80 <tiny_dma_set_mode_1>
    18b0:	9f c2       	rjmp	.+1342   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	57 d8       	rcall	.-3922   	; 0x966 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18b8:	ca e7       	ldi	r28, 0x7A	; 122
    18ba:	d4 e2       	ldi	r29, 0x24	; 36
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	20 d8       	rcall	.-4032   	; 0x900 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	33 d8       	rcall	.-3994   	; 0x92a <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    18c4:	d5 d9       	rcall	.-3158   	; 0xc70 <tiny_dma_set_mode_2>
    18c6:	94 c2       	rjmp	.+1320   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    18c8:	48 da       	rcall	.-2928   	; 0xd5a <tiny_dma_set_mode_3>
    18ca:	92 c2       	rjmp	.+1316   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    18cc:	c2 da       	rcall	.-2684   	; 0xe52 <tiny_dma_set_mode_4>
    18ce:	90 c2       	rjmp	.+1312   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	48 d8       	rcall	.-3952   	; 0x966 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18d6:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x4>
    18da:	12 d8       	rcall	.-4060   	; 0x900 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    18dc:	30 db       	rcall	.-2464   	; 0xf3e <tiny_dma_set_mode_5>
    18de:	88 c2       	rjmp	.+1296   	; 0x1df0 <udc_process_setup+0x6dc>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	40 d8       	rcall	.-3968   	; 0x966 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18e6:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x4>
    18ea:	0a d8       	rcall	.-4076   	; 0x900 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    18ec:	70 db       	rcall	.-2336   	; 0xfce <tiny_dma_set_mode_6>
    18ee:	80 c2       	rjmp	.+1280   	; 0x1df0 <udc_process_setup+0x6dc>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    18f0:	62 e0       	ldi	r22, 0x02	; 2
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	38 d8       	rcall	.-3984   	; 0x966 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    18f6:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x4>
    18fa:	80 68       	ori	r24, 0x80	; 128
    18fc:	01 d8       	rcall	.-4094   	; 0x900 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    18fe:	c9 db       	rcall	.-2158   	; 0x1092 <tiny_dma_set_mode_7>
    1900:	77 c2       	rjmp	.+1262   	; 0x1df0 <udc_process_setup+0x6dc>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1902:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    1906:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    190a:	72 c2       	rjmp	.+1252   	; 0x1df0 <udc_process_setup+0x6dc>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    190c:	e9 e7       	ldi	r30, 0x79	; 121
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	88 ed       	ldi	r24, 0xD8	; 216
    1914:	f8 94       	cli
    1916:	84 bf       	out	0x34, r24	; 52
    1918:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <udc_process_setup+0x214>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    1926:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1928:	81 11       	cpse	r24, r1
    192a:	65 c2       	rjmp	.+1226   	; 0x1df6 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    192c:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq>
    1930:	98 2f       	mov	r25, r24
    1932:	90 76       	andi	r25, 0x60	; 96
    1934:	09 f0       	breq	.+2      	; 0x1938 <udc_process_setup+0x224>
    1936:	e1 c1       	rjmp	.+962    	; 0x1cfa <udc_process_setup+0x5e6>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1938:	88 23       	and	r24, r24
    193a:	0c f0       	brlt	.+2      	; 0x193e <udc_process_setup+0x22a>
    193c:	05 c1       	rjmp	.+522    	; 0x1b48 <udc_process_setup+0x434>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    193e:	20 91 80 24 	lds	r18, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1942:	30 91 81 24 	lds	r19, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    1946:	21 15       	cp	r18, r1
    1948:	31 05       	cpc	r19, r1
    194a:	09 f4       	brne	.+2      	; 0x194e <udc_process_setup+0x23a>
    194c:	d6 c1       	rjmp	.+940    	; 0x1cfa <udc_process_setup+0x5e6>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    194e:	8f 71       	andi	r24, 0x1F	; 31
    1950:	09 f0       	breq	.+2      	; 0x1954 <udc_process_setup+0x240>
    1952:	a3 c0       	rjmp	.+326    	; 0x1a9a <udc_process_setup+0x386>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1954:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x1>
    1958:	96 30       	cpi	r25, 0x06	; 6
    195a:	79 f0       	breq	.+30     	; 0x197a <udc_process_setup+0x266>
    195c:	98 30       	cpi	r25, 0x08	; 8
    195e:	09 f4       	brne	.+2      	; 0x1962 <udc_process_setup+0x24e>
    1960:	92 c0       	rjmp	.+292    	; 0x1a86 <udc_process_setup+0x372>
    1962:	91 11       	cpse	r25, r1
    1964:	9a c0       	rjmp	.+308    	; 0x1a9a <udc_process_setup+0x386>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1966:	22 30       	cpi	r18, 0x02	; 2
    1968:	31 05       	cpc	r19, r1
    196a:	09 f0       	breq	.+2      	; 0x196e <udc_process_setup+0x25a>
    196c:	c6 c1       	rjmp	.+908    	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	8a ed       	ldi	r24, 0xDA	; 218
    1974:	90 e2       	ldi	r25, 0x20	; 32
    1976:	ec d5       	rcall	.+3032   	; 0x2550 <udd_set_setup_payload>
    1978:	3d c2       	rjmp	.+1146   	; 0x1df4 <udc_process_setup+0x6e0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    197a:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    197e:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1982:	29 2f       	mov	r18, r25
    1984:	33 27       	eor	r19, r19
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	a9 f0       	breq	.+42     	; 0x19b6 <udc_process_setup+0x2a2>
    198c:	24 f4       	brge	.+8      	; 0x1996 <udc_process_setup+0x282>
    198e:	21 30       	cpi	r18, 0x01	; 1
    1990:	31 05       	cpc	r19, r1
    1992:	41 f0       	breq	.+16     	; 0x19a4 <udc_process_setup+0x290>
    1994:	a9 c1       	rjmp	.+850    	; 0x1ce8 <udc_process_setup+0x5d4>
    1996:	23 30       	cpi	r18, 0x03	; 3
    1998:	31 05       	cpc	r19, r1
    199a:	d9 f1       	breq	.+118    	; 0x1a12 <udc_process_setup+0x2fe>
    199c:	2f 30       	cpi	r18, 0x0F	; 15
    199e:	31 05       	cpc	r19, r1
    19a0:	51 f1       	breq	.+84     	; 0x19f6 <udc_process_setup+0x2e2>
    19a2:	a2 c1       	rjmp	.+836    	; 0x1ce8 <udc_process_setup+0x5d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    19a4:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    19a8:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    19ac:	dc 01       	movw	r26, r24
    19ae:	6c 91       	ld	r22, X
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	ce d5       	rcall	.+2972   	; 0x2550 <udd_set_setup_payload>
    19b4:	59 c0       	rjmp	.+178    	; 0x1a68 <udc_process_setup+0x354>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    19b6:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    19ba:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    19be:	21 89       	ldd	r18, Z+17	; 0x11
    19c0:	82 17       	cp	r24, r18
    19c2:	08 f0       	brcs	.+2      	; 0x19c6 <udc_process_setup+0x2b2>
    19c4:	9a c1       	rjmp	.+820    	; 0x1cfa <udc_process_setup+0x5e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    19c6:	99 27       	eor	r25, r25
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    19d4:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    19d8:	e8 0f       	add	r30, r24
    19da:	f9 1f       	adc	r31, r25
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    19e0:	fc 01       	movw	r30, r24
    19e2:	62 81       	ldd	r22, Z+2	; 0x02
    19e4:	73 81       	ldd	r23, Z+3	; 0x03
    19e6:	b4 d5       	rcall	.+2920   	; 0x2550 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    19e8:	e0 91 82 24 	lds	r30, 0x2482	; 0x802482 <udd_g_ctrlreq+0x8>
    19ec:	f0 91 83 24 	lds	r31, 0x2483	; 0x802483 <udd_g_ctrlreq+0x9>
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	81 83       	std	Z+1, r24	; 0x01
    19f4:	39 c0       	rjmp	.+114    	; 0x1a68 <udc_process_setup+0x354>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    19f6:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    19fa:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <udc_process_setup+0x2f0>
    1a02:	7b c1       	rjmp	.+758    	; 0x1cfa <udc_process_setup+0x5e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1a04:	dc 01       	movw	r26, r24
    1a06:	12 96       	adiw	r26, 0x02	; 2
    1a08:	6d 91       	ld	r22, X+
    1a0a:	7c 91       	ld	r23, X
    1a0c:	13 97       	sbiw	r26, 0x03	; 3
    1a0e:	a0 d5       	rcall	.+2880   	; 0x2550 <udd_set_setup_payload>
    1a10:	2b c0       	rjmp	.+86     	; 0x1a68 <udc_process_setup+0x354>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1a12:	99 27       	eor	r25, r25
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	91 05       	cpc	r25, r1
    1a18:	71 f0       	breq	.+28     	; 0x1a36 <udc_process_setup+0x322>
    1a1a:	38 f0       	brcs	.+14     	; 0x1a2a <udc_process_setup+0x316>
    1a1c:	02 97       	sbiw	r24, 0x02	; 2
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <udc_process_setup+0x30e>
    1a20:	6c c1       	rjmp	.+728    	; 0x1cfa <udc_process_setup+0x5e6>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1a22:	86 e9       	ldi	r24, 0x96	; 150
    1a24:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a26:	28 e1       	ldi	r18, 0x18	; 24
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <udc_process_setup+0x328>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a2a:	64 e0       	ldi	r22, 0x04	; 4
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	8a eb       	ldi	r24, 0xBA	; 186
    1a30:	90 e2       	ldi	r25, 0x20	; 32
    1a32:	8e d5       	rcall	.+2844   	; 0x2550 <udd_set_setup_payload>
    1a34:	19 c0       	rjmp	.+50     	; 0x1a68 <udc_process_setup+0x354>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1a36:	8f ea       	ldi	r24, 0xAF	; 175
    1a38:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a3a:	29 e0       	ldi	r18, 0x09	; 9
    1a3c:	38 2f       	mov	r19, r24
    1a3e:	a6 e6       	ldi	r26, 0x66	; 102
    1a40:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a42:	e8 2f       	mov	r30, r24
    1a44:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1a46:	81 91       	ld	r24, Z+
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	8d 93       	st	X+, r24
    1a4c:	9d 93       	st	X+, r25
    1a4e:	8e 2f       	mov	r24, r30
    1a50:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1a52:	82 17       	cp	r24, r18
    1a54:	c0 f3       	brcs	.-16     	; 0x1a46 <udc_process_setup+0x332>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1a56:	62 2f       	mov	r22, r18
    1a58:	66 0f       	add	r22, r22
    1a5a:	6e 5f       	subi	r22, 0xFE	; 254
    1a5c:	60 93 64 20 	sts	0x2064, r22	; 0x802064 <udc_string_desc>
		udd_set_setup_payload(
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	84 e6       	ldi	r24, 0x64	; 100
    1a64:	90 e2       	ldi	r25, 0x20	; 32
    1a66:	74 d5       	rcall	.+2792   	; 0x2550 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1a68:	ea e7       	ldi	r30, 0x7A	; 122
    1a6a:	f4 e2       	ldi	r31, 0x24	; 36
    1a6c:	86 81       	ldd	r24, Z+6	; 0x06
    1a6e:	97 81       	ldd	r25, Z+7	; 0x07
    1a70:	22 85       	ldd	r18, Z+10	; 0x0a
    1a72:	33 85       	ldd	r19, Z+11	; 0x0b
    1a74:	82 17       	cp	r24, r18
    1a76:	93 07       	cpc	r25, r19
    1a78:	08 f0       	brcs	.+2      	; 0x1a7c <udc_process_setup+0x368>
    1a7a:	bc c1       	rjmp	.+888    	; 0x1df4 <udc_process_setup+0x6e0>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1a7c:	80 93 84 24 	sts	0x2484, r24	; 0x802484 <udd_g_ctrlreq+0xa>
    1a80:	90 93 85 24 	sts	0x2485, r25	; 0x802485 <udd_g_ctrlreq+0xb>
    1a84:	b7 c1       	rjmp	.+878    	; 0x1df4 <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a86:	21 30       	cpi	r18, 0x01	; 1
    1a88:	31 05       	cpc	r19, r1
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <udc_process_setup+0x37a>
    1a8c:	36 c1       	rjmp	.+620    	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	86 ed       	ldi	r24, 0xD6	; 214
    1a94:	90 e2       	ldi	r25, 0x20	; 32
    1a96:	5c d5       	rcall	.+2744   	; 0x2550 <udd_set_setup_payload>
    1a98:	ad c1       	rjmp	.+858    	; 0x1df4 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	e1 f5       	brne	.+120    	; 0x1b16 <udc_process_setup+0x402>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a9e:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x1>
    1aa2:	9a 30       	cpi	r25, 0x0A	; 10
    1aa4:	c1 f5       	brne	.+112    	; 0x1b16 <udc_process_setup+0x402>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1aa6:	21 30       	cpi	r18, 0x01	; 1
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <udc_process_setup+0x39a>
    1aac:	26 c1       	rjmp	.+588    	; 0x1cfa <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1aae:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <udc_num_configuration>
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <udc_process_setup+0x3a4>
    1ab6:	21 c1       	rjmp	.+578    	; 0x1cfa <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ab8:	c0 91 7e 24 	lds	r28, 0x247E	; 0x80247e <udd_g_ctrlreq+0x4>
    1abc:	d0 91 7f 24 	lds	r29, 0x247F	; 0x80247f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ac0:	00 91 d4 20 	lds	r16, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    1ac4:	10 91 d5 20 	lds	r17, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1ac8:	d8 01       	movw	r26, r16
    1aca:	ed 91       	ld	r30, X+
    1acc:	fc 91       	ld	r31, X
    1ace:	84 81       	ldd	r24, Z+4	; 0x04
    1ad0:	c8 17       	cp	r28, r24
    1ad2:	08 f0       	brcs	.+2      	; 0x1ad6 <udc_process_setup+0x3c2>
    1ad4:	12 c1       	rjmp	.+548    	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	8c 2f       	mov	r24, r28
    1ada:	12 dd       	rcall	.-1500   	; 0x1500 <udc_update_iface_desc>
    1adc:	88 23       	and	r24, r24
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <udc_process_setup+0x3ce>
    1ae0:	0c c1       	rjmp	.+536    	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	99 27       	eor	r25, r25
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	d8 01       	movw	r26, r16
    1aec:	12 96       	adiw	r26, 0x02	; 2
    1aee:	ed 91       	ld	r30, X+
    1af0:	fc 91       	ld	r31, X
    1af2:	13 97       	sbiw	r26, 0x03	; 3
    1af4:	e8 0f       	add	r30, r24
    1af6:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1af8:	01 90       	ld	r0, Z+
    1afa:	f0 81       	ld	r31, Z
    1afc:	e0 2d       	mov	r30, r0
    1afe:	86 81       	ldd	r24, Z+6	; 0x06
    1b00:	97 81       	ldd	r25, Z+7	; 0x07
    1b02:	fc 01       	movw	r30, r24
    1b04:	09 95       	icall
    1b06:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	88 ed       	ldi	r24, 0xD8	; 216
    1b10:	90 e2       	ldi	r25, 0x20	; 32
    1b12:	1e d5       	rcall	.+2620   	; 0x2550 <udd_set_setup_payload>
    1b14:	6f c1       	rjmp	.+734    	; 0x1df4 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <udc_process_setup+0x408>
    1b1a:	ef c0       	rjmp	.+478    	; 0x1cfa <udc_process_setup+0x5e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b1c:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x1>
    1b20:	81 11       	cpse	r24, r1
    1b22:	e4 c0       	rjmp	.+456    	; 0x1cec <udc_process_setup+0x5d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1b24:	22 30       	cpi	r18, 0x02	; 2
    1b26:	31 05       	cpc	r19, r1
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <udc_process_setup+0x418>
    1b2a:	e7 c0       	rjmp	.+462    	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1b2c:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x4>
    1b30:	8b d5       	rcall	.+2838   	; 0x2648 <udd_ep_is_halted>
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <udc_ep_status.5524>
    1b38:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <udc_ep_status.5524+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	80 ed       	ldi	r24, 0xD0	; 208
    1b42:	90 e2       	ldi	r25, 0x20	; 32
    1b44:	05 d5       	rcall	.+2570   	; 0x2550 <udd_set_setup_payload>
    1b46:	56 c1       	rjmp	.+684    	; 0x1df4 <udc_process_setup+0x6e0>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b48:	8f 71       	andi	r24, 0x1F	; 31
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <udc_process_setup+0x43a>
    1b4c:	83 c0       	rjmp	.+262    	; 0x1c54 <udc_process_setup+0x540>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b4e:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x1>
    1b52:	93 30       	cpi	r25, 0x03	; 3
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <udc_process_setup+0x444>
    1b56:	cc c0       	rjmp	.+408    	; 0x1cf0 <udc_process_setup+0x5dc>
    1b58:	18 f4       	brcc	.+6      	; 0x1b60 <udc_process_setup+0x44c>
    1b5a:	91 30       	cpi	r25, 0x01	; 1
    1b5c:	a1 f0       	breq	.+40     	; 0x1b86 <udc_process_setup+0x472>
    1b5e:	7a c0       	rjmp	.+244    	; 0x1c54 <udc_process_setup+0x540>
    1b60:	95 30       	cpi	r25, 0x05	; 5
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <udc_process_setup+0x456>
    1b64:	99 30       	cpi	r25, 0x09	; 9
    1b66:	39 f1       	breq	.+78     	; 0x1bb6 <udc_process_setup+0x4a2>
    1b68:	75 c0       	rjmp	.+234    	; 0x1c54 <udc_process_setup+0x540>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b6a:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1b6e:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    1b72:	89 2b       	or	r24, r25
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <udc_process_setup+0x464>
    1b76:	c1 c0       	rjmp	.+386    	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1b78:	8a e7       	ldi	r24, 0x7A	; 122
    1b7a:	9a e0       	ldi	r25, 0x0A	; 10
    1b7c:	80 93 86 24 	sts	0x2486, r24	; 0x802486 <udd_g_ctrlreq+0xc>
    1b80:	90 93 87 24 	sts	0x2487, r25	; 0x802487 <udd_g_ctrlreq+0xd>
    1b84:	37 c1       	rjmp	.+622    	; 0x1df4 <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b86:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1b8a:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    1b8e:	89 2b       	or	r24, r25
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <udc_process_setup+0x480>
    1b92:	b3 c0       	rjmp	.+358    	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b94:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    1b98:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x3>
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <udc_process_setup+0x48e>
    1ba0:	ac c0       	rjmp	.+344    	; 0x1cfa <udc_process_setup+0x5e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1ba2:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <udc_device_status>
    1ba6:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <udc_device_status+0x1>
    1baa:	8d 7f       	andi	r24, 0xFD	; 253
    1bac:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <udc_device_status>
    1bb0:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <udc_device_status+0x1>
    1bb4:	1f c1       	rjmp	.+574    	; 0x1df4 <udc_process_setup+0x6e0>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1bb6:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1bba:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    1bbe:	89 2b       	or	r24, r25
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <udc_process_setup+0x4b0>
    1bc2:	9b c0       	rjmp	.+310    	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1bc4:	c2 d4       	rcall	.+2436   	; 0x254a <udd_getaddress>
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <udc_process_setup+0x4b8>
    1bca:	97 c0       	rjmp	.+302    	; 0x1cfa <udc_process_setup+0x5e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1bcc:	20 91 7c 24 	lds	r18, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    1bd0:	30 91 7d 24 	lds	r19, 0x247D	; 0x80247d <udd_g_ctrlreq+0x3>
    1bd4:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1bd6:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1bda:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1bde:	81 89       	ldd	r24, Z+17	; 0x11
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	82 17       	cp	r24, r18
    1be4:	93 07       	cpc	r25, r19
    1be6:	08 f4       	brcc	.+2      	; 0x1bea <udc_process_setup+0x4d6>
    1be8:	88 c0       	rjmp	.+272    	; 0x1cfa <udc_process_setup+0x5e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1bea:	3f dd       	rcall	.-1410   	; 0x166a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1bec:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    1bf0:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x3>
    1bf4:	80 93 d6 20 	sts	0x20D6, r24	; 0x8020d6 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1bf8:	88 23       	and	r24, r24
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <udc_process_setup+0x4ea>
    1bfc:	fb c0       	rjmp	.+502    	; 0x1df4 <udc_process_setup+0x6e0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1bfe:	99 27       	eor	r25, r25
    1c00:	81 50       	subi	r24, 0x01	; 1
    1c02:	90 4c       	sbci	r25, 0xC0	; 192
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1c10:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1c14:	e8 0f       	add	r30, r24
    1c16:	f9 1f       	adc	r31, r25
    1c18:	e0 93 d4 20 	sts	0x20D4, r30	; 0x8020d4 <udc_ptr_conf>
    1c1c:	f0 93 d5 20 	sts	0x20D5, r31	; 0x8020d5 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c20:	01 90       	ld	r0, Z+
    1c22:	f0 81       	ld	r31, Z
    1c24:	e0 2d       	mov	r30, r0
    1c26:	84 81       	ldd	r24, Z+4	; 0x04
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <udc_process_setup+0x51a>
    1c2c:	e3 c0       	rjmp	.+454    	; 0x1df4 <udc_process_setup+0x6e0>
    1c2e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	8c 2f       	mov	r24, r28
    1c34:	e1 dc       	rcall	.-1598   	; 0x15f8 <udc_iface_enable>
    1c36:	88 23       	and	r24, r24
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <udc_process_setup+0x528>
    1c3a:	5f c0       	rjmp	.+190    	; 0x1cfa <udc_process_setup+0x5e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c3c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c3e:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    1c42:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1c46:	01 90       	ld	r0, Z+
    1c48:	f0 81       	ld	r31, Z
    1c4a:	e0 2d       	mov	r30, r0
    1c4c:	84 81       	ldd	r24, Z+4	; 0x04
    1c4e:	c8 17       	cp	r28, r24
    1c50:	78 f3       	brcs	.-34     	; 0x1c30 <udc_process_setup+0x51c>
    1c52:	d0 c0       	rjmp	.+416    	; 0x1df4 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	e1 f4       	brne	.+56     	; 0x1c90 <udc_process_setup+0x57c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c58:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x1>
    1c5c:	9b 30       	cpi	r25, 0x0B	; 11
    1c5e:	c1 f4       	brne	.+48     	; 0x1c90 <udc_process_setup+0x57c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1c60:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1c64:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    1c68:	89 2b       	or	r24, r25
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <udc_process_setup+0x55a>
    1c6c:	46 c0       	rjmp	.+140    	; 0x1cfa <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c6e:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <udc_num_configuration>
    1c72:	88 23       	and	r24, r24
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <udc_process_setup+0x564>
    1c76:	41 c0       	rjmp	.+130    	; 0x1cfa <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c78:	ea e7       	ldi	r30, 0x7A	; 122
    1c7a:	f4 e2       	ldi	r31, 0x24	; 36
    1c7c:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c7e:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1c80:	8c 2f       	mov	r24, r28
    1c82:	78 dc       	rcall	.-1808   	; 0x1574 <udc_iface_disable>
    1c84:	88 23       	and	r24, r24
    1c86:	c9 f1       	breq	.+114    	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1c88:	6d 2f       	mov	r22, r29
    1c8a:	8c 2f       	mov	r24, r28
    1c8c:	b5 dc       	rcall	.-1686   	; 0x15f8 <udc_iface_enable>
    1c8e:	33 c0       	rjmp	.+102    	; 0x1cf6 <udc_process_setup+0x5e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c90:	82 30       	cpi	r24, 0x02	; 2
    1c92:	99 f5       	brne	.+102    	; 0x1cfa <udc_process_setup+0x5e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c94:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x1>
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	19 f0       	breq	.+6      	; 0x1ca2 <udc_process_setup+0x58e>
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	89 f0       	breq	.+34     	; 0x1cc2 <udc_process_setup+0x5ae>
    1ca0:	29 c0       	rjmp	.+82     	; 0x1cf4 <udc_process_setup+0x5e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ca2:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1ca6:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    1caa:	89 2b       	or	r24, r25
    1cac:	31 f5       	brne	.+76     	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cae:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    1cb2:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x3>
    1cb6:	89 2b       	or	r24, r25
    1cb8:	01 f5       	brne	.+64     	; 0x1cfa <udc_process_setup+0x5e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cba:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x4>
    1cbe:	df d4       	rcall	.+2494   	; 0x267e <udd_ep_clear_halt>
    1cc0:	1a c0       	rjmp	.+52     	; 0x1cf6 <udc_process_setup+0x5e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1cc2:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1cc6:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    1cca:	89 2b       	or	r24, r25
    1ccc:	b1 f4       	brne	.+44     	; 0x1cfa <udc_process_setup+0x5e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cce:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x2>
    1cd2:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x3>
    1cd6:	89 2b       	or	r24, r25
    1cd8:	81 f4       	brne	.+32     	; 0x1cfa <udc_process_setup+0x5e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cda:	ca e7       	ldi	r28, 0x7A	; 122
    1cdc:	d4 e2       	ldi	r29, 0x24	; 36
    1cde:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce0:	bd d5       	rcall	.+2938   	; 0x285c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	20 d6       	rcall	.+3136   	; 0x2926 <udd_ep_set_halt>
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <udc_process_setup+0x5e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	03 c0       	rjmp	.+6      	; 0x1cf6 <udc_process_setup+0x5e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	7e c0       	rjmp	.+252    	; 0x1df6 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1cfa:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq>
    1cfe:	8f 71       	andi	r24, 0x1F	; 31
    1d00:	81 30       	cpi	r24, 0x01	; 1
    1d02:	71 f5       	brne	.+92     	; 0x1d60 <udc_process_setup+0x64c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d04:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <udc_num_configuration>
    1d08:	88 23       	and	r24, r24
    1d0a:	51 f1       	breq	.+84     	; 0x1d60 <udc_process_setup+0x64c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d0c:	00 91 7e 24 	lds	r16, 0x247E	; 0x80247e <udd_g_ctrlreq+0x4>
    1d10:	10 91 7f 24 	lds	r17, 0x247F	; 0x80247f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d14:	c0 91 d4 20 	lds	r28, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    1d18:	d0 91 d5 20 	lds	r29, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1d1c:	e8 81       	ld	r30, Y
    1d1e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d20:	84 81       	ldd	r24, Z+4	; 0x04
    1d22:	08 17       	cp	r16, r24
    1d24:	e8 f4       	brcc	.+58     	; 0x1d60 <udc_process_setup+0x64c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	80 2f       	mov	r24, r16
    1d2a:	ea db       	rcall	.-2092   	; 0x1500 <udc_update_iface_desc>
    1d2c:	88 23       	and	r24, r24
    1d2e:	c1 f0       	breq	.+48     	; 0x1d60 <udc_process_setup+0x64c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d30:	f8 01       	movw	r30, r16
    1d32:	ff 27       	eor	r31, r31
    1d34:	cf 01       	movw	r24, r30
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3e:	e8 0f       	add	r30, r24
    1d40:	f9 1f       	adc	r31, r25
    1d42:	c0 81       	ld	r28, Z
    1d44:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d46:	ee 81       	ldd	r30, Y+6	; 0x06
    1d48:	ff 81       	ldd	r31, Y+7	; 0x07
    1d4a:	09 95       	icall
    1d4c:	68 2f       	mov	r22, r24
    1d4e:	80 2f       	mov	r24, r16
    1d50:	d7 db       	rcall	.-2130   	; 0x1500 <udc_update_iface_desc>
    1d52:	88 23       	and	r24, r24
    1d54:	29 f0       	breq	.+10     	; 0x1d60 <udc_process_setup+0x64c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1d56:	ec 81       	ldd	r30, Y+4	; 0x04
    1d58:	fd 81       	ldd	r31, Y+5	; 0x05
    1d5a:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1d5c:	81 11       	cpse	r24, r1
    1d5e:	4b c0       	rjmp	.+150    	; 0x1df6 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d60:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq>
    1d64:	8f 71       	andi	r24, 0x1F	; 31
    1d66:	82 30       	cpi	r24, 0x02	; 2
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <udc_process_setup+0x658>
    1d6a:	40 c0       	rjmp	.+128    	; 0x1dec <udc_process_setup+0x6d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d6c:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <udc_num_configuration>
    1d70:	88 23       	and	r24, r24
    1d72:	b1 f1       	breq	.+108    	; 0x1de0 <udc_process_setup+0x6cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d74:	a0 91 d4 20 	lds	r26, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    1d78:	b0 91 d5 20 	lds	r27, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1d7c:	ed 91       	ld	r30, X+
    1d7e:	fc 91       	ld	r31, X
    1d80:	11 97       	sbiw	r26, 0x01	; 1
    1d82:	84 81       	ldd	r24, Z+4	; 0x04
    1d84:	88 23       	and	r24, r24
    1d86:	71 f1       	breq	.+92     	; 0x1de4 <udc_process_setup+0x6d0>
    1d88:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d8a:	ec 2f       	mov	r30, r28
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	ee 0f       	add	r30, r30
    1d90:	ff 1f       	adc	r31, r31
    1d92:	12 96       	adiw	r26, 0x02	; 2
    1d94:	8d 91       	ld	r24, X+
    1d96:	9c 91       	ld	r25, X
    1d98:	13 97       	sbiw	r26, 0x03	; 3
    1d9a:	e8 0f       	add	r30, r24
    1d9c:	f9 1f       	adc	r31, r25
    1d9e:	00 81       	ld	r16, Z
    1da0:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1da2:	d8 01       	movw	r26, r16
    1da4:	16 96       	adiw	r26, 0x06	; 6
    1da6:	ed 91       	ld	r30, X+
    1da8:	fc 91       	ld	r31, X
    1daa:	17 97       	sbiw	r26, 0x07	; 7
    1dac:	09 95       	icall
    1dae:	68 2f       	mov	r22, r24
    1db0:	8c 2f       	mov	r24, r28
    1db2:	a6 db       	rcall	.-2228   	; 0x1500 <udc_update_iface_desc>
    1db4:	88 23       	and	r24, r24
    1db6:	f9 f0       	breq	.+62     	; 0x1df6 <udc_process_setup+0x6e2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1db8:	d8 01       	movw	r26, r16
    1dba:	14 96       	adiw	r26, 0x04	; 4
    1dbc:	ed 91       	ld	r30, X+
    1dbe:	fc 91       	ld	r31, X
    1dc0:	15 97       	sbiw	r26, 0x05	; 5
    1dc2:	09 95       	icall
    1dc4:	81 11       	cpse	r24, r1
    1dc6:	17 c0       	rjmp	.+46     	; 0x1df6 <udc_process_setup+0x6e2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1dc8:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dca:	a0 91 d4 20 	lds	r26, 0x20D4	; 0x8020d4 <udc_ptr_conf>
    1dce:	b0 91 d5 20 	lds	r27, 0x20D5	; 0x8020d5 <udc_ptr_conf+0x1>
    1dd2:	ed 91       	ld	r30, X+
    1dd4:	fc 91       	ld	r31, X
    1dd6:	11 97       	sbiw	r26, 0x01	; 1
    1dd8:	94 81       	ldd	r25, Z+4	; 0x04
    1dda:	c9 17       	cp	r28, r25
    1ddc:	b0 f2       	brcs	.-84     	; 0x1d8a <udc_process_setup+0x676>
    1dde:	0b c0       	rjmp	.+22     	; 0x1df6 <udc_process_setup+0x6e2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	09 c0       	rjmp	.+18     	; 0x1df6 <udc_process_setup+0x6e2>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	07 c0       	rjmp	.+14     	; 0x1df6 <udc_process_setup+0x6e2>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	05 c0       	rjmp	.+10     	; 0x1df6 <udc_process_setup+0x6e2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	03 c0       	rjmp	.+6      	; 0x1df6 <udc_process_setup+0x6e2>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <udc_process_setup+0x6e2>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	08 95       	ret

00001e00 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1e00:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1e02:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1e04:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1e06:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1e08:	60 83       	st	Z, r22
	ret                             // Return to caller
    1e0a:	08 95       	ret

00001e0c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1e0c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1e10:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1e12:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1e14:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1e18:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1e1a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1e1e:	08 95       	ret

00001e20 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e20:	81 11       	cpse	r24, r1
    1e22:	22 c0       	rjmp	.+68     	; 0x1e68 <udd_sleep_mode+0x48>
    1e24:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <udd_b_idle>
    1e28:	99 23       	and	r25, r25
    1e2a:	d9 f0       	breq	.+54     	; 0x1e62 <udd_sleep_mode+0x42>
    1e2c:	90 91 69 2e 	lds	r25, 0x2E69	; 0x802e69 <sleepmgr_locks+0x1>
    1e30:	91 11       	cpse	r25, r1
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <udd_sleep_mode+0x16>
    1e34:	ff cf       	rjmp	.-2      	; 0x1e34 <udd_sleep_mode+0x14>
    1e36:	2f b7       	in	r18, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	e8 e6       	ldi	r30, 0x68	; 104
    1e3c:	fe e2       	ldi	r31, 0x2E	; 46
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	91 50       	subi	r25, 0x01	; 1
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	2f bf       	out	0x3f, r18	; 63
    1e46:	0d c0       	rjmp	.+26     	; 0x1e62 <udd_sleep_mode+0x42>
    1e48:	90 91 69 2e 	lds	r25, 0x2E69	; 0x802e69 <sleepmgr_locks+0x1>
    1e4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <udd_sleep_mode+0x32>
    1e50:	ff cf       	rjmp	.-2      	; 0x1e50 <udd_sleep_mode+0x30>
    1e52:	2f b7       	in	r18, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	e8 e6       	ldi	r30, 0x68	; 104
    1e58:	fe e2       	ldi	r31, 0x2E	; 46
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	9f 5f       	subi	r25, 0xFF	; 255
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	2f bf       	out	0x3f, r18	; 63
    1e62:	80 93 6c 22 	sts	0x226C, r24	; 0x80226c <udd_b_idle>
    1e66:	08 95       	ret
    1e68:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <udd_b_idle>
    1e6c:	99 23       	and	r25, r25
    1e6e:	61 f3       	breq	.-40     	; 0x1e48 <udd_sleep_mode+0x28>
    1e70:	f8 cf       	rjmp	.-16     	; 0x1e62 <udd_sleep_mode+0x42>

00001e72 <udd_ctrl_init>:
    1e72:	0f 93       	push	r16
    1e74:	e8 ec       	ldi	r30, 0xC8	; 200
    1e76:	f4 e0       	ldi	r31, 0x04	; 4
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 7d       	andi	r24, 0xDF	; 223
    1e7c:	80 83       	st	Z, r24
    1e7e:	80 81       	ld	r24, Z
    1e80:	8f 7d       	andi	r24, 0xDF	; 223
    1e82:	80 83       	st	Z, r24
    1e84:	e0 e3       	ldi	r30, 0x30	; 48
    1e86:	f2 e2       	ldi	r31, 0x22	; 34
    1e88:	02 e0       	ldi	r16, 0x02	; 2
    1e8a:	05 93       	las	Z, r16
    1e8c:	10 92 32 22 	sts	0x2232, r1	; 0x802232 <udd_sram+0x1a>
    1e90:	10 92 33 22 	sts	0x2233, r1	; 0x802233 <udd_sram+0x1b>
    1e94:	00 e2       	ldi	r16, 0x20	; 32
    1e96:	06 93       	lac	Z, r16
    1e98:	00 e4       	ldi	r16, 0x40	; 64
    1e9a:	06 93       	lac	Z, r16
    1e9c:	e8 e2       	ldi	r30, 0x28	; 40
    1e9e:	f2 e2       	ldi	r31, 0x22	; 34
    1ea0:	00 e2       	ldi	r16, 0x20	; 32
    1ea2:	06 93       	lac	Z, r16
    1ea4:	00 e4       	ldi	r16, 0x40	; 64
    1ea6:	06 93       	lac	Z, r16
    1ea8:	ea e7       	ldi	r30, 0x7A	; 122
    1eaa:	f4 e2       	ldi	r31, 0x24	; 36
    1eac:	14 86       	std	Z+12, r1	; 0x0c
    1eae:	15 86       	std	Z+13, r1	; 0x0d
    1eb0:	16 86       	std	Z+14, r1	; 0x0e
    1eb2:	17 86       	std	Z+15, r1	; 0x0f
    1eb4:	12 86       	std	Z+10, r1	; 0x0a
    1eb6:	13 86       	std	Z+11, r1	; 0x0b
    1eb8:	10 92 17 22 	sts	0x2217, r1	; 0x802217 <udd_ep_control_state>
    1ebc:	0f 91       	pop	r16
    1ebe:	08 95       	ret

00001ec0 <udd_ctrl_stall_data>:
    1ec0:	0f 93       	push	r16
    1ec2:	85 e0       	ldi	r24, 0x05	; 5
    1ec4:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <udd_ep_control_state>
    1ec8:	e1 e3       	ldi	r30, 0x31	; 49
    1eca:	f2 e2       	ldi	r31, 0x22	; 34
    1ecc:	04 e0       	ldi	r16, 0x04	; 4
    1ece:	05 93       	las	Z, r16
    1ed0:	e9 e2       	ldi	r30, 0x29	; 41
    1ed2:	f2 e2       	ldi	r31, 0x22	; 34
    1ed4:	04 e0       	ldi	r16, 0x04	; 4
    1ed6:	05 93       	las	Z, r16
    1ed8:	0f 91       	pop	r16
    1eda:	08 95       	ret

00001edc <udd_ctrl_send_zlp_in>:
    1edc:	0f 93       	push	r16
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <udd_ep_control_state>
    1ee4:	10 92 32 22 	sts	0x2232, r1	; 0x802232 <udd_sram+0x1a>
    1ee8:	10 92 33 22 	sts	0x2233, r1	; 0x802233 <udd_sram+0x1b>
    1eec:	e0 e3       	ldi	r30, 0x30	; 48
    1eee:	f2 e2       	ldi	r31, 0x22	; 34
    1ef0:	02 e0       	ldi	r16, 0x02	; 2
    1ef2:	06 93       	lac	Z, r16
    1ef4:	0f 91       	pop	r16
    1ef6:	08 95       	ret

00001ef8 <udd_ctrl_endofrequest>:
    1ef8:	e0 91 86 24 	lds	r30, 0x2486	; 0x802486 <udd_g_ctrlreq+0xc>
    1efc:	f0 91 87 24 	lds	r31, 0x2487	; 0x802487 <udd_g_ctrlreq+0xd>
    1f00:	30 97       	sbiw	r30, 0x00	; 0
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <udd_ctrl_endofrequest+0xe>
    1f04:	09 95       	icall
    1f06:	08 95       	ret

00001f08 <udd_ctrl_in_sent>:
    1f08:	0f 93       	push	r16
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <udd_ep_control_state>
    1f12:	83 30       	cpi	r24, 0x03	; 3
    1f14:	19 f4       	brne	.+6      	; 0x1f1c <udd_ctrl_in_sent+0x14>
    1f16:	f0 df       	rcall	.-32     	; 0x1ef8 <udd_ctrl_endofrequest>
    1f18:	ac df       	rcall	.-168    	; 0x1e72 <udd_ctrl_init>
    1f1a:	5e c0       	rjmp	.+188    	; 0x1fd8 <udd_ctrl_in_sent+0xd0>
    1f1c:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <udd_ctrl_payload_nb_trans>
    1f20:	90 91 14 22 	lds	r25, 0x2214	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>
    1f24:	c0 91 84 24 	lds	r28, 0x2484	; 0x802484 <udd_g_ctrlreq+0xa>
    1f28:	d0 91 85 24 	lds	r29, 0x2485	; 0x802485 <udd_g_ctrlreq+0xb>
    1f2c:	c8 1b       	sub	r28, r24
    1f2e:	d9 0b       	sbc	r29, r25
    1f30:	71 f5       	brne	.+92     	; 0x1f8e <udd_ctrl_in_sent+0x86>
    1f32:	20 91 15 22 	lds	r18, 0x2215	; 0x802215 <udd_ctrl_prev_payload_nb_trans>
    1f36:	30 91 16 22 	lds	r19, 0x2216	; 0x802216 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f3a:	82 0f       	add	r24, r18
    1f3c:	93 1f       	adc	r25, r19
    1f3e:	80 93 15 22 	sts	0x2215, r24	; 0x802215 <udd_ctrl_prev_payload_nb_trans>
    1f42:	90 93 16 22 	sts	0x2216, r25	; 0x802216 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f46:	20 91 80 24 	lds	r18, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    1f4a:	30 91 81 24 	lds	r19, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    1f4e:	82 17       	cp	r24, r18
    1f50:	93 07       	cpc	r25, r19
    1f52:	21 f0       	breq	.+8      	; 0x1f5c <udd_ctrl_in_sent+0x54>
    1f54:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <b_shortpacket.5272>
    1f58:	88 23       	and	r24, r24
    1f5a:	41 f0       	breq	.+16     	; 0x1f6c <udd_ctrl_in_sent+0x64>
    1f5c:	84 e0       	ldi	r24, 0x04	; 4
    1f5e:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <udd_ep_control_state>
    1f62:	e8 e2       	ldi	r30, 0x28	; 40
    1f64:	f2 e2       	ldi	r31, 0x22	; 34
    1f66:	02 e0       	ldi	r16, 0x02	; 2
    1f68:	06 93       	lac	Z, r16
    1f6a:	36 c0       	rjmp	.+108    	; 0x1fd8 <udd_ctrl_in_sent+0xd0>
    1f6c:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udd_g_ctrlreq+0xe>
    1f70:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udd_g_ctrlreq+0xf>
    1f74:	30 97       	sbiw	r30, 0x00	; 0
    1f76:	99 f0       	breq	.+38     	; 0x1f9e <udd_ctrl_in_sent+0x96>
    1f78:	09 95       	icall
    1f7a:	88 23       	and	r24, r24
    1f7c:	81 f0       	breq	.+32     	; 0x1f9e <udd_ctrl_in_sent+0x96>
    1f7e:	10 92 13 22 	sts	0x2213, r1	; 0x802213 <udd_ctrl_payload_nb_trans>
    1f82:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>
    1f86:	c0 91 84 24 	lds	r28, 0x2484	; 0x802484 <udd_g_ctrlreq+0xa>
    1f8a:	d0 91 85 24 	lds	r29, 0x2485	; 0x802485 <udd_g_ctrlreq+0xb>
    1f8e:	c0 34       	cpi	r28, 0x40	; 64
    1f90:	d1 05       	cpc	r29, r1
    1f92:	28 f0       	brcs	.+10     	; 0x1f9e <udd_ctrl_in_sent+0x96>
    1f94:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <b_shortpacket.5272>
    1f98:	c0 e4       	ldi	r28, 0x40	; 64
    1f9a:	d0 e0       	ldi	r29, 0x00	; 0
    1f9c:	03 c0       	rjmp	.+6      	; 0x1fa4 <udd_ctrl_in_sent+0x9c>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <b_shortpacket.5272>
    1fa4:	e8 e1       	ldi	r30, 0x18	; 24
    1fa6:	f2 e2       	ldi	r31, 0x22	; 34
    1fa8:	c2 8f       	std	Z+26, r28	; 0x1a
    1faa:	d3 8f       	std	Z+27, r29	; 0x1b
    1fac:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <udd_ctrl_payload_nb_trans>
    1fb0:	90 91 14 22 	lds	r25, 0x2214	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>
    1fb4:	20 91 82 24 	lds	r18, 0x2482	; 0x802482 <udd_g_ctrlreq+0x8>
    1fb8:	30 91 83 24 	lds	r19, 0x2483	; 0x802483 <udd_g_ctrlreq+0x9>
    1fbc:	28 0f       	add	r18, r24
    1fbe:	39 1f       	adc	r19, r25
    1fc0:	24 8f       	std	Z+28, r18	; 0x1c
    1fc2:	35 8f       	std	Z+29, r19	; 0x1d
    1fc4:	c8 0f       	add	r28, r24
    1fc6:	d9 1f       	adc	r29, r25
    1fc8:	c0 93 13 22 	sts	0x2213, r28	; 0x802213 <udd_ctrl_payload_nb_trans>
    1fcc:	d0 93 14 22 	sts	0x2214, r29	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>
    1fd0:	e0 e3       	ldi	r30, 0x30	; 48
    1fd2:	f2 e2       	ldi	r31, 0x22	; 34
    1fd4:	02 e0       	ldi	r16, 0x02	; 2
    1fd6:	06 93       	lac	Z, r16
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	0f 91       	pop	r16
    1fde:	08 95       	ret

00001fe0 <udd_ep_get_size>:
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	81 81       	ldd	r24, Z+1	; 0x01
    1fe4:	e8 2f       	mov	r30, r24
    1fe6:	e7 70       	andi	r30, 0x07	; 7
    1fe8:	8e 2f       	mov	r24, r30
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	fc 01       	movw	r30, r24
    1fee:	31 97       	sbiw	r30, 0x01	; 1
    1ff0:	e7 30       	cpi	r30, 0x07	; 7
    1ff2:	f1 05       	cpc	r31, r1
    1ff4:	c0 f4       	brcc	.+48     	; 0x2026 <udd_ep_get_size+0x46>
    1ff6:	e2 5e       	subi	r30, 0xE2	; 226
    1ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    1ffa:	8d c6       	rjmp	.+3354   	; 0x2d16 <__tablejump2__>
    1ffc:	80 e1       	ldi	r24, 0x10	; 16
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	08 95       	ret
    2002:	80 e2       	ldi	r24, 0x20	; 32
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	08 95       	ret
    2008:	80 e4       	ldi	r24, 0x40	; 64
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	08 95       	ret
    200e:	80 e8       	ldi	r24, 0x80	; 128
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	08 95       	ret
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	08 95       	ret
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	92 e0       	ldi	r25, 0x02	; 2
    201e:	08 95       	ret
    2020:	8f ef       	ldi	r24, 0xFF	; 255
    2022:	93 e0       	ldi	r25, 0x03	; 3
    2024:	08 95       	ret
    2026:	88 e0       	ldi	r24, 0x08	; 8
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	08 95       	ret

0000202c <udd_ep_get_job>:
    202c:	28 2f       	mov	r18, r24
    202e:	2f 70       	andi	r18, 0x0F	; 15
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	22 0f       	add	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	08 2e       	mov	r0, r24
    2038:	00 0c       	add	r0, r0
    203a:	99 0b       	sbc	r25, r25
    203c:	88 27       	eor	r24, r24
    203e:	99 0f       	add	r25, r25
    2040:	88 1f       	adc	r24, r24
    2042:	99 27       	eor	r25, r25
    2044:	82 0f       	add	r24, r18
    2046:	93 1f       	adc	r25, r19
    2048:	02 97       	sbiw	r24, 0x02	; 2
    204a:	9c 01       	movw	r18, r24
    204c:	22 0f       	add	r18, r18
    204e:	33 1f       	adc	r19, r19
    2050:	22 0f       	add	r18, r18
    2052:	33 1f       	adc	r19, r19
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	82 0f       	add	r24, r18
    205a:	93 1f       	adc	r25, r19
    205c:	83 56       	subi	r24, 0x63	; 99
    205e:	9e 4d       	sbci	r25, 0xDE	; 222
    2060:	08 95       	ret

00002062 <udd_ctrl_interrupt_tc_setup>:
    2062:	0f 93       	push	r16
    2064:	cf 93       	push	r28
    2066:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    206a:	80 ff       	sbrs	r24, 0
    206c:	62 c0       	rjmp	.+196    	; 0x2132 <udd_ctrl_interrupt_tc_setup+0xd0>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2074:	e8 e2       	ldi	r30, 0x28	; 40
    2076:	f2 e2       	ldi	r31, 0x22	; 34
    2078:	00 e8       	ldi	r16, 0x80	; 128
    207a:	06 93       	lac	Z, r16
    207c:	e0 e3       	ldi	r30, 0x30	; 48
    207e:	f2 e2       	ldi	r31, 0x22	; 34
    2080:	00 e8       	ldi	r16, 0x80	; 128
    2082:	06 93       	lac	Z, r16
    2084:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2088:	e8 e2       	ldi	r30, 0x28	; 40
    208a:	f2 e2       	ldi	r31, 0x22	; 34
    208c:	00 e1       	ldi	r16, 0x10	; 16
    208e:	06 93       	lac	Z, r16
    2090:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <udd_ep_control_state>
    2094:	88 23       	and	r24, r24
    2096:	29 f0       	breq	.+10     	; 0x20a2 <udd_ctrl_interrupt_tc_setup+0x40>
    2098:	83 50       	subi	r24, 0x03	; 3
    209a:	82 30       	cpi	r24, 0x02	; 2
    209c:	08 f4       	brcc	.+2      	; 0x20a0 <udd_ctrl_interrupt_tc_setup+0x3e>
    209e:	2c df       	rcall	.-424    	; 0x1ef8 <udd_ctrl_endofrequest>
    20a0:	e8 de       	rcall	.-560    	; 0x1e72 <udd_ctrl_init>
    20a2:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <udd_sram+0x12>
    20a6:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <udd_sram+0x13>
    20aa:	08 97       	sbiw	r24, 0x08	; 8
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <udd_ctrl_interrupt_tc_setup+0x4e>
    20ae:	43 c0       	rjmp	.+134    	; 0x2136 <udd_ctrl_interrupt_tc_setup+0xd4>
    20b0:	88 e0       	ldi	r24, 0x08	; 8
    20b2:	e3 ed       	ldi	r30, 0xD3	; 211
    20b4:	f1 e2       	ldi	r31, 0x21	; 33
    20b6:	aa e7       	ldi	r26, 0x7A	; 122
    20b8:	b4 e2       	ldi	r27, 0x24	; 36
    20ba:	01 90       	ld	r0, Z+
    20bc:	0d 92       	st	X+, r0
    20be:	8a 95       	dec	r24
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <udd_ctrl_interrupt_tc_setup+0x58>
    20c2:	e8 ec       	ldi	r30, 0xC8	; 200
    20c4:	f4 e0       	ldi	r31, 0x04	; 4
    20c6:	80 81       	ld	r24, Z
    20c8:	80 62       	ori	r24, 0x20	; 32
    20ca:	80 83       	st	Z, r24
    20cc:	80 81       	ld	r24, Z
    20ce:	80 62       	ori	r24, 0x20	; 32
    20d0:	80 83       	st	Z, r24
    20d2:	20 db       	rcall	.-2496   	; 0x1714 <udc_process_setup>
    20d4:	c8 2f       	mov	r28, r24
    20d6:	81 11       	cpse	r24, r1
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <udd_ctrl_interrupt_tc_setup+0x7e>
    20da:	f2 de       	rcall	.-540    	; 0x1ec0 <udd_ctrl_stall_data>
    20dc:	c1 e0       	ldi	r28, 0x01	; 1
    20de:	2c c0       	rjmp	.+88     	; 0x2138 <udd_ctrl_interrupt_tc_setup+0xd6>
    20e0:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq>
    20e4:	88 23       	and	r24, r24
    20e6:	6c f4       	brge	.+26     	; 0x2102 <udd_ctrl_interrupt_tc_setup+0xa0>
    20e8:	10 92 15 22 	sts	0x2215, r1	; 0x802215 <udd_ctrl_prev_payload_nb_trans>
    20ec:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <udd_ctrl_prev_payload_nb_trans+0x1>
    20f0:	10 92 13 22 	sts	0x2213, r1	; 0x802213 <udd_ctrl_payload_nb_trans>
    20f4:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <udd_ep_control_state>
    20fe:	04 df       	rcall	.-504    	; 0x1f08 <udd_ctrl_in_sent>
    2100:	1b c0       	rjmp	.+54     	; 0x2138 <udd_ctrl_interrupt_tc_setup+0xd6>
    2102:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    2106:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    210a:	89 2b       	or	r24, r25
    210c:	11 f4       	brne	.+4      	; 0x2112 <udd_ctrl_interrupt_tc_setup+0xb0>
    210e:	e6 de       	rcall	.-564    	; 0x1edc <udd_ctrl_send_zlp_in>
    2110:	13 c0       	rjmp	.+38     	; 0x2138 <udd_ctrl_interrupt_tc_setup+0xd6>
    2112:	10 92 15 22 	sts	0x2215, r1	; 0x802215 <udd_ctrl_prev_payload_nb_trans>
    2116:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <udd_ctrl_prev_payload_nb_trans+0x1>
    211a:	10 92 13 22 	sts	0x2213, r1	; 0x802213 <udd_ctrl_payload_nb_trans>
    211e:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <udd_ep_control_state>
    2128:	e8 e2       	ldi	r30, 0x28	; 40
    212a:	f2 e2       	ldi	r31, 0x22	; 34
    212c:	02 e0       	ldi	r16, 0x02	; 2
    212e:	06 93       	lac	Z, r16
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <udd_ctrl_interrupt_tc_setup+0xd6>
    2132:	c0 e0       	ldi	r28, 0x00	; 0
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <udd_ctrl_interrupt_tc_setup+0xd6>
    2136:	c1 e0       	ldi	r28, 0x01	; 1
    2138:	8c 2f       	mov	r24, r28
    213a:	cf 91       	pop	r28
    213c:	0f 91       	pop	r16
    213e:	08 95       	ret

00002140 <udd_ep_trans_complet>:
    2140:	8f 92       	push	r8
    2142:	9f 92       	push	r9
    2144:	af 92       	push	r10
    2146:	bf 92       	push	r11
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	d8 2e       	mov	r13, r24
    2158:	69 df       	rcall	.-302    	; 0x202c <udd_ep_get_job>
    215a:	8c 01       	movw	r16, r24
    215c:	bd 2c       	mov	r11, r13
    215e:	bb 1c       	adc	r11, r11
    2160:	bb 24       	eor	r11, r11
    2162:	bb 1c       	adc	r11, r11
    2164:	cd 2d       	mov	r28, r13
    2166:	cf 70       	andi	r28, 0x0F	; 15
    2168:	d0 e0       	ldi	r29, 0x00	; 0
    216a:	cc 0f       	add	r28, r28
    216c:	dd 1f       	adc	r29, r29
    216e:	cb 0d       	add	r28, r11
    2170:	d1 1d       	adc	r29, r1
    2172:	ce 01       	movw	r24, r28
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	9c 01       	movw	r18, r24
    2182:	28 5d       	subi	r18, 0xD8	; 216
    2184:	3d 4d       	sbci	r19, 0xDD	; 221
    2186:	79 01       	movw	r14, r18
    2188:	c9 01       	movw	r24, r18
    218a:	2a df       	rcall	.-428    	; 0x1fe0 <udd_ep_get_size>
    218c:	4c 01       	movw	r8, r24
    218e:	bb 20       	and	r11, r11
    2190:	09 f4       	brne	.+2      	; 0x2194 <udd_ep_trans_complet+0x54>
    2192:	70 c0       	rjmp	.+224    	; 0x2274 <udd_ep_trans_complet+0x134>
    2194:	fe 01       	movw	r30, r28
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	ee 0f       	add	r30, r30
    21a0:	ff 1f       	adc	r31, r31
    21a2:	e8 5e       	subi	r30, 0xE8	; 232
    21a4:	fd 4d       	sbci	r31, 0xDD	; 221
    21a6:	26 89       	ldd	r18, Z+22	; 0x16
    21a8:	37 89       	ldd	r19, Z+23	; 0x17
    21aa:	d8 01       	movw	r26, r16
    21ac:	15 96       	adiw	r26, 0x05	; 5
    21ae:	8d 91       	ld	r24, X+
    21b0:	9c 91       	ld	r25, X
    21b2:	16 97       	sbiw	r26, 0x06	; 6
    21b4:	82 0f       	add	r24, r18
    21b6:	93 1f       	adc	r25, r19
    21b8:	15 96       	adiw	r26, 0x05	; 5
    21ba:	8d 93       	st	X+, r24
    21bc:	9c 93       	st	X, r25
    21be:	16 97       	sbiw	r26, 0x06	; 6
    21c0:	13 96       	adiw	r26, 0x03	; 3
    21c2:	2d 91       	ld	r18, X+
    21c4:	3c 91       	ld	r19, X
    21c6:	14 97       	sbiw	r26, 0x04	; 4
    21c8:	82 17       	cp	r24, r18
    21ca:	93 07       	cpc	r25, r19
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <udd_ep_trans_complet+0x90>
    21ce:	3c c0       	rjmp	.+120    	; 0x2248 <udd_ep_trans_complet+0x108>
    21d0:	28 1b       	sub	r18, r24
    21d2:	39 0b       	sbc	r19, r25
    21d4:	21 15       	cp	r18, r1
    21d6:	b4 e0       	ldi	r27, 0x04	; 4
    21d8:	3b 07       	cpc	r19, r27
    21da:	38 f0       	brcs	.+14     	; 0x21ea <udd_ep_trans_complet+0xaa>
    21dc:	2f ef       	ldi	r18, 0xFF	; 255
    21de:	33 e0       	ldi	r19, 0x03	; 3
    21e0:	c9 01       	movw	r24, r18
    21e2:	b4 01       	movw	r22, r8
    21e4:	71 d5       	rcall	.+2786   	; 0x2cc8 <__udivmodhi4>
    21e6:	28 1b       	sub	r18, r24
    21e8:	39 0b       	sbc	r19, r25
    21ea:	f8 01       	movw	r30, r16
    21ec:	80 81       	ld	r24, Z
    21ee:	81 ff       	sbrs	r24, 1
    21f0:	09 c0       	rjmp	.+18     	; 0x2204 <udd_ep_trans_complet+0xc4>
    21f2:	c9 01       	movw	r24, r18
    21f4:	b4 01       	movw	r22, r8
    21f6:	68 d5       	rcall	.+2768   	; 0x2cc8 <__udivmodhi4>
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	89 2b       	or	r24, r25
    21fc:	09 f0       	breq	.+2      	; 0x2200 <udd_ep_trans_complet+0xc0>
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	84 2f       	mov	r24, r20
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <udd_ep_trans_complet+0xc6>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	d8 01       	movw	r26, r16
    2208:	9c 91       	ld	r25, X
    220a:	80 fb       	bst	r24, 0
    220c:	91 f9       	bld	r25, 1
    220e:	9c 93       	st	X, r25
    2210:	cc 0f       	add	r28, r28
    2212:	dd 1f       	adc	r29, r29
    2214:	cc 0f       	add	r28, r28
    2216:	dd 1f       	adc	r29, r29
    2218:	cc 0f       	add	r28, r28
    221a:	dd 1f       	adc	r29, r29
    221c:	c8 5e       	subi	r28, 0xE8	; 232
    221e:	dd 4d       	sbci	r29, 0xDD	; 221
    2220:	1e 8a       	std	Y+22, r1	; 0x16
    2222:	1f 8a       	std	Y+23, r1	; 0x17
    2224:	2a 8b       	std	Y+18, r18	; 0x12
    2226:	3b 8b       	std	Y+19, r19	; 0x13
    2228:	11 96       	adiw	r26, 0x01	; 1
    222a:	2d 91       	ld	r18, X+
    222c:	3c 91       	ld	r19, X
    222e:	12 97       	sbiw	r26, 0x02	; 2
    2230:	15 96       	adiw	r26, 0x05	; 5
    2232:	8d 91       	ld	r24, X+
    2234:	9c 91       	ld	r25, X
    2236:	16 97       	sbiw	r26, 0x06	; 6
    2238:	82 0f       	add	r24, r18
    223a:	93 1f       	adc	r25, r19
    223c:	8c 8b       	std	Y+20, r24	; 0x14
    223e:	9d 8b       	std	Y+21, r25	; 0x15
    2240:	f7 01       	movw	r30, r14
    2242:	02 e0       	ldi	r16, 0x02	; 2
    2244:	06 93       	lac	Z, r16
    2246:	ca c0       	rjmp	.+404    	; 0x23dc <udd_ep_trans_complet+0x29c>
    2248:	d8 01       	movw	r26, r16
    224a:	8c 91       	ld	r24, X
    224c:	81 ff       	sbrs	r24, 1
    224e:	b3 c0       	rjmp	.+358    	; 0x23b6 <udd_ep_trans_complet+0x276>
    2250:	8d 7f       	andi	r24, 0xFD	; 253
    2252:	8c 93       	st	X, r24
    2254:	cc 0f       	add	r28, r28
    2256:	dd 1f       	adc	r29, r29
    2258:	cc 0f       	add	r28, r28
    225a:	dd 1f       	adc	r29, r29
    225c:	cc 0f       	add	r28, r28
    225e:	dd 1f       	adc	r29, r29
    2260:	c8 5e       	subi	r28, 0xE8	; 232
    2262:	dd 4d       	sbci	r29, 0xDD	; 221
    2264:	1e 8a       	std	Y+22, r1	; 0x16
    2266:	1f 8a       	std	Y+23, r1	; 0x17
    2268:	1a 8a       	std	Y+18, r1	; 0x12
    226a:	1b 8a       	std	Y+19, r1	; 0x13
    226c:	f7 01       	movw	r30, r14
    226e:	02 e0       	ldi	r16, 0x02	; 2
    2270:	06 93       	lac	Z, r16
    2272:	b4 c0       	rjmp	.+360    	; 0x23dc <udd_ep_trans_complet+0x29c>
    2274:	fe 01       	movw	r30, r28
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	ee 0f       	add	r30, r30
    227c:	ff 1f       	adc	r31, r31
    227e:	ee 0f       	add	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	e8 5e       	subi	r30, 0xE8	; 232
    2284:	fd 4d       	sbci	r31, 0xDD	; 221
    2286:	a2 88       	ldd	r10, Z+18	; 0x12
    2288:	b3 88       	ldd	r11, Z+19	; 0x13
    228a:	d8 01       	movw	r26, r16
    228c:	8c 91       	ld	r24, X
    228e:	82 ff       	sbrs	r24, 2
    2290:	19 c0       	rjmp	.+50     	; 0x22c4 <udd_ep_trans_complet+0x184>
    2292:	11 96       	adiw	r26, 0x01	; 1
    2294:	ed 91       	ld	r30, X+
    2296:	fc 91       	ld	r31, X
    2298:	12 97       	sbiw	r26, 0x02	; 2
    229a:	15 96       	adiw	r26, 0x05	; 5
    229c:	2d 91       	ld	r18, X+
    229e:	3c 91       	ld	r19, X
    22a0:	16 97       	sbiw	r26, 0x06	; 6
    22a2:	13 96       	adiw	r26, 0x03	; 3
    22a4:	8d 91       	ld	r24, X+
    22a6:	9c 91       	ld	r25, X
    22a8:	14 97       	sbiw	r26, 0x04	; 4
    22aa:	b4 01       	movw	r22, r8
    22ac:	0d d5       	rcall	.+2586   	; 0x2cc8 <__udivmodhi4>
    22ae:	b0 e4       	ldi	r27, 0x40	; 64
    22b0:	db 9e       	mul	r13, r27
    22b2:	b0 01       	movw	r22, r0
    22b4:	11 24       	eor	r1, r1
    22b6:	63 56       	subi	r22, 0x63	; 99
    22b8:	7f 4d       	sbci	r23, 0xDF	; 223
    22ba:	ac 01       	movw	r20, r24
    22bc:	cf 01       	movw	r24, r30
    22be:	82 0f       	add	r24, r18
    22c0:	93 1f       	adc	r25, r19
    22c2:	3e d5       	rcall	.+2684   	; 0x2d40 <memcpy>
    22c4:	f8 01       	movw	r30, r16
    22c6:	25 81       	ldd	r18, Z+5	; 0x05
    22c8:	36 81       	ldd	r19, Z+6	; 0x06
    22ca:	2a 0d       	add	r18, r10
    22cc:	3b 1d       	adc	r19, r11
    22ce:	25 83       	std	Z+5, r18	; 0x05
    22d0:	36 83       	std	Z+6, r19	; 0x06
    22d2:	83 81       	ldd	r24, Z+3	; 0x03
    22d4:	94 81       	ldd	r25, Z+4	; 0x04
    22d6:	82 17       	cp	r24, r18
    22d8:	93 07       	cpc	r25, r19
    22da:	68 f4       	brcc	.+26     	; 0x22f6 <udd_ep_trans_complet+0x1b6>
    22dc:	85 83       	std	Z+5, r24	; 0x05
    22de:	96 83       	std	Z+6, r25	; 0x06
    22e0:	cc 0f       	add	r28, r28
    22e2:	dd 1f       	adc	r29, r29
    22e4:	cc 0f       	add	r28, r28
    22e6:	dd 1f       	adc	r29, r29
    22e8:	cc 0f       	add	r28, r28
    22ea:	dd 1f       	adc	r29, r29
    22ec:	c8 5e       	subi	r28, 0xE8	; 232
    22ee:	dd 4d       	sbci	r29, 0xDD	; 221
    22f0:	8e 89       	ldd	r24, Y+22	; 0x16
    22f2:	9f 89       	ldd	r25, Y+23	; 0x17
    22f4:	60 c0       	rjmp	.+192    	; 0x23b6 <udd_ep_trans_complet+0x276>
    22f6:	fe 01       	movw	r30, r28
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	ee 0f       	add	r30, r30
    22fe:	ff 1f       	adc	r31, r31
    2300:	ee 0f       	add	r30, r30
    2302:	ff 1f       	adc	r31, r31
    2304:	e8 5e       	subi	r30, 0xE8	; 232
    2306:	fd 4d       	sbci	r31, 0xDD	; 221
    2308:	46 89       	ldd	r20, Z+22	; 0x16
    230a:	57 89       	ldd	r21, Z+23	; 0x17
    230c:	4a 15       	cp	r20, r10
    230e:	5b 05       	cpc	r21, r11
    2310:	09 f0       	breq	.+2      	; 0x2314 <udd_ep_trans_complet+0x1d4>
    2312:	51 c0       	rjmp	.+162    	; 0x23b6 <udd_ep_trans_complet+0x276>
    2314:	28 17       	cp	r18, r24
    2316:	39 07       	cpc	r19, r25
    2318:	09 f4       	brne	.+2      	; 0x231c <udd_ep_trans_complet+0x1dc>
    231a:	4d c0       	rjmp	.+154    	; 0x23b6 <udd_ep_trans_complet+0x276>
    231c:	ac 01       	movw	r20, r24
    231e:	42 1b       	sub	r20, r18
    2320:	53 0b       	sbc	r21, r19
    2322:	9a 01       	movw	r18, r20
    2324:	21 15       	cp	r18, r1
    2326:	54 e0       	ldi	r21, 0x04	; 4
    2328:	35 07       	cpc	r19, r21
    232a:	50 f0       	brcs	.+20     	; 0x2340 <udd_ep_trans_complet+0x200>
    232c:	2f ef       	ldi	r18, 0xFF	; 255
    232e:	33 e0       	ldi	r19, 0x03	; 3
    2330:	c9 01       	movw	r24, r18
    2332:	b4 01       	movw	r22, r8
    2334:	c9 d4       	rcall	.+2450   	; 0x2cc8 <__udivmodhi4>
    2336:	d9 01       	movw	r26, r18
    2338:	a8 1b       	sub	r26, r24
    233a:	b9 0b       	sbc	r27, r25
    233c:	cd 01       	movw	r24, r26
    233e:	07 c0       	rjmp	.+14     	; 0x234e <udd_ep_trans_complet+0x20e>
    2340:	c9 01       	movw	r24, r18
    2342:	b4 01       	movw	r22, r8
    2344:	c1 d4       	rcall	.+2434   	; 0x2cc8 <__udivmodhi4>
    2346:	f9 01       	movw	r30, r18
    2348:	e8 1b       	sub	r30, r24
    234a:	f9 0b       	sbc	r31, r25
    234c:	cf 01       	movw	r24, r30
    234e:	fe 01       	movw	r30, r28
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	e8 5e       	subi	r30, 0xE8	; 232
    235e:	fd 4d       	sbci	r31, 0xDD	; 221
    2360:	12 8a       	std	Z+18, r1	; 0x12
    2362:	13 8a       	std	Z+19, r1	; 0x13
    2364:	88 15       	cp	r24, r8
    2366:	99 05       	cpc	r25, r9
    2368:	78 f4       	brcc	.+30     	; 0x2388 <udd_ep_trans_complet+0x248>
    236a:	d8 01       	movw	r26, r16
    236c:	8c 91       	ld	r24, X
    236e:	84 60       	ori	r24, 0x04	; 4
    2370:	8c 93       	st	X, r24
    2372:	b0 e4       	ldi	r27, 0x40	; 64
    2374:	db 9e       	mul	r13, r27
    2376:	c0 01       	movw	r24, r0
    2378:	11 24       	eor	r1, r1
    237a:	83 56       	subi	r24, 0x63	; 99
    237c:	9f 4d       	sbci	r25, 0xDF	; 223
    237e:	84 8b       	std	Z+20, r24	; 0x14
    2380:	95 8b       	std	Z+21, r25	; 0x15
    2382:	86 8a       	std	Z+22, r8	; 0x16
    2384:	97 8a       	std	Z+23, r9	; 0x17
    2386:	13 c0       	rjmp	.+38     	; 0x23ae <udd_ep_trans_complet+0x26e>
    2388:	f8 01       	movw	r30, r16
    238a:	41 81       	ldd	r20, Z+1	; 0x01
    238c:	52 81       	ldd	r21, Z+2	; 0x02
    238e:	25 81       	ldd	r18, Z+5	; 0x05
    2390:	36 81       	ldd	r19, Z+6	; 0x06
    2392:	24 0f       	add	r18, r20
    2394:	35 1f       	adc	r19, r21
    2396:	cc 0f       	add	r28, r28
    2398:	dd 1f       	adc	r29, r29
    239a:	cc 0f       	add	r28, r28
    239c:	dd 1f       	adc	r29, r29
    239e:	cc 0f       	add	r28, r28
    23a0:	dd 1f       	adc	r29, r29
    23a2:	c8 5e       	subi	r28, 0xE8	; 232
    23a4:	dd 4d       	sbci	r29, 0xDD	; 221
    23a6:	2c 8b       	std	Y+20, r18	; 0x14
    23a8:	3d 8b       	std	Y+21, r19	; 0x15
    23aa:	8e 8b       	std	Y+22, r24	; 0x16
    23ac:	9f 8b       	std	Y+23, r25	; 0x17
    23ae:	f7 01       	movw	r30, r14
    23b0:	02 e0       	ldi	r16, 0x02	; 2
    23b2:	06 93       	lac	Z, r16
    23b4:	13 c0       	rjmp	.+38     	; 0x23dc <udd_ep_trans_complet+0x29c>
    23b6:	d8 01       	movw	r26, r16
    23b8:	8c 91       	ld	r24, X
    23ba:	80 ff       	sbrs	r24, 0
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <udd_ep_trans_complet+0x29c>
    23be:	8e 7f       	andi	r24, 0xFE	; 254
    23c0:	8c 93       	st	X, r24
    23c2:	17 96       	adiw	r26, 0x07	; 7
    23c4:	ed 91       	ld	r30, X+
    23c6:	fc 91       	ld	r31, X
    23c8:	18 97       	sbiw	r26, 0x08	; 8
    23ca:	30 97       	sbiw	r30, 0x00	; 0
    23cc:	39 f0       	breq	.+14     	; 0x23dc <udd_ep_trans_complet+0x29c>
    23ce:	15 96       	adiw	r26, 0x05	; 5
    23d0:	6d 91       	ld	r22, X+
    23d2:	7c 91       	ld	r23, X
    23d4:	16 97       	sbiw	r26, 0x06	; 6
    23d6:	4d 2d       	mov	r20, r13
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	09 95       	icall
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	df 90       	pop	r13
    23ea:	bf 90       	pop	r11
    23ec:	af 90       	pop	r10
    23ee:	9f 90       	pop	r9
    23f0:	8f 90       	pop	r8
    23f2:	08 95       	ret

000023f4 <udd_attach>:
    23f4:	cf 93       	push	r28
    23f6:	cf b7       	in	r28, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	11 dd       	rcall	.-1502   	; 0x1e20 <udd_sleep_mode>
    23fe:	ea ec       	ldi	r30, 0xCA	; 202
    2400:	f4 e0       	ldi	r31, 0x04	; 4
    2402:	80 e4       	ldi	r24, 0x40	; 64
    2404:	80 83       	st	Z, r24
    2406:	80 e2       	ldi	r24, 0x20	; 32
    2408:	80 83       	st	Z, r24
    240a:	e1 ec       	ldi	r30, 0xC1	; 193
    240c:	f4 e0       	ldi	r31, 0x04	; 4
    240e:	80 81       	ld	r24, Z
    2410:	81 60       	ori	r24, 0x01	; 1
    2412:	80 83       	st	Z, r24
    2414:	a9 ec       	ldi	r26, 0xC9	; 201
    2416:	b4 e0       	ldi	r27, 0x04	; 4
    2418:	8c 91       	ld	r24, X
    241a:	82 60       	ori	r24, 0x02	; 2
    241c:	8c 93       	st	X, r24
    241e:	e8 ec       	ldi	r30, 0xC8	; 200
    2420:	f4 e0       	ldi	r31, 0x04	; 4
    2422:	80 81       	ld	r24, Z
    2424:	80 64       	ori	r24, 0x40	; 64
    2426:	80 83       	st	Z, r24
    2428:	8c 91       	ld	r24, X
    242a:	81 60       	ori	r24, 0x01	; 1
    242c:	8c 93       	st	X, r24
    242e:	80 81       	ld	r24, Z
    2430:	80 68       	ori	r24, 0x80	; 128
    2432:	80 83       	st	Z, r24
    2434:	cf bf       	out	0x3f, r28	; 63
    2436:	cf 91       	pop	r28
    2438:	08 95       	ret

0000243a <udd_enable>:
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
    243e:	c0 e6       	ldi	r28, 0x60	; 96
    2440:	d0 e0       	ldi	r29, 0x00	; 0
    2442:	18 82       	st	Y, r1
    2444:	80 e3       	ldi	r24, 0x30	; 48
    2446:	0e 94 b3 09 	call	0x1366	; 0x1366 <sysclk_enable_usb>
    244a:	e0 ec       	ldi	r30, 0xC0	; 192
    244c:	f4 e0       	ldi	r31, 0x04	; 4
    244e:	80 81       	ld	r24, Z
    2450:	80 64       	ori	r24, 0x40	; 64
    2452:	80 83       	st	Z, r24
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	88 83       	st	Y, r24
    2458:	cf b7       	in	r28, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	fc 01       	movw	r30, r24
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	ee 0f       	add	r30, r30
    2468:	ff 1f       	adc	r31, r31
    246a:	ee 0f       	add	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	e8 5e       	subi	r30, 0xE8	; 232
    2470:	fd 4d       	sbci	r31, 0xDD	; 221
    2472:	11 8a       	std	Z+17, r1	; 0x11
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	88 30       	cpi	r24, 0x08	; 8
    2478:	91 05       	cpc	r25, r1
    247a:	91 f7       	brne	.-28     	; 0x2460 <udd_enable+0x26>
    247c:	ed e9       	ldi	r30, 0x9D	; 157
    247e:	f1 e2       	ldi	r31, 0x21	; 33
    2480:	80 81       	ld	r24, Z
    2482:	8e 7f       	andi	r24, 0xFE	; 254
    2484:	80 83       	st	Z, r24
    2486:	e6 ea       	ldi	r30, 0xA6	; 166
    2488:	f1 e2       	ldi	r31, 0x21	; 33
    248a:	80 81       	ld	r24, Z
    248c:	8e 7f       	andi	r24, 0xFE	; 254
    248e:	80 83       	st	Z, r24
    2490:	ef ea       	ldi	r30, 0xAF	; 175
    2492:	f1 e2       	ldi	r31, 0x21	; 33
    2494:	80 81       	ld	r24, Z
    2496:	8e 7f       	andi	r24, 0xFE	; 254
    2498:	80 83       	st	Z, r24
    249a:	e8 eb       	ldi	r30, 0xB8	; 184
    249c:	f1 e2       	ldi	r31, 0x21	; 33
    249e:	80 81       	ld	r24, Z
    24a0:	8e 7f       	andi	r24, 0xFE	; 254
    24a2:	80 83       	st	Z, r24
    24a4:	e1 ec       	ldi	r30, 0xC1	; 193
    24a6:	f1 e2       	ldi	r31, 0x21	; 33
    24a8:	80 81       	ld	r24, Z
    24aa:	8e 7f       	andi	r24, 0xFE	; 254
    24ac:	80 83       	st	Z, r24
    24ae:	ea ec       	ldi	r30, 0xCA	; 202
    24b0:	f1 e2       	ldi	r31, 0x21	; 33
    24b2:	80 81       	ld	r24, Z
    24b4:	8e 7f       	andi	r24, 0xFE	; 254
    24b6:	80 83       	st	Z, r24
    24b8:	6a e1       	ldi	r22, 0x1A	; 26
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	a6 dc       	rcall	.-1716   	; 0x1e0c <nvm_read_byte>
    24c0:	8f 3f       	cpi	r24, 0xFF	; 255
    24c2:	19 f0       	breq	.+6      	; 0x24ca <udd_enable+0x90>
    24c4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <udd_enable+0x96>
    24ca:	8f e1       	ldi	r24, 0x1F	; 31
    24cc:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    24d0:	6b e1       	ldi	r22, 0x1B	; 27
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	82 e0       	ldi	r24, 0x02	; 2
    24d6:	9a dc       	rcall	.-1740   	; 0x1e0c <nvm_read_byte>
    24d8:	8f 3f       	cpi	r24, 0xFF	; 255
    24da:	19 f0       	breq	.+6      	; 0x24e2 <udd_enable+0xa8>
    24dc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    24e0:	03 c0       	rjmp	.+6      	; 0x24e8 <udd_enable+0xae>
    24e2:	8f e1       	ldi	r24, 0x1F	; 31
    24e4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    24e8:	e0 ec       	ldi	r30, 0xC0	; 192
    24ea:	f4 e0       	ldi	r31, 0x04	; 4
    24ec:	80 81       	ld	r24, Z
    24ee:	83 60       	ori	r24, 0x03	; 3
    24f0:	80 83       	st	Z, r24
    24f2:	80 81       	ld	r24, Z
    24f4:	80 68       	ori	r24, 0x80	; 128
    24f6:	80 83       	st	Z, r24
    24f8:	80 81       	ld	r24, Z
    24fa:	80 61       	ori	r24, 0x10	; 16
    24fc:	80 83       	st	Z, r24
    24fe:	88 e2       	ldi	r24, 0x28	; 40
    2500:	92 e2       	ldi	r25, 0x22	; 34
    2502:	86 83       	std	Z+6, r24	; 0x06
    2504:	97 83       	std	Z+7, r25	; 0x07
    2506:	80 81       	ld	r24, Z
    2508:	80 62       	ori	r24, 0x20	; 32
    250a:	80 83       	st	Z, r24
    250c:	8f ef       	ldi	r24, 0xFF	; 255
    250e:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2512:	e8 ec       	ldi	r30, 0xC8	; 200
    2514:	f4 e0       	ldi	r31, 0x04	; 4
    2516:	80 81       	ld	r24, Z
    2518:	82 60       	ori	r24, 0x02	; 2
    251a:	80 83       	st	Z, r24
    251c:	10 92 6c 22 	sts	0x226C, r1	; 0x80226c <udd_b_idle>
    2520:	80 91 6d 2e 	lds	r24, 0x2E6D	; 0x802e6d <sleepmgr_locks+0x5>
    2524:	8f 3f       	cpi	r24, 0xFF	; 255
    2526:	09 f4       	brne	.+2      	; 0x252a <udd_enable+0xf0>
    2528:	ff cf       	rjmp	.-2      	; 0x2528 <udd_enable+0xee>
    252a:	9f b7       	in	r25, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	e8 e6       	ldi	r30, 0x68	; 104
    2530:	fe e2       	ldi	r31, 0x2E	; 46
    2532:	85 81       	ldd	r24, Z+5	; 0x05
    2534:	8f 5f       	subi	r24, 0xFF	; 255
    2536:	85 83       	std	Z+5, r24	; 0x05
    2538:	9f bf       	out	0x3f, r25	; 63
    253a:	5c df       	rcall	.-328    	; 0x23f4 <udd_attach>
    253c:	cf bf       	out	0x3f, r28	; 63
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	08 95       	ret

00002544 <udd_set_address>:
    2544:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2548:	08 95       	ret

0000254a <udd_getaddress>:
    254a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    254e:	08 95       	ret

00002550 <udd_set_setup_payload>:
    2550:	ea e7       	ldi	r30, 0x7A	; 122
    2552:	f4 e2       	ldi	r31, 0x24	; 36
    2554:	80 87       	std	Z+8, r24	; 0x08
    2556:	91 87       	std	Z+9, r25	; 0x09
    2558:	62 87       	std	Z+10, r22	; 0x0a
    255a:	73 87       	std	Z+11, r23	; 0x0b
    255c:	08 95       	ret

0000255e <udd_ep_alloc>:
    255e:	28 2f       	mov	r18, r24
    2560:	2f 70       	andi	r18, 0x0F	; 15
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	22 0f       	add	r18, r18
    2566:	33 1f       	adc	r19, r19
    2568:	08 2e       	mov	r0, r24
    256a:	00 0c       	add	r0, r0
    256c:	99 0b       	sbc	r25, r25
    256e:	88 27       	eor	r24, r24
    2570:	99 0f       	add	r25, r25
    2572:	88 1f       	adc	r24, r24
    2574:	99 27       	eor	r25, r25
    2576:	82 0f       	add	r24, r18
    2578:	93 1f       	adc	r25, r19
    257a:	fc 01       	movw	r30, r24
    257c:	ee 0f       	add	r30, r30
    257e:	ff 1f       	adc	r31, r31
    2580:	ee 0f       	add	r30, r30
    2582:	ff 1f       	adc	r31, r31
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	e8 5e       	subi	r30, 0xE8	; 232
    258a:	fd 4d       	sbci	r31, 0xDD	; 221
    258c:	21 89       	ldd	r18, Z+17	; 0x11
    258e:	20 7c       	andi	r18, 0xC0	; 192
    2590:	09 f0       	breq	.+2      	; 0x2594 <udd_ep_alloc+0x36>
    2592:	58 c0       	rjmp	.+176    	; 0x2644 <udd_ep_alloc+0xe6>
    2594:	63 70       	andi	r22, 0x03	; 3
    2596:	61 30       	cpi	r22, 0x01	; 1
    2598:	11 f0       	breq	.+4      	; 0x259e <udd_ep_alloc+0x40>
    259a:	18 f4       	brcc	.+6      	; 0x25a2 <udd_ep_alloc+0x44>
    259c:	04 c0       	rjmp	.+8      	; 0x25a6 <udd_ep_alloc+0x48>
    259e:	20 ec       	ldi	r18, 0xC0	; 192
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <udd_ep_alloc+0x4a>
    25a2:	20 e8       	ldi	r18, 0x80	; 128
    25a4:	01 c0       	rjmp	.+2      	; 0x25a8 <udd_ep_alloc+0x4a>
    25a6:	20 e4       	ldi	r18, 0x40	; 64
    25a8:	40 38       	cpi	r20, 0x80	; 128
    25aa:	51 05       	cpc	r21, r1
    25ac:	e9 f0       	breq	.+58     	; 0x25e8 <udd_ep_alloc+0x8a>
    25ae:	50 f4       	brcc	.+20     	; 0x25c4 <udd_ep_alloc+0x66>
    25b0:	40 32       	cpi	r20, 0x20	; 32
    25b2:	51 05       	cpc	r21, r1
    25b4:	a9 f0       	breq	.+42     	; 0x25e0 <udd_ep_alloc+0x82>
    25b6:	40 34       	cpi	r20, 0x40	; 64
    25b8:	51 05       	cpc	r21, r1
    25ba:	a1 f0       	breq	.+40     	; 0x25e4 <udd_ep_alloc+0x86>
    25bc:	40 31       	cpi	r20, 0x10	; 16
    25be:	51 05       	cpc	r21, r1
    25c0:	d9 f4       	brne	.+54     	; 0x25f8 <udd_ep_alloc+0x9a>
    25c2:	0c c0       	rjmp	.+24     	; 0x25dc <udd_ep_alloc+0x7e>
    25c4:	41 15       	cp	r20, r1
    25c6:	32 e0       	ldi	r19, 0x02	; 2
    25c8:	53 07       	cpc	r21, r19
    25ca:	91 f0       	breq	.+36     	; 0x25f0 <udd_ep_alloc+0x92>
    25cc:	4f 3f       	cpi	r20, 0xFF	; 255
    25ce:	33 e0       	ldi	r19, 0x03	; 3
    25d0:	53 07       	cpc	r21, r19
    25d2:	81 f0       	breq	.+32     	; 0x25f4 <udd_ep_alloc+0x96>
    25d4:	41 15       	cp	r20, r1
    25d6:	51 40       	sbci	r21, 0x01	; 1
    25d8:	79 f4       	brne	.+30     	; 0x25f8 <udd_ep_alloc+0x9a>
    25da:	08 c0       	rjmp	.+16     	; 0x25ec <udd_ep_alloc+0x8e>
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0d c0       	rjmp	.+26     	; 0x25fa <udd_ep_alloc+0x9c>
    25e0:	42 e0       	ldi	r20, 0x02	; 2
    25e2:	0b c0       	rjmp	.+22     	; 0x25fa <udd_ep_alloc+0x9c>
    25e4:	43 e0       	ldi	r20, 0x03	; 3
    25e6:	09 c0       	rjmp	.+18     	; 0x25fa <udd_ep_alloc+0x9c>
    25e8:	44 e0       	ldi	r20, 0x04	; 4
    25ea:	07 c0       	rjmp	.+14     	; 0x25fa <udd_ep_alloc+0x9c>
    25ec:	45 e0       	ldi	r20, 0x05	; 5
    25ee:	05 c0       	rjmp	.+10     	; 0x25fa <udd_ep_alloc+0x9c>
    25f0:	46 e0       	ldi	r20, 0x06	; 6
    25f2:	03 c0       	rjmp	.+6      	; 0x25fa <udd_ep_alloc+0x9c>
    25f4:	47 e0       	ldi	r20, 0x07	; 7
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <udd_ep_alloc+0x9c>
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	fc 01       	movw	r30, r24
    25fc:	ee 0f       	add	r30, r30
    25fe:	ff 1f       	adc	r31, r31
    2600:	ee 0f       	add	r30, r30
    2602:	ff 1f       	adc	r31, r31
    2604:	ee 0f       	add	r30, r30
    2606:	ff 1f       	adc	r31, r31
    2608:	e8 5e       	subi	r30, 0xE8	; 232
    260a:	fd 4d       	sbci	r31, 0xDD	; 221
    260c:	11 8a       	std	Z+17, r1	; 0x11
    260e:	dc 01       	movw	r26, r24
    2610:	aa 0f       	add	r26, r26
    2612:	bb 1f       	adc	r27, r27
    2614:	aa 0f       	add	r26, r26
    2616:	bb 1f       	adc	r27, r27
    2618:	aa 0f       	add	r26, r26
    261a:	bb 1f       	adc	r27, r27
    261c:	a8 5d       	subi	r26, 0xD8	; 216
    261e:	bd 4d       	sbci	r27, 0xDD	; 221
    2620:	36 e0       	ldi	r19, 0x06	; 6
    2622:	3c 93       	st	X, r19
    2624:	24 2b       	or	r18, r20
    2626:	21 8b       	std	Z+17, r18	; 0x11
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	fc 01       	movw	r30, r24
    2636:	e8 5e       	subi	r30, 0xE8	; 232
    2638:	fd 4d       	sbci	r31, 0xDD	; 221
    263a:	81 89       	ldd	r24, Z+17	; 0x11
    263c:	80 62       	ori	r24, 0x20	; 32
    263e:	81 8b       	std	Z+17, r24	; 0x11
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	08 95       	ret
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	08 95       	ret

00002648 <udd_ep_is_halted>:
    2648:	e8 2f       	mov	r30, r24
    264a:	ef 70       	andi	r30, 0x0F	; 15
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	08 2e       	mov	r0, r24
    2654:	00 0c       	add	r0, r0
    2656:	99 0b       	sbc	r25, r25
    2658:	88 27       	eor	r24, r24
    265a:	99 0f       	add	r25, r25
    265c:	88 1f       	adc	r24, r24
    265e:	99 27       	eor	r25, r25
    2660:	e8 0f       	add	r30, r24
    2662:	f9 1f       	adc	r31, r25
    2664:	ee 0f       	add	r30, r30
    2666:	ff 1f       	adc	r31, r31
    2668:	ee 0f       	add	r30, r30
    266a:	ff 1f       	adc	r31, r31
    266c:	ee 0f       	add	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	e8 5e       	subi	r30, 0xE8	; 232
    2672:	fd 4d       	sbci	r31, 0xDD	; 221
    2674:	81 89       	ldd	r24, Z+17	; 0x11
    2676:	82 fb       	bst	r24, 2
    2678:	88 27       	eor	r24, r24
    267a:	80 f9       	bld	r24, 0
    267c:	08 95       	ret

0000267e <udd_ep_clear_halt>:
    267e:	28 2f       	mov	r18, r24
    2680:	2f 70       	andi	r18, 0x0F	; 15
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	a9 01       	movw	r20, r18
    2686:	44 0f       	add	r20, r20
    2688:	55 1f       	adc	r21, r21
    268a:	28 2f       	mov	r18, r24
    268c:	08 2e       	mov	r0, r24
    268e:	00 0c       	add	r0, r0
    2690:	33 0b       	sbc	r19, r19
    2692:	22 27       	eor	r18, r18
    2694:	33 0f       	add	r19, r19
    2696:	22 1f       	adc	r18, r18
    2698:	33 27       	eor	r19, r19
    269a:	24 0f       	add	r18, r20
    269c:	35 1f       	adc	r19, r21
    269e:	f9 01       	movw	r30, r18
    26a0:	ee 0f       	add	r30, r30
    26a2:	ff 1f       	adc	r31, r31
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	e8 5e       	subi	r30, 0xE8	; 232
    26ae:	fd 4d       	sbci	r31, 0xDD	; 221
    26b0:	91 89       	ldd	r25, Z+17	; 0x11
    26b2:	92 ff       	sbrs	r25, 2
    26b4:	17 c0       	rjmp	.+46     	; 0x26e4 <udd_ep_clear_halt+0x66>
    26b6:	22 0f       	add	r18, r18
    26b8:	33 1f       	adc	r19, r19
    26ba:	22 0f       	add	r18, r18
    26bc:	33 1f       	adc	r19, r19
    26be:	22 0f       	add	r18, r18
    26c0:	33 1f       	adc	r19, r19
    26c2:	f9 01       	movw	r30, r18
    26c4:	e8 5e       	subi	r30, 0xE8	; 232
    26c6:	fd 4d       	sbci	r31, 0xDD	; 221
    26c8:	91 89       	ldd	r25, Z+17	; 0x11
    26ca:	9b 7f       	andi	r25, 0xFB	; 251
    26cc:	91 8b       	std	Z+17, r25	; 0x11
    26ce:	ae dc       	rcall	.-1700   	; 0x202c <udd_ep_get_job>
    26d0:	fc 01       	movw	r30, r24
    26d2:	80 81       	ld	r24, Z
    26d4:	80 ff       	sbrs	r24, 0
    26d6:	06 c0       	rjmp	.+12     	; 0x26e4 <udd_ep_clear_halt+0x66>
    26d8:	8e 7f       	andi	r24, 0xFE	; 254
    26da:	80 83       	st	Z, r24
    26dc:	07 80       	ldd	r0, Z+7	; 0x07
    26de:	f0 85       	ldd	r31, Z+8	; 0x08
    26e0:	e0 2d       	mov	r30, r0
    26e2:	09 95       	icall
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	08 95       	ret

000026e8 <udd_ep_run>:
    26e8:	7f 92       	push	r7
    26ea:	8f 92       	push	r8
    26ec:	9f 92       	push	r9
    26ee:	af 92       	push	r10
    26f0:	bf 92       	push	r11
    26f2:	cf 92       	push	r12
    26f4:	df 92       	push	r13
    26f6:	ef 92       	push	r14
    26f8:	ff 92       	push	r15
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	98 2e       	mov	r9, r24
    2704:	86 2e       	mov	r8, r22
    2706:	6a 01       	movw	r12, r20
    2708:	79 01       	movw	r14, r18
    270a:	90 dc       	rcall	.-1760   	; 0x202c <udd_ep_get_job>
    270c:	5c 01       	movw	r10, r24
    270e:	79 2c       	mov	r7, r9
    2710:	77 1c       	adc	r7, r7
    2712:	77 24       	eor	r7, r7
    2714:	77 1c       	adc	r7, r7
    2716:	c9 2d       	mov	r28, r9
    2718:	cf 70       	andi	r28, 0x0F	; 15
    271a:	d0 e0       	ldi	r29, 0x00	; 0
    271c:	cc 0f       	add	r28, r28
    271e:	dd 1f       	adc	r29, r29
    2720:	c7 0d       	add	r28, r7
    2722:	d1 1d       	adc	r29, r1
    2724:	fe 01       	movw	r30, r28
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	e8 5e       	subi	r30, 0xE8	; 232
    2734:	fd 4d       	sbci	r31, 0xDD	; 221
    2736:	81 89       	ldd	r24, Z+17	; 0x11
    2738:	80 7c       	andi	r24, 0xC0	; 192
    273a:	09 f4       	brne	.+2      	; 0x273e <udd_ep_run+0x56>
    273c:	7d c0       	rjmp	.+250    	; 0x2838 <udd_ep_run+0x150>
    273e:	fe 01       	movw	r30, r28
    2740:	ee 0f       	add	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	ee 0f       	add	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	ee 0f       	add	r30, r30
    274a:	ff 1f       	adc	r31, r31
    274c:	e8 5e       	subi	r30, 0xE8	; 232
    274e:	fd 4d       	sbci	r31, 0xDD	; 221
    2750:	81 89       	ldd	r24, Z+17	; 0x11
    2752:	80 7c       	andi	r24, 0xC0	; 192
    2754:	80 3c       	cpi	r24, 0xC0	; 192
    2756:	61 f0       	breq	.+24     	; 0x2770 <udd_ep_run+0x88>
    2758:	fe 01       	movw	r30, r28
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	ee 0f       	add	r30, r30
    2760:	ff 1f       	adc	r31, r31
    2762:	ee 0f       	add	r30, r30
    2764:	ff 1f       	adc	r31, r31
    2766:	e8 5e       	subi	r30, 0xE8	; 232
    2768:	fd 4d       	sbci	r31, 0xDD	; 221
    276a:	81 89       	ldd	r24, Z+17	; 0x11
    276c:	82 fd       	sbrc	r24, 2
    276e:	66 c0       	rjmp	.+204    	; 0x283c <udd_ep_run+0x154>
    2770:	8f b7       	in	r24, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	f5 01       	movw	r30, r10
    2776:	90 81       	ld	r25, Z
    2778:	90 ff       	sbrs	r25, 0
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <udd_ep_run+0x9a>
    277c:	8f bf       	out	0x3f, r24	; 63
    277e:	71 2c       	mov	r7, r1
    2780:	5e c0       	rjmp	.+188    	; 0x283e <udd_ep_run+0x156>
    2782:	f5 01       	movw	r30, r10
    2784:	90 81       	ld	r25, Z
    2786:	91 60       	ori	r25, 0x01	; 1
    2788:	90 83       	st	Z, r25
    278a:	8f bf       	out	0x3f, r24	; 63
    278c:	c1 82       	std	Z+1, r12	; 0x01
    278e:	d2 82       	std	Z+2, r13	; 0x02
    2790:	e3 82       	std	Z+3, r14	; 0x03
    2792:	f4 82       	std	Z+4, r15	; 0x04
    2794:	15 82       	std	Z+5, r1	; 0x05
    2796:	16 82       	std	Z+6, r1	; 0x06
    2798:	07 83       	std	Z+7, r16	; 0x07
    279a:	10 87       	std	Z+8, r17	; 0x08
    279c:	81 10       	cpse	r8, r1
    279e:	06 c0       	rjmp	.+12     	; 0x27ac <udd_ep_run+0xc4>
    27a0:	91 e0       	ldi	r25, 0x01	; 1
    27a2:	e1 14       	cp	r14, r1
    27a4:	f1 04       	cpc	r15, r1
    27a6:	19 f0       	breq	.+6      	; 0x27ae <udd_ep_run+0xc6>
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <udd_ep_run+0xc6>
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	f5 01       	movw	r30, r10
    27b0:	80 81       	ld	r24, Z
    27b2:	90 fb       	bst	r25, 0
    27b4:	81 f9       	bld	r24, 1
    27b6:	8b 7f       	andi	r24, 0xFB	; 251
    27b8:	80 83       	st	Z, r24
    27ba:	77 20       	and	r7, r7
    27bc:	59 f0       	breq	.+22     	; 0x27d4 <udd_ep_run+0xec>
    27be:	cc 0f       	add	r28, r28
    27c0:	dd 1f       	adc	r29, r29
    27c2:	cc 0f       	add	r28, r28
    27c4:	dd 1f       	adc	r29, r29
    27c6:	cc 0f       	add	r28, r28
    27c8:	dd 1f       	adc	r29, r29
    27ca:	c8 5e       	subi	r28, 0xE8	; 232
    27cc:	dd 4d       	sbci	r29, 0xDD	; 221
    27ce:	1e 8a       	std	Y+22, r1	; 0x16
    27d0:	1f 8a       	std	Y+23, r1	; 0x17
    27d2:	2d c0       	rjmp	.+90     	; 0x282e <udd_ep_run+0x146>
    27d4:	fe 01       	movw	r30, r28
    27d6:	ee 0f       	add	r30, r30
    27d8:	ff 1f       	adc	r31, r31
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	ee 0f       	add	r30, r30
    27e0:	ff 1f       	adc	r31, r31
    27e2:	e8 5e       	subi	r30, 0xE8	; 232
    27e4:	fd 4d       	sbci	r31, 0xDD	; 221
    27e6:	81 89       	ldd	r24, Z+17	; 0x11
    27e8:	80 7c       	andi	r24, 0xC0	; 192
    27ea:	80 3c       	cpi	r24, 0xC0	; 192
    27ec:	a1 f4       	brne	.+40     	; 0x2816 <udd_ep_run+0x12e>
    27ee:	ce 01       	movw	r24, r28
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	88 5d       	subi	r24, 0xD8	; 216
    27fe:	9d 4d       	sbci	r25, 0xDD	; 221
    2800:	ef db       	rcall	.-2082   	; 0x1fe0 <udd_ep_get_size>
    2802:	bc 01       	movw	r22, r24
    2804:	c7 01       	movw	r24, r14
    2806:	60 d2       	rcall	.+1216   	; 0x2cc8 <__udivmodhi4>
    2808:	89 2b       	or	r24, r25
    280a:	29 f0       	breq	.+10     	; 0x2816 <udd_ep_run+0x12e>
    280c:	f5 01       	movw	r30, r10
    280e:	80 81       	ld	r24, Z
    2810:	8e 7f       	andi	r24, 0xFE	; 254
    2812:	80 83       	st	Z, r24
    2814:	14 c0       	rjmp	.+40     	; 0x283e <udd_ep_run+0x156>
    2816:	cc 0f       	add	r28, r28
    2818:	dd 1f       	adc	r29, r29
    281a:	cc 0f       	add	r28, r28
    281c:	dd 1f       	adc	r29, r29
    281e:	cc 0f       	add	r28, r28
    2820:	dd 1f       	adc	r29, r29
    2822:	c8 5e       	subi	r28, 0xE8	; 232
    2824:	dd 4d       	sbci	r29, 0xDD	; 221
    2826:	1a 8a       	std	Y+18, r1	; 0x12
    2828:	1b 8a       	std	Y+19, r1	; 0x13
    282a:	1e 8a       	std	Y+22, r1	; 0x16
    282c:	1f 8a       	std	Y+23, r1	; 0x17
    282e:	89 2d       	mov	r24, r9
    2830:	87 dc       	rcall	.-1778   	; 0x2140 <udd_ep_trans_complet>
    2832:	77 24       	eor	r7, r7
    2834:	73 94       	inc	r7
    2836:	03 c0       	rjmp	.+6      	; 0x283e <udd_ep_run+0x156>
    2838:	71 2c       	mov	r7, r1
    283a:	01 c0       	rjmp	.+2      	; 0x283e <udd_ep_run+0x156>
    283c:	71 2c       	mov	r7, r1
    283e:	87 2d       	mov	r24, r7
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	df 90       	pop	r13
    284e:	cf 90       	pop	r12
    2850:	bf 90       	pop	r11
    2852:	af 90       	pop	r10
    2854:	9f 90       	pop	r9
    2856:	8f 90       	pop	r8
    2858:	7f 90       	pop	r7
    285a:	08 95       	ret

0000285c <udd_ep_abort>:
    285c:	ff 92       	push	r15
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	18 2f       	mov	r17, r24
    2868:	f8 2e       	mov	r15, r24
    286a:	ff 1c       	adc	r15, r15
    286c:	ff 24       	eor	r15, r15
    286e:	ff 1c       	adc	r15, r15
    2870:	c8 2f       	mov	r28, r24
    2872:	cf 70       	andi	r28, 0x0F	; 15
    2874:	d0 e0       	ldi	r29, 0x00	; 0
    2876:	cc 0f       	add	r28, r28
    2878:	dd 1f       	adc	r29, r29
    287a:	cf 0d       	add	r28, r15
    287c:	d1 1d       	adc	r29, r1
    287e:	d6 db       	rcall	.-2132   	; 0x202c <udd_ep_get_job>
    2880:	dc 01       	movw	r26, r24
    2882:	fe 01       	movw	r30, r28
    2884:	ee 0f       	add	r30, r30
    2886:	ff 1f       	adc	r31, r31
    2888:	ee 0f       	add	r30, r30
    288a:	ff 1f       	adc	r31, r31
    288c:	ee 0f       	add	r30, r30
    288e:	ff 1f       	adc	r31, r31
    2890:	e8 5d       	subi	r30, 0xD8	; 216
    2892:	fd 4d       	sbci	r31, 0xDD	; 221
    2894:	02 e0       	ldi	r16, 0x02	; 2
    2896:	05 93       	las	Z, r16
    2898:	8c 91       	ld	r24, X
    289a:	80 ff       	sbrs	r24, 0
    289c:	22 c0       	rjmp	.+68     	; 0x28e2 <udd_ep_abort+0x86>
    289e:	8e 7f       	andi	r24, 0xFE	; 254
    28a0:	8c 93       	st	X, r24
    28a2:	17 96       	adiw	r26, 0x07	; 7
    28a4:	ed 91       	ld	r30, X+
    28a6:	fc 91       	ld	r31, X
    28a8:	18 97       	sbiw	r26, 0x08	; 8
    28aa:	30 97       	sbiw	r30, 0x00	; 0
    28ac:	d1 f0       	breq	.+52     	; 0x28e2 <udd_ep_abort+0x86>
    28ae:	ff 20       	and	r15, r15
    28b0:	59 f0       	breq	.+22     	; 0x28c8 <udd_ep_abort+0x6c>
    28b2:	cc 0f       	add	r28, r28
    28b4:	dd 1f       	adc	r29, r29
    28b6:	cc 0f       	add	r28, r28
    28b8:	dd 1f       	adc	r29, r29
    28ba:	cc 0f       	add	r28, r28
    28bc:	dd 1f       	adc	r29, r29
    28be:	c8 5e       	subi	r28, 0xE8	; 232
    28c0:	dd 4d       	sbci	r29, 0xDD	; 221
    28c2:	6e 89       	ldd	r22, Y+22	; 0x16
    28c4:	7f 89       	ldd	r23, Y+23	; 0x17
    28c6:	0a c0       	rjmp	.+20     	; 0x28dc <udd_ep_abort+0x80>
    28c8:	cc 0f       	add	r28, r28
    28ca:	dd 1f       	adc	r29, r29
    28cc:	cc 0f       	add	r28, r28
    28ce:	dd 1f       	adc	r29, r29
    28d0:	cc 0f       	add	r28, r28
    28d2:	dd 1f       	adc	r29, r29
    28d4:	c8 5e       	subi	r28, 0xE8	; 232
    28d6:	dd 4d       	sbci	r29, 0xDD	; 221
    28d8:	6a 89       	ldd	r22, Y+18	; 0x12
    28da:	7b 89       	ldd	r23, Y+19	; 0x13
    28dc:	41 2f       	mov	r20, r17
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	09 95       	icall
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	08 95       	ret

000028ee <udd_ep_free>:
    28ee:	cf 93       	push	r28
    28f0:	c8 2f       	mov	r28, r24
    28f2:	b4 df       	rcall	.-152    	; 0x285c <udd_ep_abort>
    28f4:	ec 2f       	mov	r30, r28
    28f6:	ef 70       	andi	r30, 0x0F	; 15
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	8c 2f       	mov	r24, r28
    2900:	cc 0f       	add	r28, r28
    2902:	99 0b       	sbc	r25, r25
    2904:	88 27       	eor	r24, r24
    2906:	99 0f       	add	r25, r25
    2908:	88 1f       	adc	r24, r24
    290a:	99 27       	eor	r25, r25
    290c:	e8 0f       	add	r30, r24
    290e:	f9 1f       	adc	r31, r25
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	ee 0f       	add	r30, r30
    291a:	ff 1f       	adc	r31, r31
    291c:	e8 5e       	subi	r30, 0xE8	; 232
    291e:	fd 4d       	sbci	r31, 0xDD	; 221
    2920:	11 8a       	std	Z+17, r1	; 0x11
    2922:	cf 91       	pop	r28
    2924:	08 95       	ret

00002926 <udd_ep_set_halt>:
    2926:	0f 93       	push	r16
    2928:	e8 2f       	mov	r30, r24
    292a:	ef 70       	andi	r30, 0x0F	; 15
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	ee 0f       	add	r30, r30
    2930:	ff 1f       	adc	r31, r31
    2932:	28 2f       	mov	r18, r24
    2934:	08 2e       	mov	r0, r24
    2936:	00 0c       	add	r0, r0
    2938:	33 0b       	sbc	r19, r19
    293a:	22 27       	eor	r18, r18
    293c:	33 0f       	add	r19, r19
    293e:	22 1f       	adc	r18, r18
    2940:	33 27       	eor	r19, r19
    2942:	e2 0f       	add	r30, r18
    2944:	f3 1f       	adc	r31, r19
    2946:	df 01       	movw	r26, r30
    2948:	aa 0f       	add	r26, r26
    294a:	bb 1f       	adc	r27, r27
    294c:	aa 0f       	add	r26, r26
    294e:	bb 1f       	adc	r27, r27
    2950:	aa 0f       	add	r26, r26
    2952:	bb 1f       	adc	r27, r27
    2954:	a8 5e       	subi	r26, 0xE8	; 232
    2956:	bd 4d       	sbci	r27, 0xDD	; 221
    2958:	51 96       	adiw	r26, 0x11	; 17
    295a:	9c 91       	ld	r25, X
    295c:	51 97       	sbiw	r26, 0x11	; 17
    295e:	94 60       	ori	r25, 0x04	; 4
    2960:	51 96       	adiw	r26, 0x11	; 17
    2962:	9c 93       	st	X, r25
    2964:	ee 0f       	add	r30, r30
    2966:	ff 1f       	adc	r31, r31
    2968:	ee 0f       	add	r30, r30
    296a:	ff 1f       	adc	r31, r31
    296c:	ee 0f       	add	r30, r30
    296e:	ff 1f       	adc	r31, r31
    2970:	e8 5d       	subi	r30, 0xD8	; 216
    2972:	fd 4d       	sbci	r31, 0xDD	; 221
    2974:	01 e0       	ldi	r16, 0x01	; 1
    2976:	06 93       	lac	Z, r16
    2978:	71 df       	rcall	.-286    	; 0x285c <udd_ep_abort>
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	0f 91       	pop	r16
    297e:	08 95       	ret

00002980 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2980:	1f 92       	push	r1
    2982:	0f 92       	push	r0
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	0f 92       	push	r0
    2988:	11 24       	eor	r1, r1
    298a:	0f 93       	push	r16
    298c:	2f 93       	push	r18
    298e:	3f 93       	push	r19
    2990:	4f 93       	push	r20
    2992:	5f 93       	push	r21
    2994:	6f 93       	push	r22
    2996:	7f 93       	push	r23
    2998:	8f 93       	push	r24
    299a:	9f 93       	push	r25
    299c:	af 93       	push	r26
    299e:	bf 93       	push	r27
    29a0:	ef 93       	push	r30
    29a2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    29a4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29a8:	88 23       	and	r24, r24
    29aa:	44 f4       	brge	.+16     	; 0x29bc <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    29ac:	80 e8       	ldi	r24, 0x80	; 128
    29ae:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    29b2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    29b6:	0e 94 c5 03 	call	0x78a	; 0x78a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    29ba:	8a c0       	rjmp	.+276    	; 0x2ad0 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    29bc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29c0:	82 ff       	sbrs	r24, 2
    29c2:	20 c0       	rjmp	.+64     	; 0x2a04 <__vector_125+0x84>
		udd_ack_underflow_event();
    29c4:	84 e0       	ldi	r24, 0x04	; 4
    29c6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    29ca:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <udd_sram+0x18>
    29ce:	86 ff       	sbrs	r24, 6
    29d0:	7f c0       	rjmp	.+254    	; 0x2ad0 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    29d2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    29d6:	81 fd       	sbrc	r24, 1
    29d8:	7b c0       	rjmp	.+246    	; 0x2ad0 <__vector_125+0x150>
    29da:	43 db       	rcall	.-2426   	; 0x2062 <udd_ctrl_interrupt_tc_setup>
    29dc:	81 11       	cpse	r24, r1
    29de:	78 c0       	rjmp	.+240    	; 0x2ad0 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    29e0:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <udd_ep_control_state>
    29e4:	81 30       	cpi	r24, 0x01	; 1
    29e6:	11 f4       	brne	.+4      	; 0x29ec <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    29e8:	79 da       	rcall	.-2830   	; 0x1edc <udd_ctrl_send_zlp_in>
    29ea:	72 c0       	rjmp	.+228    	; 0x2ad0 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29ec:	84 30       	cpi	r24, 0x04	; 4
    29ee:	09 f0       	breq	.+2      	; 0x29f2 <__vector_125+0x72>
    29f0:	6f c0       	rjmp	.+222    	; 0x2ad0 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    29f2:	e1 e3       	ldi	r30, 0x31	; 49
    29f4:	f2 e2       	ldi	r31, 0x22	; 34
    29f6:	04 e0       	ldi	r16, 0x04	; 4
    29f8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    29fa:	e9 e2       	ldi	r30, 0x29	; 41
    29fc:	f2 e2       	ldi	r31, 0x22	; 34
    29fe:	04 e0       	ldi	r16, 0x04	; 4
    2a00:	05 93       	las	Z, r16
    2a02:	66 c0       	rjmp	.+204    	; 0x2ad0 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2a04:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a08:	81 ff       	sbrs	r24, 1
    2a0a:	5d c0       	rjmp	.+186    	; 0x2ac6 <__vector_125+0x146>
		udd_ack_overflow_event();
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2a12:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <udd_sram+0x10>
    2a16:	86 ff       	sbrs	r24, 6
    2a18:	5b c0       	rjmp	.+182    	; 0x2ad0 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a1a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a1e:	81 fd       	sbrc	r24, 1
    2a20:	57 c0       	rjmp	.+174    	; 0x2ad0 <__vector_125+0x150>
    2a22:	1f db       	rcall	.-2498   	; 0x2062 <udd_ctrl_interrupt_tc_setup>
    2a24:	81 11       	cpse	r24, r1
    2a26:	54 c0       	rjmp	.+168    	; 0x2ad0 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2a28:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <udd_ep_control_state>
    2a2c:	82 30       	cpi	r24, 0x02	; 2
    2a2e:	41 f4       	brne	.+16     	; 0x2a40 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2a30:	84 e0       	ldi	r24, 0x04	; 4
    2a32:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2a36:	e8 e2       	ldi	r30, 0x28	; 40
    2a38:	f2 e2       	ldi	r31, 0x22	; 34
    2a3a:	02 e0       	ldi	r16, 0x02	; 2
    2a3c:	06 93       	lac	Z, r16
    2a3e:	48 c0       	rjmp	.+144    	; 0x2ad0 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2a40:	83 30       	cpi	r24, 0x03	; 3
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <__vector_125+0xc6>
    2a44:	45 c0       	rjmp	.+138    	; 0x2ad0 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2a46:	e1 e3       	ldi	r30, 0x31	; 49
    2a48:	f2 e2       	ldi	r31, 0x22	; 34
    2a4a:	04 e0       	ldi	r16, 0x04	; 4
    2a4c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2a4e:	e9 e2       	ldi	r30, 0x29	; 41
    2a50:	f2 e2       	ldi	r31, 0x22	; 34
    2a52:	04 e0       	ldi	r16, 0x04	; 4
    2a54:	05 93       	las	Z, r16
    2a56:	3c c0       	rjmp	.+120    	; 0x2ad0 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2a58:	80 e1       	ldi	r24, 0x10	; 16
    2a5a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	fd de       	rcall	.-518    	; 0x285c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a62:	81 e8       	ldi	r24, 0x81	; 129
    2a64:	fb de       	rcall	.-522    	; 0x285c <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a66:	82 e0       	ldi	r24, 0x02	; 2
    2a68:	f9 de       	rcall	.-526    	; 0x285c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a6a:	82 e8       	ldi	r24, 0x82	; 130
    2a6c:	f7 de       	rcall	.-530    	; 0x285c <udd_ep_abort>
		}
#endif
		udc_reset();
    2a6e:	0e 94 35 0b 	call	0x166a	; 0x166a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2a72:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a76:	e8 e1       	ldi	r30, 0x18	; 24
    2a78:	f2 e2       	ldi	r31, 0x22	; 34
    2a7a:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2a7c:	96 e0       	ldi	r25, 0x06	; 6
    2a7e:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a80:	83 e4       	ldi	r24, 0x43	; 67
    2a82:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a84:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2a86:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a88:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2a8a:	83 ed       	ldi	r24, 0xD3	; 211
    2a8c:	91 e2       	ldi	r25, 0x21	; 33
    2a8e:	84 8b       	std	Z+20, r24	; 0x14
    2a90:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2a92:	ef d9       	rcall	.-3106   	; 0x1e72 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2a94:	1d c0       	rjmp	.+58     	; 0x2ad0 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2a96:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a9a:	86 ff       	sbrs	r24, 6
    2a9c:	08 c0       	rjmp	.+16     	; 0x2aae <__vector_125+0x12e>
		udd_ack_suspend_event();
    2a9e:	80 e4       	ldi	r24, 0x40	; 64
    2aa0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	bc d9       	rcall	.-3208   	; 0x1e20 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2aa8:	0e 94 c3 03 	call	0x786	; 0x786 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2aac:	11 c0       	rjmp	.+34     	; 0x2ad0 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2aae:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ab2:	85 ff       	sbrs	r24, 5
    2ab4:	0d c0       	rjmp	.+26     	; 0x2ad0 <__vector_125+0x150>
		udd_ack_resume_event();
    2ab6:	80 e2       	ldi	r24, 0x20	; 32
    2ab8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	b0 d9       	rcall	.-3232   	; 0x1e20 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2ac0:	0e 94 c4 03 	call	0x788	; 0x788 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2ac4:	05 c0       	rjmp	.+10     	; 0x2ad0 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2ac6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2aca:	84 fd       	sbrc	r24, 4
    2acc:	c5 cf       	rjmp	.-118    	; 0x2a58 <__vector_125+0xd8>
    2ace:	e3 cf       	rjmp	.-58     	; 0x2a96 <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2ad0:	ff 91       	pop	r31
    2ad2:	ef 91       	pop	r30
    2ad4:	bf 91       	pop	r27
    2ad6:	af 91       	pop	r26
    2ad8:	9f 91       	pop	r25
    2ada:	8f 91       	pop	r24
    2adc:	7f 91       	pop	r23
    2ade:	6f 91       	pop	r22
    2ae0:	5f 91       	pop	r21
    2ae2:	4f 91       	pop	r20
    2ae4:	3f 91       	pop	r19
    2ae6:	2f 91       	pop	r18
    2ae8:	0f 91       	pop	r16
    2aea:	0f 90       	pop	r0
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	0f 90       	pop	r0
    2af0:	1f 90       	pop	r1
    2af2:	18 95       	reti

00002af4 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2af4:	1f 92       	push	r1
    2af6:	0f 92       	push	r0
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	0f 92       	push	r0
    2afc:	11 24       	eor	r1, r1
    2afe:	0f 93       	push	r16
    2b00:	1f 93       	push	r17
    2b02:	2f 93       	push	r18
    2b04:	3f 93       	push	r19
    2b06:	4f 93       	push	r20
    2b08:	5f 93       	push	r21
    2b0a:	6f 93       	push	r22
    2b0c:	7f 93       	push	r23
    2b0e:	8f 93       	push	r24
    2b10:	9f 93       	push	r25
    2b12:	af 93       	push	r26
    2b14:	bf 93       	push	r27
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	ef 93       	push	r30
    2b1c:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2b1e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b22:	81 fd       	sbrc	r24, 1
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2b26:	9d da       	rcall	.-2758   	; 0x2062 <udd_ctrl_interrupt_tc_setup>
    2b28:	81 11       	cpse	r24, r1
    2b2a:	b9 c0       	rjmp	.+370    	; 0x2c9e <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2b2c:	82 e0       	ldi	r24, 0x02	; 2
    2b2e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2b32:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2b36:	81 95       	neg	r24
    2b38:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2b3a:	e8 e2       	ldi	r30, 0x28	; 40
    2b3c:	f2 e2       	ldi	r31, 0x22	; 34
    2b3e:	e8 1b       	sub	r30, r24
    2b40:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2b42:	20 81       	ld	r18, Z
    2b44:	31 81       	ldd	r19, Z+1	; 0x01
    2b46:	28 52       	subi	r18, 0x28	; 40
    2b48:	32 42       	sbci	r19, 0x22	; 34
    2b4a:	36 95       	lsr	r19
    2b4c:	27 95       	ror	r18
    2b4e:	36 95       	lsr	r19
    2b50:	27 95       	ror	r18
    2b52:	36 95       	lsr	r19
    2b54:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2b56:	82 2f       	mov	r24, r18
    2b58:	86 95       	lsr	r24
    2b5a:	20 fd       	sbrc	r18, 0
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <__vector_126+0x6e>
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	01 c0       	rjmp	.+2      	; 0x2b64 <__vector_126+0x70>
    2b62:	90 e8       	ldi	r25, 0x80	; 128
    2b64:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b66:	e8 2f       	mov	r30, r24
    2b68:	ef 70       	andi	r30, 0x0F	; 15
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	ee 0f       	add	r30, r30
    2b6e:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2b70:	28 2f       	mov	r18, r24
    2b72:	08 2e       	mov	r0, r24
    2b74:	00 0c       	add	r0, r0
    2b76:	33 0b       	sbc	r19, r19
    2b78:	22 27       	eor	r18, r18
    2b7a:	33 0f       	add	r19, r19
    2b7c:	22 1f       	adc	r18, r18
    2b7e:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b80:	e2 0f       	add	r30, r18
    2b82:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2b84:	df 01       	movw	r26, r30
    2b86:	aa 0f       	add	r26, r26
    2b88:	bb 1f       	adc	r27, r27
    2b8a:	aa 0f       	add	r26, r26
    2b8c:	bb 1f       	adc	r27, r27
    2b8e:	aa 0f       	add	r26, r26
    2b90:	bb 1f       	adc	r27, r27
    2b92:	a8 5d       	subi	r26, 0xD8	; 216
    2b94:	bd 4d       	sbci	r27, 0xDD	; 221
    2b96:	9c 91       	ld	r25, X
    2b98:	95 ff       	sbrs	r25, 5
    2b9a:	81 c0       	rjmp	.+258    	; 0x2c9e <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2b9c:	fd 01       	movw	r30, r26
    2b9e:	00 e2       	ldi	r16, 0x20	; 32
    2ba0:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2ba2:	81 11       	cpse	r24, r1
    2ba4:	77 c0       	rjmp	.+238    	; 0x2c94 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2ba6:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <udd_ep_control_state>
    2baa:	84 30       	cpi	r24, 0x04	; 4
    2bac:	19 f4       	brne	.+6      	; 0x2bb4 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2bae:	a4 d9       	rcall	.-3256   	; 0x1ef8 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2bb0:	60 d9       	rcall	.-3392   	; 0x1e72 <udd_ctrl_init>
    2bb2:	75 c0       	rjmp	.+234    	; 0x2c9e <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2bb4:	00 91 2a 22 	lds	r16, 0x222A	; 0x80222a <udd_sram+0x12>
    2bb8:	10 91 2b 22 	lds	r17, 0x222B	; 0x80222b <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2bbc:	80 91 84 24 	lds	r24, 0x2484	; 0x802484 <udd_g_ctrlreq+0xa>
    2bc0:	90 91 85 24 	lds	r25, 0x2485	; 0x802485 <udd_g_ctrlreq+0xb>
    2bc4:	c0 91 13 22 	lds	r28, 0x2213	; 0x802213 <udd_ctrl_payload_nb_trans>
    2bc8:	d0 91 14 22 	lds	r29, 0x2214	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>
    2bcc:	9e 01       	movw	r18, r28
    2bce:	20 0f       	add	r18, r16
    2bd0:	31 1f       	adc	r19, r17
    2bd2:	82 17       	cp	r24, r18
    2bd4:	93 07       	cpc	r25, r19
    2bd6:	18 f4       	brcc	.+6      	; 0x2bde <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2bd8:	8c 01       	movw	r16, r24
    2bda:	0c 1b       	sub	r16, r28
    2bdc:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2bde:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udd_g_ctrlreq+0x8>
    2be2:	90 91 83 24 	lds	r25, 0x2483	; 0x802483 <udd_g_ctrlreq+0x9>
    2be6:	a8 01       	movw	r20, r16
    2be8:	63 ed       	ldi	r22, 0xD3	; 211
    2bea:	71 e2       	ldi	r23, 0x21	; 33
    2bec:	8c 0f       	add	r24, r28
    2bee:	9d 1f       	adc	r25, r29
    2bf0:	a7 d0       	rcall	.+334    	; 0x2d40 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2bf2:	c0 0f       	add	r28, r16
    2bf4:	d1 1f       	adc	r29, r17
    2bf6:	c0 93 13 22 	sts	0x2213, r28	; 0x802213 <udd_ctrl_payload_nb_trans>
    2bfa:	d0 93 14 22 	sts	0x2214, r29	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2bfe:	00 34       	cpi	r16, 0x40	; 64
    2c00:	11 05       	cpc	r17, r1
    2c02:	69 f4       	brne	.+26     	; 0x2c1e <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2c04:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <udd_ctrl_prev_payload_nb_trans>
    2c08:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c0c:	8c 0f       	add	r24, r28
    2c0e:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2c10:	20 91 80 24 	lds	r18, 0x2480	; 0x802480 <udd_g_ctrlreq+0x6>
    2c14:	30 91 81 24 	lds	r19, 0x2481	; 0x802481 <udd_g_ctrlreq+0x7>
    2c18:	82 17       	cp	r24, r18
    2c1a:	93 07       	cpc	r25, r19
    2c1c:	80 f0       	brcs	.+32     	; 0x2c3e <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2c1e:	ea e7       	ldi	r30, 0x7A	; 122
    2c20:	f4 e2       	ldi	r31, 0x24	; 36
    2c22:	c2 87       	std	Z+10, r28	; 0x0a
    2c24:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2c26:	06 84       	ldd	r0, Z+14	; 0x0e
    2c28:	f7 85       	ldd	r31, Z+15	; 0x0f
    2c2a:	e0 2d       	mov	r30, r0
    2c2c:	30 97       	sbiw	r30, 0x00	; 0
    2c2e:	29 f0       	breq	.+10     	; 0x2c3a <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2c30:	09 95       	icall
    2c32:	81 11       	cpse	r24, r1
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2c36:	44 d9       	rcall	.-3448   	; 0x1ec0 <udd_ctrl_stall_data>
    2c38:	32 c0       	rjmp	.+100    	; 0x2c9e <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2c3a:	50 d9       	rcall	.-3424   	; 0x1edc <udd_ctrl_send_zlp_in>
    2c3c:	30 c0       	rjmp	.+96     	; 0x2c9e <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2c3e:	80 91 84 24 	lds	r24, 0x2484	; 0x802484 <udd_g_ctrlreq+0xa>
    2c42:	90 91 85 24 	lds	r25, 0x2485	; 0x802485 <udd_g_ctrlreq+0xb>
    2c46:	c8 17       	cp	r28, r24
    2c48:	d9 07       	cpc	r29, r25
    2c4a:	f9 f4       	brne	.+62     	; 0x2c8a <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2c4c:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udd_g_ctrlreq+0xe>
    2c50:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udd_g_ctrlreq+0xf>
    2c54:	30 97       	sbiw	r30, 0x00	; 0
    2c56:	11 f4       	brne	.+4      	; 0x2c5c <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2c58:	33 d9       	rcall	.-3482   	; 0x1ec0 <udd_ctrl_stall_data>
    2c5a:	21 c0       	rjmp	.+66     	; 0x2c9e <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2c5c:	09 95       	icall
    2c5e:	81 11       	cpse	r24, r1
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2c62:	2e d9       	rcall	.-3492   	; 0x1ec0 <udd_ctrl_stall_data>
    2c64:	1c c0       	rjmp	.+56     	; 0x2c9e <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2c66:	20 91 15 22 	lds	r18, 0x2215	; 0x802215 <udd_ctrl_prev_payload_nb_trans>
    2c6a:	30 91 16 22 	lds	r19, 0x2216	; 0x802216 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c6e:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <udd_ctrl_payload_nb_trans>
    2c72:	90 91 14 22 	lds	r25, 0x2214	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>
    2c76:	82 0f       	add	r24, r18
    2c78:	93 1f       	adc	r25, r19
    2c7a:	80 93 15 22 	sts	0x2215, r24	; 0x802215 <udd_ctrl_prev_payload_nb_trans>
    2c7e:	90 93 16 22 	sts	0x2216, r25	; 0x802216 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2c82:	10 92 13 22 	sts	0x2213, r1	; 0x802213 <udd_ctrl_payload_nb_trans>
    2c86:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2c8a:	e8 e2       	ldi	r30, 0x28	; 40
    2c8c:	f2 e2       	ldi	r31, 0x22	; 34
    2c8e:	02 e0       	ldi	r16, 0x02	; 2
    2c90:	06 93       	lac	Z, r16
    2c92:	05 c0       	rjmp	.+10     	; 0x2c9e <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2c94:	80 38       	cpi	r24, 0x80	; 128
    2c96:	11 f4       	brne	.+4      	; 0x2c9c <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2c98:	37 d9       	rcall	.-3474   	; 0x1f08 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2c9c:	51 da       	rcall	.-2910   	; 0x2140 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c9e:	ff 91       	pop	r31
    2ca0:	ef 91       	pop	r30
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	bf 91       	pop	r27
    2ca8:	af 91       	pop	r26
    2caa:	9f 91       	pop	r25
    2cac:	8f 91       	pop	r24
    2cae:	7f 91       	pop	r23
    2cb0:	6f 91       	pop	r22
    2cb2:	5f 91       	pop	r21
    2cb4:	4f 91       	pop	r20
    2cb6:	3f 91       	pop	r19
    2cb8:	2f 91       	pop	r18
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	0f 90       	pop	r0
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	0f 90       	pop	r0
    2cc4:	1f 90       	pop	r1
    2cc6:	18 95       	reti

00002cc8 <__udivmodhi4>:
    2cc8:	aa 1b       	sub	r26, r26
    2cca:	bb 1b       	sub	r27, r27
    2ccc:	51 e1       	ldi	r21, 0x11	; 17
    2cce:	07 c0       	rjmp	.+14     	; 0x2cde <__udivmodhi4_ep>

00002cd0 <__udivmodhi4_loop>:
    2cd0:	aa 1f       	adc	r26, r26
    2cd2:	bb 1f       	adc	r27, r27
    2cd4:	a6 17       	cp	r26, r22
    2cd6:	b7 07       	cpc	r27, r23
    2cd8:	10 f0       	brcs	.+4      	; 0x2cde <__udivmodhi4_ep>
    2cda:	a6 1b       	sub	r26, r22
    2cdc:	b7 0b       	sbc	r27, r23

00002cde <__udivmodhi4_ep>:
    2cde:	88 1f       	adc	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	5a 95       	dec	r21
    2ce4:	a9 f7       	brne	.-22     	; 0x2cd0 <__udivmodhi4_loop>
    2ce6:	80 95       	com	r24
    2ce8:	90 95       	com	r25
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	08 95       	ret

00002cf0 <__divmodhi4>:
    2cf0:	97 fb       	bst	r25, 7
    2cf2:	07 2e       	mov	r0, r23
    2cf4:	16 f4       	brtc	.+4      	; 0x2cfa <__divmodhi4+0xa>
    2cf6:	00 94       	com	r0
    2cf8:	06 d0       	rcall	.+12     	; 0x2d06 <__divmodhi4_neg1>
    2cfa:	77 fd       	sbrc	r23, 7
    2cfc:	08 d0       	rcall	.+16     	; 0x2d0e <__divmodhi4_neg2>
    2cfe:	e4 df       	rcall	.-56     	; 0x2cc8 <__udivmodhi4>
    2d00:	07 fc       	sbrc	r0, 7
    2d02:	05 d0       	rcall	.+10     	; 0x2d0e <__divmodhi4_neg2>
    2d04:	3e f4       	brtc	.+14     	; 0x2d14 <__divmodhi4_exit>

00002d06 <__divmodhi4_neg1>:
    2d06:	90 95       	com	r25
    2d08:	81 95       	neg	r24
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	08 95       	ret

00002d0e <__divmodhi4_neg2>:
    2d0e:	70 95       	com	r23
    2d10:	61 95       	neg	r22
    2d12:	7f 4f       	sbci	r23, 0xFF	; 255

00002d14 <__divmodhi4_exit>:
    2d14:	08 95       	ret

00002d16 <__tablejump2__>:
    2d16:	ee 0f       	add	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	05 90       	lpm	r0, Z+
    2d1c:	f4 91       	lpm	r31, Z
    2d1e:	e0 2d       	mov	r30, r0
    2d20:	09 94       	ijmp

00002d22 <__umulhisi3>:
    2d22:	a2 9f       	mul	r26, r18
    2d24:	b0 01       	movw	r22, r0
    2d26:	b3 9f       	mul	r27, r19
    2d28:	c0 01       	movw	r24, r0
    2d2a:	a3 9f       	mul	r26, r19
    2d2c:	70 0d       	add	r23, r0
    2d2e:	81 1d       	adc	r24, r1
    2d30:	11 24       	eor	r1, r1
    2d32:	91 1d       	adc	r25, r1
    2d34:	b2 9f       	mul	r27, r18
    2d36:	70 0d       	add	r23, r0
    2d38:	81 1d       	adc	r24, r1
    2d3a:	11 24       	eor	r1, r1
    2d3c:	91 1d       	adc	r25, r1
    2d3e:	08 95       	ret

00002d40 <memcpy>:
    2d40:	fb 01       	movw	r30, r22
    2d42:	dc 01       	movw	r26, r24
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <memcpy+0xa>
    2d46:	01 90       	ld	r0, Z+
    2d48:	0d 92       	st	X+, r0
    2d4a:	41 50       	subi	r20, 0x01	; 1
    2d4c:	50 40       	sbci	r21, 0x00	; 0
    2d4e:	d8 f7       	brcc	.-10     	; 0x2d46 <memcpy+0x6>
    2d50:	08 95       	ret

00002d52 <_exit>:
    2d52:	f8 94       	cli

00002d54 <__stop_program>:
    2d54:	ff cf       	rjmp	.-2      	; 0x2d54 <__stop_program>
