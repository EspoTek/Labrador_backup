
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00802000  00002dec  00002e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000da6  008020b6  008020b6  00002f36  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000508  00000000  00000000  00002fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ba85  00000000  00000000  000034b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001db6  00000000  00000000  0000ef35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000958f  00000000  00000000  00010ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b68  00000000  00000000  0001a27c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f7b0  00000000  00000000  0001ade4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002521  00000000  00000000  0004a594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  0004cab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bc30  00000000  00000000  0004cee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2c c1       	rjmp	.+600    	; 0x25a <__ctors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	da c6       	rjmp	.+3508   	; 0xdce <__vector_6>
      1a:	00 00       	nop
      1c:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__vector_7>
      20:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_8>
      24:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_9>
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	26 c1       	rjmp	.+588    	; 0x292 <__bad_interrupt>
      46:	00 00       	nop
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1a c1       	rjmp	.+564    	; 0x292 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__vector_24>
      64:	16 c1       	rjmp	.+556    	; 0x292 <__bad_interrupt>
      66:	00 00       	nop
      68:	14 c1       	rjmp	.+552    	; 0x292 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	08 c1       	rjmp	.+528    	; 0x292 <__bad_interrupt>
      82:	00 00       	nop
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fa c0       	rjmp	.+500    	; 0x292 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f4 c0       	rjmp	.+488    	; 0x292 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ea c0       	rjmp	.+468    	; 0x292 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d6 c0       	rjmp	.+428    	; 0x292 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d4 c0       	rjmp	.+424    	; 0x292 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d2 c0       	rjmp	.+420    	; 0x292 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d0 c0       	rjmp	.+416    	; 0x292 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ce c0       	rjmp	.+412    	; 0x292 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	cc c0       	rjmp	.+408    	; 0x292 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ca c0       	rjmp	.+404    	; 0x292 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c8 c0       	rjmp	.+400    	; 0x292 <__bad_interrupt>
     102:	00 00       	nop
     104:	c6 c0       	rjmp	.+396    	; 0x292 <__bad_interrupt>
     106:	00 00       	nop
     108:	c4 c0       	rjmp	.+392    	; 0x292 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c2 c0       	rjmp	.+388    	; 0x292 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c0 c0       	rjmp	.+384    	; 0x292 <__bad_interrupt>
     112:	00 00       	nop
     114:	be c0       	rjmp	.+380    	; 0x292 <__bad_interrupt>
     116:	00 00       	nop
     118:	bc c0       	rjmp	.+376    	; 0x292 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c0       	rjmp	.+372    	; 0x292 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b8 c0       	rjmp	.+368    	; 0x292 <__bad_interrupt>
     122:	00 00       	nop
     124:	b6 c0       	rjmp	.+364    	; 0x292 <__bad_interrupt>
     126:	00 00       	nop
     128:	b4 c0       	rjmp	.+360    	; 0x292 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	b2 c0       	rjmp	.+356    	; 0x292 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b0 c0       	rjmp	.+352    	; 0x292 <__bad_interrupt>
     132:	00 00       	nop
     134:	ae c0       	rjmp	.+348    	; 0x292 <__bad_interrupt>
     136:	00 00       	nop
     138:	ac c0       	rjmp	.+344    	; 0x292 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	aa c0       	rjmp	.+340    	; 0x292 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a8 c0       	rjmp	.+336    	; 0x292 <__bad_interrupt>
     142:	00 00       	nop
     144:	a6 c0       	rjmp	.+332    	; 0x292 <__bad_interrupt>
     146:	00 00       	nop
     148:	a4 c0       	rjmp	.+328    	; 0x292 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_83>
     150:	a0 c0       	rjmp	.+320    	; 0x292 <__bad_interrupt>
     152:	00 00       	nop
     154:	9e c0       	rjmp	.+316    	; 0x292 <__bad_interrupt>
     156:	00 00       	nop
     158:	9c c0       	rjmp	.+312    	; 0x292 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9a c0       	rjmp	.+308    	; 0x292 <__bad_interrupt>
     15e:	00 00       	nop
     160:	98 c0       	rjmp	.+304    	; 0x292 <__bad_interrupt>
     162:	00 00       	nop
     164:	96 c0       	rjmp	.+300    	; 0x292 <__bad_interrupt>
     166:	00 00       	nop
     168:	94 c0       	rjmp	.+296    	; 0x292 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	92 c0       	rjmp	.+292    	; 0x292 <__bad_interrupt>
     16e:	00 00       	nop
     170:	90 c0       	rjmp	.+288    	; 0x292 <__bad_interrupt>
     172:	00 00       	nop
     174:	8e c0       	rjmp	.+284    	; 0x292 <__bad_interrupt>
     176:	00 00       	nop
     178:	8c c0       	rjmp	.+280    	; 0x292 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8a c0       	rjmp	.+276    	; 0x292 <__bad_interrupt>
     17e:	00 00       	nop
     180:	88 c0       	rjmp	.+272    	; 0x292 <__bad_interrupt>
     182:	00 00       	nop
     184:	86 c0       	rjmp	.+268    	; 0x292 <__bad_interrupt>
     186:	00 00       	nop
     188:	84 c0       	rjmp	.+264    	; 0x292 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	82 c0       	rjmp	.+260    	; 0x292 <__bad_interrupt>
     18e:	00 00       	nop
     190:	80 c0       	rjmp	.+256    	; 0x292 <__bad_interrupt>
     192:	00 00       	nop
     194:	7e c0       	rjmp	.+252    	; 0x292 <__bad_interrupt>
     196:	00 00       	nop
     198:	7c c0       	rjmp	.+248    	; 0x292 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7a c0       	rjmp	.+244    	; 0x292 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	78 c0       	rjmp	.+240    	; 0x292 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	76 c0       	rjmp	.+236    	; 0x292 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	74 c0       	rjmp	.+232    	; 0x292 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	72 c0       	rjmp	.+228    	; 0x292 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	70 c0       	rjmp	.+224    	; 0x292 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	6e c0       	rjmp	.+220    	; 0x292 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	6c c0       	rjmp	.+216    	; 0x292 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6a c0       	rjmp	.+212    	; 0x292 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	68 c0       	rjmp	.+208    	; 0x292 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	66 c0       	rjmp	.+204    	; 0x292 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	64 c0       	rjmp	.+200    	; 0x292 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	62 c0       	rjmp	.+196    	; 0x292 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	60 c0       	rjmp	.+192    	; 0x292 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5e c0       	rjmp	.+188    	; 0x292 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	5c c0       	rjmp	.+184    	; 0x292 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5a c0       	rjmp	.+180    	; 0x292 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	58 c0       	rjmp	.+176    	; 0x292 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	54 c0       	rjmp	.+168    	; 0x292 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	52 c0       	rjmp	.+164    	; 0x292 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	50 c0       	rjmp	.+160    	; 0x292 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__vector_125>
     1f8:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__vector_126>
     1fc:	05 07       	cpc	r16, r21
     1fe:	2c 07       	cpc	r18, r28
     200:	53 07       	cpc	r21, r19
     202:	7a 07       	cpc	r23, r26
     204:	a1 07       	cpc	r26, r17
     206:	11 08       	sbc	r1, r1
     208:	c8 07       	cpc	r28, r24
     20a:	ed 07       	cpc	r30, r29
     20c:	0d 0c       	add	r0, r13
     20e:	0f 0c       	add	r0, r15
     210:	4d 0c       	add	r4, r13
     212:	8c 0c       	add	r8, r12
     214:	95 0c       	add	r9, r5
     216:	9a 0c       	add	r9, r10
     218:	ee 0c       	add	r14, r14
     21a:	f3 0c       	add	r15, r3
     21c:	3b 0c       	add	r3, r11
     21e:	3e 0c       	add	r3, r14
     220:	41 0c       	add	r4, r1
     222:	43 0c       	add	r4, r3
     224:	45 0c       	add	r4, r5
     226:	47 0c       	add	r4, r7
     228:	49 0c       	add	r4, r9
     22a:	4b 0c       	add	r4, r11
     22c:	79 0c       	add	r7, r9
     22e:	7c 0c       	add	r7, r12
     230:	7f 0c       	add	r7, r15
     232:	82 0c       	add	r8, r2
     234:	84 0c       	add	r8, r4
     236:	86 0c       	add	r8, r6
     238:	88 0c       	add	r8, r8
     23a:	8a 0c       	add	r8, r10
     23c:	a6 0c       	add	r10, r6
     23e:	b1 0c       	add	r11, r1
     240:	bc 0c       	add	r11, r12
     242:	cb 0c       	add	r12, r11
     244:	cd 0c       	add	r12, r13
     246:	cf 0c       	add	r12, r15
     248:	d9 0c       	add	r13, r9
     24a:	e3 0c       	add	r14, r3
     24c:	6b 10       	cpse	r6, r11
     24e:	6e 10       	cpse	r6, r14
     250:	71 10       	cpse	r7, r1
     252:	74 10       	cpse	r7, r4
     254:	77 10       	cpse	r7, r7
     256:	7a 10       	cpse	r7, r10
     258:	7d 10       	cpse	r7, r13

0000025a <__ctors_end>:
     25a:	11 24       	eor	r1, r1
     25c:	1f be       	out	0x3f, r1	; 63
     25e:	cf ef       	ldi	r28, 0xFF	; 255
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df e2       	ldi	r29, 0x2F	; 47
     264:	de bf       	out	0x3e, r29	; 62

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	ec ee       	ldi	r30, 0xEC	; 236
     26e:	fd e2       	ldi	r31, 0x2D	; 45
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x10>
     272:	05 90       	lpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	a6 3b       	cpi	r26, 0xB6	; 182
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0xc>

0000027c <__do_clear_bss>:
     27c:	2e e2       	ldi	r18, 0x2E	; 46
     27e:	a6 eb       	ldi	r26, 0xB6	; 182
     280:	b0 e2       	ldi	r27, 0x20	; 32
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	ac 35       	cpi	r26, 0x5C	; 92
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	0b d1       	rcall	.+534    	; 0x4a4 <main>
     28e:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <_exit>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <tiny_calibration_init>:

#include "tiny_calibration.h"
#include "globals.h"
#include "tiny_adc.h"

tiny_calibration_init(){
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
		//Set up 48MHz DFLL for USB.
		OSC.DFLLCTRL = OSC_RC32MCREF_USBSOF_gc;
     29a:	c0 e5       	ldi	r28, 0x50	; 80
     29c:	d0 e0       	ldi	r29, 0x00	; 0
     29e:	14 e0       	ldi	r17, 0x04	; 4
     2a0:	1e 83       	std	Y+6, r17	; 0x06
		DFLLRC32M.CALB = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC)); //THIS is the val for 48MHz.  RCOSC32M is for a 32MHz calibration.  That makes a lot of sense now...
     2a2:	8c e1       	ldi	r24, 0x1C	; 28
     2a4:	c1 d1       	rcall	.+898    	; 0x628 <ReadCalibrationByte>
     2a6:	e0 e6       	ldi	r30, 0x60	; 96
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	83 83       	std	Z+3, r24	; 0x03
		DFLLRC32M.COMP2 = 0xBB;
     2ac:	8b eb       	ldi	r24, 0xBB	; 187
     2ae:	86 83       	std	Z+6, r24	; 0x06
		DFLLRC32M.COMP1= 0x80;  //0xBB80 = 48,000.
     2b0:	80 e8       	ldi	r24, 0x80	; 128
     2b2:	85 83       	std	Z+5, r24	; 0x05
		DFLLRC32M.CTRL = 0x01; //Enable
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	80 83       	st	Z, r24
		
		//Turn on the 48MHz clock and scale it down to 24MHz
		CCP = CCP_IOREG_gc;
     2b8:	88 ed       	ldi	r24, 0xD8	; 216
     2ba:	84 bf       	out	0x34, r24	; 52
		CLK.PSCTRL = CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc;  //All peripheral clocks = CLKsys / 2.
     2bc:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
		//CLK.USBCTRL handled by udc
		OSC.CTRL = OSC_RC32MEN_bm | OSC_RC2MEN_bm;  //Enable 32MHz reference.  Keep 2MHz on.
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	88 83       	st	Y, r24
		while(OSC.STATUS != (OSC_RC32MRDY_bm | OSC_RC2MRDY_bm)); //Wait for it to be ready before continuing
     2c4:	e0 e5       	ldi	r30, 0x50	; 80
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	81 81       	ldd	r24, Z+1	; 0x01
     2ca:	83 30       	cpi	r24, 0x03	; 3
     2cc:	e9 f7       	brne	.-6      	; 0x2c8 <tiny_calibration_init+0x34>
		
		//4 step process from ASF manual.  Puts a 48MHz clock on the PLL output
		OSC.CTRL |= OSC_RC2MEN_bm;  //1. Enable reference clock source.
     2ce:	e0 e5       	ldi	r30, 0x50	; 80
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	80 83       	st	Z, r24
		OSC.PLLCTRL = OSC_PLLSRC_RC2M_gc | 24; //2. Set the multiplication factor and select the clock reference for the PLL.
     2d8:	88 e1       	ldi	r24, 0x18	; 24
     2da:	85 83       	std	Z+5, r24	; 0x05
		while(!(OSC.STATUS & OSC_RC2MRDY_bm)); //3. Wait until the clock reference source is stable.
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	80 ff       	sbrs	r24, 0
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x48>
		OSC.CTRL |= OSC_PLLEN_bm; //4. Enable the PLL
     2e2:	e0 e5       	ldi	r30, 0x50	; 80
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	80 61       	ori	r24, 0x10	; 16
     2ea:	80 83       	st	Z, r24
		
		//Move CPU + Peripherals to 48MHz PLLL clock.
		while(!(OSC.STATUS & OSC_PLLRDY_bm));
     2ec:	81 81       	ldd	r24, Z+1	; 0x01
     2ee:	84 ff       	sbrs	r24, 4
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <tiny_calibration_init+0x58>
		CCP = CCP_IOREG_gc;
     2f2:	88 ed       	ldi	r24, 0xD8	; 216
     2f4:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     2f6:	84 e0       	ldi	r24, 0x04	; 4
     2f8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
		
		//DFLLRC2M.CALB -= 1;
		DFLLRC2M.CALA -= 21;
     2fc:	e8 e6       	ldi	r30, 0x68	; 104
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	82 81       	ldd	r24, Z+2	; 0x02
     302:	85 51       	subi	r24, 0x15	; 21
     304:	82 83       	std	Z+2, r24	; 0x02
		return;
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	08 95       	ret

0000030e <tiny_calibration_first_sof>:

tiny_calibration_first_sof(){
		PR.PRPE &= 0b11111110;
     30e:	e0 e7       	ldi	r30, 0x70	; 112
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	85 81       	ldd	r24, Z+5	; 0x05
     314:	8e 7f       	andi	r24, 0xFE	; 254
     316:	85 83       	std	Z+5, r24	; 0x05
		TC_CALI.PER = 24000;
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	80 ec       	ldi	r24, 0xC0	; 192
     31e:	9d e5       	ldi	r25, 0x5D	; 93
     320:	86 a3       	std	Z+38, r24	; 0x26
     322:	97 a3       	std	Z+39, r25	; 0x27
		TC_CALI.CNT = 12000;
     324:	80 ee       	ldi	r24, 0xE0	; 224
     326:	9e e2       	ldi	r25, 0x2E	; 46
     328:	80 a3       	std	Z+32, r24	; 0x20
     32a:	91 a3       	std	Z+33, r25	; 0x21
		TC_CALI.CTRLA = TC_CLKSEL_DIV1_gc;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 83       	st	Z, r24
     330:	08 95       	ret

00000332 <tiny_calibration_every_sof>:
volatile int gradient;

unsigned char deadTime = 0;
volatile unsigned long outOfRange = 0;
void tiny_calibration_every_sof(){
	unsigned int cnt = TC_CALI.CNT;
     332:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     336:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     33a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     33e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     342:	ac 01       	movw	r20, r24
     344:	42 1b       	sub	r20, r18
     346:	53 0b       	sbc	r21, r19
     348:	40 93 63 22 	sts	0x2263, r20	; 0x802263 <gradient>
     34c:	50 93 64 22 	sts	0x2264, r21	; 0x802264 <gradient+0x1>
	
	if(cnt > 12500){
     350:	85 3d       	cpi	r24, 0xD5	; 213
     352:	50 e3       	ldi	r21, 0x30	; 48
     354:	95 07       	cpc	r25, r21
     356:	18 f0       	brcs	.+6      	; 0x35e <tiny_calibration_every_sof+0x2c>
		DFLLRC2M.CALA = 39;
     358:	27 e2       	ldi	r18, 0x27	; 39
     35a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	}
	if(cnt < 11500){
     35e:	8c 3e       	cpi	r24, 0xEC	; 236
     360:	2c e2       	ldi	r18, 0x2C	; 44
     362:	92 07       	cpc	r25, r18
     364:	18 f4       	brcc	.+6      	; 0x36c <tiny_calibration_every_sof+0x3a>
		DFLLRC2M.CALA = 43;
     366:	2b e2       	ldi	r18, 0x2B	; 43
     368:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	}
	
	if((cnt<10000) || (cnt>14000)){
     36c:	9c 01       	movw	r18, r24
     36e:	20 51       	subi	r18, 0x10	; 16
     370:	37 42       	sbci	r19, 0x27	; 39
     372:	21 3a       	cpi	r18, 0xA1	; 161
     374:	3f 40       	sbci	r19, 0x0F	; 15
     376:	a0 f0       	brcs	.+40     	; 0x3a0 <tiny_calibration_every_sof+0x6e>
		outOfRange++;
     378:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <__data_end>
     37c:	50 91 b7 20 	lds	r21, 0x20B7	; 0x8020b7 <__data_end+0x1>
     380:	60 91 b8 20 	lds	r22, 0x20B8	; 0x8020b8 <__data_end+0x2>
     384:	70 91 b9 20 	lds	r23, 0x20B9	; 0x8020b9 <__data_end+0x3>
     388:	4f 5f       	subi	r20, 0xFF	; 255
     38a:	5f 4f       	sbci	r21, 0xFF	; 255
     38c:	6f 4f       	sbci	r22, 0xFF	; 255
     38e:	7f 4f       	sbci	r23, 0xFF	; 255
     390:	40 93 b6 20 	sts	0x20B6, r20	; 0x8020b6 <__data_end>
     394:	50 93 b7 20 	sts	0x20B7, r21	; 0x8020b7 <__data_end+0x1>
     398:	60 93 b8 20 	sts	0x20B8, r22	; 0x8020b8 <__data_end+0x2>
     39c:	70 93 b9 20 	sts	0x20B9, r23	; 0x8020b9 <__data_end+0x3>
	}
	
	last_val = cnt;
     3a0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     3a4:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     3a8:	08 95       	ret

000003aa <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     3aa:	e0 e8       	ldi	r30, 0x80	; 128
     3ac:	f6 e0       	ldi	r31, 0x06	; 6
     3ae:	8f e0       	ldi	r24, 0x0F	; 15
     3b0:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     3b2:	85 e0       	ldi	r24, 0x05	; 5
     3b4:	84 83       	std	Z+4, r24	; 0x04
     3b6:	08 95       	ret

000003b8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     3b8:	08 95       	ret

000003ba <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, iso_callback);
     3ba:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <usb_state>
     3be:	27 e7       	ldi	r18, 0x77	; 119
     3c0:	31 e0       	ldi	r19, 0x01	; 1
     3c2:	42 9f       	mul	r20, r18
     3c4:	c0 01       	movw	r24, r0
     3c6:	43 9f       	mul	r20, r19
     3c8:	90 0d       	add	r25, r0
     3ca:	11 24       	eor	r1, r1
     3cc:	4d ed       	ldi	r20, 0xDD	; 221
     3ce:	51 e0       	ldi	r21, 0x01	; 1
     3d0:	6a ef       	ldi	r22, 0xFA	; 250
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	86 58       	subi	r24, 0x86	; 134
     3d6:	99 4d       	sbci	r25, 0xD9	; 217
     3d8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <udi_vendor_iso_in_run>
	if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * HALFPACKET_SIZE], 250, iso_callback);
     3dc:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
     3e0:	81 3f       	cpi	r24, 0xF1	; 241
     3e2:	8c f0       	brlt	.+34     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     3e4:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <usb_state>
     3e8:	88 23       	and	r24, r24
     3ea:	19 f0       	breq	.+6      	; 0x3f2 <iso_callback+0x38>
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <iso_callback+0x3c>
     3f2:	87 e7       	ldi	r24, 0x77	; 119
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	4d ed       	ldi	r20, 0xDD	; 221
     3f8:	51 e0       	ldi	r21, 0x01	; 1
     3fa:	6a ef       	ldi	r22, 0xFA	; 250
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	86 58       	subi	r24, 0x86	; 134
     400:	99 4d       	sbci	r25, 0xD9	; 217
     402:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <udi_vendor_iso_in_run>
     406:	08 95       	ret

00000408 <iso_callback2>:
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, iso_callback2);
     408:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <usb_state>
     40c:	27 e7       	ldi	r18, 0x77	; 119
     40e:	31 e0       	ldi	r19, 0x01	; 1
     410:	42 9f       	mul	r20, r18
     412:	c0 01       	movw	r24, r0
     414:	43 9f       	mul	r20, r19
     416:	90 0d       	add	r25, r0
     418:	11 24       	eor	r1, r1
     41a:	44 e0       	ldi	r20, 0x04	; 4
     41c:	52 e0       	ldi	r21, 0x02	; 2
     41e:	6a ef       	ldi	r22, 0xFA	; 250
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	8c 58       	subi	r24, 0x8C	; 140
     424:	98 4d       	sbci	r25, 0xD8	; 216
     426:	0e 94 8a 0a 	call	0x1514	; 0x1514 <udi_vendor_iso_in_run2>
		if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * HALFPACKET_SIZE + 250], 250, iso_callback);
     42a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
     42e:	81 3f       	cpi	r24, 0xF1	; 241
     430:	8c f0       	brlt	.+34     	; 0x454 <iso_callback2+0x4c>
     432:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <usb_state>
     436:	88 23       	and	r24, r24
     438:	19 f0       	breq	.+6      	; 0x440 <iso_callback2+0x38>
     43a:	8a ef       	ldi	r24, 0xFA	; 250
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	02 c0       	rjmp	.+4      	; 0x444 <iso_callback2+0x3c>
     440:	81 e7       	ldi	r24, 0x71	; 113
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	4d ed       	ldi	r20, 0xDD	; 221
     446:	51 e0       	ldi	r21, 0x01	; 1
     448:	6a ef       	ldi	r22, 0xFA	; 250
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	86 58       	subi	r24, 0x86	; 134
     44e:	99 4d       	sbci	r25, 0xD9	; 217
     450:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <udi_vendor_iso_in_run>
     454:	08 95       	ret

00000456 <iso_callback3>:

	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, iso_callback3);
     456:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <usb_state>
     45a:	27 e7       	ldi	r18, 0x77	; 119
     45c:	31 e0       	ldi	r19, 0x01	; 1
     45e:	42 9f       	mul	r20, r18
     460:	c0 01       	movw	r24, r0
     462:	43 9f       	mul	r20, r19
     464:	90 0d       	add	r25, r0
     466:	11 24       	eor	r1, r1
     468:	4b e2       	ldi	r20, 0x2B	; 43
     46a:	52 e0       	ldi	r21, 0x02	; 2
     46c:	6a ef       	ldi	r22, 0xFA	; 250
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	82 59       	subi	r24, 0x92	; 146
     472:	97 4d       	sbci	r25, 0xD7	; 215
     474:	0e 94 96 0a 	call	0x152c	; 0x152c <udi_vendor_iso_in_run3>
	if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * HALFPACKET_SIZE + 500], 250, iso_callback);
     478:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
     47c:	81 3f       	cpi	r24, 0xF1	; 241
     47e:	8c f0       	brlt	.+34     	; 0x4a2 <iso_callback3+0x4c>
     480:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <usb_state>
     484:	88 23       	and	r24, r24
     486:	19 f0       	breq	.+6      	; 0x48e <iso_callback3+0x38>
     488:	84 ef       	ldi	r24, 0xF4	; 244
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	02 c0       	rjmp	.+4      	; 0x492 <iso_callback3+0x3c>
     48e:	8b e6       	ldi	r24, 0x6B	; 107
     490:	93 e0       	ldi	r25, 0x03	; 3
     492:	4d ed       	ldi	r20, 0xDD	; 221
     494:	51 e0       	ldi	r21, 0x01	; 1
     496:	6a ef       	ldi	r22, 0xFA	; 250
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	86 58       	subi	r24, 0x86	; 134
     49c:	99 4d       	sbci	r25, 0xD9	; 217
     49e:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <udi_vendor_iso_in_run>
     4a2:	08 95       	ret

000004a4 <main>:
#define CNT_CNT_MAX 256
volatile unsigned short cntCnt[CNT_CNT_MAX];
volatile unsigned short cntCntCnt = 0;

int main(void){
	irq_initialize_vectors();
     4a4:	87 e0       	ldi	r24, 0x07	; 7
     4a6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     4aa:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     4ac:	f3 de       	rcall	.-538    	; 0x294 <tiny_calibration_init>
		
	board_init();
     4ae:	84 df       	rcall	.-248    	; 0x3b8 <board_init>
	udc_start();
     4b0:	0e 94 8d 0b 	call	0x171a	; 0x171a <udc_start>
	tiny_dac_setup();
     4b4:	ff d0       	rcall	.+510    	; 0x6b4 <tiny_dac_setup>
	tiny_dma_setup();
     4b6:	22 d1       	rcall	.+580    	; 0x6fc <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	be d0       	rcall	.+380    	; 0x63a <tiny_adc_setup>
	tiny_adc_pid_setup();
     4be:	aa d0       	rcall	.+340    	; 0x614 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     4c0:	8c e0       	ldi	r24, 0x0C	; 12
     4c2:	9e d0       	rcall	.+316    	; 0x600 <tiny_adc_ch1setup>
	tiny_timer_setup();
     4c4:	b1 d6       	rcall	.+3426   	; 0x1228 <tiny_timer_setup>
	tiny_uart_setup();
     4c6:	6c d7       	rcall	.+3800   	; 0x13a0 <tiny_uart_setup>
	tiny_spi_setup();
     4c8:	83 d7       	rcall	.+3846   	; 0x13d0 <tiny_spi_setup>
	tiny_dig_setup();
     4ca:	6f df       	rcall	.-290    	; 0x3aa <tiny_dig_setup>
     4cc:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <debug_counter>
     4d0:	90 91 67 22 	lds	r25, 0x2267	; 0x802267 <debug_counter+0x1>
     4d4:	a0 91 68 22 	lds	r26, 0x2268	; 0x802268 <debug_counter+0x2>
     4d8:	b0 91 69 22 	lds	r27, 0x2269	; 0x802269 <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	a1 1d       	adc	r26, r1
     4e0:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	21 ee       	ldi	r18, 0xE1	; 225
     4e6:	92 07       	cpc	r25, r18
     4e8:	25 ef       	ldi	r18, 0xF5	; 245
     4ea:	a2 07       	cpc	r26, r18
     4ec:	25 e0       	ldi	r18, 0x05	; 5
     4ee:	b2 07       	cpc	r27, r18
     4f0:	18 f0       	brcs	.+6      	; 0x4f8 <main+0x54>
			debug_counter = 0;
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     514:	e3 cf       	rjmp	.-58     	; 0x4dc <main+0x38>

00000516 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     516:	08 95       	ret

00000518 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     518:	08 95       	ret

0000051a <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	if(firstFrame){
     51a:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <firstFrame>
     51e:	88 23       	and	r24, r24
     520:	39 f0       	breq	.+14     	; 0x530 <main_sof_action+0x16>
		tiny_calibration_first_sof();
     522:	f5 de       	rcall	.-534    	; 0x30e <tiny_calibration_first_sof>
		firstFrame = 0;
     524:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <firstFrame>
		tcinit = 1;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <tcinit>
     52e:	28 c0       	rjmp	.+80     	; 0x580 <main_sof_action+0x66>
	}
	else{
		if(tcinit){
     530:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tcinit>
     534:	88 23       	and	r24, r24
     536:	21 f1       	breq	.+72     	; 0x580 <main_sof_action+0x66>
			tiny_calibration_every_sof();
     538:	fc de       	rcall	.-520    	; 0x332 <tiny_calibration_every_sof>
			cntCnt[cntCntCnt] = TC_CALI.CNT;
     53a:	e0 91 ba 20 	lds	r30, 0x20BA	; 0x8020ba <cntCntCnt>
     53e:	f0 91 bb 20 	lds	r31, 0x20BB	; 0x8020bb <cntCntCnt+0x1>
     542:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     546:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	ea 5a       	subi	r30, 0xAA	; 170
     550:	f3 4d       	sbci	r31, 0xD3	; 211
     552:	80 83       	st	Z, r24
     554:	91 83       	std	Z+1, r25	; 0x01
			if(cntCntCnt == (CNT_CNT_MAX - 1)){
     556:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <cntCntCnt>
     55a:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <cntCntCnt+0x1>
     55e:	8f 3f       	cpi	r24, 0xFF	; 255
     560:	91 05       	cpc	r25, r1
     562:	29 f4       	brne	.+10     	; 0x56e <main_sof_action+0x54>
				cntCntCnt = 0;
     564:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <cntCntCnt>
     568:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <cntCntCnt+0x1>
     56c:	09 c0       	rjmp	.+18     	; 0x580 <main_sof_action+0x66>
			}
			else cntCntCnt++;
     56e:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <cntCntCnt>
     572:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <cntCntCnt+0x1>
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <cntCntCnt>
     57c:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <cntCntCnt+0x1>
		}
	}
	usb_state = !usb_state;
     580:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <usb_state>
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	91 11       	cpse	r25, r1
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <usb_state>
     58e:	08 95       	ret

00000590 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <main_b_vendor_enable>
	firstFrame = 1;
     596:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     59a:	4d ed       	ldi	r20, 0xDD	; 221
     59c:	51 e0       	ldi	r21, 0x01	; 1
     59e:	6e ee       	ldi	r22, 0xEE	; 238
     5a0:	72 e0       	ldi	r23, 0x02	; 2
     5a2:	8a e7       	ldi	r24, 0x7A	; 122
     5a4:	96 e2       	ldi	r25, 0x26	; 38
     5a6:	aa d7       	rcall	.+3924   	; 0x14fc <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     5a8:	44 e0       	ldi	r20, 0x04	; 4
     5aa:	52 e0       	ldi	r21, 0x02	; 2
     5ac:	6e ee       	ldi	r22, 0xEE	; 238
     5ae:	72 e0       	ldi	r23, 0x02	; 2
     5b0:	84 e7       	ldi	r24, 0x74	; 116
     5b2:	97 e2       	ldi	r25, 0x27	; 39
     5b4:	af d7       	rcall	.+3934   	; 0x1514 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     5b6:	4b e2       	ldi	r20, 0x2B	; 43
     5b8:	52 e0       	ldi	r21, 0x02	; 2
     5ba:	6e ee       	ldi	r22, 0xEE	; 238
     5bc:	72 e0       	ldi	r23, 0x02	; 2
     5be:	8e e6       	ldi	r24, 0x6E	; 110
     5c0:	98 e2       	ldi	r25, 0x28	; 40
     5c2:	b4 d7       	rcall	.+3944   	; 0x152c <udi_vendor_iso_in_run3>
	return true;
}
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	08 95       	ret

000005c8 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     5c8:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <main_b_vendor_enable>
     5cc:	08 95       	ret

000005ce <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	08 95       	ret

000005d2 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	08 95       	ret

000005d6 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     5d6:	e0 e0       	ldi	r30, 0x00	; 0
     5d8:	f2 e0       	ldi	r31, 0x02	; 2
     5da:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     5dc:	98 2f       	mov	r25, r24
     5de:	9c 71       	andi	r25, 0x1C	; 28
     5e0:	93 68       	ori	r25, 0x83	; 131
     5e2:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     5e4:	88 23       	and	r24, r24
     5e6:	1c f4       	brge	.+6      	; 0x5ee <tiny_adc_ch0setup+0x18>
     5e8:	90 e1       	ldi	r25, 0x10	; 16
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <tiny_adc_ch0setup+0x1c>
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	89 2b       	or	r24, r25
     5f4:	e0 e0       	ldi	r30, 0x00	; 0
     5f6:	f2 e0       	ldi	r31, 0x02	; 2
     5f8:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     5fa:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     5fc:	16 a2       	std	Z+38, r1	; 0x26
     5fe:	08 95       	ret

00000600 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     600:	e0 e0       	ldi	r30, 0x00	; 0
     602:	f2 e0       	ldi	r31, 0x02	; 2
     604:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     606:	83 68       	ori	r24, 0x83	; 131
     608:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     60a:	80 e1       	ldi	r24, 0x10	; 16
     60c:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     60e:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     610:	16 aa       	std	Z+54, r1	; 0x36
     612:	08 95       	ret

00000614 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     614:	e0 e0       	ldi	r30, 0x00	; 0
     616:	f2 e0       	ldi	r31, 0x02	; 2
     618:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     61a:	83 e8       	ldi	r24, 0x83	; 131
     61c:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     61e:	8f e2       	ldi	r24, 0x2F	; 47
     620:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     622:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     624:	16 a6       	std	Z+46, r1	; 0x2e
     626:	08 95       	ret

00000628 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     628:	aa ec       	ldi	r26, 0xCA	; 202
     62a:	b1 e0       	ldi	r27, 0x01	; 1
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     630:	e8 2f       	mov	r30, r24
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     636:	1c 92       	st	X, r1

	return( result );
     638:	08 95       	ret

0000063a <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     63e:	e0 e7       	ldi	r30, 0x70	; 112
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	91 81       	ldd	r25, Z+1	; 0x01
     644:	9d 7f       	andi	r25, 0xFD	; 253
     646:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     648:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     64c:	62 30       	cpi	r22, 0x02	; 2
     64e:	31 f1       	breq	.+76     	; 0x69c <tiny_adc_setup+0x62>
     650:	e0 e0       	ldi	r30, 0x00	; 0
     652:	f2 e0       	ldi	r31, 0x02	; 2
     654:	9c e1       	ldi	r25, 0x1C	; 28
     656:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     658:	90 e4       	ldi	r25, 0x40	; 64
     65a:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     65c:	81 11       	cpse	r24, r1
     65e:	02 c0       	rjmp	.+4      	; 0x664 <tiny_adc_setup+0x2a>
     660:	80 e4       	ldi	r24, 0x40	; 64
     662:	01 c0       	rjmp	.+2      	; 0x666 <tiny_adc_setup+0x2c>
     664:	80 ec       	ldi	r24, 0xC0	; 192
     666:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     66a:	61 30       	cpi	r22, 0x01	; 1
     66c:	11 f0       	breq	.+4      	; 0x672 <tiny_adc_setup+0x38>
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	01 c0       	rjmp	.+2      	; 0x674 <tiny_adc_setup+0x3a>
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	c0 e0       	ldi	r28, 0x00	; 0
     676:	d2 e0       	ldi	r29, 0x02	; 2
     678:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     67a:	80 e2       	ldi	r24, 0x20	; 32
     67c:	d5 df       	rcall	.-86     	; 0x628 <ReadCalibrationByte>
     67e:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     680:	81 e2       	ldi	r24, 0x21	; 33
     682:	d2 df       	rcall	.-92     	; 0x628 <ReadCalibrationByte>
     684:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     686:	18 8e       	std	Y+24, r1	; 0x18
     688:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     68e:	c2 df       	rcall	.-124    	; 0x614 <tiny_adc_pid_setup>
     690:	0e c0       	rjmp	.+28     	; 0x6ae <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     692:	80 ec       	ldi	r24, 0xC0	; 192
     694:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	ec cf       	rjmp	.-40     	; 0x674 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     69c:	e0 e0       	ldi	r30, 0x00	; 0
     69e:	f2 e0       	ldi	r31, 0x02	; 2
     6a0:	9e e1       	ldi	r25, 0x1E	; 30
     6a2:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     6a4:	90 e4       	ldi	r25, 0x40	; 64
     6a6:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     6a8:	81 11       	cpse	r24, r1
     6aa:	f3 cf       	rjmp	.-26     	; 0x692 <tiny_adc_setup+0x58>
     6ac:	d9 cf       	rjmp	.-78     	; 0x660 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     6b8:	e0 e7       	ldi	r30, 0x70	; 112
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	8b 7f       	andi	r24, 0xFB	; 251
     6c0:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     6c2:	c0 e2       	ldi	r28, 0x20	; 32
     6c4:	d3 e0       	ldi	r29, 0x03	; 3
     6c6:	8d e0       	ldi	r24, 0x0D	; 13
     6c8:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     6ca:	80 e4       	ldi	r24, 0x40	; 64
     6cc:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     6ce:	89 e0       	ldi	r24, 0x09	; 9
     6d0:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     6d2:	83 e3       	ldi	r24, 0x33	; 51
     6d4:	a9 df       	rcall	.-174    	; 0x628 <ReadCalibrationByte>
     6d6:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     6d8:	82 e3       	ldi	r24, 0x32	; 50
     6da:	a6 df       	rcall	.-180    	; 0x628 <ReadCalibrationByte>
     6dc:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     6de:	87 e3       	ldi	r24, 0x37	; 55
     6e0:	a3 df       	rcall	.-186    	; 0x628 <ReadCalibrationByte>
     6e2:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     6e4:	86 e3       	ldi	r24, 0x36	; 54
     6e6:	a0 df       	rcall	.-192    	; 0x628 <ReadCalibrationByte>
     6e8:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     6ea:	e0 e2       	ldi	r30, 0x20	; 32
     6ec:	f6 e0       	ldi	r31, 0x06	; 6
     6ee:	80 81       	ld	r24, Z
     6f0:	83 60       	ori	r24, 0x03	; 3
     6f2:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     6f4:	14 82       	std	Z+4, r1	; 0x04
	
	

     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     6fc:	e0 e7       	ldi	r30, 0x70	; 112
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	8e 7f       	andi	r24, 0xFE	; 254
     704:	80 83       	st	Z, r24
     706:	83 e8       	ldi	r24, 0x83	; 131
     708:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     70c:	08 95       	ret

0000070e <tiny_dma_flush>:
     70e:	e0 e0       	ldi	r30, 0x00	; 0
     710:	f1 e0       	ldi	r31, 0x01	; 1
     712:	10 8a       	std	Z+16, r1	; 0x10
     714:	80 e4       	ldi	r24, 0x40	; 64
     716:	80 8b       	std	Z+16, r24	; 0x10
     718:	10 a2       	std	Z+32, r1	; 0x20
     71a:	80 a3       	std	Z+32, r24	; 0x20
     71c:	10 aa       	std	Z+48, r1	; 0x30
     71e:	80 ab       	std	Z+48, r24	; 0x30
     720:	e0 e4       	ldi	r30, 0x40	; 64
     722:	f1 e0       	ldi	r31, 0x01	; 1
     724:	10 82       	st	Z, r1
     726:	80 83       	st	Z, r24
     728:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <b1_state>
     72c:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <b2_state>
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <usb_state>
     736:	08 95       	ret

00000738 <tiny_dma_set_mode_0>:
     738:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <global_mode>
     73c:	e8 df       	rcall	.-48     	; 0x70e <tiny_dma_flush>
     73e:	e0 e0       	ldi	r30, 0x00	; 0
     740:	f1 e0       	ldi	r31, 0x01	; 1
     742:	16 aa       	std	Z+54, r1	; 0x36
     744:	84 e2       	ldi	r24, 0x24	; 36
     746:	80 ab       	std	Z+48, r24	; 0x30
     748:	11 aa       	std	Z+49, r1	; 0x31
     74a:	49 e5       	ldi	r20, 0x59	; 89
     74c:	42 ab       	std	Z+50, r20	; 0x32
     74e:	32 e0       	ldi	r19, 0x02	; 2
     750:	33 ab       	std	Z+51, r19	; 0x33
     752:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <auxDacBufLen>
     756:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     75a:	64 ab       	std	Z+52, r22	; 0x34
     75c:	75 ab       	std	Z+53, r23	; 0x35
     75e:	6a e7       	ldi	r22, 0x7A	; 122
     760:	74 e2       	ldi	r23, 0x24	; 36
     762:	60 af       	std	Z+56, r22	; 0x38
     764:	71 af       	std	Z+57, r23	; 0x39
     766:	12 ae       	std	Z+58, r1	; 0x3a
     768:	9b e3       	ldi	r25, 0x3B	; 59
     76a:	94 af       	std	Z+60, r25	; 0x3c
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     772:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     776:	20 a9       	ldd	r18, Z+48	; 0x30
     778:	20 68       	ori	r18, 0x80	; 128
     77a:	20 ab       	std	Z+48, r18	; 0x30
     77c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     780:	a0 e4       	ldi	r26, 0x40	; 64
     782:	b1 e0       	ldi	r27, 0x01	; 1
     784:	8c 93       	st	X, r24
     786:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     78a:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     78e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     792:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     796:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     79a:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     79e:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     7a2:	4a e6       	ldi	r20, 0x6A	; 106
     7a4:	52 e2       	ldi	r21, 0x22	; 34
     7a6:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     7aa:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     7ae:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     7b2:	29 e3       	ldi	r18, 0x39	; 57
     7b4:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     7b8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     7bc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     7c0:	9c 91       	ld	r25, X
     7c2:	90 68       	ori	r25, 0x80	; 128
     7c4:	9c 93       	st	X, r25
     7c6:	10 8a       	std	Z+16, r1	; 0x10
     7c8:	90 e4       	ldi	r25, 0x40	; 64
     7ca:	90 8b       	std	Z+16, r25	; 0x10
     7cc:	80 8b       	std	Z+16, r24	; 0x10
     7ce:	11 8a       	std	Z+17, r1	; 0x11
     7d0:	95 e9       	ldi	r25, 0x95	; 149
     7d2:	92 8b       	std	Z+18, r25	; 0x12
     7d4:	90 e1       	ldi	r25, 0x10	; 16
     7d6:	93 8b       	std	Z+19, r25	; 0x13
     7d8:	4e ee       	ldi	r20, 0xEE	; 238
     7da:	52 e0       	ldi	r21, 0x02	; 2
     7dc:	44 8b       	std	Z+20, r20	; 0x14
     7de:	55 8b       	std	Z+21, r21	; 0x15
     7e0:	80 8f       	std	Z+24, r24	; 0x18
     7e2:	31 8f       	std	Z+25, r19	; 0x19
     7e4:	12 8e       	std	Z+26, r1	; 0x1a
     7e6:	8a e7       	ldi	r24, 0x7A	; 122
     7e8:	96 e2       	ldi	r25, 0x26	; 38
     7ea:	84 8f       	std	Z+28, r24	; 0x1c
     7ec:	95 8f       	std	Z+29, r25	; 0x1d
     7ee:	16 8e       	std	Z+30, r1	; 0x1e
     7f0:	80 89       	ldd	r24, Z+16	; 0x10
     7f2:	80 68       	ori	r24, 0x80	; 128
     7f4:	80 8b       	std	Z+16, r24	; 0x10
     7f6:	08 95       	ret

000007f8 <tiny_dma_set_mode_1>:
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     802:	85 df       	rcall	.-246    	; 0x70e <tiny_dma_flush>
     804:	e0 e0       	ldi	r30, 0x00	; 0
     806:	f1 e0       	ldi	r31, 0x01	; 1
     808:	10 aa       	std	Z+48, r1	; 0x30
     80a:	80 e4       	ldi	r24, 0x40	; 64
     80c:	80 ab       	std	Z+48, r24	; 0x30
     80e:	94 e0       	ldi	r25, 0x04	; 4
     810:	90 ab       	std	Z+48, r25	; 0x30
     812:	11 aa       	std	Z+49, r1	; 0x31
     814:	12 aa       	std	Z+50, r1	; 0x32
     816:	5b e4       	ldi	r21, 0x4B	; 75
     818:	53 ab       	std	Z+51, r21	; 0x33
     81a:	14 aa       	std	Z+52, r1	; 0x34
     81c:	15 aa       	std	Z+53, r1	; 0x35
     81e:	16 aa       	std	Z+54, r1	; 0x36
     820:	23 e0       	ldi	r18, 0x03	; 3
     822:	30 e2       	ldi	r19, 0x20	; 32
     824:	20 af       	std	Z+56, r18	; 0x38
     826:	31 af       	std	Z+57, r19	; 0x39
     828:	12 ae       	std	Z+58, r1	; 0x3a
     82a:	40 ea       	ldi	r20, 0xA0	; 160
     82c:	44 af       	std	Z+60, r20	; 0x3c
     82e:	38 e0       	ldi	r19, 0x08	; 8
     830:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     834:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     838:	80 a9       	ldd	r24, Z+48	; 0x30
     83a:	80 6a       	ori	r24, 0xA0	; 160
     83c:	80 ab       	std	Z+48, r24	; 0x30
     83e:	85 e5       	ldi	r24, 0x55	; 85
     840:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     844:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     848:	a0 e4       	ldi	r26, 0x40	; 64
     84a:	b1 e0       	ldi	r27, 0x01	; 1
     84c:	d4 e2       	ldi	r29, 0x24	; 36
     84e:	dc 93       	st	X, r29
     850:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     854:	89 e5       	ldi	r24, 0x59	; 89
     856:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     85a:	c2 e0       	ldi	r28, 0x02	; 2
     85c:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     860:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <auxDacBufLen>
     864:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     868:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     86c:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     870:	6a e7       	ldi	r22, 0x7A	; 122
     872:	74 e2       	ldi	r23, 0x24	; 36
     874:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     878:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     87c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     880:	8b e3       	ldi	r24, 0x3B	; 59
     882:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     88c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     890:	2c 91       	ld	r18, X
     892:	20 68       	ori	r18, 0x80	; 128
     894:	2c 93       	st	X, r18
     896:	90 8b       	std	Z+16, r25	; 0x10
     898:	81 8b       	std	Z+17, r24	; 0x11
     89a:	a1 e9       	ldi	r26, 0x91	; 145
     89c:	a2 8b       	std	Z+18, r26	; 0x12
     89e:	20 e1       	ldi	r18, 0x10	; 16
     8a0:	23 8b       	std	Z+19, r18	; 0x13
     8a2:	67 e7       	ldi	r22, 0x77	; 119
     8a4:	71 e0       	ldi	r23, 0x01	; 1
     8a6:	64 8b       	std	Z+20, r22	; 0x14
     8a8:	75 8b       	std	Z+21, r23	; 0x15
     8aa:	d0 8f       	std	Z+24, r29	; 0x18
     8ac:	c1 8f       	std	Z+25, r28	; 0x19
     8ae:	12 8e       	std	Z+26, r1	; 0x1a
     8b0:	ca e7       	ldi	r28, 0x7A	; 122
     8b2:	d6 e2       	ldi	r29, 0x26	; 38
     8b4:	c4 8f       	std	Z+28, r28	; 0x1c
     8b6:	d5 8f       	std	Z+29, r29	; 0x1d
     8b8:	16 8e       	std	Z+30, r1	; 0x1e
     8ba:	20 89       	ldd	r18, Z+16	; 0x10
     8bc:	20 68       	ori	r18, 0x80	; 128
     8be:	20 8b       	std	Z+16, r18	; 0x10
     8c0:	90 a3       	std	Z+32, r25	; 0x20
     8c2:	81 a3       	std	Z+33, r24	; 0x21
     8c4:	a2 a3       	std	Z+34, r26	; 0x22
     8c6:	53 a3       	std	Z+35, r21	; 0x23
     8c8:	64 a3       	std	Z+36, r22	; 0x24
     8ca:	75 a3       	std	Z+37, r23	; 0x25
     8cc:	40 a7       	std	Z+40, r20	; 0x28
     8ce:	31 a7       	std	Z+41, r19	; 0x29
     8d0:	12 a6       	std	Z+42, r1	; 0x2a
     8d2:	81 ef       	ldi	r24, 0xF1	; 241
     8d4:	97 e2       	ldi	r25, 0x27	; 39
     8d6:	84 a7       	std	Z+44, r24	; 0x2c
     8d8:	95 a7       	std	Z+45, r25	; 0x2d
     8da:	16 a6       	std	Z+46, r1	; 0x2e
     8dc:	80 a1       	ldd	r24, Z+32	; 0x20
     8de:	80 68       	ori	r24, 0x80	; 128
     8e0:	80 a3       	std	Z+32, r24	; 0x20
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <tiny_dma_set_mode_2>:
     8e8:	cf 93       	push	r28
     8ea:	f8 94       	cli
     8ec:	c2 e0       	ldi	r28, 0x02	; 2
     8ee:	c0 93 02 20 	sts	0x2002, r28	; 0x802002 <global_mode>
     8f2:	0d df       	rcall	.-486    	; 0x70e <tiny_dma_flush>
     8f4:	e0 e0       	ldi	r30, 0x00	; 0
     8f6:	f1 e0       	ldi	r31, 0x01	; 1
     8f8:	16 aa       	std	Z+54, r1	; 0x36
     8fa:	94 e2       	ldi	r25, 0x24	; 36
     8fc:	90 ab       	std	Z+48, r25	; 0x30
     8fe:	11 aa       	std	Z+49, r1	; 0x31
     900:	39 e5       	ldi	r19, 0x59	; 89
     902:	32 ab       	std	Z+50, r19	; 0x32
     904:	83 e0       	ldi	r24, 0x03	; 3
     906:	83 ab       	std	Z+51, r24	; 0x33
     908:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     90c:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     910:	44 ab       	std	Z+52, r20	; 0x34
     912:	55 ab       	std	Z+53, r21	; 0x35
     914:	4a e6       	ldi	r20, 0x6A	; 106
     916:	52 e2       	ldi	r21, 0x22	; 34
     918:	40 af       	std	Z+56, r20	; 0x38
     91a:	51 af       	std	Z+57, r21	; 0x39
     91c:	12 ae       	std	Z+58, r1	; 0x3a
     91e:	29 e3       	ldi	r18, 0x39	; 57
     920:	24 af       	std	Z+60, r18	; 0x3c
     922:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     926:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     92a:	20 a9       	ldd	r18, Z+48	; 0x30
     92c:	20 68       	ori	r18, 0x80	; 128
     92e:	20 ab       	std	Z+48, r18	; 0x30
     930:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     934:	a0 e4       	ldi	r26, 0x40	; 64
     936:	b1 e0       	ldi	r27, 0x01	; 1
     938:	9c 93       	st	X, r25
     93a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     93e:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     942:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     946:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <auxDacBufLen>
     94a:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     94e:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     952:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     956:	2a e7       	ldi	r18, 0x7A	; 122
     958:	34 e2       	ldi	r19, 0x24	; 36
     95a:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     95e:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     962:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     966:	2b e3       	ldi	r18, 0x3B	; 59
     968:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     96c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     970:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     974:	2c 91       	ld	r18, X
     976:	20 68       	ori	r18, 0x80	; 128
     978:	2c 93       	st	X, r18
     97a:	54 e0       	ldi	r21, 0x04	; 4
     97c:	50 8b       	std	Z+16, r21	; 0x10
     97e:	81 8b       	std	Z+17, r24	; 0x11
     980:	41 e9       	ldi	r20, 0x91	; 145
     982:	42 8b       	std	Z+18, r20	; 0x12
     984:	20 e1       	ldi	r18, 0x10	; 16
     986:	23 8b       	std	Z+19, r18	; 0x13
     988:	27 e7       	ldi	r18, 0x77	; 119
     98a:	31 e0       	ldi	r19, 0x01	; 1
     98c:	24 8b       	std	Z+20, r18	; 0x14
     98e:	35 8b       	std	Z+21, r19	; 0x15
     990:	90 8f       	std	Z+24, r25	; 0x18
     992:	c1 8f       	std	Z+25, r28	; 0x19
     994:	12 8e       	std	Z+26, r1	; 0x1a
     996:	6a e7       	ldi	r22, 0x7A	; 122
     998:	76 e2       	ldi	r23, 0x26	; 38
     99a:	64 8f       	std	Z+28, r22	; 0x1c
     99c:	75 8f       	std	Z+29, r23	; 0x1d
     99e:	16 8e       	std	Z+30, r1	; 0x1e
     9a0:	90 89       	ldd	r25, Z+16	; 0x10
     9a2:	90 68       	ori	r25, 0x80	; 128
     9a4:	90 8b       	std	Z+16, r25	; 0x10
     9a6:	50 a3       	std	Z+32, r21	; 0x20
     9a8:	81 a3       	std	Z+33, r24	; 0x21
     9aa:	42 a3       	std	Z+34, r20	; 0x22
     9ac:	82 e1       	ldi	r24, 0x12	; 18
     9ae:	83 a3       	std	Z+35, r24	; 0x23
     9b0:	24 a3       	std	Z+36, r18	; 0x24
     9b2:	35 a3       	std	Z+37, r19	; 0x25
     9b4:	84 e3       	ldi	r24, 0x34	; 52
     9b6:	80 a7       	std	Z+40, r24	; 0x28
     9b8:	c1 a7       	std	Z+41, r28	; 0x29
     9ba:	12 a6       	std	Z+42, r1	; 0x2a
     9bc:	81 ef       	ldi	r24, 0xF1	; 241
     9be:	97 e2       	ldi	r25, 0x27	; 39
     9c0:	84 a7       	std	Z+44, r24	; 0x2c
     9c2:	95 a7       	std	Z+45, r25	; 0x2d
     9c4:	16 a6       	std	Z+46, r1	; 0x2e
     9c6:	80 a1       	ldd	r24, Z+32	; 0x20
     9c8:	80 68       	ori	r24, 0x80	; 128
     9ca:	80 a3       	std	Z+32, r24	; 0x20
     9cc:	78 94       	sei
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <tiny_dma_set_mode_3>:
     9d2:	cf 93       	push	r28
     9d4:	c3 e0       	ldi	r28, 0x03	; 3
     9d6:	c0 93 02 20 	sts	0x2002, r28	; 0x802002 <global_mode>
     9da:	99 de       	rcall	.-718    	; 0x70e <tiny_dma_flush>
     9dc:	e0 e0       	ldi	r30, 0x00	; 0
     9de:	f1 e0       	ldi	r31, 0x01	; 1
     9e0:	10 a2       	std	Z+32, r1	; 0x20
     9e2:	50 e4       	ldi	r21, 0x40	; 64
     9e4:	50 a3       	std	Z+32, r21	; 0x20
     9e6:	44 e0       	ldi	r20, 0x04	; 4
     9e8:	40 a3       	std	Z+32, r20	; 0x20
     9ea:	11 a2       	std	Z+33, r1	; 0x21
     9ec:	12 a2       	std	Z+34, r1	; 0x22
     9ee:	3b e4       	ldi	r19, 0x4B	; 75
     9f0:	33 a3       	std	Z+35, r19	; 0x23
     9f2:	14 a2       	std	Z+36, r1	; 0x24
     9f4:	15 a2       	std	Z+37, r1	; 0x25
     9f6:	16 a2       	std	Z+38, r1	; 0x26
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	90 e2       	ldi	r25, 0x20	; 32
     9fc:	80 a7       	std	Z+40, r24	; 0x28
     9fe:	91 a7       	std	Z+41, r25	; 0x29
     a00:	12 a6       	std	Z+42, r1	; 0x2a
     a02:	20 ea       	ldi	r18, 0xA0	; 160
     a04:	24 a7       	std	Z+44, r18	; 0x2c
     a06:	98 e0       	ldi	r25, 0x08	; 8
     a08:	95 a7       	std	Z+45, r25	; 0x2d
     a0a:	16 a6       	std	Z+46, r1	; 0x2e
     a0c:	80 a1       	ldd	r24, Z+32	; 0x20
     a0e:	80 6a       	ori	r24, 0xA0	; 160
     a10:	80 a3       	std	Z+32, r24	; 0x20
     a12:	85 e5       	ldi	r24, 0x55	; 85
     a14:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     a18:	16 aa       	std	Z+54, r1	; 0x36
     a1a:	74 e2       	ldi	r23, 0x24	; 36
     a1c:	70 ab       	std	Z+48, r23	; 0x30
     a1e:	11 aa       	std	Z+49, r1	; 0x31
     a20:	69 e5       	ldi	r22, 0x59	; 89
     a22:	62 ab       	std	Z+50, r22	; 0x32
     a24:	c3 ab       	std	Z+51, r28	; 0x33
     a26:	a0 91 06 20 	lds	r26, 0x2006	; 0x802006 <dacBuf_len>
     a2a:	b0 91 07 20 	lds	r27, 0x2007	; 0x802007 <dacBuf_len+0x1>
     a2e:	a4 ab       	std	Z+52, r26	; 0x34
     a30:	b5 ab       	std	Z+53, r27	; 0x35
     a32:	aa e6       	ldi	r26, 0x6A	; 106
     a34:	b2 e2       	ldi	r27, 0x22	; 34
     a36:	a0 af       	std	Z+56, r26	; 0x38
     a38:	b1 af       	std	Z+57, r27	; 0x39
     a3a:	12 ae       	std	Z+58, r1	; 0x3a
     a3c:	89 e3       	ldi	r24, 0x39	; 57
     a3e:	84 af       	std	Z+60, r24	; 0x3c
     a40:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     a44:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     a48:	80 a9       	ldd	r24, Z+48	; 0x30
     a4a:	80 68       	ori	r24, 0x80	; 128
     a4c:	80 ab       	std	Z+48, r24	; 0x30
     a4e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     a52:	a0 e4       	ldi	r26, 0x40	; 64
     a54:	b1 e0       	ldi	r27, 0x01	; 1
     a56:	7c 93       	st	X, r23
     a58:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     a5c:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     a66:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <auxDacBufLen>
     a6a:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     a6e:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a72:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     a76:	6a e7       	ldi	r22, 0x7A	; 122
     a78:	74 e2       	ldi	r23, 0x24	; 36
     a7a:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a7e:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a82:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     a86:	8b e3       	ldi	r24, 0x3B	; 59
     a88:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a8c:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a90:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     a94:	8c 91       	ld	r24, X
     a96:	80 68       	ori	r24, 0x80	; 128
     a98:	8c 93       	st	X, r24
     a9a:	10 8a       	std	Z+16, r1	; 0x10
     a9c:	50 8b       	std	Z+16, r21	; 0x10
     a9e:	40 8b       	std	Z+16, r20	; 0x10
     aa0:	c1 8b       	std	Z+17, r28	; 0x11
     aa2:	81 e9       	ldi	r24, 0x91	; 145
     aa4:	82 8b       	std	Z+18, r24	; 0x12
     aa6:	33 8b       	std	Z+19, r19	; 0x13
     aa8:	47 e7       	ldi	r20, 0x77	; 119
     aaa:	51 e0       	ldi	r21, 0x01	; 1
     aac:	44 8b       	std	Z+20, r20	; 0x14
     aae:	55 8b       	std	Z+21, r21	; 0x15
     ab0:	20 8f       	std	Z+24, r18	; 0x18
     ab2:	91 8f       	std	Z+25, r25	; 0x19
     ab4:	12 8e       	std	Z+26, r1	; 0x1a
     ab6:	8a e7       	ldi	r24, 0x7A	; 122
     ab8:	96 e2       	ldi	r25, 0x26	; 38
     aba:	84 8f       	std	Z+28, r24	; 0x1c
     abc:	95 8f       	std	Z+29, r25	; 0x1d
     abe:	16 8e       	std	Z+30, r1	; 0x1e
     ac0:	80 89       	ldd	r24, Z+16	; 0x10
     ac2:	80 68       	ori	r24, 0x80	; 128
     ac4:	80 8b       	std	Z+16, r24	; 0x10
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <tiny_dma_set_mode_4>:
     aca:	cf 93       	push	r28
     acc:	c4 e0       	ldi	r28, 0x04	; 4
     ace:	c0 93 02 20 	sts	0x2002, r28	; 0x802002 <global_mode>
     ad2:	1d de       	rcall	.-966    	; 0x70e <tiny_dma_flush>
     ad4:	e0 e0       	ldi	r30, 0x00	; 0
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	10 a2       	std	Z+32, r1	; 0x20
     ada:	80 e4       	ldi	r24, 0x40	; 64
     adc:	80 a3       	std	Z+32, r24	; 0x20
     ade:	c0 a3       	std	Z+32, r28	; 0x20
     ae0:	11 a2       	std	Z+33, r1	; 0x21
     ae2:	12 a2       	std	Z+34, r1	; 0x22
     ae4:	4b e4       	ldi	r20, 0x4B	; 75
     ae6:	43 a3       	std	Z+35, r20	; 0x23
     ae8:	14 a2       	std	Z+36, r1	; 0x24
     aea:	15 a2       	std	Z+37, r1	; 0x25
     aec:	16 a2       	std	Z+38, r1	; 0x26
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	90 e2       	ldi	r25, 0x20	; 32
     af2:	80 a7       	std	Z+40, r24	; 0x28
     af4:	91 a7       	std	Z+41, r25	; 0x29
     af6:	12 a6       	std	Z+42, r1	; 0x2a
     af8:	60 ea       	ldi	r22, 0xA0	; 160
     afa:	64 a7       	std	Z+44, r22	; 0x2c
     afc:	88 e0       	ldi	r24, 0x08	; 8
     afe:	85 a7       	std	Z+45, r24	; 0x2d
     b00:	16 a6       	std	Z+46, r1	; 0x2e
     b02:	90 a1       	ldd	r25, Z+32	; 0x20
     b04:	90 6a       	ori	r25, 0xA0	; 160
     b06:	90 a3       	std	Z+32, r25	; 0x20
     b08:	95 e5       	ldi	r25, 0x55	; 85
     b0a:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     b0e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b12:	a0 e4       	ldi	r26, 0x40	; 64
     b14:	b1 e0       	ldi	r27, 0x01	; 1
     b16:	94 e2       	ldi	r25, 0x24	; 36
     b18:	9c 93       	st	X, r25
     b1a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b1e:	99 e5       	ldi	r25, 0x59	; 89
     b20:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b2a:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <auxDacBufLen>
     b2e:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     b32:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b36:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     b3a:	2a e7       	ldi	r18, 0x7A	; 122
     b3c:	34 e2       	ldi	r19, 0x24	; 36
     b3e:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b42:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b46:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b4a:	9b e3       	ldi	r25, 0x3B	; 59
     b4c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b56:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b5a:	2c 91       	ld	r18, X
     b5c:	20 68       	ori	r18, 0x80	; 128
     b5e:	2c 93       	st	X, r18
     b60:	c0 8b       	std	Z+16, r28	; 0x10
     b62:	91 8b       	std	Z+17, r25	; 0x11
     b64:	31 e9       	ldi	r19, 0x91	; 145
     b66:	32 8b       	std	Z+18, r19	; 0x12
     b68:	43 8b       	std	Z+19, r20	; 0x13
     b6a:	47 e7       	ldi	r20, 0x77	; 119
     b6c:	51 e0       	ldi	r21, 0x01	; 1
     b6e:	44 8b       	std	Z+20, r20	; 0x14
     b70:	55 8b       	std	Z+21, r21	; 0x15
     b72:	60 8f       	std	Z+24, r22	; 0x18
     b74:	81 8f       	std	Z+25, r24	; 0x19
     b76:	12 8e       	std	Z+26, r1	; 0x1a
     b78:	6a e7       	ldi	r22, 0x7A	; 122
     b7a:	76 e2       	ldi	r23, 0x26	; 38
     b7c:	64 8f       	std	Z+28, r22	; 0x1c
     b7e:	75 8f       	std	Z+29, r23	; 0x1d
     b80:	16 8e       	std	Z+30, r1	; 0x1e
     b82:	20 89       	ldd	r18, Z+16	; 0x10
     b84:	20 68       	ori	r18, 0x80	; 128
     b86:	20 8b       	std	Z+16, r18	; 0x10
     b88:	c0 ab       	std	Z+48, r28	; 0x30
     b8a:	91 ab       	std	Z+49, r25	; 0x31
     b8c:	32 ab       	std	Z+50, r19	; 0x32
     b8e:	9a e4       	ldi	r25, 0x4A	; 74
     b90:	93 ab       	std	Z+51, r25	; 0x33
     b92:	44 ab       	std	Z+52, r20	; 0x34
     b94:	55 ab       	std	Z+53, r21	; 0x35
     b96:	93 ec       	ldi	r25, 0xC3	; 195
     b98:	90 af       	std	Z+56, r25	; 0x38
     b9a:	81 af       	std	Z+57, r24	; 0x39
     b9c:	12 ae       	std	Z+58, r1	; 0x3a
     b9e:	81 ef       	ldi	r24, 0xF1	; 241
     ba0:	97 e2       	ldi	r25, 0x27	; 39
     ba2:	84 af       	std	Z+60, r24	; 0x3c
     ba4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     ba8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bac:	80 a9       	ldd	r24, Z+48	; 0x30
     bae:	80 68       	ori	r24, 0x80	; 128
     bb0:	80 ab       	std	Z+48, r24	; 0x30
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <tiny_dma_set_mode_5>:
     bb6:	85 e0       	ldi	r24, 0x05	; 5
     bb8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     bbc:	a8 dd       	rcall	.-1200   	; 0x70e <tiny_dma_flush>
     bbe:	e0 e0       	ldi	r30, 0x00	; 0
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	16 aa       	std	Z+54, r1	; 0x36
     bc4:	34 e2       	ldi	r19, 0x24	; 36
     bc6:	30 ab       	std	Z+48, r19	; 0x30
     bc8:	11 aa       	std	Z+49, r1	; 0x31
     bca:	29 e5       	ldi	r18, 0x59	; 89
     bcc:	22 ab       	std	Z+50, r18	; 0x32
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	83 ab       	std	Z+51, r24	; 0x33
     bd2:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     bd6:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     bda:	44 ab       	std	Z+52, r20	; 0x34
     bdc:	55 ab       	std	Z+53, r21	; 0x35
     bde:	4a e6       	ldi	r20, 0x6A	; 106
     be0:	52 e2       	ldi	r21, 0x22	; 34
     be2:	40 af       	std	Z+56, r20	; 0x38
     be4:	51 af       	std	Z+57, r21	; 0x39
     be6:	12 ae       	std	Z+58, r1	; 0x3a
     be8:	99 e3       	ldi	r25, 0x39	; 57
     bea:	94 af       	std	Z+60, r25	; 0x3c
     bec:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     bf0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bf4:	90 a9       	ldd	r25, Z+48	; 0x30
     bf6:	90 68       	ori	r25, 0x80	; 128
     bf8:	90 ab       	std	Z+48, r25	; 0x30
     bfa:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     bfe:	e0 e4       	ldi	r30, 0x40	; 64
     c00:	f1 e0       	ldi	r31, 0x01	; 1
     c02:	30 83       	st	Z, r19
     c04:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c08:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c0c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c10:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <dacBuf_len>
     c14:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <dacBuf_len+0x1>
     c18:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c1c:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c20:	2a e7       	ldi	r18, 0x7A	; 122
     c22:	34 e2       	ldi	r19, 0x24	; 36
     c24:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c28:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c2c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c30:	9b e3       	ldi	r25, 0x3B	; 59
     c32:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c36:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c3a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c3e:	80 81       	ld	r24, Z
     c40:	80 68       	ori	r24, 0x80	; 128
     c42:	80 83       	st	Z, r24
     c44:	08 95       	ret

00000c46 <tiny_dma_set_mode_6>:
     c46:	86 e0       	ldi	r24, 0x06	; 6
     c48:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     c4c:	60 dd       	rcall	.-1344   	; 0x70e <tiny_dma_flush>
     c4e:	e0 e0       	ldi	r30, 0x00	; 0
     c50:	f1 e0       	ldi	r31, 0x01	; 1
     c52:	16 aa       	std	Z+54, r1	; 0x36
     c54:	94 e2       	ldi	r25, 0x24	; 36
     c56:	90 ab       	std	Z+48, r25	; 0x30
     c58:	11 aa       	std	Z+49, r1	; 0x31
     c5a:	39 e5       	ldi	r19, 0x59	; 89
     c5c:	32 ab       	std	Z+50, r19	; 0x32
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	83 ab       	std	Z+51, r24	; 0x33
     c62:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     c66:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     c6a:	44 ab       	std	Z+52, r20	; 0x34
     c6c:	55 ab       	std	Z+53, r21	; 0x35
     c6e:	4a e6       	ldi	r20, 0x6A	; 106
     c70:	52 e2       	ldi	r21, 0x22	; 34
     c72:	40 af       	std	Z+56, r20	; 0x38
     c74:	51 af       	std	Z+57, r21	; 0x39
     c76:	12 ae       	std	Z+58, r1	; 0x3a
     c78:	29 e3       	ldi	r18, 0x39	; 57
     c7a:	24 af       	std	Z+60, r18	; 0x3c
     c7c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c80:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c84:	20 a9       	ldd	r18, Z+48	; 0x30
     c86:	20 68       	ori	r18, 0x80	; 128
     c88:	20 ab       	std	Z+48, r18	; 0x30
     c8a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c8e:	a0 e4       	ldi	r26, 0x40	; 64
     c90:	b1 e0       	ldi	r27, 0x01	; 1
     c92:	9c 93       	st	X, r25
     c94:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c98:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c9c:	32 e0       	ldi	r19, 0x02	; 2
     c9e:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ca2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <auxDacBufLen>
     ca6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     caa:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     cae:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     cb2:	4a e7       	ldi	r20, 0x7A	; 122
     cb4:	54 e2       	ldi	r21, 0x24	; 36
     cb6:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     cba:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     cbe:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     cc2:	2b e3       	ldi	r18, 0x3B	; 59
     cc4:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     cc8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     ccc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     cd0:	2c 91       	ld	r18, X
     cd2:	20 68       	ori	r18, 0x80	; 128
     cd4:	2c 93       	st	X, r18
     cd6:	10 8a       	std	Z+16, r1	; 0x10
     cd8:	20 e4       	ldi	r18, 0x40	; 64
     cda:	20 8b       	std	Z+16, r18	; 0x10
     cdc:	24 e0       	ldi	r18, 0x04	; 4
     cde:	20 8b       	std	Z+16, r18	; 0x10
     ce0:	81 8b       	std	Z+17, r24	; 0x11
     ce2:	81 e9       	ldi	r24, 0x91	; 145
     ce4:	82 8b       	std	Z+18, r24	; 0x12
     ce6:	80 e1       	ldi	r24, 0x10	; 16
     ce8:	83 8b       	std	Z+19, r24	; 0x13
     cea:	4e ee       	ldi	r20, 0xEE	; 238
     cec:	52 e0       	ldi	r21, 0x02	; 2
     cee:	44 8b       	std	Z+20, r20	; 0x14
     cf0:	55 8b       	std	Z+21, r21	; 0x15
     cf2:	90 8f       	std	Z+24, r25	; 0x18
     cf4:	31 8f       	std	Z+25, r19	; 0x19
     cf6:	12 8e       	std	Z+26, r1	; 0x1a
     cf8:	8a e7       	ldi	r24, 0x7A	; 122
     cfa:	96 e2       	ldi	r25, 0x26	; 38
     cfc:	84 8f       	std	Z+28, r24	; 0x1c
     cfe:	95 8f       	std	Z+29, r25	; 0x1d
     d00:	16 8e       	std	Z+30, r1	; 0x1e
     d02:	80 89       	ldd	r24, Z+16	; 0x10
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	80 8b       	std	Z+16, r24	; 0x10
     d08:	08 95       	ret

00000d0a <tiny_dma_set_mode_7>:
     d0a:	87 e0       	ldi	r24, 0x07	; 7
     d0c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     d10:	fe dc       	rcall	.-1540   	; 0x70e <tiny_dma_flush>
     d12:	e0 e0       	ldi	r30, 0x00	; 0
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	16 aa       	std	Z+54, r1	; 0x36
     d18:	94 e2       	ldi	r25, 0x24	; 36
     d1a:	90 ab       	std	Z+48, r25	; 0x30
     d1c:	11 aa       	std	Z+49, r1	; 0x31
     d1e:	39 e5       	ldi	r19, 0x59	; 89
     d20:	32 ab       	std	Z+50, r19	; 0x32
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	83 ab       	std	Z+51, r24	; 0x33
     d26:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     d2a:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     d2e:	44 ab       	std	Z+52, r20	; 0x34
     d30:	55 ab       	std	Z+53, r21	; 0x35
     d32:	4a e6       	ldi	r20, 0x6A	; 106
     d34:	52 e2       	ldi	r21, 0x22	; 34
     d36:	40 af       	std	Z+56, r20	; 0x38
     d38:	51 af       	std	Z+57, r21	; 0x39
     d3a:	12 ae       	std	Z+58, r1	; 0x3a
     d3c:	29 e3       	ldi	r18, 0x39	; 57
     d3e:	24 af       	std	Z+60, r18	; 0x3c
     d40:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     d44:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     d48:	20 a9       	ldd	r18, Z+48	; 0x30
     d4a:	20 68       	ori	r18, 0x80	; 128
     d4c:	20 ab       	std	Z+48, r18	; 0x30
     d4e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     d52:	a0 e4       	ldi	r26, 0x40	; 64
     d54:	b1 e0       	ldi	r27, 0x01	; 1
     d56:	9c 93       	st	X, r25
     d58:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d5c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     d60:	32 e0       	ldi	r19, 0x02	; 2
     d62:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d66:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <auxDacBufLen>
     d6a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     d6e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d72:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     d76:	4a e7       	ldi	r20, 0x7A	; 122
     d78:	54 e2       	ldi	r21, 0x24	; 36
     d7a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d7e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d82:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d86:	2b e3       	ldi	r18, 0x3B	; 59
     d88:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d8c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d90:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d94:	2c 91       	ld	r18, X
     d96:	20 68       	ori	r18, 0x80	; 128
     d98:	2c 93       	st	X, r18
     d9a:	10 8a       	std	Z+16, r1	; 0x10
     d9c:	20 e4       	ldi	r18, 0x40	; 64
     d9e:	20 8b       	std	Z+16, r18	; 0x10
     da0:	25 e0       	ldi	r18, 0x05	; 5
     da2:	20 8b       	std	Z+16, r18	; 0x10
     da4:	81 8b       	std	Z+17, r24	; 0x11
     da6:	81 e9       	ldi	r24, 0x91	; 145
     da8:	82 8b       	std	Z+18, r24	; 0x12
     daa:	80 e1       	ldi	r24, 0x10	; 16
     dac:	83 8b       	std	Z+19, r24	; 0x13
     dae:	4e ee       	ldi	r20, 0xEE	; 238
     db0:	52 e0       	ldi	r21, 0x02	; 2
     db2:	44 8b       	std	Z+20, r20	; 0x14
     db4:	55 8b       	std	Z+21, r21	; 0x15
     db6:	90 8f       	std	Z+24, r25	; 0x18
     db8:	31 8f       	std	Z+25, r19	; 0x19
     dba:	12 8e       	std	Z+26, r1	; 0x1a
     dbc:	8a e7       	ldi	r24, 0x7A	; 122
     dbe:	96 e2       	ldi	r25, 0x26	; 38
     dc0:	84 8f       	std	Z+28, r24	; 0x1c
     dc2:	95 8f       	std	Z+29, r25	; 0x1d
     dc4:	16 8e       	std	Z+30, r1	; 0x1e
     dc6:	80 89       	ldd	r24, Z+16	; 0x10
     dc8:	80 68       	ori	r24, 0x80	; 128
     dca:	80 8b       	std	Z+16, r24	; 0x10
     dcc:	08 95       	ret

00000dce <__vector_6>:
}

ISR(DMA_CH0_vect){
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	af 93       	push	r26
     de4:	bf 93       	push	r27
     de6:	ef 93       	push	r30
     de8:	ff 93       	push	r31
		DMA.INTFLAGS = 0x01;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     df0:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <global_mode>
     df4:	8e 2f       	mov	r24, r30
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	88 30       	cpi	r24, 0x08	; 8
     dfa:	91 05       	cpc	r25, r1
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <__vector_6+0x32>
     dfe:	11 c1       	rjmp	.+546    	; 0x1022 <__vector_6+0x254>
     e00:	fc 01       	movw	r30, r24
     e02:	e2 50       	subi	r30, 0x02	; 2
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__tablejump2__>
			case 0:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     e0a:	e0 e0       	ldi	r30, 0x00	; 0
     e0c:	f1 e0       	ldi	r31, 0x01	; 1
     e0e:	87 e7       	ldi	r24, 0x77	; 119
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	84 8b       	std	Z+20, r24	; 0x14
     e14:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e16:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     e1a:	2e ee       	ldi	r18, 0xEE	; 238
     e1c:	32 e0       	ldi	r19, 0x02	; 2
     e1e:	42 9f       	mul	r20, r18
     e20:	c0 01       	movw	r24, r0
     e22:	43 9f       	mul	r20, r19
     e24:	90 0d       	add	r25, r0
     e26:	11 24       	eor	r1, r1
     e28:	86 58       	subi	r24, 0x86	; 134
     e2a:	99 4d       	sbci	r25, 0xD9	; 217
     e2c:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     e2e:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     e32:	42 9f       	mul	r20, r18
     e34:	c0 01       	movw	r24, r0
     e36:	43 9f       	mul	r20, r19
     e38:	90 0d       	add	r25, r0
     e3a:	11 24       	eor	r1, r1
     e3c:	86 58       	subi	r24, 0x86	; 134
     e3e:	99 4d       	sbci	r25, 0xD9	; 217
     e40:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e42:	80 89       	ldd	r24, Z+16	; 0x10
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e48:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <b1_state>
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	91 11       	cpse	r25, r1
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <b1_state>
			break;
     e56:	e5 c0       	rjmp	.+458    	; 0x1022 <__vector_6+0x254>
			case 1:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     e58:	e0 e0       	ldi	r30, 0x00	; 0
     e5a:	f1 e0       	ldi	r31, 0x01	; 1
     e5c:	87 e7       	ldi	r24, 0x77	; 119
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	84 8b       	std	Z+20, r24	; 0x14
     e62:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e64:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     e68:	2e ee       	ldi	r18, 0xEE	; 238
     e6a:	32 e0       	ldi	r19, 0x02	; 2
     e6c:	42 9f       	mul	r20, r18
     e6e:	c0 01       	movw	r24, r0
     e70:	43 9f       	mul	r20, r19
     e72:	90 0d       	add	r25, r0
     e74:	11 24       	eor	r1, r1
     e76:	86 58       	subi	r24, 0x86	; 134
     e78:	99 4d       	sbci	r25, 0xD9	; 217
     e7a:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     e7c:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     e80:	42 9f       	mul	r20, r18
     e82:	c0 01       	movw	r24, r0
     e84:	43 9f       	mul	r20, r19
     e86:	90 0d       	add	r25, r0
     e88:	11 24       	eor	r1, r1
     e8a:	86 58       	subi	r24, 0x86	; 134
     e8c:	99 4d       	sbci	r25, 0xD9	; 217
     e8e:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e90:	80 89       	ldd	r24, Z+16	; 0x10
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e96:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <b1_state>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	91 11       	cpse	r25, r1
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <b1_state>
			break;
     ea4:	be c0       	rjmp	.+380    	; 0x1022 <__vector_6+0x254>
			case 2:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     ea6:	e0 e0       	ldi	r30, 0x00	; 0
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	87 e7       	ldi	r24, 0x77	; 119
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	84 8b       	std	Z+20, r24	; 0x14
     eb0:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     eb2:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     eb6:	2e ee       	ldi	r18, 0xEE	; 238
     eb8:	32 e0       	ldi	r19, 0x02	; 2
     eba:	42 9f       	mul	r20, r18
     ebc:	c0 01       	movw	r24, r0
     ebe:	43 9f       	mul	r20, r19
     ec0:	90 0d       	add	r25, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	86 58       	subi	r24, 0x86	; 134
     ec6:	99 4d       	sbci	r25, 0xD9	; 217
     ec8:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     eca:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     ece:	42 9f       	mul	r20, r18
     ed0:	c0 01       	movw	r24, r0
     ed2:	43 9f       	mul	r20, r19
     ed4:	90 0d       	add	r25, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	86 58       	subi	r24, 0x86	; 134
     eda:	99 4d       	sbci	r25, 0xD9	; 217
     edc:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ede:	80 89       	ldd	r24, Z+16	; 0x10
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     ee4:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <b1_state>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	91 11       	cpse	r25, r1
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <b1_state>
			break;
     ef2:	97 c0       	rjmp	.+302    	; 0x1022 <__vector_6+0x254>
			case 3:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     ef4:	e0 e0       	ldi	r30, 0x00	; 0
     ef6:	f1 e0       	ldi	r31, 0x01	; 1
     ef8:	87 e7       	ldi	r24, 0x77	; 119
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	84 8b       	std	Z+20, r24	; 0x14
     efe:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     f00:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     f04:	2e ee       	ldi	r18, 0xEE	; 238
     f06:	32 e0       	ldi	r19, 0x02	; 2
     f08:	42 9f       	mul	r20, r18
     f0a:	c0 01       	movw	r24, r0
     f0c:	43 9f       	mul	r20, r19
     f0e:	90 0d       	add	r25, r0
     f10:	11 24       	eor	r1, r1
     f12:	86 58       	subi	r24, 0x86	; 134
     f14:	99 4d       	sbci	r25, 0xD9	; 217
     f16:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     f18:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     f1c:	42 9f       	mul	r20, r18
     f1e:	c0 01       	movw	r24, r0
     f20:	43 9f       	mul	r20, r19
     f22:	90 0d       	add	r25, r0
     f24:	11 24       	eor	r1, r1
     f26:	86 58       	subi	r24, 0x86	; 134
     f28:	99 4d       	sbci	r25, 0xD9	; 217
     f2a:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     f2c:	80 89       	ldd	r24, Z+16	; 0x10
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     f32:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <b1_state>
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	91 11       	cpse	r25, r1
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <b1_state>
			break;
     f40:	70 c0       	rjmp	.+224    	; 0x1022 <__vector_6+0x254>
			case 4:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     f42:	e0 e0       	ldi	r30, 0x00	; 0
     f44:	f1 e0       	ldi	r31, 0x01	; 1
     f46:	87 e7       	ldi	r24, 0x77	; 119
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	84 8b       	std	Z+20, r24	; 0x14
     f4c:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     f4e:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     f52:	2e ee       	ldi	r18, 0xEE	; 238
     f54:	32 e0       	ldi	r19, 0x02	; 2
     f56:	42 9f       	mul	r20, r18
     f58:	c0 01       	movw	r24, r0
     f5a:	43 9f       	mul	r20, r19
     f5c:	90 0d       	add	r25, r0
     f5e:	11 24       	eor	r1, r1
     f60:	86 58       	subi	r24, 0x86	; 134
     f62:	99 4d       	sbci	r25, 0xD9	; 217
     f64:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     f66:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     f6a:	42 9f       	mul	r20, r18
     f6c:	c0 01       	movw	r24, r0
     f6e:	43 9f       	mul	r20, r19
     f70:	90 0d       	add	r25, r0
     f72:	11 24       	eor	r1, r1
     f74:	86 58       	subi	r24, 0x86	; 134
     f76:	99 4d       	sbci	r25, 0xD9	; 217
     f78:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     f7a:	80 89       	ldd	r24, Z+16	; 0x10
     f7c:	80 68       	ori	r24, 0x80	; 128
     f7e:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     f80:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <b1_state>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	91 11       	cpse	r25, r1
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <b1_state>
			break;
     f8e:	49 c0       	rjmp	.+146    	; 0x1022 <__vector_6+0x254>
			case 6:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     f90:	e0 e0       	ldi	r30, 0x00	; 0
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	2e ee       	ldi	r18, 0xEE	; 238
     f96:	32 e0       	ldi	r19, 0x02	; 2
     f98:	24 8b       	std	Z+20, r18	; 0x14
     f9a:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     f9c:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     fa0:	42 9f       	mul	r20, r18
     fa2:	c0 01       	movw	r24, r0
     fa4:	43 9f       	mul	r20, r19
     fa6:	90 0d       	add	r25, r0
     fa8:	11 24       	eor	r1, r1
     faa:	86 58       	subi	r24, 0x86	; 134
     fac:	99 4d       	sbci	r25, 0xD9	; 217
     fae:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     fb0:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     fb4:	42 9f       	mul	r20, r18
     fb6:	c0 01       	movw	r24, r0
     fb8:	43 9f       	mul	r20, r19
     fba:	90 0d       	add	r25, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	86 58       	subi	r24, 0x86	; 134
     fc0:	99 4d       	sbci	r25, 0xD9	; 217
     fc2:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     fc4:	80 89       	ldd	r24, Z+16	; 0x10
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     fca:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <b1_state>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	91 11       	cpse	r25, r1
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <b1_state>
			break;
     fd8:	24 c0       	rjmp	.+72     	; 0x1022 <__vector_6+0x254>
			case 7:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     fda:	e0 e0       	ldi	r30, 0x00	; 0
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
     fde:	2e ee       	ldi	r18, 0xEE	; 238
     fe0:	32 e0       	ldi	r19, 0x02	; 2
     fe2:	24 8b       	std	Z+20, r18	; 0x14
     fe4:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     fe6:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     fea:	42 9f       	mul	r20, r18
     fec:	c0 01       	movw	r24, r0
     fee:	43 9f       	mul	r20, r19
     ff0:	90 0d       	add	r25, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	86 58       	subi	r24, 0x86	; 134
     ff6:	99 4d       	sbci	r25, 0xD9	; 217
     ff8:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     ffa:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <b1_state>
     ffe:	42 9f       	mul	r20, r18
    1000:	c0 01       	movw	r24, r0
    1002:	43 9f       	mul	r20, r19
    1004:	90 0d       	add	r25, r0
    1006:	11 24       	eor	r1, r1
    1008:	86 58       	subi	r24, 0x86	; 134
    100a:	99 4d       	sbci	r25, 0xD9	; 217
    100c:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    100e:	80 89       	ldd	r24, Z+16	; 0x10
    1010:	80 68       	ori	r24, 0x80	; 128
    1012:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
    1014:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <b1_state>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	91 11       	cpse	r25, r1
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <b1_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	bf 91       	pop	r27
    1028:	af 91       	pop	r26
    102a:	9f 91       	pop	r25
    102c:	8f 91       	pop	r24
    102e:	4f 91       	pop	r20
    1030:	3f 91       	pop	r19
    1032:	2f 91       	pop	r18
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <__vector_7>:

ISR(DMA_CH1_vect){
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
		DMA.INTFLAGS = 0x02;
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
    105c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <global_mode>
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	19 f0       	breq	.+6      	; 0x106a <__vector_7+0x2c>
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	41 f1       	breq	.+80     	; 0x10b8 <__vector_7+0x7a>
    1068:	4d c0       	rjmp	.+154    	; 0x1104 <__vector_7+0xc6>
			case 0:
			////////////////////////////////////////
			break;
			case 1:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
    106a:	e0 e0       	ldi	r30, 0x00	; 0
    106c:	f1 e0       	ldi	r31, 0x01	; 1
    106e:	87 e7       	ldi	r24, 0x77	; 119
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	84 a3       	std	Z+36, r24	; 0x24
    1074:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    1076:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <b2_state>
    107a:	2e ee       	ldi	r18, 0xEE	; 238
    107c:	32 e0       	ldi	r19, 0x02	; 2
    107e:	42 9f       	mul	r20, r18
    1080:	c0 01       	movw	r24, r0
    1082:	43 9f       	mul	r20, r19
    1084:	90 0d       	add	r25, r0
    1086:	11 24       	eor	r1, r1
    1088:	8f 50       	subi	r24, 0x0F	; 15
    108a:	98 4d       	sbci	r25, 0xD8	; 216
    108c:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
    108e:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <b2_state>
    1092:	42 9f       	mul	r20, r18
    1094:	c0 01       	movw	r24, r0
    1096:	43 9f       	mul	r20, r19
    1098:	90 0d       	add	r25, r0
    109a:	11 24       	eor	r1, r1
    109c:	8f 50       	subi	r24, 0x0F	; 15
    109e:	98 4d       	sbci	r25, 0xD8	; 216
    10a0:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    10a2:	80 a1       	ldd	r24, Z+32	; 0x20
    10a4:	80 68       	ori	r24, 0x80	; 128
    10a6:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
    10a8:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <b2_state>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	91 11       	cpse	r25, r1
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <b2_state>
			break;
    10b6:	26 c0       	rjmp	.+76     	; 0x1104 <__vector_7+0xc6>
			case 2:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
    10b8:	e0 e0       	ldi	r30, 0x00	; 0
    10ba:	f1 e0       	ldi	r31, 0x01	; 1
    10bc:	87 e7       	ldi	r24, 0x77	; 119
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	84 a3       	std	Z+36, r24	; 0x24
    10c2:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    10c4:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <b2_state>
    10c8:	2e ee       	ldi	r18, 0xEE	; 238
    10ca:	32 e0       	ldi	r19, 0x02	; 2
    10cc:	42 9f       	mul	r20, r18
    10ce:	c0 01       	movw	r24, r0
    10d0:	43 9f       	mul	r20, r19
    10d2:	90 0d       	add	r25, r0
    10d4:	11 24       	eor	r1, r1
    10d6:	8f 50       	subi	r24, 0x0F	; 15
    10d8:	98 4d       	sbci	r25, 0xD8	; 216
    10da:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
    10dc:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <b2_state>
    10e0:	42 9f       	mul	r20, r18
    10e2:	c0 01       	movw	r24, r0
    10e4:	43 9f       	mul	r20, r19
    10e6:	90 0d       	add	r25, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	8f 50       	subi	r24, 0x0F	; 15
    10ec:	98 4d       	sbci	r25, 0xD8	; 216
    10ee:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    10f0:	80 a1       	ldd	r24, Z+32	; 0x20
    10f2:	80 68       	ori	r24, 0x80	; 128
    10f4:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
    10f6:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <b2_state>
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	91 11       	cpse	r25, r1
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <b2_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	9f 91       	pop	r25
    110a:	8f 91       	pop	r24
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <__vector_8>:
ISR(DMA_CH2_vect){
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	2f 93       	push	r18
    1128:	3f 93       	push	r19
    112a:	4f 93       	push	r20
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
	DMA.INTFLAGS = 0x04;
    1134:	e0 e0       	ldi	r30, 0x00	; 0
    1136:	f1 e0       	ldi	r31, 0x01	; 1
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	83 83       	std	Z+3, r24	; 0x03
	DMA.CH2.TRFCNT = HALFPACKET_SIZE;		
    113c:	87 e7       	ldi	r24, 0x77	; 119
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	84 ab       	std	Z+52, r24	; 0x34
    1142:	95 ab       	std	Z+53, r25	; 0x35
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    1144:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <b2_state>
    1148:	2e ee       	ldi	r18, 0xEE	; 238
    114a:	32 e0       	ldi	r19, 0x02	; 2
    114c:	42 9f       	mul	r20, r18
    114e:	c0 01       	movw	r24, r0
    1150:	43 9f       	mul	r20, r19
    1152:	90 0d       	add	r25, r0
    1154:	11 24       	eor	r1, r1
    1156:	8f 50       	subi	r24, 0x0F	; 15
    1158:	98 4d       	sbci	r25, 0xD8	; 216
    115a:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;	
    115c:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <b2_state>
    1160:	42 9f       	mul	r20, r18
    1162:	c0 01       	movw	r24, r0
    1164:	43 9f       	mul	r20, r19
    1166:	90 0d       	add	r25, r0
    1168:	11 24       	eor	r1, r1
    116a:	8f 50       	subi	r24, 0x0F	; 15
    116c:	98 4d       	sbci	r25, 0xD8	; 216
    116e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    1172:	80 a9       	ldd	r24, Z+48	; 0x30
    1174:	80 68       	ori	r24, 0x80	; 128
    1176:	80 ab       	std	Z+48, r24	; 0x30
	b2_state = !b2_state;
    1178:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <b2_state>
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	91 11       	cpse	r25, r1
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <b2_state>
}
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	9f 91       	pop	r25
    118c:	8f 91       	pop	r24
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <__vector_9>:

ISR(DMA_CH3_vect){
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	4f 93       	push	r20
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
	DMA.INTFLAGS = 0x08;
    11b6:	88 e0       	ldi	r24, 0x08	; 8
    11b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	DMA.CH3.TRFCNT = HALFPACKET_SIZE;
    11bc:	87 e7       	ldi	r24, 0x77	; 119
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    11c4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    11c8:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <b2_state>
    11cc:	2e ee       	ldi	r18, 0xEE	; 238
    11ce:	32 e0       	ldi	r19, 0x02	; 2
    11d0:	42 9f       	mul	r20, r18
    11d2:	c0 01       	movw	r24, r0
    11d4:	43 9f       	mul	r20, r19
    11d6:	90 0d       	add	r25, r0
    11d8:	11 24       	eor	r1, r1
    11da:	8f 50       	subi	r24, 0x0F	; 15
    11dc:	98 4d       	sbci	r25, 0xD8	; 216
    11de:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
    11e2:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <b2_state>
    11e6:	42 9f       	mul	r20, r18
    11e8:	c0 01       	movw	r24, r0
    11ea:	43 9f       	mul	r20, r19
    11ec:	90 0d       	add	r25, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	8f 50       	subi	r24, 0x0F	; 15
    11f2:	98 4d       	sbci	r25, 0xD8	; 216
    11f4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    11f8:	e0 e4       	ldi	r30, 0x40	; 64
    11fa:	f1 e0       	ldi	r31, 0x01	; 1
    11fc:	80 81       	ld	r24, Z
    11fe:	80 68       	ori	r24, 0x80	; 128
    1200:	80 83       	st	Z, r24
	b2_state = !b2_state;
    1202:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <b2_state>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	91 11       	cpse	r25, r1
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <b2_state>
}
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    1228:	e0 e7       	ldi	r30, 0x70	; 112
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	83 81       	ldd	r24, Z+3	; 0x03
    122e:	8c 7f       	andi	r24, 0xFC	; 252
    1230:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    1232:	84 81       	ldd	r24, Z+4	; 0x04
    1234:	8c 7f       	andi	r24, 0xFC	; 252
    1236:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1238:	80 81       	ld	r24, Z
    123a:	8d 7f       	andi	r24, 0xFD	; 253
    123c:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    123e:	e0 e8       	ldi	r30, 0x80	; 128
    1240:	f1 e0       	ldi	r31, 0x01	; 1
    1242:	80 ec       	ldi	r24, 0xC0	; 192
    1244:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1246:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1248:	88 ec       	ldi	r24, 0xC8	; 200
    124a:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    124c:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    124e:	a0 e0       	ldi	r26, 0x00	; 0
    1250:	b8 e0       	ldi	r27, 0x08	; 8
    1252:	34 e0       	ldi	r19, 0x04	; 4
    1254:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1256:	23 e0       	ldi	r18, 0x03	; 3
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	2c 93       	st	X, r18
    125c:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    125e:	14 96       	adiw	r26, 0x04	; 4
    1260:	1c 92       	st	X, r1
    1262:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1264:	85 ed       	ldi	r24, 0xD5	; 213
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	96 96       	adiw	r26, 0x26	; 38
    126a:	8d 93       	st	X+, r24
    126c:	9c 93       	st	X, r25
    126e:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    1270:	16 96       	adiw	r26, 0x06	; 6
    1272:	1c 92       	st	X, r1
    1274:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1276:	e0 e4       	ldi	r30, 0x40	; 64
    1278:	f8 e0       	ldi	r31, 0x08	; 8
    127a:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    127c:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    127e:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    1280:	86 a3       	std	Z+38, r24	; 0x26
    1282:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    1284:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    1286:	e0 e6       	ldi	r30, 0x60	; 96
    1288:	f6 e0       	ldi	r31, 0x06	; 6
    128a:	80 81       	ld	r24, Z
    128c:	80 61       	ori	r24, 0x10	; 16
    128e:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    1290:	e0 e4       	ldi	r30, 0x40	; 64
    1292:	f9 e0       	ldi	r31, 0x09	; 9
    1294:	83 e1       	ldi	r24, 0x13	; 19
    1296:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    1298:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    129e:	a6 a3       	std	Z+38, r26	; 0x26
    12a0:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    12a2:	10 a6       	std	Z+40, r1	; 0x28
    12a4:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 83       	st	Z, r24
    12aa:	08 95       	ret

000012ac <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	8f 93       	push	r24
    12c0:	9f 93       	push	r25
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	1f 92       	push	r1
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    12d6:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <global_mode>
    12da:	87 30       	cpi	r24, 0x07	; 7
    12dc:	31 f4       	brne	.+12     	; 0x12ea <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    12de:	e0 e0       	ldi	r30, 0x00	; 0
    12e0:	f2 e0       	ldi	r31, 0x02	; 2
    12e2:	84 a5       	ldd	r24, Z+44	; 0x2c
    12e4:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    12e6:	95 a5       	ldd	r25, Z+45	; 0x2d
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    12ea:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    12ee:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <PSU_target>
    12f2:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    12f4:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12f8:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	0c f4       	brge	.+2      	; 0x1304 <__vector_83+0x58>
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	99 23       	and	r25, r25
    1306:	c9 f0       	breq	.+50     	; 0x133a <__vector_83+0x8e>
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	2a 3f       	cpi	r18, 0xFA	; 250
    130c:	37 40       	sbci	r19, 0x07	; 7
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__vector_83+0x66>
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	99 23       	and	r25, r25
    1314:	91 f0       	breq	.+36     	; 0x133a <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    1316:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    131a:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    131e:	89 30       	cpi	r24, 0x09	; 9
    1320:	1c f4       	brge	.+6      	; 0x1328 <__vector_83+0x7c>
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 c0       	rjmp	.+4      	; 0x132c <__vector_83+0x80>
    1328:	86 e0       	ldi	r24, 0x06	; 6
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	82 0f       	add	r24, r18
    132e:	93 1f       	adc	r25, r19
    1330:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1334:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1338:	23 c0       	rjmp	.+70     	; 0x1380 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    133a:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    133e:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	8f 3f       	cpi	r24, 0xFF	; 255
    1346:	0c f0       	brlt	.+2      	; 0x134a <__vector_83+0x9e>
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	99 23       	and	r25, r25
    134c:	c9 f0       	breq	.+50     	; 0x1380 <__vector_83+0xd4>
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	27 30       	cpi	r18, 0x07	; 7
    1352:	31 05       	cpc	r19, r1
    1354:	08 f4       	brcc	.+2      	; 0x1358 <__vector_83+0xac>
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	99 23       	and	r25, r25
    135a:	91 f0       	breq	.+36     	; 0x1380 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    135c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1360:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1364:	88 3f       	cpi	r24, 0xF8	; 248
    1366:	1c f0       	brlt	.+6      	; 0x136e <__vector_83+0xc2>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <__vector_83+0xc6>
    136e:	86 e0       	ldi	r24, 0x06	; 6
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a9 01       	movw	r20, r18
    1374:	48 1b       	sub	r20, r24
    1376:	59 0b       	sbc	r21, r25
    1378:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    137c:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    1380:	0f 90       	pop	r0
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	ff 91       	pop	r31
    1388:	ef 91       	pop	r30
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	5f 91       	pop	r21
    1390:	4f 91       	pop	r20
    1392:	3f 91       	pop	r19
    1394:	2f 91       	pop	r18
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

000013a0 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    13a0:	e0 e7       	ldi	r30, 0x70	; 112
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	83 81       	ldd	r24, Z+3	; 0x03
    13a6:	8f 7e       	andi	r24, 0xEF	; 239
    13a8:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    13aa:	e0 e4       	ldi	r30, 0x40	; 64
    13ac:	f6 e0       	ldi	r31, 0x06	; 6
    13ae:	80 81       	ld	r24, Z
    13b0:	8a 6a       	ori	r24, 0xAA	; 170
    13b2:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    13b8:	88 e5       	ldi	r24, 0x58	; 88
    13ba:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    13bc:	e0 ea       	ldi	r30, 0xA0	; 160
    13be:	f8 e0       	ldi	r31, 0x08	; 8
    13c0:	84 ec       	ldi	r24, 0xC4	; 196
    13c2:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    13c8:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    13ca:	88 e1       	ldi	r24, 0x18	; 24
    13cc:	84 83       	std	Z+4, r24	; 0x04
    13ce:	08 95       	ret

000013d0 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    13d0:	e0 e7       	ldi	r30, 0x70	; 112
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	83 81       	ldd	r24, Z+3	; 0x03
    13d6:	87 7f       	andi	r24, 0xF7	; 247
    13d8:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    13da:	e0 ec       	ldi	r30, 0xC0	; 192
    13dc:	f8 e0       	ldi	r31, 0x08	; 8
    13de:	80 e4       	ldi	r24, 0x40	; 64
    13e0:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    13e2:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    13e4:	88 e5       	ldi	r24, 0x58	; 88
    13e6:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    13ea:	08 95       	ret

000013ec <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    13ec:	1f 92       	push	r1
    13ee:	0f 92       	push	r0
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	0f 92       	push	r0
    13f4:	11 24       	eor	r1, r1
	asm("nop");
    13f6:	00 00       	nop
}
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	0f 90       	pop	r0
    13fe:	1f 90       	pop	r1
    1400:	18 95       	reti

00001402 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1402:	9f b7       	in	r25, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	e8 2f       	mov	r30, r24
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	e0 59       	subi	r30, 0x90	; 144
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	60 95       	com	r22
    1410:	80 81       	ld	r24, Z
    1412:	68 23       	and	r22, r24
    1414:	60 83       	st	Z, r22
    1416:	9f bf       	out	0x3f, r25	; 63
    1418:	08 95       	ret

0000141a <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    141a:	86 30       	cpi	r24, 0x06	; 6
    141c:	11 f0       	breq	.+4      	; 0x1422 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1422:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1424:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1428:	81 fd       	sbrc	r24, 1
    142a:	26 c0       	rjmp	.+76     	; 0x1478 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    142c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    142e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1430:	e0 e5       	ldi	r30, 0x50	; 80
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	82 60       	ori	r24, 0x02	; 2
    1438:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    143a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    143c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    143e:	81 ff       	sbrs	r24, 1
    1440:	fd cf       	rjmp	.-6      	; 0x143c <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1442:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1444:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1446:	a0 e5       	ldi	r26, 0x50	; 80
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	16 96       	adiw	r26, 0x06	; 6
    144c:	8c 91       	ld	r24, X
    144e:	16 97       	sbiw	r26, 0x06	; 6
    1450:	89 7f       	andi	r24, 0xF9	; 249
    1452:	16 96       	adiw	r26, 0x06	; 6
    1454:	8c 93       	st	X, r24
    1456:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1458:	e0 e6       	ldi	r30, 0x60	; 96
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 e8       	ldi	r24, 0x80	; 128
    145e:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1460:	8b eb       	ldi	r24, 0xBB	; 187
    1462:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1464:	16 96       	adiw	r26, 0x06	; 6
    1466:	8c 91       	ld	r24, X
    1468:	16 97       	sbiw	r26, 0x06	; 6
    146a:	84 60       	ori	r24, 0x04	; 4
    146c:	16 96       	adiw	r26, 0x06	; 6
    146e:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1470:	80 81       	ld	r24, Z
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1476:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1478:	63 60       	ori	r22, 0x03	; 3
    147a:	84 e4       	ldi	r24, 0x44	; 68
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	2d d5       	rcall	.+2650   	; 0x1eda <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1480:	60 e4       	ldi	r22, 0x40	; 64
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	be cf       	rjmp	.-132    	; 0x1402 <sysclk_enable_module>
    1486:	08 95       	ret

00001488 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1488:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <udi_vendor_alternate_setting>
    148c:	08 95       	ret

0000148e <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    148e:	40 d1       	rcall	.+640    	; 0x1710 <udc_get_interface_desc>
    1490:	fc 01       	movw	r30, r24
    1492:	83 81       	ldd	r24, Z+3	; 0x03
    1494:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    1498:	81 11       	cpse	r24, r1
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    149c:	79 c8       	rjmp	.-3854   	; 0x590 <main_vendor_enable>
    149e:	08 95       	ret
			return false;
		}
	}
	return true;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
}
    14a2:	08 95       	ret

000014a4 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    14a4:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <udi_vendor_alternate_setting>
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    14ac:	8d c8       	rjmp	.-3814   	; 0x5c8 <main_vendor_disable>
    14ae:	08 95       	ret

000014b0 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    14b0:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
    14b4:	88 23       	and	r24, r24
    14b6:	4c f4       	brge	.+18     	; 0x14ca <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    14b8:	80 76       	andi	r24, 0x60	; 96
    14ba:	80 34       	cpi	r24, 0x40	; 64
    14bc:	a9 f4       	brne	.+42     	; 0x14e8 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    14be:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    14c2:	81 11       	cpse	r24, r1
    14c4:	13 c0       	rjmp	.+38     	; 0x14ec <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    14c6:	85 c8       	rjmp	.-3830   	; 0x5d2 <main_setup_in_received>
    14c8:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    14ca:	80 76       	andi	r24, 0x60	; 96
    14cc:	80 34       	cpi	r24, 0x40	; 64
    14ce:	81 f4       	brne	.+32     	; 0x14f0 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    14d0:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    14d4:	81 11       	cpse	r24, r1
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    14d8:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    14dc:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    14e0:	89 2b       	or	r24, r25
    14e2:	51 f0       	breq	.+20     	; 0x14f8 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    14e4:	74 c8       	rjmp	.-3864   	; 0x5ce <main_setup_out_received>
    14e6:	08 95       	ret
		}
	}
	return false; // Not supported request
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	08 95       	ret
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	08 95       	ret
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	08 95       	ret
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	08 95       	ret
    14f8:	80 e0       	ldi	r24, 0x00	; 0
}
    14fa:	08 95       	ret

000014fc <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    1502:	8a 01       	movw	r16, r20
    1504:	ac 01       	movw	r20, r24
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	81 e8       	ldi	r24, 0x81	; 129
    150a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    151a:	8a 01       	movw	r16, r20
    151c:	ac 01       	movw	r20, r24
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	82 e8       	ldi	r24, 0x82	; 130
    1522:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	08 95       	ret

0000152c <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    1532:	8a 01       	movw	r16, r20
    1534:	ac 01       	movw	r20, r24
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	83 e8       	ldi	r24, 0x83	; 131
    153a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	08 95       	ret

00001544 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1544:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1548:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    154c:	01 90       	ld	r0, Z+
    154e:	f0 81       	ld	r31, Z
    1550:	e0 2d       	mov	r30, r0
    1552:	22 81       	ldd	r18, Z+2	; 0x02
    1554:	33 81       	ldd	r19, Z+3	; 0x03
    1556:	2e 0f       	add	r18, r30
    1558:	3f 1f       	adc	r19, r31
    155a:	fc 01       	movw	r30, r24
    155c:	40 81       	ld	r20, Z
    155e:	e4 0f       	add	r30, r20
    1560:	f1 1d       	adc	r31, r1
    1562:	e2 17       	cp	r30, r18
    1564:	f3 07       	cpc	r31, r19
    1566:	b8 f4       	brcc	.+46     	; 0x1596 <udc_next_desc_in_iface+0x52>
    1568:	81 81       	ldd	r24, Z+1	; 0x01
    156a:	84 30       	cpi	r24, 0x04	; 4
    156c:	b9 f0       	breq	.+46     	; 0x159c <udc_next_desc_in_iface+0x58>
    156e:	86 13       	cpse	r24, r22
    1570:	09 c0       	rjmp	.+18     	; 0x1584 <udc_next_desc_in_iface+0x40>
    1572:	05 c0       	rjmp	.+10     	; 0x157e <udc_next_desc_in_iface+0x3a>
    1574:	81 81       	ldd	r24, Z+1	; 0x01
    1576:	84 30       	cpi	r24, 0x04	; 4
    1578:	a1 f0       	breq	.+40     	; 0x15a2 <udc_next_desc_in_iface+0x5e>
    157a:	86 13       	cpse	r24, r22
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <udc_next_desc_in_iface+0x40>
    157e:	8e 2f       	mov	r24, r30
    1580:	9f 2f       	mov	r25, r31
    1582:	08 95       	ret
    1584:	80 81       	ld	r24, Z
    1586:	e8 0f       	add	r30, r24
    1588:	f1 1d       	adc	r31, r1
    158a:	e2 17       	cp	r30, r18
    158c:	f3 07       	cpc	r31, r19
    158e:	90 f3       	brcs	.-28     	; 0x1574 <udc_next_desc_in_iface+0x30>
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	08 95       	ret
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	08 95       	ret
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	08 95       	ret
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	08 95       	ret

000015a8 <udc_valid_address>:
    15a8:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	0c 94 0f 13 	jmp	0x261e	; 0x261e <udd_set_address>
    15b2:	08 95       	ret

000015b4 <udc_update_iface_desc>:
    15b4:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <udc_num_configuration>
    15b8:	99 23       	and	r25, r25
    15ba:	81 f1       	breq	.+96     	; 0x161c <udc_update_iface_desc+0x68>
    15bc:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    15c0:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    15c4:	01 90       	ld	r0, Z+
    15c6:	f0 81       	ld	r31, Z
    15c8:	e0 2d       	mov	r30, r0
    15ca:	94 81       	ldd	r25, Z+4	; 0x04
    15cc:	89 17       	cp	r24, r25
    15ce:	40 f5       	brcc	.+80     	; 0x1620 <udc_update_iface_desc+0x6c>
    15d0:	e0 93 c6 20 	sts	0x20C6, r30	; 0x8020c6 <udc_ptr_iface>
    15d4:	f0 93 c7 20 	sts	0x20C7, r31	; 0x8020c7 <udc_ptr_iface+0x1>
    15d8:	22 81       	ldd	r18, Z+2	; 0x02
    15da:	33 81       	ldd	r19, Z+3	; 0x03
    15dc:	2e 0f       	add	r18, r30
    15de:	3f 1f       	adc	r19, r31
    15e0:	e2 17       	cp	r30, r18
    15e2:	f3 07       	cpc	r31, r19
    15e4:	f8 f4       	brcc	.+62     	; 0x1624 <udc_update_iface_desc+0x70>
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	94 30       	cpi	r25, 0x04	; 4
    15ea:	61 f4       	brne	.+24     	; 0x1604 <udc_update_iface_desc+0x50>
    15ec:	92 81       	ldd	r25, Z+2	; 0x02
    15ee:	98 13       	cpse	r25, r24
    15f0:	09 c0       	rjmp	.+18     	; 0x1604 <udc_update_iface_desc+0x50>
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	96 13       	cpse	r25, r22
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <udc_update_iface_desc+0x50>
    15f8:	e0 93 c6 20 	sts	0x20C6, r30	; 0x8020c6 <udc_ptr_iface>
    15fc:	f0 93 c7 20 	sts	0x20C7, r31	; 0x8020c7 <udc_ptr_iface+0x1>
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	08 95       	ret
    1604:	90 81       	ld	r25, Z
    1606:	e9 0f       	add	r30, r25
    1608:	f1 1d       	adc	r31, r1
    160a:	e2 17       	cp	r30, r18
    160c:	f3 07       	cpc	r31, r19
    160e:	58 f3       	brcs	.-42     	; 0x15e6 <udc_update_iface_desc+0x32>
    1610:	e0 93 c6 20 	sts	0x20C6, r30	; 0x8020c6 <udc_ptr_iface>
    1614:	f0 93 c7 20 	sts	0x20C7, r31	; 0x8020c7 <udc_ptr_iface+0x1>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	08 95       	ret
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	08 95       	ret
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	08 95       	ret
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	08 95       	ret

00001628 <udc_iface_disable>:
    1628:	ef 92       	push	r14
    162a:	ff 92       	push	r15
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	c8 2f       	mov	r28, r24
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	be df       	rcall	.-132    	; 0x15b4 <udc_update_iface_desc>
    1638:	18 2f       	mov	r17, r24
    163a:	88 23       	and	r24, r24
    163c:	81 f1       	breq	.+96     	; 0x169e <udc_iface_disable+0x76>
    163e:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1642:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1646:	ec 2f       	mov	r30, r28
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	12 96       	adiw	r26, 0x02	; 2
    1650:	8d 91       	ld	r24, X+
    1652:	9c 91       	ld	r25, X
    1654:	13 97       	sbiw	r26, 0x03	; 3
    1656:	e8 0f       	add	r30, r24
    1658:	f9 1f       	adc	r31, r25
    165a:	e0 80       	ld	r14, Z
    165c:	f1 80       	ldd	r15, Z+1	; 0x01
    165e:	d7 01       	movw	r26, r14
    1660:	16 96       	adiw	r26, 0x06	; 6
    1662:	ed 91       	ld	r30, X+
    1664:	fc 91       	ld	r31, X
    1666:	17 97       	sbiw	r26, 0x07	; 7
    1668:	09 95       	icall
    166a:	68 2f       	mov	r22, r24
    166c:	8c 2f       	mov	r24, r28
    166e:	a2 df       	rcall	.-188    	; 0x15b4 <udc_update_iface_desc>
    1670:	18 2f       	mov	r17, r24
    1672:	88 23       	and	r24, r24
    1674:	a1 f0       	breq	.+40     	; 0x169e <udc_iface_disable+0x76>
    1676:	c0 91 c6 20 	lds	r28, 0x20C6	; 0x8020c6 <udc_ptr_iface>
    167a:	d0 91 c7 20 	lds	r29, 0x20C7	; 0x8020c7 <udc_ptr_iface+0x1>
    167e:	65 e0       	ldi	r22, 0x05	; 5
    1680:	ce 01       	movw	r24, r28
    1682:	60 df       	rcall	.-320    	; 0x1544 <udc_next_desc_in_iface>
    1684:	ec 01       	movw	r28, r24
    1686:	89 2b       	or	r24, r25
    1688:	21 f0       	breq	.+8      	; 0x1692 <udc_iface_disable+0x6a>
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <udd_ep_free>
    1690:	f6 cf       	rjmp	.-20     	; 0x167e <udc_iface_disable+0x56>
    1692:	d7 01       	movw	r26, r14
    1694:	12 96       	adiw	r26, 0x02	; 2
    1696:	ed 91       	ld	r30, X+
    1698:	fc 91       	ld	r31, X
    169a:	13 97       	sbiw	r26, 0x03	; 3
    169c:	09 95       	icall
    169e:	81 2f       	mov	r24, r17
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	08 95       	ret

000016ac <udc_iface_enable>:
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	18 2f       	mov	r17, r24
    16b4:	7f df       	rcall	.-258    	; 0x15b4 <udc_update_iface_desc>
    16b6:	88 23       	and	r24, r24
    16b8:	39 f1       	breq	.+78     	; 0x1708 <udc_iface_enable+0x5c>
    16ba:	c0 91 c6 20 	lds	r28, 0x20C6	; 0x8020c6 <udc_ptr_iface>
    16be:	d0 91 c7 20 	lds	r29, 0x20C7	; 0x8020c7 <udc_ptr_iface+0x1>
    16c2:	65 e0       	ldi	r22, 0x05	; 5
    16c4:	ce 01       	movw	r24, r28
    16c6:	3e df       	rcall	.-388    	; 0x1544 <udc_next_desc_in_iface>
    16c8:	ec 01       	movw	r28, r24
    16ca:	89 2b       	or	r24, r25
    16cc:	41 f0       	breq	.+16     	; 0x16de <udc_iface_enable+0x32>
    16ce:	4c 81       	ldd	r20, Y+4	; 0x04
    16d0:	5d 81       	ldd	r21, Y+5	; 0x05
    16d2:	6b 81       	ldd	r22, Y+3	; 0x03
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	b0 d7       	rcall	.+3936   	; 0x2638 <udd_ep_alloc>
    16d8:	81 11       	cpse	r24, r1
    16da:	f3 cf       	rjmp	.-26     	; 0x16c2 <udc_iface_enable+0x16>
    16dc:	15 c0       	rjmp	.+42     	; 0x1708 <udc_iface_enable+0x5c>
    16de:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    16e2:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    16e6:	e1 2f       	mov	r30, r17
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	12 96       	adiw	r26, 0x02	; 2
    16f0:	8d 91       	ld	r24, X+
    16f2:	9c 91       	ld	r25, X
    16f4:	13 97       	sbiw	r26, 0x03	; 3
    16f6:	e8 0f       	add	r30, r24
    16f8:	f9 1f       	adc	r31, r25
    16fa:	01 90       	ld	r0, Z+
    16fc:	f0 81       	ld	r31, Z
    16fe:	e0 2d       	mov	r30, r0
    1700:	01 90       	ld	r0, Z+
    1702:	f0 81       	ld	r31, Z
    1704:	e0 2d       	mov	r30, r0
    1706:	09 95       	icall
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	08 95       	ret

00001710 <udc_get_interface_desc>:
    1710:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udc_ptr_iface>
    1714:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <udc_ptr_iface+0x1>
    1718:	08 95       	ret

0000171a <udc_start>:
    171a:	fc c6       	rjmp	.+3576   	; 0x2514 <udd_enable>
    171c:	08 95       	ret

0000171e <udc_reset>:
    171e:	cf 93       	push	r28
    1720:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    1724:	88 23       	and	r24, r24
    1726:	c1 f0       	breq	.+48     	; 0x1758 <udc_reset+0x3a>
    1728:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    172c:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1730:	01 90       	ld	r0, Z+
    1732:	f0 81       	ld	r31, Z
    1734:	e0 2d       	mov	r30, r0
    1736:	84 81       	ldd	r24, Z+4	; 0x04
    1738:	88 23       	and	r24, r24
    173a:	71 f0       	breq	.+28     	; 0x1758 <udc_reset+0x3a>
    173c:	c0 e0       	ldi	r28, 0x00	; 0
    173e:	8c 2f       	mov	r24, r28
    1740:	73 df       	rcall	.-282    	; 0x1628 <udc_iface_disable>
    1742:	cf 5f       	subi	r28, 0xFF	; 255
    1744:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1748:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    174c:	01 90       	ld	r0, Z+
    174e:	f0 81       	ld	r31, Z
    1750:	e0 2d       	mov	r30, r0
    1752:	84 81       	ldd	r24, Z+4	; 0x04
    1754:	c8 17       	cp	r28, r24
    1756:	98 f3       	brcs	.-26     	; 0x173e <udc_reset+0x20>
    1758:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <udc_num_configuration>
    175c:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <udc_device_status>
    1760:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <udc_device_status+0x1>
    1764:	cf 91       	pop	r28
    1766:	08 95       	ret

00001768 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1768:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    176a:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    176e:	88 23       	and	r24, r24
    1770:	49 f1       	breq	.+82     	; 0x17c4 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1772:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1776:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    177a:	ed 91       	ld	r30, X+
    177c:	fc 91       	ld	r31, X
    177e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1780:	84 81       	ldd	r24, Z+4	; 0x04
    1782:	88 23       	and	r24, r24
    1784:	f9 f0       	breq	.+62     	; 0x17c4 <udc_sof_notify+0x5c>
    1786:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1788:	ec 2f       	mov	r30, r28
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	ee 0f       	add	r30, r30
    178e:	ff 1f       	adc	r31, r31
    1790:	12 96       	adiw	r26, 0x02	; 2
    1792:	8d 91       	ld	r24, X+
    1794:	9c 91       	ld	r25, X
    1796:	13 97       	sbiw	r26, 0x03	; 3
    1798:	e8 0f       	add	r30, r24
    179a:	f9 1f       	adc	r31, r25
    179c:	01 90       	ld	r0, Z+
    179e:	f0 81       	ld	r31, Z
    17a0:	e0 2d       	mov	r30, r0
    17a2:	00 84       	ldd	r0, Z+8	; 0x08
    17a4:	f1 85       	ldd	r31, Z+9	; 0x09
    17a6:	e0 2d       	mov	r30, r0
    17a8:	30 97       	sbiw	r30, 0x00	; 0
    17aa:	09 f0       	breq	.+2      	; 0x17ae <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    17ac:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    17ae:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17b0:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    17b4:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    17b8:	ed 91       	ld	r30, X+
    17ba:	fc 91       	ld	r31, X
    17bc:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    17be:	84 81       	ldd	r24, Z+4	; 0x04
    17c0:	c8 17       	cp	r28, r24
    17c2:	10 f3       	brcs	.-60     	; 0x1788 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    17d0:	ea e6       	ldi	r30, 0x6A	; 106
    17d2:	f4 e2       	ldi	r31, 0x24	; 36
    17d4:	12 86       	std	Z+10, r1	; 0x0a
    17d6:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    17d8:	14 86       	std	Z+12, r1	; 0x0c
    17da:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    17dc:	16 86       	std	Z+14, r1	; 0x0e
    17de:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    17e0:	80 81       	ld	r24, Z
    17e2:	88 23       	and	r24, r24
    17e4:	3c f4       	brge	.+14     	; 0x17f4 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    17e6:	20 91 70 24 	lds	r18, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    17ea:	30 91 71 24 	lds	r19, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    17ee:	23 2b       	or	r18, r19
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <udc_process_setup+0x2c>
    17f2:	67 c3       	rjmp	.+1742   	; 0x1ec2 <udc_process_setup+0x6fa>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    17f4:	80 76       	andi	r24, 0x60	; 96
    17f6:	80 34       	cpi	r24, 0x40	; 64
    17f8:	09 f0       	breq	.+2      	; 0x17fc <udc_process_setup+0x34>
    17fa:	05 c1       	rjmp	.+522    	; 0x1a06 <udc_process_setup+0x23e>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    17fc:	e0 91 6b 24 	lds	r30, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1800:	8e 2f       	mov	r24, r30
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	fc 01       	movw	r30, r24
    1806:	e0 5a       	subi	r30, 0xA0	; 160
    1808:	f1 09       	sbc	r31, r1
    180a:	e8 30       	cpi	r30, 0x08	; 8
    180c:	f1 05       	cpc	r31, r1
    180e:	08 f0       	brcs	.+2      	; 0x1812 <udc_process_setup+0x4a>
    1810:	f1 c0       	rjmp	.+482    	; 0x19f4 <udc_process_setup+0x22c>
    1812:	ea 5f       	subi	r30, 0xFA	; 250
    1814:	fe 4f       	sbci	r31, 0xFE	; 254
    1816:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    181a:	00 00       	nop
    181c:	56 c3       	rjmp	.+1708   	; 0x1eca <udc_process_setup+0x702>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    181e:	e0 e0       	ldi	r30, 0x00	; 0
    1820:	f8 e0       	ldi	r31, 0x08	; 8
    1822:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1824:	ca e6       	ldi	r28, 0x6A	; 106
    1826:	d4 e2       	ldi	r29, 0x24	; 36
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	86 ab       	std	Z+54, r24	; 0x36
    182e:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	8f 70       	andi	r24, 0x0F	; 15
    1834:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1836:	6e 81       	ldd	r22, Y+6	; 0x06
    1838:	7f 81       	ldd	r23, Y+7	; 0x07
    183a:	8a e6       	ldi	r24, 0x6A	; 106
    183c:	92 e2       	ldi	r25, 0x22	; 34
    183e:	f5 d6       	rcall	.+3562   	; 0x262a <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1840:	8e 81       	ldd	r24, Y+6	; 0x06
    1842:	9f 81       	ldd	r25, Y+7	; 0x07
    1844:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <dacBuf_len>
    1848:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <dacBuf_len+0x1>
    184c:	82 17       	cp	r24, r18
    184e:	93 07       	cpc	r25, r19
    1850:	09 f4       	brne	.+2      	; 0x1854 <udc_process_setup+0x8c>
    1852:	3b c3       	rjmp	.+1654   	; 0x1eca <udc_process_setup+0x702>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1854:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <dacBuf_len>
    1858:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <dacBuf_len+0x1>
				switch(global_mode){
    185c:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <global_mode>
    1860:	8e 2f       	mov	r24, r30
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	91 05       	cpc	r25, r1
    1868:	08 f0       	brcs	.+2      	; 0x186c <udc_process_setup+0xa4>
    186a:	c6 c0       	rjmp	.+396    	; 0x19f8 <udc_process_setup+0x230>
    186c:	fc 01       	movw	r30, r24
    186e:	e2 5f       	subi	r30, 0xF2	; 242
    1870:	fe 4f       	sbci	r31, 0xFE	; 254
    1872:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1876:	0e 94 9c 03 	call	0x738	; 0x738 <tiny_dma_set_mode_0>
    187a:	27 c3       	rjmp	.+1614   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 1:
					tiny_dma_set_mode_1();
    187c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <tiny_dma_set_mode_1>
    1880:	24 c3       	rjmp	.+1608   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1882:	32 d8       	rcall	.-3996   	; 0x8e8 <tiny_dma_set_mode_2>
    1884:	22 c3       	rjmp	.+1604   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1886:	a5 d8       	rcall	.-3766   	; 0x9d2 <tiny_dma_set_mode_3>
    1888:	20 c3       	rjmp	.+1600   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 4:
					tiny_dma_set_mode_4();
    188a:	1f d9       	rcall	.-3522   	; 0xaca <tiny_dma_set_mode_4>
    188c:	1e c3       	rjmp	.+1596   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 5:
					tiny_dma_set_mode_5();
    188e:	93 d9       	rcall	.-3290   	; 0xbb6 <tiny_dma_set_mode_5>
    1890:	1c c3       	rjmp	.+1592   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1892:	d9 d9       	rcall	.-3150   	; 0xc46 <tiny_dma_set_mode_6>
    1894:	1a c3       	rjmp	.+1588   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1896:	39 da       	rcall	.-2958   	; 0xd0a <tiny_dma_set_mode_7>
    1898:	18 c3       	rjmp	.+1584   	; 0x1eca <udc_process_setup+0x702>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    189a:	e0 e4       	ldi	r30, 0x40	; 64
    189c:	f8 e0       	ldi	r31, 0x08	; 8
    189e:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    18a0:	ca e6       	ldi	r28, 0x6A	; 106
    18a2:	d4 e2       	ldi	r29, 0x24	; 36
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	9b 81       	ldd	r25, Y+3	; 0x03
    18a8:	86 ab       	std	Z+54, r24	; 0x36
    18aa:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	8f 70       	andi	r24, 0x0F	; 15
    18b0:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    18b2:	6e 81       	ldd	r22, Y+6	; 0x06
    18b4:	7f 81       	ldd	r23, Y+7	; 0x07
    18b6:	8a e7       	ldi	r24, 0x7A	; 122
    18b8:	94 e2       	ldi	r25, 0x24	; 36
    18ba:	b7 d6       	rcall	.+3438   	; 0x262a <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    18bc:	8e 81       	ldd	r24, Y+6	; 0x06
    18be:	9f 81       	ldd	r25, Y+7	; 0x07
    18c0:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <auxDacBufLen>
    18c4:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <auxDacBufLen+0x1>
    18c8:	82 17       	cp	r24, r18
    18ca:	93 07       	cpc	r25, r19
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <udc_process_setup+0x108>
    18ce:	fd c2       	rjmp	.+1530   	; 0x1eca <udc_process_setup+0x702>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    18d0:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <auxDacBufLen>
    18d4:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <auxDacBufLen+0x1>
				switch(global_mode){
    18d8:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <global_mode>
    18dc:	8e 2f       	mov	r24, r30
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	88 30       	cpi	r24, 0x08	; 8
    18e2:	91 05       	cpc	r25, r1
    18e4:	08 f0       	brcs	.+2      	; 0x18e8 <udc_process_setup+0x120>
    18e6:	8a c0       	rjmp	.+276    	; 0x19fc <udc_process_setup+0x234>
    18e8:	fc 01       	movw	r30, r24
    18ea:	ea 5e       	subi	r30, 0xEA	; 234
    18ec:	fe 4f       	sbci	r31, 0xFE	; 254
    18ee:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    18f2:	0e 94 9c 03 	call	0x738	; 0x738 <tiny_dma_set_mode_0>
    18f6:	e9 c2       	rjmp	.+1490   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 1:
					tiny_dma_set_mode_1();
    18f8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <tiny_dma_set_mode_1>
    18fc:	e6 c2       	rjmp	.+1484   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 2:
					tiny_dma_set_mode_2();
    18fe:	0e 94 74 04 	call	0x8e8	; 0x8e8 <tiny_dma_set_mode_2>
    1902:	e3 c2       	rjmp	.+1478   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1904:	66 d8       	rcall	.-3892   	; 0x9d2 <tiny_dma_set_mode_3>
    1906:	e1 c2       	rjmp	.+1474   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1908:	e0 d8       	rcall	.-3648   	; 0xaca <tiny_dma_set_mode_4>
    190a:	df c2       	rjmp	.+1470   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 5:
					tiny_dma_set_mode_5();
    190c:	54 d9       	rcall	.-3416   	; 0xbb6 <tiny_dma_set_mode_5>
    190e:	dd c2       	rjmp	.+1466   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1910:	9a d9       	rcall	.-3276   	; 0xc46 <tiny_dma_set_mode_6>
    1912:	db c2       	rjmp	.+1462   	; 0x1eca <udc_process_setup+0x702>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1914:	fa d9       	rcall	.-3084   	; 0xd0a <tiny_dma_set_mode_7>
    1916:	d9 c2       	rjmp	.+1458   	; 0x1eca <udc_process_setup+0x702>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1918:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    191c:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1920:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1924:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <PSU_target>
    1928:	d0 c2       	rjmp	.+1440   	; 0x1eca <udc_process_setup+0x702>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    192a:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    192e:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1932:	cb c2       	rjmp	.+1430   	; 0x1eca <udc_process_setup+0x702>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1934:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1938:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    193c:	e8 30       	cpi	r30, 0x08	; 8
    193e:	f1 05       	cpc	r31, r1
    1940:	08 f0       	brcs	.+2      	; 0x1944 <udc_process_setup+0x17c>
    1942:	5e c0       	rjmp	.+188    	; 0x1a00 <udc_process_setup+0x238>
    1944:	e2 5e       	subi	r30, 0xE2	; 226
    1946:	fe 4f       	sbci	r31, 0xFE	; 254
    1948:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	0e 94 1d 03 	call	0x63a	; 0x63a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1954:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    1958:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    195c:	0e 94 9c 03 	call	0x738	; 0x738 <tiny_dma_set_mode_0>
    1960:	b4 c2       	rjmp	.+1384   	; 0x1eca <udc_process_setup+0x702>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	0e 94 1d 03 	call	0x63a	; 0x63a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    196a:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    196e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1972:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <tiny_dma_set_mode_1>
    1976:	a9 c2       	rjmp	.+1362   	; 0x1eca <udc_process_setup+0x702>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	0e 94 1d 03 	call	0x63a	; 0x63a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1980:	ca e6       	ldi	r28, 0x6A	; 106
    1982:	d4 e2       	ldi	r29, 0x24	; 36
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	0e 94 00 03 	call	0x600	; 0x600 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    1990:	0e 94 74 04 	call	0x8e8	; 0x8e8 <tiny_dma_set_mode_2>
    1994:	9a c2       	rjmp	.+1332   	; 0x1eca <udc_process_setup+0x702>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    1996:	1d d8       	rcall	.-4038   	; 0x9d2 <tiny_dma_set_mode_3>
    1998:	98 c2       	rjmp	.+1328   	; 0x1eca <udc_process_setup+0x702>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    199a:	97 d8       	rcall	.-3794   	; 0xaca <tiny_dma_set_mode_4>
    199c:	96 c2       	rjmp	.+1324   	; 0x1eca <udc_process_setup+0x702>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	0e 94 1d 03 	call	0x63a	; 0x63a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    19a6:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    19aa:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    19ae:	03 d9       	rcall	.-3578   	; 0xbb6 <tiny_dma_set_mode_5>
    19b0:	8c c2       	rjmp	.+1304   	; 0x1eca <udc_process_setup+0x702>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	0e 94 1d 03 	call	0x63a	; 0x63a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    19ba:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    19be:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    19c2:	41 d9       	rcall	.-3454   	; 0xc46 <tiny_dma_set_mode_6>
    19c4:	82 c2       	rjmp	.+1284   	; 0x1eca <udc_process_setup+0x702>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    19c6:	62 e0       	ldi	r22, 0x02	; 2
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	0e 94 1d 03 	call	0x63a	; 0x63a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    19ce:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    19d2:	80 68       	ori	r24, 0x80	; 128
    19d4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    19d8:	98 d9       	rcall	.-3280   	; 0xd0a <tiny_dma_set_mode_7>
    19da:	77 c2       	rjmp	.+1262   	; 0x1eca <udc_process_setup+0x702>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    19dc:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    19e0:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    19e4:	72 c2       	rjmp	.+1252   	; 0x1eca <udc_process_setup+0x702>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    19e6:	e9 e7       	ldi	r30, 0x79	; 121
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	88 ed       	ldi	r24, 0xD8	; 216
    19ee:	f8 94       	cli
    19f0:	84 bf       	out	0x34, r24	; 52
    19f2:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	05 c0       	rjmp	.+10     	; 0x1a02 <udc_process_setup+0x23a>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <udc_process_setup+0x23a>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <udc_process_setup+0x23a>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    1a00:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1a02:	81 11       	cpse	r24, r1
    1a04:	65 c2       	rjmp	.+1226   	; 0x1ed0 <udc_process_setup+0x708>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1a06:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
    1a0a:	98 2f       	mov	r25, r24
    1a0c:	90 76       	andi	r25, 0x60	; 96
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <udc_process_setup+0x24a>
    1a10:	e1 c1       	rjmp	.+962    	; 0x1dd4 <udc_process_setup+0x60c>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1a12:	88 23       	and	r24, r24
    1a14:	0c f0       	brlt	.+2      	; 0x1a18 <udc_process_setup+0x250>
    1a16:	05 c1       	rjmp	.+522    	; 0x1c22 <udc_process_setup+0x45a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1a18:	20 91 70 24 	lds	r18, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1a1c:	30 91 71 24 	lds	r19, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1a20:	21 15       	cp	r18, r1
    1a22:	31 05       	cpc	r19, r1
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <udc_process_setup+0x260>
    1a26:	d6 c1       	rjmp	.+940    	; 0x1dd4 <udc_process_setup+0x60c>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1a28:	8f 71       	andi	r24, 0x1F	; 31
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <udc_process_setup+0x266>
    1a2c:	a3 c0       	rjmp	.+326    	; 0x1b74 <udc_process_setup+0x3ac>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a2e:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1a32:	96 30       	cpi	r25, 0x06	; 6
    1a34:	79 f0       	breq	.+30     	; 0x1a54 <udc_process_setup+0x28c>
    1a36:	98 30       	cpi	r25, 0x08	; 8
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <udc_process_setup+0x274>
    1a3a:	92 c0       	rjmp	.+292    	; 0x1b60 <udc_process_setup+0x398>
    1a3c:	91 11       	cpse	r25, r1
    1a3e:	9a c0       	rjmp	.+308    	; 0x1b74 <udc_process_setup+0x3ac>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1a40:	22 30       	cpi	r18, 0x02	; 2
    1a42:	31 05       	cpc	r19, r1
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <udc_process_setup+0x280>
    1a46:	c6 c1       	rjmp	.+908    	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1a48:	62 e0       	ldi	r22, 0x02	; 2
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	8e ec       	ldi	r24, 0xCE	; 206
    1a4e:	90 e2       	ldi	r25, 0x20	; 32
    1a50:	ec d5       	rcall	.+3032   	; 0x262a <udd_set_setup_payload>
    1a52:	3d c2       	rjmp	.+1146   	; 0x1ece <udc_process_setup+0x706>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1a54:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1a58:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1a5c:	29 2f       	mov	r18, r25
    1a5e:	33 27       	eor	r19, r19
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	a9 f0       	breq	.+42     	; 0x1a90 <udc_process_setup+0x2c8>
    1a66:	24 f4       	brge	.+8      	; 0x1a70 <udc_process_setup+0x2a8>
    1a68:	21 30       	cpi	r18, 0x01	; 1
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	41 f0       	breq	.+16     	; 0x1a7e <udc_process_setup+0x2b6>
    1a6e:	a9 c1       	rjmp	.+850    	; 0x1dc2 <udc_process_setup+0x5fa>
    1a70:	23 30       	cpi	r18, 0x03	; 3
    1a72:	31 05       	cpc	r19, r1
    1a74:	d9 f1       	breq	.+118    	; 0x1aec <udc_process_setup+0x324>
    1a76:	2f 30       	cpi	r18, 0x0F	; 15
    1a78:	31 05       	cpc	r19, r1
    1a7a:	51 f1       	breq	.+84     	; 0x1ad0 <udc_process_setup+0x308>
    1a7c:	a2 c1       	rjmp	.+836    	; 0x1dc2 <udc_process_setup+0x5fa>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1a7e:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <udc_config>
    1a82:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1a86:	dc 01       	movw	r26, r24
    1a88:	6c 91       	ld	r22, X
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	ce d5       	rcall	.+2972   	; 0x262a <udd_set_setup_payload>
    1a8e:	59 c0       	rjmp	.+178    	; 0x1b42 <udc_process_setup+0x37a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1a90:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config>
    1a94:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x1>
    1a98:	21 89       	ldd	r18, Z+17	; 0x11
    1a9a:	82 17       	cp	r24, r18
    1a9c:	08 f0       	brcs	.+2      	; 0x1aa0 <udc_process_setup+0x2d8>
    1a9e:	9a c1       	rjmp	.+820    	; 0x1dd4 <udc_process_setup+0x60c>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1aa0:	99 27       	eor	r25, r25
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config+0x2>
    1aae:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x3>
    1ab2:	e8 0f       	add	r30, r24
    1ab4:	f9 1f       	adc	r31, r25
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1aba:	fc 01       	movw	r30, r24
    1abc:	62 81       	ldd	r22, Z+2	; 0x02
    1abe:	73 81       	ldd	r23, Z+3	; 0x03
    1ac0:	b4 d5       	rcall	.+2920   	; 0x262a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1ac2:	e0 91 72 24 	lds	r30, 0x2472	; 0x802472 <udd_g_ctrlreq+0x8>
    1ac6:	f0 91 73 24 	lds	r31, 0x2473	; 0x802473 <udd_g_ctrlreq+0x9>
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	81 83       	std	Z+1, r24	; 0x01
    1ace:	39 c0       	rjmp	.+114    	; 0x1b42 <udc_process_setup+0x37a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1ad0:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <udc_config+0x4>
    1ad4:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <udc_config+0x5>
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	09 f4       	brne	.+2      	; 0x1ade <udc_process_setup+0x316>
    1adc:	7b c1       	rjmp	.+758    	; 0x1dd4 <udc_process_setup+0x60c>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1ade:	dc 01       	movw	r26, r24
    1ae0:	12 96       	adiw	r26, 0x02	; 2
    1ae2:	6d 91       	ld	r22, X+
    1ae4:	7c 91       	ld	r23, X
    1ae6:	13 97       	sbiw	r26, 0x03	; 3
    1ae8:	a0 d5       	rcall	.+2880   	; 0x262a <udd_set_setup_payload>
    1aea:	2b c0       	rjmp	.+86     	; 0x1b42 <udc_process_setup+0x37a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1aec:	99 27       	eor	r25, r25
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	91 05       	cpc	r25, r1
    1af2:	71 f0       	breq	.+28     	; 0x1b10 <udc_process_setup+0x348>
    1af4:	38 f0       	brcs	.+14     	; 0x1b04 <udc_process_setup+0x33c>
    1af6:	02 97       	sbiw	r24, 0x02	; 2
    1af8:	09 f0       	breq	.+2      	; 0x1afc <udc_process_setup+0x334>
    1afa:	6c c1       	rjmp	.+728    	; 0x1dd4 <udc_process_setup+0x60c>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1afc:	8e e8       	ldi	r24, 0x8E	; 142
    1afe:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1b00:	28 e1       	ldi	r18, 0x18	; 24
    1b02:	09 c0       	rjmp	.+18     	; 0x1b16 <udc_process_setup+0x34e>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1b04:	64 e0       	ldi	r22, 0x04	; 4
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	82 eb       	ldi	r24, 0xB2	; 178
    1b0a:	90 e2       	ldi	r25, 0x20	; 32
    1b0c:	8e d5       	rcall	.+2844   	; 0x262a <udd_set_setup_payload>
    1b0e:	19 c0       	rjmp	.+50     	; 0x1b42 <udc_process_setup+0x37a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1b10:	87 ea       	ldi	r24, 0xA7	; 167
    1b12:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1b14:	29 e0       	ldi	r18, 0x09	; 9
    1b16:	38 2f       	mov	r19, r24
    1b18:	ae e5       	ldi	r26, 0x5E	; 94
    1b1a:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1b1c:	e8 2f       	mov	r30, r24
    1b1e:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1b20:	81 91       	ld	r24, Z+
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	8d 93       	st	X+, r24
    1b26:	9d 93       	st	X+, r25
    1b28:	8e 2f       	mov	r24, r30
    1b2a:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1b2c:	82 17       	cp	r24, r18
    1b2e:	c0 f3       	brcs	.-16     	; 0x1b20 <udc_process_setup+0x358>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1b30:	62 2f       	mov	r22, r18
    1b32:	66 0f       	add	r22, r22
    1b34:	6e 5f       	subi	r22, 0xFE	; 254
    1b36:	60 93 5c 20 	sts	0x205C, r22	; 0x80205c <udc_string_desc>
		udd_set_setup_payload(
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	8c e5       	ldi	r24, 0x5C	; 92
    1b3e:	90 e2       	ldi	r25, 0x20	; 32
    1b40:	74 d5       	rcall	.+2792   	; 0x262a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1b42:	ea e6       	ldi	r30, 0x6A	; 106
    1b44:	f4 e2       	ldi	r31, 0x24	; 36
    1b46:	86 81       	ldd	r24, Z+6	; 0x06
    1b48:	97 81       	ldd	r25, Z+7	; 0x07
    1b4a:	22 85       	ldd	r18, Z+10	; 0x0a
    1b4c:	33 85       	ldd	r19, Z+11	; 0x0b
    1b4e:	82 17       	cp	r24, r18
    1b50:	93 07       	cpc	r25, r19
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <udc_process_setup+0x38e>
    1b54:	bc c1       	rjmp	.+888    	; 0x1ece <udc_process_setup+0x706>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1b56:	80 93 74 24 	sts	0x2474, r24	; 0x802474 <udd_g_ctrlreq+0xa>
    1b5a:	90 93 75 24 	sts	0x2475, r25	; 0x802475 <udd_g_ctrlreq+0xb>
    1b5e:	b7 c1       	rjmp	.+878    	; 0x1ece <udc_process_setup+0x706>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1b60:	21 30       	cpi	r18, 0x01	; 1
    1b62:	31 05       	cpc	r19, r1
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <udc_process_setup+0x3a0>
    1b66:	36 c1       	rjmp	.+620    	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1b68:	61 e0       	ldi	r22, 0x01	; 1
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	8a ec       	ldi	r24, 0xCA	; 202
    1b6e:	90 e2       	ldi	r25, 0x20	; 32
    1b70:	5c d5       	rcall	.+2744   	; 0x262a <udd_set_setup_payload>
    1b72:	ad c1       	rjmp	.+858    	; 0x1ece <udc_process_setup+0x706>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	e1 f5       	brne	.+120    	; 0x1bf0 <udc_process_setup+0x428>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b78:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1b7c:	9a 30       	cpi	r25, 0x0A	; 10
    1b7e:	c1 f5       	brne	.+112    	; 0x1bf0 <udc_process_setup+0x428>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1b80:	21 30       	cpi	r18, 0x01	; 1
    1b82:	31 05       	cpc	r19, r1
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <udc_process_setup+0x3c0>
    1b86:	26 c1       	rjmp	.+588    	; 0x1dd4 <udc_process_setup+0x60c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1b88:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    1b8c:	88 23       	and	r24, r24
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <udc_process_setup+0x3ca>
    1b90:	21 c1       	rjmp	.+578    	; 0x1dd4 <udc_process_setup+0x60c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b92:	c0 91 6e 24 	lds	r28, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    1b96:	d0 91 6f 24 	lds	r29, 0x246F	; 0x80246f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b9a:	00 91 c8 20 	lds	r16, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1b9e:	10 91 c9 20 	lds	r17, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1ba2:	d8 01       	movw	r26, r16
    1ba4:	ed 91       	ld	r30, X+
    1ba6:	fc 91       	ld	r31, X
    1ba8:	84 81       	ldd	r24, Z+4	; 0x04
    1baa:	c8 17       	cp	r28, r24
    1bac:	08 f0       	brcs	.+2      	; 0x1bb0 <udc_process_setup+0x3e8>
    1bae:	12 c1       	rjmp	.+548    	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	8c 2f       	mov	r24, r28
    1bb4:	ff dc       	rcall	.-1538   	; 0x15b4 <udc_update_iface_desc>
    1bb6:	88 23       	and	r24, r24
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <udc_process_setup+0x3f4>
    1bba:	0c c1       	rjmp	.+536    	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	99 27       	eor	r25, r25
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	d8 01       	movw	r26, r16
    1bc6:	12 96       	adiw	r26, 0x02	; 2
    1bc8:	ed 91       	ld	r30, X+
    1bca:	fc 91       	ld	r31, X
    1bcc:	13 97       	sbiw	r26, 0x03	; 3
    1bce:	e8 0f       	add	r30, r24
    1bd0:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1bd2:	01 90       	ld	r0, Z+
    1bd4:	f0 81       	ld	r31, Z
    1bd6:	e0 2d       	mov	r30, r0
    1bd8:	86 81       	ldd	r24, Z+6	; 0x06
    1bda:	97 81       	ldd	r25, Z+7	; 0x07
    1bdc:	fc 01       	movw	r30, r24
    1bde:	09 95       	icall
    1be0:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	8c ec       	ldi	r24, 0xCC	; 204
    1bea:	90 e2       	ldi	r25, 0x20	; 32
    1bec:	1e d5       	rcall	.+2620   	; 0x262a <udd_set_setup_payload>
    1bee:	6f c1       	rjmp	.+734    	; 0x1ece <udc_process_setup+0x706>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1bf0:	82 30       	cpi	r24, 0x02	; 2
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <udc_process_setup+0x42e>
    1bf4:	ef c0       	rjmp	.+478    	; 0x1dd4 <udc_process_setup+0x60c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1bf6:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	e4 c0       	rjmp	.+456    	; 0x1dc6 <udc_process_setup+0x5fe>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <udc_process_setup+0x43e>
    1c04:	e7 c0       	rjmp	.+462    	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1c06:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    1c0a:	8b d5       	rcall	.+2838   	; 0x2722 <udd_ep_is_halted>
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_ep_status.5522>
    1c12:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <udc_ep_status.5522+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1c16:	62 e0       	ldi	r22, 0x02	; 2
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	84 ec       	ldi	r24, 0xC4	; 196
    1c1c:	90 e2       	ldi	r25, 0x20	; 32
    1c1e:	05 d5       	rcall	.+2570   	; 0x262a <udd_set_setup_payload>
    1c20:	56 c1       	rjmp	.+684    	; 0x1ece <udc_process_setup+0x706>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1c22:	8f 71       	andi	r24, 0x1F	; 31
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <udc_process_setup+0x460>
    1c26:	83 c0       	rjmp	.+262    	; 0x1d2e <udc_process_setup+0x566>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c28:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1c2c:	93 30       	cpi	r25, 0x03	; 3
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <udc_process_setup+0x46a>
    1c30:	cc c0       	rjmp	.+408    	; 0x1dca <udc_process_setup+0x602>
    1c32:	18 f4       	brcc	.+6      	; 0x1c3a <udc_process_setup+0x472>
    1c34:	91 30       	cpi	r25, 0x01	; 1
    1c36:	a1 f0       	breq	.+40     	; 0x1c60 <udc_process_setup+0x498>
    1c38:	7a c0       	rjmp	.+244    	; 0x1d2e <udc_process_setup+0x566>
    1c3a:	95 30       	cpi	r25, 0x05	; 5
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <udc_process_setup+0x47c>
    1c3e:	99 30       	cpi	r25, 0x09	; 9
    1c40:	39 f1       	breq	.+78     	; 0x1c90 <udc_process_setup+0x4c8>
    1c42:	75 c0       	rjmp	.+234    	; 0x1d2e <udc_process_setup+0x566>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c44:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1c48:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1c4c:	89 2b       	or	r24, r25
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <udc_process_setup+0x48a>
    1c50:	c1 c0       	rjmp	.+386    	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1c52:	84 ed       	ldi	r24, 0xD4	; 212
    1c54:	9a e0       	ldi	r25, 0x0A	; 10
    1c56:	80 93 76 24 	sts	0x2476, r24	; 0x802476 <udd_g_ctrlreq+0xc>
    1c5a:	90 93 77 24 	sts	0x2477, r25	; 0x802477 <udd_g_ctrlreq+0xd>
    1c5e:	37 c1       	rjmp	.+622    	; 0x1ece <udc_process_setup+0x706>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c60:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1c64:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1c68:	89 2b       	or	r24, r25
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <udc_process_setup+0x4a6>
    1c6c:	b3 c0       	rjmp	.+358    	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1c6e:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1c72:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <udc_process_setup+0x4b4>
    1c7a:	ac c0       	rjmp	.+344    	; 0x1dd4 <udc_process_setup+0x60c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1c7c:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <udc_device_status>
    1c80:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <udc_device_status+0x1>
    1c84:	8d 7f       	andi	r24, 0xFD	; 253
    1c86:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <udc_device_status>
    1c8a:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <udc_device_status+0x1>
    1c8e:	1f c1       	rjmp	.+574    	; 0x1ece <udc_process_setup+0x706>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1c90:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1c94:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1c98:	89 2b       	or	r24, r25
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <udc_process_setup+0x4d6>
    1c9c:	9b c0       	rjmp	.+310    	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1c9e:	c2 d4       	rcall	.+2436   	; 0x2624 <udd_getaddress>
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <udc_process_setup+0x4de>
    1ca4:	97 c0       	rjmp	.+302    	; 0x1dd4 <udc_process_setup+0x60c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1ca6:	20 91 6c 24 	lds	r18, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1caa:	30 91 6d 24 	lds	r19, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    1cae:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1cb0:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config>
    1cb4:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1cb8:	81 89       	ldd	r24, Z+17	; 0x11
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	82 17       	cp	r24, r18
    1cbe:	93 07       	cpc	r25, r19
    1cc0:	08 f4       	brcc	.+2      	; 0x1cc4 <udc_process_setup+0x4fc>
    1cc2:	88 c0       	rjmp	.+272    	; 0x1dd4 <udc_process_setup+0x60c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1cc4:	2c dd       	rcall	.-1448   	; 0x171e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1cc6:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1cca:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    1cce:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1cd2:	88 23       	and	r24, r24
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <udc_process_setup+0x510>
    1cd6:	fb c0       	rjmp	.+502    	; 0x1ece <udc_process_setup+0x706>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1cd8:	99 27       	eor	r25, r25
    1cda:	81 50       	subi	r24, 0x01	; 1
    1cdc:	90 4c       	sbci	r25, 0xC0	; 192
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config+0x2>
    1cea:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x3>
    1cee:	e8 0f       	add	r30, r24
    1cf0:	f9 1f       	adc	r31, r25
    1cf2:	e0 93 c8 20 	sts	0x20C8, r30	; 0x8020c8 <udc_ptr_conf>
    1cf6:	f0 93 c9 20 	sts	0x20C9, r31	; 0x8020c9 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cfa:	01 90       	ld	r0, Z+
    1cfc:	f0 81       	ld	r31, Z
    1cfe:	e0 2d       	mov	r30, r0
    1d00:	84 81       	ldd	r24, Z+4	; 0x04
    1d02:	88 23       	and	r24, r24
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <udc_process_setup+0x540>
    1d06:	e3 c0       	rjmp	.+454    	; 0x1ece <udc_process_setup+0x706>
    1d08:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	8c 2f       	mov	r24, r28
    1d0e:	ce dc       	rcall	.-1636   	; 0x16ac <udc_iface_enable>
    1d10:	88 23       	and	r24, r24
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <udc_process_setup+0x54e>
    1d14:	5f c0       	rjmp	.+190    	; 0x1dd4 <udc_process_setup+0x60c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1d16:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d18:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1d1c:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1d20:	01 90       	ld	r0, Z+
    1d22:	f0 81       	ld	r31, Z
    1d24:	e0 2d       	mov	r30, r0
    1d26:	84 81       	ldd	r24, Z+4	; 0x04
    1d28:	c8 17       	cp	r28, r24
    1d2a:	78 f3       	brcs	.-34     	; 0x1d0a <udc_process_setup+0x542>
    1d2c:	d0 c0       	rjmp	.+416    	; 0x1ece <udc_process_setup+0x706>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	e1 f4       	brne	.+56     	; 0x1d6a <udc_process_setup+0x5a2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d32:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1d36:	9b 30       	cpi	r25, 0x0B	; 11
    1d38:	c1 f4       	brne	.+48     	; 0x1d6a <udc_process_setup+0x5a2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1d3a:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1d3e:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1d42:	89 2b       	or	r24, r25
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <udc_process_setup+0x580>
    1d46:	46 c0       	rjmp	.+140    	; 0x1dd4 <udc_process_setup+0x60c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1d48:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <udc_process_setup+0x58a>
    1d50:	41 c0       	rjmp	.+130    	; 0x1dd4 <udc_process_setup+0x60c>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d52:	ea e6       	ldi	r30, 0x6A	; 106
    1d54:	f4 e2       	ldi	r31, 0x24	; 36
    1d56:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1d58:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1d5a:	8c 2f       	mov	r24, r28
    1d5c:	65 dc       	rcall	.-1846   	; 0x1628 <udc_iface_disable>
    1d5e:	88 23       	and	r24, r24
    1d60:	c9 f1       	breq	.+114    	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1d62:	6d 2f       	mov	r22, r29
    1d64:	8c 2f       	mov	r24, r28
    1d66:	a2 dc       	rcall	.-1724   	; 0x16ac <udc_iface_enable>
    1d68:	33 c0       	rjmp	.+102    	; 0x1dd0 <udc_process_setup+0x608>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	99 f5       	brne	.+102    	; 0x1dd4 <udc_process_setup+0x60c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d6e:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	19 f0       	breq	.+6      	; 0x1d7c <udc_process_setup+0x5b4>
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	89 f0       	breq	.+34     	; 0x1d9c <udc_process_setup+0x5d4>
    1d7a:	29 c0       	rjmp	.+82     	; 0x1dce <udc_process_setup+0x606>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d7c:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1d80:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1d84:	89 2b       	or	r24, r25
    1d86:	31 f5       	brne	.+76     	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1d88:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1d8c:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    1d90:	89 2b       	or	r24, r25
    1d92:	01 f5       	brne	.+64     	; 0x1dd4 <udc_process_setup+0x60c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d94:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    1d98:	df d4       	rcall	.+2494   	; 0x2758 <udd_ep_clear_halt>
    1d9a:	1a c0       	rjmp	.+52     	; 0x1dd0 <udc_process_setup+0x608>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d9c:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1da0:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1da4:	89 2b       	or	r24, r25
    1da6:	b1 f4       	brne	.+44     	; 0x1dd4 <udc_process_setup+0x60c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1da8:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1dac:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    1db0:	89 2b       	or	r24, r25
    1db2:	81 f4       	brne	.+32     	; 0x1dd4 <udc_process_setup+0x60c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1db4:	ca e6       	ldi	r28, 0x6A	; 106
    1db6:	d4 e2       	ldi	r29, 0x24	; 36
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	bd d5       	rcall	.+2938   	; 0x2936 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	20 d6       	rcall	.+3136   	; 0x2a00 <udd_ep_set_halt>
    1dc0:	07 c0       	rjmp	.+14     	; 0x1dd0 <udc_process_setup+0x608>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <udc_process_setup+0x608>
				break;
			}
		}
#endif
	}
	return false;
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <udc_process_setup+0x608>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	01 c0       	rjmp	.+2      	; 0x1dd0 <udc_process_setup+0x608>
				break;
			}
		}
#endif
	}
	return false;
    1dce:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	7e c0       	rjmp	.+252    	; 0x1ed0 <udc_process_setup+0x708>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1dd4:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
    1dd8:	8f 71       	andi	r24, 0x1F	; 31
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	71 f5       	brne	.+92     	; 0x1e3a <udc_process_setup+0x672>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1dde:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    1de2:	88 23       	and	r24, r24
    1de4:	51 f1       	breq	.+84     	; 0x1e3a <udc_process_setup+0x672>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1de6:	00 91 6e 24 	lds	r16, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    1dea:	10 91 6f 24 	lds	r17, 0x246F	; 0x80246f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1dee:	c0 91 c8 20 	lds	r28, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1df2:	d0 91 c9 20 	lds	r29, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1df6:	e8 81       	ld	r30, Y
    1df8:	f9 81       	ldd	r31, Y+1	; 0x01
    1dfa:	84 81       	ldd	r24, Z+4	; 0x04
    1dfc:	08 17       	cp	r16, r24
    1dfe:	e8 f4       	brcc	.+58     	; 0x1e3a <udc_process_setup+0x672>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	80 2f       	mov	r24, r16
    1e04:	d7 db       	rcall	.-2130   	; 0x15b4 <udc_update_iface_desc>
    1e06:	88 23       	and	r24, r24
    1e08:	c1 f0       	breq	.+48     	; 0x1e3a <udc_process_setup+0x672>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	ff 27       	eor	r31, r31
    1e0e:	cf 01       	movw	r24, r30
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	ea 81       	ldd	r30, Y+2	; 0x02
    1e16:	fb 81       	ldd	r31, Y+3	; 0x03
    1e18:	e8 0f       	add	r30, r24
    1e1a:	f9 1f       	adc	r31, r25
    1e1c:	c0 81       	ld	r28, Z
    1e1e:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e20:	ee 81       	ldd	r30, Y+6	; 0x06
    1e22:	ff 81       	ldd	r31, Y+7	; 0x07
    1e24:	09 95       	icall
    1e26:	68 2f       	mov	r22, r24
    1e28:	80 2f       	mov	r24, r16
    1e2a:	c4 db       	rcall	.-2168   	; 0x15b4 <udc_update_iface_desc>
    1e2c:	88 23       	and	r24, r24
    1e2e:	29 f0       	breq	.+10     	; 0x1e3a <udc_process_setup+0x672>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1e30:	ec 81       	ldd	r30, Y+4	; 0x04
    1e32:	fd 81       	ldd	r31, Y+5	; 0x05
    1e34:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1e36:	81 11       	cpse	r24, r1
    1e38:	4b c0       	rjmp	.+150    	; 0x1ed0 <udc_process_setup+0x708>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1e3a:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
    1e3e:	8f 71       	andi	r24, 0x1F	; 31
    1e40:	82 30       	cpi	r24, 0x02	; 2
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <udc_process_setup+0x67e>
    1e44:	40 c0       	rjmp	.+128    	; 0x1ec6 <udc_process_setup+0x6fe>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1e46:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    1e4a:	88 23       	and	r24, r24
    1e4c:	b1 f1       	breq	.+108    	; 0x1eba <udc_process_setup+0x6f2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e4e:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1e52:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1e56:	ed 91       	ld	r30, X+
    1e58:	fc 91       	ld	r31, X
    1e5a:	11 97       	sbiw	r26, 0x01	; 1
    1e5c:	84 81       	ldd	r24, Z+4	; 0x04
    1e5e:	88 23       	and	r24, r24
    1e60:	71 f1       	breq	.+92     	; 0x1ebe <udc_process_setup+0x6f6>
    1e62:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e64:	ec 2f       	mov	r30, r28
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	12 96       	adiw	r26, 0x02	; 2
    1e6e:	8d 91       	ld	r24, X+
    1e70:	9c 91       	ld	r25, X
    1e72:	13 97       	sbiw	r26, 0x03	; 3
    1e74:	e8 0f       	add	r30, r24
    1e76:	f9 1f       	adc	r31, r25
    1e78:	00 81       	ld	r16, Z
    1e7a:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e7c:	d8 01       	movw	r26, r16
    1e7e:	16 96       	adiw	r26, 0x06	; 6
    1e80:	ed 91       	ld	r30, X+
    1e82:	fc 91       	ld	r31, X
    1e84:	17 97       	sbiw	r26, 0x07	; 7
    1e86:	09 95       	icall
    1e88:	68 2f       	mov	r22, r24
    1e8a:	8c 2f       	mov	r24, r28
    1e8c:	93 db       	rcall	.-2266   	; 0x15b4 <udc_update_iface_desc>
    1e8e:	88 23       	and	r24, r24
    1e90:	f9 f0       	breq	.+62     	; 0x1ed0 <udc_process_setup+0x708>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1e92:	d8 01       	movw	r26, r16
    1e94:	14 96       	adiw	r26, 0x04	; 4
    1e96:	ed 91       	ld	r30, X+
    1e98:	fc 91       	ld	r31, X
    1e9a:	15 97       	sbiw	r26, 0x05	; 5
    1e9c:	09 95       	icall
    1e9e:	81 11       	cpse	r24, r1
    1ea0:	17 c0       	rjmp	.+46     	; 0x1ed0 <udc_process_setup+0x708>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1ea2:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ea4:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1ea8:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1eac:	ed 91       	ld	r30, X+
    1eae:	fc 91       	ld	r31, X
    1eb0:	11 97       	sbiw	r26, 0x01	; 1
    1eb2:	94 81       	ldd	r25, Z+4	; 0x04
    1eb4:	c9 17       	cp	r28, r25
    1eb6:	b0 f2       	brcs	.-84     	; 0x1e64 <udc_process_setup+0x69c>
    1eb8:	0b c0       	rjmp	.+22     	; 0x1ed0 <udc_process_setup+0x708>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <udc_process_setup+0x708>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	07 c0       	rjmp	.+14     	; 0x1ed0 <udc_process_setup+0x708>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	05 c0       	rjmp	.+10     	; 0x1ed0 <udc_process_setup+0x708>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	03 c0       	rjmp	.+6      	; 0x1ed0 <udc_process_setup+0x708>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <udc_process_setup+0x708>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	08 95       	ret

00001eda <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1eda:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1edc:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1ede:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1ee0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1ee2:	60 83       	st	Z, r22
	ret                             // Return to caller
    1ee4:	08 95       	ret

00001ee6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1ee6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1eea:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1eec:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1eee:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1ef2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1ef4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1ef8:	08 95       	ret

00001efa <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1efa:	81 11       	cpse	r24, r1
    1efc:	22 c0       	rjmp	.+68     	; 0x1f42 <udd_sleep_mode+0x48>
    1efe:	90 91 60 22 	lds	r25, 0x2260	; 0x802260 <udd_b_idle>
    1f02:	99 23       	and	r25, r25
    1f04:	d9 f0       	breq	.+54     	; 0x1f3c <udd_sleep_mode+0x42>
    1f06:	90 91 57 2e 	lds	r25, 0x2E57	; 0x802e57 <sleepmgr_locks+0x1>
    1f0a:	91 11       	cpse	r25, r1
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <udd_sleep_mode+0x16>
    1f0e:	ff cf       	rjmp	.-2      	; 0x1f0e <udd_sleep_mode+0x14>
    1f10:	2f b7       	in	r18, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	e6 e5       	ldi	r30, 0x56	; 86
    1f16:	fe e2       	ldi	r31, 0x2E	; 46
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	91 50       	subi	r25, 0x01	; 1
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	2f bf       	out	0x3f, r18	; 63
    1f20:	0d c0       	rjmp	.+26     	; 0x1f3c <udd_sleep_mode+0x42>
    1f22:	90 91 57 2e 	lds	r25, 0x2E57	; 0x802e57 <sleepmgr_locks+0x1>
    1f26:	9f 3f       	cpi	r25, 0xFF	; 255
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <udd_sleep_mode+0x32>
    1f2a:	ff cf       	rjmp	.-2      	; 0x1f2a <udd_sleep_mode+0x30>
    1f2c:	2f b7       	in	r18, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	e6 e5       	ldi	r30, 0x56	; 86
    1f32:	fe e2       	ldi	r31, 0x2E	; 46
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	9f 5f       	subi	r25, 0xFF	; 255
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	2f bf       	out	0x3f, r18	; 63
    1f3c:	80 93 60 22 	sts	0x2260, r24	; 0x802260 <udd_b_idle>
    1f40:	08 95       	ret
    1f42:	90 91 60 22 	lds	r25, 0x2260	; 0x802260 <udd_b_idle>
    1f46:	99 23       	and	r25, r25
    1f48:	61 f3       	breq	.-40     	; 0x1f22 <udd_sleep_mode+0x28>
    1f4a:	f8 cf       	rjmp	.-16     	; 0x1f3c <udd_sleep_mode+0x42>

00001f4c <udd_ctrl_init>:
    1f4c:	0f 93       	push	r16
    1f4e:	e8 ec       	ldi	r30, 0xC8	; 200
    1f50:	f4 e0       	ldi	r31, 0x04	; 4
    1f52:	80 81       	ld	r24, Z
    1f54:	8f 7d       	andi	r24, 0xDF	; 223
    1f56:	80 83       	st	Z, r24
    1f58:	80 81       	ld	r24, Z
    1f5a:	8f 7d       	andi	r24, 0xDF	; 223
    1f5c:	80 83       	st	Z, r24
    1f5e:	e4 e2       	ldi	r30, 0x24	; 36
    1f60:	f2 e2       	ldi	r31, 0x22	; 34
    1f62:	02 e0       	ldi	r16, 0x02	; 2
    1f64:	05 93       	las	Z, r16
    1f66:	10 92 26 22 	sts	0x2226, r1	; 0x802226 <udd_sram+0x1a>
    1f6a:	10 92 27 22 	sts	0x2227, r1	; 0x802227 <udd_sram+0x1b>
    1f6e:	00 e2       	ldi	r16, 0x20	; 32
    1f70:	06 93       	lac	Z, r16
    1f72:	00 e4       	ldi	r16, 0x40	; 64
    1f74:	06 93       	lac	Z, r16
    1f76:	ec e1       	ldi	r30, 0x1C	; 28
    1f78:	f2 e2       	ldi	r31, 0x22	; 34
    1f7a:	00 e2       	ldi	r16, 0x20	; 32
    1f7c:	06 93       	lac	Z, r16
    1f7e:	00 e4       	ldi	r16, 0x40	; 64
    1f80:	06 93       	lac	Z, r16
    1f82:	ea e6       	ldi	r30, 0x6A	; 106
    1f84:	f4 e2       	ldi	r31, 0x24	; 36
    1f86:	14 86       	std	Z+12, r1	; 0x0c
    1f88:	15 86       	std	Z+13, r1	; 0x0d
    1f8a:	16 86       	std	Z+14, r1	; 0x0e
    1f8c:	17 86       	std	Z+15, r1	; 0x0f
    1f8e:	12 86       	std	Z+10, r1	; 0x0a
    1f90:	13 86       	std	Z+11, r1	; 0x0b
    1f92:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ep_control_state>
    1f96:	0f 91       	pop	r16
    1f98:	08 95       	ret

00001f9a <udd_ctrl_stall_data>:
    1f9a:	0f 93       	push	r16
    1f9c:	85 e0       	ldi	r24, 0x05	; 5
    1f9e:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    1fa2:	e5 e2       	ldi	r30, 0x25	; 37
    1fa4:	f2 e2       	ldi	r31, 0x22	; 34
    1fa6:	04 e0       	ldi	r16, 0x04	; 4
    1fa8:	05 93       	las	Z, r16
    1faa:	ed e1       	ldi	r30, 0x1D	; 29
    1fac:	f2 e2       	ldi	r31, 0x22	; 34
    1fae:	04 e0       	ldi	r16, 0x04	; 4
    1fb0:	05 93       	las	Z, r16
    1fb2:	0f 91       	pop	r16
    1fb4:	08 95       	ret

00001fb6 <udd_ctrl_send_zlp_in>:
    1fb6:	0f 93       	push	r16
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    1fbe:	10 92 26 22 	sts	0x2226, r1	; 0x802226 <udd_sram+0x1a>
    1fc2:	10 92 27 22 	sts	0x2227, r1	; 0x802227 <udd_sram+0x1b>
    1fc6:	e4 e2       	ldi	r30, 0x24	; 36
    1fc8:	f2 e2       	ldi	r31, 0x22	; 34
    1fca:	02 e0       	ldi	r16, 0x02	; 2
    1fcc:	06 93       	lac	Z, r16
    1fce:	0f 91       	pop	r16
    1fd0:	08 95       	ret

00001fd2 <udd_ctrl_endofrequest>:
    1fd2:	e0 91 76 24 	lds	r30, 0x2476	; 0x802476 <udd_g_ctrlreq+0xc>
    1fd6:	f0 91 77 24 	lds	r31, 0x2477	; 0x802477 <udd_g_ctrlreq+0xd>
    1fda:	30 97       	sbiw	r30, 0x00	; 0
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <udd_ctrl_endofrequest+0xe>
    1fde:	09 95       	icall
    1fe0:	08 95       	ret

00001fe2 <udd_ctrl_in_sent>:
    1fe2:	0f 93       	push	r16
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    1fec:	83 30       	cpi	r24, 0x03	; 3
    1fee:	19 f4       	brne	.+6      	; 0x1ff6 <udd_ctrl_in_sent+0x14>
    1ff0:	f0 df       	rcall	.-32     	; 0x1fd2 <udd_ctrl_endofrequest>
    1ff2:	ac df       	rcall	.-168    	; 0x1f4c <udd_ctrl_init>
    1ff4:	5e c0       	rjmp	.+188    	; 0x20b2 <udd_ctrl_in_sent+0xd0>
    1ff6:	80 91 07 22 	lds	r24, 0x2207	; 0x802207 <udd_ctrl_payload_nb_trans>
    1ffa:	90 91 08 22 	lds	r25, 0x2208	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    1ffe:	c0 91 74 24 	lds	r28, 0x2474	; 0x802474 <udd_g_ctrlreq+0xa>
    2002:	d0 91 75 24 	lds	r29, 0x2475	; 0x802475 <udd_g_ctrlreq+0xb>
    2006:	c8 1b       	sub	r28, r24
    2008:	d9 0b       	sbc	r29, r25
    200a:	71 f5       	brne	.+92     	; 0x2068 <udd_ctrl_in_sent+0x86>
    200c:	20 91 09 22 	lds	r18, 0x2209	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    2010:	30 91 0a 22 	lds	r19, 0x220A	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    2014:	82 0f       	add	r24, r18
    2016:	93 1f       	adc	r25, r19
    2018:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    201c:	90 93 0a 22 	sts	0x220A, r25	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    2020:	20 91 70 24 	lds	r18, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    2024:	30 91 71 24 	lds	r19, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    2028:	82 17       	cp	r24, r18
    202a:	93 07       	cpc	r25, r19
    202c:	21 f0       	breq	.+8      	; 0x2036 <udd_ctrl_in_sent+0x54>
    202e:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <b_shortpacket.5272>
    2032:	88 23       	and	r24, r24
    2034:	41 f0       	breq	.+16     	; 0x2046 <udd_ctrl_in_sent+0x64>
    2036:	84 e0       	ldi	r24, 0x04	; 4
    2038:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    203c:	ec e1       	ldi	r30, 0x1C	; 28
    203e:	f2 e2       	ldi	r31, 0x22	; 34
    2040:	02 e0       	ldi	r16, 0x02	; 2
    2042:	06 93       	lac	Z, r16
    2044:	36 c0       	rjmp	.+108    	; 0x20b2 <udd_ctrl_in_sent+0xd0>
    2046:	e0 91 78 24 	lds	r30, 0x2478	; 0x802478 <udd_g_ctrlreq+0xe>
    204a:	f0 91 79 24 	lds	r31, 0x2479	; 0x802479 <udd_g_ctrlreq+0xf>
    204e:	30 97       	sbiw	r30, 0x00	; 0
    2050:	99 f0       	breq	.+38     	; 0x2078 <udd_ctrl_in_sent+0x96>
    2052:	09 95       	icall
    2054:	88 23       	and	r24, r24
    2056:	81 f0       	breq	.+32     	; 0x2078 <udd_ctrl_in_sent+0x96>
    2058:	10 92 07 22 	sts	0x2207, r1	; 0x802207 <udd_ctrl_payload_nb_trans>
    205c:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    2060:	c0 91 74 24 	lds	r28, 0x2474	; 0x802474 <udd_g_ctrlreq+0xa>
    2064:	d0 91 75 24 	lds	r29, 0x2475	; 0x802475 <udd_g_ctrlreq+0xb>
    2068:	c0 34       	cpi	r28, 0x40	; 64
    206a:	d1 05       	cpc	r29, r1
    206c:	28 f0       	brcs	.+10     	; 0x2078 <udd_ctrl_in_sent+0x96>
    206e:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <b_shortpacket.5272>
    2072:	c0 e4       	ldi	r28, 0x40	; 64
    2074:	d0 e0       	ldi	r29, 0x00	; 0
    2076:	03 c0       	rjmp	.+6      	; 0x207e <udd_ctrl_in_sent+0x9c>
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <b_shortpacket.5272>
    207e:	ec e0       	ldi	r30, 0x0C	; 12
    2080:	f2 e2       	ldi	r31, 0x22	; 34
    2082:	c2 8f       	std	Z+26, r28	; 0x1a
    2084:	d3 8f       	std	Z+27, r29	; 0x1b
    2086:	80 91 07 22 	lds	r24, 0x2207	; 0x802207 <udd_ctrl_payload_nb_trans>
    208a:	90 91 08 22 	lds	r25, 0x2208	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    208e:	20 91 72 24 	lds	r18, 0x2472	; 0x802472 <udd_g_ctrlreq+0x8>
    2092:	30 91 73 24 	lds	r19, 0x2473	; 0x802473 <udd_g_ctrlreq+0x9>
    2096:	28 0f       	add	r18, r24
    2098:	39 1f       	adc	r19, r25
    209a:	24 8f       	std	Z+28, r18	; 0x1c
    209c:	35 8f       	std	Z+29, r19	; 0x1d
    209e:	c8 0f       	add	r28, r24
    20a0:	d9 1f       	adc	r29, r25
    20a2:	c0 93 07 22 	sts	0x2207, r28	; 0x802207 <udd_ctrl_payload_nb_trans>
    20a6:	d0 93 08 22 	sts	0x2208, r29	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    20aa:	e4 e2       	ldi	r30, 0x24	; 36
    20ac:	f2 e2       	ldi	r31, 0x22	; 34
    20ae:	02 e0       	ldi	r16, 0x02	; 2
    20b0:	06 93       	lac	Z, r16
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	0f 91       	pop	r16
    20b8:	08 95       	ret

000020ba <udd_ep_get_size>:
    20ba:	fc 01       	movw	r30, r24
    20bc:	81 81       	ldd	r24, Z+1	; 0x01
    20be:	e8 2f       	mov	r30, r24
    20c0:	e7 70       	andi	r30, 0x07	; 7
    20c2:	8e 2f       	mov	r24, r30
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	fc 01       	movw	r30, r24
    20c8:	31 97       	sbiw	r30, 0x01	; 1
    20ca:	e7 30       	cpi	r30, 0x07	; 7
    20cc:	f1 05       	cpc	r31, r1
    20ce:	c0 f4       	brcc	.+48     	; 0x2100 <udd_ep_get_size+0x46>
    20d0:	ea 5d       	subi	r30, 0xDA	; 218
    20d2:	fe 4f       	sbci	r31, 0xFE	; 254
    20d4:	7a c6       	rjmp	.+3316   	; 0x2dca <__tablejump2__>
    20d6:	80 e1       	ldi	r24, 0x10	; 16
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	08 95       	ret
    20dc:	80 e2       	ldi	r24, 0x20	; 32
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	08 95       	ret
    20e2:	80 e4       	ldi	r24, 0x40	; 64
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	08 95       	ret
    20e8:	80 e8       	ldi	r24, 0x80	; 128
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	08 95       	ret
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	91 e0       	ldi	r25, 0x01	; 1
    20f2:	08 95       	ret
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	92 e0       	ldi	r25, 0x02	; 2
    20f8:	08 95       	ret
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
    20fc:	93 e0       	ldi	r25, 0x03	; 3
    20fe:	08 95       	ret
    2100:	88 e0       	ldi	r24, 0x08	; 8
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	08 95       	ret

00002106 <udd_ep_get_job>:
    2106:	28 2f       	mov	r18, r24
    2108:	2f 70       	andi	r18, 0x0F	; 15
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	08 2e       	mov	r0, r24
    2112:	00 0c       	add	r0, r0
    2114:	99 0b       	sbc	r25, r25
    2116:	88 27       	eor	r24, r24
    2118:	99 0f       	add	r25, r25
    211a:	88 1f       	adc	r24, r24
    211c:	99 27       	eor	r25, r25
    211e:	82 0f       	add	r24, r18
    2120:	93 1f       	adc	r25, r19
    2122:	02 97       	sbiw	r24, 0x02	; 2
    2124:	9c 01       	movw	r18, r24
    2126:	22 0f       	add	r18, r18
    2128:	33 1f       	adc	r19, r19
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	22 0f       	add	r18, r18
    2130:	33 1f       	adc	r19, r19
    2132:	82 0f       	add	r24, r18
    2134:	93 1f       	adc	r25, r19
    2136:	8f 56       	subi	r24, 0x6F	; 111
    2138:	9e 4d       	sbci	r25, 0xDE	; 222
    213a:	08 95       	ret

0000213c <udd_ctrl_interrupt_tc_setup>:
    213c:	0f 93       	push	r16
    213e:	cf 93       	push	r28
    2140:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2144:	80 ff       	sbrs	r24, 0
    2146:	62 c0       	rjmp	.+196    	; 0x220c <udd_ctrl_interrupt_tc_setup+0xd0>
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    214e:	ec e1       	ldi	r30, 0x1C	; 28
    2150:	f2 e2       	ldi	r31, 0x22	; 34
    2152:	00 e8       	ldi	r16, 0x80	; 128
    2154:	06 93       	lac	Z, r16
    2156:	e4 e2       	ldi	r30, 0x24	; 36
    2158:	f2 e2       	ldi	r31, 0x22	; 34
    215a:	00 e8       	ldi	r16, 0x80	; 128
    215c:	06 93       	lac	Z, r16
    215e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2162:	ec e1       	ldi	r30, 0x1C	; 28
    2164:	f2 e2       	ldi	r31, 0x22	; 34
    2166:	00 e1       	ldi	r16, 0x10	; 16
    2168:	06 93       	lac	Z, r16
    216a:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    216e:	88 23       	and	r24, r24
    2170:	29 f0       	breq	.+10     	; 0x217c <udd_ctrl_interrupt_tc_setup+0x40>
    2172:	83 50       	subi	r24, 0x03	; 3
    2174:	82 30       	cpi	r24, 0x02	; 2
    2176:	08 f4       	brcc	.+2      	; 0x217a <udd_ctrl_interrupt_tc_setup+0x3e>
    2178:	2c df       	rcall	.-424    	; 0x1fd2 <udd_ctrl_endofrequest>
    217a:	e8 de       	rcall	.-560    	; 0x1f4c <udd_ctrl_init>
    217c:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <udd_sram+0x12>
    2180:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <udd_sram+0x13>
    2184:	08 97       	sbiw	r24, 0x08	; 8
    2186:	09 f0       	breq	.+2      	; 0x218a <udd_ctrl_interrupt_tc_setup+0x4e>
    2188:	43 c0       	rjmp	.+134    	; 0x2210 <udd_ctrl_interrupt_tc_setup+0xd4>
    218a:	88 e0       	ldi	r24, 0x08	; 8
    218c:	e7 ec       	ldi	r30, 0xC7	; 199
    218e:	f1 e2       	ldi	r31, 0x21	; 33
    2190:	aa e6       	ldi	r26, 0x6A	; 106
    2192:	b4 e2       	ldi	r27, 0x24	; 36
    2194:	01 90       	ld	r0, Z+
    2196:	0d 92       	st	X+, r0
    2198:	8a 95       	dec	r24
    219a:	e1 f7       	brne	.-8      	; 0x2194 <udd_ctrl_interrupt_tc_setup+0x58>
    219c:	e8 ec       	ldi	r30, 0xC8	; 200
    219e:	f4 e0       	ldi	r31, 0x04	; 4
    21a0:	80 81       	ld	r24, Z
    21a2:	80 62       	ori	r24, 0x20	; 32
    21a4:	80 83       	st	Z, r24
    21a6:	80 81       	ld	r24, Z
    21a8:	80 62       	ori	r24, 0x20	; 32
    21aa:	80 83       	st	Z, r24
    21ac:	0d db       	rcall	.-2534   	; 0x17c8 <udc_process_setup>
    21ae:	c8 2f       	mov	r28, r24
    21b0:	81 11       	cpse	r24, r1
    21b2:	03 c0       	rjmp	.+6      	; 0x21ba <udd_ctrl_interrupt_tc_setup+0x7e>
    21b4:	f2 de       	rcall	.-540    	; 0x1f9a <udd_ctrl_stall_data>
    21b6:	c1 e0       	ldi	r28, 0x01	; 1
    21b8:	2c c0       	rjmp	.+88     	; 0x2212 <udd_ctrl_interrupt_tc_setup+0xd6>
    21ba:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
    21be:	88 23       	and	r24, r24
    21c0:	6c f4       	brge	.+26     	; 0x21dc <udd_ctrl_interrupt_tc_setup+0xa0>
    21c2:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    21c6:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    21ca:	10 92 07 22 	sts	0x2207, r1	; 0x802207 <udd_ctrl_payload_nb_trans>
    21ce:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    21d8:	04 df       	rcall	.-504    	; 0x1fe2 <udd_ctrl_in_sent>
    21da:	1b c0       	rjmp	.+54     	; 0x2212 <udd_ctrl_interrupt_tc_setup+0xd6>
    21dc:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    21e0:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    21e4:	89 2b       	or	r24, r25
    21e6:	11 f4       	brne	.+4      	; 0x21ec <udd_ctrl_interrupt_tc_setup+0xb0>
    21e8:	e6 de       	rcall	.-564    	; 0x1fb6 <udd_ctrl_send_zlp_in>
    21ea:	13 c0       	rjmp	.+38     	; 0x2212 <udd_ctrl_interrupt_tc_setup+0xd6>
    21ec:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    21f0:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    21f4:	10 92 07 22 	sts	0x2207, r1	; 0x802207 <udd_ctrl_payload_nb_trans>
    21f8:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    2202:	ec e1       	ldi	r30, 0x1C	; 28
    2204:	f2 e2       	ldi	r31, 0x22	; 34
    2206:	02 e0       	ldi	r16, 0x02	; 2
    2208:	06 93       	lac	Z, r16
    220a:	03 c0       	rjmp	.+6      	; 0x2212 <udd_ctrl_interrupt_tc_setup+0xd6>
    220c:	c0 e0       	ldi	r28, 0x00	; 0
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <udd_ctrl_interrupt_tc_setup+0xd6>
    2210:	c1 e0       	ldi	r28, 0x01	; 1
    2212:	8c 2f       	mov	r24, r28
    2214:	cf 91       	pop	r28
    2216:	0f 91       	pop	r16
    2218:	08 95       	ret

0000221a <udd_ep_trans_complet>:
    221a:	8f 92       	push	r8
    221c:	9f 92       	push	r9
    221e:	af 92       	push	r10
    2220:	bf 92       	push	r11
    2222:	df 92       	push	r13
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	d8 2e       	mov	r13, r24
    2232:	69 df       	rcall	.-302    	; 0x2106 <udd_ep_get_job>
    2234:	8c 01       	movw	r16, r24
    2236:	bd 2c       	mov	r11, r13
    2238:	bb 1c       	adc	r11, r11
    223a:	bb 24       	eor	r11, r11
    223c:	bb 1c       	adc	r11, r11
    223e:	cd 2d       	mov	r28, r13
    2240:	cf 70       	andi	r28, 0x0F	; 15
    2242:	d0 e0       	ldi	r29, 0x00	; 0
    2244:	cc 0f       	add	r28, r28
    2246:	dd 1f       	adc	r29, r29
    2248:	cb 0d       	add	r28, r11
    224a:	d1 1d       	adc	r29, r1
    224c:	ce 01       	movw	r24, r28
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	9c 01       	movw	r18, r24
    225c:	24 5e       	subi	r18, 0xE4	; 228
    225e:	3d 4d       	sbci	r19, 0xDD	; 221
    2260:	79 01       	movw	r14, r18
    2262:	c9 01       	movw	r24, r18
    2264:	2a df       	rcall	.-428    	; 0x20ba <udd_ep_get_size>
    2266:	4c 01       	movw	r8, r24
    2268:	bb 20       	and	r11, r11
    226a:	09 f4       	brne	.+2      	; 0x226e <udd_ep_trans_complet+0x54>
    226c:	70 c0       	rjmp	.+224    	; 0x234e <udd_ep_trans_complet+0x134>
    226e:	fe 01       	movw	r30, r28
    2270:	ee 0f       	add	r30, r30
    2272:	ff 1f       	adc	r31, r31
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	e4 5f       	subi	r30, 0xF4	; 244
    227e:	fd 4d       	sbci	r31, 0xDD	; 221
    2280:	26 89       	ldd	r18, Z+22	; 0x16
    2282:	37 89       	ldd	r19, Z+23	; 0x17
    2284:	d8 01       	movw	r26, r16
    2286:	15 96       	adiw	r26, 0x05	; 5
    2288:	8d 91       	ld	r24, X+
    228a:	9c 91       	ld	r25, X
    228c:	16 97       	sbiw	r26, 0x06	; 6
    228e:	82 0f       	add	r24, r18
    2290:	93 1f       	adc	r25, r19
    2292:	15 96       	adiw	r26, 0x05	; 5
    2294:	8d 93       	st	X+, r24
    2296:	9c 93       	st	X, r25
    2298:	16 97       	sbiw	r26, 0x06	; 6
    229a:	13 96       	adiw	r26, 0x03	; 3
    229c:	2d 91       	ld	r18, X+
    229e:	3c 91       	ld	r19, X
    22a0:	14 97       	sbiw	r26, 0x04	; 4
    22a2:	82 17       	cp	r24, r18
    22a4:	93 07       	cpc	r25, r19
    22a6:	09 f4       	brne	.+2      	; 0x22aa <udd_ep_trans_complet+0x90>
    22a8:	3c c0       	rjmp	.+120    	; 0x2322 <udd_ep_trans_complet+0x108>
    22aa:	28 1b       	sub	r18, r24
    22ac:	39 0b       	sbc	r19, r25
    22ae:	21 15       	cp	r18, r1
    22b0:	b4 e0       	ldi	r27, 0x04	; 4
    22b2:	3b 07       	cpc	r19, r27
    22b4:	38 f0       	brcs	.+14     	; 0x22c4 <udd_ep_trans_complet+0xaa>
    22b6:	2f ef       	ldi	r18, 0xFF	; 255
    22b8:	33 e0       	ldi	r19, 0x03	; 3
    22ba:	c9 01       	movw	r24, r18
    22bc:	b4 01       	movw	r22, r8
    22be:	71 d5       	rcall	.+2786   	; 0x2da2 <__udivmodhi4>
    22c0:	28 1b       	sub	r18, r24
    22c2:	39 0b       	sbc	r19, r25
    22c4:	f8 01       	movw	r30, r16
    22c6:	80 81       	ld	r24, Z
    22c8:	81 ff       	sbrs	r24, 1
    22ca:	09 c0       	rjmp	.+18     	; 0x22de <udd_ep_trans_complet+0xc4>
    22cc:	c9 01       	movw	r24, r18
    22ce:	b4 01       	movw	r22, r8
    22d0:	68 d5       	rcall	.+2768   	; 0x2da2 <__udivmodhi4>
    22d2:	41 e0       	ldi	r20, 0x01	; 1
    22d4:	89 2b       	or	r24, r25
    22d6:	09 f0       	breq	.+2      	; 0x22da <udd_ep_trans_complet+0xc0>
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	84 2f       	mov	r24, r20
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <udd_ep_trans_complet+0xc6>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	d8 01       	movw	r26, r16
    22e2:	9c 91       	ld	r25, X
    22e4:	80 fb       	bst	r24, 0
    22e6:	91 f9       	bld	r25, 1
    22e8:	9c 93       	st	X, r25
    22ea:	cc 0f       	add	r28, r28
    22ec:	dd 1f       	adc	r29, r29
    22ee:	cc 0f       	add	r28, r28
    22f0:	dd 1f       	adc	r29, r29
    22f2:	cc 0f       	add	r28, r28
    22f4:	dd 1f       	adc	r29, r29
    22f6:	c4 5f       	subi	r28, 0xF4	; 244
    22f8:	dd 4d       	sbci	r29, 0xDD	; 221
    22fa:	1e 8a       	std	Y+22, r1	; 0x16
    22fc:	1f 8a       	std	Y+23, r1	; 0x17
    22fe:	2a 8b       	std	Y+18, r18	; 0x12
    2300:	3b 8b       	std	Y+19, r19	; 0x13
    2302:	11 96       	adiw	r26, 0x01	; 1
    2304:	2d 91       	ld	r18, X+
    2306:	3c 91       	ld	r19, X
    2308:	12 97       	sbiw	r26, 0x02	; 2
    230a:	15 96       	adiw	r26, 0x05	; 5
    230c:	8d 91       	ld	r24, X+
    230e:	9c 91       	ld	r25, X
    2310:	16 97       	sbiw	r26, 0x06	; 6
    2312:	82 0f       	add	r24, r18
    2314:	93 1f       	adc	r25, r19
    2316:	8c 8b       	std	Y+20, r24	; 0x14
    2318:	9d 8b       	std	Y+21, r25	; 0x15
    231a:	f7 01       	movw	r30, r14
    231c:	02 e0       	ldi	r16, 0x02	; 2
    231e:	06 93       	lac	Z, r16
    2320:	ca c0       	rjmp	.+404    	; 0x24b6 <udd_ep_trans_complet+0x29c>
    2322:	d8 01       	movw	r26, r16
    2324:	8c 91       	ld	r24, X
    2326:	81 ff       	sbrs	r24, 1
    2328:	b3 c0       	rjmp	.+358    	; 0x2490 <udd_ep_trans_complet+0x276>
    232a:	8d 7f       	andi	r24, 0xFD	; 253
    232c:	8c 93       	st	X, r24
    232e:	cc 0f       	add	r28, r28
    2330:	dd 1f       	adc	r29, r29
    2332:	cc 0f       	add	r28, r28
    2334:	dd 1f       	adc	r29, r29
    2336:	cc 0f       	add	r28, r28
    2338:	dd 1f       	adc	r29, r29
    233a:	c4 5f       	subi	r28, 0xF4	; 244
    233c:	dd 4d       	sbci	r29, 0xDD	; 221
    233e:	1e 8a       	std	Y+22, r1	; 0x16
    2340:	1f 8a       	std	Y+23, r1	; 0x17
    2342:	1a 8a       	std	Y+18, r1	; 0x12
    2344:	1b 8a       	std	Y+19, r1	; 0x13
    2346:	f7 01       	movw	r30, r14
    2348:	02 e0       	ldi	r16, 0x02	; 2
    234a:	06 93       	lac	Z, r16
    234c:	b4 c0       	rjmp	.+360    	; 0x24b6 <udd_ep_trans_complet+0x29c>
    234e:	fe 01       	movw	r30, r28
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	e4 5f       	subi	r30, 0xF4	; 244
    235e:	fd 4d       	sbci	r31, 0xDD	; 221
    2360:	a2 88       	ldd	r10, Z+18	; 0x12
    2362:	b3 88       	ldd	r11, Z+19	; 0x13
    2364:	d8 01       	movw	r26, r16
    2366:	8c 91       	ld	r24, X
    2368:	82 ff       	sbrs	r24, 2
    236a:	19 c0       	rjmp	.+50     	; 0x239e <udd_ep_trans_complet+0x184>
    236c:	11 96       	adiw	r26, 0x01	; 1
    236e:	ed 91       	ld	r30, X+
    2370:	fc 91       	ld	r31, X
    2372:	12 97       	sbiw	r26, 0x02	; 2
    2374:	15 96       	adiw	r26, 0x05	; 5
    2376:	2d 91       	ld	r18, X+
    2378:	3c 91       	ld	r19, X
    237a:	16 97       	sbiw	r26, 0x06	; 6
    237c:	13 96       	adiw	r26, 0x03	; 3
    237e:	8d 91       	ld	r24, X+
    2380:	9c 91       	ld	r25, X
    2382:	14 97       	sbiw	r26, 0x04	; 4
    2384:	b4 01       	movw	r22, r8
    2386:	0d d5       	rcall	.+2586   	; 0x2da2 <__udivmodhi4>
    2388:	b0 e4       	ldi	r27, 0x40	; 64
    238a:	db 9e       	mul	r13, r27
    238c:	b0 01       	movw	r22, r0
    238e:	11 24       	eor	r1, r1
    2390:	6f 56       	subi	r22, 0x6F	; 111
    2392:	7f 4d       	sbci	r23, 0xDF	; 223
    2394:	ac 01       	movw	r20, r24
    2396:	cf 01       	movw	r24, r30
    2398:	82 0f       	add	r24, r18
    239a:	93 1f       	adc	r25, r19
    239c:	1c d5       	rcall	.+2616   	; 0x2dd6 <memcpy>
    239e:	f8 01       	movw	r30, r16
    23a0:	25 81       	ldd	r18, Z+5	; 0x05
    23a2:	36 81       	ldd	r19, Z+6	; 0x06
    23a4:	2a 0d       	add	r18, r10
    23a6:	3b 1d       	adc	r19, r11
    23a8:	25 83       	std	Z+5, r18	; 0x05
    23aa:	36 83       	std	Z+6, r19	; 0x06
    23ac:	83 81       	ldd	r24, Z+3	; 0x03
    23ae:	94 81       	ldd	r25, Z+4	; 0x04
    23b0:	82 17       	cp	r24, r18
    23b2:	93 07       	cpc	r25, r19
    23b4:	68 f4       	brcc	.+26     	; 0x23d0 <udd_ep_trans_complet+0x1b6>
    23b6:	85 83       	std	Z+5, r24	; 0x05
    23b8:	96 83       	std	Z+6, r25	; 0x06
    23ba:	cc 0f       	add	r28, r28
    23bc:	dd 1f       	adc	r29, r29
    23be:	cc 0f       	add	r28, r28
    23c0:	dd 1f       	adc	r29, r29
    23c2:	cc 0f       	add	r28, r28
    23c4:	dd 1f       	adc	r29, r29
    23c6:	c4 5f       	subi	r28, 0xF4	; 244
    23c8:	dd 4d       	sbci	r29, 0xDD	; 221
    23ca:	8e 89       	ldd	r24, Y+22	; 0x16
    23cc:	9f 89       	ldd	r25, Y+23	; 0x17
    23ce:	60 c0       	rjmp	.+192    	; 0x2490 <udd_ep_trans_complet+0x276>
    23d0:	fe 01       	movw	r30, r28
    23d2:	ee 0f       	add	r30, r30
    23d4:	ff 1f       	adc	r31, r31
    23d6:	ee 0f       	add	r30, r30
    23d8:	ff 1f       	adc	r31, r31
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	e4 5f       	subi	r30, 0xF4	; 244
    23e0:	fd 4d       	sbci	r31, 0xDD	; 221
    23e2:	46 89       	ldd	r20, Z+22	; 0x16
    23e4:	57 89       	ldd	r21, Z+23	; 0x17
    23e6:	4a 15       	cp	r20, r10
    23e8:	5b 05       	cpc	r21, r11
    23ea:	09 f0       	breq	.+2      	; 0x23ee <udd_ep_trans_complet+0x1d4>
    23ec:	51 c0       	rjmp	.+162    	; 0x2490 <udd_ep_trans_complet+0x276>
    23ee:	28 17       	cp	r18, r24
    23f0:	39 07       	cpc	r19, r25
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <udd_ep_trans_complet+0x1dc>
    23f4:	4d c0       	rjmp	.+154    	; 0x2490 <udd_ep_trans_complet+0x276>
    23f6:	ac 01       	movw	r20, r24
    23f8:	42 1b       	sub	r20, r18
    23fa:	53 0b       	sbc	r21, r19
    23fc:	9a 01       	movw	r18, r20
    23fe:	21 15       	cp	r18, r1
    2400:	54 e0       	ldi	r21, 0x04	; 4
    2402:	35 07       	cpc	r19, r21
    2404:	50 f0       	brcs	.+20     	; 0x241a <udd_ep_trans_complet+0x200>
    2406:	2f ef       	ldi	r18, 0xFF	; 255
    2408:	33 e0       	ldi	r19, 0x03	; 3
    240a:	c9 01       	movw	r24, r18
    240c:	b4 01       	movw	r22, r8
    240e:	c9 d4       	rcall	.+2450   	; 0x2da2 <__udivmodhi4>
    2410:	d9 01       	movw	r26, r18
    2412:	a8 1b       	sub	r26, r24
    2414:	b9 0b       	sbc	r27, r25
    2416:	cd 01       	movw	r24, r26
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <udd_ep_trans_complet+0x20e>
    241a:	c9 01       	movw	r24, r18
    241c:	b4 01       	movw	r22, r8
    241e:	c1 d4       	rcall	.+2434   	; 0x2da2 <__udivmodhi4>
    2420:	f9 01       	movw	r30, r18
    2422:	e8 1b       	sub	r30, r24
    2424:	f9 0b       	sbc	r31, r25
    2426:	cf 01       	movw	r24, r30
    2428:	fe 01       	movw	r30, r28
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	e4 5f       	subi	r30, 0xF4	; 244
    2438:	fd 4d       	sbci	r31, 0xDD	; 221
    243a:	12 8a       	std	Z+18, r1	; 0x12
    243c:	13 8a       	std	Z+19, r1	; 0x13
    243e:	88 15       	cp	r24, r8
    2440:	99 05       	cpc	r25, r9
    2442:	78 f4       	brcc	.+30     	; 0x2462 <udd_ep_trans_complet+0x248>
    2444:	d8 01       	movw	r26, r16
    2446:	8c 91       	ld	r24, X
    2448:	84 60       	ori	r24, 0x04	; 4
    244a:	8c 93       	st	X, r24
    244c:	b0 e4       	ldi	r27, 0x40	; 64
    244e:	db 9e       	mul	r13, r27
    2450:	c0 01       	movw	r24, r0
    2452:	11 24       	eor	r1, r1
    2454:	8f 56       	subi	r24, 0x6F	; 111
    2456:	9f 4d       	sbci	r25, 0xDF	; 223
    2458:	84 8b       	std	Z+20, r24	; 0x14
    245a:	95 8b       	std	Z+21, r25	; 0x15
    245c:	86 8a       	std	Z+22, r8	; 0x16
    245e:	97 8a       	std	Z+23, r9	; 0x17
    2460:	13 c0       	rjmp	.+38     	; 0x2488 <udd_ep_trans_complet+0x26e>
    2462:	f8 01       	movw	r30, r16
    2464:	41 81       	ldd	r20, Z+1	; 0x01
    2466:	52 81       	ldd	r21, Z+2	; 0x02
    2468:	25 81       	ldd	r18, Z+5	; 0x05
    246a:	36 81       	ldd	r19, Z+6	; 0x06
    246c:	24 0f       	add	r18, r20
    246e:	35 1f       	adc	r19, r21
    2470:	cc 0f       	add	r28, r28
    2472:	dd 1f       	adc	r29, r29
    2474:	cc 0f       	add	r28, r28
    2476:	dd 1f       	adc	r29, r29
    2478:	cc 0f       	add	r28, r28
    247a:	dd 1f       	adc	r29, r29
    247c:	c4 5f       	subi	r28, 0xF4	; 244
    247e:	dd 4d       	sbci	r29, 0xDD	; 221
    2480:	2c 8b       	std	Y+20, r18	; 0x14
    2482:	3d 8b       	std	Y+21, r19	; 0x15
    2484:	8e 8b       	std	Y+22, r24	; 0x16
    2486:	9f 8b       	std	Y+23, r25	; 0x17
    2488:	f7 01       	movw	r30, r14
    248a:	02 e0       	ldi	r16, 0x02	; 2
    248c:	06 93       	lac	Z, r16
    248e:	13 c0       	rjmp	.+38     	; 0x24b6 <udd_ep_trans_complet+0x29c>
    2490:	d8 01       	movw	r26, r16
    2492:	8c 91       	ld	r24, X
    2494:	80 ff       	sbrs	r24, 0
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <udd_ep_trans_complet+0x29c>
    2498:	8e 7f       	andi	r24, 0xFE	; 254
    249a:	8c 93       	st	X, r24
    249c:	17 96       	adiw	r26, 0x07	; 7
    249e:	ed 91       	ld	r30, X+
    24a0:	fc 91       	ld	r31, X
    24a2:	18 97       	sbiw	r26, 0x08	; 8
    24a4:	30 97       	sbiw	r30, 0x00	; 0
    24a6:	39 f0       	breq	.+14     	; 0x24b6 <udd_ep_trans_complet+0x29c>
    24a8:	15 96       	adiw	r26, 0x05	; 5
    24aa:	6d 91       	ld	r22, X+
    24ac:	7c 91       	ld	r23, X
    24ae:	16 97       	sbiw	r26, 0x06	; 6
    24b0:	4d 2d       	mov	r20, r13
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	09 95       	icall
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	bf 90       	pop	r11
    24c6:	af 90       	pop	r10
    24c8:	9f 90       	pop	r9
    24ca:	8f 90       	pop	r8
    24cc:	08 95       	ret

000024ce <udd_attach>:
    24ce:	cf 93       	push	r28
    24d0:	cf b7       	in	r28, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	11 dd       	rcall	.-1502   	; 0x1efa <udd_sleep_mode>
    24d8:	ea ec       	ldi	r30, 0xCA	; 202
    24da:	f4 e0       	ldi	r31, 0x04	; 4
    24dc:	80 e4       	ldi	r24, 0x40	; 64
    24de:	80 83       	st	Z, r24
    24e0:	80 e2       	ldi	r24, 0x20	; 32
    24e2:	80 83       	st	Z, r24
    24e4:	e1 ec       	ldi	r30, 0xC1	; 193
    24e6:	f4 e0       	ldi	r31, 0x04	; 4
    24e8:	80 81       	ld	r24, Z
    24ea:	81 60       	ori	r24, 0x01	; 1
    24ec:	80 83       	st	Z, r24
    24ee:	a9 ec       	ldi	r26, 0xC9	; 201
    24f0:	b4 e0       	ldi	r27, 0x04	; 4
    24f2:	8c 91       	ld	r24, X
    24f4:	82 60       	ori	r24, 0x02	; 2
    24f6:	8c 93       	st	X, r24
    24f8:	e8 ec       	ldi	r30, 0xC8	; 200
    24fa:	f4 e0       	ldi	r31, 0x04	; 4
    24fc:	80 81       	ld	r24, Z
    24fe:	80 64       	ori	r24, 0x40	; 64
    2500:	80 83       	st	Z, r24
    2502:	8c 91       	ld	r24, X
    2504:	81 60       	ori	r24, 0x01	; 1
    2506:	8c 93       	st	X, r24
    2508:	80 81       	ld	r24, Z
    250a:	80 68       	ori	r24, 0x80	; 128
    250c:	80 83       	st	Z, r24
    250e:	cf bf       	out	0x3f, r28	; 63
    2510:	cf 91       	pop	r28
    2512:	08 95       	ret

00002514 <udd_enable>:
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	c0 e6       	ldi	r28, 0x60	; 96
    251a:	d0 e0       	ldi	r29, 0x00	; 0
    251c:	18 82       	st	Y, r1
    251e:	80 e3       	ldi	r24, 0x30	; 48
    2520:	0e 94 0d 0a 	call	0x141a	; 0x141a <sysclk_enable_usb>
    2524:	e0 ec       	ldi	r30, 0xC0	; 192
    2526:	f4 e0       	ldi	r31, 0x04	; 4
    2528:	80 81       	ld	r24, Z
    252a:	80 64       	ori	r24, 0x40	; 64
    252c:	80 83       	st	Z, r24
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	88 83       	st	Y, r24
    2532:	cf b7       	in	r28, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	fc 01       	movw	r30, r24
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	e4 5f       	subi	r30, 0xF4	; 244
    254a:	fd 4d       	sbci	r31, 0xDD	; 221
    254c:	11 8a       	std	Z+17, r1	; 0x11
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	88 30       	cpi	r24, 0x08	; 8
    2552:	91 05       	cpc	r25, r1
    2554:	91 f7       	brne	.-28     	; 0x253a <udd_enable+0x26>
    2556:	e1 e9       	ldi	r30, 0x91	; 145
    2558:	f1 e2       	ldi	r31, 0x21	; 33
    255a:	80 81       	ld	r24, Z
    255c:	8e 7f       	andi	r24, 0xFE	; 254
    255e:	80 83       	st	Z, r24
    2560:	ea e9       	ldi	r30, 0x9A	; 154
    2562:	f1 e2       	ldi	r31, 0x21	; 33
    2564:	80 81       	ld	r24, Z
    2566:	8e 7f       	andi	r24, 0xFE	; 254
    2568:	80 83       	st	Z, r24
    256a:	e3 ea       	ldi	r30, 0xA3	; 163
    256c:	f1 e2       	ldi	r31, 0x21	; 33
    256e:	80 81       	ld	r24, Z
    2570:	8e 7f       	andi	r24, 0xFE	; 254
    2572:	80 83       	st	Z, r24
    2574:	ec ea       	ldi	r30, 0xAC	; 172
    2576:	f1 e2       	ldi	r31, 0x21	; 33
    2578:	80 81       	ld	r24, Z
    257a:	8e 7f       	andi	r24, 0xFE	; 254
    257c:	80 83       	st	Z, r24
    257e:	e5 eb       	ldi	r30, 0xB5	; 181
    2580:	f1 e2       	ldi	r31, 0x21	; 33
    2582:	80 81       	ld	r24, Z
    2584:	8e 7f       	andi	r24, 0xFE	; 254
    2586:	80 83       	st	Z, r24
    2588:	ee eb       	ldi	r30, 0xBE	; 190
    258a:	f1 e2       	ldi	r31, 0x21	; 33
    258c:	80 81       	ld	r24, Z
    258e:	8e 7f       	andi	r24, 0xFE	; 254
    2590:	80 83       	st	Z, r24
    2592:	6a e1       	ldi	r22, 0x1A	; 26
    2594:	70 e0       	ldi	r23, 0x00	; 0
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	a6 dc       	rcall	.-1716   	; 0x1ee6 <nvm_read_byte>
    259a:	8f 3f       	cpi	r24, 0xFF	; 255
    259c:	19 f0       	breq	.+6      	; 0x25a4 <udd_enable+0x90>
    259e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <udd_enable+0x96>
    25a4:	8f e1       	ldi	r24, 0x1F	; 31
    25a6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    25aa:	6b e1       	ldi	r22, 0x1B	; 27
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	9a dc       	rcall	.-1740   	; 0x1ee6 <nvm_read_byte>
    25b2:	8f 3f       	cpi	r24, 0xFF	; 255
    25b4:	19 f0       	breq	.+6      	; 0x25bc <udd_enable+0xa8>
    25b6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    25ba:	03 c0       	rjmp	.+6      	; 0x25c2 <udd_enable+0xae>
    25bc:	8f e1       	ldi	r24, 0x1F	; 31
    25be:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    25c2:	e0 ec       	ldi	r30, 0xC0	; 192
    25c4:	f4 e0       	ldi	r31, 0x04	; 4
    25c6:	80 81       	ld	r24, Z
    25c8:	83 60       	ori	r24, 0x03	; 3
    25ca:	80 83       	st	Z, r24
    25cc:	80 81       	ld	r24, Z
    25ce:	80 68       	ori	r24, 0x80	; 128
    25d0:	80 83       	st	Z, r24
    25d2:	80 81       	ld	r24, Z
    25d4:	80 61       	ori	r24, 0x10	; 16
    25d6:	80 83       	st	Z, r24
    25d8:	8c e1       	ldi	r24, 0x1C	; 28
    25da:	92 e2       	ldi	r25, 0x22	; 34
    25dc:	86 83       	std	Z+6, r24	; 0x06
    25de:	97 83       	std	Z+7, r25	; 0x07
    25e0:	80 81       	ld	r24, Z
    25e2:	80 62       	ori	r24, 0x20	; 32
    25e4:	80 83       	st	Z, r24
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    25ec:	e8 ec       	ldi	r30, 0xC8	; 200
    25ee:	f4 e0       	ldi	r31, 0x04	; 4
    25f0:	80 81       	ld	r24, Z
    25f2:	82 60       	ori	r24, 0x02	; 2
    25f4:	80 83       	st	Z, r24
    25f6:	10 92 60 22 	sts	0x2260, r1	; 0x802260 <udd_b_idle>
    25fa:	80 91 5b 2e 	lds	r24, 0x2E5B	; 0x802e5b <sleepmgr_locks+0x5>
    25fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2600:	09 f4       	brne	.+2      	; 0x2604 <udd_enable+0xf0>
    2602:	ff cf       	rjmp	.-2      	; 0x2602 <udd_enable+0xee>
    2604:	9f b7       	in	r25, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	e6 e5       	ldi	r30, 0x56	; 86
    260a:	fe e2       	ldi	r31, 0x2E	; 46
    260c:	85 81       	ldd	r24, Z+5	; 0x05
    260e:	8f 5f       	subi	r24, 0xFF	; 255
    2610:	85 83       	std	Z+5, r24	; 0x05
    2612:	9f bf       	out	0x3f, r25	; 63
    2614:	5c df       	rcall	.-328    	; 0x24ce <udd_attach>
    2616:	cf bf       	out	0x3f, r28	; 63
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	08 95       	ret

0000261e <udd_set_address>:
    261e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2622:	08 95       	ret

00002624 <udd_getaddress>:
    2624:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2628:	08 95       	ret

0000262a <udd_set_setup_payload>:
    262a:	ea e6       	ldi	r30, 0x6A	; 106
    262c:	f4 e2       	ldi	r31, 0x24	; 36
    262e:	80 87       	std	Z+8, r24	; 0x08
    2630:	91 87       	std	Z+9, r25	; 0x09
    2632:	62 87       	std	Z+10, r22	; 0x0a
    2634:	73 87       	std	Z+11, r23	; 0x0b
    2636:	08 95       	ret

00002638 <udd_ep_alloc>:
    2638:	28 2f       	mov	r18, r24
    263a:	2f 70       	andi	r18, 0x0F	; 15
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	22 0f       	add	r18, r18
    2640:	33 1f       	adc	r19, r19
    2642:	08 2e       	mov	r0, r24
    2644:	00 0c       	add	r0, r0
    2646:	99 0b       	sbc	r25, r25
    2648:	88 27       	eor	r24, r24
    264a:	99 0f       	add	r25, r25
    264c:	88 1f       	adc	r24, r24
    264e:	99 27       	eor	r25, r25
    2650:	82 0f       	add	r24, r18
    2652:	93 1f       	adc	r25, r19
    2654:	fc 01       	movw	r30, r24
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	ee 0f       	add	r30, r30
    265c:	ff 1f       	adc	r31, r31
    265e:	ee 0f       	add	r30, r30
    2660:	ff 1f       	adc	r31, r31
    2662:	e4 5f       	subi	r30, 0xF4	; 244
    2664:	fd 4d       	sbci	r31, 0xDD	; 221
    2666:	21 89       	ldd	r18, Z+17	; 0x11
    2668:	20 7c       	andi	r18, 0xC0	; 192
    266a:	09 f0       	breq	.+2      	; 0x266e <udd_ep_alloc+0x36>
    266c:	58 c0       	rjmp	.+176    	; 0x271e <udd_ep_alloc+0xe6>
    266e:	63 70       	andi	r22, 0x03	; 3
    2670:	61 30       	cpi	r22, 0x01	; 1
    2672:	11 f0       	breq	.+4      	; 0x2678 <udd_ep_alloc+0x40>
    2674:	18 f4       	brcc	.+6      	; 0x267c <udd_ep_alloc+0x44>
    2676:	04 c0       	rjmp	.+8      	; 0x2680 <udd_ep_alloc+0x48>
    2678:	20 ec       	ldi	r18, 0xC0	; 192
    267a:	03 c0       	rjmp	.+6      	; 0x2682 <udd_ep_alloc+0x4a>
    267c:	20 e8       	ldi	r18, 0x80	; 128
    267e:	01 c0       	rjmp	.+2      	; 0x2682 <udd_ep_alloc+0x4a>
    2680:	20 e4       	ldi	r18, 0x40	; 64
    2682:	40 38       	cpi	r20, 0x80	; 128
    2684:	51 05       	cpc	r21, r1
    2686:	e9 f0       	breq	.+58     	; 0x26c2 <udd_ep_alloc+0x8a>
    2688:	50 f4       	brcc	.+20     	; 0x269e <udd_ep_alloc+0x66>
    268a:	40 32       	cpi	r20, 0x20	; 32
    268c:	51 05       	cpc	r21, r1
    268e:	a9 f0       	breq	.+42     	; 0x26ba <udd_ep_alloc+0x82>
    2690:	40 34       	cpi	r20, 0x40	; 64
    2692:	51 05       	cpc	r21, r1
    2694:	a1 f0       	breq	.+40     	; 0x26be <udd_ep_alloc+0x86>
    2696:	40 31       	cpi	r20, 0x10	; 16
    2698:	51 05       	cpc	r21, r1
    269a:	d9 f4       	brne	.+54     	; 0x26d2 <udd_ep_alloc+0x9a>
    269c:	0c c0       	rjmp	.+24     	; 0x26b6 <udd_ep_alloc+0x7e>
    269e:	41 15       	cp	r20, r1
    26a0:	32 e0       	ldi	r19, 0x02	; 2
    26a2:	53 07       	cpc	r21, r19
    26a4:	91 f0       	breq	.+36     	; 0x26ca <udd_ep_alloc+0x92>
    26a6:	4f 3f       	cpi	r20, 0xFF	; 255
    26a8:	33 e0       	ldi	r19, 0x03	; 3
    26aa:	53 07       	cpc	r21, r19
    26ac:	81 f0       	breq	.+32     	; 0x26ce <udd_ep_alloc+0x96>
    26ae:	41 15       	cp	r20, r1
    26b0:	51 40       	sbci	r21, 0x01	; 1
    26b2:	79 f4       	brne	.+30     	; 0x26d2 <udd_ep_alloc+0x9a>
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <udd_ep_alloc+0x8e>
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <udd_ep_alloc+0x9c>
    26ba:	42 e0       	ldi	r20, 0x02	; 2
    26bc:	0b c0       	rjmp	.+22     	; 0x26d4 <udd_ep_alloc+0x9c>
    26be:	43 e0       	ldi	r20, 0x03	; 3
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <udd_ep_alloc+0x9c>
    26c2:	44 e0       	ldi	r20, 0x04	; 4
    26c4:	07 c0       	rjmp	.+14     	; 0x26d4 <udd_ep_alloc+0x9c>
    26c6:	45 e0       	ldi	r20, 0x05	; 5
    26c8:	05 c0       	rjmp	.+10     	; 0x26d4 <udd_ep_alloc+0x9c>
    26ca:	46 e0       	ldi	r20, 0x06	; 6
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <udd_ep_alloc+0x9c>
    26ce:	47 e0       	ldi	r20, 0x07	; 7
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <udd_ep_alloc+0x9c>
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	fc 01       	movw	r30, r24
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	ee 0f       	add	r30, r30
    26dc:	ff 1f       	adc	r31, r31
    26de:	ee 0f       	add	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	e4 5f       	subi	r30, 0xF4	; 244
    26e4:	fd 4d       	sbci	r31, 0xDD	; 221
    26e6:	11 8a       	std	Z+17, r1	; 0x11
    26e8:	dc 01       	movw	r26, r24
    26ea:	aa 0f       	add	r26, r26
    26ec:	bb 1f       	adc	r27, r27
    26ee:	aa 0f       	add	r26, r26
    26f0:	bb 1f       	adc	r27, r27
    26f2:	aa 0f       	add	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	a4 5e       	subi	r26, 0xE4	; 228
    26f8:	bd 4d       	sbci	r27, 0xDD	; 221
    26fa:	36 e0       	ldi	r19, 0x06	; 6
    26fc:	3c 93       	st	X, r19
    26fe:	24 2b       	or	r18, r20
    2700:	21 8b       	std	Z+17, r18	; 0x11
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	88 0f       	add	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	fc 01       	movw	r30, r24
    2710:	e4 5f       	subi	r30, 0xF4	; 244
    2712:	fd 4d       	sbci	r31, 0xDD	; 221
    2714:	81 89       	ldd	r24, Z+17	; 0x11
    2716:	80 62       	ori	r24, 0x20	; 32
    2718:	81 8b       	std	Z+17, r24	; 0x11
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	08 95       	ret
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	08 95       	ret

00002722 <udd_ep_is_halted>:
    2722:	e8 2f       	mov	r30, r24
    2724:	ef 70       	andi	r30, 0x0F	; 15
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	ee 0f       	add	r30, r30
    272a:	ff 1f       	adc	r31, r31
    272c:	08 2e       	mov	r0, r24
    272e:	00 0c       	add	r0, r0
    2730:	99 0b       	sbc	r25, r25
    2732:	88 27       	eor	r24, r24
    2734:	99 0f       	add	r25, r25
    2736:	88 1f       	adc	r24, r24
    2738:	99 27       	eor	r25, r25
    273a:	e8 0f       	add	r30, r24
    273c:	f9 1f       	adc	r31, r25
    273e:	ee 0f       	add	r30, r30
    2740:	ff 1f       	adc	r31, r31
    2742:	ee 0f       	add	r30, r30
    2744:	ff 1f       	adc	r31, r31
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	e4 5f       	subi	r30, 0xF4	; 244
    274c:	fd 4d       	sbci	r31, 0xDD	; 221
    274e:	81 89       	ldd	r24, Z+17	; 0x11
    2750:	82 fb       	bst	r24, 2
    2752:	88 27       	eor	r24, r24
    2754:	80 f9       	bld	r24, 0
    2756:	08 95       	ret

00002758 <udd_ep_clear_halt>:
    2758:	28 2f       	mov	r18, r24
    275a:	2f 70       	andi	r18, 0x0F	; 15
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	a9 01       	movw	r20, r18
    2760:	44 0f       	add	r20, r20
    2762:	55 1f       	adc	r21, r21
    2764:	28 2f       	mov	r18, r24
    2766:	08 2e       	mov	r0, r24
    2768:	00 0c       	add	r0, r0
    276a:	33 0b       	sbc	r19, r19
    276c:	22 27       	eor	r18, r18
    276e:	33 0f       	add	r19, r19
    2770:	22 1f       	adc	r18, r18
    2772:	33 27       	eor	r19, r19
    2774:	24 0f       	add	r18, r20
    2776:	35 1f       	adc	r19, r21
    2778:	f9 01       	movw	r30, r18
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	ee 0f       	add	r30, r30
    2780:	ff 1f       	adc	r31, r31
    2782:	ee 0f       	add	r30, r30
    2784:	ff 1f       	adc	r31, r31
    2786:	e4 5f       	subi	r30, 0xF4	; 244
    2788:	fd 4d       	sbci	r31, 0xDD	; 221
    278a:	91 89       	ldd	r25, Z+17	; 0x11
    278c:	92 ff       	sbrs	r25, 2
    278e:	17 c0       	rjmp	.+46     	; 0x27be <udd_ep_clear_halt+0x66>
    2790:	22 0f       	add	r18, r18
    2792:	33 1f       	adc	r19, r19
    2794:	22 0f       	add	r18, r18
    2796:	33 1f       	adc	r19, r19
    2798:	22 0f       	add	r18, r18
    279a:	33 1f       	adc	r19, r19
    279c:	f9 01       	movw	r30, r18
    279e:	e4 5f       	subi	r30, 0xF4	; 244
    27a0:	fd 4d       	sbci	r31, 0xDD	; 221
    27a2:	91 89       	ldd	r25, Z+17	; 0x11
    27a4:	9b 7f       	andi	r25, 0xFB	; 251
    27a6:	91 8b       	std	Z+17, r25	; 0x11
    27a8:	ae dc       	rcall	.-1700   	; 0x2106 <udd_ep_get_job>
    27aa:	fc 01       	movw	r30, r24
    27ac:	80 81       	ld	r24, Z
    27ae:	80 ff       	sbrs	r24, 0
    27b0:	06 c0       	rjmp	.+12     	; 0x27be <udd_ep_clear_halt+0x66>
    27b2:	8e 7f       	andi	r24, 0xFE	; 254
    27b4:	80 83       	st	Z, r24
    27b6:	07 80       	ldd	r0, Z+7	; 0x07
    27b8:	f0 85       	ldd	r31, Z+8	; 0x08
    27ba:	e0 2d       	mov	r30, r0
    27bc:	09 95       	icall
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	08 95       	ret

000027c2 <udd_ep_run>:
    27c2:	7f 92       	push	r7
    27c4:	8f 92       	push	r8
    27c6:	9f 92       	push	r9
    27c8:	af 92       	push	r10
    27ca:	bf 92       	push	r11
    27cc:	cf 92       	push	r12
    27ce:	df 92       	push	r13
    27d0:	ef 92       	push	r14
    27d2:	ff 92       	push	r15
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	98 2e       	mov	r9, r24
    27de:	86 2e       	mov	r8, r22
    27e0:	6a 01       	movw	r12, r20
    27e2:	79 01       	movw	r14, r18
    27e4:	90 dc       	rcall	.-1760   	; 0x2106 <udd_ep_get_job>
    27e6:	5c 01       	movw	r10, r24
    27e8:	79 2c       	mov	r7, r9
    27ea:	77 1c       	adc	r7, r7
    27ec:	77 24       	eor	r7, r7
    27ee:	77 1c       	adc	r7, r7
    27f0:	c9 2d       	mov	r28, r9
    27f2:	cf 70       	andi	r28, 0x0F	; 15
    27f4:	d0 e0       	ldi	r29, 0x00	; 0
    27f6:	cc 0f       	add	r28, r28
    27f8:	dd 1f       	adc	r29, r29
    27fa:	c7 0d       	add	r28, r7
    27fc:	d1 1d       	adc	r29, r1
    27fe:	fe 01       	movw	r30, r28
    2800:	ee 0f       	add	r30, r30
    2802:	ff 1f       	adc	r31, r31
    2804:	ee 0f       	add	r30, r30
    2806:	ff 1f       	adc	r31, r31
    2808:	ee 0f       	add	r30, r30
    280a:	ff 1f       	adc	r31, r31
    280c:	e4 5f       	subi	r30, 0xF4	; 244
    280e:	fd 4d       	sbci	r31, 0xDD	; 221
    2810:	81 89       	ldd	r24, Z+17	; 0x11
    2812:	80 7c       	andi	r24, 0xC0	; 192
    2814:	09 f4       	brne	.+2      	; 0x2818 <udd_ep_run+0x56>
    2816:	7d c0       	rjmp	.+250    	; 0x2912 <udd_ep_run+0x150>
    2818:	fe 01       	movw	r30, r28
    281a:	ee 0f       	add	r30, r30
    281c:	ff 1f       	adc	r31, r31
    281e:	ee 0f       	add	r30, r30
    2820:	ff 1f       	adc	r31, r31
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	e4 5f       	subi	r30, 0xF4	; 244
    2828:	fd 4d       	sbci	r31, 0xDD	; 221
    282a:	81 89       	ldd	r24, Z+17	; 0x11
    282c:	80 7c       	andi	r24, 0xC0	; 192
    282e:	80 3c       	cpi	r24, 0xC0	; 192
    2830:	61 f0       	breq	.+24     	; 0x284a <udd_ep_run+0x88>
    2832:	fe 01       	movw	r30, r28
    2834:	ee 0f       	add	r30, r30
    2836:	ff 1f       	adc	r31, r31
    2838:	ee 0f       	add	r30, r30
    283a:	ff 1f       	adc	r31, r31
    283c:	ee 0f       	add	r30, r30
    283e:	ff 1f       	adc	r31, r31
    2840:	e4 5f       	subi	r30, 0xF4	; 244
    2842:	fd 4d       	sbci	r31, 0xDD	; 221
    2844:	81 89       	ldd	r24, Z+17	; 0x11
    2846:	82 fd       	sbrc	r24, 2
    2848:	66 c0       	rjmp	.+204    	; 0x2916 <udd_ep_run+0x154>
    284a:	8f b7       	in	r24, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	f5 01       	movw	r30, r10
    2850:	90 81       	ld	r25, Z
    2852:	90 ff       	sbrs	r25, 0
    2854:	03 c0       	rjmp	.+6      	; 0x285c <udd_ep_run+0x9a>
    2856:	8f bf       	out	0x3f, r24	; 63
    2858:	71 2c       	mov	r7, r1
    285a:	5e c0       	rjmp	.+188    	; 0x2918 <udd_ep_run+0x156>
    285c:	f5 01       	movw	r30, r10
    285e:	90 81       	ld	r25, Z
    2860:	91 60       	ori	r25, 0x01	; 1
    2862:	90 83       	st	Z, r25
    2864:	8f bf       	out	0x3f, r24	; 63
    2866:	c1 82       	std	Z+1, r12	; 0x01
    2868:	d2 82       	std	Z+2, r13	; 0x02
    286a:	e3 82       	std	Z+3, r14	; 0x03
    286c:	f4 82       	std	Z+4, r15	; 0x04
    286e:	15 82       	std	Z+5, r1	; 0x05
    2870:	16 82       	std	Z+6, r1	; 0x06
    2872:	07 83       	std	Z+7, r16	; 0x07
    2874:	10 87       	std	Z+8, r17	; 0x08
    2876:	81 10       	cpse	r8, r1
    2878:	06 c0       	rjmp	.+12     	; 0x2886 <udd_ep_run+0xc4>
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	e1 14       	cp	r14, r1
    287e:	f1 04       	cpc	r15, r1
    2880:	19 f0       	breq	.+6      	; 0x2888 <udd_ep_run+0xc6>
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	01 c0       	rjmp	.+2      	; 0x2888 <udd_ep_run+0xc6>
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	f5 01       	movw	r30, r10
    288a:	80 81       	ld	r24, Z
    288c:	90 fb       	bst	r25, 0
    288e:	81 f9       	bld	r24, 1
    2890:	8b 7f       	andi	r24, 0xFB	; 251
    2892:	80 83       	st	Z, r24
    2894:	77 20       	and	r7, r7
    2896:	59 f0       	breq	.+22     	; 0x28ae <udd_ep_run+0xec>
    2898:	cc 0f       	add	r28, r28
    289a:	dd 1f       	adc	r29, r29
    289c:	cc 0f       	add	r28, r28
    289e:	dd 1f       	adc	r29, r29
    28a0:	cc 0f       	add	r28, r28
    28a2:	dd 1f       	adc	r29, r29
    28a4:	c4 5f       	subi	r28, 0xF4	; 244
    28a6:	dd 4d       	sbci	r29, 0xDD	; 221
    28a8:	1e 8a       	std	Y+22, r1	; 0x16
    28aa:	1f 8a       	std	Y+23, r1	; 0x17
    28ac:	2d c0       	rjmp	.+90     	; 0x2908 <udd_ep_run+0x146>
    28ae:	fe 01       	movw	r30, r28
    28b0:	ee 0f       	add	r30, r30
    28b2:	ff 1f       	adc	r31, r31
    28b4:	ee 0f       	add	r30, r30
    28b6:	ff 1f       	adc	r31, r31
    28b8:	ee 0f       	add	r30, r30
    28ba:	ff 1f       	adc	r31, r31
    28bc:	e4 5f       	subi	r30, 0xF4	; 244
    28be:	fd 4d       	sbci	r31, 0xDD	; 221
    28c0:	81 89       	ldd	r24, Z+17	; 0x11
    28c2:	80 7c       	andi	r24, 0xC0	; 192
    28c4:	80 3c       	cpi	r24, 0xC0	; 192
    28c6:	a1 f4       	brne	.+40     	; 0x28f0 <udd_ep_run+0x12e>
    28c8:	ce 01       	movw	r24, r28
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	84 5e       	subi	r24, 0xE4	; 228
    28d8:	9d 4d       	sbci	r25, 0xDD	; 221
    28da:	ef db       	rcall	.-2082   	; 0x20ba <udd_ep_get_size>
    28dc:	bc 01       	movw	r22, r24
    28de:	c7 01       	movw	r24, r14
    28e0:	60 d2       	rcall	.+1216   	; 0x2da2 <__udivmodhi4>
    28e2:	89 2b       	or	r24, r25
    28e4:	29 f0       	breq	.+10     	; 0x28f0 <udd_ep_run+0x12e>
    28e6:	f5 01       	movw	r30, r10
    28e8:	80 81       	ld	r24, Z
    28ea:	8e 7f       	andi	r24, 0xFE	; 254
    28ec:	80 83       	st	Z, r24
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <udd_ep_run+0x156>
    28f0:	cc 0f       	add	r28, r28
    28f2:	dd 1f       	adc	r29, r29
    28f4:	cc 0f       	add	r28, r28
    28f6:	dd 1f       	adc	r29, r29
    28f8:	cc 0f       	add	r28, r28
    28fa:	dd 1f       	adc	r29, r29
    28fc:	c4 5f       	subi	r28, 0xF4	; 244
    28fe:	dd 4d       	sbci	r29, 0xDD	; 221
    2900:	1a 8a       	std	Y+18, r1	; 0x12
    2902:	1b 8a       	std	Y+19, r1	; 0x13
    2904:	1e 8a       	std	Y+22, r1	; 0x16
    2906:	1f 8a       	std	Y+23, r1	; 0x17
    2908:	89 2d       	mov	r24, r9
    290a:	87 dc       	rcall	.-1778   	; 0x221a <udd_ep_trans_complet>
    290c:	77 24       	eor	r7, r7
    290e:	73 94       	inc	r7
    2910:	03 c0       	rjmp	.+6      	; 0x2918 <udd_ep_run+0x156>
    2912:	71 2c       	mov	r7, r1
    2914:	01 c0       	rjmp	.+2      	; 0x2918 <udd_ep_run+0x156>
    2916:	71 2c       	mov	r7, r1
    2918:	87 2d       	mov	r24, r7
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	df 90       	pop	r13
    2928:	cf 90       	pop	r12
    292a:	bf 90       	pop	r11
    292c:	af 90       	pop	r10
    292e:	9f 90       	pop	r9
    2930:	8f 90       	pop	r8
    2932:	7f 90       	pop	r7
    2934:	08 95       	ret

00002936 <udd_ep_abort>:
    2936:	ff 92       	push	r15
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	18 2f       	mov	r17, r24
    2942:	f8 2e       	mov	r15, r24
    2944:	ff 1c       	adc	r15, r15
    2946:	ff 24       	eor	r15, r15
    2948:	ff 1c       	adc	r15, r15
    294a:	c8 2f       	mov	r28, r24
    294c:	cf 70       	andi	r28, 0x0F	; 15
    294e:	d0 e0       	ldi	r29, 0x00	; 0
    2950:	cc 0f       	add	r28, r28
    2952:	dd 1f       	adc	r29, r29
    2954:	cf 0d       	add	r28, r15
    2956:	d1 1d       	adc	r29, r1
    2958:	d6 db       	rcall	.-2132   	; 0x2106 <udd_ep_get_job>
    295a:	dc 01       	movw	r26, r24
    295c:	fe 01       	movw	r30, r28
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	ee 0f       	add	r30, r30
    2968:	ff 1f       	adc	r31, r31
    296a:	e4 5e       	subi	r30, 0xE4	; 228
    296c:	fd 4d       	sbci	r31, 0xDD	; 221
    296e:	02 e0       	ldi	r16, 0x02	; 2
    2970:	05 93       	las	Z, r16
    2972:	8c 91       	ld	r24, X
    2974:	80 ff       	sbrs	r24, 0
    2976:	22 c0       	rjmp	.+68     	; 0x29bc <udd_ep_abort+0x86>
    2978:	8e 7f       	andi	r24, 0xFE	; 254
    297a:	8c 93       	st	X, r24
    297c:	17 96       	adiw	r26, 0x07	; 7
    297e:	ed 91       	ld	r30, X+
    2980:	fc 91       	ld	r31, X
    2982:	18 97       	sbiw	r26, 0x08	; 8
    2984:	30 97       	sbiw	r30, 0x00	; 0
    2986:	d1 f0       	breq	.+52     	; 0x29bc <udd_ep_abort+0x86>
    2988:	ff 20       	and	r15, r15
    298a:	59 f0       	breq	.+22     	; 0x29a2 <udd_ep_abort+0x6c>
    298c:	cc 0f       	add	r28, r28
    298e:	dd 1f       	adc	r29, r29
    2990:	cc 0f       	add	r28, r28
    2992:	dd 1f       	adc	r29, r29
    2994:	cc 0f       	add	r28, r28
    2996:	dd 1f       	adc	r29, r29
    2998:	c4 5f       	subi	r28, 0xF4	; 244
    299a:	dd 4d       	sbci	r29, 0xDD	; 221
    299c:	6e 89       	ldd	r22, Y+22	; 0x16
    299e:	7f 89       	ldd	r23, Y+23	; 0x17
    29a0:	0a c0       	rjmp	.+20     	; 0x29b6 <udd_ep_abort+0x80>
    29a2:	cc 0f       	add	r28, r28
    29a4:	dd 1f       	adc	r29, r29
    29a6:	cc 0f       	add	r28, r28
    29a8:	dd 1f       	adc	r29, r29
    29aa:	cc 0f       	add	r28, r28
    29ac:	dd 1f       	adc	r29, r29
    29ae:	c4 5f       	subi	r28, 0xF4	; 244
    29b0:	dd 4d       	sbci	r29, 0xDD	; 221
    29b2:	6a 89       	ldd	r22, Y+18	; 0x12
    29b4:	7b 89       	ldd	r23, Y+19	; 0x13
    29b6:	41 2f       	mov	r20, r17
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	09 95       	icall
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	ff 90       	pop	r15
    29c6:	08 95       	ret

000029c8 <udd_ep_free>:
    29c8:	cf 93       	push	r28
    29ca:	c8 2f       	mov	r28, r24
    29cc:	b4 df       	rcall	.-152    	; 0x2936 <udd_ep_abort>
    29ce:	ec 2f       	mov	r30, r28
    29d0:	ef 70       	andi	r30, 0x0F	; 15
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	8c 2f       	mov	r24, r28
    29da:	cc 0f       	add	r28, r28
    29dc:	99 0b       	sbc	r25, r25
    29de:	88 27       	eor	r24, r24
    29e0:	99 0f       	add	r25, r25
    29e2:	88 1f       	adc	r24, r24
    29e4:	99 27       	eor	r25, r25
    29e6:	e8 0f       	add	r30, r24
    29e8:	f9 1f       	adc	r31, r25
    29ea:	ee 0f       	add	r30, r30
    29ec:	ff 1f       	adc	r31, r31
    29ee:	ee 0f       	add	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	e4 5f       	subi	r30, 0xF4	; 244
    29f8:	fd 4d       	sbci	r31, 0xDD	; 221
    29fa:	11 8a       	std	Z+17, r1	; 0x11
    29fc:	cf 91       	pop	r28
    29fe:	08 95       	ret

00002a00 <udd_ep_set_halt>:
    2a00:	0f 93       	push	r16
    2a02:	e8 2f       	mov	r30, r24
    2a04:	ef 70       	andi	r30, 0x0F	; 15
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	ee 0f       	add	r30, r30
    2a0a:	ff 1f       	adc	r31, r31
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	08 2e       	mov	r0, r24
    2a10:	00 0c       	add	r0, r0
    2a12:	33 0b       	sbc	r19, r19
    2a14:	22 27       	eor	r18, r18
    2a16:	33 0f       	add	r19, r19
    2a18:	22 1f       	adc	r18, r18
    2a1a:	33 27       	eor	r19, r19
    2a1c:	e2 0f       	add	r30, r18
    2a1e:	f3 1f       	adc	r31, r19
    2a20:	df 01       	movw	r26, r30
    2a22:	aa 0f       	add	r26, r26
    2a24:	bb 1f       	adc	r27, r27
    2a26:	aa 0f       	add	r26, r26
    2a28:	bb 1f       	adc	r27, r27
    2a2a:	aa 0f       	add	r26, r26
    2a2c:	bb 1f       	adc	r27, r27
    2a2e:	a4 5f       	subi	r26, 0xF4	; 244
    2a30:	bd 4d       	sbci	r27, 0xDD	; 221
    2a32:	51 96       	adiw	r26, 0x11	; 17
    2a34:	9c 91       	ld	r25, X
    2a36:	51 97       	sbiw	r26, 0x11	; 17
    2a38:	94 60       	ori	r25, 0x04	; 4
    2a3a:	51 96       	adiw	r26, 0x11	; 17
    2a3c:	9c 93       	st	X, r25
    2a3e:	ee 0f       	add	r30, r30
    2a40:	ff 1f       	adc	r31, r31
    2a42:	ee 0f       	add	r30, r30
    2a44:	ff 1f       	adc	r31, r31
    2a46:	ee 0f       	add	r30, r30
    2a48:	ff 1f       	adc	r31, r31
    2a4a:	e4 5e       	subi	r30, 0xE4	; 228
    2a4c:	fd 4d       	sbci	r31, 0xDD	; 221
    2a4e:	01 e0       	ldi	r16, 0x01	; 1
    2a50:	06 93       	lac	Z, r16
    2a52:	71 df       	rcall	.-286    	; 0x2936 <udd_ep_abort>
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	0f 91       	pop	r16
    2a58:	08 95       	ret

00002a5a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2a5a:	1f 92       	push	r1
    2a5c:	0f 92       	push	r0
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	0f 92       	push	r0
    2a62:	11 24       	eor	r1, r1
    2a64:	0f 93       	push	r16
    2a66:	2f 93       	push	r18
    2a68:	3f 93       	push	r19
    2a6a:	4f 93       	push	r20
    2a6c:	5f 93       	push	r21
    2a6e:	6f 93       	push	r22
    2a70:	7f 93       	push	r23
    2a72:	8f 93       	push	r24
    2a74:	9f 93       	push	r25
    2a76:	af 93       	push	r26
    2a78:	bf 93       	push	r27
    2a7a:	ef 93       	push	r30
    2a7c:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2a7e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a82:	88 23       	and	r24, r24
    2a84:	44 f4       	brge	.+16     	; 0x2a96 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2a86:	80 e8       	ldi	r24, 0x80	; 128
    2a88:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2a8c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2a90:	0e 94 8d 02 	call	0x51a	; 0x51a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a94:	8a c0       	rjmp	.+276    	; 0x2baa <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2a96:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a9a:	82 ff       	sbrs	r24, 2
    2a9c:	20 c0       	rjmp	.+64     	; 0x2ade <__vector_125+0x84>
		udd_ack_underflow_event();
    2a9e:	84 e0       	ldi	r24, 0x04	; 4
    2aa0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2aa4:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <udd_sram+0x18>
    2aa8:	86 ff       	sbrs	r24, 6
    2aaa:	7f c0       	rjmp	.+254    	; 0x2baa <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2aac:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ab0:	81 fd       	sbrc	r24, 1
    2ab2:	7b c0       	rjmp	.+246    	; 0x2baa <__vector_125+0x150>
    2ab4:	43 db       	rcall	.-2426   	; 0x213c <udd_ctrl_interrupt_tc_setup>
    2ab6:	81 11       	cpse	r24, r1
    2ab8:	78 c0       	rjmp	.+240    	; 0x2baa <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2aba:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    2abe:	81 30       	cpi	r24, 0x01	; 1
    2ac0:	11 f4       	brne	.+4      	; 0x2ac6 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2ac2:	79 da       	rcall	.-2830   	; 0x1fb6 <udd_ctrl_send_zlp_in>
    2ac4:	72 c0       	rjmp	.+228    	; 0x2baa <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2ac6:	84 30       	cpi	r24, 0x04	; 4
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <__vector_125+0x72>
    2aca:	6f c0       	rjmp	.+222    	; 0x2baa <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2acc:	e5 e2       	ldi	r30, 0x25	; 37
    2ace:	f2 e2       	ldi	r31, 0x22	; 34
    2ad0:	04 e0       	ldi	r16, 0x04	; 4
    2ad2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2ad4:	ed e1       	ldi	r30, 0x1D	; 29
    2ad6:	f2 e2       	ldi	r31, 0x22	; 34
    2ad8:	04 e0       	ldi	r16, 0x04	; 4
    2ada:	05 93       	las	Z, r16
    2adc:	66 c0       	rjmp	.+204    	; 0x2baa <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2ade:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ae2:	81 ff       	sbrs	r24, 1
    2ae4:	5d c0       	rjmp	.+186    	; 0x2ba0 <__vector_125+0x146>
		udd_ack_overflow_event();
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2aec:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udd_sram+0x10>
    2af0:	86 ff       	sbrs	r24, 6
    2af2:	5b c0       	rjmp	.+182    	; 0x2baa <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2af4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2af8:	81 fd       	sbrc	r24, 1
    2afa:	57 c0       	rjmp	.+174    	; 0x2baa <__vector_125+0x150>
    2afc:	1f db       	rcall	.-2498   	; 0x213c <udd_ctrl_interrupt_tc_setup>
    2afe:	81 11       	cpse	r24, r1
    2b00:	54 c0       	rjmp	.+168    	; 0x2baa <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2b02:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    2b06:	82 30       	cpi	r24, 0x02	; 2
    2b08:	41 f4       	brne	.+16     	; 0x2b1a <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2b0a:	84 e0       	ldi	r24, 0x04	; 4
    2b0c:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2b10:	ec e1       	ldi	r30, 0x1C	; 28
    2b12:	f2 e2       	ldi	r31, 0x22	; 34
    2b14:	02 e0       	ldi	r16, 0x02	; 2
    2b16:	06 93       	lac	Z, r16
    2b18:	48 c0       	rjmp	.+144    	; 0x2baa <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2b1a:	83 30       	cpi	r24, 0x03	; 3
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <__vector_125+0xc6>
    2b1e:	45 c0       	rjmp	.+138    	; 0x2baa <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2b20:	e5 e2       	ldi	r30, 0x25	; 37
    2b22:	f2 e2       	ldi	r31, 0x22	; 34
    2b24:	04 e0       	ldi	r16, 0x04	; 4
    2b26:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b28:	ed e1       	ldi	r30, 0x1D	; 29
    2b2a:	f2 e2       	ldi	r31, 0x22	; 34
    2b2c:	04 e0       	ldi	r16, 0x04	; 4
    2b2e:	05 93       	las	Z, r16
    2b30:	3c c0       	rjmp	.+120    	; 0x2baa <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2b32:	80 e1       	ldi	r24, 0x10	; 16
    2b34:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	fd de       	rcall	.-518    	; 0x2936 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b3c:	81 e8       	ldi	r24, 0x81	; 129
    2b3e:	fb de       	rcall	.-522    	; 0x2936 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b40:	82 e0       	ldi	r24, 0x02	; 2
    2b42:	f9 de       	rcall	.-526    	; 0x2936 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b44:	82 e8       	ldi	r24, 0x82	; 130
    2b46:	f7 de       	rcall	.-530    	; 0x2936 <udd_ep_abort>
		}
#endif
		udc_reset();
    2b48:	0e 94 8f 0b 	call	0x171e	; 0x171e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2b4c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b50:	ec e0       	ldi	r30, 0x0C	; 12
    2b52:	f2 e2       	ldi	r31, 0x22	; 34
    2b54:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2b56:	96 e0       	ldi	r25, 0x06	; 6
    2b58:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b5a:	83 e4       	ldi	r24, 0x43	; 67
    2b5c:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b5e:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2b60:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b62:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2b64:	87 ec       	ldi	r24, 0xC7	; 199
    2b66:	91 e2       	ldi	r25, 0x21	; 33
    2b68:	84 8b       	std	Z+20, r24	; 0x14
    2b6a:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2b6c:	ef d9       	rcall	.-3106   	; 0x1f4c <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2b6e:	1d c0       	rjmp	.+58     	; 0x2baa <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2b70:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b74:	86 ff       	sbrs	r24, 6
    2b76:	08 c0       	rjmp	.+16     	; 0x2b88 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2b78:	80 e4       	ldi	r24, 0x40	; 64
    2b7a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	bc d9       	rcall	.-3208   	; 0x1efa <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2b82:	0e 94 8b 02 	call	0x516	; 0x516 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b86:	11 c0       	rjmp	.+34     	; 0x2baa <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2b88:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b8c:	85 ff       	sbrs	r24, 5
    2b8e:	0d c0       	rjmp	.+26     	; 0x2baa <__vector_125+0x150>
		udd_ack_resume_event();
    2b90:	80 e2       	ldi	r24, 0x20	; 32
    2b92:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	b0 d9       	rcall	.-3232   	; 0x1efa <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2b9a:	0e 94 8c 02 	call	0x518	; 0x518 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b9e:	05 c0       	rjmp	.+10     	; 0x2baa <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2ba0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ba4:	84 fd       	sbrc	r24, 4
    2ba6:	c5 cf       	rjmp	.-118    	; 0x2b32 <__vector_125+0xd8>
    2ba8:	e3 cf       	rjmp	.-58     	; 0x2b70 <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2baa:	ff 91       	pop	r31
    2bac:	ef 91       	pop	r30
    2bae:	bf 91       	pop	r27
    2bb0:	af 91       	pop	r26
    2bb2:	9f 91       	pop	r25
    2bb4:	8f 91       	pop	r24
    2bb6:	7f 91       	pop	r23
    2bb8:	6f 91       	pop	r22
    2bba:	5f 91       	pop	r21
    2bbc:	4f 91       	pop	r20
    2bbe:	3f 91       	pop	r19
    2bc0:	2f 91       	pop	r18
    2bc2:	0f 91       	pop	r16
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	0f 90       	pop	r0
    2bca:	1f 90       	pop	r1
    2bcc:	18 95       	reti

00002bce <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2bce:	1f 92       	push	r1
    2bd0:	0f 92       	push	r0
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	0f 92       	push	r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	0f 93       	push	r16
    2bda:	1f 93       	push	r17
    2bdc:	2f 93       	push	r18
    2bde:	3f 93       	push	r19
    2be0:	4f 93       	push	r20
    2be2:	5f 93       	push	r21
    2be4:	6f 93       	push	r22
    2be6:	7f 93       	push	r23
    2be8:	8f 93       	push	r24
    2bea:	9f 93       	push	r25
    2bec:	af 93       	push	r26
    2bee:	bf 93       	push	r27
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	ef 93       	push	r30
    2bf6:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2bf8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2bfc:	81 fd       	sbrc	r24, 1
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2c00:	9d da       	rcall	.-2758   	; 0x213c <udd_ctrl_interrupt_tc_setup>
    2c02:	81 11       	cpse	r24, r1
    2c04:	b9 c0       	rjmp	.+370    	; 0x2d78 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2c0c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2c10:	81 95       	neg	r24
    2c12:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2c14:	ec e1       	ldi	r30, 0x1C	; 28
    2c16:	f2 e2       	ldi	r31, 0x22	; 34
    2c18:	e8 1b       	sub	r30, r24
    2c1a:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2c1c:	20 81       	ld	r18, Z
    2c1e:	31 81       	ldd	r19, Z+1	; 0x01
    2c20:	2c 51       	subi	r18, 0x1C	; 28
    2c22:	32 42       	sbci	r19, 0x22	; 34
    2c24:	36 95       	lsr	r19
    2c26:	27 95       	ror	r18
    2c28:	36 95       	lsr	r19
    2c2a:	27 95       	ror	r18
    2c2c:	36 95       	lsr	r19
    2c2e:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2c30:	82 2f       	mov	r24, r18
    2c32:	86 95       	lsr	r24
    2c34:	20 fd       	sbrc	r18, 0
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <__vector_126+0x6e>
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	01 c0       	rjmp	.+2      	; 0x2c3e <__vector_126+0x70>
    2c3c:	90 e8       	ldi	r25, 0x80	; 128
    2c3e:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c40:	e8 2f       	mov	r30, r24
    2c42:	ef 70       	andi	r30, 0x0F	; 15
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	ee 0f       	add	r30, r30
    2c48:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	08 2e       	mov	r0, r24
    2c4e:	00 0c       	add	r0, r0
    2c50:	33 0b       	sbc	r19, r19
    2c52:	22 27       	eor	r18, r18
    2c54:	33 0f       	add	r19, r19
    2c56:	22 1f       	adc	r18, r18
    2c58:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c5a:	e2 0f       	add	r30, r18
    2c5c:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2c5e:	df 01       	movw	r26, r30
    2c60:	aa 0f       	add	r26, r26
    2c62:	bb 1f       	adc	r27, r27
    2c64:	aa 0f       	add	r26, r26
    2c66:	bb 1f       	adc	r27, r27
    2c68:	aa 0f       	add	r26, r26
    2c6a:	bb 1f       	adc	r27, r27
    2c6c:	a4 5e       	subi	r26, 0xE4	; 228
    2c6e:	bd 4d       	sbci	r27, 0xDD	; 221
    2c70:	9c 91       	ld	r25, X
    2c72:	95 ff       	sbrs	r25, 5
    2c74:	81 c0       	rjmp	.+258    	; 0x2d78 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2c76:	fd 01       	movw	r30, r26
    2c78:	00 e2       	ldi	r16, 0x20	; 32
    2c7a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2c7c:	81 11       	cpse	r24, r1
    2c7e:	77 c0       	rjmp	.+238    	; 0x2d6e <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c80:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    2c84:	84 30       	cpi	r24, 0x04	; 4
    2c86:	19 f4       	brne	.+6      	; 0x2c8e <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2c88:	a4 d9       	rcall	.-3256   	; 0x1fd2 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2c8a:	60 d9       	rcall	.-3392   	; 0x1f4c <udd_ctrl_init>
    2c8c:	75 c0       	rjmp	.+234    	; 0x2d78 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2c8e:	00 91 1e 22 	lds	r16, 0x221E	; 0x80221e <udd_sram+0x12>
    2c92:	10 91 1f 22 	lds	r17, 0x221F	; 0x80221f <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2c96:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0xa>
    2c9a:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0xb>
    2c9e:	c0 91 07 22 	lds	r28, 0x2207	; 0x802207 <udd_ctrl_payload_nb_trans>
    2ca2:	d0 91 08 22 	lds	r29, 0x2208	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    2ca6:	9e 01       	movw	r18, r28
    2ca8:	20 0f       	add	r18, r16
    2caa:	31 1f       	adc	r19, r17
    2cac:	82 17       	cp	r24, r18
    2cae:	93 07       	cpc	r25, r19
    2cb0:	18 f4       	brcc	.+6      	; 0x2cb8 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2cb2:	8c 01       	movw	r16, r24
    2cb4:	0c 1b       	sub	r16, r28
    2cb6:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2cb8:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq+0x8>
    2cbc:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x9>
    2cc0:	a8 01       	movw	r20, r16
    2cc2:	67 ec       	ldi	r22, 0xC7	; 199
    2cc4:	71 e2       	ldi	r23, 0x21	; 33
    2cc6:	8c 0f       	add	r24, r28
    2cc8:	9d 1f       	adc	r25, r29
    2cca:	85 d0       	rcall	.+266    	; 0x2dd6 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2ccc:	c0 0f       	add	r28, r16
    2cce:	d1 1f       	adc	r29, r17
    2cd0:	c0 93 07 22 	sts	0x2207, r28	; 0x802207 <udd_ctrl_payload_nb_trans>
    2cd4:	d0 93 08 22 	sts	0x2208, r29	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2cd8:	00 34       	cpi	r16, 0x40	; 64
    2cda:	11 05       	cpc	r17, r1
    2cdc:	69 f4       	brne	.+26     	; 0x2cf8 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2cde:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    2ce2:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    2ce6:	8c 0f       	add	r24, r28
    2ce8:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2cea:	20 91 70 24 	lds	r18, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    2cee:	30 91 71 24 	lds	r19, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    2cf2:	82 17       	cp	r24, r18
    2cf4:	93 07       	cpc	r25, r19
    2cf6:	80 f0       	brcs	.+32     	; 0x2d18 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2cf8:	ea e6       	ldi	r30, 0x6A	; 106
    2cfa:	f4 e2       	ldi	r31, 0x24	; 36
    2cfc:	c2 87       	std	Z+10, r28	; 0x0a
    2cfe:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2d00:	06 84       	ldd	r0, Z+14	; 0x0e
    2d02:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d04:	e0 2d       	mov	r30, r0
    2d06:	30 97       	sbiw	r30, 0x00	; 0
    2d08:	29 f0       	breq	.+10     	; 0x2d14 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2d0a:	09 95       	icall
    2d0c:	81 11       	cpse	r24, r1
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2d10:	44 d9       	rcall	.-3448   	; 0x1f9a <udd_ctrl_stall_data>
    2d12:	32 c0       	rjmp	.+100    	; 0x2d78 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2d14:	50 d9       	rcall	.-3424   	; 0x1fb6 <udd_ctrl_send_zlp_in>
    2d16:	30 c0       	rjmp	.+96     	; 0x2d78 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d18:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0xa>
    2d1c:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0xb>
    2d20:	c8 17       	cp	r28, r24
    2d22:	d9 07       	cpc	r29, r25
    2d24:	f9 f4       	brne	.+62     	; 0x2d64 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2d26:	e0 91 78 24 	lds	r30, 0x2478	; 0x802478 <udd_g_ctrlreq+0xe>
    2d2a:	f0 91 79 24 	lds	r31, 0x2479	; 0x802479 <udd_g_ctrlreq+0xf>
    2d2e:	30 97       	sbiw	r30, 0x00	; 0
    2d30:	11 f4       	brne	.+4      	; 0x2d36 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2d32:	33 d9       	rcall	.-3482   	; 0x1f9a <udd_ctrl_stall_data>
    2d34:	21 c0       	rjmp	.+66     	; 0x2d78 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2d36:	09 95       	icall
    2d38:	81 11       	cpse	r24, r1
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2d3c:	2e d9       	rcall	.-3492   	; 0x1f9a <udd_ctrl_stall_data>
    2d3e:	1c c0       	rjmp	.+56     	; 0x2d78 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2d40:	20 91 09 22 	lds	r18, 0x2209	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    2d44:	30 91 0a 22 	lds	r19, 0x220A	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    2d48:	80 91 07 22 	lds	r24, 0x2207	; 0x802207 <udd_ctrl_payload_nb_trans>
    2d4c:	90 91 08 22 	lds	r25, 0x2208	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    2d50:	82 0f       	add	r24, r18
    2d52:	93 1f       	adc	r25, r19
    2d54:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    2d58:	90 93 0a 22 	sts	0x220A, r25	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2d5c:	10 92 07 22 	sts	0x2207, r1	; 0x802207 <udd_ctrl_payload_nb_trans>
    2d60:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2d64:	ec e1       	ldi	r30, 0x1C	; 28
    2d66:	f2 e2       	ldi	r31, 0x22	; 34
    2d68:	02 e0       	ldi	r16, 0x02	; 2
    2d6a:	06 93       	lac	Z, r16
    2d6c:	05 c0       	rjmp	.+10     	; 0x2d78 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2d6e:	80 38       	cpi	r24, 0x80	; 128
    2d70:	11 f4       	brne	.+4      	; 0x2d76 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2d72:	37 d9       	rcall	.-3474   	; 0x1fe2 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2d76:	51 da       	rcall	.-2910   	; 0x221a <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2d78:	ff 91       	pop	r31
    2d7a:	ef 91       	pop	r30
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	bf 91       	pop	r27
    2d82:	af 91       	pop	r26
    2d84:	9f 91       	pop	r25
    2d86:	8f 91       	pop	r24
    2d88:	7f 91       	pop	r23
    2d8a:	6f 91       	pop	r22
    2d8c:	5f 91       	pop	r21
    2d8e:	4f 91       	pop	r20
    2d90:	3f 91       	pop	r19
    2d92:	2f 91       	pop	r18
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	0f 90       	pop	r0
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	0f 90       	pop	r0
    2d9e:	1f 90       	pop	r1
    2da0:	18 95       	reti

00002da2 <__udivmodhi4>:
    2da2:	aa 1b       	sub	r26, r26
    2da4:	bb 1b       	sub	r27, r27
    2da6:	51 e1       	ldi	r21, 0x11	; 17
    2da8:	07 c0       	rjmp	.+14     	; 0x2db8 <__udivmodhi4_ep>

00002daa <__udivmodhi4_loop>:
    2daa:	aa 1f       	adc	r26, r26
    2dac:	bb 1f       	adc	r27, r27
    2dae:	a6 17       	cp	r26, r22
    2db0:	b7 07       	cpc	r27, r23
    2db2:	10 f0       	brcs	.+4      	; 0x2db8 <__udivmodhi4_ep>
    2db4:	a6 1b       	sub	r26, r22
    2db6:	b7 0b       	sbc	r27, r23

00002db8 <__udivmodhi4_ep>:
    2db8:	88 1f       	adc	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	5a 95       	dec	r21
    2dbe:	a9 f7       	brne	.-22     	; 0x2daa <__udivmodhi4_loop>
    2dc0:	80 95       	com	r24
    2dc2:	90 95       	com	r25
    2dc4:	bc 01       	movw	r22, r24
    2dc6:	cd 01       	movw	r24, r26
    2dc8:	08 95       	ret

00002dca <__tablejump2__>:
    2dca:	ee 0f       	add	r30, r30
    2dcc:	ff 1f       	adc	r31, r31
    2dce:	05 90       	lpm	r0, Z+
    2dd0:	f4 91       	lpm	r31, Z
    2dd2:	e0 2d       	mov	r30, r0
    2dd4:	09 94       	ijmp

00002dd6 <memcpy>:
    2dd6:	fb 01       	movw	r30, r22
    2dd8:	dc 01       	movw	r26, r24
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <memcpy+0xa>
    2ddc:	01 90       	ld	r0, Z+
    2dde:	0d 92       	st	X+, r0
    2de0:	41 50       	subi	r20, 0x01	; 1
    2de2:	50 40       	sbci	r21, 0x00	; 0
    2de4:	d8 f7       	brcc	.-10     	; 0x2ddc <memcpy+0x6>
    2de6:	08 95       	ret

00002de8 <_exit>:
    2de8:	f8 94       	cli

00002dea <__stop_program>:
    2dea:	ff cf       	rjmp	.-2      	; 0x2dea <__stop_program>
