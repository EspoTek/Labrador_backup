
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  00002af6  00002b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000fa7  008020b2  008020b2  00002c3e  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00002cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a831  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b89  00000000  00000000  0000d9a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008b4a  00000000  00000000  0000f532  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000acc  00000000  00000000  0001807c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fb9c  00000000  00000000  00018b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000239a  00000000  00000000  000486e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0004aa80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ba62  00000000  00000000  0004ae78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	21 c6       	rjmp	.+3138   	; 0xc5c <__vector_6>
      1a:	00 00       	nop
      1c:	5b c6       	rjmp	.+3254   	; 0xcd4 <__vector_7>
      1e:	00 00       	nop
      20:	95 c6       	rjmp	.+3370   	; 0xd4c <__vector_8>
      22:	00 00       	nop
      24:	d4 c6       	rjmp	.+3496   	; 0xdce <__vector_9>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	dd c7       	rjmp	.+4026   	; 0x101c <__vector_24>
      62:	00 00       	nop
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b2 c0       	rjmp	.+356    	; 0x282 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c7 c6       	rjmp	.+3470   	; 0xedc <__vector_83>
     14e:	00 00       	nop
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__vector_125>
     1f8:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__vector_126>
     1fc:	95 0a       	sbc	r9, r21
     1fe:	97 0a       	sbc	r9, r23
     200:	d3 0a       	sbc	r13, r19
     202:	10 0b       	sbc	r17, r16
     204:	19 0b       	sbc	r17, r25
     206:	1e 0b       	sbc	r17, r30
     208:	73 0b       	sbc	r23, r19
     20a:	78 0b       	sbc	r23, r24
     20c:	c3 0a       	sbc	r12, r19
     20e:	c5 0a       	sbc	r12, r21
     210:	c7 0a       	sbc	r12, r23
     212:	c9 0a       	sbc	r12, r25
     214:	cb 0a       	sbc	r12, r27
     216:	cd 0a       	sbc	r12, r29
     218:	cf 0a       	sbc	r12, r31
     21a:	d1 0a       	sbc	r13, r17
     21c:	ff 0a       	sbc	r15, r31
     21e:	02 0b       	sbc	r16, r18
     220:	04 0b       	sbc	r16, r20
     222:	06 0b       	sbc	r16, r22
     224:	08 0b       	sbc	r16, r24
     226:	0a 0b       	sbc	r16, r26
     228:	0c 0b       	sbc	r16, r28
     22a:	0e 0b       	sbc	r16, r30
     22c:	2a 0b       	sbc	r18, r26
     22e:	38 0b       	sbc	r19, r24
     230:	42 0b       	sbc	r20, r18
     232:	50 0b       	sbc	r21, r16
     234:	52 0b       	sbc	r21, r18
     236:	54 0b       	sbc	r21, r20
     238:	5e 0b       	sbc	r21, r30
     23a:	68 0b       	sbc	r22, r24
     23c:	f0 0e       	add	r15, r16
     23e:	f3 0e       	add	r15, r19
     240:	f6 0e       	add	r15, r22
     242:	f9 0e       	add	r15, r25
     244:	fc 0e       	add	r15, r28
     246:	ff 0e       	add	r15, r31
     248:	02 0f       	add	r16, r18

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	e6 ef       	ldi	r30, 0xF6	; 246
     25e:	fa e2       	ldi	r31, 0x2A	; 42
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a2 3b       	cpi	r26, 0xB2	; 178
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	20 e3       	ldi	r18, 0x30	; 48
     26e:	a2 eb       	ldi	r26, 0xB2	; 178
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a9 35       	cpi	r26, 0x59	; 89
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	3e d0       	rcall	.+124    	; 0x2fa <main>
     27e:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     284:	e0 e8       	ldi	r30, 0x80	; 128
     286:	f6 e0       	ldi	r31, 0x06	; 6
     288:	8f e0       	ldi	r24, 0x0F	; 15
     28a:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     28c:	85 e0       	ldi	r24, 0x05	; 5
     28e:	84 83       	std	Z+4, r24	; 0x04
     290:	08 95       	ret

00000292 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     292:	08 95       	ret

00000294 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * PACKET_SIZE], 250, iso_callback);
     294:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <usb_state>
     298:	2e ee       	ldi	r18, 0xEE	; 238
     29a:	32 e0       	ldi	r19, 0x02	; 2
     29c:	42 9f       	mul	r20, r18
     29e:	c0 01       	movw	r24, r0
     2a0:	43 9f       	mul	r20, r19
     2a2:	90 0d       	add	r25, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	4a e4       	ldi	r20, 0x4A	; 74
     2a8:	51 e0       	ldi	r21, 0x01	; 1
     2aa:	6a ef       	ldi	r22, 0xFA	; 250
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	8a 58       	subi	r24, 0x8A	; 138
     2b0:	95 4d       	sbci	r25, 0xD5	; 213
     2b2:	ac c7       	rjmp	.+3928   	; 0x120c <udi_vendor_iso_in_run>
     2b4:	08 95       	ret

000002b6 <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 250], 250, iso_callback2);
     2b6:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <usb_state>
     2ba:	2e ee       	ldi	r18, 0xEE	; 238
     2bc:	32 e0       	ldi	r19, 0x02	; 2
     2be:	42 9f       	mul	r20, r18
     2c0:	c0 01       	movw	r24, r0
     2c2:	43 9f       	mul	r20, r19
     2c4:	90 0d       	add	r25, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	4b e5       	ldi	r20, 0x5B	; 91
     2ca:	51 e0       	ldi	r21, 0x01	; 1
     2cc:	6a ef       	ldi	r22, 0xFA	; 250
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	80 59       	subi	r24, 0x90	; 144
     2d2:	94 4d       	sbci	r25, 0xD4	; 212
     2d4:	a7 c7       	rjmp	.+3918   	; 0x1224 <udi_vendor_iso_in_run2>
     2d6:	08 95       	ret

000002d8 <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 500], 250, iso_callback3);
     2d8:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <usb_state>
     2dc:	2e ee       	ldi	r18, 0xEE	; 238
     2de:	32 e0       	ldi	r19, 0x02	; 2
     2e0:	42 9f       	mul	r20, r18
     2e2:	c0 01       	movw	r24, r0
     2e4:	43 9f       	mul	r20, r19
     2e6:	90 0d       	add	r25, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	4c e6       	ldi	r20, 0x6C	; 108
     2ec:	51 e0       	ldi	r21, 0x01	; 1
     2ee:	6a ef       	ldi	r22, 0xFA	; 250
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	86 59       	subi	r24, 0x96	; 150
     2f4:	93 4d       	sbci	r25, 0xD3	; 211
     2f6:	a2 c7       	rjmp	.+3908   	; 0x123c <udi_vendor_iso_in_run3>
     2f8:	08 95       	ret

000002fa <main>:

volatile unsigned char SW_init = 0;


int main(void){
	irq_initialize_vectors();
     2fa:	87 e0       	ldi	r24, 0x07	; 7
     2fc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     300:	78 94       	sei
	sysclk_init();
     302:	97 d6       	rcall	.+3374   	; 0x1032 <sysclk_init>
	board_init();
     304:	c6 df       	rcall	.-116    	; 0x292 <board_init>
	udc_start();
     306:	0e 94 15 0a 	call	0x142a	; 0x142a <udc_start>
	tiny_dac_setup();
     30a:	08 d1       	rcall	.+528    	; 0x51c <tiny_dac_setup>
	tiny_dma_setup();
     30c:	2b d1       	rcall	.+598    	; 0x564 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	c7 d0       	rcall	.+398    	; 0x4a2 <tiny_adc_setup>
	tiny_adc_pid_setup();
     314:	b3 d0       	rcall	.+358    	; 0x47c <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     316:	8c e0       	ldi	r24, 0x0C	; 12
     318:	a7 d0       	rcall	.+334    	; 0x468 <tiny_adc_ch1setup>
	tiny_timer_setup();
     31a:	9e d5       	rcall	.+2876   	; 0xe58 <tiny_timer_setup>
	tiny_uart_setup();
     31c:	59 d6       	rcall	.+3250   	; 0xfd0 <tiny_uart_setup>
	tiny_spi_setup();
     31e:	70 d6       	rcall	.+3296   	; 0x1000 <tiny_spi_setup>
	tiny_dig_setup();
     320:	b1 df       	rcall	.-158    	; 0x284 <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");
	
	precalc_DMA_CH0_DESTADDR0_b1_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE]) >> 0) & 0xFF;
     322:	26 e7       	ldi	r18, 0x76	; 118
     324:	3a e2       	ldi	r19, 0x2A	; 42
     326:	20 93 73 24 	sts	0x2473, r18	; 0x802473 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_0>
	precalc_DMA_CH0_DESTADDR0_b1_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE]) >> 0) & 0xFF;
     32a:	84 e6       	ldi	r24, 0x64	; 100
     32c:	9d e2       	ldi	r25, 0x2D	; 45
     32e:	80 93 74 24 	sts	0x2474, r24	; 0x802474 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_1>
	precalc_DMA_CH0_DESTADDR1_b1_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE]) >> 8) & 0xFF;
     332:	30 93 61 22 	sts	0x2261, r19	; 0x802261 <precalc_DMA_CH0_DESTADDR1_b1_state_equals_0>
	precalc_DMA_CH0_DESTADDR1_b1_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE]) >> 8) & 0xFF;
     336:	90 93 60 22 	sts	0x2260, r25	; 0x802260 <precalc_DMA_CH0_DESTADDR1_b1_state_equals_1>
	
	precalc_DMA_CH1_DESTADDR0_b2_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;
     33a:	2d ee       	ldi	r18, 0xED	; 237
     33c:	3b e2       	ldi	r19, 0x2B	; 43
     33e:	20 93 5b 22 	sts	0x225B, r18	; 0x80225b <precalc_DMA_CH1_DESTADDR0_b2_state_equals_0>
	precalc_DMA_CH1_DESTADDR0_b2_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;
     342:	8b ed       	ldi	r24, 0xDB	; 219
     344:	9e e2       	ldi	r25, 0x2E	; 46
     346:	80 93 52 30 	sts	0x3052, r24	; 0x803052 <precalc_DMA_CH1_DESTADDR0_b2_state_equals_1>
	precalc_DMA_CH1_DESTADDR1_b2_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     34a:	30 93 62 24 	sts	0x2462, r19	; 0x802462 <precalc_DMA_CH1_DESTADDR1_b2_state_equals_0>
	precalc_DMA_CH1_DESTADDR1_b2_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     34e:	90 93 5a 22 	sts	0x225A, r25	; 0x80225a <precalc_DMA_CH1_DESTADDR1_b2_state_equals_1>
     352:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <debug_counter>
     356:	90 91 5d 22 	lds	r25, 0x225D	; 0x80225d <debug_counter+0x1>
     35a:	a0 91 5e 22 	lds	r26, 0x225E	; 0x80225e <debug_counter+0x2>
     35e:	b0 91 5f 22 	lds	r27, 0x225F	; 0x80225f <debug_counter+0x3>

	
	while (true) {
		debug_counter++;
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	a1 1d       	adc	r26, r1
     366:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     368:	81 30       	cpi	r24, 0x01	; 1
     36a:	21 ee       	ldi	r18, 0xE1	; 225
     36c:	92 07       	cpc	r25, r18
     36e:	25 ef       	ldi	r18, 0xF5	; 245
     370:	a2 07       	cpc	r26, r18
     372:	25 e0       	ldi	r18, 0x05	; 5
     374:	b2 07       	cpc	r27, r18
     376:	18 f0       	brcs	.+6      	; 0x37e <main+0x84>
			debug_counter = 0;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     39a:	e3 cf       	rjmp	.-58     	; 0x362 <main+0x68>

0000039c <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     39c:	08 95       	ret

0000039e <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     39e:	08 95       	ret

000003a0 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	if(SW_init){
     3a0:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     3a4:	88 23       	and	r24, r24
     3a6:	11 f1       	breq	.+68     	; 0x3ec <main_sof_action+0x4c>
		TRFCNTcnt[TRFCNTcntCnt] = DMA.CH0.TRFCNT;
     3a8:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <TRFCNTcntCnt>
     3ac:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <TRFCNTcntCnt+0x1>
     3b0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3b4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3b8:	ee 0f       	add	r30, r30
     3ba:	ff 1f       	adc	r31, r31
     3bc:	eb 58       	subi	r30, 0x8B	; 139
     3be:	f9 4d       	sbci	r31, 0xD9	; 217
     3c0:	80 83       	st	Z, r24
     3c2:	91 83       	std	Z+1, r25	; 0x01
		TRFCNTcntCnt++;
     3c4:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <TRFCNTcntCnt>
     3c8:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <TRFCNTcntCnt+0x1>
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <TRFCNTcntCnt>
     3d2:	90 93 b4 20 	sts	0x20B4, r25	; 0x8020b4 <TRFCNTcntCnt+0x1>
		if(TRFCNTcntCnt == TRFCNTcntSize){
     3d6:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <TRFCNTcntCnt>
     3da:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <TRFCNTcntCnt+0x1>
     3de:	81 15       	cp	r24, r1
     3e0:	92 40       	sbci	r25, 0x02	; 2
     3e2:	21 f4       	brne	.+8      	; 0x3ec <main_sof_action+0x4c>
			TRFCNTcntCnt = 0;
     3e4:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <TRFCNTcntCnt>
     3e8:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <TRFCNTcntCnt+0x1>
		}
	}
	usb_state = !usb_state;
     3ec:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <usb_state>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	91 11       	cpse	r25, r1
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <usb_state>
     3fa:	08 95       	ret

000003fc <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <main_b_vendor_enable>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     402:	4a e4       	ldi	r20, 0x4A	; 74
     404:	51 e0       	ldi	r21, 0x01	; 1
     406:	6e ee       	ldi	r22, 0xEE	; 238
     408:	72 e0       	ldi	r23, 0x02	; 2
     40a:	86 e7       	ldi	r24, 0x76	; 118
     40c:	9a e2       	ldi	r25, 0x2A	; 42
     40e:	fe d6       	rcall	.+3580   	; 0x120c <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     410:	4b e5       	ldi	r20, 0x5B	; 91
     412:	51 e0       	ldi	r21, 0x01	; 1
     414:	6e ee       	ldi	r22, 0xEE	; 238
     416:	72 e0       	ldi	r23, 0x02	; 2
     418:	80 e7       	ldi	r24, 0x70	; 112
     41a:	9b e2       	ldi	r25, 0x2B	; 43
     41c:	03 d7       	rcall	.+3590   	; 0x1224 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     41e:	4c e6       	ldi	r20, 0x6C	; 108
     420:	51 e0       	ldi	r21, 0x01	; 1
     422:	6e ee       	ldi	r22, 0xEE	; 238
     424:	72 e0       	ldi	r23, 0x02	; 2
     426:	8a e6       	ldi	r24, 0x6A	; 106
     428:	9c e2       	ldi	r25, 0x2C	; 44
     42a:	08 d7       	rcall	.+3600   	; 0x123c <udi_vendor_iso_in_run3>
	return true;
}
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	08 95       	ret

00000430 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     430:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <main_b_vendor_enable>
     434:	08 95       	ret

00000436 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	08 95       	ret

0000043a <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	08 95       	ret

0000043e <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     43e:	e0 e0       	ldi	r30, 0x00	; 0
     440:	f2 e0       	ldi	r31, 0x02	; 2
     442:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     444:	98 2f       	mov	r25, r24
     446:	9c 71       	andi	r25, 0x1C	; 28
     448:	93 68       	ori	r25, 0x83	; 131
     44a:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     44c:	88 23       	and	r24, r24
     44e:	1c f4       	brge	.+6      	; 0x456 <tiny_adc_ch0setup+0x18>
     450:	90 e1       	ldi	r25, 0x10	; 16
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	02 c0       	rjmp	.+4      	; 0x45a <tiny_adc_ch0setup+0x1c>
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	89 2b       	or	r24, r25
     45c:	e0 e0       	ldi	r30, 0x00	; 0
     45e:	f2 e0       	ldi	r31, 0x02	; 2
     460:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     462:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     464:	16 a2       	std	Z+38, r1	; 0x26
     466:	08 95       	ret

00000468 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     468:	e0 e0       	ldi	r30, 0x00	; 0
     46a:	f2 e0       	ldi	r31, 0x02	; 2
     46c:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     46e:	83 68       	ori	r24, 0x83	; 131
     470:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     476:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     478:	16 aa       	std	Z+54, r1	; 0x36
     47a:	08 95       	ret

0000047c <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     47c:	e0 e0       	ldi	r30, 0x00	; 0
     47e:	f2 e0       	ldi	r31, 0x02	; 2
     480:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     482:	83 e8       	ldi	r24, 0x83	; 131
     484:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     486:	8f e2       	ldi	r24, 0x2F	; 47
     488:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     48a:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     48c:	16 a6       	std	Z+46, r1	; 0x2e
     48e:	08 95       	ret

00000490 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     490:	aa ec       	ldi	r26, 0xCA	; 202
     492:	b1 e0       	ldi	r27, 0x01	; 1
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     498:	e8 2f       	mov	r30, r24
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     49e:	1c 92       	st	X, r1

	return( result );
     4a0:	08 95       	ret

000004a2 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     4a6:	e0 e7       	ldi	r30, 0x70	; 112
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	9d 7f       	andi	r25, 0xFD	; 253
     4ae:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     4b0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     4b4:	62 30       	cpi	r22, 0x02	; 2
     4b6:	31 f1       	breq	.+76     	; 0x504 <tiny_adc_setup+0x62>
     4b8:	e0 e0       	ldi	r30, 0x00	; 0
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
     4bc:	9c e1       	ldi	r25, 0x1C	; 28
     4be:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     4c0:	90 e4       	ldi	r25, 0x40	; 64
     4c2:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4c4:	81 11       	cpse	r24, r1
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <tiny_adc_setup+0x2a>
     4c8:	80 e4       	ldi	r24, 0x40	; 64
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <tiny_adc_setup+0x2c>
     4cc:	80 ec       	ldi	r24, 0xC0	; 192
     4ce:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     4d2:	61 30       	cpi	r22, 0x01	; 1
     4d4:	11 f0       	breq	.+4      	; 0x4da <tiny_adc_setup+0x38>
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <tiny_adc_setup+0x3a>
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	c0 e0       	ldi	r28, 0x00	; 0
     4de:	d2 e0       	ldi	r29, 0x02	; 2
     4e0:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	d5 df       	rcall	.-86     	; 0x490 <ReadCalibrationByte>
     4e6:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     4e8:	81 e2       	ldi	r24, 0x21	; 33
     4ea:	d2 df       	rcall	.-92     	; 0x490 <ReadCalibrationByte>
     4ec:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     4ee:	18 8e       	std	Y+24, r1	; 0x18
     4f0:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     4f6:	c2 df       	rcall	.-124    	; 0x47c <tiny_adc_pid_setup>
     4f8:	0e c0       	rjmp	.+28     	; 0x516 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4fa:	80 ec       	ldi	r24, 0xC0	; 192
     4fc:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	ec cf       	rjmp	.-40     	; 0x4dc <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     504:	e0 e0       	ldi	r30, 0x00	; 0
     506:	f2 e0       	ldi	r31, 0x02	; 2
     508:	9e e1       	ldi	r25, 0x1E	; 30
     50a:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     50c:	90 e4       	ldi	r25, 0x40	; 64
     50e:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     510:	81 11       	cpse	r24, r1
     512:	f3 cf       	rjmp	.-26     	; 0x4fa <tiny_adc_setup+0x58>
     514:	d9 cf       	rjmp	.-78     	; 0x4c8 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     520:	e0 e7       	ldi	r30, 0x70	; 112
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	82 81       	ldd	r24, Z+2	; 0x02
     526:	8b 7f       	andi	r24, 0xFB	; 251
     528:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     52a:	c0 e2       	ldi	r28, 0x20	; 32
     52c:	d3 e0       	ldi	r29, 0x03	; 3
     52e:	8d e0       	ldi	r24, 0x0D	; 13
     530:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     532:	80 e4       	ldi	r24, 0x40	; 64
     534:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     536:	89 e0       	ldi	r24, 0x09	; 9
     538:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     53a:	83 e3       	ldi	r24, 0x33	; 51
     53c:	a9 df       	rcall	.-174    	; 0x490 <ReadCalibrationByte>
     53e:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     540:	82 e3       	ldi	r24, 0x32	; 50
     542:	a6 df       	rcall	.-180    	; 0x490 <ReadCalibrationByte>
     544:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     546:	87 e3       	ldi	r24, 0x37	; 55
     548:	a3 df       	rcall	.-186    	; 0x490 <ReadCalibrationByte>
     54a:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     54c:	86 e3       	ldi	r24, 0x36	; 54
     54e:	a0 df       	rcall	.-192    	; 0x490 <ReadCalibrationByte>
     550:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     552:	e0 e2       	ldi	r30, 0x20	; 32
     554:	f6 e0       	ldi	r31, 0x06	; 6
     556:	80 81       	ld	r24, Z
     558:	83 60       	ori	r24, 0x03	; 3
     55a:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     55c:	14 82       	std	Z+4, r1	; 0x04
	
	

     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     564:	e0 e7       	ldi	r30, 0x70	; 112
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	8e 7f       	andi	r24, 0xFE	; 254
     56c:	80 83       	st	Z, r24
     56e:	82 e8       	ldi	r24, 0x82	; 130
     570:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     574:	08 95       	ret

00000576 <tiny_dma_flush>:
     576:	e0 e0       	ldi	r30, 0x00	; 0
     578:	f1 e0       	ldi	r31, 0x01	; 1
     57a:	10 8a       	std	Z+16, r1	; 0x10
     57c:	80 e4       	ldi	r24, 0x40	; 64
     57e:	80 8b       	std	Z+16, r24	; 0x10
     580:	10 a2       	std	Z+32, r1	; 0x20
     582:	80 a3       	std	Z+32, r24	; 0x20
     584:	10 aa       	std	Z+48, r1	; 0x30
     586:	80 ab       	std	Z+48, r24	; 0x30
     588:	e0 e4       	ldi	r30, 0x40	; 64
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	10 82       	st	Z, r1
     58e:	80 83       	st	Z, r24
     590:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <b1_state>
     594:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <b2_state>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <usb_state>
     59e:	08 95       	ret

000005a0 <tiny_dma_set_mode_0>:
     5a0:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
     5a4:	e8 df       	rcall	.-48     	; 0x576 <tiny_dma_flush>
     5a6:	e0 e0       	ldi	r30, 0x00	; 0
     5a8:	f1 e0       	ldi	r31, 0x01	; 1
     5aa:	16 aa       	std	Z+54, r1	; 0x36
     5ac:	94 e2       	ldi	r25, 0x24	; 36
     5ae:	90 ab       	std	Z+48, r25	; 0x30
     5b0:	11 aa       	std	Z+49, r1	; 0x31
     5b2:	49 e5       	ldi	r20, 0x59	; 89
     5b4:	42 ab       	std	Z+50, r20	; 0x32
     5b6:	32 e0       	ldi	r19, 0x02	; 2
     5b8:	33 ab       	std	Z+51, r19	; 0x33
     5ba:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     5be:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     5c2:	64 ab       	std	Z+52, r22	; 0x34
     5c4:	75 ab       	std	Z+53, r23	; 0x35
     5c6:	65 e7       	ldi	r22, 0x75	; 117
     5c8:	74 e2       	ldi	r23, 0x24	; 36
     5ca:	60 af       	std	Z+56, r22	; 0x38
     5cc:	71 af       	std	Z+57, r23	; 0x39
     5ce:	12 ae       	std	Z+58, r1	; 0x3a
     5d0:	8b e3       	ldi	r24, 0x3B	; 59
     5d2:	84 af       	std	Z+60, r24	; 0x3c
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     5da:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     5de:	20 a9       	ldd	r18, Z+48	; 0x30
     5e0:	20 68       	ori	r18, 0x80	; 128
     5e2:	20 ab       	std	Z+48, r18	; 0x30
     5e4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     5e8:	a0 e4       	ldi	r26, 0x40	; 64
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	9c 93       	st	X, r25
     5ee:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     5f2:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     5f6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     5fa:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     5fe:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     602:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     606:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     60a:	42 e6       	ldi	r20, 0x62	; 98
     60c:	52 e2       	ldi	r21, 0x22	; 34
     60e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     612:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     616:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     61a:	29 e3       	ldi	r18, 0x39	; 57
     61c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     620:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     624:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     628:	2c 91       	ld	r18, X
     62a:	20 68       	ori	r18, 0x80	; 128
     62c:	2c 93       	st	X, r18
     62e:	10 8a       	std	Z+16, r1	; 0x10
     630:	20 e4       	ldi	r18, 0x40	; 64
     632:	20 8b       	std	Z+16, r18	; 0x10
     634:	24 e0       	ldi	r18, 0x04	; 4
     636:	20 8b       	std	Z+16, r18	; 0x10
     638:	81 8b       	std	Z+17, r24	; 0x11
     63a:	81 e9       	ldi	r24, 0x91	; 145
     63c:	82 8b       	std	Z+18, r24	; 0x12
     63e:	80 e1       	ldi	r24, 0x10	; 16
     640:	83 8b       	std	Z+19, r24	; 0x13
     642:	47 e7       	ldi	r20, 0x77	; 119
     644:	51 e0       	ldi	r21, 0x01	; 1
     646:	44 8b       	std	Z+20, r20	; 0x14
     648:	55 8b       	std	Z+21, r21	; 0x15
     64a:	90 8f       	std	Z+24, r25	; 0x18
     64c:	31 8f       	std	Z+25, r19	; 0x19
     64e:	12 8e       	std	Z+26, r1	; 0x1a
     650:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b1_state>
     654:	2e ee       	ldi	r18, 0xEE	; 238
     656:	32 e0       	ldi	r19, 0x02	; 2
     658:	42 9f       	mul	r20, r18
     65a:	c0 01       	movw	r24, r0
     65c:	43 9f       	mul	r20, r19
     65e:	90 0d       	add	r25, r0
     660:	11 24       	eor	r1, r1
     662:	8a 58       	subi	r24, 0x8A	; 138
     664:	95 4d       	sbci	r25, 0xD5	; 213
     666:	84 8f       	std	Z+28, r24	; 0x1c
     668:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b1_state>
     66c:	42 9f       	mul	r20, r18
     66e:	c0 01       	movw	r24, r0
     670:	43 9f       	mul	r20, r19
     672:	90 0d       	add	r25, r0
     674:	11 24       	eor	r1, r1
     676:	8a 58       	subi	r24, 0x8A	; 138
     678:	95 4d       	sbci	r25, 0xD5	; 213
     67a:	95 8f       	std	Z+29, r25	; 0x1d
     67c:	16 8e       	std	Z+30, r1	; 0x1e
     67e:	80 89       	ldd	r24, Z+16	; 0x10
     680:	80 68       	ori	r24, 0x80	; 128
     682:	80 8b       	std	Z+16, r24	; 0x10
     684:	08 95       	ret

00000686 <tiny_dma_set_mode_1>:
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     690:	72 df       	rcall	.-284    	; 0x576 <tiny_dma_flush>
     692:	e0 e0       	ldi	r30, 0x00	; 0
     694:	f1 e0       	ldi	r31, 0x01	; 1
     696:	10 aa       	std	Z+48, r1	; 0x30
     698:	80 e4       	ldi	r24, 0x40	; 64
     69a:	80 ab       	std	Z+48, r24	; 0x30
     69c:	94 e0       	ldi	r25, 0x04	; 4
     69e:	90 ab       	std	Z+48, r25	; 0x30
     6a0:	11 aa       	std	Z+49, r1	; 0x31
     6a2:	12 aa       	std	Z+50, r1	; 0x32
     6a4:	5b e4       	ldi	r21, 0x4B	; 75
     6a6:	53 ab       	std	Z+51, r21	; 0x33
     6a8:	14 aa       	std	Z+52, r1	; 0x34
     6aa:	15 aa       	std	Z+53, r1	; 0x35
     6ac:	16 aa       	std	Z+54, r1	; 0x36
     6ae:	21 e0       	ldi	r18, 0x01	; 1
     6b0:	30 e2       	ldi	r19, 0x20	; 32
     6b2:	20 af       	std	Z+56, r18	; 0x38
     6b4:	31 af       	std	Z+57, r19	; 0x39
     6b6:	12 ae       	std	Z+58, r1	; 0x3a
     6b8:	40 ea       	ldi	r20, 0xA0	; 160
     6ba:	44 af       	std	Z+60, r20	; 0x3c
     6bc:	38 e0       	ldi	r19, 0x08	; 8
     6be:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     6c2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     6c6:	80 a9       	ldd	r24, Z+48	; 0x30
     6c8:	80 6a       	ori	r24, 0xA0	; 160
     6ca:	80 ab       	std	Z+48, r24	; 0x30
     6cc:	85 e5       	ldi	r24, 0x55	; 85
     6ce:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     6d2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     6d6:	a0 e4       	ldi	r26, 0x40	; 64
     6d8:	b1 e0       	ldi	r27, 0x01	; 1
     6da:	d4 e2       	ldi	r29, 0x24	; 36
     6dc:	dc 93       	st	X, r29
     6de:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     6e2:	89 e5       	ldi	r24, 0x59	; 89
     6e4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     6e8:	c2 e0       	ldi	r28, 0x02	; 2
     6ea:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     6ee:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     6f2:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     6f6:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     6fa:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     6fe:	65 e7       	ldi	r22, 0x75	; 117
     700:	74 e2       	ldi	r23, 0x24	; 36
     702:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     706:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     70a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     70e:	8b e3       	ldi	r24, 0x3B	; 59
     710:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     714:	83 e0       	ldi	r24, 0x03	; 3
     716:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     71a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     71e:	2c 91       	ld	r18, X
     720:	20 68       	ori	r18, 0x80	; 128
     722:	2c 93       	st	X, r18
     724:	90 8b       	std	Z+16, r25	; 0x10
     726:	81 8b       	std	Z+17, r24	; 0x11
     728:	a1 e9       	ldi	r26, 0x91	; 145
     72a:	a2 8b       	std	Z+18, r26	; 0x12
     72c:	20 e1       	ldi	r18, 0x10	; 16
     72e:	23 8b       	std	Z+19, r18	; 0x13
     730:	67 e7       	ldi	r22, 0x77	; 119
     732:	71 e0       	ldi	r23, 0x01	; 1
     734:	64 8b       	std	Z+20, r22	; 0x14
     736:	75 8b       	std	Z+21, r23	; 0x15
     738:	d0 8f       	std	Z+24, r29	; 0x18
     73a:	c1 8f       	std	Z+25, r28	; 0x19
     73c:	12 8e       	std	Z+26, r1	; 0x1a
     73e:	c6 e7       	ldi	r28, 0x76	; 118
     740:	da e2       	ldi	r29, 0x2A	; 42
     742:	c4 8f       	std	Z+28, r28	; 0x1c
     744:	d5 8f       	std	Z+29, r29	; 0x1d
     746:	16 8e       	std	Z+30, r1	; 0x1e
     748:	20 89       	ldd	r18, Z+16	; 0x10
     74a:	20 68       	ori	r18, 0x80	; 128
     74c:	20 8b       	std	Z+16, r18	; 0x10
     74e:	90 a3       	std	Z+32, r25	; 0x20
     750:	81 a3       	std	Z+33, r24	; 0x21
     752:	a2 a3       	std	Z+34, r26	; 0x22
     754:	53 a3       	std	Z+35, r21	; 0x23
     756:	64 a3       	std	Z+36, r22	; 0x24
     758:	75 a3       	std	Z+37, r23	; 0x25
     75a:	40 a7       	std	Z+40, r20	; 0x28
     75c:	31 a7       	std	Z+41, r19	; 0x29
     75e:	12 a6       	std	Z+42, r1	; 0x2a
     760:	8d ee       	ldi	r24, 0xED	; 237
     762:	9b e2       	ldi	r25, 0x2B	; 43
     764:	84 a7       	std	Z+44, r24	; 0x2c
     766:	95 a7       	std	Z+45, r25	; 0x2d
     768:	16 a6       	std	Z+46, r1	; 0x2e
     76a:	80 a1       	ldd	r24, Z+32	; 0x20
     76c:	80 68       	ori	r24, 0x80	; 128
     76e:	80 a3       	std	Z+32, r24	; 0x20
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <tiny_dma_set_mode_2>:
     776:	cf 93       	push	r28
     778:	f8 94       	cli
     77a:	c2 e0       	ldi	r28, 0x02	; 2
     77c:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     780:	fa de       	rcall	.-524    	; 0x576 <tiny_dma_flush>
     782:	e0 e0       	ldi	r30, 0x00	; 0
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	16 aa       	std	Z+54, r1	; 0x36
     788:	94 e2       	ldi	r25, 0x24	; 36
     78a:	90 ab       	std	Z+48, r25	; 0x30
     78c:	11 aa       	std	Z+49, r1	; 0x31
     78e:	39 e5       	ldi	r19, 0x59	; 89
     790:	32 ab       	std	Z+50, r19	; 0x32
     792:	83 e0       	ldi	r24, 0x03	; 3
     794:	83 ab       	std	Z+51, r24	; 0x33
     796:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     79a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     79e:	44 ab       	std	Z+52, r20	; 0x34
     7a0:	55 ab       	std	Z+53, r21	; 0x35
     7a2:	42 e6       	ldi	r20, 0x62	; 98
     7a4:	52 e2       	ldi	r21, 0x22	; 34
     7a6:	40 af       	std	Z+56, r20	; 0x38
     7a8:	51 af       	std	Z+57, r21	; 0x39
     7aa:	12 ae       	std	Z+58, r1	; 0x3a
     7ac:	29 e3       	ldi	r18, 0x39	; 57
     7ae:	24 af       	std	Z+60, r18	; 0x3c
     7b0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     7b4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     7b8:	20 a9       	ldd	r18, Z+48	; 0x30
     7ba:	20 68       	ori	r18, 0x80	; 128
     7bc:	20 ab       	std	Z+48, r18	; 0x30
     7be:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     7c2:	a0 e4       	ldi	r26, 0x40	; 64
     7c4:	b1 e0       	ldi	r27, 0x01	; 1
     7c6:	9c 93       	st	X, r25
     7c8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     7cc:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     7d0:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     7d4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     7d8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     7dc:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     7e0:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     7e4:	25 e7       	ldi	r18, 0x75	; 117
     7e6:	34 e2       	ldi	r19, 0x24	; 36
     7e8:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     7ec:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     7f0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     7f4:	2b e3       	ldi	r18, 0x3B	; 59
     7f6:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     7fa:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     7fe:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     802:	2c 91       	ld	r18, X
     804:	20 68       	ori	r18, 0x80	; 128
     806:	2c 93       	st	X, r18
     808:	54 e0       	ldi	r21, 0x04	; 4
     80a:	50 8b       	std	Z+16, r21	; 0x10
     80c:	81 8b       	std	Z+17, r24	; 0x11
     80e:	41 e9       	ldi	r20, 0x91	; 145
     810:	42 8b       	std	Z+18, r20	; 0x12
     812:	20 e1       	ldi	r18, 0x10	; 16
     814:	23 8b       	std	Z+19, r18	; 0x13
     816:	27 e7       	ldi	r18, 0x77	; 119
     818:	31 e0       	ldi	r19, 0x01	; 1
     81a:	24 8b       	std	Z+20, r18	; 0x14
     81c:	35 8b       	std	Z+21, r19	; 0x15
     81e:	90 8f       	std	Z+24, r25	; 0x18
     820:	c1 8f       	std	Z+25, r28	; 0x19
     822:	12 8e       	std	Z+26, r1	; 0x1a
     824:	66 e7       	ldi	r22, 0x76	; 118
     826:	7a e2       	ldi	r23, 0x2A	; 42
     828:	64 8f       	std	Z+28, r22	; 0x1c
     82a:	75 8f       	std	Z+29, r23	; 0x1d
     82c:	16 8e       	std	Z+30, r1	; 0x1e
     82e:	90 89       	ldd	r25, Z+16	; 0x10
     830:	90 68       	ori	r25, 0x80	; 128
     832:	90 8b       	std	Z+16, r25	; 0x10
     834:	50 a3       	std	Z+32, r21	; 0x20
     836:	81 a3       	std	Z+33, r24	; 0x21
     838:	42 a3       	std	Z+34, r20	; 0x22
     83a:	82 e1       	ldi	r24, 0x12	; 18
     83c:	83 a3       	std	Z+35, r24	; 0x23
     83e:	24 a3       	std	Z+36, r18	; 0x24
     840:	35 a3       	std	Z+37, r19	; 0x25
     842:	84 e3       	ldi	r24, 0x34	; 52
     844:	80 a7       	std	Z+40, r24	; 0x28
     846:	c1 a7       	std	Z+41, r28	; 0x29
     848:	12 a6       	std	Z+42, r1	; 0x2a
     84a:	8d ee       	ldi	r24, 0xED	; 237
     84c:	9b e2       	ldi	r25, 0x2B	; 43
     84e:	84 a7       	std	Z+44, r24	; 0x2c
     850:	95 a7       	std	Z+45, r25	; 0x2d
     852:	16 a6       	std	Z+46, r1	; 0x2e
     854:	80 a1       	ldd	r24, Z+32	; 0x20
     856:	80 68       	ori	r24, 0x80	; 128
     858:	80 a3       	std	Z+32, r24	; 0x20
     85a:	78 94       	sei
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <tiny_dma_set_mode_3>:
     860:	cf 93       	push	r28
     862:	c3 e0       	ldi	r28, 0x03	; 3
     864:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     868:	86 de       	rcall	.-756    	; 0x576 <tiny_dma_flush>
     86a:	e0 e0       	ldi	r30, 0x00	; 0
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	10 a2       	std	Z+32, r1	; 0x20
     870:	50 e4       	ldi	r21, 0x40	; 64
     872:	50 a3       	std	Z+32, r21	; 0x20
     874:	44 e0       	ldi	r20, 0x04	; 4
     876:	40 a3       	std	Z+32, r20	; 0x20
     878:	11 a2       	std	Z+33, r1	; 0x21
     87a:	12 a2       	std	Z+34, r1	; 0x22
     87c:	3b e4       	ldi	r19, 0x4B	; 75
     87e:	33 a3       	std	Z+35, r19	; 0x23
     880:	14 a2       	std	Z+36, r1	; 0x24
     882:	15 a2       	std	Z+37, r1	; 0x25
     884:	16 a2       	std	Z+38, r1	; 0x26
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e2       	ldi	r25, 0x20	; 32
     88a:	80 a7       	std	Z+40, r24	; 0x28
     88c:	91 a7       	std	Z+41, r25	; 0x29
     88e:	12 a6       	std	Z+42, r1	; 0x2a
     890:	20 ea       	ldi	r18, 0xA0	; 160
     892:	24 a7       	std	Z+44, r18	; 0x2c
     894:	98 e0       	ldi	r25, 0x08	; 8
     896:	95 a7       	std	Z+45, r25	; 0x2d
     898:	16 a6       	std	Z+46, r1	; 0x2e
     89a:	80 a1       	ldd	r24, Z+32	; 0x20
     89c:	80 6a       	ori	r24, 0xA0	; 160
     89e:	80 a3       	std	Z+32, r24	; 0x20
     8a0:	85 e5       	ldi	r24, 0x55	; 85
     8a2:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     8a6:	16 aa       	std	Z+54, r1	; 0x36
     8a8:	74 e2       	ldi	r23, 0x24	; 36
     8aa:	70 ab       	std	Z+48, r23	; 0x30
     8ac:	11 aa       	std	Z+49, r1	; 0x31
     8ae:	69 e5       	ldi	r22, 0x59	; 89
     8b0:	62 ab       	std	Z+50, r22	; 0x32
     8b2:	c3 ab       	std	Z+51, r28	; 0x33
     8b4:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <dacBuf_len>
     8b8:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <dacBuf_len+0x1>
     8bc:	a4 ab       	std	Z+52, r26	; 0x34
     8be:	b5 ab       	std	Z+53, r27	; 0x35
     8c0:	a2 e6       	ldi	r26, 0x62	; 98
     8c2:	b2 e2       	ldi	r27, 0x22	; 34
     8c4:	a0 af       	std	Z+56, r26	; 0x38
     8c6:	b1 af       	std	Z+57, r27	; 0x39
     8c8:	12 ae       	std	Z+58, r1	; 0x3a
     8ca:	89 e3       	ldi	r24, 0x39	; 57
     8cc:	84 af       	std	Z+60, r24	; 0x3c
     8ce:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     8d2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     8d6:	80 a9       	ldd	r24, Z+48	; 0x30
     8d8:	80 68       	ori	r24, 0x80	; 128
     8da:	80 ab       	std	Z+48, r24	; 0x30
     8dc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     8e0:	a0 e4       	ldi	r26, 0x40	; 64
     8e2:	b1 e0       	ldi	r27, 0x01	; 1
     8e4:	7c 93       	st	X, r23
     8e6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8ea:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     8f4:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     8f8:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     8fc:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     900:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     904:	65 e7       	ldi	r22, 0x75	; 117
     906:	74 e2       	ldi	r23, 0x24	; 36
     908:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     90c:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     910:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     914:	8b e3       	ldi	r24, 0x3B	; 59
     916:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     91a:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     91e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     922:	8c 91       	ld	r24, X
     924:	80 68       	ori	r24, 0x80	; 128
     926:	8c 93       	st	X, r24
     928:	10 8a       	std	Z+16, r1	; 0x10
     92a:	50 8b       	std	Z+16, r21	; 0x10
     92c:	40 8b       	std	Z+16, r20	; 0x10
     92e:	c1 8b       	std	Z+17, r28	; 0x11
     930:	81 e9       	ldi	r24, 0x91	; 145
     932:	82 8b       	std	Z+18, r24	; 0x12
     934:	33 8b       	std	Z+19, r19	; 0x13
     936:	47 e7       	ldi	r20, 0x77	; 119
     938:	51 e0       	ldi	r21, 0x01	; 1
     93a:	44 8b       	std	Z+20, r20	; 0x14
     93c:	55 8b       	std	Z+21, r21	; 0x15
     93e:	20 8f       	std	Z+24, r18	; 0x18
     940:	91 8f       	std	Z+25, r25	; 0x19
     942:	12 8e       	std	Z+26, r1	; 0x1a
     944:	86 e7       	ldi	r24, 0x76	; 118
     946:	9a e2       	ldi	r25, 0x2A	; 42
     948:	84 8f       	std	Z+28, r24	; 0x1c
     94a:	95 8f       	std	Z+29, r25	; 0x1d
     94c:	16 8e       	std	Z+30, r1	; 0x1e
     94e:	80 89       	ldd	r24, Z+16	; 0x10
     950:	80 68       	ori	r24, 0x80	; 128
     952:	80 8b       	std	Z+16, r24	; 0x10
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <tiny_dma_set_mode_4>:
     958:	cf 93       	push	r28
     95a:	c4 e0       	ldi	r28, 0x04	; 4
     95c:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     960:	0a de       	rcall	.-1004   	; 0x576 <tiny_dma_flush>
     962:	e0 e0       	ldi	r30, 0x00	; 0
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	10 a2       	std	Z+32, r1	; 0x20
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	80 a3       	std	Z+32, r24	; 0x20
     96c:	c0 a3       	std	Z+32, r28	; 0x20
     96e:	11 a2       	std	Z+33, r1	; 0x21
     970:	12 a2       	std	Z+34, r1	; 0x22
     972:	4b e4       	ldi	r20, 0x4B	; 75
     974:	43 a3       	std	Z+35, r20	; 0x23
     976:	14 a2       	std	Z+36, r1	; 0x24
     978:	15 a2       	std	Z+37, r1	; 0x25
     97a:	16 a2       	std	Z+38, r1	; 0x26
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e2       	ldi	r25, 0x20	; 32
     980:	80 a7       	std	Z+40, r24	; 0x28
     982:	91 a7       	std	Z+41, r25	; 0x29
     984:	12 a6       	std	Z+42, r1	; 0x2a
     986:	60 ea       	ldi	r22, 0xA0	; 160
     988:	64 a7       	std	Z+44, r22	; 0x2c
     98a:	88 e0       	ldi	r24, 0x08	; 8
     98c:	85 a7       	std	Z+45, r24	; 0x2d
     98e:	16 a6       	std	Z+46, r1	; 0x2e
     990:	90 a1       	ldd	r25, Z+32	; 0x20
     992:	90 6a       	ori	r25, 0xA0	; 160
     994:	90 a3       	std	Z+32, r25	; 0x20
     996:	95 e5       	ldi	r25, 0x55	; 85
     998:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     99c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     9a0:	a0 e4       	ldi	r26, 0x40	; 64
     9a2:	b1 e0       	ldi	r27, 0x01	; 1
     9a4:	94 e2       	ldi	r25, 0x24	; 36
     9a6:	9c 93       	st	X, r25
     9a8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     9ac:	99 e5       	ldi	r25, 0x59	; 89
     9ae:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     9b8:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     9bc:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     9c0:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     9c4:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     9c8:	25 e7       	ldi	r18, 0x75	; 117
     9ca:	34 e2       	ldi	r19, 0x24	; 36
     9cc:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     9d0:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     9d4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     9d8:	9b e3       	ldi	r25, 0x3B	; 59
     9da:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     9e4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     9e8:	2c 91       	ld	r18, X
     9ea:	20 68       	ori	r18, 0x80	; 128
     9ec:	2c 93       	st	X, r18
     9ee:	c0 8b       	std	Z+16, r28	; 0x10
     9f0:	91 8b       	std	Z+17, r25	; 0x11
     9f2:	31 e9       	ldi	r19, 0x91	; 145
     9f4:	32 8b       	std	Z+18, r19	; 0x12
     9f6:	43 8b       	std	Z+19, r20	; 0x13
     9f8:	47 e7       	ldi	r20, 0x77	; 119
     9fa:	51 e0       	ldi	r21, 0x01	; 1
     9fc:	44 8b       	std	Z+20, r20	; 0x14
     9fe:	55 8b       	std	Z+21, r21	; 0x15
     a00:	60 8f       	std	Z+24, r22	; 0x18
     a02:	81 8f       	std	Z+25, r24	; 0x19
     a04:	12 8e       	std	Z+26, r1	; 0x1a
     a06:	66 e7       	ldi	r22, 0x76	; 118
     a08:	7a e2       	ldi	r23, 0x2A	; 42
     a0a:	64 8f       	std	Z+28, r22	; 0x1c
     a0c:	75 8f       	std	Z+29, r23	; 0x1d
     a0e:	16 8e       	std	Z+30, r1	; 0x1e
     a10:	20 89       	ldd	r18, Z+16	; 0x10
     a12:	20 68       	ori	r18, 0x80	; 128
     a14:	20 8b       	std	Z+16, r18	; 0x10
     a16:	c0 ab       	std	Z+48, r28	; 0x30
     a18:	91 ab       	std	Z+49, r25	; 0x31
     a1a:	32 ab       	std	Z+50, r19	; 0x32
     a1c:	9a e4       	ldi	r25, 0x4A	; 74
     a1e:	93 ab       	std	Z+51, r25	; 0x33
     a20:	44 ab       	std	Z+52, r20	; 0x34
     a22:	55 ab       	std	Z+53, r21	; 0x35
     a24:	93 ec       	ldi	r25, 0xC3	; 195
     a26:	90 af       	std	Z+56, r25	; 0x38
     a28:	81 af       	std	Z+57, r24	; 0x39
     a2a:	12 ae       	std	Z+58, r1	; 0x3a
     a2c:	8d ee       	ldi	r24, 0xED	; 237
     a2e:	9b e2       	ldi	r25, 0x2B	; 43
     a30:	84 af       	std	Z+60, r24	; 0x3c
     a32:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     a36:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     a3a:	80 a9       	ldd	r24, Z+48	; 0x30
     a3c:	80 68       	ori	r24, 0x80	; 128
     a3e:	80 ab       	std	Z+48, r24	; 0x30
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <tiny_dma_set_mode_5>:
     a44:	85 e0       	ldi	r24, 0x05	; 5
     a46:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     a4a:	95 dd       	rcall	.-1238   	; 0x576 <tiny_dma_flush>
     a4c:	e0 e0       	ldi	r30, 0x00	; 0
     a4e:	f1 e0       	ldi	r31, 0x01	; 1
     a50:	16 aa       	std	Z+54, r1	; 0x36
     a52:	34 e2       	ldi	r19, 0x24	; 36
     a54:	30 ab       	std	Z+48, r19	; 0x30
     a56:	11 aa       	std	Z+49, r1	; 0x31
     a58:	29 e5       	ldi	r18, 0x59	; 89
     a5a:	22 ab       	std	Z+50, r18	; 0x32
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	83 ab       	std	Z+51, r24	; 0x33
     a60:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     a64:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     a68:	44 ab       	std	Z+52, r20	; 0x34
     a6a:	55 ab       	std	Z+53, r21	; 0x35
     a6c:	42 e6       	ldi	r20, 0x62	; 98
     a6e:	52 e2       	ldi	r21, 0x22	; 34
     a70:	40 af       	std	Z+56, r20	; 0x38
     a72:	51 af       	std	Z+57, r21	; 0x39
     a74:	12 ae       	std	Z+58, r1	; 0x3a
     a76:	99 e3       	ldi	r25, 0x39	; 57
     a78:	94 af       	std	Z+60, r25	; 0x3c
     a7a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     a7e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     a82:	90 a9       	ldd	r25, Z+48	; 0x30
     a84:	90 68       	ori	r25, 0x80	; 128
     a86:	90 ab       	std	Z+48, r25	; 0x30
     a88:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     a8c:	e0 e4       	ldi	r30, 0x40	; 64
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	30 83       	st	Z, r19
     a92:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     a96:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     a9a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     a9e:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
     aa2:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
     aa6:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     aaa:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     aae:	25 e7       	ldi	r18, 0x75	; 117
     ab0:	34 e2       	ldi	r19, 0x24	; 36
     ab2:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     ab6:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     aba:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     abe:	9b e3       	ldi	r25, 0x3B	; 59
     ac0:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ac4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     ac8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     acc:	80 81       	ld	r24, Z
     ace:	80 68       	ori	r24, 0x80	; 128
     ad0:	80 83       	st	Z, r24
     ad2:	08 95       	ret

00000ad4 <tiny_dma_set_mode_6>:
     ad4:	86 e0       	ldi	r24, 0x06	; 6
     ad6:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     ada:	4d dd       	rcall	.-1382   	; 0x576 <tiny_dma_flush>
     adc:	e0 e0       	ldi	r30, 0x00	; 0
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	16 aa       	std	Z+54, r1	; 0x36
     ae2:	94 e2       	ldi	r25, 0x24	; 36
     ae4:	90 ab       	std	Z+48, r25	; 0x30
     ae6:	11 aa       	std	Z+49, r1	; 0x31
     ae8:	39 e5       	ldi	r19, 0x59	; 89
     aea:	32 ab       	std	Z+50, r19	; 0x32
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	83 ab       	std	Z+51, r24	; 0x33
     af0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     af4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     af8:	44 ab       	std	Z+52, r20	; 0x34
     afa:	55 ab       	std	Z+53, r21	; 0x35
     afc:	42 e6       	ldi	r20, 0x62	; 98
     afe:	52 e2       	ldi	r21, 0x22	; 34
     b00:	40 af       	std	Z+56, r20	; 0x38
     b02:	51 af       	std	Z+57, r21	; 0x39
     b04:	12 ae       	std	Z+58, r1	; 0x3a
     b06:	29 e3       	ldi	r18, 0x39	; 57
     b08:	24 af       	std	Z+60, r18	; 0x3c
     b0a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b0e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b12:	20 a9       	ldd	r18, Z+48	; 0x30
     b14:	20 68       	ori	r18, 0x80	; 128
     b16:	20 ab       	std	Z+48, r18	; 0x30
     b18:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b1c:	a0 e4       	ldi	r26, 0x40	; 64
     b1e:	b1 e0       	ldi	r27, 0x01	; 1
     b20:	9c 93       	st	X, r25
     b22:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b26:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b2a:	32 e0       	ldi	r19, 0x02	; 2
     b2c:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b30:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     b34:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     b38:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b3c:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     b40:	45 e7       	ldi	r20, 0x75	; 117
     b42:	54 e2       	ldi	r21, 0x24	; 36
     b44:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b48:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b4c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b50:	2b e3       	ldi	r18, 0x3B	; 59
     b52:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b56:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b5a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b5e:	2c 91       	ld	r18, X
     b60:	20 68       	ori	r18, 0x80	; 128
     b62:	2c 93       	st	X, r18
     b64:	10 8a       	std	Z+16, r1	; 0x10
     b66:	20 e4       	ldi	r18, 0x40	; 64
     b68:	20 8b       	std	Z+16, r18	; 0x10
     b6a:	24 e0       	ldi	r18, 0x04	; 4
     b6c:	20 8b       	std	Z+16, r18	; 0x10
     b6e:	81 8b       	std	Z+17, r24	; 0x11
     b70:	81 e9       	ldi	r24, 0x91	; 145
     b72:	82 8b       	std	Z+18, r24	; 0x12
     b74:	80 e1       	ldi	r24, 0x10	; 16
     b76:	83 8b       	std	Z+19, r24	; 0x13
     b78:	4e ee       	ldi	r20, 0xEE	; 238
     b7a:	52 e0       	ldi	r21, 0x02	; 2
     b7c:	44 8b       	std	Z+20, r20	; 0x14
     b7e:	55 8b       	std	Z+21, r21	; 0x15
     b80:	90 8f       	std	Z+24, r25	; 0x18
     b82:	31 8f       	std	Z+25, r19	; 0x19
     b84:	12 8e       	std	Z+26, r1	; 0x1a
     b86:	86 e7       	ldi	r24, 0x76	; 118
     b88:	9a e2       	ldi	r25, 0x2A	; 42
     b8a:	84 8f       	std	Z+28, r24	; 0x1c
     b8c:	95 8f       	std	Z+29, r25	; 0x1d
     b8e:	16 8e       	std	Z+30, r1	; 0x1e
     b90:	80 89       	ldd	r24, Z+16	; 0x10
     b92:	80 68       	ori	r24, 0x80	; 128
     b94:	80 8b       	std	Z+16, r24	; 0x10
     b96:	08 95       	ret

00000b98 <tiny_dma_set_mode_7>:
     b98:	87 e0       	ldi	r24, 0x07	; 7
     b9a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     b9e:	eb dc       	rcall	.-1578   	; 0x576 <tiny_dma_flush>
     ba0:	e0 e0       	ldi	r30, 0x00	; 0
     ba2:	f1 e0       	ldi	r31, 0x01	; 1
     ba4:	16 aa       	std	Z+54, r1	; 0x36
     ba6:	94 e2       	ldi	r25, 0x24	; 36
     ba8:	90 ab       	std	Z+48, r25	; 0x30
     baa:	11 aa       	std	Z+49, r1	; 0x31
     bac:	39 e5       	ldi	r19, 0x59	; 89
     bae:	32 ab       	std	Z+50, r19	; 0x32
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	83 ab       	std	Z+51, r24	; 0x33
     bb4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     bb8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     bbc:	44 ab       	std	Z+52, r20	; 0x34
     bbe:	55 ab       	std	Z+53, r21	; 0x35
     bc0:	42 e6       	ldi	r20, 0x62	; 98
     bc2:	52 e2       	ldi	r21, 0x22	; 34
     bc4:	40 af       	std	Z+56, r20	; 0x38
     bc6:	51 af       	std	Z+57, r21	; 0x39
     bc8:	12 ae       	std	Z+58, r1	; 0x3a
     bca:	29 e3       	ldi	r18, 0x39	; 57
     bcc:	24 af       	std	Z+60, r18	; 0x3c
     bce:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     bd2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bd6:	20 a9       	ldd	r18, Z+48	; 0x30
     bd8:	20 68       	ori	r18, 0x80	; 128
     bda:	20 ab       	std	Z+48, r18	; 0x30
     bdc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     be0:	a0 e4       	ldi	r26, 0x40	; 64
     be2:	b1 e0       	ldi	r27, 0x01	; 1
     be4:	9c 93       	st	X, r25
     be6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bea:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     bee:	32 e0       	ldi	r19, 0x02	; 2
     bf0:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bf4:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     bf8:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     bfc:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c00:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c04:	45 e7       	ldi	r20, 0x75	; 117
     c06:	54 e2       	ldi	r21, 0x24	; 36
     c08:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c0c:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c10:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c14:	2b e3       	ldi	r18, 0x3B	; 59
     c16:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c1a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c1e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c22:	2c 91       	ld	r18, X
     c24:	20 68       	ori	r18, 0x80	; 128
     c26:	2c 93       	st	X, r18
     c28:	10 8a       	std	Z+16, r1	; 0x10
     c2a:	20 e4       	ldi	r18, 0x40	; 64
     c2c:	20 8b       	std	Z+16, r18	; 0x10
     c2e:	25 e0       	ldi	r18, 0x05	; 5
     c30:	20 8b       	std	Z+16, r18	; 0x10
     c32:	81 8b       	std	Z+17, r24	; 0x11
     c34:	81 e9       	ldi	r24, 0x91	; 145
     c36:	82 8b       	std	Z+18, r24	; 0x12
     c38:	80 e1       	ldi	r24, 0x10	; 16
     c3a:	83 8b       	std	Z+19, r24	; 0x13
     c3c:	4e ee       	ldi	r20, 0xEE	; 238
     c3e:	52 e0       	ldi	r21, 0x02	; 2
     c40:	44 8b       	std	Z+20, r20	; 0x14
     c42:	55 8b       	std	Z+21, r21	; 0x15
     c44:	90 8f       	std	Z+24, r25	; 0x18
     c46:	31 8f       	std	Z+25, r19	; 0x19
     c48:	12 8e       	std	Z+26, r1	; 0x1a
     c4a:	86 e7       	ldi	r24, 0x76	; 118
     c4c:	9a e2       	ldi	r25, 0x2A	; 42
     c4e:	84 8f       	std	Z+28, r24	; 0x1c
     c50:	95 8f       	std	Z+29, r25	; 0x1d
     c52:	16 8e       	std	Z+30, r1	; 0x1e
     c54:	80 89       	ldd	r24, Z+16	; 0x10
     c56:	80 68       	ori	r24, 0x80	; 128
     c58:	80 8b       	std	Z+16, r24	; 0x10
     c5a:	08 95       	ret

00000c5c <__vector_6>:
}

ISR(DMA_CH0_vect){
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     c6e:	87 e7       	ldi	r24, 0x77	; 119
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     c76:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	if(b1_state){
     c7a:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <b1_state>
     c7e:	88 23       	and	r24, r24
     c80:	49 f0       	breq	.+18     	; 0xc94 <__vector_6+0x38>
		DMA.CH0.DESTADDR0 = precalc_DMA_CH0_DESTADDR0_b1_state_equals_1;
     c82:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_1>
     c86:	e0 e0       	ldi	r30, 0x00	; 0
     c88:	f1 e0       	ldi	r31, 0x01	; 1
     c8a:	84 8f       	std	Z+28, r24	; 0x1c
		DMA.CH0.DESTADDR1 = precalc_DMA_CH0_DESTADDR1_b1_state_equals_1;
     c8c:	80 91 60 22 	lds	r24, 0x2260	; 0x802260 <precalc_DMA_CH0_DESTADDR1_b1_state_equals_1>
     c90:	85 8f       	std	Z+29, r24	; 0x1d
     c92:	08 c0       	rjmp	.+16     	; 0xca4 <__vector_6+0x48>
		}	else {
			DMA.CH0.DESTADDR0 = precalc_DMA_CH0_DESTADDR0_b1_state_equals_0;
     c94:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_0>
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f1 e0       	ldi	r31, 0x01	; 1
     c9c:	84 8f       	std	Z+28, r24	; 0x1c
			DMA.CH0.DESTADDR1 = precalc_DMA_CH0_DESTADDR1_b1_state_equals_0;
     c9e:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <precalc_DMA_CH0_DESTADDR1_b1_state_equals_0>
     ca2:	85 8f       	std	Z+29, r24	; 0x1d
		}
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ca4:	e0 e0       	ldi	r30, 0x00	; 0
     ca6:	f1 e0       	ldi	r31, 0x01	; 1
     ca8:	80 89       	ldd	r24, Z+16	; 0x10
     caa:	80 68       	ori	r24, 0x80	; 128
     cac:	80 8b       	std	Z+16, r24	; 0x10
	b1_state = !b1_state;
     cae:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <b1_state>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	91 11       	cpse	r25, r1
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <b1_state>
	DMA.INTFLAGS = 0x01;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		break;
		default:
		////////////////////////////////////////
		break;
	}*/
}
     cc2:	ff 91       	pop	r31
     cc4:	ef 91       	pop	r30
     cc6:	9f 91       	pop	r25
     cc8:	8f 91       	pop	r24
     cca:	0f 90       	pop	r0
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	0f 90       	pop	r0
     cd0:	1f 90       	pop	r1
     cd2:	18 95       	reti

00000cd4 <__vector_7>:

ISR(DMA_CH1_vect){
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
	DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     ce6:	87 e7       	ldi	r24, 0x77	; 119
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     cee:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
	if(b2_state){
     cf2:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <b2_state>
     cf6:	88 23       	and	r24, r24
     cf8:	49 f0       	breq	.+18     	; 0xd0c <__vector_7+0x38>
		DMA.CH1.DESTADDR0 = precalc_DMA_CH1_DESTADDR0_b2_state_equals_1;
     cfa:	80 91 52 30 	lds	r24, 0x3052	; 0x803052 <precalc_DMA_CH1_DESTADDR0_b2_state_equals_1>
     cfe:	e0 e0       	ldi	r30, 0x00	; 0
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	84 a7       	std	Z+44, r24	; 0x2c
		DMA.CH1.DESTADDR1 = precalc_DMA_CH1_DESTADDR1_b2_state_equals_1;
     d04:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <precalc_DMA_CH1_DESTADDR1_b2_state_equals_1>
     d08:	85 a7       	std	Z+45, r24	; 0x2d
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <__vector_7+0x48>
		} else {
			DMA.CH1.DESTADDR0 = precalc_DMA_CH1_DESTADDR0_b2_state_equals_0;
     d0c:	80 91 5b 22 	lds	r24, 0x225B	; 0x80225b <precalc_DMA_CH1_DESTADDR0_b2_state_equals_0>
     d10:	e0 e0       	ldi	r30, 0x00	; 0
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	84 a7       	std	Z+44, r24	; 0x2c
			DMA.CH1.DESTADDR1 = precalc_DMA_CH1_DESTADDR1_b2_state_equals_0;
     d16:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <precalc_DMA_CH1_DESTADDR1_b2_state_equals_0>
     d1a:	85 a7       	std	Z+45, r24	; 0x2d
	}
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d1c:	e0 e0       	ldi	r30, 0x00	; 0
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	80 a1       	ldd	r24, Z+32	; 0x20
     d22:	80 68       	ori	r24, 0x80	; 128
     d24:	80 a3       	std	Z+32, r24	; 0x20
	b2_state = !b2_state;
     d26:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b2_state>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	91 11       	cpse	r25, r1
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b2_state>
	DMA.INTFLAGS = 0x02;
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		break;
		default:
		////////////////////////////////////////
		break;
	}*/
}
     d3a:	ff 91       	pop	r31
     d3c:	ef 91       	pop	r30
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	0f 90       	pop	r0
     d48:	1f 90       	pop	r1
     d4a:	18 95       	reti

00000d4c <__vector_8>:
ISR(DMA_CH2_vect){
     d4c:	1f 92       	push	r1
     d4e:	0f 92       	push	r0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	0f 92       	push	r0
     d54:	11 24       	eor	r1, r1
     d56:	2f 93       	push	r18
     d58:	3f 93       	push	r19
     d5a:	4f 93       	push	r20
     d5c:	8f 93       	push	r24
     d5e:	9f 93       	push	r25
     d60:	ef 93       	push	r30
     d62:	ff 93       	push	r31
	DMA.INTFLAGS = 0x04;
     d64:	e0 e0       	ldi	r30, 0x00	; 0
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	84 e0       	ldi	r24, 0x04	; 4
     d6a:	83 83       	std	Z+3, r24	; 0x03
	DMA.CH2.TRFCNT = HALFPACKET_SIZE;		
     d6c:	87 e7       	ldi	r24, 0x77	; 119
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	84 ab       	std	Z+52, r24	; 0x34
     d72:	95 ab       	std	Z+53, r25	; 0x35
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d74:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b2_state>
     d78:	2e ee       	ldi	r18, 0xEE	; 238
     d7a:	32 e0       	ldi	r19, 0x02	; 2
     d7c:	42 9f       	mul	r20, r18
     d7e:	c0 01       	movw	r24, r0
     d80:	43 9f       	mul	r20, r19
     d82:	90 0d       	add	r25, r0
     d84:	11 24       	eor	r1, r1
     d86:	83 51       	subi	r24, 0x13	; 19
     d88:	94 4d       	sbci	r25, 0xD4	; 212
     d8a:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;	
     d8c:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b2_state>
     d90:	42 9f       	mul	r20, r18
     d92:	c0 01       	movw	r24, r0
     d94:	43 9f       	mul	r20, r19
     d96:	90 0d       	add	r25, r0
     d98:	11 24       	eor	r1, r1
     d9a:	83 51       	subi	r24, 0x13	; 19
     d9c:	94 4d       	sbci	r25, 0xD4	; 212
     d9e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     da2:	80 a9       	ldd	r24, Z+48	; 0x30
     da4:	80 68       	ori	r24, 0x80	; 128
     da6:	80 ab       	std	Z+48, r24	; 0x30
	b2_state = !b2_state;
     da8:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b2_state>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	91 11       	cpse	r25, r1
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b2_state>
}
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_9>:

ISR(DMA_CH3_vect){
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	ef 93       	push	r30
     de4:	ff 93       	push	r31
	DMA.INTFLAGS = 0x08;
     de6:	88 e0       	ldi	r24, 0x08	; 8
     de8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	DMA.CH3.TRFCNT = HALFPACKET_SIZE;
     dec:	87 e7       	ldi	r24, 0x77	; 119
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     df4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     df8:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b2_state>
     dfc:	2e ee       	ldi	r18, 0xEE	; 238
     dfe:	32 e0       	ldi	r19, 0x02	; 2
     e00:	42 9f       	mul	r20, r18
     e02:	c0 01       	movw	r24, r0
     e04:	43 9f       	mul	r20, r19
     e06:	90 0d       	add	r25, r0
     e08:	11 24       	eor	r1, r1
     e0a:	83 51       	subi	r24, 0x13	; 19
     e0c:	94 4d       	sbci	r25, 0xD4	; 212
     e0e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
     e12:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <b2_state>
     e16:	42 9f       	mul	r20, r18
     e18:	c0 01       	movw	r24, r0
     e1a:	43 9f       	mul	r20, r19
     e1c:	90 0d       	add	r25, r0
     e1e:	11 24       	eor	r1, r1
     e20:	83 51       	subi	r24, 0x13	; 19
     e22:	94 4d       	sbci	r25, 0xD4	; 212
     e24:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e28:	e0 e4       	ldi	r30, 0x40	; 64
     e2a:	f1 e0       	ldi	r31, 0x01	; 1
     e2c:	80 81       	ld	r24, Z
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	80 83       	st	Z, r24
	b2_state = !b2_state;
     e32:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <b2_state>
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	91 11       	cpse	r25, r1
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <b2_state>
}
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	9f 91       	pop	r25
     e46:	8f 91       	pop	r24
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     e58:	e0 e7       	ldi	r30, 0x70	; 112
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	83 81       	ldd	r24, Z+3	; 0x03
     e5e:	8c 7f       	andi	r24, 0xFC	; 252
     e60:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     e62:	84 81       	ldd	r24, Z+4	; 0x04
     e64:	8c 7f       	andi	r24, 0xFC	; 252
     e66:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     e68:	80 81       	ld	r24, Z
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     e6e:	e0 e8       	ldi	r30, 0x80	; 128
     e70:	f1 e0       	ldi	r31, 0x01	; 1
     e72:	80 ec       	ldi	r24, 0xC0	; 192
     e74:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     e76:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
     e78:	88 ec       	ldi	r24, 0xC8	; 200
     e7a:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     e7c:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b8 e0       	ldi	r27, 0x08	; 8
     e82:	34 e0       	ldi	r19, 0x04	; 4
     e84:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     e86:	23 e0       	ldi	r18, 0x03	; 3
     e88:	11 96       	adiw	r26, 0x01	; 1
     e8a:	2c 93       	st	X, r18
     e8c:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     e8e:	14 96       	adiw	r26, 0x04	; 4
     e90:	1c 92       	st	X, r1
     e92:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
     e94:	85 ed       	ldi	r24, 0xD5	; 213
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	96 96       	adiw	r26, 0x26	; 38
     e9a:	8d 93       	st	X+, r24
     e9c:	9c 93       	st	X, r25
     e9e:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
     ea0:	16 96       	adiw	r26, 0x06	; 6
     ea2:	1c 92       	st	X, r1
     ea4:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     ea6:	e0 e4       	ldi	r30, 0x40	; 64
     ea8:	f8 e0       	ldi	r31, 0x08	; 8
     eaa:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     eac:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
     eae:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
     eb0:	86 a3       	std	Z+38, r24	; 0x26
     eb2:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
     eb4:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
     eb6:	e0 e6       	ldi	r30, 0x60	; 96
     eb8:	f6 e0       	ldi	r31, 0x06	; 6
     eba:	80 81       	ld	r24, Z
     ebc:	80 61       	ori	r24, 0x10	; 16
     ebe:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
     ec0:	e0 e4       	ldi	r30, 0x40	; 64
     ec2:	f9 e0       	ldi	r31, 0x09	; 9
     ec4:	83 e1       	ldi	r24, 0x13	; 19
     ec6:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
     ec8:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
     ece:	a6 a3       	std	Z+38, r26	; 0x26
     ed0:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
     ed2:	10 a6       	std	Z+40, r1	; 0x28
     ed4:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	80 83       	st	Z, r24
     eda:	08 95       	ret

00000edc <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	2f 93       	push	r18
     ee8:	3f 93       	push	r19
     eea:	4f 93       	push	r20
     eec:	5f 93       	push	r21
     eee:	8f 93       	push	r24
     ef0:	9f 93       	push	r25
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	1f 92       	push	r1
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
     f06:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     f0a:	87 30       	cpi	r24, 0x07	; 7
     f0c:	31 f4       	brne	.+12     	; 0xf1a <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
     f0e:	e0 e0       	ldi	r30, 0x00	; 0
     f10:	f2 e0       	ldi	r31, 0x02	; 2
     f12:	84 a5       	ldd	r24, Z+44	; 0x2c
     f14:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
     f16:	95 a5       	ldd	r25, Z+45	; 0x2d
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
     f1a:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
     f1e:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <PSU_target>
     f22:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
     f24:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     f28:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	0c f4       	brge	.+2      	; 0xf34 <__vector_83+0x58>
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	99 23       	and	r25, r25
     f36:	c9 f0       	breq	.+50     	; 0xf6a <__vector_83+0x8e>
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	2a 3f       	cpi	r18, 0xFA	; 250
     f3c:	37 40       	sbci	r19, 0x07	; 7
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <__vector_83+0x66>
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	99 23       	and	r25, r25
     f44:	91 f0       	breq	.+36     	; 0xf6a <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
     f46:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     f4a:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     f4e:	89 30       	cpi	r24, 0x09	; 9
     f50:	1c f4       	brge	.+6      	; 0xf58 <__vector_83+0x7c>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <__vector_83+0x80>
     f58:	86 e0       	ldi	r24, 0x06	; 6
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	82 0f       	add	r24, r18
     f5e:	93 1f       	adc	r25, r19
     f60:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     f64:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
     f68:	23 c0       	rjmp	.+70     	; 0xfb0 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
     f6a:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     f6e:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	8f 3f       	cpi	r24, 0xFF	; 255
     f76:	0c f0       	brlt	.+2      	; 0xf7a <__vector_83+0x9e>
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	99 23       	and	r25, r25
     f7c:	c9 f0       	breq	.+50     	; 0xfb0 <__vector_83+0xd4>
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	27 30       	cpi	r18, 0x07	; 7
     f82:	31 05       	cpc	r19, r1
     f84:	08 f4       	brcc	.+2      	; 0xf88 <__vector_83+0xac>
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	99 23       	and	r25, r25
     f8a:	91 f0       	breq	.+36     	; 0xfb0 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
     f8c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     f90:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     f94:	88 3f       	cpi	r24, 0xF8	; 248
     f96:	1c f0       	brlt	.+6      	; 0xf9e <__vector_83+0xc2>
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <__vector_83+0xc6>
     f9e:	86 e0       	ldi	r24, 0x06	; 6
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a9 01       	movw	r20, r18
     fa4:	48 1b       	sub	r20, r24
     fa6:	59 0b       	sbc	r21, r25
     fa8:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     fac:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
     fb0:	0f 90       	pop	r0
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
     fd0:	e0 e7       	ldi	r30, 0x70	; 112
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	83 81       	ldd	r24, Z+3	; 0x03
     fd6:	8f 7e       	andi	r24, 0xEF	; 239
     fd8:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
     fda:	e0 e4       	ldi	r30, 0x40	; 64
     fdc:	f6 e0       	ldi	r31, 0x06	; 6
     fde:	80 81       	ld	r24, Z
     fe0:	8a 6a       	ori	r24, 0xAA	; 170
     fe2:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     fe8:	88 e5       	ldi	r24, 0x58	; 88
     fea:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
     fec:	e0 ea       	ldi	r30, 0xA0	; 160
     fee:	f8 e0       	ldi	r31, 0x08	; 8
     ff0:	84 ec       	ldi	r24, 0xC4	; 196
     ff2:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
     ff8:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     ffa:	88 e1       	ldi	r24, 0x18	; 24
     ffc:	84 83       	std	Z+4, r24	; 0x04
     ffe:	08 95       	ret

00001000 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    1000:	e0 e7       	ldi	r30, 0x70	; 112
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	83 81       	ldd	r24, Z+3	; 0x03
    1006:	87 7f       	andi	r24, 0xF7	; 247
    1008:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    100a:	e0 ec       	ldi	r30, 0xC0	; 192
    100c:	f8 e0       	ldi	r31, 0x08	; 8
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    1012:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1014:	88 e5       	ldi	r24, 0x58	; 88
    1016:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    101a:	08 95       	ret

0000101c <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
	asm("nop");
    1026:	00 00       	nop
}
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	00 d0       	rcall	.+0      	; 0x103c <sysclk_init+0xa>
    103c:	00 d0       	rcall	.+0      	; 0x103e <sysclk_init+0xc>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1048:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    104c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1050:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1054:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1058:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    105c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    1060:	64 e0       	ldi	r22, 0x04	; 4
    1062:	81 e4       	ldi	r24, 0x41	; 65
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	be d5       	rcall	.+2940   	; 0x1be4 <ccp_write_io>
    1068:	6c e1       	ldi	r22, 0x1C	; 28
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	c0 d5       	rcall	.+2944   	; 0x1bf0 <nvm_read_byte>
    1070:	8a 83       	std	Y+2, r24	; 0x02
    1072:	6d e1       	ldi	r22, 0x1D	; 29
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	bb d5       	rcall	.+2934   	; 0x1bf0 <nvm_read_byte>
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	21 f4       	brne	.+8      	; 0x108c <sysclk_init+0x5a>
    1084:	80 e4       	ldi	r24, 0x40	; 64
    1086:	93 e2       	ldi	r25, 0x23	; 35
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	8b 83       	std	Y+3, r24	; 0x03
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	e0 e6       	ldi	r30, 0x60	; 96
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	82 83       	std	Z+2, r24	; 0x02
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	83 83       	std	Z+3, r24	; 0x03
    109e:	9f b7       	in	r25, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	e0 e5       	ldi	r30, 0x50	; 80
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	80 83       	st	Z, r24
    10ac:	9f bf       	out	0x3f, r25	; 63
    10ae:	81 81       	ldd	r24, Z+1	; 0x01
    10b0:	81 ff       	sbrs	r24, 1
    10b2:	fd cf       	rjmp	.-6      	; 0x10ae <sysclk_init+0x7c>
    10b4:	9f b7       	in	r25, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	00 e5       	ldi	r16, 0x50	; 80
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	d8 01       	movw	r26, r16
    10be:	16 96       	adiw	r26, 0x06	; 6
    10c0:	8c 91       	ld	r24, X
    10c2:	16 97       	sbiw	r26, 0x06	; 6
    10c4:	89 7f       	andi	r24, 0xF9	; 249
    10c6:	16 96       	adiw	r26, 0x06	; 6
    10c8:	8c 93       	st	X, r24
    10ca:	16 97       	sbiw	r26, 0x06	; 6
    10cc:	e0 e6       	ldi	r30, 0x60	; 96
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 e8       	ldi	r24, 0x80	; 128
    10d2:	85 83       	std	Z+5, r24	; 0x05
    10d4:	8b eb       	ldi	r24, 0xBB	; 187
    10d6:	86 83       	std	Z+6, r24	; 0x06
    10d8:	16 96       	adiw	r26, 0x06	; 6
    10da:	8c 91       	ld	r24, X
    10dc:	16 97       	sbiw	r26, 0x06	; 6
    10de:	84 60       	ori	r24, 0x04	; 4
    10e0:	16 96       	adiw	r26, 0x06	; 6
    10e2:	8c 93       	st	X, r24
    10e4:	80 81       	ld	r24, Z
    10e6:	81 60       	ori	r24, 0x01	; 1
    10e8:	80 83       	st	Z, r24
    10ea:	9f bf       	out	0x3f, r25	; 63
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	80 e4       	ldi	r24, 0x40	; 64
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	78 d5       	rcall	.+2800   	; 0x1be4 <ccp_write_io>
    10f4:	9f b7       	in	r25, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	f8 01       	movw	r30, r16
    10fa:	80 81       	ld	r24, Z
    10fc:	8e 7f       	andi	r24, 0xFE	; 254
    10fe:	80 83       	st	Z, r24
    1100:	9f bf       	out	0x3f, r25	; 63
    1102:	24 96       	adiw	r28, 0x04	; 4
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	08 95       	ret

00001112 <sysclk_enable_module>:
    1112:	9f b7       	in	r25, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	e8 2f       	mov	r30, r24
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	e0 59       	subi	r30, 0x90	; 144
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	60 95       	com	r22
    1120:	80 81       	ld	r24, Z
    1122:	68 23       	and	r22, r24
    1124:	60 83       	st	Z, r22
    1126:	9f bf       	out	0x3f, r25	; 63
    1128:	08 95       	ret

0000112a <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    112a:	86 30       	cpi	r24, 0x06	; 6
    112c:	11 f0       	breq	.+4      	; 0x1132 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1132:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1134:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1138:	81 fd       	sbrc	r24, 1
    113a:	26 c0       	rjmp	.+76     	; 0x1188 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    113c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    113e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1140:	e0 e5       	ldi	r30, 0x50	; 80
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	82 60       	ori	r24, 0x02	; 2
    1148:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    114a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    114c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    114e:	81 ff       	sbrs	r24, 1
    1150:	fd cf       	rjmp	.-6      	; 0x114c <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1152:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1154:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1156:	a0 e5       	ldi	r26, 0x50	; 80
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	16 96       	adiw	r26, 0x06	; 6
    115c:	8c 91       	ld	r24, X
    115e:	16 97       	sbiw	r26, 0x06	; 6
    1160:	89 7f       	andi	r24, 0xF9	; 249
    1162:	16 96       	adiw	r26, 0x06	; 6
    1164:	8c 93       	st	X, r24
    1166:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1168:	e0 e6       	ldi	r30, 0x60	; 96
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 e8       	ldi	r24, 0x80	; 128
    116e:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1170:	8b eb       	ldi	r24, 0xBB	; 187
    1172:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1174:	16 96       	adiw	r26, 0x06	; 6
    1176:	8c 91       	ld	r24, X
    1178:	16 97       	sbiw	r26, 0x06	; 6
    117a:	84 60       	ori	r24, 0x04	; 4
    117c:	16 96       	adiw	r26, 0x06	; 6
    117e:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1180:	80 81       	ld	r24, Z
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1186:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1188:	63 60       	ori	r22, 0x03	; 3
    118a:	84 e4       	ldi	r24, 0x44	; 68
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	2a d5       	rcall	.+2644   	; 0x1be4 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1190:	60 e4       	ldi	r22, 0x40	; 64
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	be cf       	rjmp	.-132    	; 0x1112 <sysclk_enable_module>
    1196:	08 95       	ret

00001198 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1198:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <udi_vendor_alternate_setting>
    119c:	08 95       	ret

0000119e <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    119e:	40 d1       	rcall	.+640    	; 0x1420 <udc_get_interface_desc>
    11a0:	fc 01       	movw	r30, r24
    11a2:	83 81       	ldd	r24, Z+3	; 0x03
    11a4:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    11a8:	81 11       	cpse	r24, r1
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    11ac:	27 c9       	rjmp	.-3506   	; 0x3fc <main_vendor_enable>
    11ae:	08 95       	ret
			return false;
		}
	}
	return true;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
}
    11b2:	08 95       	ret

000011b4 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    11b4:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <udi_vendor_alternate_setting>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	09 f4       	brne	.+2      	; 0x11be <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    11bc:	39 c9       	rjmp	.-3470   	; 0x430 <main_vendor_disable>
    11be:	08 95       	ret

000011c0 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    11c0:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq>
    11c4:	88 23       	and	r24, r24
    11c6:	4c f4       	brge	.+18     	; 0x11da <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    11c8:	80 76       	andi	r24, 0x60	; 96
    11ca:	80 34       	cpi	r24, 0x40	; 64
    11cc:	a9 f4       	brne	.+42     	; 0x11f8 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    11ce:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x1>
    11d2:	81 11       	cpse	r24, r1
    11d4:	13 c0       	rjmp	.+38     	; 0x11fc <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    11d6:	31 c9       	rjmp	.-3486   	; 0x43a <main_setup_in_received>
    11d8:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    11da:	80 76       	andi	r24, 0x60	; 96
    11dc:	80 34       	cpi	r24, 0x40	; 64
    11de:	81 f4       	brne	.+32     	; 0x1200 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    11e0:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x1>
    11e4:	81 11       	cpse	r24, r1
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    11e8:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    11ec:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    11f0:	89 2b       	or	r24, r25
    11f2:	51 f0       	breq	.+20     	; 0x1208 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    11f4:	20 c9       	rjmp	.-3520   	; 0x436 <main_setup_out_received>
    11f6:	08 95       	ret
		}
	}
	return false; // Not supported request
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	08 95       	ret
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	08 95       	ret
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	08 95       	ret
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret
    1208:	80 e0       	ldi	r24, 0x00	; 0
}
    120a:	08 95       	ret

0000120c <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    1212:	8a 01       	movw	r16, r20
    1214:	ac 01       	movw	r20, r24
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	81 e8       	ldi	r24, 0x81	; 129
    121a:	0e 94 66 12 	call	0x24cc	; 0x24cc <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	08 95       	ret

00001224 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    122a:	8a 01       	movw	r16, r20
    122c:	ac 01       	movw	r20, r24
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	82 e8       	ldi	r24, 0x82	; 130
    1232:	0e 94 66 12 	call	0x24cc	; 0x24cc <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	08 95       	ret

0000123c <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    1242:	8a 01       	movw	r16, r20
    1244:	ac 01       	movw	r20, r24
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	83 e8       	ldi	r24, 0x83	; 131
    124a:	0e 94 66 12 	call	0x24cc	; 0x24cc <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	08 95       	ret

00001254 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1254:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1258:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    125c:	01 90       	ld	r0, Z+
    125e:	f0 81       	ld	r31, Z
    1260:	e0 2d       	mov	r30, r0
    1262:	22 81       	ldd	r18, Z+2	; 0x02
    1264:	33 81       	ldd	r19, Z+3	; 0x03
    1266:	2e 0f       	add	r18, r30
    1268:	3f 1f       	adc	r19, r31
    126a:	fc 01       	movw	r30, r24
    126c:	40 81       	ld	r20, Z
    126e:	e4 0f       	add	r30, r20
    1270:	f1 1d       	adc	r31, r1
    1272:	e2 17       	cp	r30, r18
    1274:	f3 07       	cpc	r31, r19
    1276:	b8 f4       	brcc	.+46     	; 0x12a6 <udc_next_desc_in_iface+0x52>
    1278:	81 81       	ldd	r24, Z+1	; 0x01
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	b9 f0       	breq	.+46     	; 0x12ac <udc_next_desc_in_iface+0x58>
    127e:	86 13       	cpse	r24, r22
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <udc_next_desc_in_iface+0x40>
    1282:	05 c0       	rjmp	.+10     	; 0x128e <udc_next_desc_in_iface+0x3a>
    1284:	81 81       	ldd	r24, Z+1	; 0x01
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	a1 f0       	breq	.+40     	; 0x12b2 <udc_next_desc_in_iface+0x5e>
    128a:	86 13       	cpse	r24, r22
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <udc_next_desc_in_iface+0x40>
    128e:	8e 2f       	mov	r24, r30
    1290:	9f 2f       	mov	r25, r31
    1292:	08 95       	ret
    1294:	80 81       	ld	r24, Z
    1296:	e8 0f       	add	r30, r24
    1298:	f1 1d       	adc	r31, r1
    129a:	e2 17       	cp	r30, r18
    129c:	f3 07       	cpc	r31, r19
    129e:	90 f3       	brcs	.-28     	; 0x1284 <udc_next_desc_in_iface+0x30>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	08 95       	ret
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	08 95       	ret
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	08 95       	ret
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	08 95       	ret

000012b8 <udc_valid_address>:
    12b8:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    12bc:	8f 77       	andi	r24, 0x7F	; 127
    12be:	0c 94 94 11 	jmp	0x2328	; 0x2328 <udd_set_address>
    12c2:	08 95       	ret

000012c4 <udc_update_iface_desc>:
    12c4:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <udc_num_configuration>
    12c8:	99 23       	and	r25, r25
    12ca:	81 f1       	breq	.+96     	; 0x132c <udc_update_iface_desc+0x68>
    12cc:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    12d0:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    12d4:	01 90       	ld	r0, Z+
    12d6:	f0 81       	ld	r31, Z
    12d8:	e0 2d       	mov	r30, r0
    12da:	94 81       	ldd	r25, Z+4	; 0x04
    12dc:	89 17       	cp	r24, r25
    12de:	40 f5       	brcc	.+80     	; 0x1330 <udc_update_iface_desc+0x6c>
    12e0:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_iface>
    12e4:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_iface+0x1>
    12e8:	22 81       	ldd	r18, Z+2	; 0x02
    12ea:	33 81       	ldd	r19, Z+3	; 0x03
    12ec:	2e 0f       	add	r18, r30
    12ee:	3f 1f       	adc	r19, r31
    12f0:	e2 17       	cp	r30, r18
    12f2:	f3 07       	cpc	r31, r19
    12f4:	f8 f4       	brcc	.+62     	; 0x1334 <udc_update_iface_desc+0x70>
    12f6:	91 81       	ldd	r25, Z+1	; 0x01
    12f8:	94 30       	cpi	r25, 0x04	; 4
    12fa:	61 f4       	brne	.+24     	; 0x1314 <udc_update_iface_desc+0x50>
    12fc:	92 81       	ldd	r25, Z+2	; 0x02
    12fe:	98 13       	cpse	r25, r24
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <udc_update_iface_desc+0x50>
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	96 13       	cpse	r25, r22
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <udc_update_iface_desc+0x50>
    1308:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_iface>
    130c:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_iface+0x1>
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	08 95       	ret
    1314:	90 81       	ld	r25, Z
    1316:	e9 0f       	add	r30, r25
    1318:	f1 1d       	adc	r31, r1
    131a:	e2 17       	cp	r30, r18
    131c:	f3 07       	cpc	r31, r19
    131e:	58 f3       	brcs	.-42     	; 0x12f6 <udc_update_iface_desc+0x32>
    1320:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_iface>
    1324:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_iface+0x1>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	08 95       	ret
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	08 95       	ret
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 95       	ret

00001338 <udc_iface_disable>:
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	c8 2f       	mov	r28, r24
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	be df       	rcall	.-132    	; 0x12c4 <udc_update_iface_desc>
    1348:	18 2f       	mov	r17, r24
    134a:	88 23       	and	r24, r24
    134c:	81 f1       	breq	.+96     	; 0x13ae <udc_iface_disable+0x76>
    134e:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1352:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1356:	ec 2f       	mov	r30, r28
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	12 96       	adiw	r26, 0x02	; 2
    1360:	8d 91       	ld	r24, X+
    1362:	9c 91       	ld	r25, X
    1364:	13 97       	sbiw	r26, 0x03	; 3
    1366:	e8 0f       	add	r30, r24
    1368:	f9 1f       	adc	r31, r25
    136a:	e0 80       	ld	r14, Z
    136c:	f1 80       	ldd	r15, Z+1	; 0x01
    136e:	d7 01       	movw	r26, r14
    1370:	16 96       	adiw	r26, 0x06	; 6
    1372:	ed 91       	ld	r30, X+
    1374:	fc 91       	ld	r31, X
    1376:	17 97       	sbiw	r26, 0x07	; 7
    1378:	09 95       	icall
    137a:	68 2f       	mov	r22, r24
    137c:	8c 2f       	mov	r24, r28
    137e:	a2 df       	rcall	.-188    	; 0x12c4 <udc_update_iface_desc>
    1380:	18 2f       	mov	r17, r24
    1382:	88 23       	and	r24, r24
    1384:	a1 f0       	breq	.+40     	; 0x13ae <udc_iface_disable+0x76>
    1386:	c0 91 bd 20 	lds	r28, 0x20BD	; 0x8020bd <udc_ptr_iface>
    138a:	d0 91 be 20 	lds	r29, 0x20BE	; 0x8020be <udc_ptr_iface+0x1>
    138e:	65 e0       	ldi	r22, 0x05	; 5
    1390:	ce 01       	movw	r24, r28
    1392:	60 df       	rcall	.-320    	; 0x1254 <udc_next_desc_in_iface>
    1394:	ec 01       	movw	r28, r24
    1396:	89 2b       	or	r24, r25
    1398:	21 f0       	breq	.+8      	; 0x13a2 <udc_iface_disable+0x6a>
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <udd_ep_free>
    13a0:	f6 cf       	rjmp	.-20     	; 0x138e <udc_iface_disable+0x56>
    13a2:	d7 01       	movw	r26, r14
    13a4:	12 96       	adiw	r26, 0x02	; 2
    13a6:	ed 91       	ld	r30, X+
    13a8:	fc 91       	ld	r31, X
    13aa:	13 97       	sbiw	r26, 0x03	; 3
    13ac:	09 95       	icall
    13ae:	81 2f       	mov	r24, r17
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	08 95       	ret

000013bc <udc_iface_enable>:
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	18 2f       	mov	r17, r24
    13c4:	7f df       	rcall	.-258    	; 0x12c4 <udc_update_iface_desc>
    13c6:	88 23       	and	r24, r24
    13c8:	39 f1       	breq	.+78     	; 0x1418 <udc_iface_enable+0x5c>
    13ca:	c0 91 bd 20 	lds	r28, 0x20BD	; 0x8020bd <udc_ptr_iface>
    13ce:	d0 91 be 20 	lds	r29, 0x20BE	; 0x8020be <udc_ptr_iface+0x1>
    13d2:	65 e0       	ldi	r22, 0x05	; 5
    13d4:	ce 01       	movw	r24, r28
    13d6:	3e df       	rcall	.-388    	; 0x1254 <udc_next_desc_in_iface>
    13d8:	ec 01       	movw	r28, r24
    13da:	89 2b       	or	r24, r25
    13dc:	41 f0       	breq	.+16     	; 0x13ee <udc_iface_enable+0x32>
    13de:	4c 81       	ldd	r20, Y+4	; 0x04
    13e0:	5d 81       	ldd	r21, Y+5	; 0x05
    13e2:	6b 81       	ldd	r22, Y+3	; 0x03
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	ad d7       	rcall	.+3930   	; 0x2342 <udd_ep_alloc>
    13e8:	81 11       	cpse	r24, r1
    13ea:	f3 cf       	rjmp	.-26     	; 0x13d2 <udc_iface_enable+0x16>
    13ec:	15 c0       	rjmp	.+42     	; 0x1418 <udc_iface_enable+0x5c>
    13ee:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    13f2:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    13f6:	e1 2f       	mov	r30, r17
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	12 96       	adiw	r26, 0x02	; 2
    1400:	8d 91       	ld	r24, X+
    1402:	9c 91       	ld	r25, X
    1404:	13 97       	sbiw	r26, 0x03	; 3
    1406:	e8 0f       	add	r30, r24
    1408:	f9 1f       	adc	r31, r25
    140a:	01 90       	ld	r0, Z+
    140c:	f0 81       	ld	r31, Z
    140e:	e0 2d       	mov	r30, r0
    1410:	01 90       	ld	r0, Z+
    1412:	f0 81       	ld	r31, Z
    1414:	e0 2d       	mov	r30, r0
    1416:	09 95       	icall
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	08 95       	ret

00001420 <udc_get_interface_desc>:
    1420:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <udc_ptr_iface>
    1424:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <udc_ptr_iface+0x1>
    1428:	08 95       	ret

0000142a <udc_start>:
    142a:	f9 c6       	rjmp	.+3570   	; 0x221e <udd_enable>
    142c:	08 95       	ret

0000142e <udc_reset>:
    142e:	cf 93       	push	r28
    1430:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1434:	88 23       	and	r24, r24
    1436:	c1 f0       	breq	.+48     	; 0x1468 <udc_reset+0x3a>
    1438:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    143c:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1440:	01 90       	ld	r0, Z+
    1442:	f0 81       	ld	r31, Z
    1444:	e0 2d       	mov	r30, r0
    1446:	84 81       	ldd	r24, Z+4	; 0x04
    1448:	88 23       	and	r24, r24
    144a:	71 f0       	breq	.+28     	; 0x1468 <udc_reset+0x3a>
    144c:	c0 e0       	ldi	r28, 0x00	; 0
    144e:	8c 2f       	mov	r24, r28
    1450:	73 df       	rcall	.-282    	; 0x1338 <udc_iface_disable>
    1452:	cf 5f       	subi	r28, 0xFF	; 255
    1454:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1458:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    145c:	01 90       	ld	r0, Z+
    145e:	f0 81       	ld	r31, Z
    1460:	e0 2d       	mov	r30, r0
    1462:	84 81       	ldd	r24, Z+4	; 0x04
    1464:	c8 17       	cp	r28, r24
    1466:	98 f3       	brcs	.-26     	; 0x144e <udc_reset+0x20>
    1468:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udc_num_configuration>
    146c:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <udc_device_status>
    1470:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <udc_device_status+0x1>
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1478:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    147a:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    147e:	88 23       	and	r24, r24
    1480:	49 f1       	breq	.+82     	; 0x14d4 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1482:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1486:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    148a:	ed 91       	ld	r30, X+
    148c:	fc 91       	ld	r31, X
    148e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1490:	84 81       	ldd	r24, Z+4	; 0x04
    1492:	88 23       	and	r24, r24
    1494:	f9 f0       	breq	.+62     	; 0x14d4 <udc_sof_notify+0x5c>
    1496:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1498:	ec 2f       	mov	r30, r28
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	12 96       	adiw	r26, 0x02	; 2
    14a2:	8d 91       	ld	r24, X+
    14a4:	9c 91       	ld	r25, X
    14a6:	13 97       	sbiw	r26, 0x03	; 3
    14a8:	e8 0f       	add	r30, r24
    14aa:	f9 1f       	adc	r31, r25
    14ac:	01 90       	ld	r0, Z+
    14ae:	f0 81       	ld	r31, Z
    14b0:	e0 2d       	mov	r30, r0
    14b2:	00 84       	ldd	r0, Z+8	; 0x08
    14b4:	f1 85       	ldd	r31, Z+9	; 0x09
    14b6:	e0 2d       	mov	r30, r0
    14b8:	30 97       	sbiw	r30, 0x00	; 0
    14ba:	09 f0       	breq	.+2      	; 0x14be <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    14bc:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    14be:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14c0:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    14c4:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    14c8:	ed 91       	ld	r30, X+
    14ca:	fc 91       	ld	r31, X
    14cc:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    14ce:	84 81       	ldd	r24, Z+4	; 0x04
    14d0:	c8 17       	cp	r28, r24
    14d2:	10 f3       	brcs	.-60     	; 0x1498 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    14e0:	e3 e6       	ldi	r30, 0x63	; 99
    14e2:	f4 e2       	ldi	r31, 0x24	; 36
    14e4:	12 86       	std	Z+10, r1	; 0x0a
    14e6:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    14e8:	14 86       	std	Z+12, r1	; 0x0c
    14ea:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    14ec:	16 86       	std	Z+14, r1	; 0x0e
    14ee:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    14f0:	80 81       	ld	r24, Z
    14f2:	88 23       	and	r24, r24
    14f4:	3c f4       	brge	.+14     	; 0x1504 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    14f6:	20 91 69 24 	lds	r18, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    14fa:	30 91 6a 24 	lds	r19, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    14fe:	23 2b       	or	r18, r19
    1500:	09 f4       	brne	.+2      	; 0x1504 <udc_process_setup+0x2c>
    1502:	64 c3       	rjmp	.+1736   	; 0x1bcc <udc_process_setup+0x6f4>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1504:	80 76       	andi	r24, 0x60	; 96
    1506:	80 34       	cpi	r24, 0x40	; 64
    1508:	09 f0       	breq	.+2      	; 0x150c <udc_process_setup+0x34>
    150a:	02 c1       	rjmp	.+516    	; 0x1710 <udc_process_setup+0x238>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    150c:	e0 91 64 24 	lds	r30, 0x2464	; 0x802464 <udd_g_ctrlreq+0x1>
    1510:	8e 2f       	mov	r24, r30
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	fc 01       	movw	r30, r24
    1516:	e0 5a       	subi	r30, 0xA0	; 160
    1518:	f1 09       	sbc	r31, r1
    151a:	e8 30       	cpi	r30, 0x08	; 8
    151c:	f1 05       	cpc	r31, r1
    151e:	08 f0       	brcs	.+2      	; 0x1522 <udc_process_setup+0x4a>
    1520:	ee c0       	rjmp	.+476    	; 0x16fe <udc_process_setup+0x226>
    1522:	e2 50       	subi	r30, 0x02	; 2
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    152a:	00 00       	nop
    152c:	53 c3       	rjmp	.+1702   	; 0x1bd4 <udc_process_setup+0x6fc>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    152e:	e0 e0       	ldi	r30, 0x00	; 0
    1530:	f8 e0       	ldi	r31, 0x08	; 8
    1532:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1534:	c3 e6       	ldi	r28, 0x63	; 99
    1536:	d4 e2       	ldi	r29, 0x24	; 36
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	9b 81       	ldd	r25, Y+3	; 0x03
    153c:	86 ab       	std	Z+54, r24	; 0x36
    153e:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	8f 70       	andi	r24, 0x0F	; 15
    1544:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1546:	6e 81       	ldd	r22, Y+6	; 0x06
    1548:	7f 81       	ldd	r23, Y+7	; 0x07
    154a:	82 e6       	ldi	r24, 0x62	; 98
    154c:	92 e2       	ldi	r25, 0x22	; 34
    154e:	f2 d6       	rcall	.+3556   	; 0x2334 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1550:	8e 81       	ldd	r24, Y+6	; 0x06
    1552:	9f 81       	ldd	r25, Y+7	; 0x07
    1554:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
    1558:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
    155c:	82 17       	cp	r24, r18
    155e:	93 07       	cpc	r25, r19
    1560:	09 f4       	brne	.+2      	; 0x1564 <udc_process_setup+0x8c>
    1562:	38 c3       	rjmp	.+1648   	; 0x1bd4 <udc_process_setup+0x6fc>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1564:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <dacBuf_len>
    1568:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <dacBuf_len+0x1>
				switch(global_mode){
    156c:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    1570:	8e 2f       	mov	r24, r30
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	91 05       	cpc	r25, r1
    1578:	08 f0       	brcs	.+2      	; 0x157c <udc_process_setup+0xa4>
    157a:	c3 c0       	rjmp	.+390    	; 0x1702 <udc_process_setup+0x22a>
    157c:	fc 01       	movw	r30, r24
    157e:	ea 5f       	subi	r30, 0xFA	; 250
    1580:	fe 4f       	sbci	r31, 0xFE	; 254
    1582:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1586:	0c d8       	rcall	.-4072   	; 0x5a0 <tiny_dma_set_mode_0>
    1588:	25 c3       	rjmp	.+1610   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    158a:	7d d8       	rcall	.-3846   	; 0x686 <tiny_dma_set_mode_1>
    158c:	23 c3       	rjmp	.+1606   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    158e:	f3 d8       	rcall	.-3610   	; 0x776 <tiny_dma_set_mode_2>
    1590:	21 c3       	rjmp	.+1602   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1592:	66 d9       	rcall	.-3380   	; 0x860 <tiny_dma_set_mode_3>
    1594:	1f c3       	rjmp	.+1598   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1596:	e0 d9       	rcall	.-3136   	; 0x958 <tiny_dma_set_mode_4>
    1598:	1d c3       	rjmp	.+1594   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    159a:	54 da       	rcall	.-2904   	; 0xa44 <tiny_dma_set_mode_5>
    159c:	1b c3       	rjmp	.+1590   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    159e:	9a da       	rcall	.-2764   	; 0xad4 <tiny_dma_set_mode_6>
    15a0:	19 c3       	rjmp	.+1586   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    15a2:	fa da       	rcall	.-2572   	; 0xb98 <tiny_dma_set_mode_7>
    15a4:	17 c3       	rjmp	.+1582   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    15a6:	e0 e4       	ldi	r30, 0x40	; 64
    15a8:	f8 e0       	ldi	r31, 0x08	; 8
    15aa:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    15ac:	c3 e6       	ldi	r28, 0x63	; 99
    15ae:	d4 e2       	ldi	r29, 0x24	; 36
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	9b 81       	ldd	r25, Y+3	; 0x03
    15b4:	86 ab       	std	Z+54, r24	; 0x36
    15b6:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	8f 70       	andi	r24, 0x0F	; 15
    15bc:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    15be:	6e 81       	ldd	r22, Y+6	; 0x06
    15c0:	7f 81       	ldd	r23, Y+7	; 0x07
    15c2:	85 e7       	ldi	r24, 0x75	; 117
    15c4:	94 e2       	ldi	r25, 0x24	; 36
    15c6:	b6 d6       	rcall	.+3436   	; 0x2334 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
    15d0:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
    15d4:	82 17       	cp	r24, r18
    15d6:	93 07       	cpc	r25, r19
    15d8:	09 f4       	brne	.+2      	; 0x15dc <udc_process_setup+0x104>
    15da:	fc c2       	rjmp	.+1528   	; 0x1bd4 <udc_process_setup+0x6fc>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    15dc:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <auxDacBufLen>
    15e0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <auxDacBufLen+0x1>
				switch(global_mode){
    15e4:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    15e8:	8e 2f       	mov	r24, r30
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	88 30       	cpi	r24, 0x08	; 8
    15ee:	91 05       	cpc	r25, r1
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <udc_process_setup+0x11c>
    15f2:	89 c0       	rjmp	.+274    	; 0x1706 <udc_process_setup+0x22e>
    15f4:	fc 01       	movw	r30, r24
    15f6:	e2 5f       	subi	r30, 0xF2	; 242
    15f8:	fe 4f       	sbci	r31, 0xFE	; 254
    15fa:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    15fe:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <tiny_dma_set_mode_0>
    1602:	e8 c2       	rjmp	.+1488   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1604:	40 d8       	rcall	.-3968   	; 0x686 <tiny_dma_set_mode_1>
    1606:	e6 c2       	rjmp	.+1484   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1608:	b6 d8       	rcall	.-3732   	; 0x776 <tiny_dma_set_mode_2>
    160a:	e4 c2       	rjmp	.+1480   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    160c:	29 d9       	rcall	.-3502   	; 0x860 <tiny_dma_set_mode_3>
    160e:	e2 c2       	rjmp	.+1476   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1610:	a3 d9       	rcall	.-3258   	; 0x958 <tiny_dma_set_mode_4>
    1612:	e0 c2       	rjmp	.+1472   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1614:	17 da       	rcall	.-3026   	; 0xa44 <tiny_dma_set_mode_5>
    1616:	de c2       	rjmp	.+1468   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1618:	5d da       	rcall	.-2886   	; 0xad4 <tiny_dma_set_mode_6>
    161a:	dc c2       	rjmp	.+1464   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    161c:	bd da       	rcall	.-2694   	; 0xb98 <tiny_dma_set_mode_7>
    161e:	da c2       	rjmp	.+1460   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1620:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1624:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1628:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    162c:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <PSU_target>
    1630:	d1 c2       	rjmp	.+1442   	; 0x1bd4 <udc_process_setup+0x6fc>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1632:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    1636:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    163a:	cc c2       	rjmp	.+1432   	; 0x1bd4 <udc_process_setup+0x6fc>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    163c:	e0 91 65 24 	lds	r30, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    1640:	f0 91 66 24 	lds	r31, 0x2466	; 0x802466 <udd_g_ctrlreq+0x3>
    1644:	e8 30       	cpi	r30, 0x08	; 8
    1646:	f1 05       	cpc	r31, r1
    1648:	08 f0       	brcs	.+2      	; 0x164c <udc_process_setup+0x174>
    164a:	5f c0       	rjmp	.+190    	; 0x170a <udc_process_setup+0x232>
    164c:	ea 5e       	subi	r30, 0xEA	; 234
    164e:	fe 4f       	sbci	r31, 0xFE	; 254
    1650:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	0e 94 51 02 	call	0x4a2	; 0x4a2 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    165c:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x4>
    1660:	0e 94 1f 02 	call	0x43e	; 0x43e <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    1664:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <tiny_dma_set_mode_0>
					SW_init = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
    166e:	b2 c2       	rjmp	.+1380   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	0e 94 51 02 	call	0x4a2	; 0x4a2 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1678:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x4>
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1680:	02 d8       	rcall	.-4092   	; 0x686 <tiny_dma_set_mode_1>
    1682:	a8 c2       	rjmp	.+1360   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	0e 94 51 02 	call	0x4a2	; 0x4a2 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    168c:	c3 e6       	ldi	r28, 0x63	; 99
    168e:	d4 e2       	ldi	r29, 0x24	; 36
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	0e 94 34 02 	call	0x468	; 0x468 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    169c:	6c d8       	rcall	.-3880   	; 0x776 <tiny_dma_set_mode_2>
    169e:	9a c2       	rjmp	.+1332   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    16a0:	df d8       	rcall	.-3650   	; 0x860 <tiny_dma_set_mode_3>
    16a2:	98 c2       	rjmp	.+1328   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    16a4:	59 d9       	rcall	.-3406   	; 0x958 <tiny_dma_set_mode_4>
    16a6:	96 c2       	rjmp	.+1324   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	0e 94 51 02 	call	0x4a2	; 0x4a2 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16b0:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x4>
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    16b8:	c5 d9       	rcall	.-3190   	; 0xa44 <tiny_dma_set_mode_5>
    16ba:	8c c2       	rjmp	.+1304   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16c4:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x4>
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    16cc:	03 da       	rcall	.-3066   	; 0xad4 <tiny_dma_set_mode_6>
    16ce:	82 c2       	rjmp	.+1284   	; 0x1bd4 <udc_process_setup+0x6fc>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    16d0:	62 e0       	ldi	r22, 0x02	; 2
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    16d8:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x4>
    16dc:	80 68       	ori	r24, 0x80	; 128
    16de:	0e 94 1f 02 	call	0x43e	; 0x43e <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    16e2:	5a da       	rcall	.-2892   	; 0xb98 <tiny_dma_set_mode_7>
    16e4:	77 c2       	rjmp	.+1262   	; 0x1bd4 <udc_process_setup+0x6fc>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    16e6:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    16ea:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    16ee:	72 c2       	rjmp	.+1252   	; 0x1bd4 <udc_process_setup+0x6fc>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    16f0:	e9 e7       	ldi	r30, 0x79	; 121
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	91 e0       	ldi	r25, 0x01	; 1
    16f6:	88 ed       	ldi	r24, 0xD8	; 216
    16f8:	f8 94       	cli
    16fa:	84 bf       	out	0x34, r24	; 52
    16fc:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	05 c0       	rjmp	.+10     	; 0x170c <udc_process_setup+0x234>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	03 c0       	rjmp	.+6      	; 0x170c <udc_process_setup+0x234>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	01 c0       	rjmp	.+2      	; 0x170c <udc_process_setup+0x234>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    170a:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    170c:	81 11       	cpse	r24, r1
    170e:	65 c2       	rjmp	.+1226   	; 0x1bda <udc_process_setup+0x702>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1710:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq>
    1714:	98 2f       	mov	r25, r24
    1716:	90 76       	andi	r25, 0x60	; 96
    1718:	09 f0       	breq	.+2      	; 0x171c <udc_process_setup+0x244>
    171a:	e1 c1       	rjmp	.+962    	; 0x1ade <udc_process_setup+0x606>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    171c:	88 23       	and	r24, r24
    171e:	0c f0       	brlt	.+2      	; 0x1722 <udc_process_setup+0x24a>
    1720:	05 c1       	rjmp	.+522    	; 0x192c <udc_process_setup+0x454>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1722:	20 91 69 24 	lds	r18, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    1726:	30 91 6a 24 	lds	r19, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    172a:	21 15       	cp	r18, r1
    172c:	31 05       	cpc	r19, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <udc_process_setup+0x25a>
    1730:	d6 c1       	rjmp	.+940    	; 0x1ade <udc_process_setup+0x606>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1732:	8f 71       	andi	r24, 0x1F	; 31
    1734:	09 f0       	breq	.+2      	; 0x1738 <udc_process_setup+0x260>
    1736:	a3 c0       	rjmp	.+326    	; 0x187e <udc_process_setup+0x3a6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1738:	90 91 64 24 	lds	r25, 0x2464	; 0x802464 <udd_g_ctrlreq+0x1>
    173c:	96 30       	cpi	r25, 0x06	; 6
    173e:	79 f0       	breq	.+30     	; 0x175e <udc_process_setup+0x286>
    1740:	98 30       	cpi	r25, 0x08	; 8
    1742:	09 f4       	brne	.+2      	; 0x1746 <udc_process_setup+0x26e>
    1744:	92 c0       	rjmp	.+292    	; 0x186a <udc_process_setup+0x392>
    1746:	91 11       	cpse	r25, r1
    1748:	9a c0       	rjmp	.+308    	; 0x187e <udc_process_setup+0x3a6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	09 f0       	breq	.+2      	; 0x1752 <udc_process_setup+0x27a>
    1750:	c6 c1       	rjmp	.+908    	; 0x1ade <udc_process_setup+0x606>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1752:	62 e0       	ldi	r22, 0x02	; 2
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	86 ec       	ldi	r24, 0xC6	; 198
    1758:	90 e2       	ldi	r25, 0x20	; 32
    175a:	ec d5       	rcall	.+3032   	; 0x2334 <udd_set_setup_payload>
    175c:	3d c2       	rjmp	.+1146   	; 0x1bd8 <udc_process_setup+0x700>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    175e:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    1762:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1766:	29 2f       	mov	r18, r25
    1768:	33 27       	eor	r19, r19
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	a9 f0       	breq	.+42     	; 0x179a <udc_process_setup+0x2c2>
    1770:	24 f4       	brge	.+8      	; 0x177a <udc_process_setup+0x2a2>
    1772:	21 30       	cpi	r18, 0x01	; 1
    1774:	31 05       	cpc	r19, r1
    1776:	41 f0       	breq	.+16     	; 0x1788 <udc_process_setup+0x2b0>
    1778:	a9 c1       	rjmp	.+850    	; 0x1acc <udc_process_setup+0x5f4>
    177a:	23 30       	cpi	r18, 0x03	; 3
    177c:	31 05       	cpc	r19, r1
    177e:	d9 f1       	breq	.+118    	; 0x17f6 <udc_process_setup+0x31e>
    1780:	2f 30       	cpi	r18, 0x0F	; 15
    1782:	31 05       	cpc	r19, r1
    1784:	51 f1       	breq	.+84     	; 0x17da <udc_process_setup+0x302>
    1786:	a2 c1       	rjmp	.+836    	; 0x1acc <udc_process_setup+0x5f4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1788:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <udc_config>
    178c:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1790:	dc 01       	movw	r26, r24
    1792:	6c 91       	ld	r22, X
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	ce d5       	rcall	.+2972   	; 0x2334 <udd_set_setup_payload>
    1798:	59 c0       	rjmp	.+178    	; 0x184c <udc_process_setup+0x374>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    179a:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    179e:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
    17a2:	21 89       	ldd	r18, Z+17	; 0x11
    17a4:	82 17       	cp	r24, r18
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <udc_process_setup+0x2d2>
    17a8:	9a c1       	rjmp	.+820    	; 0x1ade <udc_process_setup+0x606>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    17aa:	99 27       	eor	r25, r25
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    17b8:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    17bc:	e8 0f       	add	r30, r24
    17be:	f9 1f       	adc	r31, r25
    17c0:	80 81       	ld	r24, Z
    17c2:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    17c4:	fc 01       	movw	r30, r24
    17c6:	62 81       	ldd	r22, Z+2	; 0x02
    17c8:	73 81       	ldd	r23, Z+3	; 0x03
    17ca:	b4 d5       	rcall	.+2920   	; 0x2334 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    17cc:	e0 91 6b 24 	lds	r30, 0x246B	; 0x80246b <udd_g_ctrlreq+0x8>
    17d0:	f0 91 6c 24 	lds	r31, 0x246C	; 0x80246c <udd_g_ctrlreq+0x9>
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	81 83       	std	Z+1, r24	; 0x01
    17d8:	39 c0       	rjmp	.+114    	; 0x184c <udc_process_setup+0x374>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    17da:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config+0x4>
    17de:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x5>
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <udc_process_setup+0x310>
    17e6:	7b c1       	rjmp	.+758    	; 0x1ade <udc_process_setup+0x606>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    17e8:	dc 01       	movw	r26, r24
    17ea:	12 96       	adiw	r26, 0x02	; 2
    17ec:	6d 91       	ld	r22, X+
    17ee:	7c 91       	ld	r23, X
    17f0:	13 97       	sbiw	r26, 0x03	; 3
    17f2:	a0 d5       	rcall	.+2880   	; 0x2334 <udd_set_setup_payload>
    17f4:	2b c0       	rjmp	.+86     	; 0x184c <udc_process_setup+0x374>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    17f6:	99 27       	eor	r25, r25
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	91 05       	cpc	r25, r1
    17fc:	71 f0       	breq	.+28     	; 0x181a <udc_process_setup+0x342>
    17fe:	38 f0       	brcs	.+14     	; 0x180e <udc_process_setup+0x336>
    1800:	02 97       	sbiw	r24, 0x02	; 2
    1802:	09 f0       	breq	.+2      	; 0x1806 <udc_process_setup+0x32e>
    1804:	6c c1       	rjmp	.+728    	; 0x1ade <udc_process_setup+0x606>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1806:	8a e8       	ldi	r24, 0x8A	; 138
    1808:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    180a:	28 e1       	ldi	r18, 0x18	; 24
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <udc_process_setup+0x348>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	8e ea       	ldi	r24, 0xAE	; 174
    1814:	90 e2       	ldi	r25, 0x20	; 32
    1816:	8e d5       	rcall	.+2844   	; 0x2334 <udd_set_setup_payload>
    1818:	19 c0       	rjmp	.+50     	; 0x184c <udc_process_setup+0x374>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    181a:	83 ea       	ldi	r24, 0xA3	; 163
    181c:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    181e:	29 e0       	ldi	r18, 0x09	; 9
    1820:	38 2f       	mov	r19, r24
    1822:	aa e5       	ldi	r26, 0x5A	; 90
    1824:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1826:	e8 2f       	mov	r30, r24
    1828:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    182a:	81 91       	ld	r24, Z+
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	8d 93       	st	X+, r24
    1830:	9d 93       	st	X+, r25
    1832:	8e 2f       	mov	r24, r30
    1834:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1836:	82 17       	cp	r24, r18
    1838:	c0 f3       	brcs	.-16     	; 0x182a <udc_process_setup+0x352>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    183a:	62 2f       	mov	r22, r18
    183c:	66 0f       	add	r22, r22
    183e:	6e 5f       	subi	r22, 0xFE	; 254
    1840:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	88 e5       	ldi	r24, 0x58	; 88
    1848:	90 e2       	ldi	r25, 0x20	; 32
    184a:	74 d5       	rcall	.+2792   	; 0x2334 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    184c:	e3 e6       	ldi	r30, 0x63	; 99
    184e:	f4 e2       	ldi	r31, 0x24	; 36
    1850:	86 81       	ldd	r24, Z+6	; 0x06
    1852:	97 81       	ldd	r25, Z+7	; 0x07
    1854:	22 85       	ldd	r18, Z+10	; 0x0a
    1856:	33 85       	ldd	r19, Z+11	; 0x0b
    1858:	82 17       	cp	r24, r18
    185a:	93 07       	cpc	r25, r19
    185c:	08 f0       	brcs	.+2      	; 0x1860 <udc_process_setup+0x388>
    185e:	bc c1       	rjmp	.+888    	; 0x1bd8 <udc_process_setup+0x700>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1860:	80 93 6d 24 	sts	0x246D, r24	; 0x80246d <udd_g_ctrlreq+0xa>
    1864:	90 93 6e 24 	sts	0x246E, r25	; 0x80246e <udd_g_ctrlreq+0xb>
    1868:	b7 c1       	rjmp	.+878    	; 0x1bd8 <udc_process_setup+0x700>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    186a:	21 30       	cpi	r18, 0x01	; 1
    186c:	31 05       	cpc	r19, r1
    186e:	09 f0       	breq	.+2      	; 0x1872 <udc_process_setup+0x39a>
    1870:	36 c1       	rjmp	.+620    	; 0x1ade <udc_process_setup+0x606>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	82 ec       	ldi	r24, 0xC2	; 194
    1878:	90 e2       	ldi	r25, 0x20	; 32
    187a:	5c d5       	rcall	.+2744   	; 0x2334 <udd_set_setup_payload>
    187c:	ad c1       	rjmp	.+858    	; 0x1bd8 <udc_process_setup+0x700>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	e1 f5       	brne	.+120    	; 0x18fa <udc_process_setup+0x422>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1882:	90 91 64 24 	lds	r25, 0x2464	; 0x802464 <udd_g_ctrlreq+0x1>
    1886:	9a 30       	cpi	r25, 0x0A	; 10
    1888:	c1 f5       	brne	.+112    	; 0x18fa <udc_process_setup+0x422>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    188a:	21 30       	cpi	r18, 0x01	; 1
    188c:	31 05       	cpc	r19, r1
    188e:	09 f0       	breq	.+2      	; 0x1892 <udc_process_setup+0x3ba>
    1890:	26 c1       	rjmp	.+588    	; 0x1ade <udc_process_setup+0x606>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1892:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1896:	88 23       	and	r24, r24
    1898:	09 f4       	brne	.+2      	; 0x189c <udc_process_setup+0x3c4>
    189a:	21 c1       	rjmp	.+578    	; 0x1ade <udc_process_setup+0x606>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    189c:	c0 91 67 24 	lds	r28, 0x2467	; 0x802467 <udd_g_ctrlreq+0x4>
    18a0:	d0 91 68 24 	lds	r29, 0x2468	; 0x802468 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18a4:	00 91 bf 20 	lds	r16, 0x20BF	; 0x8020bf <udc_ptr_conf>
    18a8:	10 91 c0 20 	lds	r17, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    18ac:	d8 01       	movw	r26, r16
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	84 81       	ldd	r24, Z+4	; 0x04
    18b4:	c8 17       	cp	r28, r24
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <udc_process_setup+0x3e2>
    18b8:	12 c1       	rjmp	.+548    	; 0x1ade <udc_process_setup+0x606>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	8c 2f       	mov	r24, r28
    18be:	02 dd       	rcall	.-1532   	; 0x12c4 <udc_update_iface_desc>
    18c0:	88 23       	and	r24, r24
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <udc_process_setup+0x3ee>
    18c4:	0c c1       	rjmp	.+536    	; 0x1ade <udc_process_setup+0x606>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    18c6:	ce 01       	movw	r24, r28
    18c8:	99 27       	eor	r25, r25
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	d8 01       	movw	r26, r16
    18d0:	12 96       	adiw	r26, 0x02	; 2
    18d2:	ed 91       	ld	r30, X+
    18d4:	fc 91       	ld	r31, X
    18d6:	13 97       	sbiw	r26, 0x03	; 3
    18d8:	e8 0f       	add	r30, r24
    18da:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    18dc:	01 90       	ld	r0, Z+
    18de:	f0 81       	ld	r31, Z
    18e0:	e0 2d       	mov	r30, r0
    18e2:	86 81       	ldd	r24, Z+6	; 0x06
    18e4:	97 81       	ldd	r25, Z+7	; 0x07
    18e6:	fc 01       	movw	r30, r24
    18e8:	09 95       	icall
    18ea:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	84 ec       	ldi	r24, 0xC4	; 196
    18f4:	90 e2       	ldi	r25, 0x20	; 32
    18f6:	1e d5       	rcall	.+2620   	; 0x2334 <udd_set_setup_payload>
    18f8:	6f c1       	rjmp	.+734    	; 0x1bd8 <udc_process_setup+0x700>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	09 f0       	breq	.+2      	; 0x1900 <udc_process_setup+0x428>
    18fe:	ef c0       	rjmp	.+478    	; 0x1ade <udc_process_setup+0x606>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1900:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x1>
    1904:	81 11       	cpse	r24, r1
    1906:	e4 c0       	rjmp	.+456    	; 0x1ad0 <udc_process_setup+0x5f8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1908:	22 30       	cpi	r18, 0x02	; 2
    190a:	31 05       	cpc	r19, r1
    190c:	09 f0       	breq	.+2      	; 0x1910 <udc_process_setup+0x438>
    190e:	e7 c0       	rjmp	.+462    	; 0x1ade <udc_process_setup+0x606>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1910:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x4>
    1914:	8b d5       	rcall	.+2838   	; 0x242c <udd_ep_is_halted>
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <udc_ep_status.5531>
    191c:	90 93 bc 20 	sts	0x20BC, r25	; 0x8020bc <udc_ep_status.5531+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1920:	62 e0       	ldi	r22, 0x02	; 2
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	8b eb       	ldi	r24, 0xBB	; 187
    1926:	90 e2       	ldi	r25, 0x20	; 32
    1928:	05 d5       	rcall	.+2570   	; 0x2334 <udd_set_setup_payload>
    192a:	56 c1       	rjmp	.+684    	; 0x1bd8 <udc_process_setup+0x700>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    192c:	8f 71       	andi	r24, 0x1F	; 31
    192e:	09 f0       	breq	.+2      	; 0x1932 <udc_process_setup+0x45a>
    1930:	83 c0       	rjmp	.+262    	; 0x1a38 <udc_process_setup+0x560>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1932:	90 91 64 24 	lds	r25, 0x2464	; 0x802464 <udd_g_ctrlreq+0x1>
    1936:	93 30       	cpi	r25, 0x03	; 3
    1938:	09 f4       	brne	.+2      	; 0x193c <udc_process_setup+0x464>
    193a:	cc c0       	rjmp	.+408    	; 0x1ad4 <udc_process_setup+0x5fc>
    193c:	18 f4       	brcc	.+6      	; 0x1944 <udc_process_setup+0x46c>
    193e:	91 30       	cpi	r25, 0x01	; 1
    1940:	a1 f0       	breq	.+40     	; 0x196a <udc_process_setup+0x492>
    1942:	7a c0       	rjmp	.+244    	; 0x1a38 <udc_process_setup+0x560>
    1944:	95 30       	cpi	r25, 0x05	; 5
    1946:	19 f0       	breq	.+6      	; 0x194e <udc_process_setup+0x476>
    1948:	99 30       	cpi	r25, 0x09	; 9
    194a:	39 f1       	breq	.+78     	; 0x199a <udc_process_setup+0x4c2>
    194c:	75 c0       	rjmp	.+234    	; 0x1a38 <udc_process_setup+0x560>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    194e:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    1952:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    1956:	89 2b       	or	r24, r25
    1958:	09 f0       	breq	.+2      	; 0x195c <udc_process_setup+0x484>
    195a:	c1 c0       	rjmp	.+386    	; 0x1ade <udc_process_setup+0x606>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    195c:	8c e5       	ldi	r24, 0x5C	; 92
    195e:	99 e0       	ldi	r25, 0x09	; 9
    1960:	80 93 6f 24 	sts	0x246F, r24	; 0x80246f <udd_g_ctrlreq+0xc>
    1964:	90 93 70 24 	sts	0x2470, r25	; 0x802470 <udd_g_ctrlreq+0xd>
    1968:	37 c1       	rjmp	.+622    	; 0x1bd8 <udc_process_setup+0x700>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    196a:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    196e:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    1972:	89 2b       	or	r24, r25
    1974:	09 f0       	breq	.+2      	; 0x1978 <udc_process_setup+0x4a0>
    1976:	b3 c0       	rjmp	.+358    	; 0x1ade <udc_process_setup+0x606>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1978:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    197c:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x3>
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	09 f0       	breq	.+2      	; 0x1986 <udc_process_setup+0x4ae>
    1984:	ac c0       	rjmp	.+344    	; 0x1ade <udc_process_setup+0x606>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1986:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udc_device_status>
    198a:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <udc_device_status+0x1>
    198e:	8d 7f       	andi	r24, 0xFD	; 253
    1990:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udc_device_status>
    1994:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <udc_device_status+0x1>
    1998:	1f c1       	rjmp	.+574    	; 0x1bd8 <udc_process_setup+0x700>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    199a:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    199e:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    19a2:	89 2b       	or	r24, r25
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <udc_process_setup+0x4d0>
    19a6:	9b c0       	rjmp	.+310    	; 0x1ade <udc_process_setup+0x606>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    19a8:	c2 d4       	rcall	.+2436   	; 0x232e <udd_getaddress>
    19aa:	88 23       	and	r24, r24
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <udc_process_setup+0x4d8>
    19ae:	97 c0       	rjmp	.+302    	; 0x1ade <udc_process_setup+0x606>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    19b0:	20 91 65 24 	lds	r18, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    19b4:	30 91 66 24 	lds	r19, 0x2466	; 0x802466 <udd_g_ctrlreq+0x3>
    19b8:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    19ba:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    19be:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    19c2:	81 89       	ldd	r24, Z+17	; 0x11
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	82 17       	cp	r24, r18
    19c8:	93 07       	cpc	r25, r19
    19ca:	08 f4       	brcc	.+2      	; 0x19ce <udc_process_setup+0x4f6>
    19cc:	88 c0       	rjmp	.+272    	; 0x1ade <udc_process_setup+0x606>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    19ce:	2f dd       	rcall	.-1442   	; 0x142e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    19d0:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    19d4:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x3>
    19d8:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    19dc:	88 23       	and	r24, r24
    19de:	09 f4       	brne	.+2      	; 0x19e2 <udc_process_setup+0x50a>
    19e0:	fb c0       	rjmp	.+502    	; 0x1bd8 <udc_process_setup+0x700>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    19e2:	99 27       	eor	r25, r25
    19e4:	81 50       	subi	r24, 0x01	; 1
    19e6:	90 4c       	sbci	r25, 0xC0	; 192
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    19f4:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    19f8:	e8 0f       	add	r30, r24
    19fa:	f9 1f       	adc	r31, r25
    19fc:	e0 93 bf 20 	sts	0x20BF, r30	; 0x8020bf <udc_ptr_conf>
    1a00:	f0 93 c0 20 	sts	0x20C0, r31	; 0x8020c0 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a04:	01 90       	ld	r0, Z+
    1a06:	f0 81       	ld	r31, Z
    1a08:	e0 2d       	mov	r30, r0
    1a0a:	84 81       	ldd	r24, Z+4	; 0x04
    1a0c:	88 23       	and	r24, r24
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <udc_process_setup+0x53a>
    1a10:	e3 c0       	rjmp	.+454    	; 0x1bd8 <udc_process_setup+0x700>
    1a12:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	8c 2f       	mov	r24, r28
    1a18:	d1 dc       	rcall	.-1630   	; 0x13bc <udc_iface_enable>
    1a1a:	88 23       	and	r24, r24
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <udc_process_setup+0x548>
    1a1e:	5f c0       	rjmp	.+190    	; 0x1ade <udc_process_setup+0x606>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a20:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a22:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1a26:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1a2a:	01 90       	ld	r0, Z+
    1a2c:	f0 81       	ld	r31, Z
    1a2e:	e0 2d       	mov	r30, r0
    1a30:	84 81       	ldd	r24, Z+4	; 0x04
    1a32:	c8 17       	cp	r28, r24
    1a34:	78 f3       	brcs	.-34     	; 0x1a14 <udc_process_setup+0x53c>
    1a36:	d0 c0       	rjmp	.+416    	; 0x1bd8 <udc_process_setup+0x700>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	e1 f4       	brne	.+56     	; 0x1a74 <udc_process_setup+0x59c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a3c:	90 91 64 24 	lds	r25, 0x2464	; 0x802464 <udd_g_ctrlreq+0x1>
    1a40:	9b 30       	cpi	r25, 0x0B	; 11
    1a42:	c1 f4       	brne	.+48     	; 0x1a74 <udc_process_setup+0x59c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1a44:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    1a48:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    1a4c:	89 2b       	or	r24, r25
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <udc_process_setup+0x57a>
    1a50:	46 c0       	rjmp	.+140    	; 0x1ade <udc_process_setup+0x606>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a52:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1a56:	88 23       	and	r24, r24
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <udc_process_setup+0x584>
    1a5a:	41 c0       	rjmp	.+130    	; 0x1ade <udc_process_setup+0x606>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a5c:	e3 e6       	ldi	r30, 0x63	; 99
    1a5e:	f4 e2       	ldi	r31, 0x24	; 36
    1a60:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1a62:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1a64:	8c 2f       	mov	r24, r28
    1a66:	68 dc       	rcall	.-1840   	; 0x1338 <udc_iface_disable>
    1a68:	88 23       	and	r24, r24
    1a6a:	c9 f1       	breq	.+114    	; 0x1ade <udc_process_setup+0x606>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1a6c:	6d 2f       	mov	r22, r29
    1a6e:	8c 2f       	mov	r24, r28
    1a70:	a5 dc       	rcall	.-1718   	; 0x13bc <udc_iface_enable>
    1a72:	33 c0       	rjmp	.+102    	; 0x1ada <udc_process_setup+0x602>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	99 f5       	brne	.+102    	; 0x1ade <udc_process_setup+0x606>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a78:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x1>
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	19 f0       	breq	.+6      	; 0x1a86 <udc_process_setup+0x5ae>
    1a80:	83 30       	cpi	r24, 0x03	; 3
    1a82:	89 f0       	breq	.+34     	; 0x1aa6 <udc_process_setup+0x5ce>
    1a84:	29 c0       	rjmp	.+82     	; 0x1ad8 <udc_process_setup+0x600>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a86:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    1a8a:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    1a8e:	89 2b       	or	r24, r25
    1a90:	31 f5       	brne	.+76     	; 0x1ade <udc_process_setup+0x606>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1a92:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    1a96:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x3>
    1a9a:	89 2b       	or	r24, r25
    1a9c:	01 f5       	brne	.+64     	; 0x1ade <udc_process_setup+0x606>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a9e:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x4>
    1aa2:	df d4       	rcall	.+2494   	; 0x2462 <udd_ep_clear_halt>
    1aa4:	1a c0       	rjmp	.+52     	; 0x1ada <udc_process_setup+0x602>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1aa6:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    1aaa:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    1aae:	89 2b       	or	r24, r25
    1ab0:	b1 f4       	brne	.+44     	; 0x1ade <udc_process_setup+0x606>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1ab2:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x2>
    1ab6:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x3>
    1aba:	89 2b       	or	r24, r25
    1abc:	81 f4       	brne	.+32     	; 0x1ade <udc_process_setup+0x606>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1abe:	c3 e6       	ldi	r28, 0x63	; 99
    1ac0:	d4 e2       	ldi	r29, 0x24	; 36
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	bd d5       	rcall	.+2938   	; 0x2640 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	20 d6       	rcall	.+3136   	; 0x270a <udd_ep_set_halt>
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <udc_process_setup+0x602>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <udc_process_setup+0x602>
				break;
			}
		}
#endif
	}
	return false;
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <udc_process_setup+0x602>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <udc_process_setup+0x602>
				break;
			}
		}
#endif
	}
	return false;
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1ada:	81 11       	cpse	r24, r1
    1adc:	7e c0       	rjmp	.+252    	; 0x1bda <udc_process_setup+0x702>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1ade:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq>
    1ae2:	8f 71       	andi	r24, 0x1F	; 31
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	71 f5       	brne	.+92     	; 0x1b44 <udc_process_setup+0x66c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ae8:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1aec:	88 23       	and	r24, r24
    1aee:	51 f1       	breq	.+84     	; 0x1b44 <udc_process_setup+0x66c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1af0:	00 91 67 24 	lds	r16, 0x2467	; 0x802467 <udd_g_ctrlreq+0x4>
    1af4:	10 91 68 24 	lds	r17, 0x2468	; 0x802468 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1af8:	c0 91 bf 20 	lds	r28, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1afc:	d0 91 c0 20 	lds	r29, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1b00:	e8 81       	ld	r30, Y
    1b02:	f9 81       	ldd	r31, Y+1	; 0x01
    1b04:	84 81       	ldd	r24, Z+4	; 0x04
    1b06:	08 17       	cp	r16, r24
    1b08:	e8 f4       	brcc	.+58     	; 0x1b44 <udc_process_setup+0x66c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	80 2f       	mov	r24, r16
    1b0e:	da db       	rcall	.-2124   	; 0x12c4 <udc_update_iface_desc>
    1b10:	88 23       	and	r24, r24
    1b12:	c1 f0       	breq	.+48     	; 0x1b44 <udc_process_setup+0x66c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b14:	f8 01       	movw	r30, r16
    1b16:	ff 27       	eor	r31, r31
    1b18:	cf 01       	movw	r24, r30
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b20:	fb 81       	ldd	r31, Y+3	; 0x03
    1b22:	e8 0f       	add	r30, r24
    1b24:	f9 1f       	adc	r31, r25
    1b26:	c0 81       	ld	r28, Z
    1b28:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b2a:	ee 81       	ldd	r30, Y+6	; 0x06
    1b2c:	ff 81       	ldd	r31, Y+7	; 0x07
    1b2e:	09 95       	icall
    1b30:	68 2f       	mov	r22, r24
    1b32:	80 2f       	mov	r24, r16
    1b34:	c7 db       	rcall	.-2162   	; 0x12c4 <udc_update_iface_desc>
    1b36:	88 23       	and	r24, r24
    1b38:	29 f0       	breq	.+10     	; 0x1b44 <udc_process_setup+0x66c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1b3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b3e:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1b40:	81 11       	cpse	r24, r1
    1b42:	4b c0       	rjmp	.+150    	; 0x1bda <udc_process_setup+0x702>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1b44:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq>
    1b48:	8f 71       	andi	r24, 0x1F	; 31
    1b4a:	82 30       	cpi	r24, 0x02	; 2
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <udc_process_setup+0x678>
    1b4e:	40 c0       	rjmp	.+128    	; 0x1bd0 <udc_process_setup+0x6f8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b50:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1b54:	88 23       	and	r24, r24
    1b56:	b1 f1       	breq	.+108    	; 0x1bc4 <udc_process_setup+0x6ec>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b58:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1b5c:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1b60:	ed 91       	ld	r30, X+
    1b62:	fc 91       	ld	r31, X
    1b64:	11 97       	sbiw	r26, 0x01	; 1
    1b66:	84 81       	ldd	r24, Z+4	; 0x04
    1b68:	88 23       	and	r24, r24
    1b6a:	71 f1       	breq	.+92     	; 0x1bc8 <udc_process_setup+0x6f0>
    1b6c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b6e:	ec 2f       	mov	r30, r28
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	ee 0f       	add	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	12 96       	adiw	r26, 0x02	; 2
    1b78:	8d 91       	ld	r24, X+
    1b7a:	9c 91       	ld	r25, X
    1b7c:	13 97       	sbiw	r26, 0x03	; 3
    1b7e:	e8 0f       	add	r30, r24
    1b80:	f9 1f       	adc	r31, r25
    1b82:	00 81       	ld	r16, Z
    1b84:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b86:	d8 01       	movw	r26, r16
    1b88:	16 96       	adiw	r26, 0x06	; 6
    1b8a:	ed 91       	ld	r30, X+
    1b8c:	fc 91       	ld	r31, X
    1b8e:	17 97       	sbiw	r26, 0x07	; 7
    1b90:	09 95       	icall
    1b92:	68 2f       	mov	r22, r24
    1b94:	8c 2f       	mov	r24, r28
    1b96:	96 db       	rcall	.-2260   	; 0x12c4 <udc_update_iface_desc>
    1b98:	88 23       	and	r24, r24
    1b9a:	f9 f0       	breq	.+62     	; 0x1bda <udc_process_setup+0x702>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1b9c:	d8 01       	movw	r26, r16
    1b9e:	14 96       	adiw	r26, 0x04	; 4
    1ba0:	ed 91       	ld	r30, X+
    1ba2:	fc 91       	ld	r31, X
    1ba4:	15 97       	sbiw	r26, 0x05	; 5
    1ba6:	09 95       	icall
    1ba8:	81 11       	cpse	r24, r1
    1baa:	17 c0       	rjmp	.+46     	; 0x1bda <udc_process_setup+0x702>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1bac:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bae:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1bb2:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1bb6:	ed 91       	ld	r30, X+
    1bb8:	fc 91       	ld	r31, X
    1bba:	11 97       	sbiw	r26, 0x01	; 1
    1bbc:	94 81       	ldd	r25, Z+4	; 0x04
    1bbe:	c9 17       	cp	r28, r25
    1bc0:	b0 f2       	brcs	.-84     	; 0x1b6e <udc_process_setup+0x696>
    1bc2:	0b c0       	rjmp	.+22     	; 0x1bda <udc_process_setup+0x702>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	09 c0       	rjmp	.+18     	; 0x1bda <udc_process_setup+0x702>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <udc_process_setup+0x702>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <udc_process_setup+0x702>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <udc_process_setup+0x702>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <udc_process_setup+0x702>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1be4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1be6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1be8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1bea:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1bec:	60 83       	st	Z, r22
	ret                             // Return to caller
    1bee:	08 95       	ret

00001bf0 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1bf0:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1bf4:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1bf6:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1bf8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1bfc:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1bfe:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1c02:	08 95       	ret

00001c04 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1c04:	81 11       	cpse	r24, r1
    1c06:	22 c0       	rjmp	.+68     	; 0x1c4c <udd_sleep_mode+0x48>
    1c08:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1c0c:	99 23       	and	r25, r25
    1c0e:	d9 f0       	breq	.+54     	; 0x1c46 <udd_sleep_mode+0x42>
    1c10:	90 91 54 30 	lds	r25, 0x3054	; 0x803054 <sleepmgr_locks+0x1>
    1c14:	91 11       	cpse	r25, r1
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <udd_sleep_mode+0x16>
    1c18:	ff cf       	rjmp	.-2      	; 0x1c18 <udd_sleep_mode+0x14>
    1c1a:	2f b7       	in	r18, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	e3 e5       	ldi	r30, 0x53	; 83
    1c20:	f0 e3       	ldi	r31, 0x30	; 48
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	91 50       	subi	r25, 0x01	; 1
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	2f bf       	out	0x3f, r18	; 63
    1c2a:	0d c0       	rjmp	.+26     	; 0x1c46 <udd_sleep_mode+0x42>
    1c2c:	90 91 54 30 	lds	r25, 0x3054	; 0x803054 <sleepmgr_locks+0x1>
    1c30:	9f 3f       	cpi	r25, 0xFF	; 255
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <udd_sleep_mode+0x32>
    1c34:	ff cf       	rjmp	.-2      	; 0x1c34 <udd_sleep_mode+0x30>
    1c36:	2f b7       	in	r18, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	e3 e5       	ldi	r30, 0x53	; 83
    1c3c:	f0 e3       	ldi	r31, 0x30	; 48
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	9f 5f       	subi	r25, 0xFF	; 255
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	2f bf       	out	0x3f, r18	; 63
    1c46:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <udd_b_idle>
    1c4a:	08 95       	ret
    1c4c:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1c50:	99 23       	and	r25, r25
    1c52:	61 f3       	breq	.-40     	; 0x1c2c <udd_sleep_mode+0x28>
    1c54:	f8 cf       	rjmp	.-16     	; 0x1c46 <udd_sleep_mode+0x42>

00001c56 <udd_ctrl_init>:
    1c56:	0f 93       	push	r16
    1c58:	e8 ec       	ldi	r30, 0xC8	; 200
    1c5a:	f4 e0       	ldi	r31, 0x04	; 4
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8f 7d       	andi	r24, 0xDF	; 223
    1c60:	80 83       	st	Z, r24
    1c62:	80 81       	ld	r24, Z
    1c64:	8f 7d       	andi	r24, 0xDF	; 223
    1c66:	80 83       	st	Z, r24
    1c68:	ec e1       	ldi	r30, 0x1C	; 28
    1c6a:	f2 e2       	ldi	r31, 0x22	; 34
    1c6c:	02 e0       	ldi	r16, 0x02	; 2
    1c6e:	05 93       	las	Z, r16
    1c70:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1c74:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1c78:	00 e2       	ldi	r16, 0x20	; 32
    1c7a:	06 93       	lac	Z, r16
    1c7c:	00 e4       	ldi	r16, 0x40	; 64
    1c7e:	06 93       	lac	Z, r16
    1c80:	e4 e1       	ldi	r30, 0x14	; 20
    1c82:	f2 e2       	ldi	r31, 0x22	; 34
    1c84:	00 e2       	ldi	r16, 0x20	; 32
    1c86:	06 93       	lac	Z, r16
    1c88:	00 e4       	ldi	r16, 0x40	; 64
    1c8a:	06 93       	lac	Z, r16
    1c8c:	e3 e6       	ldi	r30, 0x63	; 99
    1c8e:	f4 e2       	ldi	r31, 0x24	; 36
    1c90:	14 86       	std	Z+12, r1	; 0x0c
    1c92:	15 86       	std	Z+13, r1	; 0x0d
    1c94:	16 86       	std	Z+14, r1	; 0x0e
    1c96:	17 86       	std	Z+15, r1	; 0x0f
    1c98:	12 86       	std	Z+10, r1	; 0x0a
    1c9a:	13 86       	std	Z+11, r1	; 0x0b
    1c9c:	10 92 03 22 	sts	0x2203, r1	; 0x802203 <udd_ep_control_state>
    1ca0:	0f 91       	pop	r16
    1ca2:	08 95       	ret

00001ca4 <udd_ctrl_stall_data>:
    1ca4:	0f 93       	push	r16
    1ca6:	85 e0       	ldi	r24, 0x05	; 5
    1ca8:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1cac:	ed e1       	ldi	r30, 0x1D	; 29
    1cae:	f2 e2       	ldi	r31, 0x22	; 34
    1cb0:	04 e0       	ldi	r16, 0x04	; 4
    1cb2:	05 93       	las	Z, r16
    1cb4:	e5 e1       	ldi	r30, 0x15	; 21
    1cb6:	f2 e2       	ldi	r31, 0x22	; 34
    1cb8:	04 e0       	ldi	r16, 0x04	; 4
    1cba:	05 93       	las	Z, r16
    1cbc:	0f 91       	pop	r16
    1cbe:	08 95       	ret

00001cc0 <udd_ctrl_send_zlp_in>:
    1cc0:	0f 93       	push	r16
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1cc8:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1ccc:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1cd0:	ec e1       	ldi	r30, 0x1C	; 28
    1cd2:	f2 e2       	ldi	r31, 0x22	; 34
    1cd4:	02 e0       	ldi	r16, 0x02	; 2
    1cd6:	06 93       	lac	Z, r16
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <udd_ctrl_endofrequest>:
    1cdc:	e0 91 6f 24 	lds	r30, 0x246F	; 0x80246f <udd_g_ctrlreq+0xc>
    1ce0:	f0 91 70 24 	lds	r31, 0x2470	; 0x802470 <udd_g_ctrlreq+0xd>
    1ce4:	30 97       	sbiw	r30, 0x00	; 0
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <udd_ctrl_endofrequest+0xe>
    1ce8:	09 95       	icall
    1cea:	08 95       	ret

00001cec <udd_ctrl_in_sent>:
    1cec:	0f 93       	push	r16
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    1cf6:	83 30       	cpi	r24, 0x03	; 3
    1cf8:	19 f4       	brne	.+6      	; 0x1d00 <udd_ctrl_in_sent+0x14>
    1cfa:	f0 df       	rcall	.-32     	; 0x1cdc <udd_ctrl_endofrequest>
    1cfc:	ac df       	rcall	.-168    	; 0x1c56 <udd_ctrl_init>
    1cfe:	5e c0       	rjmp	.+188    	; 0x1dbc <udd_ctrl_in_sent+0xd0>
    1d00:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1d04:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1d08:	c0 91 6d 24 	lds	r28, 0x246D	; 0x80246d <udd_g_ctrlreq+0xa>
    1d0c:	d0 91 6e 24 	lds	r29, 0x246E	; 0x80246e <udd_g_ctrlreq+0xb>
    1d10:	c8 1b       	sub	r28, r24
    1d12:	d9 0b       	sbc	r29, r25
    1d14:	71 f5       	brne	.+92     	; 0x1d72 <udd_ctrl_in_sent+0x86>
    1d16:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    1d1a:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d1e:	82 0f       	add	r24, r18
    1d20:	93 1f       	adc	r25, r19
    1d22:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    1d26:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d2a:	20 91 69 24 	lds	r18, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    1d2e:	30 91 6a 24 	lds	r19, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    1d32:	82 17       	cp	r24, r18
    1d34:	93 07       	cpc	r25, r19
    1d36:	21 f0       	breq	.+8      	; 0x1d40 <udd_ctrl_in_sent+0x54>
    1d38:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b_shortpacket.5272>
    1d3c:	88 23       	and	r24, r24
    1d3e:	41 f0       	breq	.+16     	; 0x1d50 <udd_ctrl_in_sent+0x64>
    1d40:	84 e0       	ldi	r24, 0x04	; 4
    1d42:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1d46:	e4 e1       	ldi	r30, 0x14	; 20
    1d48:	f2 e2       	ldi	r31, 0x22	; 34
    1d4a:	02 e0       	ldi	r16, 0x02	; 2
    1d4c:	06 93       	lac	Z, r16
    1d4e:	36 c0       	rjmp	.+108    	; 0x1dbc <udd_ctrl_in_sent+0xd0>
    1d50:	e0 91 71 24 	lds	r30, 0x2471	; 0x802471 <udd_g_ctrlreq+0xe>
    1d54:	f0 91 72 24 	lds	r31, 0x2472	; 0x802472 <udd_g_ctrlreq+0xf>
    1d58:	30 97       	sbiw	r30, 0x00	; 0
    1d5a:	99 f0       	breq	.+38     	; 0x1d82 <udd_ctrl_in_sent+0x96>
    1d5c:	09 95       	icall
    1d5e:	88 23       	and	r24, r24
    1d60:	81 f0       	breq	.+32     	; 0x1d82 <udd_ctrl_in_sent+0x96>
    1d62:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1d66:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1d6a:	c0 91 6d 24 	lds	r28, 0x246D	; 0x80246d <udd_g_ctrlreq+0xa>
    1d6e:	d0 91 6e 24 	lds	r29, 0x246E	; 0x80246e <udd_g_ctrlreq+0xb>
    1d72:	c0 34       	cpi	r28, 0x40	; 64
    1d74:	d1 05       	cpc	r29, r1
    1d76:	28 f0       	brcs	.+10     	; 0x1d82 <udd_ctrl_in_sent+0x96>
    1d78:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b_shortpacket.5272>
    1d7c:	c0 e4       	ldi	r28, 0x40	; 64
    1d7e:	d0 e0       	ldi	r29, 0x00	; 0
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <udd_ctrl_in_sent+0x9c>
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <b_shortpacket.5272>
    1d88:	e4 e0       	ldi	r30, 0x04	; 4
    1d8a:	f2 e2       	ldi	r31, 0x22	; 34
    1d8c:	c2 8f       	std	Z+26, r28	; 0x1a
    1d8e:	d3 8f       	std	Z+27, r29	; 0x1b
    1d90:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1d94:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1d98:	20 91 6b 24 	lds	r18, 0x246B	; 0x80246b <udd_g_ctrlreq+0x8>
    1d9c:	30 91 6c 24 	lds	r19, 0x246C	; 0x80246c <udd_g_ctrlreq+0x9>
    1da0:	28 0f       	add	r18, r24
    1da2:	39 1f       	adc	r19, r25
    1da4:	24 8f       	std	Z+28, r18	; 0x1c
    1da6:	35 8f       	std	Z+29, r19	; 0x1d
    1da8:	c8 0f       	add	r28, r24
    1daa:	d9 1f       	adc	r29, r25
    1dac:	c0 93 ff 21 	sts	0x21FF, r28	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1db0:	d0 93 00 22 	sts	0x2200, r29	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1db4:	ec e1       	ldi	r30, 0x1C	; 28
    1db6:	f2 e2       	ldi	r31, 0x22	; 34
    1db8:	02 e0       	ldi	r16, 0x02	; 2
    1dba:	06 93       	lac	Z, r16
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	0f 91       	pop	r16
    1dc2:	08 95       	ret

00001dc4 <udd_ep_get_size>:
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	81 81       	ldd	r24, Z+1	; 0x01
    1dc8:	e8 2f       	mov	r30, r24
    1dca:	e7 70       	andi	r30, 0x07	; 7
    1dcc:	8e 2f       	mov	r24, r30
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	31 97       	sbiw	r30, 0x01	; 1
    1dd4:	e7 30       	cpi	r30, 0x07	; 7
    1dd6:	f1 05       	cpc	r31, r1
    1dd8:	c0 f4       	brcc	.+48     	; 0x1e0a <udd_ep_get_size+0x46>
    1dda:	e2 5e       	subi	r30, 0xE2	; 226
    1ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dde:	7a c6       	rjmp	.+3316   	; 0x2ad4 <__tablejump2__>
    1de0:	80 e1       	ldi	r24, 0x10	; 16
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	08 95       	ret
    1de6:	80 e2       	ldi	r24, 0x20	; 32
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	08 95       	ret
    1dec:	80 e4       	ldi	r24, 0x40	; 64
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	08 95       	ret
    1df2:	80 e8       	ldi	r24, 0x80	; 128
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	08 95       	ret
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	08 95       	ret
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	92 e0       	ldi	r25, 0x02	; 2
    1e02:	08 95       	ret
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	93 e0       	ldi	r25, 0x03	; 3
    1e08:	08 95       	ret
    1e0a:	88 e0       	ldi	r24, 0x08	; 8
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	08 95       	ret

00001e10 <udd_ep_get_job>:
    1e10:	28 2f       	mov	r18, r24
    1e12:	2f 70       	andi	r18, 0x0F	; 15
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	22 0f       	add	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	08 2e       	mov	r0, r24
    1e1c:	00 0c       	add	r0, r0
    1e1e:	99 0b       	sbc	r25, r25
    1e20:	88 27       	eor	r24, r24
    1e22:	99 0f       	add	r25, r25
    1e24:	88 1f       	adc	r24, r24
    1e26:	99 27       	eor	r25, r25
    1e28:	82 0f       	add	r24, r18
    1e2a:	93 1f       	adc	r25, r19
    1e2c:	02 97       	sbiw	r24, 0x02	; 2
    1e2e:	9c 01       	movw	r18, r24
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	82 0f       	add	r24, r18
    1e3e:	93 1f       	adc	r25, r19
    1e40:	87 57       	subi	r24, 0x77	; 119
    1e42:	9e 4d       	sbci	r25, 0xDE	; 222
    1e44:	08 95       	ret

00001e46 <udd_ctrl_interrupt_tc_setup>:
    1e46:	0f 93       	push	r16
    1e48:	cf 93       	push	r28
    1e4a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1e4e:	80 ff       	sbrs	r24, 0
    1e50:	62 c0       	rjmp	.+196    	; 0x1f16 <udd_ctrl_interrupt_tc_setup+0xd0>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1e58:	e4 e1       	ldi	r30, 0x14	; 20
    1e5a:	f2 e2       	ldi	r31, 0x22	; 34
    1e5c:	00 e8       	ldi	r16, 0x80	; 128
    1e5e:	06 93       	lac	Z, r16
    1e60:	ec e1       	ldi	r30, 0x1C	; 28
    1e62:	f2 e2       	ldi	r31, 0x22	; 34
    1e64:	00 e8       	ldi	r16, 0x80	; 128
    1e66:	06 93       	lac	Z, r16
    1e68:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1e6c:	e4 e1       	ldi	r30, 0x14	; 20
    1e6e:	f2 e2       	ldi	r31, 0x22	; 34
    1e70:	00 e1       	ldi	r16, 0x10	; 16
    1e72:	06 93       	lac	Z, r16
    1e74:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    1e78:	88 23       	and	r24, r24
    1e7a:	29 f0       	breq	.+10     	; 0x1e86 <udd_ctrl_interrupt_tc_setup+0x40>
    1e7c:	83 50       	subi	r24, 0x03	; 3
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	08 f4       	brcc	.+2      	; 0x1e84 <udd_ctrl_interrupt_tc_setup+0x3e>
    1e82:	2c df       	rcall	.-424    	; 0x1cdc <udd_ctrl_endofrequest>
    1e84:	e8 de       	rcall	.-560    	; 0x1c56 <udd_ctrl_init>
    1e86:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udd_sram+0x12>
    1e8a:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <udd_sram+0x13>
    1e8e:	08 97       	sbiw	r24, 0x08	; 8
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <udd_ctrl_interrupt_tc_setup+0x4e>
    1e92:	43 c0       	rjmp	.+134    	; 0x1f1a <udd_ctrl_interrupt_tc_setup+0xd4>
    1e94:	88 e0       	ldi	r24, 0x08	; 8
    1e96:	ef eb       	ldi	r30, 0xBF	; 191
    1e98:	f1 e2       	ldi	r31, 0x21	; 33
    1e9a:	a3 e6       	ldi	r26, 0x63	; 99
    1e9c:	b4 e2       	ldi	r27, 0x24	; 36
    1e9e:	01 90       	ld	r0, Z+
    1ea0:	0d 92       	st	X+, r0
    1ea2:	8a 95       	dec	r24
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <udd_ctrl_interrupt_tc_setup+0x58>
    1ea6:	e8 ec       	ldi	r30, 0xC8	; 200
    1ea8:	f4 e0       	ldi	r31, 0x04	; 4
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 62       	ori	r24, 0x20	; 32
    1eae:	80 83       	st	Z, r24
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 62       	ori	r24, 0x20	; 32
    1eb4:	80 83       	st	Z, r24
    1eb6:	10 db       	rcall	.-2528   	; 0x14d8 <udc_process_setup>
    1eb8:	c8 2f       	mov	r28, r24
    1eba:	81 11       	cpse	r24, r1
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <udd_ctrl_interrupt_tc_setup+0x7e>
    1ebe:	f2 de       	rcall	.-540    	; 0x1ca4 <udd_ctrl_stall_data>
    1ec0:	c1 e0       	ldi	r28, 0x01	; 1
    1ec2:	2c c0       	rjmp	.+88     	; 0x1f1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1ec4:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq>
    1ec8:	88 23       	and	r24, r24
    1eca:	6c f4       	brge	.+26     	; 0x1ee6 <udd_ctrl_interrupt_tc_setup+0xa0>
    1ecc:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    1ed0:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    1ed4:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1ed8:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1ee2:	04 df       	rcall	.-504    	; 0x1cec <udd_ctrl_in_sent>
    1ee4:	1b c0       	rjmp	.+54     	; 0x1f1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1ee6:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    1eea:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    1eee:	89 2b       	or	r24, r25
    1ef0:	11 f4       	brne	.+4      	; 0x1ef6 <udd_ctrl_interrupt_tc_setup+0xb0>
    1ef2:	e6 de       	rcall	.-564    	; 0x1cc0 <udd_ctrl_send_zlp_in>
    1ef4:	13 c0       	rjmp	.+38     	; 0x1f1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1ef6:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    1efa:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    1efe:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1f02:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1f0c:	e4 e1       	ldi	r30, 0x14	; 20
    1f0e:	f2 e2       	ldi	r31, 0x22	; 34
    1f10:	02 e0       	ldi	r16, 0x02	; 2
    1f12:	06 93       	lac	Z, r16
    1f14:	03 c0       	rjmp	.+6      	; 0x1f1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1f16:	c0 e0       	ldi	r28, 0x00	; 0
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1f1a:	c1 e0       	ldi	r28, 0x01	; 1
    1f1c:	8c 2f       	mov	r24, r28
    1f1e:	cf 91       	pop	r28
    1f20:	0f 91       	pop	r16
    1f22:	08 95       	ret

00001f24 <udd_ep_trans_complet>:
    1f24:	8f 92       	push	r8
    1f26:	9f 92       	push	r9
    1f28:	af 92       	push	r10
    1f2a:	bf 92       	push	r11
    1f2c:	df 92       	push	r13
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	d8 2e       	mov	r13, r24
    1f3c:	69 df       	rcall	.-302    	; 0x1e10 <udd_ep_get_job>
    1f3e:	8c 01       	movw	r16, r24
    1f40:	bd 2c       	mov	r11, r13
    1f42:	bb 1c       	adc	r11, r11
    1f44:	bb 24       	eor	r11, r11
    1f46:	bb 1c       	adc	r11, r11
    1f48:	cd 2d       	mov	r28, r13
    1f4a:	cf 70       	andi	r28, 0x0F	; 15
    1f4c:	d0 e0       	ldi	r29, 0x00	; 0
    1f4e:	cc 0f       	add	r28, r28
    1f50:	dd 1f       	adc	r29, r29
    1f52:	cb 0d       	add	r28, r11
    1f54:	d1 1d       	adc	r29, r1
    1f56:	ce 01       	movw	r24, r28
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	9c 01       	movw	r18, r24
    1f66:	2c 5e       	subi	r18, 0xEC	; 236
    1f68:	3d 4d       	sbci	r19, 0xDD	; 221
    1f6a:	79 01       	movw	r14, r18
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	2a df       	rcall	.-428    	; 0x1dc4 <udd_ep_get_size>
    1f70:	4c 01       	movw	r8, r24
    1f72:	bb 20       	and	r11, r11
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <udd_ep_trans_complet+0x54>
    1f76:	70 c0       	rjmp	.+224    	; 0x2058 <udd_ep_trans_complet+0x134>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ee 0f       	add	r30, r30
    1f7c:	ff 1f       	adc	r31, r31
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	ec 5f       	subi	r30, 0xFC	; 252
    1f88:	fd 4d       	sbci	r31, 0xDD	; 221
    1f8a:	26 89       	ldd	r18, Z+22	; 0x16
    1f8c:	37 89       	ldd	r19, Z+23	; 0x17
    1f8e:	d8 01       	movw	r26, r16
    1f90:	15 96       	adiw	r26, 0x05	; 5
    1f92:	8d 91       	ld	r24, X+
    1f94:	9c 91       	ld	r25, X
    1f96:	16 97       	sbiw	r26, 0x06	; 6
    1f98:	82 0f       	add	r24, r18
    1f9a:	93 1f       	adc	r25, r19
    1f9c:	15 96       	adiw	r26, 0x05	; 5
    1f9e:	8d 93       	st	X+, r24
    1fa0:	9c 93       	st	X, r25
    1fa2:	16 97       	sbiw	r26, 0x06	; 6
    1fa4:	13 96       	adiw	r26, 0x03	; 3
    1fa6:	2d 91       	ld	r18, X+
    1fa8:	3c 91       	ld	r19, X
    1faa:	14 97       	sbiw	r26, 0x04	; 4
    1fac:	82 17       	cp	r24, r18
    1fae:	93 07       	cpc	r25, r19
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <udd_ep_trans_complet+0x90>
    1fb2:	3c c0       	rjmp	.+120    	; 0x202c <udd_ep_trans_complet+0x108>
    1fb4:	28 1b       	sub	r18, r24
    1fb6:	39 0b       	sbc	r19, r25
    1fb8:	21 15       	cp	r18, r1
    1fba:	b4 e0       	ldi	r27, 0x04	; 4
    1fbc:	3b 07       	cpc	r19, r27
    1fbe:	38 f0       	brcs	.+14     	; 0x1fce <udd_ep_trans_complet+0xaa>
    1fc0:	2f ef       	ldi	r18, 0xFF	; 255
    1fc2:	33 e0       	ldi	r19, 0x03	; 3
    1fc4:	c9 01       	movw	r24, r18
    1fc6:	b4 01       	movw	r22, r8
    1fc8:	71 d5       	rcall	.+2786   	; 0x2aac <__udivmodhi4>
    1fca:	28 1b       	sub	r18, r24
    1fcc:	39 0b       	sbc	r19, r25
    1fce:	f8 01       	movw	r30, r16
    1fd0:	80 81       	ld	r24, Z
    1fd2:	81 ff       	sbrs	r24, 1
    1fd4:	09 c0       	rjmp	.+18     	; 0x1fe8 <udd_ep_trans_complet+0xc4>
    1fd6:	c9 01       	movw	r24, r18
    1fd8:	b4 01       	movw	r22, r8
    1fda:	68 d5       	rcall	.+2768   	; 0x2aac <__udivmodhi4>
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	89 2b       	or	r24, r25
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <udd_ep_trans_complet+0xc0>
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	84 2f       	mov	r24, r20
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <udd_ep_trans_complet+0xc6>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	d8 01       	movw	r26, r16
    1fec:	9c 91       	ld	r25, X
    1fee:	80 fb       	bst	r24, 0
    1ff0:	91 f9       	bld	r25, 1
    1ff2:	9c 93       	st	X, r25
    1ff4:	cc 0f       	add	r28, r28
    1ff6:	dd 1f       	adc	r29, r29
    1ff8:	cc 0f       	add	r28, r28
    1ffa:	dd 1f       	adc	r29, r29
    1ffc:	cc 0f       	add	r28, r28
    1ffe:	dd 1f       	adc	r29, r29
    2000:	cc 5f       	subi	r28, 0xFC	; 252
    2002:	dd 4d       	sbci	r29, 0xDD	; 221
    2004:	1e 8a       	std	Y+22, r1	; 0x16
    2006:	1f 8a       	std	Y+23, r1	; 0x17
    2008:	2a 8b       	std	Y+18, r18	; 0x12
    200a:	3b 8b       	std	Y+19, r19	; 0x13
    200c:	11 96       	adiw	r26, 0x01	; 1
    200e:	2d 91       	ld	r18, X+
    2010:	3c 91       	ld	r19, X
    2012:	12 97       	sbiw	r26, 0x02	; 2
    2014:	15 96       	adiw	r26, 0x05	; 5
    2016:	8d 91       	ld	r24, X+
    2018:	9c 91       	ld	r25, X
    201a:	16 97       	sbiw	r26, 0x06	; 6
    201c:	82 0f       	add	r24, r18
    201e:	93 1f       	adc	r25, r19
    2020:	8c 8b       	std	Y+20, r24	; 0x14
    2022:	9d 8b       	std	Y+21, r25	; 0x15
    2024:	f7 01       	movw	r30, r14
    2026:	02 e0       	ldi	r16, 0x02	; 2
    2028:	06 93       	lac	Z, r16
    202a:	ca c0       	rjmp	.+404    	; 0x21c0 <udd_ep_trans_complet+0x29c>
    202c:	d8 01       	movw	r26, r16
    202e:	8c 91       	ld	r24, X
    2030:	81 ff       	sbrs	r24, 1
    2032:	b3 c0       	rjmp	.+358    	; 0x219a <udd_ep_trans_complet+0x276>
    2034:	8d 7f       	andi	r24, 0xFD	; 253
    2036:	8c 93       	st	X, r24
    2038:	cc 0f       	add	r28, r28
    203a:	dd 1f       	adc	r29, r29
    203c:	cc 0f       	add	r28, r28
    203e:	dd 1f       	adc	r29, r29
    2040:	cc 0f       	add	r28, r28
    2042:	dd 1f       	adc	r29, r29
    2044:	cc 5f       	subi	r28, 0xFC	; 252
    2046:	dd 4d       	sbci	r29, 0xDD	; 221
    2048:	1e 8a       	std	Y+22, r1	; 0x16
    204a:	1f 8a       	std	Y+23, r1	; 0x17
    204c:	1a 8a       	std	Y+18, r1	; 0x12
    204e:	1b 8a       	std	Y+19, r1	; 0x13
    2050:	f7 01       	movw	r30, r14
    2052:	02 e0       	ldi	r16, 0x02	; 2
    2054:	06 93       	lac	Z, r16
    2056:	b4 c0       	rjmp	.+360    	; 0x21c0 <udd_ep_trans_complet+0x29c>
    2058:	fe 01       	movw	r30, r28
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	ee 0f       	add	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	ec 5f       	subi	r30, 0xFC	; 252
    2068:	fd 4d       	sbci	r31, 0xDD	; 221
    206a:	a2 88       	ldd	r10, Z+18	; 0x12
    206c:	b3 88       	ldd	r11, Z+19	; 0x13
    206e:	d8 01       	movw	r26, r16
    2070:	8c 91       	ld	r24, X
    2072:	82 ff       	sbrs	r24, 2
    2074:	19 c0       	rjmp	.+50     	; 0x20a8 <udd_ep_trans_complet+0x184>
    2076:	11 96       	adiw	r26, 0x01	; 1
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	12 97       	sbiw	r26, 0x02	; 2
    207e:	15 96       	adiw	r26, 0x05	; 5
    2080:	2d 91       	ld	r18, X+
    2082:	3c 91       	ld	r19, X
    2084:	16 97       	sbiw	r26, 0x06	; 6
    2086:	13 96       	adiw	r26, 0x03	; 3
    2088:	8d 91       	ld	r24, X+
    208a:	9c 91       	ld	r25, X
    208c:	14 97       	sbiw	r26, 0x04	; 4
    208e:	b4 01       	movw	r22, r8
    2090:	0d d5       	rcall	.+2586   	; 0x2aac <__udivmodhi4>
    2092:	b0 e4       	ldi	r27, 0x40	; 64
    2094:	db 9e       	mul	r13, r27
    2096:	b0 01       	movw	r22, r0
    2098:	11 24       	eor	r1, r1
    209a:	67 57       	subi	r22, 0x77	; 119
    209c:	7f 4d       	sbci	r23, 0xDF	; 223
    209e:	ac 01       	movw	r20, r24
    20a0:	cf 01       	movw	r24, r30
    20a2:	82 0f       	add	r24, r18
    20a4:	93 1f       	adc	r25, r19
    20a6:	1c d5       	rcall	.+2616   	; 0x2ae0 <memcpy>
    20a8:	f8 01       	movw	r30, r16
    20aa:	25 81       	ldd	r18, Z+5	; 0x05
    20ac:	36 81       	ldd	r19, Z+6	; 0x06
    20ae:	2a 0d       	add	r18, r10
    20b0:	3b 1d       	adc	r19, r11
    20b2:	25 83       	std	Z+5, r18	; 0x05
    20b4:	36 83       	std	Z+6, r19	; 0x06
    20b6:	83 81       	ldd	r24, Z+3	; 0x03
    20b8:	94 81       	ldd	r25, Z+4	; 0x04
    20ba:	82 17       	cp	r24, r18
    20bc:	93 07       	cpc	r25, r19
    20be:	68 f4       	brcc	.+26     	; 0x20da <udd_ep_trans_complet+0x1b6>
    20c0:	85 83       	std	Z+5, r24	; 0x05
    20c2:	96 83       	std	Z+6, r25	; 0x06
    20c4:	cc 0f       	add	r28, r28
    20c6:	dd 1f       	adc	r29, r29
    20c8:	cc 0f       	add	r28, r28
    20ca:	dd 1f       	adc	r29, r29
    20cc:	cc 0f       	add	r28, r28
    20ce:	dd 1f       	adc	r29, r29
    20d0:	cc 5f       	subi	r28, 0xFC	; 252
    20d2:	dd 4d       	sbci	r29, 0xDD	; 221
    20d4:	8e 89       	ldd	r24, Y+22	; 0x16
    20d6:	9f 89       	ldd	r25, Y+23	; 0x17
    20d8:	60 c0       	rjmp	.+192    	; 0x219a <udd_ep_trans_complet+0x276>
    20da:	fe 01       	movw	r30, r28
    20dc:	ee 0f       	add	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	ec 5f       	subi	r30, 0xFC	; 252
    20ea:	fd 4d       	sbci	r31, 0xDD	; 221
    20ec:	46 89       	ldd	r20, Z+22	; 0x16
    20ee:	57 89       	ldd	r21, Z+23	; 0x17
    20f0:	4a 15       	cp	r20, r10
    20f2:	5b 05       	cpc	r21, r11
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <udd_ep_trans_complet+0x1d4>
    20f6:	51 c0       	rjmp	.+162    	; 0x219a <udd_ep_trans_complet+0x276>
    20f8:	28 17       	cp	r18, r24
    20fa:	39 07       	cpc	r19, r25
    20fc:	09 f4       	brne	.+2      	; 0x2100 <udd_ep_trans_complet+0x1dc>
    20fe:	4d c0       	rjmp	.+154    	; 0x219a <udd_ep_trans_complet+0x276>
    2100:	ac 01       	movw	r20, r24
    2102:	42 1b       	sub	r20, r18
    2104:	53 0b       	sbc	r21, r19
    2106:	9a 01       	movw	r18, r20
    2108:	21 15       	cp	r18, r1
    210a:	54 e0       	ldi	r21, 0x04	; 4
    210c:	35 07       	cpc	r19, r21
    210e:	50 f0       	brcs	.+20     	; 0x2124 <udd_ep_trans_complet+0x200>
    2110:	2f ef       	ldi	r18, 0xFF	; 255
    2112:	33 e0       	ldi	r19, 0x03	; 3
    2114:	c9 01       	movw	r24, r18
    2116:	b4 01       	movw	r22, r8
    2118:	c9 d4       	rcall	.+2450   	; 0x2aac <__udivmodhi4>
    211a:	d9 01       	movw	r26, r18
    211c:	a8 1b       	sub	r26, r24
    211e:	b9 0b       	sbc	r27, r25
    2120:	cd 01       	movw	r24, r26
    2122:	07 c0       	rjmp	.+14     	; 0x2132 <udd_ep_trans_complet+0x20e>
    2124:	c9 01       	movw	r24, r18
    2126:	b4 01       	movw	r22, r8
    2128:	c1 d4       	rcall	.+2434   	; 0x2aac <__udivmodhi4>
    212a:	f9 01       	movw	r30, r18
    212c:	e8 1b       	sub	r30, r24
    212e:	f9 0b       	sbc	r31, r25
    2130:	cf 01       	movw	r24, r30
    2132:	fe 01       	movw	r30, r28
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	ec 5f       	subi	r30, 0xFC	; 252
    2142:	fd 4d       	sbci	r31, 0xDD	; 221
    2144:	12 8a       	std	Z+18, r1	; 0x12
    2146:	13 8a       	std	Z+19, r1	; 0x13
    2148:	88 15       	cp	r24, r8
    214a:	99 05       	cpc	r25, r9
    214c:	78 f4       	brcc	.+30     	; 0x216c <udd_ep_trans_complet+0x248>
    214e:	d8 01       	movw	r26, r16
    2150:	8c 91       	ld	r24, X
    2152:	84 60       	ori	r24, 0x04	; 4
    2154:	8c 93       	st	X, r24
    2156:	b0 e4       	ldi	r27, 0x40	; 64
    2158:	db 9e       	mul	r13, r27
    215a:	c0 01       	movw	r24, r0
    215c:	11 24       	eor	r1, r1
    215e:	87 57       	subi	r24, 0x77	; 119
    2160:	9f 4d       	sbci	r25, 0xDF	; 223
    2162:	84 8b       	std	Z+20, r24	; 0x14
    2164:	95 8b       	std	Z+21, r25	; 0x15
    2166:	86 8a       	std	Z+22, r8	; 0x16
    2168:	97 8a       	std	Z+23, r9	; 0x17
    216a:	13 c0       	rjmp	.+38     	; 0x2192 <udd_ep_trans_complet+0x26e>
    216c:	f8 01       	movw	r30, r16
    216e:	41 81       	ldd	r20, Z+1	; 0x01
    2170:	52 81       	ldd	r21, Z+2	; 0x02
    2172:	25 81       	ldd	r18, Z+5	; 0x05
    2174:	36 81       	ldd	r19, Z+6	; 0x06
    2176:	24 0f       	add	r18, r20
    2178:	35 1f       	adc	r19, r21
    217a:	cc 0f       	add	r28, r28
    217c:	dd 1f       	adc	r29, r29
    217e:	cc 0f       	add	r28, r28
    2180:	dd 1f       	adc	r29, r29
    2182:	cc 0f       	add	r28, r28
    2184:	dd 1f       	adc	r29, r29
    2186:	cc 5f       	subi	r28, 0xFC	; 252
    2188:	dd 4d       	sbci	r29, 0xDD	; 221
    218a:	2c 8b       	std	Y+20, r18	; 0x14
    218c:	3d 8b       	std	Y+21, r19	; 0x15
    218e:	8e 8b       	std	Y+22, r24	; 0x16
    2190:	9f 8b       	std	Y+23, r25	; 0x17
    2192:	f7 01       	movw	r30, r14
    2194:	02 e0       	ldi	r16, 0x02	; 2
    2196:	06 93       	lac	Z, r16
    2198:	13 c0       	rjmp	.+38     	; 0x21c0 <udd_ep_trans_complet+0x29c>
    219a:	d8 01       	movw	r26, r16
    219c:	8c 91       	ld	r24, X
    219e:	80 ff       	sbrs	r24, 0
    21a0:	0f c0       	rjmp	.+30     	; 0x21c0 <udd_ep_trans_complet+0x29c>
    21a2:	8e 7f       	andi	r24, 0xFE	; 254
    21a4:	8c 93       	st	X, r24
    21a6:	17 96       	adiw	r26, 0x07	; 7
    21a8:	ed 91       	ld	r30, X+
    21aa:	fc 91       	ld	r31, X
    21ac:	18 97       	sbiw	r26, 0x08	; 8
    21ae:	30 97       	sbiw	r30, 0x00	; 0
    21b0:	39 f0       	breq	.+14     	; 0x21c0 <udd_ep_trans_complet+0x29c>
    21b2:	15 96       	adiw	r26, 0x05	; 5
    21b4:	6d 91       	ld	r22, X+
    21b6:	7c 91       	ld	r23, X
    21b8:	16 97       	sbiw	r26, 0x06	; 6
    21ba:	4d 2d       	mov	r20, r13
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	09 95       	icall
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	df 90       	pop	r13
    21ce:	bf 90       	pop	r11
    21d0:	af 90       	pop	r10
    21d2:	9f 90       	pop	r9
    21d4:	8f 90       	pop	r8
    21d6:	08 95       	ret

000021d8 <udd_attach>:
    21d8:	cf 93       	push	r28
    21da:	cf b7       	in	r28, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	11 dd       	rcall	.-1502   	; 0x1c04 <udd_sleep_mode>
    21e2:	ea ec       	ldi	r30, 0xCA	; 202
    21e4:	f4 e0       	ldi	r31, 0x04	; 4
    21e6:	80 e4       	ldi	r24, 0x40	; 64
    21e8:	80 83       	st	Z, r24
    21ea:	80 e2       	ldi	r24, 0x20	; 32
    21ec:	80 83       	st	Z, r24
    21ee:	e1 ec       	ldi	r30, 0xC1	; 193
    21f0:	f4 e0       	ldi	r31, 0x04	; 4
    21f2:	80 81       	ld	r24, Z
    21f4:	81 60       	ori	r24, 0x01	; 1
    21f6:	80 83       	st	Z, r24
    21f8:	a9 ec       	ldi	r26, 0xC9	; 201
    21fa:	b4 e0       	ldi	r27, 0x04	; 4
    21fc:	8c 91       	ld	r24, X
    21fe:	82 60       	ori	r24, 0x02	; 2
    2200:	8c 93       	st	X, r24
    2202:	e8 ec       	ldi	r30, 0xC8	; 200
    2204:	f4 e0       	ldi	r31, 0x04	; 4
    2206:	80 81       	ld	r24, Z
    2208:	80 64       	ori	r24, 0x40	; 64
    220a:	80 83       	st	Z, r24
    220c:	8c 91       	ld	r24, X
    220e:	81 60       	ori	r24, 0x01	; 1
    2210:	8c 93       	st	X, r24
    2212:	80 81       	ld	r24, Z
    2214:	80 68       	ori	r24, 0x80	; 128
    2216:	80 83       	st	Z, r24
    2218:	cf bf       	out	0x3f, r28	; 63
    221a:	cf 91       	pop	r28
    221c:	08 95       	ret

0000221e <udd_enable>:
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	c0 e6       	ldi	r28, 0x60	; 96
    2224:	d0 e0       	ldi	r29, 0x00	; 0
    2226:	18 82       	st	Y, r1
    2228:	80 e3       	ldi	r24, 0x30	; 48
    222a:	0e 94 95 08 	call	0x112a	; 0x112a <sysclk_enable_usb>
    222e:	e0 ec       	ldi	r30, 0xC0	; 192
    2230:	f4 e0       	ldi	r31, 0x04	; 4
    2232:	80 81       	ld	r24, Z
    2234:	80 64       	ori	r24, 0x40	; 64
    2236:	80 83       	st	Z, r24
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	88 83       	st	Y, r24
    223c:	cf b7       	in	r28, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	fc 01       	movw	r30, r24
    2246:	ee 0f       	add	r30, r30
    2248:	ff 1f       	adc	r31, r31
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	ee 0f       	add	r30, r30
    2250:	ff 1f       	adc	r31, r31
    2252:	ec 5f       	subi	r30, 0xFC	; 252
    2254:	fd 4d       	sbci	r31, 0xDD	; 221
    2256:	11 8a       	std	Z+17, r1	; 0x11
    2258:	01 96       	adiw	r24, 0x01	; 1
    225a:	88 30       	cpi	r24, 0x08	; 8
    225c:	91 05       	cpc	r25, r1
    225e:	91 f7       	brne	.-28     	; 0x2244 <udd_enable+0x26>
    2260:	e9 e8       	ldi	r30, 0x89	; 137
    2262:	f1 e2       	ldi	r31, 0x21	; 33
    2264:	80 81       	ld	r24, Z
    2266:	8e 7f       	andi	r24, 0xFE	; 254
    2268:	80 83       	st	Z, r24
    226a:	e2 e9       	ldi	r30, 0x92	; 146
    226c:	f1 e2       	ldi	r31, 0x21	; 33
    226e:	80 81       	ld	r24, Z
    2270:	8e 7f       	andi	r24, 0xFE	; 254
    2272:	80 83       	st	Z, r24
    2274:	eb e9       	ldi	r30, 0x9B	; 155
    2276:	f1 e2       	ldi	r31, 0x21	; 33
    2278:	80 81       	ld	r24, Z
    227a:	8e 7f       	andi	r24, 0xFE	; 254
    227c:	80 83       	st	Z, r24
    227e:	e4 ea       	ldi	r30, 0xA4	; 164
    2280:	f1 e2       	ldi	r31, 0x21	; 33
    2282:	80 81       	ld	r24, Z
    2284:	8e 7f       	andi	r24, 0xFE	; 254
    2286:	80 83       	st	Z, r24
    2288:	ed ea       	ldi	r30, 0xAD	; 173
    228a:	f1 e2       	ldi	r31, 0x21	; 33
    228c:	80 81       	ld	r24, Z
    228e:	8e 7f       	andi	r24, 0xFE	; 254
    2290:	80 83       	st	Z, r24
    2292:	e6 eb       	ldi	r30, 0xB6	; 182
    2294:	f1 e2       	ldi	r31, 0x21	; 33
    2296:	80 81       	ld	r24, Z
    2298:	8e 7f       	andi	r24, 0xFE	; 254
    229a:	80 83       	st	Z, r24
    229c:	6a e1       	ldi	r22, 0x1A	; 26
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	82 e0       	ldi	r24, 0x02	; 2
    22a2:	a6 dc       	rcall	.-1716   	; 0x1bf0 <nvm_read_byte>
    22a4:	8f 3f       	cpi	r24, 0xFF	; 255
    22a6:	19 f0       	breq	.+6      	; 0x22ae <udd_enable+0x90>
    22a8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <udd_enable+0x96>
    22ae:	8f e1       	ldi	r24, 0x1F	; 31
    22b0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    22b4:	6b e1       	ldi	r22, 0x1B	; 27
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	9a dc       	rcall	.-1740   	; 0x1bf0 <nvm_read_byte>
    22bc:	8f 3f       	cpi	r24, 0xFF	; 255
    22be:	19 f0       	breq	.+6      	; 0x22c6 <udd_enable+0xa8>
    22c0:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    22c4:	03 c0       	rjmp	.+6      	; 0x22cc <udd_enable+0xae>
    22c6:	8f e1       	ldi	r24, 0x1F	; 31
    22c8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    22cc:	e0 ec       	ldi	r30, 0xC0	; 192
    22ce:	f4 e0       	ldi	r31, 0x04	; 4
    22d0:	80 81       	ld	r24, Z
    22d2:	83 60       	ori	r24, 0x03	; 3
    22d4:	80 83       	st	Z, r24
    22d6:	80 81       	ld	r24, Z
    22d8:	80 68       	ori	r24, 0x80	; 128
    22da:	80 83       	st	Z, r24
    22dc:	80 81       	ld	r24, Z
    22de:	80 61       	ori	r24, 0x10	; 16
    22e0:	80 83       	st	Z, r24
    22e2:	84 e1       	ldi	r24, 0x14	; 20
    22e4:	92 e2       	ldi	r25, 0x22	; 34
    22e6:	86 83       	std	Z+6, r24	; 0x06
    22e8:	97 83       	std	Z+7, r25	; 0x07
    22ea:	80 81       	ld	r24, Z
    22ec:	80 62       	ori	r24, 0x20	; 32
    22ee:	80 83       	st	Z, r24
    22f0:	8f ef       	ldi	r24, 0xFF	; 255
    22f2:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    22f6:	e8 ec       	ldi	r30, 0xC8	; 200
    22f8:	f4 e0       	ldi	r31, 0x04	; 4
    22fa:	80 81       	ld	r24, Z
    22fc:	82 60       	ori	r24, 0x02	; 2
    22fe:	80 83       	st	Z, r24
    2300:	10 92 58 22 	sts	0x2258, r1	; 0x802258 <udd_b_idle>
    2304:	80 91 58 30 	lds	r24, 0x3058	; 0x803058 <sleepmgr_locks+0x5>
    2308:	8f 3f       	cpi	r24, 0xFF	; 255
    230a:	09 f4       	brne	.+2      	; 0x230e <udd_enable+0xf0>
    230c:	ff cf       	rjmp	.-2      	; 0x230c <udd_enable+0xee>
    230e:	9f b7       	in	r25, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	e3 e5       	ldi	r30, 0x53	; 83
    2314:	f0 e3       	ldi	r31, 0x30	; 48
    2316:	85 81       	ldd	r24, Z+5	; 0x05
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	85 83       	std	Z+5, r24	; 0x05
    231c:	9f bf       	out	0x3f, r25	; 63
    231e:	5c df       	rcall	.-328    	; 0x21d8 <udd_attach>
    2320:	cf bf       	out	0x3f, r28	; 63
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	08 95       	ret

00002328 <udd_set_address>:
    2328:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    232c:	08 95       	ret

0000232e <udd_getaddress>:
    232e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2332:	08 95       	ret

00002334 <udd_set_setup_payload>:
    2334:	e3 e6       	ldi	r30, 0x63	; 99
    2336:	f4 e2       	ldi	r31, 0x24	; 36
    2338:	80 87       	std	Z+8, r24	; 0x08
    233a:	91 87       	std	Z+9, r25	; 0x09
    233c:	62 87       	std	Z+10, r22	; 0x0a
    233e:	73 87       	std	Z+11, r23	; 0x0b
    2340:	08 95       	ret

00002342 <udd_ep_alloc>:
    2342:	28 2f       	mov	r18, r24
    2344:	2f 70       	andi	r18, 0x0F	; 15
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	22 0f       	add	r18, r18
    234a:	33 1f       	adc	r19, r19
    234c:	08 2e       	mov	r0, r24
    234e:	00 0c       	add	r0, r0
    2350:	99 0b       	sbc	r25, r25
    2352:	88 27       	eor	r24, r24
    2354:	99 0f       	add	r25, r25
    2356:	88 1f       	adc	r24, r24
    2358:	99 27       	eor	r25, r25
    235a:	82 0f       	add	r24, r18
    235c:	93 1f       	adc	r25, r19
    235e:	fc 01       	movw	r30, r24
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	ee 0f       	add	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	ec 5f       	subi	r30, 0xFC	; 252
    236e:	fd 4d       	sbci	r31, 0xDD	; 221
    2370:	21 89       	ldd	r18, Z+17	; 0x11
    2372:	20 7c       	andi	r18, 0xC0	; 192
    2374:	09 f0       	breq	.+2      	; 0x2378 <udd_ep_alloc+0x36>
    2376:	58 c0       	rjmp	.+176    	; 0x2428 <udd_ep_alloc+0xe6>
    2378:	63 70       	andi	r22, 0x03	; 3
    237a:	61 30       	cpi	r22, 0x01	; 1
    237c:	11 f0       	breq	.+4      	; 0x2382 <udd_ep_alloc+0x40>
    237e:	18 f4       	brcc	.+6      	; 0x2386 <udd_ep_alloc+0x44>
    2380:	04 c0       	rjmp	.+8      	; 0x238a <udd_ep_alloc+0x48>
    2382:	20 ec       	ldi	r18, 0xC0	; 192
    2384:	03 c0       	rjmp	.+6      	; 0x238c <udd_ep_alloc+0x4a>
    2386:	20 e8       	ldi	r18, 0x80	; 128
    2388:	01 c0       	rjmp	.+2      	; 0x238c <udd_ep_alloc+0x4a>
    238a:	20 e4       	ldi	r18, 0x40	; 64
    238c:	40 38       	cpi	r20, 0x80	; 128
    238e:	51 05       	cpc	r21, r1
    2390:	e9 f0       	breq	.+58     	; 0x23cc <udd_ep_alloc+0x8a>
    2392:	50 f4       	brcc	.+20     	; 0x23a8 <udd_ep_alloc+0x66>
    2394:	40 32       	cpi	r20, 0x20	; 32
    2396:	51 05       	cpc	r21, r1
    2398:	a9 f0       	breq	.+42     	; 0x23c4 <udd_ep_alloc+0x82>
    239a:	40 34       	cpi	r20, 0x40	; 64
    239c:	51 05       	cpc	r21, r1
    239e:	a1 f0       	breq	.+40     	; 0x23c8 <udd_ep_alloc+0x86>
    23a0:	40 31       	cpi	r20, 0x10	; 16
    23a2:	51 05       	cpc	r21, r1
    23a4:	d9 f4       	brne	.+54     	; 0x23dc <udd_ep_alloc+0x9a>
    23a6:	0c c0       	rjmp	.+24     	; 0x23c0 <udd_ep_alloc+0x7e>
    23a8:	41 15       	cp	r20, r1
    23aa:	32 e0       	ldi	r19, 0x02	; 2
    23ac:	53 07       	cpc	r21, r19
    23ae:	91 f0       	breq	.+36     	; 0x23d4 <udd_ep_alloc+0x92>
    23b0:	4f 3f       	cpi	r20, 0xFF	; 255
    23b2:	33 e0       	ldi	r19, 0x03	; 3
    23b4:	53 07       	cpc	r21, r19
    23b6:	81 f0       	breq	.+32     	; 0x23d8 <udd_ep_alloc+0x96>
    23b8:	41 15       	cp	r20, r1
    23ba:	51 40       	sbci	r21, 0x01	; 1
    23bc:	79 f4       	brne	.+30     	; 0x23dc <udd_ep_alloc+0x9a>
    23be:	08 c0       	rjmp	.+16     	; 0x23d0 <udd_ep_alloc+0x8e>
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	0d c0       	rjmp	.+26     	; 0x23de <udd_ep_alloc+0x9c>
    23c4:	42 e0       	ldi	r20, 0x02	; 2
    23c6:	0b c0       	rjmp	.+22     	; 0x23de <udd_ep_alloc+0x9c>
    23c8:	43 e0       	ldi	r20, 0x03	; 3
    23ca:	09 c0       	rjmp	.+18     	; 0x23de <udd_ep_alloc+0x9c>
    23cc:	44 e0       	ldi	r20, 0x04	; 4
    23ce:	07 c0       	rjmp	.+14     	; 0x23de <udd_ep_alloc+0x9c>
    23d0:	45 e0       	ldi	r20, 0x05	; 5
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <udd_ep_alloc+0x9c>
    23d4:	46 e0       	ldi	r20, 0x06	; 6
    23d6:	03 c0       	rjmp	.+6      	; 0x23de <udd_ep_alloc+0x9c>
    23d8:	47 e0       	ldi	r20, 0x07	; 7
    23da:	01 c0       	rjmp	.+2      	; 0x23de <udd_ep_alloc+0x9c>
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	fc 01       	movw	r30, r24
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	ee 0f       	add	r30, r30
    23e6:	ff 1f       	adc	r31, r31
    23e8:	ee 0f       	add	r30, r30
    23ea:	ff 1f       	adc	r31, r31
    23ec:	ec 5f       	subi	r30, 0xFC	; 252
    23ee:	fd 4d       	sbci	r31, 0xDD	; 221
    23f0:	11 8a       	std	Z+17, r1	; 0x11
    23f2:	dc 01       	movw	r26, r24
    23f4:	aa 0f       	add	r26, r26
    23f6:	bb 1f       	adc	r27, r27
    23f8:	aa 0f       	add	r26, r26
    23fa:	bb 1f       	adc	r27, r27
    23fc:	aa 0f       	add	r26, r26
    23fe:	bb 1f       	adc	r27, r27
    2400:	ac 5e       	subi	r26, 0xEC	; 236
    2402:	bd 4d       	sbci	r27, 0xDD	; 221
    2404:	36 e0       	ldi	r19, 0x06	; 6
    2406:	3c 93       	st	X, r19
    2408:	24 2b       	or	r18, r20
    240a:	21 8b       	std	Z+17, r18	; 0x11
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	fc 01       	movw	r30, r24
    241a:	ec 5f       	subi	r30, 0xFC	; 252
    241c:	fd 4d       	sbci	r31, 0xDD	; 221
    241e:	81 89       	ldd	r24, Z+17	; 0x11
    2420:	80 62       	ori	r24, 0x20	; 32
    2422:	81 8b       	std	Z+17, r24	; 0x11
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	08 95       	ret
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	08 95       	ret

0000242c <udd_ep_is_halted>:
    242c:	e8 2f       	mov	r30, r24
    242e:	ef 70       	andi	r30, 0x0F	; 15
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	08 2e       	mov	r0, r24
    2438:	00 0c       	add	r0, r0
    243a:	99 0b       	sbc	r25, r25
    243c:	88 27       	eor	r24, r24
    243e:	99 0f       	add	r25, r25
    2440:	88 1f       	adc	r24, r24
    2442:	99 27       	eor	r25, r25
    2444:	e8 0f       	add	r30, r24
    2446:	f9 1f       	adc	r31, r25
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	ee 0f       	add	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	ec 5f       	subi	r30, 0xFC	; 252
    2456:	fd 4d       	sbci	r31, 0xDD	; 221
    2458:	81 89       	ldd	r24, Z+17	; 0x11
    245a:	82 fb       	bst	r24, 2
    245c:	88 27       	eor	r24, r24
    245e:	80 f9       	bld	r24, 0
    2460:	08 95       	ret

00002462 <udd_ep_clear_halt>:
    2462:	28 2f       	mov	r18, r24
    2464:	2f 70       	andi	r18, 0x0F	; 15
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	a9 01       	movw	r20, r18
    246a:	44 0f       	add	r20, r20
    246c:	55 1f       	adc	r21, r21
    246e:	28 2f       	mov	r18, r24
    2470:	08 2e       	mov	r0, r24
    2472:	00 0c       	add	r0, r0
    2474:	33 0b       	sbc	r19, r19
    2476:	22 27       	eor	r18, r18
    2478:	33 0f       	add	r19, r19
    247a:	22 1f       	adc	r18, r18
    247c:	33 27       	eor	r19, r19
    247e:	24 0f       	add	r18, r20
    2480:	35 1f       	adc	r19, r21
    2482:	f9 01       	movw	r30, r18
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	ee 0f       	add	r30, r30
    248a:	ff 1f       	adc	r31, r31
    248c:	ee 0f       	add	r30, r30
    248e:	ff 1f       	adc	r31, r31
    2490:	ec 5f       	subi	r30, 0xFC	; 252
    2492:	fd 4d       	sbci	r31, 0xDD	; 221
    2494:	91 89       	ldd	r25, Z+17	; 0x11
    2496:	92 ff       	sbrs	r25, 2
    2498:	17 c0       	rjmp	.+46     	; 0x24c8 <udd_ep_clear_halt+0x66>
    249a:	22 0f       	add	r18, r18
    249c:	33 1f       	adc	r19, r19
    249e:	22 0f       	add	r18, r18
    24a0:	33 1f       	adc	r19, r19
    24a2:	22 0f       	add	r18, r18
    24a4:	33 1f       	adc	r19, r19
    24a6:	f9 01       	movw	r30, r18
    24a8:	ec 5f       	subi	r30, 0xFC	; 252
    24aa:	fd 4d       	sbci	r31, 0xDD	; 221
    24ac:	91 89       	ldd	r25, Z+17	; 0x11
    24ae:	9b 7f       	andi	r25, 0xFB	; 251
    24b0:	91 8b       	std	Z+17, r25	; 0x11
    24b2:	ae dc       	rcall	.-1700   	; 0x1e10 <udd_ep_get_job>
    24b4:	fc 01       	movw	r30, r24
    24b6:	80 81       	ld	r24, Z
    24b8:	80 ff       	sbrs	r24, 0
    24ba:	06 c0       	rjmp	.+12     	; 0x24c8 <udd_ep_clear_halt+0x66>
    24bc:	8e 7f       	andi	r24, 0xFE	; 254
    24be:	80 83       	st	Z, r24
    24c0:	07 80       	ldd	r0, Z+7	; 0x07
    24c2:	f0 85       	ldd	r31, Z+8	; 0x08
    24c4:	e0 2d       	mov	r30, r0
    24c6:	09 95       	icall
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	08 95       	ret

000024cc <udd_ep_run>:
    24cc:	7f 92       	push	r7
    24ce:	8f 92       	push	r8
    24d0:	9f 92       	push	r9
    24d2:	af 92       	push	r10
    24d4:	bf 92       	push	r11
    24d6:	cf 92       	push	r12
    24d8:	df 92       	push	r13
    24da:	ef 92       	push	r14
    24dc:	ff 92       	push	r15
    24de:	0f 93       	push	r16
    24e0:	1f 93       	push	r17
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	98 2e       	mov	r9, r24
    24e8:	86 2e       	mov	r8, r22
    24ea:	6a 01       	movw	r12, r20
    24ec:	79 01       	movw	r14, r18
    24ee:	90 dc       	rcall	.-1760   	; 0x1e10 <udd_ep_get_job>
    24f0:	5c 01       	movw	r10, r24
    24f2:	79 2c       	mov	r7, r9
    24f4:	77 1c       	adc	r7, r7
    24f6:	77 24       	eor	r7, r7
    24f8:	77 1c       	adc	r7, r7
    24fa:	c9 2d       	mov	r28, r9
    24fc:	cf 70       	andi	r28, 0x0F	; 15
    24fe:	d0 e0       	ldi	r29, 0x00	; 0
    2500:	cc 0f       	add	r28, r28
    2502:	dd 1f       	adc	r29, r29
    2504:	c7 0d       	add	r28, r7
    2506:	d1 1d       	adc	r29, r1
    2508:	fe 01       	movw	r30, r28
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	ee 0f       	add	r30, r30
    2514:	ff 1f       	adc	r31, r31
    2516:	ec 5f       	subi	r30, 0xFC	; 252
    2518:	fd 4d       	sbci	r31, 0xDD	; 221
    251a:	81 89       	ldd	r24, Z+17	; 0x11
    251c:	80 7c       	andi	r24, 0xC0	; 192
    251e:	09 f4       	brne	.+2      	; 0x2522 <udd_ep_run+0x56>
    2520:	7d c0       	rjmp	.+250    	; 0x261c <udd_ep_run+0x150>
    2522:	fe 01       	movw	r30, r28
    2524:	ee 0f       	add	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	ee 0f       	add	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	ec 5f       	subi	r30, 0xFC	; 252
    2532:	fd 4d       	sbci	r31, 0xDD	; 221
    2534:	81 89       	ldd	r24, Z+17	; 0x11
    2536:	80 7c       	andi	r24, 0xC0	; 192
    2538:	80 3c       	cpi	r24, 0xC0	; 192
    253a:	61 f0       	breq	.+24     	; 0x2554 <udd_ep_run+0x88>
    253c:	fe 01       	movw	r30, r28
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	ec 5f       	subi	r30, 0xFC	; 252
    254c:	fd 4d       	sbci	r31, 0xDD	; 221
    254e:	81 89       	ldd	r24, Z+17	; 0x11
    2550:	82 fd       	sbrc	r24, 2
    2552:	66 c0       	rjmp	.+204    	; 0x2620 <udd_ep_run+0x154>
    2554:	8f b7       	in	r24, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	f5 01       	movw	r30, r10
    255a:	90 81       	ld	r25, Z
    255c:	90 ff       	sbrs	r25, 0
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <udd_ep_run+0x9a>
    2560:	8f bf       	out	0x3f, r24	; 63
    2562:	71 2c       	mov	r7, r1
    2564:	5e c0       	rjmp	.+188    	; 0x2622 <udd_ep_run+0x156>
    2566:	f5 01       	movw	r30, r10
    2568:	90 81       	ld	r25, Z
    256a:	91 60       	ori	r25, 0x01	; 1
    256c:	90 83       	st	Z, r25
    256e:	8f bf       	out	0x3f, r24	; 63
    2570:	c1 82       	std	Z+1, r12	; 0x01
    2572:	d2 82       	std	Z+2, r13	; 0x02
    2574:	e3 82       	std	Z+3, r14	; 0x03
    2576:	f4 82       	std	Z+4, r15	; 0x04
    2578:	15 82       	std	Z+5, r1	; 0x05
    257a:	16 82       	std	Z+6, r1	; 0x06
    257c:	07 83       	std	Z+7, r16	; 0x07
    257e:	10 87       	std	Z+8, r17	; 0x08
    2580:	81 10       	cpse	r8, r1
    2582:	06 c0       	rjmp	.+12     	; 0x2590 <udd_ep_run+0xc4>
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	e1 14       	cp	r14, r1
    2588:	f1 04       	cpc	r15, r1
    258a:	19 f0       	breq	.+6      	; 0x2592 <udd_ep_run+0xc6>
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	01 c0       	rjmp	.+2      	; 0x2592 <udd_ep_run+0xc6>
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	f5 01       	movw	r30, r10
    2594:	80 81       	ld	r24, Z
    2596:	90 fb       	bst	r25, 0
    2598:	81 f9       	bld	r24, 1
    259a:	8b 7f       	andi	r24, 0xFB	; 251
    259c:	80 83       	st	Z, r24
    259e:	77 20       	and	r7, r7
    25a0:	59 f0       	breq	.+22     	; 0x25b8 <udd_ep_run+0xec>
    25a2:	cc 0f       	add	r28, r28
    25a4:	dd 1f       	adc	r29, r29
    25a6:	cc 0f       	add	r28, r28
    25a8:	dd 1f       	adc	r29, r29
    25aa:	cc 0f       	add	r28, r28
    25ac:	dd 1f       	adc	r29, r29
    25ae:	cc 5f       	subi	r28, 0xFC	; 252
    25b0:	dd 4d       	sbci	r29, 0xDD	; 221
    25b2:	1e 8a       	std	Y+22, r1	; 0x16
    25b4:	1f 8a       	std	Y+23, r1	; 0x17
    25b6:	2d c0       	rjmp	.+90     	; 0x2612 <udd_ep_run+0x146>
    25b8:	fe 01       	movw	r30, r28
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	ee 0f       	add	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	ec 5f       	subi	r30, 0xFC	; 252
    25c8:	fd 4d       	sbci	r31, 0xDD	; 221
    25ca:	81 89       	ldd	r24, Z+17	; 0x11
    25cc:	80 7c       	andi	r24, 0xC0	; 192
    25ce:	80 3c       	cpi	r24, 0xC0	; 192
    25d0:	a1 f4       	brne	.+40     	; 0x25fa <udd_ep_run+0x12e>
    25d2:	ce 01       	movw	r24, r28
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	8c 5e       	subi	r24, 0xEC	; 236
    25e2:	9d 4d       	sbci	r25, 0xDD	; 221
    25e4:	ef db       	rcall	.-2082   	; 0x1dc4 <udd_ep_get_size>
    25e6:	bc 01       	movw	r22, r24
    25e8:	c7 01       	movw	r24, r14
    25ea:	60 d2       	rcall	.+1216   	; 0x2aac <__udivmodhi4>
    25ec:	89 2b       	or	r24, r25
    25ee:	29 f0       	breq	.+10     	; 0x25fa <udd_ep_run+0x12e>
    25f0:	f5 01       	movw	r30, r10
    25f2:	80 81       	ld	r24, Z
    25f4:	8e 7f       	andi	r24, 0xFE	; 254
    25f6:	80 83       	st	Z, r24
    25f8:	14 c0       	rjmp	.+40     	; 0x2622 <udd_ep_run+0x156>
    25fa:	cc 0f       	add	r28, r28
    25fc:	dd 1f       	adc	r29, r29
    25fe:	cc 0f       	add	r28, r28
    2600:	dd 1f       	adc	r29, r29
    2602:	cc 0f       	add	r28, r28
    2604:	dd 1f       	adc	r29, r29
    2606:	cc 5f       	subi	r28, 0xFC	; 252
    2608:	dd 4d       	sbci	r29, 0xDD	; 221
    260a:	1a 8a       	std	Y+18, r1	; 0x12
    260c:	1b 8a       	std	Y+19, r1	; 0x13
    260e:	1e 8a       	std	Y+22, r1	; 0x16
    2610:	1f 8a       	std	Y+23, r1	; 0x17
    2612:	89 2d       	mov	r24, r9
    2614:	87 dc       	rcall	.-1778   	; 0x1f24 <udd_ep_trans_complet>
    2616:	77 24       	eor	r7, r7
    2618:	73 94       	inc	r7
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <udd_ep_run+0x156>
    261c:	71 2c       	mov	r7, r1
    261e:	01 c0       	rjmp	.+2      	; 0x2622 <udd_ep_run+0x156>
    2620:	71 2c       	mov	r7, r1
    2622:	87 2d       	mov	r24, r7
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	df 90       	pop	r13
    2632:	cf 90       	pop	r12
    2634:	bf 90       	pop	r11
    2636:	af 90       	pop	r10
    2638:	9f 90       	pop	r9
    263a:	8f 90       	pop	r8
    263c:	7f 90       	pop	r7
    263e:	08 95       	ret

00002640 <udd_ep_abort>:
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	18 2f       	mov	r17, r24
    264c:	f8 2e       	mov	r15, r24
    264e:	ff 1c       	adc	r15, r15
    2650:	ff 24       	eor	r15, r15
    2652:	ff 1c       	adc	r15, r15
    2654:	c8 2f       	mov	r28, r24
    2656:	cf 70       	andi	r28, 0x0F	; 15
    2658:	d0 e0       	ldi	r29, 0x00	; 0
    265a:	cc 0f       	add	r28, r28
    265c:	dd 1f       	adc	r29, r29
    265e:	cf 0d       	add	r28, r15
    2660:	d1 1d       	adc	r29, r1
    2662:	d6 db       	rcall	.-2132   	; 0x1e10 <udd_ep_get_job>
    2664:	dc 01       	movw	r26, r24
    2666:	fe 01       	movw	r30, r28
    2668:	ee 0f       	add	r30, r30
    266a:	ff 1f       	adc	r31, r31
    266c:	ee 0f       	add	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	ee 0f       	add	r30, r30
    2672:	ff 1f       	adc	r31, r31
    2674:	ec 5e       	subi	r30, 0xEC	; 236
    2676:	fd 4d       	sbci	r31, 0xDD	; 221
    2678:	02 e0       	ldi	r16, 0x02	; 2
    267a:	05 93       	las	Z, r16
    267c:	8c 91       	ld	r24, X
    267e:	80 ff       	sbrs	r24, 0
    2680:	22 c0       	rjmp	.+68     	; 0x26c6 <udd_ep_abort+0x86>
    2682:	8e 7f       	andi	r24, 0xFE	; 254
    2684:	8c 93       	st	X, r24
    2686:	17 96       	adiw	r26, 0x07	; 7
    2688:	ed 91       	ld	r30, X+
    268a:	fc 91       	ld	r31, X
    268c:	18 97       	sbiw	r26, 0x08	; 8
    268e:	30 97       	sbiw	r30, 0x00	; 0
    2690:	d1 f0       	breq	.+52     	; 0x26c6 <udd_ep_abort+0x86>
    2692:	ff 20       	and	r15, r15
    2694:	59 f0       	breq	.+22     	; 0x26ac <udd_ep_abort+0x6c>
    2696:	cc 0f       	add	r28, r28
    2698:	dd 1f       	adc	r29, r29
    269a:	cc 0f       	add	r28, r28
    269c:	dd 1f       	adc	r29, r29
    269e:	cc 0f       	add	r28, r28
    26a0:	dd 1f       	adc	r29, r29
    26a2:	cc 5f       	subi	r28, 0xFC	; 252
    26a4:	dd 4d       	sbci	r29, 0xDD	; 221
    26a6:	6e 89       	ldd	r22, Y+22	; 0x16
    26a8:	7f 89       	ldd	r23, Y+23	; 0x17
    26aa:	0a c0       	rjmp	.+20     	; 0x26c0 <udd_ep_abort+0x80>
    26ac:	cc 0f       	add	r28, r28
    26ae:	dd 1f       	adc	r29, r29
    26b0:	cc 0f       	add	r28, r28
    26b2:	dd 1f       	adc	r29, r29
    26b4:	cc 0f       	add	r28, r28
    26b6:	dd 1f       	adc	r29, r29
    26b8:	cc 5f       	subi	r28, 0xFC	; 252
    26ba:	dd 4d       	sbci	r29, 0xDD	; 221
    26bc:	6a 89       	ldd	r22, Y+18	; 0x12
    26be:	7b 89       	ldd	r23, Y+19	; 0x13
    26c0:	41 2f       	mov	r20, r17
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	09 95       	icall
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	ff 90       	pop	r15
    26d0:	08 95       	ret

000026d2 <udd_ep_free>:
    26d2:	cf 93       	push	r28
    26d4:	c8 2f       	mov	r28, r24
    26d6:	b4 df       	rcall	.-152    	; 0x2640 <udd_ep_abort>
    26d8:	ec 2f       	mov	r30, r28
    26da:	ef 70       	andi	r30, 0x0F	; 15
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	ee 0f       	add	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	8c 2f       	mov	r24, r28
    26e4:	cc 0f       	add	r28, r28
    26e6:	99 0b       	sbc	r25, r25
    26e8:	88 27       	eor	r24, r24
    26ea:	99 0f       	add	r25, r25
    26ec:	88 1f       	adc	r24, r24
    26ee:	99 27       	eor	r25, r25
    26f0:	e8 0f       	add	r30, r24
    26f2:	f9 1f       	adc	r31, r25
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	ec 5f       	subi	r30, 0xFC	; 252
    2702:	fd 4d       	sbci	r31, 0xDD	; 221
    2704:	11 8a       	std	Z+17, r1	; 0x11
    2706:	cf 91       	pop	r28
    2708:	08 95       	ret

0000270a <udd_ep_set_halt>:
    270a:	0f 93       	push	r16
    270c:	e8 2f       	mov	r30, r24
    270e:	ef 70       	andi	r30, 0x0F	; 15
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	28 2f       	mov	r18, r24
    2718:	08 2e       	mov	r0, r24
    271a:	00 0c       	add	r0, r0
    271c:	33 0b       	sbc	r19, r19
    271e:	22 27       	eor	r18, r18
    2720:	33 0f       	add	r19, r19
    2722:	22 1f       	adc	r18, r18
    2724:	33 27       	eor	r19, r19
    2726:	e2 0f       	add	r30, r18
    2728:	f3 1f       	adc	r31, r19
    272a:	df 01       	movw	r26, r30
    272c:	aa 0f       	add	r26, r26
    272e:	bb 1f       	adc	r27, r27
    2730:	aa 0f       	add	r26, r26
    2732:	bb 1f       	adc	r27, r27
    2734:	aa 0f       	add	r26, r26
    2736:	bb 1f       	adc	r27, r27
    2738:	ac 5f       	subi	r26, 0xFC	; 252
    273a:	bd 4d       	sbci	r27, 0xDD	; 221
    273c:	51 96       	adiw	r26, 0x11	; 17
    273e:	9c 91       	ld	r25, X
    2740:	51 97       	sbiw	r26, 0x11	; 17
    2742:	94 60       	ori	r25, 0x04	; 4
    2744:	51 96       	adiw	r26, 0x11	; 17
    2746:	9c 93       	st	X, r25
    2748:	ee 0f       	add	r30, r30
    274a:	ff 1f       	adc	r31, r31
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	ec 5e       	subi	r30, 0xEC	; 236
    2756:	fd 4d       	sbci	r31, 0xDD	; 221
    2758:	01 e0       	ldi	r16, 0x01	; 1
    275a:	06 93       	lac	Z, r16
    275c:	71 df       	rcall	.-286    	; 0x2640 <udd_ep_abort>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	0f 91       	pop	r16
    2762:	08 95       	ret

00002764 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2764:	1f 92       	push	r1
    2766:	0f 92       	push	r0
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	0f 92       	push	r0
    276c:	11 24       	eor	r1, r1
    276e:	0f 93       	push	r16
    2770:	2f 93       	push	r18
    2772:	3f 93       	push	r19
    2774:	4f 93       	push	r20
    2776:	5f 93       	push	r21
    2778:	6f 93       	push	r22
    277a:	7f 93       	push	r23
    277c:	8f 93       	push	r24
    277e:	9f 93       	push	r25
    2780:	af 93       	push	r26
    2782:	bf 93       	push	r27
    2784:	ef 93       	push	r30
    2786:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2788:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    278c:	88 23       	and	r24, r24
    278e:	44 f4       	brge	.+16     	; 0x27a0 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2790:	80 e8       	ldi	r24, 0x80	; 128
    2792:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2796:	0e 94 3c 0a 	call	0x1478	; 0x1478 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    279a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    279e:	8a c0       	rjmp	.+276    	; 0x28b4 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    27a0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27a4:	82 ff       	sbrs	r24, 2
    27a6:	20 c0       	rjmp	.+64     	; 0x27e8 <__vector_125+0x84>
		udd_ack_underflow_event();
    27a8:	84 e0       	ldi	r24, 0x04	; 4
    27aa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    27ae:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udd_sram+0x18>
    27b2:	86 ff       	sbrs	r24, 6
    27b4:	7f c0       	rjmp	.+254    	; 0x28b4 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    27b6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    27ba:	81 fd       	sbrc	r24, 1
    27bc:	7b c0       	rjmp	.+246    	; 0x28b4 <__vector_125+0x150>
    27be:	43 db       	rcall	.-2426   	; 0x1e46 <udd_ctrl_interrupt_tc_setup>
    27c0:	81 11       	cpse	r24, r1
    27c2:	78 c0       	rjmp	.+240    	; 0x28b4 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    27c4:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	11 f4       	brne	.+4      	; 0x27d0 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    27cc:	79 da       	rcall	.-2830   	; 0x1cc0 <udd_ctrl_send_zlp_in>
    27ce:	72 c0       	rjmp	.+228    	; 0x28b4 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    27d0:	84 30       	cpi	r24, 0x04	; 4
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <__vector_125+0x72>
    27d4:	6f c0       	rjmp	.+222    	; 0x28b4 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    27d6:	ed e1       	ldi	r30, 0x1D	; 29
    27d8:	f2 e2       	ldi	r31, 0x22	; 34
    27da:	04 e0       	ldi	r16, 0x04	; 4
    27dc:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    27de:	e5 e1       	ldi	r30, 0x15	; 21
    27e0:	f2 e2       	ldi	r31, 0x22	; 34
    27e2:	04 e0       	ldi	r16, 0x04	; 4
    27e4:	05 93       	las	Z, r16
    27e6:	66 c0       	rjmp	.+204    	; 0x28b4 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    27e8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27ec:	81 ff       	sbrs	r24, 1
    27ee:	5d c0       	rjmp	.+186    	; 0x28aa <__vector_125+0x146>
		udd_ack_overflow_event();
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    27f6:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udd_sram+0x10>
    27fa:	86 ff       	sbrs	r24, 6
    27fc:	5b c0       	rjmp	.+182    	; 0x28b4 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    27fe:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2802:	81 fd       	sbrc	r24, 1
    2804:	57 c0       	rjmp	.+174    	; 0x28b4 <__vector_125+0x150>
    2806:	1f db       	rcall	.-2498   	; 0x1e46 <udd_ctrl_interrupt_tc_setup>
    2808:	81 11       	cpse	r24, r1
    280a:	54 c0       	rjmp	.+168    	; 0x28b4 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    280c:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    2810:	82 30       	cpi	r24, 0x02	; 2
    2812:	41 f4       	brne	.+16     	; 0x2824 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2814:	84 e0       	ldi	r24, 0x04	; 4
    2816:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    281a:	e4 e1       	ldi	r30, 0x14	; 20
    281c:	f2 e2       	ldi	r31, 0x22	; 34
    281e:	02 e0       	ldi	r16, 0x02	; 2
    2820:	06 93       	lac	Z, r16
    2822:	48 c0       	rjmp	.+144    	; 0x28b4 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2824:	83 30       	cpi	r24, 0x03	; 3
    2826:	09 f0       	breq	.+2      	; 0x282a <__vector_125+0xc6>
    2828:	45 c0       	rjmp	.+138    	; 0x28b4 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    282a:	ed e1       	ldi	r30, 0x1D	; 29
    282c:	f2 e2       	ldi	r31, 0x22	; 34
    282e:	04 e0       	ldi	r16, 0x04	; 4
    2830:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2832:	e5 e1       	ldi	r30, 0x15	; 21
    2834:	f2 e2       	ldi	r31, 0x22	; 34
    2836:	04 e0       	ldi	r16, 0x04	; 4
    2838:	05 93       	las	Z, r16
    283a:	3c c0       	rjmp	.+120    	; 0x28b4 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    283c:	80 e1       	ldi	r24, 0x10	; 16
    283e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	fd de       	rcall	.-518    	; 0x2640 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2846:	81 e8       	ldi	r24, 0x81	; 129
    2848:	fb de       	rcall	.-522    	; 0x2640 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	f9 de       	rcall	.-526    	; 0x2640 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    284e:	82 e8       	ldi	r24, 0x82	; 130
    2850:	f7 de       	rcall	.-530    	; 0x2640 <udd_ep_abort>
		}
#endif
		udc_reset();
    2852:	0e 94 17 0a 	call	0x142e	; 0x142e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2856:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    285a:	e4 e0       	ldi	r30, 0x04	; 4
    285c:	f2 e2       	ldi	r31, 0x22	; 34
    285e:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2860:	96 e0       	ldi	r25, 0x06	; 6
    2862:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2864:	83 e4       	ldi	r24, 0x43	; 67
    2866:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2868:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    286a:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    286c:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    286e:	8f eb       	ldi	r24, 0xBF	; 191
    2870:	91 e2       	ldi	r25, 0x21	; 33
    2872:	84 8b       	std	Z+20, r24	; 0x14
    2874:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2876:	ef d9       	rcall	.-3106   	; 0x1c56 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2878:	1d c0       	rjmp	.+58     	; 0x28b4 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    287a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    287e:	86 ff       	sbrs	r24, 6
    2880:	08 c0       	rjmp	.+16     	; 0x2892 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2882:	80 e4       	ldi	r24, 0x40	; 64
    2884:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	bc d9       	rcall	.-3208   	; 0x1c04 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    288c:	0e 94 ce 01 	call	0x39c	; 0x39c <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2890:	11 c0       	rjmp	.+34     	; 0x28b4 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2892:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2896:	85 ff       	sbrs	r24, 5
    2898:	0d c0       	rjmp	.+26     	; 0x28b4 <__vector_125+0x150>
		udd_ack_resume_event();
    289a:	80 e2       	ldi	r24, 0x20	; 32
    289c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	b0 d9       	rcall	.-3232   	; 0x1c04 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    28a4:	0e 94 cf 01 	call	0x39e	; 0x39e <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    28aa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28ae:	84 fd       	sbrc	r24, 4
    28b0:	c5 cf       	rjmp	.-118    	; 0x283c <__vector_125+0xd8>
    28b2:	e3 cf       	rjmp	.-58     	; 0x287a <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    28b4:	ff 91       	pop	r31
    28b6:	ef 91       	pop	r30
    28b8:	bf 91       	pop	r27
    28ba:	af 91       	pop	r26
    28bc:	9f 91       	pop	r25
    28be:	8f 91       	pop	r24
    28c0:	7f 91       	pop	r23
    28c2:	6f 91       	pop	r22
    28c4:	5f 91       	pop	r21
    28c6:	4f 91       	pop	r20
    28c8:	3f 91       	pop	r19
    28ca:	2f 91       	pop	r18
    28cc:	0f 91       	pop	r16
    28ce:	0f 90       	pop	r0
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	0f 90       	pop	r0
    28d4:	1f 90       	pop	r1
    28d6:	18 95       	reti

000028d8 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    28d8:	1f 92       	push	r1
    28da:	0f 92       	push	r0
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	0f 92       	push	r0
    28e0:	11 24       	eor	r1, r1
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	2f 93       	push	r18
    28e8:	3f 93       	push	r19
    28ea:	4f 93       	push	r20
    28ec:	5f 93       	push	r21
    28ee:	6f 93       	push	r22
    28f0:	7f 93       	push	r23
    28f2:	8f 93       	push	r24
    28f4:	9f 93       	push	r25
    28f6:	af 93       	push	r26
    28f8:	bf 93       	push	r27
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	ef 93       	push	r30
    2900:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2902:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2906:	81 fd       	sbrc	r24, 1
    2908:	03 c0       	rjmp	.+6      	; 0x2910 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    290a:	9d da       	rcall	.-2758   	; 0x1e46 <udd_ctrl_interrupt_tc_setup>
    290c:	81 11       	cpse	r24, r1
    290e:	b9 c0       	rjmp	.+370    	; 0x2a82 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2916:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    291a:	81 95       	neg	r24
    291c:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    291e:	e4 e1       	ldi	r30, 0x14	; 20
    2920:	f2 e2       	ldi	r31, 0x22	; 34
    2922:	e8 1b       	sub	r30, r24
    2924:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2926:	20 81       	ld	r18, Z
    2928:	31 81       	ldd	r19, Z+1	; 0x01
    292a:	24 51       	subi	r18, 0x14	; 20
    292c:	32 42       	sbci	r19, 0x22	; 34
    292e:	36 95       	lsr	r19
    2930:	27 95       	ror	r18
    2932:	36 95       	lsr	r19
    2934:	27 95       	ror	r18
    2936:	36 95       	lsr	r19
    2938:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    293a:	82 2f       	mov	r24, r18
    293c:	86 95       	lsr	r24
    293e:	20 fd       	sbrc	r18, 0
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <__vector_126+0x6e>
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	01 c0       	rjmp	.+2      	; 0x2948 <__vector_126+0x70>
    2946:	90 e8       	ldi	r25, 0x80	; 128
    2948:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    294a:	e8 2f       	mov	r30, r24
    294c:	ef 70       	andi	r30, 0x0F	; 15
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	ee 0f       	add	r30, r30
    2952:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2954:	28 2f       	mov	r18, r24
    2956:	08 2e       	mov	r0, r24
    2958:	00 0c       	add	r0, r0
    295a:	33 0b       	sbc	r19, r19
    295c:	22 27       	eor	r18, r18
    295e:	33 0f       	add	r19, r19
    2960:	22 1f       	adc	r18, r18
    2962:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2964:	e2 0f       	add	r30, r18
    2966:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2968:	df 01       	movw	r26, r30
    296a:	aa 0f       	add	r26, r26
    296c:	bb 1f       	adc	r27, r27
    296e:	aa 0f       	add	r26, r26
    2970:	bb 1f       	adc	r27, r27
    2972:	aa 0f       	add	r26, r26
    2974:	bb 1f       	adc	r27, r27
    2976:	ac 5e       	subi	r26, 0xEC	; 236
    2978:	bd 4d       	sbci	r27, 0xDD	; 221
    297a:	9c 91       	ld	r25, X
    297c:	95 ff       	sbrs	r25, 5
    297e:	81 c0       	rjmp	.+258    	; 0x2a82 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2980:	fd 01       	movw	r30, r26
    2982:	00 e2       	ldi	r16, 0x20	; 32
    2984:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2986:	81 11       	cpse	r24, r1
    2988:	77 c0       	rjmp	.+238    	; 0x2a78 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    298a:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    298e:	84 30       	cpi	r24, 0x04	; 4
    2990:	19 f4       	brne	.+6      	; 0x2998 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2992:	a4 d9       	rcall	.-3256   	; 0x1cdc <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2994:	60 d9       	rcall	.-3392   	; 0x1c56 <udd_ctrl_init>
    2996:	75 c0       	rjmp	.+234    	; 0x2a82 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2998:	00 91 16 22 	lds	r16, 0x2216	; 0x802216 <udd_sram+0x12>
    299c:	10 91 17 22 	lds	r17, 0x2217	; 0x802217 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    29a0:	80 91 6d 24 	lds	r24, 0x246D	; 0x80246d <udd_g_ctrlreq+0xa>
    29a4:	90 91 6e 24 	lds	r25, 0x246E	; 0x80246e <udd_g_ctrlreq+0xb>
    29a8:	c0 91 ff 21 	lds	r28, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    29ac:	d0 91 00 22 	lds	r29, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    29b0:	9e 01       	movw	r18, r28
    29b2:	20 0f       	add	r18, r16
    29b4:	31 1f       	adc	r19, r17
    29b6:	82 17       	cp	r24, r18
    29b8:	93 07       	cpc	r25, r19
    29ba:	18 f4       	brcc	.+6      	; 0x29c2 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    29bc:	8c 01       	movw	r16, r24
    29be:	0c 1b       	sub	r16, r28
    29c0:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    29c2:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x8>
    29c6:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udd_g_ctrlreq+0x9>
    29ca:	a8 01       	movw	r20, r16
    29cc:	6f eb       	ldi	r22, 0xBF	; 191
    29ce:	71 e2       	ldi	r23, 0x21	; 33
    29d0:	8c 0f       	add	r24, r28
    29d2:	9d 1f       	adc	r25, r29
    29d4:	85 d0       	rcall	.+266    	; 0x2ae0 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    29d6:	c0 0f       	add	r28, r16
    29d8:	d1 1f       	adc	r29, r17
    29da:	c0 93 ff 21 	sts	0x21FF, r28	; 0x8021ff <udd_ctrl_payload_nb_trans>
    29de:	d0 93 00 22 	sts	0x2200, r29	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    29e2:	00 34       	cpi	r16, 0x40	; 64
    29e4:	11 05       	cpc	r17, r1
    29e6:	69 f4       	brne	.+26     	; 0x2a02 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    29e8:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    29ec:	90 91 02 22 	lds	r25, 0x2202	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    29f0:	8c 0f       	add	r24, r28
    29f2:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    29f4:	20 91 69 24 	lds	r18, 0x2469	; 0x802469 <udd_g_ctrlreq+0x6>
    29f8:	30 91 6a 24 	lds	r19, 0x246A	; 0x80246a <udd_g_ctrlreq+0x7>
    29fc:	82 17       	cp	r24, r18
    29fe:	93 07       	cpc	r25, r19
    2a00:	80 f0       	brcs	.+32     	; 0x2a22 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2a02:	e3 e6       	ldi	r30, 0x63	; 99
    2a04:	f4 e2       	ldi	r31, 0x24	; 36
    2a06:	c2 87       	std	Z+10, r28	; 0x0a
    2a08:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2a0a:	06 84       	ldd	r0, Z+14	; 0x0e
    2a0c:	f7 85       	ldd	r31, Z+15	; 0x0f
    2a0e:	e0 2d       	mov	r30, r0
    2a10:	30 97       	sbiw	r30, 0x00	; 0
    2a12:	29 f0       	breq	.+10     	; 0x2a1e <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2a14:	09 95       	icall
    2a16:	81 11       	cpse	r24, r1
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2a1a:	44 d9       	rcall	.-3448   	; 0x1ca4 <udd_ctrl_stall_data>
    2a1c:	32 c0       	rjmp	.+100    	; 0x2a82 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2a1e:	50 d9       	rcall	.-3424   	; 0x1cc0 <udd_ctrl_send_zlp_in>
    2a20:	30 c0       	rjmp	.+96     	; 0x2a82 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2a22:	80 91 6d 24 	lds	r24, 0x246D	; 0x80246d <udd_g_ctrlreq+0xa>
    2a26:	90 91 6e 24 	lds	r25, 0x246E	; 0x80246e <udd_g_ctrlreq+0xb>
    2a2a:	c8 17       	cp	r28, r24
    2a2c:	d9 07       	cpc	r29, r25
    2a2e:	f9 f4       	brne	.+62     	; 0x2a6e <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2a30:	e0 91 71 24 	lds	r30, 0x2471	; 0x802471 <udd_g_ctrlreq+0xe>
    2a34:	f0 91 72 24 	lds	r31, 0x2472	; 0x802472 <udd_g_ctrlreq+0xf>
    2a38:	30 97       	sbiw	r30, 0x00	; 0
    2a3a:	11 f4       	brne	.+4      	; 0x2a40 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2a3c:	33 d9       	rcall	.-3482   	; 0x1ca4 <udd_ctrl_stall_data>
    2a3e:	21 c0       	rjmp	.+66     	; 0x2a82 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2a40:	09 95       	icall
    2a42:	81 11       	cpse	r24, r1
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2a46:	2e d9       	rcall	.-3492   	; 0x1ca4 <udd_ctrl_stall_data>
    2a48:	1c c0       	rjmp	.+56     	; 0x2a82 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2a4a:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    2a4e:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    2a52:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2a56:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    2a5a:	82 0f       	add	r24, r18
    2a5c:	93 1f       	adc	r25, r19
    2a5e:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    2a62:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2a66:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2a6a:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2a6e:	e4 e1       	ldi	r30, 0x14	; 20
    2a70:	f2 e2       	ldi	r31, 0x22	; 34
    2a72:	02 e0       	ldi	r16, 0x02	; 2
    2a74:	06 93       	lac	Z, r16
    2a76:	05 c0       	rjmp	.+10     	; 0x2a82 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2a78:	80 38       	cpi	r24, 0x80	; 128
    2a7a:	11 f4       	brne	.+4      	; 0x2a80 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2a7c:	37 d9       	rcall	.-3474   	; 0x1cec <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2a7e:	01 c0       	rjmp	.+2      	; 0x2a82 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2a80:	51 da       	rcall	.-2910   	; 0x1f24 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2a82:	ff 91       	pop	r31
    2a84:	ef 91       	pop	r30
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	bf 91       	pop	r27
    2a8c:	af 91       	pop	r26
    2a8e:	9f 91       	pop	r25
    2a90:	8f 91       	pop	r24
    2a92:	7f 91       	pop	r23
    2a94:	6f 91       	pop	r22
    2a96:	5f 91       	pop	r21
    2a98:	4f 91       	pop	r20
    2a9a:	3f 91       	pop	r19
    2a9c:	2f 91       	pop	r18
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	0f 90       	pop	r0
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	0f 90       	pop	r0
    2aa8:	1f 90       	pop	r1
    2aaa:	18 95       	reti

00002aac <__udivmodhi4>:
    2aac:	aa 1b       	sub	r26, r26
    2aae:	bb 1b       	sub	r27, r27
    2ab0:	51 e1       	ldi	r21, 0x11	; 17
    2ab2:	07 c0       	rjmp	.+14     	; 0x2ac2 <__udivmodhi4_ep>

00002ab4 <__udivmodhi4_loop>:
    2ab4:	aa 1f       	adc	r26, r26
    2ab6:	bb 1f       	adc	r27, r27
    2ab8:	a6 17       	cp	r26, r22
    2aba:	b7 07       	cpc	r27, r23
    2abc:	10 f0       	brcs	.+4      	; 0x2ac2 <__udivmodhi4_ep>
    2abe:	a6 1b       	sub	r26, r22
    2ac0:	b7 0b       	sbc	r27, r23

00002ac2 <__udivmodhi4_ep>:
    2ac2:	88 1f       	adc	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	5a 95       	dec	r21
    2ac8:	a9 f7       	brne	.-22     	; 0x2ab4 <__udivmodhi4_loop>
    2aca:	80 95       	com	r24
    2acc:	90 95       	com	r25
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	08 95       	ret

00002ad4 <__tablejump2__>:
    2ad4:	ee 0f       	add	r30, r30
    2ad6:	ff 1f       	adc	r31, r31
    2ad8:	05 90       	lpm	r0, Z+
    2ada:	f4 91       	lpm	r31, Z
    2adc:	e0 2d       	mov	r30, r0
    2ade:	09 94       	ijmp

00002ae0 <memcpy>:
    2ae0:	fb 01       	movw	r30, r22
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <memcpy+0xa>
    2ae6:	01 90       	ld	r0, Z+
    2ae8:	0d 92       	st	X+, r0
    2aea:	41 50       	subi	r20, 0x01	; 1
    2aec:	50 40       	sbci	r21, 0x00	; 0
    2aee:	d8 f7       	brcc	.-10     	; 0x2ae6 <memcpy+0x6>
    2af0:	08 95       	ret

00002af2 <_exit>:
    2af2:	f8 94       	cli

00002af4 <__stop_program>:
    2af4:	ff cf       	rjmp	.-2      	; 0x2af4 <__stop_program>
