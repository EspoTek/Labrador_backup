
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00802000  00002b38  00002bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000db0  008020b6  008020b6  00002c82  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f8  00000000  00000000  00002cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b3d9  00000000  00000000  000031f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dc3  00000000  00000000  0000e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000094dd  00000000  00000000  0001038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a9c  00000000  00000000  0001986c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fbe5  00000000  00000000  0001a308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023a8  00000000  00000000  00049eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  0004c298  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bdb9  00000000  00000000  0004c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	34 c1       	rjmp	.+616    	; 0x282 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
      1e:	00 00       	nop
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_24>
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8b c3       	rjmp	.+1814   	; 0x834 <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	55 c7       	rjmp	.+3754   	; 0xff8 <__vector_83>
     14e:	00 00       	nop
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__vector_125>
     1f8:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__vector_126>
     1fc:	b3 0a       	sbc	r11, r19
     1fe:	b7 0a       	sbc	r11, r23
     200:	f3 0a       	sbc	r15, r19
     202:	2f 0b       	sbc	r18, r31
     204:	38 0b       	sbc	r19, r24
     206:	3d 0b       	sbc	r19, r29
     208:	81 0b       	sbc	r24, r17
     20a:	86 0b       	sbc	r24, r22
     20c:	e3 0a       	sbc	r14, r19
     20e:	e5 0a       	sbc	r14, r21
     210:	e7 0a       	sbc	r14, r23
     212:	e9 0a       	sbc	r14, r25
     214:	eb 0a       	sbc	r14, r27
     216:	ed 0a       	sbc	r14, r29
     218:	ef 0a       	sbc	r14, r31
     21a:	f1 0a       	sbc	r15, r17
     21c:	1f 0b       	sbc	r17, r31
     21e:	21 0b       	sbc	r18, r17
     220:	23 0b       	sbc	r18, r19
     222:	25 0b       	sbc	r18, r21
     224:	27 0b       	sbc	r18, r23
     226:	29 0b       	sbc	r18, r25
     228:	2b 0b       	sbc	r18, r27
     22a:	2d 0b       	sbc	r18, r29
     22c:	49 0b       	sbc	r20, r25
     22e:	51 0b       	sbc	r21, r17
     230:	59 0b       	sbc	r21, r25
     232:	64 0b       	sbc	r22, r20
     234:	66 0b       	sbc	r22, r22
     236:	68 0b       	sbc	r22, r24
     238:	70 0b       	sbc	r23, r16
     23a:	78 0b       	sbc	r23, r24
     23c:	fe 0e       	add	r15, r30
     23e:	01 0f       	add	r16, r17
     240:	04 0f       	add	r16, r20
     242:	07 0f       	add	r16, r23
     244:	0a 0f       	add	r16, r26
     246:	0d 0f       	add	r16, r29
     248:	10 0f       	add	r17, r16

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	e8 e3       	ldi	r30, 0x38	; 56
     25e:	fb e2       	ldi	r31, 0x2B	; 43
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a6 3b       	cpi	r26, 0xB6	; 182
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	a6 eb       	ldi	r26, 0xB6	; 182
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a6 36       	cpi	r26, 0x66	; 102
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	c0 d1       	rcall	.+896    	; 0x5fe <main>
     27e:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	89 d2       	rcall	.+1298   	; 0x7a8 <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <tiny_calibration_first_sof>:
     2f4:	e0 e7       	ldi	r30, 0x70	; 112
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	85 81       	ldd	r24, Z+5	; 0x05
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	85 83       	std	Z+5, r24	; 0x05
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	fa e0       	ldi	r31, 0x0A	; 10
     302:	80 ec       	ldi	r24, 0xC0	; 192
     304:	9d e5       	ldi	r25, 0x5D	; 93
     306:	86 a3       	std	Z+38, r24	; 0x26
     308:	97 a3       	std	Z+39, r25	; 0x27
     30a:	80 ee       	ldi	r24, 0xE0	; 224
     30c:	9e e2       	ldi	r25, 0x2E	; 46
     30e:	80 a3       	std	Z+32, r24	; 0x20
     310:	91 a3       	std	Z+33, r25	; 0x21
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
     316:	08 95       	ret

00000318 <tiny_calibration_maintain>:
     318:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     31c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     320:	81 3e       	cpi	r24, 0xE1	; 225
     322:	2e e2       	ldi	r18, 0x2E	; 46
     324:	92 07       	cpc	r25, r18
     326:	20 f0       	brcs	.+8      	; 0x330 <tiny_calibration_maintain+0x18>
     328:	20 91 6a 22 	lds	r18, 0x226A	; 0x80226a <cali_value_negative_gradient>
     32c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     330:	80 3e       	cpi	r24, 0xE0	; 224
     332:	2e e2       	ldi	r18, 0x2E	; 46
     334:	92 07       	cpc	r25, r18
     336:	20 f4       	brcc	.+8      	; 0x340 <tiny_calibration_maintain+0x28>
     338:	20 91 67 22 	lds	r18, 0x2267	; 0x802267 <cali_value_positive_gradient>
     33c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     340:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <warmup>
     344:	22 23       	and	r18, r18
     346:	31 f0       	breq	.+12     	; 0x354 <tiny_calibration_maintain+0x3c>
     348:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <warmup>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <warmup>
     352:	08 95       	ret
     354:	88 5f       	subi	r24, 0xF8	; 248
     356:	9a 42       	sbci	r25, 0x2A	; 42
     358:	81 3d       	cpi	r24, 0xD1	; 209
     35a:	97 40       	sbci	r25, 0x07	; 7
     35c:	c0 f0       	brcs	.+48     	; 0x38e <tiny_calibration_maintain+0x76>
     35e:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <__data_end>
     362:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <outOfRange>
     366:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <outOfRange+0x1>
     36a:	a0 91 b9 20 	lds	r26, 0x20B9	; 0x8020b9 <outOfRange+0x2>
     36e:	b0 91 ba 20 	lds	r27, 0x20BA	; 0x8020ba <outOfRange+0x3>
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	a1 1d       	adc	r26, r1
     376:	b1 1d       	adc	r27, r1
     378:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <outOfRange>
     37c:	90 93 b8 20 	sts	0x20B8, r25	; 0x8020b8 <outOfRange+0x1>
     380:	a0 93 b9 20 	sts	0x20B9, r26	; 0x8020b9 <outOfRange+0x2>
     384:	b0 93 ba 20 	sts	0x20BA, r27	; 0x8020ba <outOfRange+0x3>
     388:	83 e0       	ldi	r24, 0x03	; 3
     38a:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <warmup>
     38e:	08 95       	ret

00000390 <tiny_calibration_safe_add>:
     390:	00 97       	sbiw	r24, 0x00	; 0
     392:	09 f4       	brne	.+2      	; 0x396 <tiny_calibration_safe_add+0x6>
     394:	66 c0       	rjmp	.+204    	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
     396:	0c f0       	brlt	.+2      	; 0x39a <tiny_calibration_safe_add+0xa>
     398:	9c 01       	movw	r18, r24
     39a:	99 23       	and	r25, r25
     39c:	34 f4       	brge	.+12     	; 0x3aa <tiny_calibration_safe_add+0x1a>
     39e:	22 27       	eor	r18, r18
     3a0:	33 27       	eor	r19, r19
     3a2:	28 1b       	sub	r18, r24
     3a4:	39 0b       	sbc	r19, r25
     3a6:	51 e0       	ldi	r21, 0x01	; 1
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <tiny_calibration_safe_add+0x1c>
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	e8 e6       	ldi	r30, 0x68	; 104
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	83 81       	ldd	r24, Z+3	; 0x03
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     3b8:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     3bc:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     3c0:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     3c4:	96 95       	lsr	r25
     3c6:	98 2f       	mov	r25, r24
     3c8:	88 27       	eor	r24, r24
     3ca:	97 95       	ror	r25
     3cc:	87 95       	ror	r24
     3ce:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     3d2:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     3d6:	42 81       	ldd	r20, Z+2	; 0x02
     3d8:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     3dc:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     3e0:	84 0f       	add	r24, r20
     3e2:	91 1d       	adc	r25, r1
     3e4:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     3e8:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     3ec:	00 00       	nop
     3ee:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     3f2:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     3f6:	82 17       	cp	r24, r18
     3f8:	93 07       	cpc	r25, r19
     3fa:	28 f4       	brcc	.+10     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     3fc:	10 92 68 22 	sts	0x2268, r1	; 0x802268 <calTemp>
     400:	10 92 69 22 	sts	0x2269, r1	; 0x802269 <calTemp+0x1>
     404:	08 95       	ret
     406:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     40a:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	81 15       	cp	r24, r1
     414:	90 42       	sbci	r25, 0x20	; 32
     416:	38 f0       	brcs	.+14     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	9f e1       	ldi	r25, 0x1F	; 31
     41c:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     420:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     424:	08 95       	ret
     426:	55 23       	and	r21, r21
     428:	59 f0       	breq	.+22     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     42a:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     42e:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     432:	82 1b       	sub	r24, r18
     434:	93 0b       	sbc	r25, r19
     436:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <calTemp>
     43a:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <calTemp+0x1>
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
     440:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     444:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     448:	28 0f       	add	r18, r24
     44a:	39 1f       	adc	r19, r25
     44c:	20 93 68 22 	sts	0x2268, r18	; 0x802268 <calTemp>
     450:	30 93 69 22 	sts	0x2269, r19	; 0x802269 <calTemp+0x1>
     454:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <calTemp>
     458:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <calTemp+0x1>
     45c:	8f 77       	andi	r24, 0x7F	; 127
     45e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     462:	08 95       	ret

00000464 <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     468:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     46c:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     470:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <last_val>
     474:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <last_val+0x1>
     478:	9e 01       	movw	r18, r28
     47a:	28 1b       	sub	r18, r24
     47c:	39 0b       	sbc	r19, r25
     47e:	20 93 6b 22 	sts	0x226B, r18	; 0x80226b <gradient>
     482:	30 93 6c 22 	sts	0x226C, r19	; 0x80226c <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     486:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <__data_end>
     48a:	81 11       	cpse	r24, r1
     48c:	4d c0       	rjmp	.+154    	; 0x528 <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     48e:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     492:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     496:	8e 3c       	cpi	r24, 0xCE	; 206
     498:	9f 4f       	sbci	r25, 0xFF	; 255
     49a:	e4 f4       	brge	.+56     	; 0x4d4 <tiny_calibration_find_values+0x70>
     49c:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     4a0:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     4a4:	8b 36       	cpi	r24, 0x6B	; 107
     4a6:	9f 4f       	sbci	r25, 0xFF	; 255
     4a8:	ac f0       	brlt	.+42     	; 0x4d4 <tiny_calibration_find_values+0x70>
			if(inarow){
     4aa:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     4ae:	88 23       	and	r24, r24
     4b0:	31 f0       	breq	.+12     	; 0x4be <tiny_calibration_find_values+0x5a>
				inarow--;
     4b2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     4b6:	81 50       	subi	r24, 0x01	; 1
     4b8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     4bc:	35 c0       	rjmp	.+106    	; 0x528 <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     4be:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4c2:	80 93 6a 22 	sts	0x226A, r24	; 0x80226a <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <__data_end>
				inarow = NUM_INAROW;
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     4d2:	2a c0       	rjmp	.+84     	; 0x528 <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     4d4:	8c e0       	ldi	r24, 0x0C	; 12
     4d6:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			calChange = gradient < -150 ? 1 : -1;
     4da:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     4de:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     4e2:	8a 36       	cpi	r24, 0x6A	; 106
     4e4:	9f 4f       	sbci	r25, 0xFF	; 255
     4e6:	1c f0       	brlt	.+6      	; 0x4ee <tiny_calibration_find_values+0x8a>
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	9f ef       	ldi	r25, 0xFF	; 255
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <tiny_calibration_find_values+0x8e>
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	80 93 65 22 	sts	0x2265, r24	; 0x802265 <calChange>
     4f6:	90 93 66 22 	sts	0x2266, r25	; 0x802266 <calChange+0x1>
			calChange -= gradient / 48;
     4fa:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     4fe:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     502:	20 91 65 22 	lds	r18, 0x2265	; 0x802265 <calChange>
     506:	30 91 66 22 	lds	r19, 0x2266	; 0x802266 <calChange+0x1>
     50a:	60 e3       	ldi	r22, 0x30	; 48
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__divmodhi4>
     512:	26 1b       	sub	r18, r22
     514:	37 0b       	sbc	r19, r23
     516:	20 93 65 22 	sts	0x2265, r18	; 0x802265 <calChange>
     51a:	30 93 66 22 	sts	0x2266, r19	; 0x802266 <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     51e:	80 91 65 22 	lds	r24, 0x2265	; 0x802265 <calChange>
     522:	90 91 66 22 	lds	r25, 0x2266	; 0x802266 <calChange+0x1>
     526:	34 df       	rcall	.-408    	; 0x390 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     528:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <__data_end>
     52c:	81 30       	cpi	r24, 0x01	; 1
     52e:	29 f5       	brne	.+74     	; 0x57a <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     530:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     534:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     538:	c3 97       	sbiw	r24, 0x33	; 51
     53a:	94 f0       	brlt	.+36     	; 0x560 <tiny_calibration_find_values+0xfc>
			if(inarow){
     53c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     540:	88 23       	and	r24, r24
     542:	31 f0       	breq	.+12     	; 0x550 <tiny_calibration_find_values+0xec>
				inarow--;
     544:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     548:	81 50       	subi	r24, 0x01	; 1
     54a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     54e:	15 c0       	rjmp	.+42     	; 0x57a <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     550:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     554:	80 93 67 22 	sts	0x2267, r24	; 0x802267 <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <__data_end>
     55e:	0d c0       	rjmp	.+26     	; 0x57a <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     560:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <gradient>
     564:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <gradient+0x1>
     568:	87 39       	cpi	r24, 0x97	; 151
     56a:	91 05       	cpc	r25, r1
     56c:	1c f4       	brge	.+6      	; 0x574 <tiny_calibration_find_values+0x110>
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	02 c0       	rjmp	.+4      	; 0x578 <tiny_calibration_find_values+0x114>
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	9f ef       	ldi	r25, 0xFF	; 255
     578:	0b df       	rcall	.-490    	; 0x390 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     57a:	c0 93 01 20 	sts	0x2001, r28	; 0x802001 <last_val>
     57e:	d0 93 02 20 	sts	0x2002, r29	; 0x802002 <last_val+0x1>
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     588:	e0 e8       	ldi	r30, 0x80	; 128
     58a:	f6 e0       	ldi	r31, 0x06	; 6
     58c:	8f e0       	ldi	r24, 0x0F	; 15
     58e:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	84 83       	std	Z+4, r24	; 0x04
     594:	08 95       	ret

00000596 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     596:	08 95       	ret

00000598 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, iso_callback);
     598:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <usb_state>
     59c:	27 e7       	ldi	r18, 0x77	; 119
     59e:	31 e0       	ldi	r19, 0x01	; 1
     5a0:	42 9f       	mul	r20, r18
     5a2:	c0 01       	movw	r24, r0
     5a4:	43 9f       	mul	r20, r19
     5a6:	90 0d       	add	r25, r0
     5a8:	11 24       	eor	r1, r1
     5aa:	4c ec       	ldi	r20, 0xCC	; 204
     5ac:	52 e0       	ldi	r21, 0x02	; 2
     5ae:	6a ef       	ldi	r22, 0xFA	; 250
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	8e 57       	subi	r24, 0x7E	; 126
     5b4:	99 4d       	sbci	r25, 0xD9	; 217
     5b6:	48 c6       	rjmp	.+3216   	; 0x1248 <udi_vendor_iso_in_run>
     5b8:	08 95       	ret

000005ba <iso_callback2>:
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, iso_callback2);
     5ba:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <usb_state>
     5be:	27 e7       	ldi	r18, 0x77	; 119
     5c0:	31 e0       	ldi	r19, 0x01	; 1
     5c2:	42 9f       	mul	r20, r18
     5c4:	c0 01       	movw	r24, r0
     5c6:	43 9f       	mul	r20, r19
     5c8:	90 0d       	add	r25, r0
     5ca:	11 24       	eor	r1, r1
     5cc:	4d ed       	ldi	r20, 0xDD	; 221
     5ce:	52 e0       	ldi	r21, 0x02	; 2
     5d0:	6a ef       	ldi	r22, 0xFA	; 250
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	84 58       	subi	r24, 0x84	; 132
     5d6:	98 4d       	sbci	r25, 0xD8	; 216
     5d8:	43 c6       	rjmp	.+3206   	; 0x1260 <udi_vendor_iso_in_run2>
     5da:	08 95       	ret

000005dc <iso_callback3>:
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, iso_callback3);
     5dc:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <usb_state>
     5e0:	27 e7       	ldi	r18, 0x77	; 119
     5e2:	31 e0       	ldi	r19, 0x01	; 1
     5e4:	42 9f       	mul	r20, r18
     5e6:	c0 01       	movw	r24, r0
     5e8:	43 9f       	mul	r20, r19
     5ea:	90 0d       	add	r25, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	4e ee       	ldi	r20, 0xEE	; 238
     5f0:	52 e0       	ldi	r21, 0x02	; 2
     5f2:	6a ef       	ldi	r22, 0xFA	; 250
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	8a 58       	subi	r24, 0x8A	; 138
     5f8:	97 4d       	sbci	r25, 0xD7	; 215
     5fa:	3e c6       	rjmp	.+3196   	; 0x1278 <udi_vendor_iso_in_run3>
     5fc:	08 95       	ret

000005fe <main>:
#define CNT_CNT_MAX 256
volatile unsigned short cntCnt[CNT_CNT_MAX];
volatile unsigned short cntCntCnt = 0;

int main(void){
	irq_initialize_vectors();
     5fe:	87 e0       	ldi	r24, 0x07	; 7
     600:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     604:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     606:	3e de       	rcall	.-900    	; 0x284 <tiny_calibration_init>
		
	board_init();
     608:	c6 df       	rcall	.-116    	; 0x596 <board_init>
	udc_start();
     60a:	2d d7       	rcall	.+3674   	; 0x1466 <udc_start>
	tiny_dac_setup();
     60c:	26 d1       	rcall	.+588    	; 0x85a <tiny_dac_setup>
	tiny_dma_setup();
     60e:	49 d1       	rcall	.+658    	; 0x8a2 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	d2 d0       	rcall	.+420    	; 0x7ba <tiny_adc_setup>
	tiny_adc_pid_setup();
     616:	be d0       	rcall	.+380    	; 0x794 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     618:	8c e0       	ldi	r24, 0x0C	; 12
     61a:	b2 d0       	rcall	.+356    	; 0x780 <tiny_adc_ch1setup>
	tiny_timer_setup();
     61c:	ab d4       	rcall	.+2390   	; 0xf74 <tiny_timer_setup>
	tiny_uart_setup();
     61e:	66 d5       	rcall	.+2764   	; 0x10ec <tiny_uart_setup>
	tiny_spi_setup();
     620:	7d d5       	rcall	.+2810   	; 0x111c <tiny_spi_setup>
	tiny_dig_setup();
     622:	b2 df       	rcall	.-156    	; 0x588 <tiny_dig_setup>
     624:	80 91 6e 22 	lds	r24, 0x226E	; 0x80226e <debug_counter>
     628:	90 91 6f 22 	lds	r25, 0x226F	; 0x80226f <debug_counter+0x1>
     62c:	a0 91 70 22 	lds	r26, 0x2270	; 0x802270 <debug_counter+0x2>
     630:	b0 91 71 22 	lds	r27, 0x2271	; 0x802271 <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	21 ee       	ldi	r18, 0xE1	; 225
     63e:	92 07       	cpc	r25, r18
     640:	25 ef       	ldi	r18, 0xF5	; 245
     642:	a2 07       	cpc	r26, r18
     644:	25 e0       	ldi	r18, 0x05	; 5
     646:	b2 07       	cpc	r27, r18
     648:	18 f0       	brcs	.+6      	; 0x650 <main+0x52>
			debug_counter = 0;
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     66c:	e3 cf       	rjmp	.-58     	; 0x634 <main+0x36>

0000066e <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     66e:	08 95       	ret

00000670 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     670:	08 95       	ret

00000672 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	if(firstFrame){
     672:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <firstFrame>
     676:	88 23       	and	r24, r24
     678:	39 f0       	breq	.+14     	; 0x688 <main_sof_action+0x16>
		tiny_calibration_first_sof();
     67a:	3c de       	rcall	.-904    	; 0x2f4 <tiny_calibration_first_sof>
		firstFrame = 0;
     67c:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <firstFrame>
		tcinit = 1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <tcinit>
		return;
     686:	08 95       	ret
	}
	else{
		if(tcinit){
     688:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <tcinit>
     68c:	88 23       	and	r24, r24
     68e:	c1 f1       	breq	.+112    	; 0x700 <main_sof_action+0x8e>
			if(calibration_values_found == 0x03) tiny_calibration_maintain(); else tiny_calibration_find_values();
     690:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <__data_end>
     694:	83 30       	cpi	r24, 0x03	; 3
     696:	11 f4       	brne	.+4      	; 0x69c <main_sof_action+0x2a>
     698:	3f de       	rcall	.-898    	; 0x318 <tiny_calibration_maintain>
     69a:	01 c0       	rjmp	.+2      	; 0x69e <main_sof_action+0x2c>
     69c:	e3 de       	rcall	.-570    	; 0x464 <tiny_calibration_find_values>
			cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     69e:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <cntCntCnt>
     6a2:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <cntCntCnt+0x1>
     6a6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     6aa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e2 5a       	subi	r30, 0xA2	; 162
     6b4:	f3 4d       	sbci	r31, 0xD3	; 211
     6b6:	80 83       	st	Z, r24
     6b8:	91 83       	std	Z+1, r25	; 0x01
			if(cntCntCnt == (CNT_CNT_MAX - 1)){
     6ba:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <cntCntCnt>
     6be:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <cntCntCnt+0x1>
     6c2:	8f 3f       	cpi	r24, 0xFF	; 255
     6c4:	91 05       	cpc	r25, r1
     6c6:	99 f4       	brne	.+38     	; 0x6ee <main_sof_action+0x7c>
				cntCntCnt = 0;
     6c8:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <cntCntCnt>
     6cc:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <cntCntCnt+0x1>
				if(debugOnNextEnd){
     6d0:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <debugOnNextEnd>
     6d4:	88 23       	and	r24, r24
     6d6:	a1 f0       	breq	.+40     	; 0x700 <main_sof_action+0x8e>
					currentTrfcnt = DMA.CH0.TRFCNT;
     6d8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     6dc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     6e0:	80 93 5e 2e 	sts	0x2E5E, r24	; 0x802e5e <currentTrfcnt>
     6e4:	90 93 5f 2e 	sts	0x2E5F, r25	; 0x802e5f <currentTrfcnt+0x1>
					debugOnNextEnd = 0;
     6e8:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <debugOnNextEnd>
     6ec:	09 c0       	rjmp	.+18     	; 0x700 <main_sof_action+0x8e>
				}
			}
			else cntCntCnt++;
     6ee:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <cntCntCnt>
     6f2:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <cntCntCnt+0x1>
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <cntCntCnt>
     6fc:	90 93 bc 20 	sts	0x20BC, r25	; 0x8020bc <cntCntCnt+0x1>
		}
	}
	usb_state = !usb_state;
     700:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <usb_state>
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	91 11       	cpse	r25, r1
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <usb_state>
     70e:	08 95       	ret

00000710 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <main_b_vendor_enable>
	firstFrame = 1;
     716:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     71a:	4c ec       	ldi	r20, 0xCC	; 204
     71c:	52 e0       	ldi	r21, 0x02	; 2
     71e:	6e ee       	ldi	r22, 0xEE	; 238
     720:	72 e0       	ldi	r23, 0x02	; 2
     722:	82 e8       	ldi	r24, 0x82	; 130
     724:	96 e2       	ldi	r25, 0x26	; 38
     726:	90 d5       	rcall	.+2848   	; 0x1248 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     728:	4d ed       	ldi	r20, 0xDD	; 221
     72a:	52 e0       	ldi	r21, 0x02	; 2
     72c:	6e ee       	ldi	r22, 0xEE	; 238
     72e:	72 e0       	ldi	r23, 0x02	; 2
     730:	8c e7       	ldi	r24, 0x7C	; 124
     732:	97 e2       	ldi	r25, 0x27	; 39
     734:	95 d5       	rcall	.+2858   	; 0x1260 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     736:	4e ee       	ldi	r20, 0xEE	; 238
     738:	52 e0       	ldi	r21, 0x02	; 2
     73a:	6e ee       	ldi	r22, 0xEE	; 238
     73c:	72 e0       	ldi	r23, 0x02	; 2
     73e:	86 e7       	ldi	r24, 0x76	; 118
     740:	98 e2       	ldi	r25, 0x28	; 40
     742:	9a d5       	rcall	.+2868   	; 0x1278 <udi_vendor_iso_in_run3>
	return true;
}
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	08 95       	ret

00000748 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     748:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <main_b_vendor_enable>
     74c:	08 95       	ret

0000074e <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	08 95       	ret

00000752 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	08 95       	ret

00000756 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     756:	e0 e0       	ldi	r30, 0x00	; 0
     758:	f2 e0       	ldi	r31, 0x02	; 2
     75a:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     75c:	98 2f       	mov	r25, r24
     75e:	9c 71       	andi	r25, 0x1C	; 28
     760:	93 68       	ori	r25, 0x83	; 131
     762:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     764:	88 23       	and	r24, r24
     766:	1c f4       	brge	.+6      	; 0x76e <tiny_adc_ch0setup+0x18>
     768:	90 e1       	ldi	r25, 0x10	; 16
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	02 c0       	rjmp	.+4      	; 0x772 <tiny_adc_ch0setup+0x1c>
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	89 2b       	or	r24, r25
     774:	e0 e0       	ldi	r30, 0x00	; 0
     776:	f2 e0       	ldi	r31, 0x02	; 2
     778:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     77a:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     77c:	16 a2       	std	Z+38, r1	; 0x26
     77e:	08 95       	ret

00000780 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     780:	e0 e0       	ldi	r30, 0x00	; 0
     782:	f2 e0       	ldi	r31, 0x02	; 2
     784:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     786:	83 68       	ori	r24, 0x83	; 131
     788:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     78a:	80 e1       	ldi	r24, 0x10	; 16
     78c:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     78e:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     790:	16 aa       	std	Z+54, r1	; 0x36
     792:	08 95       	ret

00000794 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     794:	e0 e0       	ldi	r30, 0x00	; 0
     796:	f2 e0       	ldi	r31, 0x02	; 2
     798:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     79a:	83 e8       	ldi	r24, 0x83	; 131
     79c:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     79e:	8f e2       	ldi	r24, 0x2F	; 47
     7a0:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     7a2:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     7a4:	16 a6       	std	Z+46, r1	; 0x2e
     7a6:	08 95       	ret

000007a8 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     7a8:	aa ec       	ldi	r26, 0xCA	; 202
     7aa:	b1 e0       	ldi	r27, 0x01	; 1
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     7b0:	e8 2f       	mov	r30, r24
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     7b6:	1c 92       	st	X, r1

	return( result );
}
     7b8:	08 95       	ret

000007ba <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     7be:	e0 e7       	ldi	r30, 0x70	; 112
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	91 81       	ldd	r25, Z+1	; 0x01
     7c4:	9d 7f       	andi	r25, 0xFD	; 253
     7c6:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     7c8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     7cc:	62 30       	cpi	r22, 0x02	; 2
     7ce:	31 f1       	breq	.+76     	; 0x81c <tiny_adc_setup+0x62>
     7d0:	e0 e0       	ldi	r30, 0x00	; 0
     7d2:	f2 e0       	ldi	r31, 0x02	; 2
     7d4:	9c e1       	ldi	r25, 0x1C	; 28
     7d6:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     7d8:	90 e4       	ldi	r25, 0x40	; 64
     7da:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     7dc:	81 11       	cpse	r24, r1
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <tiny_adc_setup+0x2a>
     7e0:	80 e4       	ldi	r24, 0x40	; 64
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <tiny_adc_setup+0x2c>
     7e4:	80 ec       	ldi	r24, 0xC0	; 192
     7e6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     7ea:	61 30       	cpi	r22, 0x01	; 1
     7ec:	11 f0       	breq	.+4      	; 0x7f2 <tiny_adc_setup+0x38>
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <tiny_adc_setup+0x3a>
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	c0 e0       	ldi	r28, 0x00	; 0
     7f6:	d2 e0       	ldi	r29, 0x02	; 2
     7f8:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	d5 df       	rcall	.-86     	; 0x7a8 <ReadCalibrationByte>
     7fe:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     800:	81 e2       	ldi	r24, 0x21	; 33
     802:	d2 df       	rcall	.-92     	; 0x7a8 <ReadCalibrationByte>
     804:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     806:	18 8e       	std	Y+24, r1	; 0x18
     808:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     80e:	c2 df       	rcall	.-124    	; 0x794 <tiny_adc_pid_setup>
     810:	0e c0       	rjmp	.+28     	; 0x82e <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     812:	80 ec       	ldi	r24, 0xC0	; 192
     814:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	ec cf       	rjmp	.-40     	; 0x7f4 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     81c:	e0 e0       	ldi	r30, 0x00	; 0
     81e:	f2 e0       	ldi	r31, 0x02	; 2
     820:	9e e1       	ldi	r25, 0x1E	; 30
     822:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     824:	90 e4       	ldi	r25, 0x40	; 64
     826:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     828:	81 11       	cpse	r24, r1
     82a:	f3 cf       	rjmp	.-26     	; 0x812 <tiny_adc_setup+0x58>
     82c:	d9 cf       	rjmp	.-78     	; 0x7e0 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	8f 93       	push	r24
	ADCA.CH0.INTFLAGS = 0x01;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
     84e:	8f 91       	pop	r24
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     85e:	e0 e7       	ldi	r30, 0x70	; 112
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	8b 7f       	andi	r24, 0xFB	; 251
     866:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     868:	c0 e2       	ldi	r28, 0x20	; 32
     86a:	d3 e0       	ldi	r29, 0x03	; 3
     86c:	8d e0       	ldi	r24, 0x0D	; 13
     86e:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     870:	80 e4       	ldi	r24, 0x40	; 64
     872:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     874:	89 e0       	ldi	r24, 0x09	; 9
     876:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     878:	83 e3       	ldi	r24, 0x33	; 51
     87a:	96 df       	rcall	.-212    	; 0x7a8 <ReadCalibrationByte>
     87c:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     87e:	82 e3       	ldi	r24, 0x32	; 50
     880:	93 df       	rcall	.-218    	; 0x7a8 <ReadCalibrationByte>
     882:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     884:	87 e3       	ldi	r24, 0x37	; 55
     886:	90 df       	rcall	.-224    	; 0x7a8 <ReadCalibrationByte>
     888:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     88a:	86 e3       	ldi	r24, 0x36	; 54
     88c:	8d df       	rcall	.-230    	; 0x7a8 <ReadCalibrationByte>
     88e:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     890:	e0 e2       	ldi	r30, 0x20	; 32
     892:	f6 e0       	ldi	r31, 0x06	; 6
     894:	80 81       	ld	r24, Z
     896:	83 60       	ori	r24, 0x03	; 3
     898:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     89a:	14 82       	std	Z+4, r1	; 0x04
	
	

     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <tiny_dma_setup>:
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
	
}

void tiny_dma_loop_mode_6(void){
     8a2:	e0 e7       	ldi	r30, 0x70	; 112
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	8e 7f       	andi	r24, 0xFE	; 254
     8aa:	80 83       	st	Z, r24
     8ac:	83 e8       	ldi	r24, 0x83	; 131
     8ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     8b2:	08 95       	ret

000008b4 <tiny_dma_flush>:
     8b4:	e0 e0       	ldi	r30, 0x00	; 0
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	10 8a       	std	Z+16, r1	; 0x10
     8ba:	80 e4       	ldi	r24, 0x40	; 64
     8bc:	80 8b       	std	Z+16, r24	; 0x10
     8be:	10 a2       	std	Z+32, r1	; 0x20
     8c0:	80 a3       	std	Z+32, r24	; 0x20
     8c2:	10 aa       	std	Z+48, r1	; 0x30
     8c4:	80 ab       	std	Z+48, r24	; 0x30
     8c6:	e0 e4       	ldi	r30, 0x40	; 64
     8c8:	f1 e0       	ldi	r31, 0x01	; 1
     8ca:	10 82       	st	Z, r1
     8cc:	80 83       	st	Z, r24
     8ce:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <b1_state>
     8d2:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <b2_state>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <usb_state>
     8dc:	08 95       	ret

000008de <tiny_dma_set_mode_0>:
     8de:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <global_mode>
     8e2:	e8 df       	rcall	.-48     	; 0x8b4 <tiny_dma_flush>
     8e4:	e0 e0       	ldi	r30, 0x00	; 0
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	16 aa       	std	Z+54, r1	; 0x36
     8ea:	84 e2       	ldi	r24, 0x24	; 36
     8ec:	80 ab       	std	Z+48, r24	; 0x30
     8ee:	11 aa       	std	Z+49, r1	; 0x31
     8f0:	49 e5       	ldi	r20, 0x59	; 89
     8f2:	42 ab       	std	Z+50, r20	; 0x32
     8f4:	32 e0       	ldi	r19, 0x02	; 2
     8f6:	33 ab       	std	Z+51, r19	; 0x33
     8f8:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <auxDacBufLen>
     8fc:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     900:	64 ab       	std	Z+52, r22	; 0x34
     902:	75 ab       	std	Z+53, r23	; 0x35
     904:	62 e8       	ldi	r22, 0x82	; 130
     906:	74 e2       	ldi	r23, 0x24	; 36
     908:	60 af       	std	Z+56, r22	; 0x38
     90a:	71 af       	std	Z+57, r23	; 0x39
     90c:	12 ae       	std	Z+58, r1	; 0x3a
     90e:	9b e3       	ldi	r25, 0x3B	; 59
     910:	94 af       	std	Z+60, r25	; 0x3c
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     918:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     91c:	20 a9       	ldd	r18, Z+48	; 0x30
     91e:	20 68       	ori	r18, 0x80	; 128
     920:	20 ab       	std	Z+48, r18	; 0x30
     922:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     926:	a0 e4       	ldi	r26, 0x40	; 64
     928:	b1 e0       	ldi	r27, 0x01	; 1
     92a:	8c 93       	st	X, r24
     92c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     930:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     934:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     938:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     93c:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     940:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     944:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     948:	42 e7       	ldi	r20, 0x72	; 114
     94a:	52 e2       	ldi	r21, 0x22	; 34
     94c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     950:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     954:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     958:	29 e3       	ldi	r18, 0x39	; 57
     95a:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     95e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     962:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     966:	9c 91       	ld	r25, X
     968:	90 68       	ori	r25, 0x80	; 128
     96a:	9c 93       	st	X, r25
     96c:	10 8a       	std	Z+16, r1	; 0x10
     96e:	90 e4       	ldi	r25, 0x40	; 64
     970:	90 8b       	std	Z+16, r25	; 0x10
     972:	80 8b       	std	Z+16, r24	; 0x10
     974:	11 8a       	std	Z+17, r1	; 0x11
     976:	95 e9       	ldi	r25, 0x95	; 149
     978:	92 8b       	std	Z+18, r25	; 0x12
     97a:	90 e1       	ldi	r25, 0x10	; 16
     97c:	93 8b       	std	Z+19, r25	; 0x13
     97e:	4e ee       	ldi	r20, 0xEE	; 238
     980:	52 e0       	ldi	r21, 0x02	; 2
     982:	44 8b       	std	Z+20, r20	; 0x14
     984:	55 8b       	std	Z+21, r21	; 0x15
     986:	80 8f       	std	Z+24, r24	; 0x18
     988:	31 8f       	std	Z+25, r19	; 0x19
     98a:	12 8e       	std	Z+26, r1	; 0x1a
     98c:	82 e8       	ldi	r24, 0x82	; 130
     98e:	96 e2       	ldi	r25, 0x26	; 38
     990:	84 8f       	std	Z+28, r24	; 0x1c
     992:	95 8f       	std	Z+29, r25	; 0x1d
     994:	16 8e       	std	Z+30, r1	; 0x1e
     996:	80 89       	ldd	r24, Z+16	; 0x10
     998:	80 68       	ori	r24, 0x80	; 128
     99a:	80 8b       	std	Z+16, r24	; 0x10
     99c:	08 95       	ret

0000099e <tiny_dma_set_mode_1>:
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_mode>
     9a8:	85 df       	rcall	.-246    	; 0x8b4 <tiny_dma_flush>
     9aa:	e0 e0       	ldi	r30, 0x00	; 0
     9ac:	f1 e0       	ldi	r31, 0x01	; 1
     9ae:	10 aa       	std	Z+48, r1	; 0x30
     9b0:	80 e4       	ldi	r24, 0x40	; 64
     9b2:	80 ab       	std	Z+48, r24	; 0x30
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	90 ab       	std	Z+48, r25	; 0x30
     9b8:	11 aa       	std	Z+49, r1	; 0x31
     9ba:	12 aa       	std	Z+50, r1	; 0x32
     9bc:	5b e4       	ldi	r21, 0x4B	; 75
     9be:	53 ab       	std	Z+51, r21	; 0x33
     9c0:	14 aa       	std	Z+52, r1	; 0x34
     9c2:	15 aa       	std	Z+53, r1	; 0x35
     9c4:	16 aa       	std	Z+54, r1	; 0x36
     9c6:	25 e0       	ldi	r18, 0x05	; 5
     9c8:	30 e2       	ldi	r19, 0x20	; 32
     9ca:	20 af       	std	Z+56, r18	; 0x38
     9cc:	31 af       	std	Z+57, r19	; 0x39
     9ce:	12 ae       	std	Z+58, r1	; 0x3a
     9d0:	40 ea       	ldi	r20, 0xA0	; 160
     9d2:	44 af       	std	Z+60, r20	; 0x3c
     9d4:	38 e0       	ldi	r19, 0x08	; 8
     9d6:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     9da:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     9de:	80 a9       	ldd	r24, Z+48	; 0x30
     9e0:	80 6a       	ori	r24, 0xA0	; 160
     9e2:	80 ab       	std	Z+48, r24	; 0x30
     9e4:	85 e5       	ldi	r24, 0x55	; 85
     9e6:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     9ea:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     9ee:	a0 e4       	ldi	r26, 0x40	; 64
     9f0:	b1 e0       	ldi	r27, 0x01	; 1
     9f2:	d4 e2       	ldi	r29, 0x24	; 36
     9f4:	dc 93       	st	X, r29
     9f6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     9fa:	89 e5       	ldi	r24, 0x59	; 89
     9fc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     a00:	c2 e0       	ldi	r28, 0x02	; 2
     a02:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     a06:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <auxDacBufLen>
     a0a:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     a0e:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a12:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     a16:	62 e8       	ldi	r22, 0x82	; 130
     a18:	74 e2       	ldi	r23, 0x24	; 36
     a1a:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a1e:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a22:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     a26:	8b e3       	ldi	r24, 0x3B	; 59
     a28:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a32:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     a36:	2c 91       	ld	r18, X
     a38:	20 68       	ori	r18, 0x80	; 128
     a3a:	2c 93       	st	X, r18
     a3c:	90 8b       	std	Z+16, r25	; 0x10
     a3e:	81 8b       	std	Z+17, r24	; 0x11
     a40:	a1 e9       	ldi	r26, 0x91	; 145
     a42:	a2 8b       	std	Z+18, r26	; 0x12
     a44:	20 e1       	ldi	r18, 0x10	; 16
     a46:	23 8b       	std	Z+19, r18	; 0x13
     a48:	67 e7       	ldi	r22, 0x77	; 119
     a4a:	71 e0       	ldi	r23, 0x01	; 1
     a4c:	64 8b       	std	Z+20, r22	; 0x14
     a4e:	75 8b       	std	Z+21, r23	; 0x15
     a50:	d0 8f       	std	Z+24, r29	; 0x18
     a52:	c1 8f       	std	Z+25, r28	; 0x19
     a54:	12 8e       	std	Z+26, r1	; 0x1a
     a56:	c2 e8       	ldi	r28, 0x82	; 130
     a58:	d6 e2       	ldi	r29, 0x26	; 38
     a5a:	c4 8f       	std	Z+28, r28	; 0x1c
     a5c:	d5 8f       	std	Z+29, r29	; 0x1d
     a5e:	16 8e       	std	Z+30, r1	; 0x1e
     a60:	20 89       	ldd	r18, Z+16	; 0x10
     a62:	20 68       	ori	r18, 0x80	; 128
     a64:	20 8b       	std	Z+16, r18	; 0x10
     a66:	90 a3       	std	Z+32, r25	; 0x20
     a68:	81 a3       	std	Z+33, r24	; 0x21
     a6a:	a2 a3       	std	Z+34, r26	; 0x22
     a6c:	53 a3       	std	Z+35, r21	; 0x23
     a6e:	64 a3       	std	Z+36, r22	; 0x24
     a70:	75 a3       	std	Z+37, r23	; 0x25
     a72:	40 a7       	std	Z+40, r20	; 0x28
     a74:	31 a7       	std	Z+41, r19	; 0x29
     a76:	12 a6       	std	Z+42, r1	; 0x2a
     a78:	89 ef       	ldi	r24, 0xF9	; 249
     a7a:	97 e2       	ldi	r25, 0x27	; 39
     a7c:	84 a7       	std	Z+44, r24	; 0x2c
     a7e:	95 a7       	std	Z+45, r25	; 0x2d
     a80:	16 a6       	std	Z+46, r1	; 0x2e
     a82:	80 a1       	ldd	r24, Z+32	; 0x20
     a84:	80 68       	ori	r24, 0x80	; 128
     a86:	80 a3       	std	Z+32, r24	; 0x20
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <tiny_dma_set_mode_2>:
     a8e:	cf 93       	push	r28
     a90:	f8 94       	cli
     a92:	c2 e0       	ldi	r28, 0x02	; 2
     a94:	c0 93 04 20 	sts	0x2004, r28	; 0x802004 <global_mode>
     a98:	0d df       	rcall	.-486    	; 0x8b4 <tiny_dma_flush>
     a9a:	e0 e0       	ldi	r30, 0x00	; 0
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	16 aa       	std	Z+54, r1	; 0x36
     aa0:	94 e2       	ldi	r25, 0x24	; 36
     aa2:	90 ab       	std	Z+48, r25	; 0x30
     aa4:	11 aa       	std	Z+49, r1	; 0x31
     aa6:	39 e5       	ldi	r19, 0x59	; 89
     aa8:	32 ab       	std	Z+50, r19	; 0x32
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	83 ab       	std	Z+51, r24	; 0x33
     aae:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     ab2:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     ab6:	44 ab       	std	Z+52, r20	; 0x34
     ab8:	55 ab       	std	Z+53, r21	; 0x35
     aba:	42 e7       	ldi	r20, 0x72	; 114
     abc:	52 e2       	ldi	r21, 0x22	; 34
     abe:	40 af       	std	Z+56, r20	; 0x38
     ac0:	51 af       	std	Z+57, r21	; 0x39
     ac2:	12 ae       	std	Z+58, r1	; 0x3a
     ac4:	29 e3       	ldi	r18, 0x39	; 57
     ac6:	24 af       	std	Z+60, r18	; 0x3c
     ac8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     acc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ad0:	20 a9       	ldd	r18, Z+48	; 0x30
     ad2:	20 68       	ori	r18, 0x80	; 128
     ad4:	20 ab       	std	Z+48, r18	; 0x30
     ad6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ada:	a0 e4       	ldi	r26, 0x40	; 64
     adc:	b1 e0       	ldi	r27, 0x01	; 1
     ade:	9c 93       	st	X, r25
     ae0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ae4:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ae8:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     aec:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <auxDacBufLen>
     af0:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     af4:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     af8:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     afc:	22 e8       	ldi	r18, 0x82	; 130
     afe:	34 e2       	ldi	r19, 0x24	; 36
     b00:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b04:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b08:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b0c:	2b e3       	ldi	r18, 0x3B	; 59
     b0e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b12:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b16:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b1a:	2c 91       	ld	r18, X
     b1c:	20 68       	ori	r18, 0x80	; 128
     b1e:	2c 93       	st	X, r18
     b20:	54 e0       	ldi	r21, 0x04	; 4
     b22:	50 8b       	std	Z+16, r21	; 0x10
     b24:	81 8b       	std	Z+17, r24	; 0x11
     b26:	41 e9       	ldi	r20, 0x91	; 145
     b28:	42 8b       	std	Z+18, r20	; 0x12
     b2a:	20 e1       	ldi	r18, 0x10	; 16
     b2c:	23 8b       	std	Z+19, r18	; 0x13
     b2e:	27 e7       	ldi	r18, 0x77	; 119
     b30:	31 e0       	ldi	r19, 0x01	; 1
     b32:	24 8b       	std	Z+20, r18	; 0x14
     b34:	35 8b       	std	Z+21, r19	; 0x15
     b36:	90 8f       	std	Z+24, r25	; 0x18
     b38:	c1 8f       	std	Z+25, r28	; 0x19
     b3a:	12 8e       	std	Z+26, r1	; 0x1a
     b3c:	62 e8       	ldi	r22, 0x82	; 130
     b3e:	76 e2       	ldi	r23, 0x26	; 38
     b40:	64 8f       	std	Z+28, r22	; 0x1c
     b42:	75 8f       	std	Z+29, r23	; 0x1d
     b44:	16 8e       	std	Z+30, r1	; 0x1e
     b46:	90 89       	ldd	r25, Z+16	; 0x10
     b48:	90 68       	ori	r25, 0x80	; 128
     b4a:	90 8b       	std	Z+16, r25	; 0x10
     b4c:	50 a3       	std	Z+32, r21	; 0x20
     b4e:	81 a3       	std	Z+33, r24	; 0x21
     b50:	42 a3       	std	Z+34, r20	; 0x22
     b52:	82 e1       	ldi	r24, 0x12	; 18
     b54:	83 a3       	std	Z+35, r24	; 0x23
     b56:	24 a3       	std	Z+36, r18	; 0x24
     b58:	35 a3       	std	Z+37, r19	; 0x25
     b5a:	84 e3       	ldi	r24, 0x34	; 52
     b5c:	80 a7       	std	Z+40, r24	; 0x28
     b5e:	c1 a7       	std	Z+41, r28	; 0x29
     b60:	12 a6       	std	Z+42, r1	; 0x2a
     b62:	89 ef       	ldi	r24, 0xF9	; 249
     b64:	97 e2       	ldi	r25, 0x27	; 39
     b66:	84 a7       	std	Z+44, r24	; 0x2c
     b68:	95 a7       	std	Z+45, r25	; 0x2d
     b6a:	16 a6       	std	Z+46, r1	; 0x2e
     b6c:	80 a1       	ldd	r24, Z+32	; 0x20
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	80 a3       	std	Z+32, r24	; 0x20
     b72:	78 94       	sei
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <tiny_dma_set_mode_3>:
     b78:	cf 93       	push	r28
     b7a:	c3 e0       	ldi	r28, 0x03	; 3
     b7c:	c0 93 04 20 	sts	0x2004, r28	; 0x802004 <global_mode>
     b80:	99 de       	rcall	.-718    	; 0x8b4 <tiny_dma_flush>
     b82:	e0 e0       	ldi	r30, 0x00	; 0
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	10 a2       	std	Z+32, r1	; 0x20
     b88:	50 e4       	ldi	r21, 0x40	; 64
     b8a:	50 a3       	std	Z+32, r21	; 0x20
     b8c:	44 e0       	ldi	r20, 0x04	; 4
     b8e:	40 a3       	std	Z+32, r20	; 0x20
     b90:	11 a2       	std	Z+33, r1	; 0x21
     b92:	12 a2       	std	Z+34, r1	; 0x22
     b94:	3b e4       	ldi	r19, 0x4B	; 75
     b96:	33 a3       	std	Z+35, r19	; 0x23
     b98:	14 a2       	std	Z+36, r1	; 0x24
     b9a:	15 a2       	std	Z+37, r1	; 0x25
     b9c:	16 a2       	std	Z+38, r1	; 0x26
     b9e:	85 e0       	ldi	r24, 0x05	; 5
     ba0:	90 e2       	ldi	r25, 0x20	; 32
     ba2:	80 a7       	std	Z+40, r24	; 0x28
     ba4:	91 a7       	std	Z+41, r25	; 0x29
     ba6:	12 a6       	std	Z+42, r1	; 0x2a
     ba8:	20 ea       	ldi	r18, 0xA0	; 160
     baa:	24 a7       	std	Z+44, r18	; 0x2c
     bac:	98 e0       	ldi	r25, 0x08	; 8
     bae:	95 a7       	std	Z+45, r25	; 0x2d
     bb0:	16 a6       	std	Z+46, r1	; 0x2e
     bb2:	80 a1       	ldd	r24, Z+32	; 0x20
     bb4:	80 6a       	ori	r24, 0xA0	; 160
     bb6:	80 a3       	std	Z+32, r24	; 0x20
     bb8:	85 e5       	ldi	r24, 0x55	; 85
     bba:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     bbe:	16 aa       	std	Z+54, r1	; 0x36
     bc0:	74 e2       	ldi	r23, 0x24	; 36
     bc2:	70 ab       	std	Z+48, r23	; 0x30
     bc4:	11 aa       	std	Z+49, r1	; 0x31
     bc6:	69 e5       	ldi	r22, 0x59	; 89
     bc8:	62 ab       	std	Z+50, r22	; 0x32
     bca:	c3 ab       	std	Z+51, r28	; 0x33
     bcc:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <dacBuf_len>
     bd0:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <dacBuf_len+0x1>
     bd4:	a4 ab       	std	Z+52, r26	; 0x34
     bd6:	b5 ab       	std	Z+53, r27	; 0x35
     bd8:	a2 e7       	ldi	r26, 0x72	; 114
     bda:	b2 e2       	ldi	r27, 0x22	; 34
     bdc:	a0 af       	std	Z+56, r26	; 0x38
     bde:	b1 af       	std	Z+57, r27	; 0x39
     be0:	12 ae       	std	Z+58, r1	; 0x3a
     be2:	89 e3       	ldi	r24, 0x39	; 57
     be4:	84 af       	std	Z+60, r24	; 0x3c
     be6:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     bea:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bee:	80 a9       	ldd	r24, Z+48	; 0x30
     bf0:	80 68       	ori	r24, 0x80	; 128
     bf2:	80 ab       	std	Z+48, r24	; 0x30
     bf4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     bf8:	a0 e4       	ldi	r26, 0x40	; 64
     bfa:	b1 e0       	ldi	r27, 0x01	; 1
     bfc:	7c 93       	st	X, r23
     bfe:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c02:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c0c:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <auxDacBufLen>
     c10:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     c14:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c18:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c1c:	62 e8       	ldi	r22, 0x82	; 130
     c1e:	74 e2       	ldi	r23, 0x24	; 36
     c20:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c24:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c28:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c2c:	8b e3       	ldi	r24, 0x3B	; 59
     c2e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c32:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c36:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c3a:	8c 91       	ld	r24, X
     c3c:	80 68       	ori	r24, 0x80	; 128
     c3e:	8c 93       	st	X, r24
     c40:	10 8a       	std	Z+16, r1	; 0x10
     c42:	50 8b       	std	Z+16, r21	; 0x10
     c44:	40 8b       	std	Z+16, r20	; 0x10
     c46:	c1 8b       	std	Z+17, r28	; 0x11
     c48:	81 e9       	ldi	r24, 0x91	; 145
     c4a:	82 8b       	std	Z+18, r24	; 0x12
     c4c:	33 8b       	std	Z+19, r19	; 0x13
     c4e:	47 e7       	ldi	r20, 0x77	; 119
     c50:	51 e0       	ldi	r21, 0x01	; 1
     c52:	44 8b       	std	Z+20, r20	; 0x14
     c54:	55 8b       	std	Z+21, r21	; 0x15
     c56:	20 8f       	std	Z+24, r18	; 0x18
     c58:	91 8f       	std	Z+25, r25	; 0x19
     c5a:	12 8e       	std	Z+26, r1	; 0x1a
     c5c:	82 e8       	ldi	r24, 0x82	; 130
     c5e:	96 e2       	ldi	r25, 0x26	; 38
     c60:	84 8f       	std	Z+28, r24	; 0x1c
     c62:	95 8f       	std	Z+29, r25	; 0x1d
     c64:	16 8e       	std	Z+30, r1	; 0x1e
     c66:	80 89       	ldd	r24, Z+16	; 0x10
     c68:	80 68       	ori	r24, 0x80	; 128
     c6a:	80 8b       	std	Z+16, r24	; 0x10
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <tiny_dma_set_mode_4>:
     c70:	cf 93       	push	r28
     c72:	c4 e0       	ldi	r28, 0x04	; 4
     c74:	c0 93 04 20 	sts	0x2004, r28	; 0x802004 <global_mode>
     c78:	1d de       	rcall	.-966    	; 0x8b4 <tiny_dma_flush>
     c7a:	e0 e0       	ldi	r30, 0x00	; 0
     c7c:	f1 e0       	ldi	r31, 0x01	; 1
     c7e:	10 a2       	std	Z+32, r1	; 0x20
     c80:	80 e4       	ldi	r24, 0x40	; 64
     c82:	80 a3       	std	Z+32, r24	; 0x20
     c84:	c0 a3       	std	Z+32, r28	; 0x20
     c86:	11 a2       	std	Z+33, r1	; 0x21
     c88:	12 a2       	std	Z+34, r1	; 0x22
     c8a:	4b e4       	ldi	r20, 0x4B	; 75
     c8c:	43 a3       	std	Z+35, r20	; 0x23
     c8e:	14 a2       	std	Z+36, r1	; 0x24
     c90:	15 a2       	std	Z+37, r1	; 0x25
     c92:	16 a2       	std	Z+38, r1	; 0x26
     c94:	85 e0       	ldi	r24, 0x05	; 5
     c96:	90 e2       	ldi	r25, 0x20	; 32
     c98:	80 a7       	std	Z+40, r24	; 0x28
     c9a:	91 a7       	std	Z+41, r25	; 0x29
     c9c:	12 a6       	std	Z+42, r1	; 0x2a
     c9e:	60 ea       	ldi	r22, 0xA0	; 160
     ca0:	64 a7       	std	Z+44, r22	; 0x2c
     ca2:	88 e0       	ldi	r24, 0x08	; 8
     ca4:	85 a7       	std	Z+45, r24	; 0x2d
     ca6:	16 a6       	std	Z+46, r1	; 0x2e
     ca8:	90 a1       	ldd	r25, Z+32	; 0x20
     caa:	90 6a       	ori	r25, 0xA0	; 160
     cac:	90 a3       	std	Z+32, r25	; 0x20
     cae:	95 e5       	ldi	r25, 0x55	; 85
     cb0:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     cb4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     cb8:	a0 e4       	ldi	r26, 0x40	; 64
     cba:	b1 e0       	ldi	r27, 0x01	; 1
     cbc:	94 e2       	ldi	r25, 0x24	; 36
     cbe:	9c 93       	st	X, r25
     cc0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     cc4:	99 e5       	ldi	r25, 0x59	; 89
     cc6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     cd0:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <auxDacBufLen>
     cd4:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     cd8:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     cdc:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     ce0:	22 e8       	ldi	r18, 0x82	; 130
     ce2:	34 e2       	ldi	r19, 0x24	; 36
     ce4:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     ce8:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     cec:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     cf0:	9b e3       	ldi	r25, 0x3B	; 59
     cf2:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     cf6:	93 e0       	ldi	r25, 0x03	; 3
     cf8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     cfc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d00:	2c 91       	ld	r18, X
     d02:	20 68       	ori	r18, 0x80	; 128
     d04:	2c 93       	st	X, r18
     d06:	c0 8b       	std	Z+16, r28	; 0x10
     d08:	91 8b       	std	Z+17, r25	; 0x11
     d0a:	31 e9       	ldi	r19, 0x91	; 145
     d0c:	32 8b       	std	Z+18, r19	; 0x12
     d0e:	43 8b       	std	Z+19, r20	; 0x13
     d10:	47 e7       	ldi	r20, 0x77	; 119
     d12:	51 e0       	ldi	r21, 0x01	; 1
     d14:	44 8b       	std	Z+20, r20	; 0x14
     d16:	55 8b       	std	Z+21, r21	; 0x15
     d18:	60 8f       	std	Z+24, r22	; 0x18
     d1a:	81 8f       	std	Z+25, r24	; 0x19
     d1c:	12 8e       	std	Z+26, r1	; 0x1a
     d1e:	62 e8       	ldi	r22, 0x82	; 130
     d20:	76 e2       	ldi	r23, 0x26	; 38
     d22:	64 8f       	std	Z+28, r22	; 0x1c
     d24:	75 8f       	std	Z+29, r23	; 0x1d
     d26:	16 8e       	std	Z+30, r1	; 0x1e
     d28:	20 89       	ldd	r18, Z+16	; 0x10
     d2a:	20 68       	ori	r18, 0x80	; 128
     d2c:	20 8b       	std	Z+16, r18	; 0x10
     d2e:	c0 ab       	std	Z+48, r28	; 0x30
     d30:	91 ab       	std	Z+49, r25	; 0x31
     d32:	32 ab       	std	Z+50, r19	; 0x32
     d34:	9a e4       	ldi	r25, 0x4A	; 74
     d36:	93 ab       	std	Z+51, r25	; 0x33
     d38:	44 ab       	std	Z+52, r20	; 0x34
     d3a:	55 ab       	std	Z+53, r21	; 0x35
     d3c:	93 ec       	ldi	r25, 0xC3	; 195
     d3e:	90 af       	std	Z+56, r25	; 0x38
     d40:	81 af       	std	Z+57, r24	; 0x39
     d42:	12 ae       	std	Z+58, r1	; 0x3a
     d44:	89 ef       	ldi	r24, 0xF9	; 249
     d46:	97 e2       	ldi	r25, 0x27	; 39
     d48:	84 af       	std	Z+60, r24	; 0x3c
     d4a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     d4e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     d52:	80 a9       	ldd	r24, Z+48	; 0x30
     d54:	80 68       	ori	r24, 0x80	; 128
     d56:	80 ab       	std	Z+48, r24	; 0x30
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <tiny_dma_set_mode_5>:
     d5c:	85 e0       	ldi	r24, 0x05	; 5
     d5e:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_mode>
     d62:	a8 dd       	rcall	.-1200   	; 0x8b4 <tiny_dma_flush>
     d64:	e0 e0       	ldi	r30, 0x00	; 0
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	16 aa       	std	Z+54, r1	; 0x36
     d6a:	34 e2       	ldi	r19, 0x24	; 36
     d6c:	30 ab       	std	Z+48, r19	; 0x30
     d6e:	11 aa       	std	Z+49, r1	; 0x31
     d70:	29 e5       	ldi	r18, 0x59	; 89
     d72:	22 ab       	std	Z+50, r18	; 0x32
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	83 ab       	std	Z+51, r24	; 0x33
     d78:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     d7c:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     d80:	44 ab       	std	Z+52, r20	; 0x34
     d82:	55 ab       	std	Z+53, r21	; 0x35
     d84:	42 e7       	ldi	r20, 0x72	; 114
     d86:	52 e2       	ldi	r21, 0x22	; 34
     d88:	40 af       	std	Z+56, r20	; 0x38
     d8a:	51 af       	std	Z+57, r21	; 0x39
     d8c:	12 ae       	std	Z+58, r1	; 0x3a
     d8e:	99 e3       	ldi	r25, 0x39	; 57
     d90:	94 af       	std	Z+60, r25	; 0x3c
     d92:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     d96:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     d9a:	90 a9       	ldd	r25, Z+48	; 0x30
     d9c:	90 68       	ori	r25, 0x80	; 128
     d9e:	90 ab       	std	Z+48, r25	; 0x30
     da0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     da4:	e0 e4       	ldi	r30, 0x40	; 64
     da6:	f1 e0       	ldi	r31, 0x01	; 1
     da8:	30 83       	st	Z, r19
     daa:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     dae:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     db2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     db6:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <dacBuf_len>
     dba:	30 91 09 20 	lds	r19, 0x2009	; 0x802009 <dacBuf_len+0x1>
     dbe:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     dc2:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     dc6:	22 e8       	ldi	r18, 0x82	; 130
     dc8:	34 e2       	ldi	r19, 0x24	; 36
     dca:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     dce:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     dd2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     dd6:	9b e3       	ldi	r25, 0x3B	; 59
     dd8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ddc:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     de0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     de4:	80 81       	ld	r24, Z
     de6:	80 68       	ori	r24, 0x80	; 128
     de8:	80 83       	st	Z, r24
     dea:	08 95       	ret

00000dec <tiny_dma_set_mode_6>:
     dec:	86 e0       	ldi	r24, 0x06	; 6
     dee:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_mode>
     df2:	60 dd       	rcall	.-1344   	; 0x8b4 <tiny_dma_flush>
     df4:	e0 e0       	ldi	r30, 0x00	; 0
     df6:	f1 e0       	ldi	r31, 0x01	; 1
     df8:	16 aa       	std	Z+54, r1	; 0x36
     dfa:	94 e2       	ldi	r25, 0x24	; 36
     dfc:	90 ab       	std	Z+48, r25	; 0x30
     dfe:	11 aa       	std	Z+49, r1	; 0x31
     e00:	39 e5       	ldi	r19, 0x59	; 89
     e02:	32 ab       	std	Z+50, r19	; 0x32
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	83 ab       	std	Z+51, r24	; 0x33
     e08:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     e0c:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     e10:	44 ab       	std	Z+52, r20	; 0x34
     e12:	55 ab       	std	Z+53, r21	; 0x35
     e14:	42 e7       	ldi	r20, 0x72	; 114
     e16:	52 e2       	ldi	r21, 0x22	; 34
     e18:	40 af       	std	Z+56, r20	; 0x38
     e1a:	51 af       	std	Z+57, r21	; 0x39
     e1c:	12 ae       	std	Z+58, r1	; 0x3a
     e1e:	29 e3       	ldi	r18, 0x39	; 57
     e20:	24 af       	std	Z+60, r18	; 0x3c
     e22:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     e26:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     e2a:	20 a9       	ldd	r18, Z+48	; 0x30
     e2c:	20 68       	ori	r18, 0x80	; 128
     e2e:	20 ab       	std	Z+48, r18	; 0x30
     e30:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     e34:	a0 e4       	ldi	r26, 0x40	; 64
     e36:	b1 e0       	ldi	r27, 0x01	; 1
     e38:	9c 93       	st	X, r25
     e3a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e3e:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e42:	32 e0       	ldi	r19, 0x02	; 2
     e44:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e48:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <auxDacBufLen>
     e4c:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     e50:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     e54:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     e58:	42 e8       	ldi	r20, 0x82	; 130
     e5a:	54 e2       	ldi	r21, 0x24	; 36
     e5c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e60:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e64:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e68:	2b e3       	ldi	r18, 0x3B	; 59
     e6a:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e6e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e72:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e76:	2c 91       	ld	r18, X
     e78:	20 68       	ori	r18, 0x80	; 128
     e7a:	2c 93       	st	X, r18
     e7c:	10 8a       	std	Z+16, r1	; 0x10
     e7e:	20 e4       	ldi	r18, 0x40	; 64
     e80:	20 8b       	std	Z+16, r18	; 0x10
     e82:	24 e0       	ldi	r18, 0x04	; 4
     e84:	20 8b       	std	Z+16, r18	; 0x10
     e86:	81 8b       	std	Z+17, r24	; 0x11
     e88:	81 e9       	ldi	r24, 0x91	; 145
     e8a:	82 8b       	std	Z+18, r24	; 0x12
     e8c:	80 e1       	ldi	r24, 0x10	; 16
     e8e:	83 8b       	std	Z+19, r24	; 0x13
     e90:	4e ee       	ldi	r20, 0xEE	; 238
     e92:	52 e0       	ldi	r21, 0x02	; 2
     e94:	44 8b       	std	Z+20, r20	; 0x14
     e96:	55 8b       	std	Z+21, r21	; 0x15
     e98:	90 8f       	std	Z+24, r25	; 0x18
     e9a:	31 8f       	std	Z+25, r19	; 0x19
     e9c:	12 8e       	std	Z+26, r1	; 0x1a
     e9e:	82 e8       	ldi	r24, 0x82	; 130
     ea0:	96 e2       	ldi	r25, 0x26	; 38
     ea2:	84 8f       	std	Z+28, r24	; 0x1c
     ea4:	95 8f       	std	Z+29, r25	; 0x1d
     ea6:	16 8e       	std	Z+30, r1	; 0x1e
     ea8:	80 89       	ldd	r24, Z+16	; 0x10
     eaa:	80 68       	ori	r24, 0x80	; 128
     eac:	80 8b       	std	Z+16, r24	; 0x10
     eae:	08 95       	ret

00000eb0 <tiny_dma_set_mode_7>:
	return;
}

void tiny_dma_set_mode_7(void){
		
		global_mode = 7;
     eb0:	87 e0       	ldi	r24, 0x07	; 7
     eb2:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_mode>
		
		tiny_dma_flush();
     eb6:	fe dc       	rcall	.-1540   	; 0x8b4 <tiny_dma_flush>
		
		DMA.CH2.REPCNT = 0; //Repeat forever!
     eb8:	e0 e0       	ldi	r30, 0x00	; 0
     eba:	f1 e0       	ldi	r31, 0x01	; 1
     ebc:	16 aa       	std	Z+54, r1	; 0x36
		DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     ebe:	94 e2       	ldi	r25, 0x24	; 36
     ec0:	90 ab       	std	Z+48, r25	; 0x30
		DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     ec2:	11 aa       	std	Z+49, r1	; 0x31
		DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     ec4:	39 e5       	ldi	r19, 0x59	; 89
     ec6:	32 ab       	std	Z+50, r19	; 0x32
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	83 ab       	std	Z+51, r24	; 0x33
		DMA.CH2.TRFCNT = dacBuf_len;
     ecc:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <dacBuf_len>
     ed0:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <dacBuf_len+0x1>
     ed4:	44 ab       	std	Z+52, r20	; 0x34
     ed6:	55 ab       	std	Z+53, r21	; 0x35

		DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     ed8:	42 e7       	ldi	r20, 0x72	; 114
     eda:	52 e2       	ldi	r21, 0x22	; 34
     edc:	40 af       	std	Z+56, r20	; 0x38
		DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     ede:	51 af       	std	Z+57, r21	; 0x39
		DMA.CH2.SRCADDR2 = 0x00;
     ee0:	12 ae       	std	Z+58, r1	; 0x3a
			
		DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     ee2:	29 e3       	ldi	r18, 0x39	; 57
     ee4:	24 af       	std	Z+60, r18	; 0x3c
		DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     ee6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
		DMA.CH2.DESTADDR2 = 0x00;
     eea:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
			
		//Must enable last for REPCNT won't work!
		DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     eee:	20 a9       	ldd	r18, Z+48	; 0x30
     ef0:	20 68       	ori	r18, 0x80	; 128
     ef2:	20 ab       	std	Z+48, r18	; 0x30
		
		DMA.CH3.REPCNT = 0; //Repeat forever!
     ef4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
		DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     ef8:	a0 e4       	ldi	r26, 0x40	; 64
     efa:	b1 e0       	ldi	r27, 0x01	; 1
     efc:	9c 93       	st	X, r25
		DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     efe:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
		DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     f02:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     f06:	32 e0       	ldi	r19, 0x02	; 2
     f08:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
		DMA.CH3.TRFCNT = auxDacBufLen;
     f0c:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <auxDacBufLen>
     f10:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <auxDacBufLen+0x1>
     f14:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f18:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

		DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     f1c:	42 e8       	ldi	r20, 0x82	; 130
     f1e:	54 e2       	ldi	r21, 0x24	; 36
     f20:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
		DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     f24:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
		DMA.CH3.SRCADDR2 = 0x00;
     f28:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
		DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     f2c:	2b e3       	ldi	r18, 0x3B	; 59
     f2e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
		DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     f32:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
		DMA.CH3.DESTADDR2 = 0x00;
     f36:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
		//Must enable last for REPCNT won't work!
		DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     f3a:	2c 91       	ld	r18, X
     f3c:	20 68       	ori	r18, 0x80	; 128
     f3e:	2c 93       	st	X, r18
		
		DMA.CH0.CTRLA = 0x00;
     f40:	10 8a       	std	Z+16, r1	; 0x10
		DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     f42:	20 e4       	ldi	r18, 0x40	; 64
     f44:	20 8b       	std	Z+16, r18	; 0x10
				
		DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     f46:	25 e0       	ldi	r18, 0x05	; 5
     f48:	20 8b       	std	Z+16, r18	; 0x10
		DMA.CH0.CTRLB = 0x03; //No interrupt!
     f4a:	81 8b       	std	Z+17, r24	; 0x11
		DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     f4c:	81 e9       	ldi	r24, 0x91	; 145
     f4e:	82 8b       	std	Z+18, r24	; 0x12
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     f50:	80 e1       	ldi	r24, 0x10	; 16
     f52:	83 8b       	std	Z+19, r24	; 0x13
		DMA.CH0.TRFCNT = PACKET_SIZE;
     f54:	4e ee       	ldi	r20, 0xEE	; 238
     f56:	52 e0       	ldi	r21, 0x02	; 2
     f58:	44 8b       	std	Z+20, r20	; 0x14
     f5a:	55 8b       	std	Z+21, r21	; 0x15
				
		DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     f5c:	90 8f       	std	Z+24, r25	; 0x18
		DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     f5e:	31 8f       	std	Z+25, r19	; 0x19
		DMA.CH0.SRCADDR2 = 0x00;
     f60:	12 8e       	std	Z+26, r1	; 0x1a
				
		DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     f62:	82 e8       	ldi	r24, 0x82	; 130
     f64:	96 e2       	ldi	r25, 0x26	; 38
     f66:	84 8f       	std	Z+28, r24	; 0x1c
		DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     f68:	95 8f       	std	Z+29, r25	; 0x1d
		DMA.CH0.DESTADDR2 = 0x00;
     f6a:	16 8e       	std	Z+30, r1	; 0x1e
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     f6c:	80 89       	ldd	r24, Z+16	; 0x10
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	80 8b       	std	Z+16, r24	; 0x10
     f72:	08 95       	ret

00000f74 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     f74:	e0 e7       	ldi	r30, 0x70	; 112
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	83 81       	ldd	r24, Z+3	; 0x03
     f7a:	8c 7f       	andi	r24, 0xFC	; 252
     f7c:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     f7e:	84 81       	ldd	r24, Z+4	; 0x04
     f80:	8c 7f       	andi	r24, 0xFC	; 252
     f82:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     f84:	80 81       	ld	r24, Z
     f86:	8d 7f       	andi	r24, 0xFD	; 253
     f88:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     f8a:	e0 e8       	ldi	r30, 0x80	; 128
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	80 ec       	ldi	r24, 0xC0	; 192
     f90:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     f92:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
     f94:	88 ec       	ldi	r24, 0xC8	; 200
     f96:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     f98:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b8 e0       	ldi	r27, 0x08	; 8
     f9e:	34 e0       	ldi	r19, 0x04	; 4
     fa0:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     fa2:	23 e0       	ldi	r18, 0x03	; 3
     fa4:	11 96       	adiw	r26, 0x01	; 1
     fa6:	2c 93       	st	X, r18
     fa8:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     faa:	14 96       	adiw	r26, 0x04	; 4
     fac:	1c 92       	st	X, r1
     fae:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
     fb0:	85 ed       	ldi	r24, 0xD5	; 213
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	96 96       	adiw	r26, 0x26	; 38
     fb6:	8d 93       	st	X+, r24
     fb8:	9c 93       	st	X, r25
     fba:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
     fbc:	16 96       	adiw	r26, 0x06	; 6
     fbe:	1c 92       	st	X, r1
     fc0:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     fc2:	e0 e4       	ldi	r30, 0x40	; 64
     fc4:	f8 e0       	ldi	r31, 0x08	; 8
     fc6:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     fc8:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
     fca:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
     fcc:	86 a3       	std	Z+38, r24	; 0x26
     fce:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
     fd0:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
     fd2:	e0 e6       	ldi	r30, 0x60	; 96
     fd4:	f6 e0       	ldi	r31, 0x06	; 6
     fd6:	80 81       	ld	r24, Z
     fd8:	80 61       	ori	r24, 0x10	; 16
     fda:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
     fdc:	e0 e4       	ldi	r30, 0x40	; 64
     fde:	f9 e0       	ldi	r31, 0x09	; 9
     fe0:	83 e1       	ldi	r24, 0x13	; 19
     fe2:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
     fe4:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
     fea:	a6 a3       	std	Z+38, r26	; 0x26
     fec:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
     fee:	10 a6       	std	Z+40, r1	; 0x28
     ff0:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	80 83       	st	Z, r24
     ff6:	08 95       	ret

00000ff8 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	1f 92       	push	r1
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    1022:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <global_mode>
    1026:	87 30       	cpi	r24, 0x07	; 7
    1028:	31 f4       	brne	.+12     	; 0x1036 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    102a:	e0 e0       	ldi	r30, 0x00	; 0
    102c:	f2 e0       	ldi	r31, 0x02	; 2
    102e:	84 a5       	ldd	r24, Z+44	; 0x2c
    1030:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    1032:	95 a5       	ldd	r25, Z+45	; 0x2d
    1034:	02 c0       	rjmp	.+4      	; 0x103a <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1036:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    103a:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <PSU_target>
    103e:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    1040:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1044:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	0c f4       	brge	.+2      	; 0x1050 <__vector_83+0x58>
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	99 23       	and	r25, r25
    1052:	c9 f0       	breq	.+50     	; 0x1086 <__vector_83+0x8e>
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	2a 3f       	cpi	r18, 0xFA	; 250
    1058:	37 40       	sbci	r19, 0x07	; 7
    105a:	08 f0       	brcs	.+2      	; 0x105e <__vector_83+0x66>
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	99 23       	and	r25, r25
    1060:	91 f0       	breq	.+36     	; 0x1086 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    1062:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1066:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    106a:	89 30       	cpi	r24, 0x09	; 9
    106c:	1c f4       	brge	.+6      	; 0x1074 <__vector_83+0x7c>
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <__vector_83+0x80>
    1074:	86 e0       	ldi	r24, 0x06	; 6
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	82 0f       	add	r24, r18
    107a:	93 1f       	adc	r25, r19
    107c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1080:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1084:	23 c0       	rjmp	.+70     	; 0x10cc <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1086:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    108a:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	8f 3f       	cpi	r24, 0xFF	; 255
    1092:	0c f0       	brlt	.+2      	; 0x1096 <__vector_83+0x9e>
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	99 23       	and	r25, r25
    1098:	c9 f0       	breq	.+50     	; 0x10cc <__vector_83+0xd4>
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	27 30       	cpi	r18, 0x07	; 7
    109e:	31 05       	cpc	r19, r1
    10a0:	08 f4       	brcc	.+2      	; 0x10a4 <__vector_83+0xac>
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	99 23       	and	r25, r25
    10a6:	91 f0       	breq	.+36     	; 0x10cc <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    10a8:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    10ac:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    10b0:	88 3f       	cpi	r24, 0xF8	; 248
    10b2:	1c f0       	brlt	.+6      	; 0x10ba <__vector_83+0xc2>
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <__vector_83+0xc6>
    10ba:	86 e0       	ldi	r24, 0x06	; 6
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	48 1b       	sub	r20, r24
    10c2:	59 0b       	sbc	r21, r25
    10c4:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    10c8:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    10cc:	0f 90       	pop	r0
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	9f 91       	pop	r25
    10d8:	8f 91       	pop	r24
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    10ec:	e0 e7       	ldi	r30, 0x70	; 112
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	83 81       	ldd	r24, Z+3	; 0x03
    10f2:	8f 7e       	andi	r24, 0xEF	; 239
    10f4:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    10f6:	e0 e4       	ldi	r30, 0x40	; 64
    10f8:	f6 e0       	ldi	r31, 0x06	; 6
    10fa:	80 81       	ld	r24, Z
    10fc:	8a 6a       	ori	r24, 0xAA	; 170
    10fe:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1104:	88 e5       	ldi	r24, 0x58	; 88
    1106:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1108:	e0 ea       	ldi	r30, 0xA0	; 160
    110a:	f8 e0       	ldi	r31, 0x08	; 8
    110c:	84 ec       	ldi	r24, 0xC4	; 196
    110e:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    1114:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1116:	88 e1       	ldi	r24, 0x18	; 24
    1118:	84 83       	std	Z+4, r24	; 0x04
    111a:	08 95       	ret

0000111c <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    111c:	e0 e7       	ldi	r30, 0x70	; 112
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	83 81       	ldd	r24, Z+3	; 0x03
    1122:	87 7f       	andi	r24, 0xF7	; 247
    1124:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1126:	e0 ec       	ldi	r30, 0xC0	; 192
    1128:	f8 e0       	ldi	r31, 0x08	; 8
    112a:	80 e4       	ldi	r24, 0x40	; 64
    112c:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    112e:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1130:	88 e5       	ldi	r24, 0x58	; 88
    1132:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1136:	08 95       	ret

00001138 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
	asm("nop");
    1142:	00 00       	nop
}
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    114e:	9f b7       	in	r25, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	e8 2f       	mov	r30, r24
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	e0 59       	subi	r30, 0x90	; 144
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	60 95       	com	r22
    115c:	80 81       	ld	r24, Z
    115e:	68 23       	and	r22, r24
    1160:	60 83       	st	Z, r22
    1162:	9f bf       	out	0x3f, r25	; 63
    1164:	08 95       	ret

00001166 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1166:	86 30       	cpi	r24, 0x06	; 6
    1168:	11 f0       	breq	.+4      	; 0x116e <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    116e:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1170:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1174:	81 fd       	sbrc	r24, 1
    1176:	26 c0       	rjmp	.+76     	; 0x11c4 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1178:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    117a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    117c:	e0 e5       	ldi	r30, 0x50	; 80
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1186:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1188:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    118a:	81 ff       	sbrs	r24, 1
    118c:	fd cf       	rjmp	.-6      	; 0x1188 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    118e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1190:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1192:	a0 e5       	ldi	r26, 0x50	; 80
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	16 96       	adiw	r26, 0x06	; 6
    1198:	8c 91       	ld	r24, X
    119a:	16 97       	sbiw	r26, 0x06	; 6
    119c:	89 7f       	andi	r24, 0xF9	; 249
    119e:	16 96       	adiw	r26, 0x06	; 6
    11a0:	8c 93       	st	X, r24
    11a2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    11a4:	e0 e6       	ldi	r30, 0x60	; 96
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 e8       	ldi	r24, 0x80	; 128
    11aa:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    11ac:	8b eb       	ldi	r24, 0xBB	; 187
    11ae:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    11b0:	16 96       	adiw	r26, 0x06	; 6
    11b2:	8c 91       	ld	r24, X
    11b4:	16 97       	sbiw	r26, 0x06	; 6
    11b6:	84 60       	ori	r24, 0x04	; 4
    11b8:	16 96       	adiw	r26, 0x06	; 6
    11ba:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    11bc:	80 81       	ld	r24, Z
    11be:	81 60       	ori	r24, 0x01	; 1
    11c0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11c2:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    11c4:	63 60       	ori	r22, 0x03	; 3
    11c6:	84 e4       	ldi	r24, 0x44	; 68
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	1a d5       	rcall	.+2612   	; 0x1c00 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    11cc:	60 e4       	ldi	r22, 0x40	; 64
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	be cf       	rjmp	.-132    	; 0x114e <sysclk_enable_module>
    11d2:	08 95       	ret

000011d4 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    11d4:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <udi_vendor_alternate_setting>
    11d8:	08 95       	ret

000011da <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    11da:	40 d1       	rcall	.+640    	; 0x145c <udc_get_interface_desc>
    11dc:	fc 01       	movw	r30, r24
    11de:	83 81       	ldd	r24, Z+3	; 0x03
    11e0:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    11e4:	81 11       	cpse	r24, r1
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    11e8:	93 ca       	rjmp	.-2778   	; 0x710 <main_vendor_enable>
    11ea:	08 95       	ret
			return false;
		}
	}
	return true;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
}
    11ee:	08 95       	ret

000011f0 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    11f0:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <udi_vendor_alternate_setting>
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    11f8:	a7 ca       	rjmp	.-2738   	; 0x748 <main_vendor_disable>
    11fa:	08 95       	ret

000011fc <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    11fc:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    1200:	88 23       	and	r24, r24
    1202:	4c f4       	brge	.+18     	; 0x1216 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1204:	80 76       	andi	r24, 0x60	; 96
    1206:	80 34       	cpi	r24, 0x40	; 64
    1208:	a9 f4       	brne	.+42     	; 0x1234 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    120a:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    120e:	81 11       	cpse	r24, r1
    1210:	13 c0       	rjmp	.+38     	; 0x1238 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    1212:	9f ca       	rjmp	.-2754   	; 0x752 <main_setup_in_received>
    1214:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1216:	80 76       	andi	r24, 0x60	; 96
    1218:	80 34       	cpi	r24, 0x40	; 64
    121a:	81 f4       	brne	.+32     	; 0x123c <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    121c:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1220:	81 11       	cpse	r24, r1
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1224:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1228:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    122c:	89 2b       	or	r24, r25
    122e:	51 f0       	breq	.+20     	; 0x1244 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1230:	8e ca       	rjmp	.-2788   	; 0x74e <main_setup_out_received>
    1232:	08 95       	ret
		}
	}
	return false; // Not supported request
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	08 95       	ret
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	08 95       	ret
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	08 95       	ret
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	08 95       	ret
    1244:	80 e0       	ldi	r24, 0x00	; 0
}
    1246:	08 95       	ret

00001248 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    124e:	8a 01       	movw	r16, r20
    1250:	ac 01       	movw	r20, r24
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	81 e8       	ldi	r24, 0x81	; 129
    1256:	0e 94 74 12 	call	0x24e8	; 0x24e8 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    1266:	8a 01       	movw	r16, r20
    1268:	ac 01       	movw	r20, r24
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	82 e8       	ldi	r24, 0x82	; 130
    126e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret

00001278 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    127e:	8a 01       	movw	r16, r20
    1280:	ac 01       	movw	r20, r24
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	83 e8       	ldi	r24, 0x83	; 131
    1286:	0e 94 74 12 	call	0x24e8	; 0x24e8 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1290:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <udc_ptr_conf>
    1294:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1298:	01 90       	ld	r0, Z+
    129a:	f0 81       	ld	r31, Z
    129c:	e0 2d       	mov	r30, r0
    129e:	22 81       	ldd	r18, Z+2	; 0x02
    12a0:	33 81       	ldd	r19, Z+3	; 0x03
    12a2:	2e 0f       	add	r18, r30
    12a4:	3f 1f       	adc	r19, r31
    12a6:	fc 01       	movw	r30, r24
    12a8:	40 81       	ld	r20, Z
    12aa:	e4 0f       	add	r30, r20
    12ac:	f1 1d       	adc	r31, r1
    12ae:	e2 17       	cp	r30, r18
    12b0:	f3 07       	cpc	r31, r19
    12b2:	b8 f4       	brcc	.+46     	; 0x12e2 <udc_next_desc_in_iface+0x52>
    12b4:	81 81       	ldd	r24, Z+1	; 0x01
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	b9 f0       	breq	.+46     	; 0x12e8 <udc_next_desc_in_iface+0x58>
    12ba:	86 13       	cpse	r24, r22
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <udc_next_desc_in_iface+0x40>
    12be:	05 c0       	rjmp	.+10     	; 0x12ca <udc_next_desc_in_iface+0x3a>
    12c0:	81 81       	ldd	r24, Z+1	; 0x01
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	a1 f0       	breq	.+40     	; 0x12ee <udc_next_desc_in_iface+0x5e>
    12c6:	86 13       	cpse	r24, r22
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <udc_next_desc_in_iface+0x40>
    12ca:	8e 2f       	mov	r24, r30
    12cc:	9f 2f       	mov	r25, r31
    12ce:	08 95       	ret
    12d0:	80 81       	ld	r24, Z
    12d2:	e8 0f       	add	r30, r24
    12d4:	f1 1d       	adc	r31, r1
    12d6:	e2 17       	cp	r30, r18
    12d8:	f3 07       	cpc	r31, r19
    12da:	90 f3       	brcs	.-28     	; 0x12c0 <udc_next_desc_in_iface+0x30>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	08 95       	ret
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	08 95       	ret
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	08 95       	ret
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	08 95       	ret

000012f4 <udc_valid_address>:
    12f4:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    12f8:	8f 77       	andi	r24, 0x7F	; 127
    12fa:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <udd_set_address>
    12fe:	08 95       	ret

00001300 <udc_update_iface_desc>:
    1300:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <udc_num_configuration>
    1304:	99 23       	and	r25, r25
    1306:	81 f1       	breq	.+96     	; 0x1368 <udc_update_iface_desc+0x68>
    1308:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <udc_ptr_conf>
    130c:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1310:	01 90       	ld	r0, Z+
    1312:	f0 81       	ld	r31, Z
    1314:	e0 2d       	mov	r30, r0
    1316:	94 81       	ldd	r25, Z+4	; 0x04
    1318:	89 17       	cp	r24, r25
    131a:	40 f5       	brcc	.+80     	; 0x136c <udc_update_iface_desc+0x6c>
    131c:	e0 93 c8 20 	sts	0x20C8, r30	; 0x8020c8 <udc_ptr_iface>
    1320:	f0 93 c9 20 	sts	0x20C9, r31	; 0x8020c9 <udc_ptr_iface+0x1>
    1324:	22 81       	ldd	r18, Z+2	; 0x02
    1326:	33 81       	ldd	r19, Z+3	; 0x03
    1328:	2e 0f       	add	r18, r30
    132a:	3f 1f       	adc	r19, r31
    132c:	e2 17       	cp	r30, r18
    132e:	f3 07       	cpc	r31, r19
    1330:	f8 f4       	brcc	.+62     	; 0x1370 <udc_update_iface_desc+0x70>
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	94 30       	cpi	r25, 0x04	; 4
    1336:	61 f4       	brne	.+24     	; 0x1350 <udc_update_iface_desc+0x50>
    1338:	92 81       	ldd	r25, Z+2	; 0x02
    133a:	98 13       	cpse	r25, r24
    133c:	09 c0       	rjmp	.+18     	; 0x1350 <udc_update_iface_desc+0x50>
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	96 13       	cpse	r25, r22
    1342:	06 c0       	rjmp	.+12     	; 0x1350 <udc_update_iface_desc+0x50>
    1344:	e0 93 c8 20 	sts	0x20C8, r30	; 0x8020c8 <udc_ptr_iface>
    1348:	f0 93 c9 20 	sts	0x20C9, r31	; 0x8020c9 <udc_ptr_iface+0x1>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	08 95       	ret
    1350:	90 81       	ld	r25, Z
    1352:	e9 0f       	add	r30, r25
    1354:	f1 1d       	adc	r31, r1
    1356:	e2 17       	cp	r30, r18
    1358:	f3 07       	cpc	r31, r19
    135a:	58 f3       	brcs	.-42     	; 0x1332 <udc_update_iface_desc+0x32>
    135c:	e0 93 c8 20 	sts	0x20C8, r30	; 0x8020c8 <udc_ptr_iface>
    1360:	f0 93 c9 20 	sts	0x20C9, r31	; 0x8020c9 <udc_ptr_iface+0x1>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	08 95       	ret
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	08 95       	ret
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	08 95       	ret
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	08 95       	ret

00001374 <udc_iface_disable>:
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	c8 2f       	mov	r28, r24
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	be df       	rcall	.-132    	; 0x1300 <udc_update_iface_desc>
    1384:	18 2f       	mov	r17, r24
    1386:	88 23       	and	r24, r24
    1388:	81 f1       	breq	.+96     	; 0x13ea <udc_iface_disable+0x76>
    138a:	a0 91 ca 20 	lds	r26, 0x20CA	; 0x8020ca <udc_ptr_conf>
    138e:	b0 91 cb 20 	lds	r27, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1392:	ec 2f       	mov	r30, r28
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	12 96       	adiw	r26, 0x02	; 2
    139c:	8d 91       	ld	r24, X+
    139e:	9c 91       	ld	r25, X
    13a0:	13 97       	sbiw	r26, 0x03	; 3
    13a2:	e8 0f       	add	r30, r24
    13a4:	f9 1f       	adc	r31, r25
    13a6:	e0 80       	ld	r14, Z
    13a8:	f1 80       	ldd	r15, Z+1	; 0x01
    13aa:	d7 01       	movw	r26, r14
    13ac:	16 96       	adiw	r26, 0x06	; 6
    13ae:	ed 91       	ld	r30, X+
    13b0:	fc 91       	ld	r31, X
    13b2:	17 97       	sbiw	r26, 0x07	; 7
    13b4:	09 95       	icall
    13b6:	68 2f       	mov	r22, r24
    13b8:	8c 2f       	mov	r24, r28
    13ba:	a2 df       	rcall	.-188    	; 0x1300 <udc_update_iface_desc>
    13bc:	18 2f       	mov	r17, r24
    13be:	88 23       	and	r24, r24
    13c0:	a1 f0       	breq	.+40     	; 0x13ea <udc_iface_disable+0x76>
    13c2:	c0 91 c8 20 	lds	r28, 0x20C8	; 0x8020c8 <udc_ptr_iface>
    13c6:	d0 91 c9 20 	lds	r29, 0x20C9	; 0x8020c9 <udc_ptr_iface+0x1>
    13ca:	65 e0       	ldi	r22, 0x05	; 5
    13cc:	ce 01       	movw	r24, r28
    13ce:	60 df       	rcall	.-320    	; 0x1290 <udc_next_desc_in_iface>
    13d0:	ec 01       	movw	r28, r24
    13d2:	89 2b       	or	r24, r25
    13d4:	21 f0       	breq	.+8      	; 0x13de <udc_iface_disable+0x6a>
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	0e 94 77 13 	call	0x26ee	; 0x26ee <udd_ep_free>
    13dc:	f6 cf       	rjmp	.-20     	; 0x13ca <udc_iface_disable+0x56>
    13de:	d7 01       	movw	r26, r14
    13e0:	12 96       	adiw	r26, 0x02	; 2
    13e2:	ed 91       	ld	r30, X+
    13e4:	fc 91       	ld	r31, X
    13e6:	13 97       	sbiw	r26, 0x03	; 3
    13e8:	09 95       	icall
    13ea:	81 2f       	mov	r24, r17
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	08 95       	ret

000013f8 <udc_iface_enable>:
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	18 2f       	mov	r17, r24
    1400:	7f df       	rcall	.-258    	; 0x1300 <udc_update_iface_desc>
    1402:	88 23       	and	r24, r24
    1404:	39 f1       	breq	.+78     	; 0x1454 <udc_iface_enable+0x5c>
    1406:	c0 91 c8 20 	lds	r28, 0x20C8	; 0x8020c8 <udc_ptr_iface>
    140a:	d0 91 c9 20 	lds	r29, 0x20C9	; 0x8020c9 <udc_ptr_iface+0x1>
    140e:	65 e0       	ldi	r22, 0x05	; 5
    1410:	ce 01       	movw	r24, r28
    1412:	3e df       	rcall	.-388    	; 0x1290 <udc_next_desc_in_iface>
    1414:	ec 01       	movw	r28, r24
    1416:	89 2b       	or	r24, r25
    1418:	41 f0       	breq	.+16     	; 0x142a <udc_iface_enable+0x32>
    141a:	4c 81       	ldd	r20, Y+4	; 0x04
    141c:	5d 81       	ldd	r21, Y+5	; 0x05
    141e:	6b 81       	ldd	r22, Y+3	; 0x03
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	9d d7       	rcall	.+3898   	; 0x235e <udd_ep_alloc>
    1424:	81 11       	cpse	r24, r1
    1426:	f3 cf       	rjmp	.-26     	; 0x140e <udc_iface_enable+0x16>
    1428:	15 c0       	rjmp	.+42     	; 0x1454 <udc_iface_enable+0x5c>
    142a:	a0 91 ca 20 	lds	r26, 0x20CA	; 0x8020ca <udc_ptr_conf>
    142e:	b0 91 cb 20 	lds	r27, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1432:	e1 2f       	mov	r30, r17
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	12 96       	adiw	r26, 0x02	; 2
    143c:	8d 91       	ld	r24, X+
    143e:	9c 91       	ld	r25, X
    1440:	13 97       	sbiw	r26, 0x03	; 3
    1442:	e8 0f       	add	r30, r24
    1444:	f9 1f       	adc	r31, r25
    1446:	01 90       	ld	r0, Z+
    1448:	f0 81       	ld	r31, Z
    144a:	e0 2d       	mov	r30, r0
    144c:	01 90       	ld	r0, Z+
    144e:	f0 81       	ld	r31, Z
    1450:	e0 2d       	mov	r30, r0
    1452:	09 95       	icall
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	08 95       	ret

0000145c <udc_get_interface_desc>:
    145c:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <udc_ptr_iface>
    1460:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <udc_ptr_iface+0x1>
    1464:	08 95       	ret

00001466 <udc_start>:
    1466:	e9 c6       	rjmp	.+3538   	; 0x223a <udd_enable>
    1468:	08 95       	ret

0000146a <udc_reset>:
    146a:	cf 93       	push	r28
    146c:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    1470:	88 23       	and	r24, r24
    1472:	c1 f0       	breq	.+48     	; 0x14a4 <udc_reset+0x3a>
    1474:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <udc_ptr_conf>
    1478:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    147c:	01 90       	ld	r0, Z+
    147e:	f0 81       	ld	r31, Z
    1480:	e0 2d       	mov	r30, r0
    1482:	84 81       	ldd	r24, Z+4	; 0x04
    1484:	88 23       	and	r24, r24
    1486:	71 f0       	breq	.+28     	; 0x14a4 <udc_reset+0x3a>
    1488:	c0 e0       	ldi	r28, 0x00	; 0
    148a:	8c 2f       	mov	r24, r28
    148c:	73 df       	rcall	.-282    	; 0x1374 <udc_iface_disable>
    148e:	cf 5f       	subi	r28, 0xFF	; 255
    1490:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <udc_ptr_conf>
    1494:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1498:	01 90       	ld	r0, Z+
    149a:	f0 81       	ld	r31, Z
    149c:	e0 2d       	mov	r30, r0
    149e:	84 81       	ldd	r24, Z+4	; 0x04
    14a0:	c8 17       	cp	r28, r24
    14a2:	98 f3       	brcs	.-26     	; 0x148a <udc_reset+0x20>
    14a4:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <udc_num_configuration>
    14a8:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <udc_device_status>
    14ac:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <udc_device_status+0x1>
    14b0:	cf 91       	pop	r28
    14b2:	08 95       	ret

000014b4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    14b4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    14b6:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    14ba:	88 23       	and	r24, r24
    14bc:	49 f1       	breq	.+82     	; 0x1510 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14be:	a0 91 ca 20 	lds	r26, 0x20CA	; 0x8020ca <udc_ptr_conf>
    14c2:	b0 91 cb 20 	lds	r27, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    14cc:	84 81       	ldd	r24, Z+4	; 0x04
    14ce:	88 23       	and	r24, r24
    14d0:	f9 f0       	breq	.+62     	; 0x1510 <udc_sof_notify+0x5c>
    14d2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    14d4:	ec 2f       	mov	r30, r28
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	12 96       	adiw	r26, 0x02	; 2
    14de:	8d 91       	ld	r24, X+
    14e0:	9c 91       	ld	r25, X
    14e2:	13 97       	sbiw	r26, 0x03	; 3
    14e4:	e8 0f       	add	r30, r24
    14e6:	f9 1f       	adc	r31, r25
    14e8:	01 90       	ld	r0, Z+
    14ea:	f0 81       	ld	r31, Z
    14ec:	e0 2d       	mov	r30, r0
    14ee:	00 84       	ldd	r0, Z+8	; 0x08
    14f0:	f1 85       	ldd	r31, Z+9	; 0x09
    14f2:	e0 2d       	mov	r30, r0
    14f4:	30 97       	sbiw	r30, 0x00	; 0
    14f6:	09 f0       	breq	.+2      	; 0x14fa <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    14f8:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    14fa:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14fc:	a0 91 ca 20 	lds	r26, 0x20CA	; 0x8020ca <udc_ptr_conf>
    1500:	b0 91 cb 20 	lds	r27, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1504:	ed 91       	ld	r30, X+
    1506:	fc 91       	ld	r31, X
    1508:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    150a:	84 81       	ldd	r24, Z+4	; 0x04
    150c:	c8 17       	cp	r28, r24
    150e:	10 f3       	brcs	.-60     	; 0x14d4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    151c:	e2 e7       	ldi	r30, 0x72	; 114
    151e:	f4 e2       	ldi	r31, 0x24	; 36
    1520:	12 86       	std	Z+10, r1	; 0x0a
    1522:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1524:	14 86       	std	Z+12, r1	; 0x0c
    1526:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1528:	16 86       	std	Z+14, r1	; 0x0e
    152a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    152c:	80 81       	ld	r24, Z
    152e:	88 23       	and	r24, r24
    1530:	3c f4       	brge	.+14     	; 0x1540 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1532:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1536:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    153a:	23 2b       	or	r18, r19
    153c:	09 f4       	brne	.+2      	; 0x1540 <udc_process_setup+0x2c>
    153e:	54 c3       	rjmp	.+1704   	; 0x1be8 <udc_process_setup+0x6d4>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1540:	80 76       	andi	r24, 0x60	; 96
    1542:	80 34       	cpi	r24, 0x40	; 64
    1544:	09 f0       	breq	.+2      	; 0x1548 <udc_process_setup+0x34>
    1546:	f2 c0       	rjmp	.+484    	; 0x172c <udc_process_setup+0x218>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    1548:	e0 91 73 24 	lds	r30, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    154c:	8e 2f       	mov	r24, r30
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	fc 01       	movw	r30, r24
    1552:	e0 5a       	subi	r30, 0xA0	; 160
    1554:	f1 09       	sbc	r31, r1
    1556:	e8 30       	cpi	r30, 0x08	; 8
    1558:	f1 05       	cpc	r31, r1
    155a:	08 f0       	brcs	.+2      	; 0x155e <udc_process_setup+0x4a>
    155c:	de c0       	rjmp	.+444    	; 0x171a <udc_process_setup+0x206>
    155e:	e2 50       	subi	r30, 0x02	; 2
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <debugOnNextEnd>
    156c:	41 c3       	rjmp	.+1666   	; 0x1bf0 <udc_process_setup+0x6dc>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    156e:	e0 e0       	ldi	r30, 0x00	; 0
    1570:	f8 e0       	ldi	r31, 0x08	; 8
    1572:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1574:	c2 e7       	ldi	r28, 0x72	; 114
    1576:	d4 e2       	ldi	r29, 0x24	; 36
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	9b 81       	ldd	r25, Y+3	; 0x03
    157c:	86 ab       	std	Z+54, r24	; 0x36
    157e:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	8f 70       	andi	r24, 0x0F	; 15
    1584:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1586:	6e 81       	ldd	r22, Y+6	; 0x06
    1588:	7f 81       	ldd	r23, Y+7	; 0x07
    158a:	82 e7       	ldi	r24, 0x72	; 114
    158c:	92 e2       	ldi	r25, 0x22	; 34
    158e:	e0 d6       	rcall	.+3520   	; 0x2350 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1590:	8e 81       	ldd	r24, Y+6	; 0x06
    1592:	9f 81       	ldd	r25, Y+7	; 0x07
    1594:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <dacBuf_len>
    1598:	30 91 09 20 	lds	r19, 0x2009	; 0x802009 <dacBuf_len+0x1>
    159c:	82 17       	cp	r24, r18
    159e:	93 07       	cpc	r25, r19
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <udc_process_setup+0x90>
    15a2:	26 c3       	rjmp	.+1612   	; 0x1bf0 <udc_process_setup+0x6dc>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    15a4:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <dacBuf_len>
    15a8:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <dacBuf_len+0x1>
				switch(global_mode){
    15ac:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <global_mode>
    15b0:	8e 2f       	mov	r24, r30
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	88 30       	cpi	r24, 0x08	; 8
    15b6:	91 05       	cpc	r25, r1
    15b8:	08 f0       	brcs	.+2      	; 0x15bc <udc_process_setup+0xa8>
    15ba:	b1 c0       	rjmp	.+354    	; 0x171e <udc_process_setup+0x20a>
    15bc:	fc 01       	movw	r30, r24
    15be:	ea 5f       	subi	r30, 0xFA	; 250
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
    15c2:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    15c6:	8b d9       	rcall	.-3306   	; 0x8de <tiny_dma_set_mode_0>
    15c8:	13 c3       	rjmp	.+1574   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    15ca:	e9 d9       	rcall	.-3118   	; 0x99e <tiny_dma_set_mode_1>
    15cc:	11 c3       	rjmp	.+1570   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    15ce:	5f da       	rcall	.-2882   	; 0xa8e <tiny_dma_set_mode_2>
    15d0:	0f c3       	rjmp	.+1566   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    15d2:	d2 da       	rcall	.-2652   	; 0xb78 <tiny_dma_set_mode_3>
    15d4:	0d c3       	rjmp	.+1562   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    15d6:	4c db       	rcall	.-2408   	; 0xc70 <tiny_dma_set_mode_4>
    15d8:	0b c3       	rjmp	.+1558   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    15da:	c0 db       	rcall	.-2176   	; 0xd5c <tiny_dma_set_mode_5>
    15dc:	09 c3       	rjmp	.+1554   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    15de:	06 dc       	rcall	.-2036   	; 0xdec <tiny_dma_set_mode_6>
    15e0:	07 c3       	rjmp	.+1550   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    15e2:	66 dc       	rcall	.-1844   	; 0xeb0 <tiny_dma_set_mode_7>
    15e4:	05 c3       	rjmp	.+1546   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    15e6:	e0 e4       	ldi	r30, 0x40	; 64
    15e8:	f8 e0       	ldi	r31, 0x08	; 8
    15ea:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    15ec:	c2 e7       	ldi	r28, 0x72	; 114
    15ee:	d4 e2       	ldi	r29, 0x24	; 36
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	9b 81       	ldd	r25, Y+3	; 0x03
    15f4:	86 ab       	std	Z+54, r24	; 0x36
    15f6:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	8f 70       	andi	r24, 0x0F	; 15
    15fc:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    15fe:	6e 81       	ldd	r22, Y+6	; 0x06
    1600:	7f 81       	ldd	r23, Y+7	; 0x07
    1602:	82 e8       	ldi	r24, 0x82	; 130
    1604:	94 e2       	ldi	r25, 0x24	; 36
    1606:	a4 d6       	rcall	.+3400   	; 0x2350 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1608:	8e 81       	ldd	r24, Y+6	; 0x06
    160a:	9f 81       	ldd	r25, Y+7	; 0x07
    160c:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <auxDacBufLen>
    1610:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <auxDacBufLen+0x1>
    1614:	82 17       	cp	r24, r18
    1616:	93 07       	cpc	r25, r19
    1618:	09 f4       	brne	.+2      	; 0x161c <udc_process_setup+0x108>
    161a:	ea c2       	rjmp	.+1492   	; 0x1bf0 <udc_process_setup+0x6dc>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    161c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <auxDacBufLen>
    1620:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <auxDacBufLen+0x1>
				switch(global_mode){
    1624:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <global_mode>
    1628:	8e 2f       	mov	r24, r30
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	88 30       	cpi	r24, 0x08	; 8
    162e:	91 05       	cpc	r25, r1
    1630:	08 f0       	brcs	.+2      	; 0x1634 <udc_process_setup+0x120>
    1632:	77 c0       	rjmp	.+238    	; 0x1722 <udc_process_setup+0x20e>
    1634:	fc 01       	movw	r30, r24
    1636:	e2 5f       	subi	r30, 0xF2	; 242
    1638:	fe 4f       	sbci	r31, 0xFE	; 254
    163a:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    163e:	4f d9       	rcall	.-3426   	; 0x8de <tiny_dma_set_mode_0>
    1640:	d7 c2       	rjmp	.+1454   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1642:	ad d9       	rcall	.-3238   	; 0x99e <tiny_dma_set_mode_1>
    1644:	d5 c2       	rjmp	.+1450   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1646:	23 da       	rcall	.-3002   	; 0xa8e <tiny_dma_set_mode_2>
    1648:	d3 c2       	rjmp	.+1446   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    164a:	96 da       	rcall	.-2772   	; 0xb78 <tiny_dma_set_mode_3>
    164c:	d1 c2       	rjmp	.+1442   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    164e:	10 db       	rcall	.-2528   	; 0xc70 <tiny_dma_set_mode_4>
    1650:	cf c2       	rjmp	.+1438   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1652:	84 db       	rcall	.-2296   	; 0xd5c <tiny_dma_set_mode_5>
    1654:	cd c2       	rjmp	.+1434   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1656:	ca db       	rcall	.-2156   	; 0xdec <tiny_dma_set_mode_6>
    1658:	cb c2       	rjmp	.+1430   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    165a:	2a dc       	rcall	.-1964   	; 0xeb0 <tiny_dma_set_mode_7>
    165c:	c9 c2       	rjmp	.+1426   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    165e:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1662:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1666:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    166a:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <PSU_target>
    166e:	c0 c2       	rjmp	.+1408   	; 0x1bf0 <udc_process_setup+0x6dc>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1670:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1674:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1678:	bb c2       	rjmp	.+1398   	; 0x1bf0 <udc_process_setup+0x6dc>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    167a:	e0 91 74 24 	lds	r30, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    167e:	f0 91 75 24 	lds	r31, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    1682:	e8 30       	cpi	r30, 0x08	; 8
    1684:	f1 05       	cpc	r31, r1
    1686:	08 f0       	brcs	.+2      	; 0x168a <udc_process_setup+0x176>
    1688:	4e c0       	rjmp	.+156    	; 0x1726 <udc_process_setup+0x212>
    168a:	ea 5e       	subi	r30, 0xEA	; 234
    168c:	fe 4f       	sbci	r31, 0xFE	; 254
    168e:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	91 d8       	rcall	.-3806   	; 0x7ba <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1698:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    169c:	5c d8       	rcall	.-3912   	; 0x756 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    169e:	1f d9       	rcall	.-3522   	; 0x8de <tiny_dma_set_mode_0>
    16a0:	a7 c2       	rjmp	.+1358   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	89 d8       	rcall	.-3822   	; 0x7ba <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16a8:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    16ac:	54 d8       	rcall	.-3928   	; 0x756 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    16ae:	77 d9       	rcall	.-3346   	; 0x99e <tiny_dma_set_mode_1>
    16b0:	9f c2       	rjmp	.+1342   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	81 d8       	rcall	.-3838   	; 0x7ba <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16b8:	c2 e7       	ldi	r28, 0x72	; 114
    16ba:	d4 e2       	ldi	r29, 0x24	; 36
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	4b d8       	rcall	.-3946   	; 0x756 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	5e d8       	rcall	.-3908   	; 0x780 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    16c4:	e4 d9       	rcall	.-3128   	; 0xa8e <tiny_dma_set_mode_2>
    16c6:	94 c2       	rjmp	.+1320   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    16c8:	57 da       	rcall	.-2898   	; 0xb78 <tiny_dma_set_mode_3>
    16ca:	92 c2       	rjmp	.+1316   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    16cc:	d1 da       	rcall	.-2654   	; 0xc70 <tiny_dma_set_mode_4>
    16ce:	90 c2       	rjmp	.+1312   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	72 d8       	rcall	.-3868   	; 0x7ba <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16d6:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    16da:	3d d8       	rcall	.-3974   	; 0x756 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    16dc:	3f db       	rcall	.-2434   	; 0xd5c <tiny_dma_set_mode_5>
    16de:	88 c2       	rjmp	.+1296   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	6a d8       	rcall	.-3884   	; 0x7ba <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16e6:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    16ea:	35 d8       	rcall	.-3990   	; 0x756 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    16ec:	7f db       	rcall	.-2306   	; 0xdec <tiny_dma_set_mode_6>
    16ee:	80 c2       	rjmp	.+1280   	; 0x1bf0 <udc_process_setup+0x6dc>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    16f0:	62 e0       	ldi	r22, 0x02	; 2
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	62 d8       	rcall	.-3900   	; 0x7ba <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    16f6:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    16fa:	80 68       	ori	r24, 0x80	; 128
    16fc:	2c d8       	rcall	.-4008   	; 0x756 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    16fe:	d8 db       	rcall	.-2128   	; 0xeb0 <tiny_dma_set_mode_7>
    1700:	77 c2       	rjmp	.+1262   	; 0x1bf0 <udc_process_setup+0x6dc>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1702:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1706:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    170a:	72 c2       	rjmp	.+1252   	; 0x1bf0 <udc_process_setup+0x6dc>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    170c:	e9 e7       	ldi	r30, 0x79	; 121
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	88 ed       	ldi	r24, 0xD8	; 216
    1714:	f8 94       	cli
    1716:	84 bf       	out	0x34, r24	; 52
    1718:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	05 c0       	rjmp	.+10     	; 0x1728 <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <udc_process_setup+0x214>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    1726:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1728:	81 11       	cpse	r24, r1
    172a:	65 c2       	rjmp	.+1226   	; 0x1bf6 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    172c:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    1730:	98 2f       	mov	r25, r24
    1732:	90 76       	andi	r25, 0x60	; 96
    1734:	09 f0       	breq	.+2      	; 0x1738 <udc_process_setup+0x224>
    1736:	e1 c1       	rjmp	.+962    	; 0x1afa <udc_process_setup+0x5e6>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1738:	88 23       	and	r24, r24
    173a:	0c f0       	brlt	.+2      	; 0x173e <udc_process_setup+0x22a>
    173c:	05 c1       	rjmp	.+522    	; 0x1948 <udc_process_setup+0x434>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    173e:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1742:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1746:	21 15       	cp	r18, r1
    1748:	31 05       	cpc	r19, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <udc_process_setup+0x23a>
    174c:	d6 c1       	rjmp	.+940    	; 0x1afa <udc_process_setup+0x5e6>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    174e:	8f 71       	andi	r24, 0x1F	; 31
    1750:	09 f0       	breq	.+2      	; 0x1754 <udc_process_setup+0x240>
    1752:	a3 c0       	rjmp	.+326    	; 0x189a <udc_process_setup+0x386>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1754:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1758:	96 30       	cpi	r25, 0x06	; 6
    175a:	79 f0       	breq	.+30     	; 0x177a <udc_process_setup+0x266>
    175c:	98 30       	cpi	r25, 0x08	; 8
    175e:	09 f4       	brne	.+2      	; 0x1762 <udc_process_setup+0x24e>
    1760:	92 c0       	rjmp	.+292    	; 0x1886 <udc_process_setup+0x372>
    1762:	91 11       	cpse	r25, r1
    1764:	9a c0       	rjmp	.+308    	; 0x189a <udc_process_setup+0x386>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	09 f0       	breq	.+2      	; 0x176e <udc_process_setup+0x25a>
    176c:	c6 c1       	rjmp	.+908    	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    176e:	62 e0       	ldi	r22, 0x02	; 2
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	80 ed       	ldi	r24, 0xD0	; 208
    1774:	90 e2       	ldi	r25, 0x20	; 32
    1776:	ec d5       	rcall	.+3032   	; 0x2350 <udd_set_setup_payload>
    1778:	3d c2       	rjmp	.+1146   	; 0x1bf4 <udc_process_setup+0x6e0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    177a:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    177e:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1782:	29 2f       	mov	r18, r25
    1784:	33 27       	eor	r19, r19
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	a9 f0       	breq	.+42     	; 0x17b6 <udc_process_setup+0x2a2>
    178c:	24 f4       	brge	.+8      	; 0x1796 <udc_process_setup+0x282>
    178e:	21 30       	cpi	r18, 0x01	; 1
    1790:	31 05       	cpc	r19, r1
    1792:	41 f0       	breq	.+16     	; 0x17a4 <udc_process_setup+0x290>
    1794:	a9 c1       	rjmp	.+850    	; 0x1ae8 <udc_process_setup+0x5d4>
    1796:	23 30       	cpi	r18, 0x03	; 3
    1798:	31 05       	cpc	r19, r1
    179a:	d9 f1       	breq	.+118    	; 0x1812 <udc_process_setup+0x2fe>
    179c:	2f 30       	cpi	r18, 0x0F	; 15
    179e:	31 05       	cpc	r19, r1
    17a0:	51 f1       	breq	.+84     	; 0x17f6 <udc_process_setup+0x2e2>
    17a2:	a2 c1       	rjmp	.+836    	; 0x1ae8 <udc_process_setup+0x5d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    17a4:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config>
    17a8:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    17ac:	dc 01       	movw	r26, r24
    17ae:	6c 91       	ld	r22, X
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	ce d5       	rcall	.+2972   	; 0x2350 <udd_set_setup_payload>
    17b4:	59 c0       	rjmp	.+178    	; 0x1868 <udc_process_setup+0x354>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    17b6:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    17ba:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
    17be:	21 89       	ldd	r18, Z+17	; 0x11
    17c0:	82 17       	cp	r24, r18
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <udc_process_setup+0x2b2>
    17c4:	9a c1       	rjmp	.+820    	; 0x1afa <udc_process_setup+0x5e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    17c6:	99 27       	eor	r25, r25
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    17d4:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    17d8:	e8 0f       	add	r30, r24
    17da:	f9 1f       	adc	r31, r25
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    17e0:	fc 01       	movw	r30, r24
    17e2:	62 81       	ldd	r22, Z+2	; 0x02
    17e4:	73 81       	ldd	r23, Z+3	; 0x03
    17e6:	b4 d5       	rcall	.+2920   	; 0x2350 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    17e8:	e0 91 7a 24 	lds	r30, 0x247A	; 0x80247a <udd_g_ctrlreq+0x8>
    17ec:	f0 91 7b 24 	lds	r31, 0x247B	; 0x80247b <udd_g_ctrlreq+0x9>
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	81 83       	std	Z+1, r24	; 0x01
    17f4:	39 c0       	rjmp	.+114    	; 0x1868 <udc_process_setup+0x354>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    17f6:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <udc_config+0x4>
    17fa:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <udc_config+0x5>
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	09 f4       	brne	.+2      	; 0x1804 <udc_process_setup+0x2f0>
    1802:	7b c1       	rjmp	.+758    	; 0x1afa <udc_process_setup+0x5e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1804:	dc 01       	movw	r26, r24
    1806:	12 96       	adiw	r26, 0x02	; 2
    1808:	6d 91       	ld	r22, X+
    180a:	7c 91       	ld	r23, X
    180c:	13 97       	sbiw	r26, 0x03	; 3
    180e:	a0 d5       	rcall	.+2880   	; 0x2350 <udd_set_setup_payload>
    1810:	2b c0       	rjmp	.+86     	; 0x1868 <udc_process_setup+0x354>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1812:	99 27       	eor	r25, r25
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	71 f0       	breq	.+28     	; 0x1836 <udc_process_setup+0x322>
    181a:	38 f0       	brcs	.+14     	; 0x182a <udc_process_setup+0x316>
    181c:	02 97       	sbiw	r24, 0x02	; 2
    181e:	09 f0       	breq	.+2      	; 0x1822 <udc_process_setup+0x30e>
    1820:	6c c1       	rjmp	.+728    	; 0x1afa <udc_process_setup+0x5e6>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1822:	8e e8       	ldi	r24, 0x8E	; 142
    1824:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1826:	28 e1       	ldi	r18, 0x18	; 24
    1828:	09 c0       	rjmp	.+18     	; 0x183c <udc_process_setup+0x328>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    182a:	64 e0       	ldi	r22, 0x04	; 4
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	82 eb       	ldi	r24, 0xB2	; 178
    1830:	90 e2       	ldi	r25, 0x20	; 32
    1832:	8e d5       	rcall	.+2844   	; 0x2350 <udd_set_setup_payload>
    1834:	19 c0       	rjmp	.+50     	; 0x1868 <udc_process_setup+0x354>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1836:	87 ea       	ldi	r24, 0xA7	; 167
    1838:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    183a:	29 e0       	ldi	r18, 0x09	; 9
    183c:	38 2f       	mov	r19, r24
    183e:	ae e5       	ldi	r26, 0x5E	; 94
    1840:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1842:	e8 2f       	mov	r30, r24
    1844:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1846:	81 91       	ld	r24, Z+
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	8d 93       	st	X+, r24
    184c:	9d 93       	st	X+, r25
    184e:	8e 2f       	mov	r24, r30
    1850:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1852:	82 17       	cp	r24, r18
    1854:	c0 f3       	brcs	.-16     	; 0x1846 <udc_process_setup+0x332>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1856:	62 2f       	mov	r22, r18
    1858:	66 0f       	add	r22, r22
    185a:	6e 5f       	subi	r22, 0xFE	; 254
    185c:	60 93 5c 20 	sts	0x205C, r22	; 0x80205c <udc_string_desc>
		udd_set_setup_payload(
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	8c e5       	ldi	r24, 0x5C	; 92
    1864:	90 e2       	ldi	r25, 0x20	; 32
    1866:	74 d5       	rcall	.+2792   	; 0x2350 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1868:	e2 e7       	ldi	r30, 0x72	; 114
    186a:	f4 e2       	ldi	r31, 0x24	; 36
    186c:	86 81       	ldd	r24, Z+6	; 0x06
    186e:	97 81       	ldd	r25, Z+7	; 0x07
    1870:	22 85       	ldd	r18, Z+10	; 0x0a
    1872:	33 85       	ldd	r19, Z+11	; 0x0b
    1874:	82 17       	cp	r24, r18
    1876:	93 07       	cpc	r25, r19
    1878:	08 f0       	brcs	.+2      	; 0x187c <udc_process_setup+0x368>
    187a:	bc c1       	rjmp	.+888    	; 0x1bf4 <udc_process_setup+0x6e0>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    187c:	80 93 7c 24 	sts	0x247C, r24	; 0x80247c <udd_g_ctrlreq+0xa>
    1880:	90 93 7d 24 	sts	0x247D, r25	; 0x80247d <udd_g_ctrlreq+0xb>
    1884:	b7 c1       	rjmp	.+878    	; 0x1bf4 <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1886:	21 30       	cpi	r18, 0x01	; 1
    1888:	31 05       	cpc	r19, r1
    188a:	09 f0       	breq	.+2      	; 0x188e <udc_process_setup+0x37a>
    188c:	36 c1       	rjmp	.+620    	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	8c ec       	ldi	r24, 0xCC	; 204
    1894:	90 e2       	ldi	r25, 0x20	; 32
    1896:	5c d5       	rcall	.+2744   	; 0x2350 <udd_set_setup_payload>
    1898:	ad c1       	rjmp	.+858    	; 0x1bf4 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	e1 f5       	brne	.+120    	; 0x1916 <udc_process_setup+0x402>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    189e:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    18a2:	9a 30       	cpi	r25, 0x0A	; 10
    18a4:	c1 f5       	brne	.+112    	; 0x1916 <udc_process_setup+0x402>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    18a6:	21 30       	cpi	r18, 0x01	; 1
    18a8:	31 05       	cpc	r19, r1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <udc_process_setup+0x39a>
    18ac:	26 c1       	rjmp	.+588    	; 0x1afa <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18ae:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    18b2:	88 23       	and	r24, r24
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <udc_process_setup+0x3a4>
    18b6:	21 c1       	rjmp	.+578    	; 0x1afa <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18b8:	c0 91 76 24 	lds	r28, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    18bc:	d0 91 77 24 	lds	r29, 0x2477	; 0x802477 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18c0:	00 91 ca 20 	lds	r16, 0x20CA	; 0x8020ca <udc_ptr_conf>
    18c4:	10 91 cb 20 	lds	r17, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    18c8:	d8 01       	movw	r26, r16
    18ca:	ed 91       	ld	r30, X+
    18cc:	fc 91       	ld	r31, X
    18ce:	84 81       	ldd	r24, Z+4	; 0x04
    18d0:	c8 17       	cp	r28, r24
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <udc_process_setup+0x3c2>
    18d4:	12 c1       	rjmp	.+548    	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	8c 2f       	mov	r24, r28
    18da:	12 dd       	rcall	.-1500   	; 0x1300 <udc_update_iface_desc>
    18dc:	88 23       	and	r24, r24
    18de:	09 f4       	brne	.+2      	; 0x18e2 <udc_process_setup+0x3ce>
    18e0:	0c c1       	rjmp	.+536    	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    18e2:	ce 01       	movw	r24, r28
    18e4:	99 27       	eor	r25, r25
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	d8 01       	movw	r26, r16
    18ec:	12 96       	adiw	r26, 0x02	; 2
    18ee:	ed 91       	ld	r30, X+
    18f0:	fc 91       	ld	r31, X
    18f2:	13 97       	sbiw	r26, 0x03	; 3
    18f4:	e8 0f       	add	r30, r24
    18f6:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    18f8:	01 90       	ld	r0, Z+
    18fa:	f0 81       	ld	r31, Z
    18fc:	e0 2d       	mov	r30, r0
    18fe:	86 81       	ldd	r24, Z+6	; 0x06
    1900:	97 81       	ldd	r25, Z+7	; 0x07
    1902:	fc 01       	movw	r30, r24
    1904:	09 95       	icall
    1906:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	8e ec       	ldi	r24, 0xCE	; 206
    1910:	90 e2       	ldi	r25, 0x20	; 32
    1912:	1e d5       	rcall	.+2620   	; 0x2350 <udd_set_setup_payload>
    1914:	6f c1       	rjmp	.+734    	; 0x1bf4 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1916:	82 30       	cpi	r24, 0x02	; 2
    1918:	09 f0       	breq	.+2      	; 0x191c <udc_process_setup+0x408>
    191a:	ef c0       	rjmp	.+478    	; 0x1afa <udc_process_setup+0x5e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    191c:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1920:	81 11       	cpse	r24, r1
    1922:	e4 c0       	rjmp	.+456    	; 0x1aec <udc_process_setup+0x5d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	09 f0       	breq	.+2      	; 0x192c <udc_process_setup+0x418>
    192a:	e7 c0       	rjmp	.+462    	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    192c:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    1930:	8b d5       	rcall	.+2838   	; 0x2448 <udd_ep_is_halted>
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udc_ep_status.5523>
    1938:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <udc_ep_status.5523+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    193c:	62 e0       	ldi	r22, 0x02	; 2
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	86 ec       	ldi	r24, 0xC6	; 198
    1942:	90 e2       	ldi	r25, 0x20	; 32
    1944:	05 d5       	rcall	.+2570   	; 0x2350 <udd_set_setup_payload>
    1946:	56 c1       	rjmp	.+684    	; 0x1bf4 <udc_process_setup+0x6e0>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1948:	8f 71       	andi	r24, 0x1F	; 31
    194a:	09 f0       	breq	.+2      	; 0x194e <udc_process_setup+0x43a>
    194c:	83 c0       	rjmp	.+262    	; 0x1a54 <udc_process_setup+0x540>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    194e:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1952:	93 30       	cpi	r25, 0x03	; 3
    1954:	09 f4       	brne	.+2      	; 0x1958 <udc_process_setup+0x444>
    1956:	cc c0       	rjmp	.+408    	; 0x1af0 <udc_process_setup+0x5dc>
    1958:	18 f4       	brcc	.+6      	; 0x1960 <udc_process_setup+0x44c>
    195a:	91 30       	cpi	r25, 0x01	; 1
    195c:	a1 f0       	breq	.+40     	; 0x1986 <udc_process_setup+0x472>
    195e:	7a c0       	rjmp	.+244    	; 0x1a54 <udc_process_setup+0x540>
    1960:	95 30       	cpi	r25, 0x05	; 5
    1962:	19 f0       	breq	.+6      	; 0x196a <udc_process_setup+0x456>
    1964:	99 30       	cpi	r25, 0x09	; 9
    1966:	39 f1       	breq	.+78     	; 0x19b6 <udc_process_setup+0x4a2>
    1968:	75 c0       	rjmp	.+234    	; 0x1a54 <udc_process_setup+0x540>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    196a:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    196e:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1972:	89 2b       	or	r24, r25
    1974:	09 f0       	breq	.+2      	; 0x1978 <udc_process_setup+0x464>
    1976:	c1 c0       	rjmp	.+386    	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1978:	8a e7       	ldi	r24, 0x7A	; 122
    197a:	99 e0       	ldi	r25, 0x09	; 9
    197c:	80 93 7e 24 	sts	0x247E, r24	; 0x80247e <udd_g_ctrlreq+0xc>
    1980:	90 93 7f 24 	sts	0x247F, r25	; 0x80247f <udd_g_ctrlreq+0xd>
    1984:	37 c1       	rjmp	.+622    	; 0x1bf4 <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1986:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    198a:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    198e:	89 2b       	or	r24, r25
    1990:	09 f0       	breq	.+2      	; 0x1994 <udc_process_setup+0x480>
    1992:	b3 c0       	rjmp	.+358    	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1994:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1998:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	09 f0       	breq	.+2      	; 0x19a2 <udc_process_setup+0x48e>
    19a0:	ac c0       	rjmp	.+344    	; 0x1afa <udc_process_setup+0x5e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    19a2:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <udc_device_status>
    19a6:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <udc_device_status+0x1>
    19aa:	8d 7f       	andi	r24, 0xFD	; 253
    19ac:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <udc_device_status>
    19b0:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <udc_device_status+0x1>
    19b4:	1f c1       	rjmp	.+574    	; 0x1bf4 <udc_process_setup+0x6e0>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    19b6:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    19ba:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    19be:	89 2b       	or	r24, r25
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <udc_process_setup+0x4b0>
    19c2:	9b c0       	rjmp	.+310    	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    19c4:	c2 d4       	rcall	.+2436   	; 0x234a <udd_getaddress>
    19c6:	88 23       	and	r24, r24
    19c8:	09 f4       	brne	.+2      	; 0x19cc <udc_process_setup+0x4b8>
    19ca:	97 c0       	rjmp	.+302    	; 0x1afa <udc_process_setup+0x5e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    19cc:	20 91 74 24 	lds	r18, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    19d0:	30 91 75 24 	lds	r19, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    19d4:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    19d6:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    19da:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    19de:	81 89       	ldd	r24, Z+17	; 0x11
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	82 17       	cp	r24, r18
    19e4:	93 07       	cpc	r25, r19
    19e6:	08 f4       	brcc	.+2      	; 0x19ea <udc_process_setup+0x4d6>
    19e8:	88 c0       	rjmp	.+272    	; 0x1afa <udc_process_setup+0x5e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    19ea:	3f dd       	rcall	.-1410   	; 0x146a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    19ec:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    19f0:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    19f4:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <udc_num_configuration>
	if (udc_num_configuration == 0) {
    19f8:	88 23       	and	r24, r24
    19fa:	09 f4       	brne	.+2      	; 0x19fe <udc_process_setup+0x4ea>
    19fc:	fb c0       	rjmp	.+502    	; 0x1bf4 <udc_process_setup+0x6e0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    19fe:	99 27       	eor	r25, r25
    1a00:	81 50       	subi	r24, 0x01	; 1
    1a02:	90 4c       	sbci	r25, 0xC0	; 192
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    1a10:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    1a14:	e8 0f       	add	r30, r24
    1a16:	f9 1f       	adc	r31, r25
    1a18:	e0 93 ca 20 	sts	0x20CA, r30	; 0x8020ca <udc_ptr_conf>
    1a1c:	f0 93 cb 20 	sts	0x20CB, r31	; 0x8020cb <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a20:	01 90       	ld	r0, Z+
    1a22:	f0 81       	ld	r31, Z
    1a24:	e0 2d       	mov	r30, r0
    1a26:	84 81       	ldd	r24, Z+4	; 0x04
    1a28:	88 23       	and	r24, r24
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <udc_process_setup+0x51a>
    1a2c:	e3 c0       	rjmp	.+454    	; 0x1bf4 <udc_process_setup+0x6e0>
    1a2e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	8c 2f       	mov	r24, r28
    1a34:	e1 dc       	rcall	.-1598   	; 0x13f8 <udc_iface_enable>
    1a36:	88 23       	and	r24, r24
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <udc_process_setup+0x528>
    1a3a:	5f c0       	rjmp	.+190    	; 0x1afa <udc_process_setup+0x5e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a3c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a3e:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <udc_ptr_conf>
    1a42:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1a46:	01 90       	ld	r0, Z+
    1a48:	f0 81       	ld	r31, Z
    1a4a:	e0 2d       	mov	r30, r0
    1a4c:	84 81       	ldd	r24, Z+4	; 0x04
    1a4e:	c8 17       	cp	r28, r24
    1a50:	78 f3       	brcs	.-34     	; 0x1a30 <udc_process_setup+0x51c>
    1a52:	d0 c0       	rjmp	.+416    	; 0x1bf4 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	e1 f4       	brne	.+56     	; 0x1a90 <udc_process_setup+0x57c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a58:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1a5c:	9b 30       	cpi	r25, 0x0B	; 11
    1a5e:	c1 f4       	brne	.+48     	; 0x1a90 <udc_process_setup+0x57c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1a60:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1a64:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1a68:	89 2b       	or	r24, r25
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <udc_process_setup+0x55a>
    1a6c:	46 c0       	rjmp	.+140    	; 0x1afa <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a6e:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    1a72:	88 23       	and	r24, r24
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <udc_process_setup+0x564>
    1a76:	41 c0       	rjmp	.+130    	; 0x1afa <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a78:	e2 e7       	ldi	r30, 0x72	; 114
    1a7a:	f4 e2       	ldi	r31, 0x24	; 36
    1a7c:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1a7e:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1a80:	8c 2f       	mov	r24, r28
    1a82:	78 dc       	rcall	.-1808   	; 0x1374 <udc_iface_disable>
    1a84:	88 23       	and	r24, r24
    1a86:	c9 f1       	breq	.+114    	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1a88:	6d 2f       	mov	r22, r29
    1a8a:	8c 2f       	mov	r24, r28
    1a8c:	b5 dc       	rcall	.-1686   	; 0x13f8 <udc_iface_enable>
    1a8e:	33 c0       	rjmp	.+102    	; 0x1af6 <udc_process_setup+0x5e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	99 f5       	brne	.+102    	; 0x1afa <udc_process_setup+0x5e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a94:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <udd_g_ctrlreq+0x1>
    1a98:	81 30       	cpi	r24, 0x01	; 1
    1a9a:	19 f0       	breq	.+6      	; 0x1aa2 <udc_process_setup+0x58e>
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	89 f0       	breq	.+34     	; 0x1ac2 <udc_process_setup+0x5ae>
    1aa0:	29 c0       	rjmp	.+82     	; 0x1af4 <udc_process_setup+0x5e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1aa2:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1aa6:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1aaa:	89 2b       	or	r24, r25
    1aac:	31 f5       	brne	.+76     	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1aae:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1ab2:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    1ab6:	89 2b       	or	r24, r25
    1ab8:	01 f5       	brne	.+64     	; 0x1afa <udc_process_setup+0x5e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1aba:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    1abe:	df d4       	rcall	.+2494   	; 0x247e <udd_ep_clear_halt>
    1ac0:	1a c0       	rjmp	.+52     	; 0x1af6 <udc_process_setup+0x5e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ac2:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1ac6:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1aca:	89 2b       	or	r24, r25
    1acc:	b1 f4       	brne	.+44     	; 0x1afa <udc_process_setup+0x5e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1ace:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x2>
    1ad2:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x3>
    1ad6:	89 2b       	or	r24, r25
    1ad8:	81 f4       	brne	.+32     	; 0x1afa <udc_process_setup+0x5e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ada:	c2 e7       	ldi	r28, 0x72	; 114
    1adc:	d4 e2       	ldi	r29, 0x24	; 36
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	bd d5       	rcall	.+2938   	; 0x265c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	20 d6       	rcall	.+3136   	; 0x2726 <udd_ep_set_halt>
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <udc_process_setup+0x5e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <udc_process_setup+0x5e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    1af4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1af6:	81 11       	cpse	r24, r1
    1af8:	7e c0       	rjmp	.+252    	; 0x1bf6 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1afa:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    1afe:	8f 71       	andi	r24, 0x1F	; 31
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	71 f5       	brne	.+92     	; 0x1b60 <udc_process_setup+0x64c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b04:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    1b08:	88 23       	and	r24, r24
    1b0a:	51 f1       	breq	.+84     	; 0x1b60 <udc_process_setup+0x64c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b0c:	00 91 76 24 	lds	r16, 0x2476	; 0x802476 <udd_g_ctrlreq+0x4>
    1b10:	10 91 77 24 	lds	r17, 0x2477	; 0x802477 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b14:	c0 91 ca 20 	lds	r28, 0x20CA	; 0x8020ca <udc_ptr_conf>
    1b18:	d0 91 cb 20 	lds	r29, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1b1c:	e8 81       	ld	r30, Y
    1b1e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b20:	84 81       	ldd	r24, Z+4	; 0x04
    1b22:	08 17       	cp	r16, r24
    1b24:	e8 f4       	brcc	.+58     	; 0x1b60 <udc_process_setup+0x64c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	80 2f       	mov	r24, r16
    1b2a:	ea db       	rcall	.-2092   	; 0x1300 <udc_update_iface_desc>
    1b2c:	88 23       	and	r24, r24
    1b2e:	c1 f0       	breq	.+48     	; 0x1b60 <udc_process_setup+0x64c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b30:	f8 01       	movw	r30, r16
    1b32:	ff 27       	eor	r31, r31
    1b34:	cf 01       	movw	r24, r30
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3e:	e8 0f       	add	r30, r24
    1b40:	f9 1f       	adc	r31, r25
    1b42:	c0 81       	ld	r28, Z
    1b44:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b46:	ee 81       	ldd	r30, Y+6	; 0x06
    1b48:	ff 81       	ldd	r31, Y+7	; 0x07
    1b4a:	09 95       	icall
    1b4c:	68 2f       	mov	r22, r24
    1b4e:	80 2f       	mov	r24, r16
    1b50:	d7 db       	rcall	.-2130   	; 0x1300 <udc_update_iface_desc>
    1b52:	88 23       	and	r24, r24
    1b54:	29 f0       	breq	.+10     	; 0x1b60 <udc_process_setup+0x64c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1b56:	ec 81       	ldd	r30, Y+4	; 0x04
    1b58:	fd 81       	ldd	r31, Y+5	; 0x05
    1b5a:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1b5c:	81 11       	cpse	r24, r1
    1b5e:	4b c0       	rjmp	.+150    	; 0x1bf6 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1b60:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    1b64:	8f 71       	andi	r24, 0x1F	; 31
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <udc_process_setup+0x658>
    1b6a:	40 c0       	rjmp	.+128    	; 0x1bec <udc_process_setup+0x6d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b6c:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    1b70:	88 23       	and	r24, r24
    1b72:	b1 f1       	breq	.+108    	; 0x1be0 <udc_process_setup+0x6cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b74:	a0 91 ca 20 	lds	r26, 0x20CA	; 0x8020ca <udc_ptr_conf>
    1b78:	b0 91 cb 20 	lds	r27, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1b7c:	ed 91       	ld	r30, X+
    1b7e:	fc 91       	ld	r31, X
    1b80:	11 97       	sbiw	r26, 0x01	; 1
    1b82:	84 81       	ldd	r24, Z+4	; 0x04
    1b84:	88 23       	and	r24, r24
    1b86:	71 f1       	breq	.+92     	; 0x1be4 <udc_process_setup+0x6d0>
    1b88:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b8a:	ec 2f       	mov	r30, r28
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	12 96       	adiw	r26, 0x02	; 2
    1b94:	8d 91       	ld	r24, X+
    1b96:	9c 91       	ld	r25, X
    1b98:	13 97       	sbiw	r26, 0x03	; 3
    1b9a:	e8 0f       	add	r30, r24
    1b9c:	f9 1f       	adc	r31, r25
    1b9e:	00 81       	ld	r16, Z
    1ba0:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ba2:	d8 01       	movw	r26, r16
    1ba4:	16 96       	adiw	r26, 0x06	; 6
    1ba6:	ed 91       	ld	r30, X+
    1ba8:	fc 91       	ld	r31, X
    1baa:	17 97       	sbiw	r26, 0x07	; 7
    1bac:	09 95       	icall
    1bae:	68 2f       	mov	r22, r24
    1bb0:	8c 2f       	mov	r24, r28
    1bb2:	a6 db       	rcall	.-2228   	; 0x1300 <udc_update_iface_desc>
    1bb4:	88 23       	and	r24, r24
    1bb6:	f9 f0       	breq	.+62     	; 0x1bf6 <udc_process_setup+0x6e2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1bb8:	d8 01       	movw	r26, r16
    1bba:	14 96       	adiw	r26, 0x04	; 4
    1bbc:	ed 91       	ld	r30, X+
    1bbe:	fc 91       	ld	r31, X
    1bc0:	15 97       	sbiw	r26, 0x05	; 5
    1bc2:	09 95       	icall
    1bc4:	81 11       	cpse	r24, r1
    1bc6:	17 c0       	rjmp	.+46     	; 0x1bf6 <udc_process_setup+0x6e2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1bc8:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bca:	a0 91 ca 20 	lds	r26, 0x20CA	; 0x8020ca <udc_ptr_conf>
    1bce:	b0 91 cb 20 	lds	r27, 0x20CB	; 0x8020cb <udc_ptr_conf+0x1>
    1bd2:	ed 91       	ld	r30, X+
    1bd4:	fc 91       	ld	r31, X
    1bd6:	11 97       	sbiw	r26, 0x01	; 1
    1bd8:	94 81       	ldd	r25, Z+4	; 0x04
    1bda:	c9 17       	cp	r28, r25
    1bdc:	b0 f2       	brcs	.-84     	; 0x1b8a <udc_process_setup+0x676>
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <udc_process_setup+0x6e2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	09 c0       	rjmp	.+18     	; 0x1bf6 <udc_process_setup+0x6e2>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	07 c0       	rjmp	.+14     	; 0x1bf6 <udc_process_setup+0x6e2>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	05 c0       	rjmp	.+10     	; 0x1bf6 <udc_process_setup+0x6e2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <udc_process_setup+0x6e2>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	01 c0       	rjmp	.+2      	; 0x1bf6 <udc_process_setup+0x6e2>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	08 95       	ret

00001c00 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1c00:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1c02:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1c04:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1c06:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1c08:	60 83       	st	Z, r22
	ret                             // Return to caller
    1c0a:	08 95       	ret

00001c0c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1c0c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1c10:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1c12:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1c14:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1c18:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1c1a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1c1e:	08 95       	ret

00001c20 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1c20:	81 11       	cpse	r24, r1
    1c22:	22 c0       	rjmp	.+68     	; 0x1c68 <udd_sleep_mode+0x48>
    1c24:	90 91 64 22 	lds	r25, 0x2264	; 0x802264 <udd_b_idle>
    1c28:	99 23       	and	r25, r25
    1c2a:	d9 f0       	breq	.+54     	; 0x1c62 <udd_sleep_mode+0x42>
    1c2c:	90 91 61 2e 	lds	r25, 0x2E61	; 0x802e61 <sleepmgr_locks+0x1>
    1c30:	91 11       	cpse	r25, r1
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <udd_sleep_mode+0x16>
    1c34:	ff cf       	rjmp	.-2      	; 0x1c34 <udd_sleep_mode+0x14>
    1c36:	2f b7       	in	r18, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	e0 e6       	ldi	r30, 0x60	; 96
    1c3c:	fe e2       	ldi	r31, 0x2E	; 46
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	91 50       	subi	r25, 0x01	; 1
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	2f bf       	out	0x3f, r18	; 63
    1c46:	0d c0       	rjmp	.+26     	; 0x1c62 <udd_sleep_mode+0x42>
    1c48:	90 91 61 2e 	lds	r25, 0x2E61	; 0x802e61 <sleepmgr_locks+0x1>
    1c4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <udd_sleep_mode+0x32>
    1c50:	ff cf       	rjmp	.-2      	; 0x1c50 <udd_sleep_mode+0x30>
    1c52:	2f b7       	in	r18, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	e0 e6       	ldi	r30, 0x60	; 96
    1c58:	fe e2       	ldi	r31, 0x2E	; 46
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	9f 5f       	subi	r25, 0xFF	; 255
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	2f bf       	out	0x3f, r18	; 63
    1c62:	80 93 64 22 	sts	0x2264, r24	; 0x802264 <udd_b_idle>
    1c66:	08 95       	ret
    1c68:	90 91 64 22 	lds	r25, 0x2264	; 0x802264 <udd_b_idle>
    1c6c:	99 23       	and	r25, r25
    1c6e:	61 f3       	breq	.-40     	; 0x1c48 <udd_sleep_mode+0x28>
    1c70:	f8 cf       	rjmp	.-16     	; 0x1c62 <udd_sleep_mode+0x42>

00001c72 <udd_ctrl_init>:
    1c72:	0f 93       	push	r16
    1c74:	e8 ec       	ldi	r30, 0xC8	; 200
    1c76:	f4 e0       	ldi	r31, 0x04	; 4
    1c78:	80 81       	ld	r24, Z
    1c7a:	8f 7d       	andi	r24, 0xDF	; 223
    1c7c:	80 83       	st	Z, r24
    1c7e:	80 81       	ld	r24, Z
    1c80:	8f 7d       	andi	r24, 0xDF	; 223
    1c82:	80 83       	st	Z, r24
    1c84:	e8 e2       	ldi	r30, 0x28	; 40
    1c86:	f2 e2       	ldi	r31, 0x22	; 34
    1c88:	02 e0       	ldi	r16, 0x02	; 2
    1c8a:	05 93       	las	Z, r16
    1c8c:	10 92 2a 22 	sts	0x222A, r1	; 0x80222a <udd_sram+0x1a>
    1c90:	10 92 2b 22 	sts	0x222B, r1	; 0x80222b <udd_sram+0x1b>
    1c94:	00 e2       	ldi	r16, 0x20	; 32
    1c96:	06 93       	lac	Z, r16
    1c98:	00 e4       	ldi	r16, 0x40	; 64
    1c9a:	06 93       	lac	Z, r16
    1c9c:	e0 e2       	ldi	r30, 0x20	; 32
    1c9e:	f2 e2       	ldi	r31, 0x22	; 34
    1ca0:	00 e2       	ldi	r16, 0x20	; 32
    1ca2:	06 93       	lac	Z, r16
    1ca4:	00 e4       	ldi	r16, 0x40	; 64
    1ca6:	06 93       	lac	Z, r16
    1ca8:	e2 e7       	ldi	r30, 0x72	; 114
    1caa:	f4 e2       	ldi	r31, 0x24	; 36
    1cac:	14 86       	std	Z+12, r1	; 0x0c
    1cae:	15 86       	std	Z+13, r1	; 0x0d
    1cb0:	16 86       	std	Z+14, r1	; 0x0e
    1cb2:	17 86       	std	Z+15, r1	; 0x0f
    1cb4:	12 86       	std	Z+10, r1	; 0x0a
    1cb6:	13 86       	std	Z+11, r1	; 0x0b
    1cb8:	10 92 0d 22 	sts	0x220D, r1	; 0x80220d <udd_ep_control_state>
    1cbc:	0f 91       	pop	r16
    1cbe:	08 95       	ret

00001cc0 <udd_ctrl_stall_data>:
    1cc0:	0f 93       	push	r16
    1cc2:	85 e0       	ldi	r24, 0x05	; 5
    1cc4:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1cc8:	e9 e2       	ldi	r30, 0x29	; 41
    1cca:	f2 e2       	ldi	r31, 0x22	; 34
    1ccc:	04 e0       	ldi	r16, 0x04	; 4
    1cce:	05 93       	las	Z, r16
    1cd0:	e1 e2       	ldi	r30, 0x21	; 33
    1cd2:	f2 e2       	ldi	r31, 0x22	; 34
    1cd4:	04 e0       	ldi	r16, 0x04	; 4
    1cd6:	05 93       	las	Z, r16
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <udd_ctrl_send_zlp_in>:
    1cdc:	0f 93       	push	r16
    1cde:	83 e0       	ldi	r24, 0x03	; 3
    1ce0:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1ce4:	10 92 2a 22 	sts	0x222A, r1	; 0x80222a <udd_sram+0x1a>
    1ce8:	10 92 2b 22 	sts	0x222B, r1	; 0x80222b <udd_sram+0x1b>
    1cec:	e8 e2       	ldi	r30, 0x28	; 40
    1cee:	f2 e2       	ldi	r31, 0x22	; 34
    1cf0:	02 e0       	ldi	r16, 0x02	; 2
    1cf2:	06 93       	lac	Z, r16
    1cf4:	0f 91       	pop	r16
    1cf6:	08 95       	ret

00001cf8 <udd_ctrl_endofrequest>:
    1cf8:	e0 91 7e 24 	lds	r30, 0x247E	; 0x80247e <udd_g_ctrlreq+0xc>
    1cfc:	f0 91 7f 24 	lds	r31, 0x247F	; 0x80247f <udd_g_ctrlreq+0xd>
    1d00:	30 97       	sbiw	r30, 0x00	; 0
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <udd_ctrl_endofrequest+0xe>
    1d04:	09 95       	icall
    1d06:	08 95       	ret

00001d08 <udd_ctrl_in_sent>:
    1d08:	0f 93       	push	r16
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    1d12:	83 30       	cpi	r24, 0x03	; 3
    1d14:	19 f4       	brne	.+6      	; 0x1d1c <udd_ctrl_in_sent+0x14>
    1d16:	f0 df       	rcall	.-32     	; 0x1cf8 <udd_ctrl_endofrequest>
    1d18:	ac df       	rcall	.-168    	; 0x1c72 <udd_ctrl_init>
    1d1a:	5e c0       	rjmp	.+188    	; 0x1dd8 <udd_ctrl_in_sent+0xd0>
    1d1c:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udd_ctrl_payload_nb_trans>
    1d20:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1d24:	c0 91 7c 24 	lds	r28, 0x247C	; 0x80247c <udd_g_ctrlreq+0xa>
    1d28:	d0 91 7d 24 	lds	r29, 0x247D	; 0x80247d <udd_g_ctrlreq+0xb>
    1d2c:	c8 1b       	sub	r28, r24
    1d2e:	d9 0b       	sbc	r29, r25
    1d30:	71 f5       	brne	.+92     	; 0x1d8e <udd_ctrl_in_sent+0x86>
    1d32:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    1d36:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    1d3a:	82 0f       	add	r24, r18
    1d3c:	93 1f       	adc	r25, r19
    1d3e:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    1d42:	90 93 0c 22 	sts	0x220C, r25	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    1d46:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1d4a:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1d4e:	82 17       	cp	r24, r18
    1d50:	93 07       	cpc	r25, r19
    1d52:	21 f0       	breq	.+8      	; 0x1d5c <udd_ctrl_in_sent+0x54>
    1d54:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <b_shortpacket.5272>
    1d58:	88 23       	and	r24, r24
    1d5a:	41 f0       	breq	.+16     	; 0x1d6c <udd_ctrl_in_sent+0x64>
    1d5c:	84 e0       	ldi	r24, 0x04	; 4
    1d5e:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1d62:	e0 e2       	ldi	r30, 0x20	; 32
    1d64:	f2 e2       	ldi	r31, 0x22	; 34
    1d66:	02 e0       	ldi	r16, 0x02	; 2
    1d68:	06 93       	lac	Z, r16
    1d6a:	36 c0       	rjmp	.+108    	; 0x1dd8 <udd_ctrl_in_sent+0xd0>
    1d6c:	e0 91 80 24 	lds	r30, 0x2480	; 0x802480 <udd_g_ctrlreq+0xe>
    1d70:	f0 91 81 24 	lds	r31, 0x2481	; 0x802481 <udd_g_ctrlreq+0xf>
    1d74:	30 97       	sbiw	r30, 0x00	; 0
    1d76:	99 f0       	breq	.+38     	; 0x1d9e <udd_ctrl_in_sent+0x96>
    1d78:	09 95       	icall
    1d7a:	88 23       	and	r24, r24
    1d7c:	81 f0       	breq	.+32     	; 0x1d9e <udd_ctrl_in_sent+0x96>
    1d7e:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_payload_nb_trans>
    1d82:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1d86:	c0 91 7c 24 	lds	r28, 0x247C	; 0x80247c <udd_g_ctrlreq+0xa>
    1d8a:	d0 91 7d 24 	lds	r29, 0x247D	; 0x80247d <udd_g_ctrlreq+0xb>
    1d8e:	c0 34       	cpi	r28, 0x40	; 64
    1d90:	d1 05       	cpc	r29, r1
    1d92:	28 f0       	brcs	.+10     	; 0x1d9e <udd_ctrl_in_sent+0x96>
    1d94:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <b_shortpacket.5272>
    1d98:	c0 e4       	ldi	r28, 0x40	; 64
    1d9a:	d0 e0       	ldi	r29, 0x00	; 0
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <udd_ctrl_in_sent+0x9c>
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <b_shortpacket.5272>
    1da4:	e0 e1       	ldi	r30, 0x10	; 16
    1da6:	f2 e2       	ldi	r31, 0x22	; 34
    1da8:	c2 8f       	std	Z+26, r28	; 0x1a
    1daa:	d3 8f       	std	Z+27, r29	; 0x1b
    1dac:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udd_ctrl_payload_nb_trans>
    1db0:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1db4:	20 91 7a 24 	lds	r18, 0x247A	; 0x80247a <udd_g_ctrlreq+0x8>
    1db8:	30 91 7b 24 	lds	r19, 0x247B	; 0x80247b <udd_g_ctrlreq+0x9>
    1dbc:	28 0f       	add	r18, r24
    1dbe:	39 1f       	adc	r19, r25
    1dc0:	24 8f       	std	Z+28, r18	; 0x1c
    1dc2:	35 8f       	std	Z+29, r19	; 0x1d
    1dc4:	c8 0f       	add	r28, r24
    1dc6:	d9 1f       	adc	r29, r25
    1dc8:	c0 93 09 22 	sts	0x2209, r28	; 0x802209 <udd_ctrl_payload_nb_trans>
    1dcc:	d0 93 0a 22 	sts	0x220A, r29	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1dd0:	e8 e2       	ldi	r30, 0x28	; 40
    1dd2:	f2 e2       	ldi	r31, 0x22	; 34
    1dd4:	02 e0       	ldi	r16, 0x02	; 2
    1dd6:	06 93       	lac	Z, r16
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <udd_ep_get_size>:
    1de0:	fc 01       	movw	r30, r24
    1de2:	81 81       	ldd	r24, Z+1	; 0x01
    1de4:	e8 2f       	mov	r30, r24
    1de6:	e7 70       	andi	r30, 0x07	; 7
    1de8:	8e 2f       	mov	r24, r30
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	fc 01       	movw	r30, r24
    1dee:	31 97       	sbiw	r30, 0x01	; 1
    1df0:	e7 30       	cpi	r30, 0x07	; 7
    1df2:	f1 05       	cpc	r31, r1
    1df4:	c0 f4       	brcc	.+48     	; 0x1e26 <udd_ep_get_size+0x46>
    1df6:	e2 5e       	subi	r30, 0xE2	; 226
    1df8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfa:	8d c6       	rjmp	.+3354   	; 0x2b16 <__tablejump2__>
    1dfc:	80 e1       	ldi	r24, 0x10	; 16
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	08 95       	ret
    1e02:	80 e2       	ldi	r24, 0x20	; 32
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	08 95       	ret
    1e08:	80 e4       	ldi	r24, 0x40	; 64
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	08 95       	ret
    1e0e:	80 e8       	ldi	r24, 0x80	; 128
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	08 95       	ret
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	08 95       	ret
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	92 e0       	ldi	r25, 0x02	; 2
    1e1e:	08 95       	ret
    1e20:	8f ef       	ldi	r24, 0xFF	; 255
    1e22:	93 e0       	ldi	r25, 0x03	; 3
    1e24:	08 95       	ret
    1e26:	88 e0       	ldi	r24, 0x08	; 8
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	08 95       	ret

00001e2c <udd_ep_get_job>:
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	2f 70       	andi	r18, 0x0F	; 15
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	22 0f       	add	r18, r18
    1e34:	33 1f       	adc	r19, r19
    1e36:	08 2e       	mov	r0, r24
    1e38:	00 0c       	add	r0, r0
    1e3a:	99 0b       	sbc	r25, r25
    1e3c:	88 27       	eor	r24, r24
    1e3e:	99 0f       	add	r25, r25
    1e40:	88 1f       	adc	r24, r24
    1e42:	99 27       	eor	r25, r25
    1e44:	82 0f       	add	r24, r18
    1e46:	93 1f       	adc	r25, r19
    1e48:	02 97       	sbiw	r24, 0x02	; 2
    1e4a:	9c 01       	movw	r18, r24
    1e4c:	22 0f       	add	r18, r18
    1e4e:	33 1f       	adc	r19, r19
    1e50:	22 0f       	add	r18, r18
    1e52:	33 1f       	adc	r19, r19
    1e54:	22 0f       	add	r18, r18
    1e56:	33 1f       	adc	r19, r19
    1e58:	82 0f       	add	r24, r18
    1e5a:	93 1f       	adc	r25, r19
    1e5c:	8d 56       	subi	r24, 0x6D	; 109
    1e5e:	9e 4d       	sbci	r25, 0xDE	; 222
    1e60:	08 95       	ret

00001e62 <udd_ctrl_interrupt_tc_setup>:
    1e62:	0f 93       	push	r16
    1e64:	cf 93       	push	r28
    1e66:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1e6a:	80 ff       	sbrs	r24, 0
    1e6c:	62 c0       	rjmp	.+196    	; 0x1f32 <udd_ctrl_interrupt_tc_setup+0xd0>
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1e74:	e0 e2       	ldi	r30, 0x20	; 32
    1e76:	f2 e2       	ldi	r31, 0x22	; 34
    1e78:	00 e8       	ldi	r16, 0x80	; 128
    1e7a:	06 93       	lac	Z, r16
    1e7c:	e8 e2       	ldi	r30, 0x28	; 40
    1e7e:	f2 e2       	ldi	r31, 0x22	; 34
    1e80:	00 e8       	ldi	r16, 0x80	; 128
    1e82:	06 93       	lac	Z, r16
    1e84:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1e88:	e0 e2       	ldi	r30, 0x20	; 32
    1e8a:	f2 e2       	ldi	r31, 0x22	; 34
    1e8c:	00 e1       	ldi	r16, 0x10	; 16
    1e8e:	06 93       	lac	Z, r16
    1e90:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    1e94:	88 23       	and	r24, r24
    1e96:	29 f0       	breq	.+10     	; 0x1ea2 <udd_ctrl_interrupt_tc_setup+0x40>
    1e98:	83 50       	subi	r24, 0x03	; 3
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	08 f4       	brcc	.+2      	; 0x1ea0 <udd_ctrl_interrupt_tc_setup+0x3e>
    1e9e:	2c df       	rcall	.-424    	; 0x1cf8 <udd_ctrl_endofrequest>
    1ea0:	e8 de       	rcall	.-560    	; 0x1c72 <udd_ctrl_init>
    1ea2:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udd_sram+0x12>
    1ea6:	90 91 23 22 	lds	r25, 0x2223	; 0x802223 <udd_sram+0x13>
    1eaa:	08 97       	sbiw	r24, 0x08	; 8
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <udd_ctrl_interrupt_tc_setup+0x4e>
    1eae:	43 c0       	rjmp	.+134    	; 0x1f36 <udd_ctrl_interrupt_tc_setup+0xd4>
    1eb0:	88 e0       	ldi	r24, 0x08	; 8
    1eb2:	e9 ec       	ldi	r30, 0xC9	; 201
    1eb4:	f1 e2       	ldi	r31, 0x21	; 33
    1eb6:	a2 e7       	ldi	r26, 0x72	; 114
    1eb8:	b4 e2       	ldi	r27, 0x24	; 36
    1eba:	01 90       	ld	r0, Z+
    1ebc:	0d 92       	st	X+, r0
    1ebe:	8a 95       	dec	r24
    1ec0:	e1 f7       	brne	.-8      	; 0x1eba <udd_ctrl_interrupt_tc_setup+0x58>
    1ec2:	e8 ec       	ldi	r30, 0xC8	; 200
    1ec4:	f4 e0       	ldi	r31, 0x04	; 4
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 62       	ori	r24, 0x20	; 32
    1eca:	80 83       	st	Z, r24
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 62       	ori	r24, 0x20	; 32
    1ed0:	80 83       	st	Z, r24
    1ed2:	20 db       	rcall	.-2496   	; 0x1514 <udc_process_setup>
    1ed4:	c8 2f       	mov	r28, r24
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <udd_ctrl_interrupt_tc_setup+0x7e>
    1eda:	f2 de       	rcall	.-540    	; 0x1cc0 <udd_ctrl_stall_data>
    1edc:	c1 e0       	ldi	r28, 0x01	; 1
    1ede:	2c c0       	rjmp	.+88     	; 0x1f38 <udd_ctrl_interrupt_tc_setup+0xd6>
    1ee0:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq>
    1ee4:	88 23       	and	r24, r24
    1ee6:	6c f4       	brge	.+26     	; 0x1f02 <udd_ctrl_interrupt_tc_setup+0xa0>
    1ee8:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    1eec:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    1ef0:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_payload_nb_trans>
    1ef4:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1efe:	04 df       	rcall	.-504    	; 0x1d08 <udd_ctrl_in_sent>
    1f00:	1b c0       	rjmp	.+54     	; 0x1f38 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f02:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    1f06:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    1f0a:	89 2b       	or	r24, r25
    1f0c:	11 f4       	brne	.+4      	; 0x1f12 <udd_ctrl_interrupt_tc_setup+0xb0>
    1f0e:	e6 de       	rcall	.-564    	; 0x1cdc <udd_ctrl_send_zlp_in>
    1f10:	13 c0       	rjmp	.+38     	; 0x1f38 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f12:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    1f16:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    1f1a:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_payload_nb_trans>
    1f1e:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1f28:	e0 e2       	ldi	r30, 0x20	; 32
    1f2a:	f2 e2       	ldi	r31, 0x22	; 34
    1f2c:	02 e0       	ldi	r16, 0x02	; 2
    1f2e:	06 93       	lac	Z, r16
    1f30:	03 c0       	rjmp	.+6      	; 0x1f38 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f32:	c0 e0       	ldi	r28, 0x00	; 0
    1f34:	01 c0       	rjmp	.+2      	; 0x1f38 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f36:	c1 e0       	ldi	r28, 0x01	; 1
    1f38:	8c 2f       	mov	r24, r28
    1f3a:	cf 91       	pop	r28
    1f3c:	0f 91       	pop	r16
    1f3e:	08 95       	ret

00001f40 <udd_ep_trans_complet>:
    1f40:	8f 92       	push	r8
    1f42:	9f 92       	push	r9
    1f44:	af 92       	push	r10
    1f46:	bf 92       	push	r11
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	d8 2e       	mov	r13, r24
    1f58:	69 df       	rcall	.-302    	; 0x1e2c <udd_ep_get_job>
    1f5a:	8c 01       	movw	r16, r24
    1f5c:	bd 2c       	mov	r11, r13
    1f5e:	bb 1c       	adc	r11, r11
    1f60:	bb 24       	eor	r11, r11
    1f62:	bb 1c       	adc	r11, r11
    1f64:	cd 2d       	mov	r28, r13
    1f66:	cf 70       	andi	r28, 0x0F	; 15
    1f68:	d0 e0       	ldi	r29, 0x00	; 0
    1f6a:	cc 0f       	add	r28, r28
    1f6c:	dd 1f       	adc	r29, r29
    1f6e:	cb 0d       	add	r28, r11
    1f70:	d1 1d       	adc	r29, r1
    1f72:	ce 01       	movw	r24, r28
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	9c 01       	movw	r18, r24
    1f82:	20 5e       	subi	r18, 0xE0	; 224
    1f84:	3d 4d       	sbci	r19, 0xDD	; 221
    1f86:	79 01       	movw	r14, r18
    1f88:	c9 01       	movw	r24, r18
    1f8a:	2a df       	rcall	.-428    	; 0x1de0 <udd_ep_get_size>
    1f8c:	4c 01       	movw	r8, r24
    1f8e:	bb 20       	and	r11, r11
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <udd_ep_trans_complet+0x54>
    1f92:	70 c0       	rjmp	.+224    	; 0x2074 <udd_ep_trans_complet+0x134>
    1f94:	fe 01       	movw	r30, r28
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	e0 5f       	subi	r30, 0xF0	; 240
    1fa4:	fd 4d       	sbci	r31, 0xDD	; 221
    1fa6:	26 89       	ldd	r18, Z+22	; 0x16
    1fa8:	37 89       	ldd	r19, Z+23	; 0x17
    1faa:	d8 01       	movw	r26, r16
    1fac:	15 96       	adiw	r26, 0x05	; 5
    1fae:	8d 91       	ld	r24, X+
    1fb0:	9c 91       	ld	r25, X
    1fb2:	16 97       	sbiw	r26, 0x06	; 6
    1fb4:	82 0f       	add	r24, r18
    1fb6:	93 1f       	adc	r25, r19
    1fb8:	15 96       	adiw	r26, 0x05	; 5
    1fba:	8d 93       	st	X+, r24
    1fbc:	9c 93       	st	X, r25
    1fbe:	16 97       	sbiw	r26, 0x06	; 6
    1fc0:	13 96       	adiw	r26, 0x03	; 3
    1fc2:	2d 91       	ld	r18, X+
    1fc4:	3c 91       	ld	r19, X
    1fc6:	14 97       	sbiw	r26, 0x04	; 4
    1fc8:	82 17       	cp	r24, r18
    1fca:	93 07       	cpc	r25, r19
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <udd_ep_trans_complet+0x90>
    1fce:	3c c0       	rjmp	.+120    	; 0x2048 <udd_ep_trans_complet+0x108>
    1fd0:	28 1b       	sub	r18, r24
    1fd2:	39 0b       	sbc	r19, r25
    1fd4:	21 15       	cp	r18, r1
    1fd6:	b4 e0       	ldi	r27, 0x04	; 4
    1fd8:	3b 07       	cpc	r19, r27
    1fda:	38 f0       	brcs	.+14     	; 0x1fea <udd_ep_trans_complet+0xaa>
    1fdc:	2f ef       	ldi	r18, 0xFF	; 255
    1fde:	33 e0       	ldi	r19, 0x03	; 3
    1fe0:	c9 01       	movw	r24, r18
    1fe2:	b4 01       	movw	r22, r8
    1fe4:	71 d5       	rcall	.+2786   	; 0x2ac8 <__udivmodhi4>
    1fe6:	28 1b       	sub	r18, r24
    1fe8:	39 0b       	sbc	r19, r25
    1fea:	f8 01       	movw	r30, r16
    1fec:	80 81       	ld	r24, Z
    1fee:	81 ff       	sbrs	r24, 1
    1ff0:	09 c0       	rjmp	.+18     	; 0x2004 <udd_ep_trans_complet+0xc4>
    1ff2:	c9 01       	movw	r24, r18
    1ff4:	b4 01       	movw	r22, r8
    1ff6:	68 d5       	rcall	.+2768   	; 0x2ac8 <__udivmodhi4>
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	89 2b       	or	r24, r25
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <udd_ep_trans_complet+0xc0>
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	84 2f       	mov	r24, r20
    2002:	01 c0       	rjmp	.+2      	; 0x2006 <udd_ep_trans_complet+0xc6>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	d8 01       	movw	r26, r16
    2008:	9c 91       	ld	r25, X
    200a:	80 fb       	bst	r24, 0
    200c:	91 f9       	bld	r25, 1
    200e:	9c 93       	st	X, r25
    2010:	cc 0f       	add	r28, r28
    2012:	dd 1f       	adc	r29, r29
    2014:	cc 0f       	add	r28, r28
    2016:	dd 1f       	adc	r29, r29
    2018:	cc 0f       	add	r28, r28
    201a:	dd 1f       	adc	r29, r29
    201c:	c0 5f       	subi	r28, 0xF0	; 240
    201e:	dd 4d       	sbci	r29, 0xDD	; 221
    2020:	1e 8a       	std	Y+22, r1	; 0x16
    2022:	1f 8a       	std	Y+23, r1	; 0x17
    2024:	2a 8b       	std	Y+18, r18	; 0x12
    2026:	3b 8b       	std	Y+19, r19	; 0x13
    2028:	11 96       	adiw	r26, 0x01	; 1
    202a:	2d 91       	ld	r18, X+
    202c:	3c 91       	ld	r19, X
    202e:	12 97       	sbiw	r26, 0x02	; 2
    2030:	15 96       	adiw	r26, 0x05	; 5
    2032:	8d 91       	ld	r24, X+
    2034:	9c 91       	ld	r25, X
    2036:	16 97       	sbiw	r26, 0x06	; 6
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	8c 8b       	std	Y+20, r24	; 0x14
    203e:	9d 8b       	std	Y+21, r25	; 0x15
    2040:	f7 01       	movw	r30, r14
    2042:	02 e0       	ldi	r16, 0x02	; 2
    2044:	06 93       	lac	Z, r16
    2046:	ca c0       	rjmp	.+404    	; 0x21dc <udd_ep_trans_complet+0x29c>
    2048:	d8 01       	movw	r26, r16
    204a:	8c 91       	ld	r24, X
    204c:	81 ff       	sbrs	r24, 1
    204e:	b3 c0       	rjmp	.+358    	; 0x21b6 <udd_ep_trans_complet+0x276>
    2050:	8d 7f       	andi	r24, 0xFD	; 253
    2052:	8c 93       	st	X, r24
    2054:	cc 0f       	add	r28, r28
    2056:	dd 1f       	adc	r29, r29
    2058:	cc 0f       	add	r28, r28
    205a:	dd 1f       	adc	r29, r29
    205c:	cc 0f       	add	r28, r28
    205e:	dd 1f       	adc	r29, r29
    2060:	c0 5f       	subi	r28, 0xF0	; 240
    2062:	dd 4d       	sbci	r29, 0xDD	; 221
    2064:	1e 8a       	std	Y+22, r1	; 0x16
    2066:	1f 8a       	std	Y+23, r1	; 0x17
    2068:	1a 8a       	std	Y+18, r1	; 0x12
    206a:	1b 8a       	std	Y+19, r1	; 0x13
    206c:	f7 01       	movw	r30, r14
    206e:	02 e0       	ldi	r16, 0x02	; 2
    2070:	06 93       	lac	Z, r16
    2072:	b4 c0       	rjmp	.+360    	; 0x21dc <udd_ep_trans_complet+0x29c>
    2074:	fe 01       	movw	r30, r28
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	e0 5f       	subi	r30, 0xF0	; 240
    2084:	fd 4d       	sbci	r31, 0xDD	; 221
    2086:	a2 88       	ldd	r10, Z+18	; 0x12
    2088:	b3 88       	ldd	r11, Z+19	; 0x13
    208a:	d8 01       	movw	r26, r16
    208c:	8c 91       	ld	r24, X
    208e:	82 ff       	sbrs	r24, 2
    2090:	19 c0       	rjmp	.+50     	; 0x20c4 <udd_ep_trans_complet+0x184>
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	ed 91       	ld	r30, X+
    2096:	fc 91       	ld	r31, X
    2098:	12 97       	sbiw	r26, 0x02	; 2
    209a:	15 96       	adiw	r26, 0x05	; 5
    209c:	2d 91       	ld	r18, X+
    209e:	3c 91       	ld	r19, X
    20a0:	16 97       	sbiw	r26, 0x06	; 6
    20a2:	13 96       	adiw	r26, 0x03	; 3
    20a4:	8d 91       	ld	r24, X+
    20a6:	9c 91       	ld	r25, X
    20a8:	14 97       	sbiw	r26, 0x04	; 4
    20aa:	b4 01       	movw	r22, r8
    20ac:	0d d5       	rcall	.+2586   	; 0x2ac8 <__udivmodhi4>
    20ae:	b0 e4       	ldi	r27, 0x40	; 64
    20b0:	db 9e       	mul	r13, r27
    20b2:	b0 01       	movw	r22, r0
    20b4:	11 24       	eor	r1, r1
    20b6:	6d 56       	subi	r22, 0x6D	; 109
    20b8:	7f 4d       	sbci	r23, 0xDF	; 223
    20ba:	ac 01       	movw	r20, r24
    20bc:	cf 01       	movw	r24, r30
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	2f d5       	rcall	.+2654   	; 0x2b22 <memcpy>
    20c4:	f8 01       	movw	r30, r16
    20c6:	25 81       	ldd	r18, Z+5	; 0x05
    20c8:	36 81       	ldd	r19, Z+6	; 0x06
    20ca:	2a 0d       	add	r18, r10
    20cc:	3b 1d       	adc	r19, r11
    20ce:	25 83       	std	Z+5, r18	; 0x05
    20d0:	36 83       	std	Z+6, r19	; 0x06
    20d2:	83 81       	ldd	r24, Z+3	; 0x03
    20d4:	94 81       	ldd	r25, Z+4	; 0x04
    20d6:	82 17       	cp	r24, r18
    20d8:	93 07       	cpc	r25, r19
    20da:	68 f4       	brcc	.+26     	; 0x20f6 <udd_ep_trans_complet+0x1b6>
    20dc:	85 83       	std	Z+5, r24	; 0x05
    20de:	96 83       	std	Z+6, r25	; 0x06
    20e0:	cc 0f       	add	r28, r28
    20e2:	dd 1f       	adc	r29, r29
    20e4:	cc 0f       	add	r28, r28
    20e6:	dd 1f       	adc	r29, r29
    20e8:	cc 0f       	add	r28, r28
    20ea:	dd 1f       	adc	r29, r29
    20ec:	c0 5f       	subi	r28, 0xF0	; 240
    20ee:	dd 4d       	sbci	r29, 0xDD	; 221
    20f0:	8e 89       	ldd	r24, Y+22	; 0x16
    20f2:	9f 89       	ldd	r25, Y+23	; 0x17
    20f4:	60 c0       	rjmp	.+192    	; 0x21b6 <udd_ep_trans_complet+0x276>
    20f6:	fe 01       	movw	r30, r28
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	ee 0f       	add	r30, r30
    2102:	ff 1f       	adc	r31, r31
    2104:	e0 5f       	subi	r30, 0xF0	; 240
    2106:	fd 4d       	sbci	r31, 0xDD	; 221
    2108:	46 89       	ldd	r20, Z+22	; 0x16
    210a:	57 89       	ldd	r21, Z+23	; 0x17
    210c:	4a 15       	cp	r20, r10
    210e:	5b 05       	cpc	r21, r11
    2110:	09 f0       	breq	.+2      	; 0x2114 <udd_ep_trans_complet+0x1d4>
    2112:	51 c0       	rjmp	.+162    	; 0x21b6 <udd_ep_trans_complet+0x276>
    2114:	28 17       	cp	r18, r24
    2116:	39 07       	cpc	r19, r25
    2118:	09 f4       	brne	.+2      	; 0x211c <udd_ep_trans_complet+0x1dc>
    211a:	4d c0       	rjmp	.+154    	; 0x21b6 <udd_ep_trans_complet+0x276>
    211c:	ac 01       	movw	r20, r24
    211e:	42 1b       	sub	r20, r18
    2120:	53 0b       	sbc	r21, r19
    2122:	9a 01       	movw	r18, r20
    2124:	21 15       	cp	r18, r1
    2126:	54 e0       	ldi	r21, 0x04	; 4
    2128:	35 07       	cpc	r19, r21
    212a:	50 f0       	brcs	.+20     	; 0x2140 <udd_ep_trans_complet+0x200>
    212c:	2f ef       	ldi	r18, 0xFF	; 255
    212e:	33 e0       	ldi	r19, 0x03	; 3
    2130:	c9 01       	movw	r24, r18
    2132:	b4 01       	movw	r22, r8
    2134:	c9 d4       	rcall	.+2450   	; 0x2ac8 <__udivmodhi4>
    2136:	d9 01       	movw	r26, r18
    2138:	a8 1b       	sub	r26, r24
    213a:	b9 0b       	sbc	r27, r25
    213c:	cd 01       	movw	r24, r26
    213e:	07 c0       	rjmp	.+14     	; 0x214e <udd_ep_trans_complet+0x20e>
    2140:	c9 01       	movw	r24, r18
    2142:	b4 01       	movw	r22, r8
    2144:	c1 d4       	rcall	.+2434   	; 0x2ac8 <__udivmodhi4>
    2146:	f9 01       	movw	r30, r18
    2148:	e8 1b       	sub	r30, r24
    214a:	f9 0b       	sbc	r31, r25
    214c:	cf 01       	movw	r24, r30
    214e:	fe 01       	movw	r30, r28
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	ee 0f       	add	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	ee 0f       	add	r30, r30
    215a:	ff 1f       	adc	r31, r31
    215c:	e0 5f       	subi	r30, 0xF0	; 240
    215e:	fd 4d       	sbci	r31, 0xDD	; 221
    2160:	12 8a       	std	Z+18, r1	; 0x12
    2162:	13 8a       	std	Z+19, r1	; 0x13
    2164:	88 15       	cp	r24, r8
    2166:	99 05       	cpc	r25, r9
    2168:	78 f4       	brcc	.+30     	; 0x2188 <udd_ep_trans_complet+0x248>
    216a:	d8 01       	movw	r26, r16
    216c:	8c 91       	ld	r24, X
    216e:	84 60       	ori	r24, 0x04	; 4
    2170:	8c 93       	st	X, r24
    2172:	b0 e4       	ldi	r27, 0x40	; 64
    2174:	db 9e       	mul	r13, r27
    2176:	c0 01       	movw	r24, r0
    2178:	11 24       	eor	r1, r1
    217a:	8d 56       	subi	r24, 0x6D	; 109
    217c:	9f 4d       	sbci	r25, 0xDF	; 223
    217e:	84 8b       	std	Z+20, r24	; 0x14
    2180:	95 8b       	std	Z+21, r25	; 0x15
    2182:	86 8a       	std	Z+22, r8	; 0x16
    2184:	97 8a       	std	Z+23, r9	; 0x17
    2186:	13 c0       	rjmp	.+38     	; 0x21ae <udd_ep_trans_complet+0x26e>
    2188:	f8 01       	movw	r30, r16
    218a:	41 81       	ldd	r20, Z+1	; 0x01
    218c:	52 81       	ldd	r21, Z+2	; 0x02
    218e:	25 81       	ldd	r18, Z+5	; 0x05
    2190:	36 81       	ldd	r19, Z+6	; 0x06
    2192:	24 0f       	add	r18, r20
    2194:	35 1f       	adc	r19, r21
    2196:	cc 0f       	add	r28, r28
    2198:	dd 1f       	adc	r29, r29
    219a:	cc 0f       	add	r28, r28
    219c:	dd 1f       	adc	r29, r29
    219e:	cc 0f       	add	r28, r28
    21a0:	dd 1f       	adc	r29, r29
    21a2:	c0 5f       	subi	r28, 0xF0	; 240
    21a4:	dd 4d       	sbci	r29, 0xDD	; 221
    21a6:	2c 8b       	std	Y+20, r18	; 0x14
    21a8:	3d 8b       	std	Y+21, r19	; 0x15
    21aa:	8e 8b       	std	Y+22, r24	; 0x16
    21ac:	9f 8b       	std	Y+23, r25	; 0x17
    21ae:	f7 01       	movw	r30, r14
    21b0:	02 e0       	ldi	r16, 0x02	; 2
    21b2:	06 93       	lac	Z, r16
    21b4:	13 c0       	rjmp	.+38     	; 0x21dc <udd_ep_trans_complet+0x29c>
    21b6:	d8 01       	movw	r26, r16
    21b8:	8c 91       	ld	r24, X
    21ba:	80 ff       	sbrs	r24, 0
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <udd_ep_trans_complet+0x29c>
    21be:	8e 7f       	andi	r24, 0xFE	; 254
    21c0:	8c 93       	st	X, r24
    21c2:	17 96       	adiw	r26, 0x07	; 7
    21c4:	ed 91       	ld	r30, X+
    21c6:	fc 91       	ld	r31, X
    21c8:	18 97       	sbiw	r26, 0x08	; 8
    21ca:	30 97       	sbiw	r30, 0x00	; 0
    21cc:	39 f0       	breq	.+14     	; 0x21dc <udd_ep_trans_complet+0x29c>
    21ce:	15 96       	adiw	r26, 0x05	; 5
    21d0:	6d 91       	ld	r22, X+
    21d2:	7c 91       	ld	r23, X
    21d4:	16 97       	sbiw	r26, 0x06	; 6
    21d6:	4d 2d       	mov	r20, r13
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	09 95       	icall
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	1f 91       	pop	r17
    21e2:	0f 91       	pop	r16
    21e4:	ff 90       	pop	r15
    21e6:	ef 90       	pop	r14
    21e8:	df 90       	pop	r13
    21ea:	bf 90       	pop	r11
    21ec:	af 90       	pop	r10
    21ee:	9f 90       	pop	r9
    21f0:	8f 90       	pop	r8
    21f2:	08 95       	ret

000021f4 <udd_attach>:
    21f4:	cf 93       	push	r28
    21f6:	cf b7       	in	r28, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	11 dd       	rcall	.-1502   	; 0x1c20 <udd_sleep_mode>
    21fe:	ea ec       	ldi	r30, 0xCA	; 202
    2200:	f4 e0       	ldi	r31, 0x04	; 4
    2202:	80 e4       	ldi	r24, 0x40	; 64
    2204:	80 83       	st	Z, r24
    2206:	80 e2       	ldi	r24, 0x20	; 32
    2208:	80 83       	st	Z, r24
    220a:	e1 ec       	ldi	r30, 0xC1	; 193
    220c:	f4 e0       	ldi	r31, 0x04	; 4
    220e:	80 81       	ld	r24, Z
    2210:	81 60       	ori	r24, 0x01	; 1
    2212:	80 83       	st	Z, r24
    2214:	a9 ec       	ldi	r26, 0xC9	; 201
    2216:	b4 e0       	ldi	r27, 0x04	; 4
    2218:	8c 91       	ld	r24, X
    221a:	82 60       	ori	r24, 0x02	; 2
    221c:	8c 93       	st	X, r24
    221e:	e8 ec       	ldi	r30, 0xC8	; 200
    2220:	f4 e0       	ldi	r31, 0x04	; 4
    2222:	80 81       	ld	r24, Z
    2224:	80 64       	ori	r24, 0x40	; 64
    2226:	80 83       	st	Z, r24
    2228:	8c 91       	ld	r24, X
    222a:	81 60       	ori	r24, 0x01	; 1
    222c:	8c 93       	st	X, r24
    222e:	80 81       	ld	r24, Z
    2230:	80 68       	ori	r24, 0x80	; 128
    2232:	80 83       	st	Z, r24
    2234:	cf bf       	out	0x3f, r28	; 63
    2236:	cf 91       	pop	r28
    2238:	08 95       	ret

0000223a <udd_enable>:
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	c0 e6       	ldi	r28, 0x60	; 96
    2240:	d0 e0       	ldi	r29, 0x00	; 0
    2242:	18 82       	st	Y, r1
    2244:	80 e3       	ldi	r24, 0x30	; 48
    2246:	0e 94 b3 08 	call	0x1166	; 0x1166 <sysclk_enable_usb>
    224a:	e0 ec       	ldi	r30, 0xC0	; 192
    224c:	f4 e0       	ldi	r31, 0x04	; 4
    224e:	80 81       	ld	r24, Z
    2250:	80 64       	ori	r24, 0x40	; 64
    2252:	80 83       	st	Z, r24
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	88 83       	st	Y, r24
    2258:	cf b7       	in	r28, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	fc 01       	movw	r30, r24
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	ee 0f       	add	r30, r30
    2268:	ff 1f       	adc	r31, r31
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	e0 5f       	subi	r30, 0xF0	; 240
    2270:	fd 4d       	sbci	r31, 0xDD	; 221
    2272:	11 8a       	std	Z+17, r1	; 0x11
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	88 30       	cpi	r24, 0x08	; 8
    2278:	91 05       	cpc	r25, r1
    227a:	91 f7       	brne	.-28     	; 0x2260 <udd_enable+0x26>
    227c:	e3 e9       	ldi	r30, 0x93	; 147
    227e:	f1 e2       	ldi	r31, 0x21	; 33
    2280:	80 81       	ld	r24, Z
    2282:	8e 7f       	andi	r24, 0xFE	; 254
    2284:	80 83       	st	Z, r24
    2286:	ec e9       	ldi	r30, 0x9C	; 156
    2288:	f1 e2       	ldi	r31, 0x21	; 33
    228a:	80 81       	ld	r24, Z
    228c:	8e 7f       	andi	r24, 0xFE	; 254
    228e:	80 83       	st	Z, r24
    2290:	e5 ea       	ldi	r30, 0xA5	; 165
    2292:	f1 e2       	ldi	r31, 0x21	; 33
    2294:	80 81       	ld	r24, Z
    2296:	8e 7f       	andi	r24, 0xFE	; 254
    2298:	80 83       	st	Z, r24
    229a:	ee ea       	ldi	r30, 0xAE	; 174
    229c:	f1 e2       	ldi	r31, 0x21	; 33
    229e:	80 81       	ld	r24, Z
    22a0:	8e 7f       	andi	r24, 0xFE	; 254
    22a2:	80 83       	st	Z, r24
    22a4:	e7 eb       	ldi	r30, 0xB7	; 183
    22a6:	f1 e2       	ldi	r31, 0x21	; 33
    22a8:	80 81       	ld	r24, Z
    22aa:	8e 7f       	andi	r24, 0xFE	; 254
    22ac:	80 83       	st	Z, r24
    22ae:	e0 ec       	ldi	r30, 0xC0	; 192
    22b0:	f1 e2       	ldi	r31, 0x21	; 33
    22b2:	80 81       	ld	r24, Z
    22b4:	8e 7f       	andi	r24, 0xFE	; 254
    22b6:	80 83       	st	Z, r24
    22b8:	6a e1       	ldi	r22, 0x1A	; 26
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	a6 dc       	rcall	.-1716   	; 0x1c0c <nvm_read_byte>
    22c0:	8f 3f       	cpi	r24, 0xFF	; 255
    22c2:	19 f0       	breq	.+6      	; 0x22ca <udd_enable+0x90>
    22c4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <udd_enable+0x96>
    22ca:	8f e1       	ldi	r24, 0x1F	; 31
    22cc:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    22d0:	6b e1       	ldi	r22, 0x1B	; 27
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	82 e0       	ldi	r24, 0x02	; 2
    22d6:	9a dc       	rcall	.-1740   	; 0x1c0c <nvm_read_byte>
    22d8:	8f 3f       	cpi	r24, 0xFF	; 255
    22da:	19 f0       	breq	.+6      	; 0x22e2 <udd_enable+0xa8>
    22dc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    22e0:	03 c0       	rjmp	.+6      	; 0x22e8 <udd_enable+0xae>
    22e2:	8f e1       	ldi	r24, 0x1F	; 31
    22e4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    22e8:	e0 ec       	ldi	r30, 0xC0	; 192
    22ea:	f4 e0       	ldi	r31, 0x04	; 4
    22ec:	80 81       	ld	r24, Z
    22ee:	83 60       	ori	r24, 0x03	; 3
    22f0:	80 83       	st	Z, r24
    22f2:	80 81       	ld	r24, Z
    22f4:	80 68       	ori	r24, 0x80	; 128
    22f6:	80 83       	st	Z, r24
    22f8:	80 81       	ld	r24, Z
    22fa:	80 61       	ori	r24, 0x10	; 16
    22fc:	80 83       	st	Z, r24
    22fe:	80 e2       	ldi	r24, 0x20	; 32
    2300:	92 e2       	ldi	r25, 0x22	; 34
    2302:	86 83       	std	Z+6, r24	; 0x06
    2304:	97 83       	std	Z+7, r25	; 0x07
    2306:	80 81       	ld	r24, Z
    2308:	80 62       	ori	r24, 0x20	; 32
    230a:	80 83       	st	Z, r24
    230c:	8f ef       	ldi	r24, 0xFF	; 255
    230e:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2312:	e8 ec       	ldi	r30, 0xC8	; 200
    2314:	f4 e0       	ldi	r31, 0x04	; 4
    2316:	80 81       	ld	r24, Z
    2318:	82 60       	ori	r24, 0x02	; 2
    231a:	80 83       	st	Z, r24
    231c:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_b_idle>
    2320:	80 91 65 2e 	lds	r24, 0x2E65	; 0x802e65 <sleepmgr_locks+0x5>
    2324:	8f 3f       	cpi	r24, 0xFF	; 255
    2326:	09 f4       	brne	.+2      	; 0x232a <udd_enable+0xf0>
    2328:	ff cf       	rjmp	.-2      	; 0x2328 <udd_enable+0xee>
    232a:	9f b7       	in	r25, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	e0 e6       	ldi	r30, 0x60	; 96
    2330:	fe e2       	ldi	r31, 0x2E	; 46
    2332:	85 81       	ldd	r24, Z+5	; 0x05
    2334:	8f 5f       	subi	r24, 0xFF	; 255
    2336:	85 83       	std	Z+5, r24	; 0x05
    2338:	9f bf       	out	0x3f, r25	; 63
    233a:	5c df       	rcall	.-328    	; 0x21f4 <udd_attach>
    233c:	cf bf       	out	0x3f, r28	; 63
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	08 95       	ret

00002344 <udd_set_address>:
    2344:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2348:	08 95       	ret

0000234a <udd_getaddress>:
    234a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    234e:	08 95       	ret

00002350 <udd_set_setup_payload>:
    2350:	e2 e7       	ldi	r30, 0x72	; 114
    2352:	f4 e2       	ldi	r31, 0x24	; 36
    2354:	80 87       	std	Z+8, r24	; 0x08
    2356:	91 87       	std	Z+9, r25	; 0x09
    2358:	62 87       	std	Z+10, r22	; 0x0a
    235a:	73 87       	std	Z+11, r23	; 0x0b
    235c:	08 95       	ret

0000235e <udd_ep_alloc>:
    235e:	28 2f       	mov	r18, r24
    2360:	2f 70       	andi	r18, 0x0F	; 15
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	22 0f       	add	r18, r18
    2366:	33 1f       	adc	r19, r19
    2368:	08 2e       	mov	r0, r24
    236a:	00 0c       	add	r0, r0
    236c:	99 0b       	sbc	r25, r25
    236e:	88 27       	eor	r24, r24
    2370:	99 0f       	add	r25, r25
    2372:	88 1f       	adc	r24, r24
    2374:	99 27       	eor	r25, r25
    2376:	82 0f       	add	r24, r18
    2378:	93 1f       	adc	r25, r19
    237a:	fc 01       	movw	r30, r24
    237c:	ee 0f       	add	r30, r30
    237e:	ff 1f       	adc	r31, r31
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	e0 5f       	subi	r30, 0xF0	; 240
    238a:	fd 4d       	sbci	r31, 0xDD	; 221
    238c:	21 89       	ldd	r18, Z+17	; 0x11
    238e:	20 7c       	andi	r18, 0xC0	; 192
    2390:	09 f0       	breq	.+2      	; 0x2394 <udd_ep_alloc+0x36>
    2392:	58 c0       	rjmp	.+176    	; 0x2444 <udd_ep_alloc+0xe6>
    2394:	63 70       	andi	r22, 0x03	; 3
    2396:	61 30       	cpi	r22, 0x01	; 1
    2398:	11 f0       	breq	.+4      	; 0x239e <udd_ep_alloc+0x40>
    239a:	18 f4       	brcc	.+6      	; 0x23a2 <udd_ep_alloc+0x44>
    239c:	04 c0       	rjmp	.+8      	; 0x23a6 <udd_ep_alloc+0x48>
    239e:	20 ec       	ldi	r18, 0xC0	; 192
    23a0:	03 c0       	rjmp	.+6      	; 0x23a8 <udd_ep_alloc+0x4a>
    23a2:	20 e8       	ldi	r18, 0x80	; 128
    23a4:	01 c0       	rjmp	.+2      	; 0x23a8 <udd_ep_alloc+0x4a>
    23a6:	20 e4       	ldi	r18, 0x40	; 64
    23a8:	40 38       	cpi	r20, 0x80	; 128
    23aa:	51 05       	cpc	r21, r1
    23ac:	e9 f0       	breq	.+58     	; 0x23e8 <udd_ep_alloc+0x8a>
    23ae:	50 f4       	brcc	.+20     	; 0x23c4 <udd_ep_alloc+0x66>
    23b0:	40 32       	cpi	r20, 0x20	; 32
    23b2:	51 05       	cpc	r21, r1
    23b4:	a9 f0       	breq	.+42     	; 0x23e0 <udd_ep_alloc+0x82>
    23b6:	40 34       	cpi	r20, 0x40	; 64
    23b8:	51 05       	cpc	r21, r1
    23ba:	a1 f0       	breq	.+40     	; 0x23e4 <udd_ep_alloc+0x86>
    23bc:	40 31       	cpi	r20, 0x10	; 16
    23be:	51 05       	cpc	r21, r1
    23c0:	d9 f4       	brne	.+54     	; 0x23f8 <udd_ep_alloc+0x9a>
    23c2:	0c c0       	rjmp	.+24     	; 0x23dc <udd_ep_alloc+0x7e>
    23c4:	41 15       	cp	r20, r1
    23c6:	32 e0       	ldi	r19, 0x02	; 2
    23c8:	53 07       	cpc	r21, r19
    23ca:	91 f0       	breq	.+36     	; 0x23f0 <udd_ep_alloc+0x92>
    23cc:	4f 3f       	cpi	r20, 0xFF	; 255
    23ce:	33 e0       	ldi	r19, 0x03	; 3
    23d0:	53 07       	cpc	r21, r19
    23d2:	81 f0       	breq	.+32     	; 0x23f4 <udd_ep_alloc+0x96>
    23d4:	41 15       	cp	r20, r1
    23d6:	51 40       	sbci	r21, 0x01	; 1
    23d8:	79 f4       	brne	.+30     	; 0x23f8 <udd_ep_alloc+0x9a>
    23da:	08 c0       	rjmp	.+16     	; 0x23ec <udd_ep_alloc+0x8e>
    23dc:	41 e0       	ldi	r20, 0x01	; 1
    23de:	0d c0       	rjmp	.+26     	; 0x23fa <udd_ep_alloc+0x9c>
    23e0:	42 e0       	ldi	r20, 0x02	; 2
    23e2:	0b c0       	rjmp	.+22     	; 0x23fa <udd_ep_alloc+0x9c>
    23e4:	43 e0       	ldi	r20, 0x03	; 3
    23e6:	09 c0       	rjmp	.+18     	; 0x23fa <udd_ep_alloc+0x9c>
    23e8:	44 e0       	ldi	r20, 0x04	; 4
    23ea:	07 c0       	rjmp	.+14     	; 0x23fa <udd_ep_alloc+0x9c>
    23ec:	45 e0       	ldi	r20, 0x05	; 5
    23ee:	05 c0       	rjmp	.+10     	; 0x23fa <udd_ep_alloc+0x9c>
    23f0:	46 e0       	ldi	r20, 0x06	; 6
    23f2:	03 c0       	rjmp	.+6      	; 0x23fa <udd_ep_alloc+0x9c>
    23f4:	47 e0       	ldi	r20, 0x07	; 7
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <udd_ep_alloc+0x9c>
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	fc 01       	movw	r30, r24
    23fc:	ee 0f       	add	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	e0 5f       	subi	r30, 0xF0	; 240
    240a:	fd 4d       	sbci	r31, 0xDD	; 221
    240c:	11 8a       	std	Z+17, r1	; 0x11
    240e:	dc 01       	movw	r26, r24
    2410:	aa 0f       	add	r26, r26
    2412:	bb 1f       	adc	r27, r27
    2414:	aa 0f       	add	r26, r26
    2416:	bb 1f       	adc	r27, r27
    2418:	aa 0f       	add	r26, r26
    241a:	bb 1f       	adc	r27, r27
    241c:	a0 5e       	subi	r26, 0xE0	; 224
    241e:	bd 4d       	sbci	r27, 0xDD	; 221
    2420:	36 e0       	ldi	r19, 0x06	; 6
    2422:	3c 93       	st	X, r19
    2424:	24 2b       	or	r18, r20
    2426:	21 8b       	std	Z+17, r18	; 0x11
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	fc 01       	movw	r30, r24
    2436:	e0 5f       	subi	r30, 0xF0	; 240
    2438:	fd 4d       	sbci	r31, 0xDD	; 221
    243a:	81 89       	ldd	r24, Z+17	; 0x11
    243c:	80 62       	ori	r24, 0x20	; 32
    243e:	81 8b       	std	Z+17, r24	; 0x11
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	08 95       	ret
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	08 95       	ret

00002448 <udd_ep_is_halted>:
    2448:	e8 2f       	mov	r30, r24
    244a:	ef 70       	andi	r30, 0x0F	; 15
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	08 2e       	mov	r0, r24
    2454:	00 0c       	add	r0, r0
    2456:	99 0b       	sbc	r25, r25
    2458:	88 27       	eor	r24, r24
    245a:	99 0f       	add	r25, r25
    245c:	88 1f       	adc	r24, r24
    245e:	99 27       	eor	r25, r25
    2460:	e8 0f       	add	r30, r24
    2462:	f9 1f       	adc	r31, r25
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	ee 0f       	add	r30, r30
    246a:	ff 1f       	adc	r31, r31
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	e0 5f       	subi	r30, 0xF0	; 240
    2472:	fd 4d       	sbci	r31, 0xDD	; 221
    2474:	81 89       	ldd	r24, Z+17	; 0x11
    2476:	82 fb       	bst	r24, 2
    2478:	88 27       	eor	r24, r24
    247a:	80 f9       	bld	r24, 0
    247c:	08 95       	ret

0000247e <udd_ep_clear_halt>:
    247e:	28 2f       	mov	r18, r24
    2480:	2f 70       	andi	r18, 0x0F	; 15
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	a9 01       	movw	r20, r18
    2486:	44 0f       	add	r20, r20
    2488:	55 1f       	adc	r21, r21
    248a:	28 2f       	mov	r18, r24
    248c:	08 2e       	mov	r0, r24
    248e:	00 0c       	add	r0, r0
    2490:	33 0b       	sbc	r19, r19
    2492:	22 27       	eor	r18, r18
    2494:	33 0f       	add	r19, r19
    2496:	22 1f       	adc	r18, r18
    2498:	33 27       	eor	r19, r19
    249a:	24 0f       	add	r18, r20
    249c:	35 1f       	adc	r19, r21
    249e:	f9 01       	movw	r30, r18
    24a0:	ee 0f       	add	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	ee 0f       	add	r30, r30
    24a6:	ff 1f       	adc	r31, r31
    24a8:	ee 0f       	add	r30, r30
    24aa:	ff 1f       	adc	r31, r31
    24ac:	e0 5f       	subi	r30, 0xF0	; 240
    24ae:	fd 4d       	sbci	r31, 0xDD	; 221
    24b0:	91 89       	ldd	r25, Z+17	; 0x11
    24b2:	92 ff       	sbrs	r25, 2
    24b4:	17 c0       	rjmp	.+46     	; 0x24e4 <udd_ep_clear_halt+0x66>
    24b6:	22 0f       	add	r18, r18
    24b8:	33 1f       	adc	r19, r19
    24ba:	22 0f       	add	r18, r18
    24bc:	33 1f       	adc	r19, r19
    24be:	22 0f       	add	r18, r18
    24c0:	33 1f       	adc	r19, r19
    24c2:	f9 01       	movw	r30, r18
    24c4:	e0 5f       	subi	r30, 0xF0	; 240
    24c6:	fd 4d       	sbci	r31, 0xDD	; 221
    24c8:	91 89       	ldd	r25, Z+17	; 0x11
    24ca:	9b 7f       	andi	r25, 0xFB	; 251
    24cc:	91 8b       	std	Z+17, r25	; 0x11
    24ce:	ae dc       	rcall	.-1700   	; 0x1e2c <udd_ep_get_job>
    24d0:	fc 01       	movw	r30, r24
    24d2:	80 81       	ld	r24, Z
    24d4:	80 ff       	sbrs	r24, 0
    24d6:	06 c0       	rjmp	.+12     	; 0x24e4 <udd_ep_clear_halt+0x66>
    24d8:	8e 7f       	andi	r24, 0xFE	; 254
    24da:	80 83       	st	Z, r24
    24dc:	07 80       	ldd	r0, Z+7	; 0x07
    24de:	f0 85       	ldd	r31, Z+8	; 0x08
    24e0:	e0 2d       	mov	r30, r0
    24e2:	09 95       	icall
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	08 95       	ret

000024e8 <udd_ep_run>:
    24e8:	7f 92       	push	r7
    24ea:	8f 92       	push	r8
    24ec:	9f 92       	push	r9
    24ee:	af 92       	push	r10
    24f0:	bf 92       	push	r11
    24f2:	cf 92       	push	r12
    24f4:	df 92       	push	r13
    24f6:	ef 92       	push	r14
    24f8:	ff 92       	push	r15
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	cf 93       	push	r28
    2500:	df 93       	push	r29
    2502:	98 2e       	mov	r9, r24
    2504:	86 2e       	mov	r8, r22
    2506:	6a 01       	movw	r12, r20
    2508:	79 01       	movw	r14, r18
    250a:	90 dc       	rcall	.-1760   	; 0x1e2c <udd_ep_get_job>
    250c:	5c 01       	movw	r10, r24
    250e:	79 2c       	mov	r7, r9
    2510:	77 1c       	adc	r7, r7
    2512:	77 24       	eor	r7, r7
    2514:	77 1c       	adc	r7, r7
    2516:	c9 2d       	mov	r28, r9
    2518:	cf 70       	andi	r28, 0x0F	; 15
    251a:	d0 e0       	ldi	r29, 0x00	; 0
    251c:	cc 0f       	add	r28, r28
    251e:	dd 1f       	adc	r29, r29
    2520:	c7 0d       	add	r28, r7
    2522:	d1 1d       	adc	r29, r1
    2524:	fe 01       	movw	r30, r28
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	ee 0f       	add	r30, r30
    252c:	ff 1f       	adc	r31, r31
    252e:	ee 0f       	add	r30, r30
    2530:	ff 1f       	adc	r31, r31
    2532:	e0 5f       	subi	r30, 0xF0	; 240
    2534:	fd 4d       	sbci	r31, 0xDD	; 221
    2536:	81 89       	ldd	r24, Z+17	; 0x11
    2538:	80 7c       	andi	r24, 0xC0	; 192
    253a:	09 f4       	brne	.+2      	; 0x253e <udd_ep_run+0x56>
    253c:	7d c0       	rjmp	.+250    	; 0x2638 <udd_ep_run+0x150>
    253e:	fe 01       	movw	r30, r28
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	e0 5f       	subi	r30, 0xF0	; 240
    254e:	fd 4d       	sbci	r31, 0xDD	; 221
    2550:	81 89       	ldd	r24, Z+17	; 0x11
    2552:	80 7c       	andi	r24, 0xC0	; 192
    2554:	80 3c       	cpi	r24, 0xC0	; 192
    2556:	61 f0       	breq	.+24     	; 0x2570 <udd_ep_run+0x88>
    2558:	fe 01       	movw	r30, r28
    255a:	ee 0f       	add	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	e0 5f       	subi	r30, 0xF0	; 240
    2568:	fd 4d       	sbci	r31, 0xDD	; 221
    256a:	81 89       	ldd	r24, Z+17	; 0x11
    256c:	82 fd       	sbrc	r24, 2
    256e:	66 c0       	rjmp	.+204    	; 0x263c <udd_ep_run+0x154>
    2570:	8f b7       	in	r24, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	f5 01       	movw	r30, r10
    2576:	90 81       	ld	r25, Z
    2578:	90 ff       	sbrs	r25, 0
    257a:	03 c0       	rjmp	.+6      	; 0x2582 <udd_ep_run+0x9a>
    257c:	8f bf       	out	0x3f, r24	; 63
    257e:	71 2c       	mov	r7, r1
    2580:	5e c0       	rjmp	.+188    	; 0x263e <udd_ep_run+0x156>
    2582:	f5 01       	movw	r30, r10
    2584:	90 81       	ld	r25, Z
    2586:	91 60       	ori	r25, 0x01	; 1
    2588:	90 83       	st	Z, r25
    258a:	8f bf       	out	0x3f, r24	; 63
    258c:	c1 82       	std	Z+1, r12	; 0x01
    258e:	d2 82       	std	Z+2, r13	; 0x02
    2590:	e3 82       	std	Z+3, r14	; 0x03
    2592:	f4 82       	std	Z+4, r15	; 0x04
    2594:	15 82       	std	Z+5, r1	; 0x05
    2596:	16 82       	std	Z+6, r1	; 0x06
    2598:	07 83       	std	Z+7, r16	; 0x07
    259a:	10 87       	std	Z+8, r17	; 0x08
    259c:	81 10       	cpse	r8, r1
    259e:	06 c0       	rjmp	.+12     	; 0x25ac <udd_ep_run+0xc4>
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	e1 14       	cp	r14, r1
    25a4:	f1 04       	cpc	r15, r1
    25a6:	19 f0       	breq	.+6      	; 0x25ae <udd_ep_run+0xc6>
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	01 c0       	rjmp	.+2      	; 0x25ae <udd_ep_run+0xc6>
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	f5 01       	movw	r30, r10
    25b0:	80 81       	ld	r24, Z
    25b2:	90 fb       	bst	r25, 0
    25b4:	81 f9       	bld	r24, 1
    25b6:	8b 7f       	andi	r24, 0xFB	; 251
    25b8:	80 83       	st	Z, r24
    25ba:	77 20       	and	r7, r7
    25bc:	59 f0       	breq	.+22     	; 0x25d4 <udd_ep_run+0xec>
    25be:	cc 0f       	add	r28, r28
    25c0:	dd 1f       	adc	r29, r29
    25c2:	cc 0f       	add	r28, r28
    25c4:	dd 1f       	adc	r29, r29
    25c6:	cc 0f       	add	r28, r28
    25c8:	dd 1f       	adc	r29, r29
    25ca:	c0 5f       	subi	r28, 0xF0	; 240
    25cc:	dd 4d       	sbci	r29, 0xDD	; 221
    25ce:	1e 8a       	std	Y+22, r1	; 0x16
    25d0:	1f 8a       	std	Y+23, r1	; 0x17
    25d2:	2d c0       	rjmp	.+90     	; 0x262e <udd_ep_run+0x146>
    25d4:	fe 01       	movw	r30, r28
    25d6:	ee 0f       	add	r30, r30
    25d8:	ff 1f       	adc	r31, r31
    25da:	ee 0f       	add	r30, r30
    25dc:	ff 1f       	adc	r31, r31
    25de:	ee 0f       	add	r30, r30
    25e0:	ff 1f       	adc	r31, r31
    25e2:	e0 5f       	subi	r30, 0xF0	; 240
    25e4:	fd 4d       	sbci	r31, 0xDD	; 221
    25e6:	81 89       	ldd	r24, Z+17	; 0x11
    25e8:	80 7c       	andi	r24, 0xC0	; 192
    25ea:	80 3c       	cpi	r24, 0xC0	; 192
    25ec:	a1 f4       	brne	.+40     	; 0x2616 <udd_ep_run+0x12e>
    25ee:	ce 01       	movw	r24, r28
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	80 5e       	subi	r24, 0xE0	; 224
    25fe:	9d 4d       	sbci	r25, 0xDD	; 221
    2600:	ef db       	rcall	.-2082   	; 0x1de0 <udd_ep_get_size>
    2602:	bc 01       	movw	r22, r24
    2604:	c7 01       	movw	r24, r14
    2606:	60 d2       	rcall	.+1216   	; 0x2ac8 <__udivmodhi4>
    2608:	89 2b       	or	r24, r25
    260a:	29 f0       	breq	.+10     	; 0x2616 <udd_ep_run+0x12e>
    260c:	f5 01       	movw	r30, r10
    260e:	80 81       	ld	r24, Z
    2610:	8e 7f       	andi	r24, 0xFE	; 254
    2612:	80 83       	st	Z, r24
    2614:	14 c0       	rjmp	.+40     	; 0x263e <udd_ep_run+0x156>
    2616:	cc 0f       	add	r28, r28
    2618:	dd 1f       	adc	r29, r29
    261a:	cc 0f       	add	r28, r28
    261c:	dd 1f       	adc	r29, r29
    261e:	cc 0f       	add	r28, r28
    2620:	dd 1f       	adc	r29, r29
    2622:	c0 5f       	subi	r28, 0xF0	; 240
    2624:	dd 4d       	sbci	r29, 0xDD	; 221
    2626:	1a 8a       	std	Y+18, r1	; 0x12
    2628:	1b 8a       	std	Y+19, r1	; 0x13
    262a:	1e 8a       	std	Y+22, r1	; 0x16
    262c:	1f 8a       	std	Y+23, r1	; 0x17
    262e:	89 2d       	mov	r24, r9
    2630:	87 dc       	rcall	.-1778   	; 0x1f40 <udd_ep_trans_complet>
    2632:	77 24       	eor	r7, r7
    2634:	73 94       	inc	r7
    2636:	03 c0       	rjmp	.+6      	; 0x263e <udd_ep_run+0x156>
    2638:	71 2c       	mov	r7, r1
    263a:	01 c0       	rjmp	.+2      	; 0x263e <udd_ep_run+0x156>
    263c:	71 2c       	mov	r7, r1
    263e:	87 2d       	mov	r24, r7
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	ff 90       	pop	r15
    264a:	ef 90       	pop	r14
    264c:	df 90       	pop	r13
    264e:	cf 90       	pop	r12
    2650:	bf 90       	pop	r11
    2652:	af 90       	pop	r10
    2654:	9f 90       	pop	r9
    2656:	8f 90       	pop	r8
    2658:	7f 90       	pop	r7
    265a:	08 95       	ret

0000265c <udd_ep_abort>:
    265c:	ff 92       	push	r15
    265e:	0f 93       	push	r16
    2660:	1f 93       	push	r17
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	18 2f       	mov	r17, r24
    2668:	f8 2e       	mov	r15, r24
    266a:	ff 1c       	adc	r15, r15
    266c:	ff 24       	eor	r15, r15
    266e:	ff 1c       	adc	r15, r15
    2670:	c8 2f       	mov	r28, r24
    2672:	cf 70       	andi	r28, 0x0F	; 15
    2674:	d0 e0       	ldi	r29, 0x00	; 0
    2676:	cc 0f       	add	r28, r28
    2678:	dd 1f       	adc	r29, r29
    267a:	cf 0d       	add	r28, r15
    267c:	d1 1d       	adc	r29, r1
    267e:	d6 db       	rcall	.-2132   	; 0x1e2c <udd_ep_get_job>
    2680:	dc 01       	movw	r26, r24
    2682:	fe 01       	movw	r30, r28
    2684:	ee 0f       	add	r30, r30
    2686:	ff 1f       	adc	r31, r31
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	ee 0f       	add	r30, r30
    268e:	ff 1f       	adc	r31, r31
    2690:	e0 5e       	subi	r30, 0xE0	; 224
    2692:	fd 4d       	sbci	r31, 0xDD	; 221
    2694:	02 e0       	ldi	r16, 0x02	; 2
    2696:	05 93       	las	Z, r16
    2698:	8c 91       	ld	r24, X
    269a:	80 ff       	sbrs	r24, 0
    269c:	22 c0       	rjmp	.+68     	; 0x26e2 <udd_ep_abort+0x86>
    269e:	8e 7f       	andi	r24, 0xFE	; 254
    26a0:	8c 93       	st	X, r24
    26a2:	17 96       	adiw	r26, 0x07	; 7
    26a4:	ed 91       	ld	r30, X+
    26a6:	fc 91       	ld	r31, X
    26a8:	18 97       	sbiw	r26, 0x08	; 8
    26aa:	30 97       	sbiw	r30, 0x00	; 0
    26ac:	d1 f0       	breq	.+52     	; 0x26e2 <udd_ep_abort+0x86>
    26ae:	ff 20       	and	r15, r15
    26b0:	59 f0       	breq	.+22     	; 0x26c8 <udd_ep_abort+0x6c>
    26b2:	cc 0f       	add	r28, r28
    26b4:	dd 1f       	adc	r29, r29
    26b6:	cc 0f       	add	r28, r28
    26b8:	dd 1f       	adc	r29, r29
    26ba:	cc 0f       	add	r28, r28
    26bc:	dd 1f       	adc	r29, r29
    26be:	c0 5f       	subi	r28, 0xF0	; 240
    26c0:	dd 4d       	sbci	r29, 0xDD	; 221
    26c2:	6e 89       	ldd	r22, Y+22	; 0x16
    26c4:	7f 89       	ldd	r23, Y+23	; 0x17
    26c6:	0a c0       	rjmp	.+20     	; 0x26dc <udd_ep_abort+0x80>
    26c8:	cc 0f       	add	r28, r28
    26ca:	dd 1f       	adc	r29, r29
    26cc:	cc 0f       	add	r28, r28
    26ce:	dd 1f       	adc	r29, r29
    26d0:	cc 0f       	add	r28, r28
    26d2:	dd 1f       	adc	r29, r29
    26d4:	c0 5f       	subi	r28, 0xF0	; 240
    26d6:	dd 4d       	sbci	r29, 0xDD	; 221
    26d8:	6a 89       	ldd	r22, Y+18	; 0x12
    26da:	7b 89       	ldd	r23, Y+19	; 0x13
    26dc:	41 2f       	mov	r20, r17
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	09 95       	icall
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	ff 90       	pop	r15
    26ec:	08 95       	ret

000026ee <udd_ep_free>:
    26ee:	cf 93       	push	r28
    26f0:	c8 2f       	mov	r28, r24
    26f2:	b4 df       	rcall	.-152    	; 0x265c <udd_ep_abort>
    26f4:	ec 2f       	mov	r30, r28
    26f6:	ef 70       	andi	r30, 0x0F	; 15
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	ee 0f       	add	r30, r30
    26fc:	ff 1f       	adc	r31, r31
    26fe:	8c 2f       	mov	r24, r28
    2700:	cc 0f       	add	r28, r28
    2702:	99 0b       	sbc	r25, r25
    2704:	88 27       	eor	r24, r24
    2706:	99 0f       	add	r25, r25
    2708:	88 1f       	adc	r24, r24
    270a:	99 27       	eor	r25, r25
    270c:	e8 0f       	add	r30, r24
    270e:	f9 1f       	adc	r31, r25
    2710:	ee 0f       	add	r30, r30
    2712:	ff 1f       	adc	r31, r31
    2714:	ee 0f       	add	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	e0 5f       	subi	r30, 0xF0	; 240
    271e:	fd 4d       	sbci	r31, 0xDD	; 221
    2720:	11 8a       	std	Z+17, r1	; 0x11
    2722:	cf 91       	pop	r28
    2724:	08 95       	ret

00002726 <udd_ep_set_halt>:
    2726:	0f 93       	push	r16
    2728:	e8 2f       	mov	r30, r24
    272a:	ef 70       	andi	r30, 0x0F	; 15
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	28 2f       	mov	r18, r24
    2734:	08 2e       	mov	r0, r24
    2736:	00 0c       	add	r0, r0
    2738:	33 0b       	sbc	r19, r19
    273a:	22 27       	eor	r18, r18
    273c:	33 0f       	add	r19, r19
    273e:	22 1f       	adc	r18, r18
    2740:	33 27       	eor	r19, r19
    2742:	e2 0f       	add	r30, r18
    2744:	f3 1f       	adc	r31, r19
    2746:	df 01       	movw	r26, r30
    2748:	aa 0f       	add	r26, r26
    274a:	bb 1f       	adc	r27, r27
    274c:	aa 0f       	add	r26, r26
    274e:	bb 1f       	adc	r27, r27
    2750:	aa 0f       	add	r26, r26
    2752:	bb 1f       	adc	r27, r27
    2754:	a0 5f       	subi	r26, 0xF0	; 240
    2756:	bd 4d       	sbci	r27, 0xDD	; 221
    2758:	51 96       	adiw	r26, 0x11	; 17
    275a:	9c 91       	ld	r25, X
    275c:	51 97       	sbiw	r26, 0x11	; 17
    275e:	94 60       	ori	r25, 0x04	; 4
    2760:	51 96       	adiw	r26, 0x11	; 17
    2762:	9c 93       	st	X, r25
    2764:	ee 0f       	add	r30, r30
    2766:	ff 1f       	adc	r31, r31
    2768:	ee 0f       	add	r30, r30
    276a:	ff 1f       	adc	r31, r31
    276c:	ee 0f       	add	r30, r30
    276e:	ff 1f       	adc	r31, r31
    2770:	e0 5e       	subi	r30, 0xE0	; 224
    2772:	fd 4d       	sbci	r31, 0xDD	; 221
    2774:	01 e0       	ldi	r16, 0x01	; 1
    2776:	06 93       	lac	Z, r16
    2778:	71 df       	rcall	.-286    	; 0x265c <udd_ep_abort>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	0f 91       	pop	r16
    277e:	08 95       	ret

00002780 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2780:	1f 92       	push	r1
    2782:	0f 92       	push	r0
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	0f 92       	push	r0
    2788:	11 24       	eor	r1, r1
    278a:	0f 93       	push	r16
    278c:	2f 93       	push	r18
    278e:	3f 93       	push	r19
    2790:	4f 93       	push	r20
    2792:	5f 93       	push	r21
    2794:	6f 93       	push	r22
    2796:	7f 93       	push	r23
    2798:	8f 93       	push	r24
    279a:	9f 93       	push	r25
    279c:	af 93       	push	r26
    279e:	bf 93       	push	r27
    27a0:	ef 93       	push	r30
    27a2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    27a4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27a8:	88 23       	and	r24, r24
    27aa:	44 f4       	brge	.+16     	; 0x27bc <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    27ac:	80 e8       	ldi	r24, 0x80	; 128
    27ae:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    27b2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    27b6:	0e 94 39 03 	call	0x672	; 0x672 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    27ba:	8a c0       	rjmp	.+276    	; 0x28d0 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    27bc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27c0:	82 ff       	sbrs	r24, 2
    27c2:	20 c0       	rjmp	.+64     	; 0x2804 <__vector_125+0x84>
		udd_ack_underflow_event();
    27c4:	84 e0       	ldi	r24, 0x04	; 4
    27c6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    27ca:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <udd_sram+0x18>
    27ce:	86 ff       	sbrs	r24, 6
    27d0:	7f c0       	rjmp	.+254    	; 0x28d0 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    27d2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    27d6:	81 fd       	sbrc	r24, 1
    27d8:	7b c0       	rjmp	.+246    	; 0x28d0 <__vector_125+0x150>
    27da:	43 db       	rcall	.-2426   	; 0x1e62 <udd_ctrl_interrupt_tc_setup>
    27dc:	81 11       	cpse	r24, r1
    27de:	78 c0       	rjmp	.+240    	; 0x28d0 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    27e0:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    27e4:	81 30       	cpi	r24, 0x01	; 1
    27e6:	11 f4       	brne	.+4      	; 0x27ec <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    27e8:	79 da       	rcall	.-2830   	; 0x1cdc <udd_ctrl_send_zlp_in>
    27ea:	72 c0       	rjmp	.+228    	; 0x28d0 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    27ec:	84 30       	cpi	r24, 0x04	; 4
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <__vector_125+0x72>
    27f0:	6f c0       	rjmp	.+222    	; 0x28d0 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    27f2:	e9 e2       	ldi	r30, 0x29	; 41
    27f4:	f2 e2       	ldi	r31, 0x22	; 34
    27f6:	04 e0       	ldi	r16, 0x04	; 4
    27f8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    27fa:	e1 e2       	ldi	r30, 0x21	; 33
    27fc:	f2 e2       	ldi	r31, 0x22	; 34
    27fe:	04 e0       	ldi	r16, 0x04	; 4
    2800:	05 93       	las	Z, r16
    2802:	66 c0       	rjmp	.+204    	; 0x28d0 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2804:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2808:	81 ff       	sbrs	r24, 1
    280a:	5d c0       	rjmp	.+186    	; 0x28c6 <__vector_125+0x146>
		udd_ack_overflow_event();
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2812:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <udd_sram+0x10>
    2816:	86 ff       	sbrs	r24, 6
    2818:	5b c0       	rjmp	.+182    	; 0x28d0 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    281a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    281e:	81 fd       	sbrc	r24, 1
    2820:	57 c0       	rjmp	.+174    	; 0x28d0 <__vector_125+0x150>
    2822:	1f db       	rcall	.-2498   	; 0x1e62 <udd_ctrl_interrupt_tc_setup>
    2824:	81 11       	cpse	r24, r1
    2826:	54 c0       	rjmp	.+168    	; 0x28d0 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2828:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    282c:	82 30       	cpi	r24, 0x02	; 2
    282e:	41 f4       	brne	.+16     	; 0x2840 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2830:	84 e0       	ldi	r24, 0x04	; 4
    2832:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2836:	e0 e2       	ldi	r30, 0x20	; 32
    2838:	f2 e2       	ldi	r31, 0x22	; 34
    283a:	02 e0       	ldi	r16, 0x02	; 2
    283c:	06 93       	lac	Z, r16
    283e:	48 c0       	rjmp	.+144    	; 0x28d0 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2840:	83 30       	cpi	r24, 0x03	; 3
    2842:	09 f0       	breq	.+2      	; 0x2846 <__vector_125+0xc6>
    2844:	45 c0       	rjmp	.+138    	; 0x28d0 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2846:	e9 e2       	ldi	r30, 0x29	; 41
    2848:	f2 e2       	ldi	r31, 0x22	; 34
    284a:	04 e0       	ldi	r16, 0x04	; 4
    284c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    284e:	e1 e2       	ldi	r30, 0x21	; 33
    2850:	f2 e2       	ldi	r31, 0x22	; 34
    2852:	04 e0       	ldi	r16, 0x04	; 4
    2854:	05 93       	las	Z, r16
    2856:	3c c0       	rjmp	.+120    	; 0x28d0 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2858:	80 e1       	ldi	r24, 0x10	; 16
    285a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	fd de       	rcall	.-518    	; 0x265c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2862:	81 e8       	ldi	r24, 0x81	; 129
    2864:	fb de       	rcall	.-522    	; 0x265c <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	f9 de       	rcall	.-526    	; 0x265c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    286a:	82 e8       	ldi	r24, 0x82	; 130
    286c:	f7 de       	rcall	.-530    	; 0x265c <udd_ep_abort>
		}
#endif
		udc_reset();
    286e:	0e 94 35 0a 	call	0x146a	; 0x146a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2872:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2876:	e0 e1       	ldi	r30, 0x10	; 16
    2878:	f2 e2       	ldi	r31, 0x22	; 34
    287a:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    287c:	96 e0       	ldi	r25, 0x06	; 6
    287e:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2880:	83 e4       	ldi	r24, 0x43	; 67
    2882:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2884:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2886:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2888:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    288a:	89 ec       	ldi	r24, 0xC9	; 201
    288c:	91 e2       	ldi	r25, 0x21	; 33
    288e:	84 8b       	std	Z+20, r24	; 0x14
    2890:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2892:	ef d9       	rcall	.-3106   	; 0x1c72 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2894:	1d c0       	rjmp	.+58     	; 0x28d0 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2896:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    289a:	86 ff       	sbrs	r24, 6
    289c:	08 c0       	rjmp	.+16     	; 0x28ae <__vector_125+0x12e>
		udd_ack_suspend_event();
    289e:	80 e4       	ldi	r24, 0x40	; 64
    28a0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	bc d9       	rcall	.-3208   	; 0x1c20 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    28a8:	0e 94 37 03 	call	0x66e	; 0x66e <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    28ac:	11 c0       	rjmp	.+34     	; 0x28d0 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    28ae:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28b2:	85 ff       	sbrs	r24, 5
    28b4:	0d c0       	rjmp	.+26     	; 0x28d0 <__vector_125+0x150>
		udd_ack_resume_event();
    28b6:	80 e2       	ldi	r24, 0x20	; 32
    28b8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	b0 d9       	rcall	.-3232   	; 0x1c20 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    28c0:	0e 94 38 03 	call	0x670	; 0x670 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    28c4:	05 c0       	rjmp	.+10     	; 0x28d0 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    28c6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28ca:	84 fd       	sbrc	r24, 4
    28cc:	c5 cf       	rjmp	.-118    	; 0x2858 <__vector_125+0xd8>
    28ce:	e3 cf       	rjmp	.-58     	; 0x2896 <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    28d0:	ff 91       	pop	r31
    28d2:	ef 91       	pop	r30
    28d4:	bf 91       	pop	r27
    28d6:	af 91       	pop	r26
    28d8:	9f 91       	pop	r25
    28da:	8f 91       	pop	r24
    28dc:	7f 91       	pop	r23
    28de:	6f 91       	pop	r22
    28e0:	5f 91       	pop	r21
    28e2:	4f 91       	pop	r20
    28e4:	3f 91       	pop	r19
    28e6:	2f 91       	pop	r18
    28e8:	0f 91       	pop	r16
    28ea:	0f 90       	pop	r0
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	0f 90       	pop	r0
    28f0:	1f 90       	pop	r1
    28f2:	18 95       	reti

000028f4 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    28f4:	1f 92       	push	r1
    28f6:	0f 92       	push	r0
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	0f 92       	push	r0
    28fc:	11 24       	eor	r1, r1
    28fe:	0f 93       	push	r16
    2900:	1f 93       	push	r17
    2902:	2f 93       	push	r18
    2904:	3f 93       	push	r19
    2906:	4f 93       	push	r20
    2908:	5f 93       	push	r21
    290a:	6f 93       	push	r22
    290c:	7f 93       	push	r23
    290e:	8f 93       	push	r24
    2910:	9f 93       	push	r25
    2912:	af 93       	push	r26
    2914:	bf 93       	push	r27
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	ef 93       	push	r30
    291c:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    291e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2922:	81 fd       	sbrc	r24, 1
    2924:	03 c0       	rjmp	.+6      	; 0x292c <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2926:	9d da       	rcall	.-2758   	; 0x1e62 <udd_ctrl_interrupt_tc_setup>
    2928:	81 11       	cpse	r24, r1
    292a:	b9 c0       	rjmp	.+370    	; 0x2a9e <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2932:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2936:	81 95       	neg	r24
    2938:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    293a:	e0 e2       	ldi	r30, 0x20	; 32
    293c:	f2 e2       	ldi	r31, 0x22	; 34
    293e:	e8 1b       	sub	r30, r24
    2940:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2942:	20 81       	ld	r18, Z
    2944:	31 81       	ldd	r19, Z+1	; 0x01
    2946:	20 52       	subi	r18, 0x20	; 32
    2948:	32 42       	sbci	r19, 0x22	; 34
    294a:	36 95       	lsr	r19
    294c:	27 95       	ror	r18
    294e:	36 95       	lsr	r19
    2950:	27 95       	ror	r18
    2952:	36 95       	lsr	r19
    2954:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2956:	82 2f       	mov	r24, r18
    2958:	86 95       	lsr	r24
    295a:	20 fd       	sbrc	r18, 0
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <__vector_126+0x6e>
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	01 c0       	rjmp	.+2      	; 0x2964 <__vector_126+0x70>
    2962:	90 e8       	ldi	r25, 0x80	; 128
    2964:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2966:	e8 2f       	mov	r30, r24
    2968:	ef 70       	andi	r30, 0x0F	; 15
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	ee 0f       	add	r30, r30
    296e:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2970:	28 2f       	mov	r18, r24
    2972:	08 2e       	mov	r0, r24
    2974:	00 0c       	add	r0, r0
    2976:	33 0b       	sbc	r19, r19
    2978:	22 27       	eor	r18, r18
    297a:	33 0f       	add	r19, r19
    297c:	22 1f       	adc	r18, r18
    297e:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2980:	e2 0f       	add	r30, r18
    2982:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2984:	df 01       	movw	r26, r30
    2986:	aa 0f       	add	r26, r26
    2988:	bb 1f       	adc	r27, r27
    298a:	aa 0f       	add	r26, r26
    298c:	bb 1f       	adc	r27, r27
    298e:	aa 0f       	add	r26, r26
    2990:	bb 1f       	adc	r27, r27
    2992:	a0 5e       	subi	r26, 0xE0	; 224
    2994:	bd 4d       	sbci	r27, 0xDD	; 221
    2996:	9c 91       	ld	r25, X
    2998:	95 ff       	sbrs	r25, 5
    299a:	81 c0       	rjmp	.+258    	; 0x2a9e <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    299c:	fd 01       	movw	r30, r26
    299e:	00 e2       	ldi	r16, 0x20	; 32
    29a0:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    29a2:	81 11       	cpse	r24, r1
    29a4:	77 c0       	rjmp	.+238    	; 0x2a94 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29a6:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    29aa:	84 30       	cpi	r24, 0x04	; 4
    29ac:	19 f4       	brne	.+6      	; 0x29b4 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    29ae:	a4 d9       	rcall	.-3256   	; 0x1cf8 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    29b0:	60 d9       	rcall	.-3392   	; 0x1c72 <udd_ctrl_init>
    29b2:	75 c0       	rjmp	.+234    	; 0x2a9e <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    29b4:	00 91 22 22 	lds	r16, 0x2222	; 0x802222 <udd_sram+0x12>
    29b8:	10 91 23 22 	lds	r17, 0x2223	; 0x802223 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    29bc:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0xa>
    29c0:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0xb>
    29c4:	c0 91 09 22 	lds	r28, 0x2209	; 0x802209 <udd_ctrl_payload_nb_trans>
    29c8:	d0 91 0a 22 	lds	r29, 0x220A	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    29cc:	9e 01       	movw	r18, r28
    29ce:	20 0f       	add	r18, r16
    29d0:	31 1f       	adc	r19, r17
    29d2:	82 17       	cp	r24, r18
    29d4:	93 07       	cpc	r25, r19
    29d6:	18 f4       	brcc	.+6      	; 0x29de <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    29d8:	8c 01       	movw	r16, r24
    29da:	0c 1b       	sub	r16, r28
    29dc:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    29de:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x8>
    29e2:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x9>
    29e6:	a8 01       	movw	r20, r16
    29e8:	69 ec       	ldi	r22, 0xC9	; 201
    29ea:	71 e2       	ldi	r23, 0x21	; 33
    29ec:	8c 0f       	add	r24, r28
    29ee:	9d 1f       	adc	r25, r29
    29f0:	98 d0       	rcall	.+304    	; 0x2b22 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    29f2:	c0 0f       	add	r28, r16
    29f4:	d1 1f       	adc	r29, r17
    29f6:	c0 93 09 22 	sts	0x2209, r28	; 0x802209 <udd_ctrl_payload_nb_trans>
    29fa:	d0 93 0a 22 	sts	0x220A, r29	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    29fe:	00 34       	cpi	r16, 0x40	; 64
    2a00:	11 05       	cpc	r17, r1
    2a02:	69 f4       	brne	.+26     	; 0x2a1e <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2a04:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    2a08:	90 91 0c 22 	lds	r25, 0x220C	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    2a0c:	8c 0f       	add	r24, r28
    2a0e:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2a10:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udd_g_ctrlreq+0x6>
    2a14:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udd_g_ctrlreq+0x7>
    2a18:	82 17       	cp	r24, r18
    2a1a:	93 07       	cpc	r25, r19
    2a1c:	80 f0       	brcs	.+32     	; 0x2a3e <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2a1e:	e2 e7       	ldi	r30, 0x72	; 114
    2a20:	f4 e2       	ldi	r31, 0x24	; 36
    2a22:	c2 87       	std	Z+10, r28	; 0x0a
    2a24:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2a26:	06 84       	ldd	r0, Z+14	; 0x0e
    2a28:	f7 85       	ldd	r31, Z+15	; 0x0f
    2a2a:	e0 2d       	mov	r30, r0
    2a2c:	30 97       	sbiw	r30, 0x00	; 0
    2a2e:	29 f0       	breq	.+10     	; 0x2a3a <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2a30:	09 95       	icall
    2a32:	81 11       	cpse	r24, r1
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2a36:	44 d9       	rcall	.-3448   	; 0x1cc0 <udd_ctrl_stall_data>
    2a38:	32 c0       	rjmp	.+100    	; 0x2a9e <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2a3a:	50 d9       	rcall	.-3424   	; 0x1cdc <udd_ctrl_send_zlp_in>
    2a3c:	30 c0       	rjmp	.+96     	; 0x2a9e <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2a3e:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0xa>
    2a42:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0xb>
    2a46:	c8 17       	cp	r28, r24
    2a48:	d9 07       	cpc	r29, r25
    2a4a:	f9 f4       	brne	.+62     	; 0x2a8a <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2a4c:	e0 91 80 24 	lds	r30, 0x2480	; 0x802480 <udd_g_ctrlreq+0xe>
    2a50:	f0 91 81 24 	lds	r31, 0x2481	; 0x802481 <udd_g_ctrlreq+0xf>
    2a54:	30 97       	sbiw	r30, 0x00	; 0
    2a56:	11 f4       	brne	.+4      	; 0x2a5c <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2a58:	33 d9       	rcall	.-3482   	; 0x1cc0 <udd_ctrl_stall_data>
    2a5a:	21 c0       	rjmp	.+66     	; 0x2a9e <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2a5c:	09 95       	icall
    2a5e:	81 11       	cpse	r24, r1
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2a62:	2e d9       	rcall	.-3492   	; 0x1cc0 <udd_ctrl_stall_data>
    2a64:	1c c0       	rjmp	.+56     	; 0x2a9e <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2a66:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    2a6a:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    2a6e:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udd_ctrl_payload_nb_trans>
    2a72:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    2a76:	82 0f       	add	r24, r18
    2a78:	93 1f       	adc	r25, r19
    2a7a:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    2a7e:	90 93 0c 22 	sts	0x220C, r25	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2a82:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_payload_nb_trans>
    2a86:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2a8a:	e0 e2       	ldi	r30, 0x20	; 32
    2a8c:	f2 e2       	ldi	r31, 0x22	; 34
    2a8e:	02 e0       	ldi	r16, 0x02	; 2
    2a90:	06 93       	lac	Z, r16
    2a92:	05 c0       	rjmp	.+10     	; 0x2a9e <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2a94:	80 38       	cpi	r24, 0x80	; 128
    2a96:	11 f4       	brne	.+4      	; 0x2a9c <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2a98:	37 d9       	rcall	.-3474   	; 0x1d08 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2a9a:	01 c0       	rjmp	.+2      	; 0x2a9e <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2a9c:	51 da       	rcall	.-2910   	; 0x1f40 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2a9e:	ff 91       	pop	r31
    2aa0:	ef 91       	pop	r30
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	bf 91       	pop	r27
    2aa8:	af 91       	pop	r26
    2aaa:	9f 91       	pop	r25
    2aac:	8f 91       	pop	r24
    2aae:	7f 91       	pop	r23
    2ab0:	6f 91       	pop	r22
    2ab2:	5f 91       	pop	r21
    2ab4:	4f 91       	pop	r20
    2ab6:	3f 91       	pop	r19
    2ab8:	2f 91       	pop	r18
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	0f 90       	pop	r0
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	0f 90       	pop	r0
    2ac4:	1f 90       	pop	r1
    2ac6:	18 95       	reti

00002ac8 <__udivmodhi4>:
    2ac8:	aa 1b       	sub	r26, r26
    2aca:	bb 1b       	sub	r27, r27
    2acc:	51 e1       	ldi	r21, 0x11	; 17
    2ace:	07 c0       	rjmp	.+14     	; 0x2ade <__udivmodhi4_ep>

00002ad0 <__udivmodhi4_loop>:
    2ad0:	aa 1f       	adc	r26, r26
    2ad2:	bb 1f       	adc	r27, r27
    2ad4:	a6 17       	cp	r26, r22
    2ad6:	b7 07       	cpc	r27, r23
    2ad8:	10 f0       	brcs	.+4      	; 0x2ade <__udivmodhi4_ep>
    2ada:	a6 1b       	sub	r26, r22
    2adc:	b7 0b       	sbc	r27, r23

00002ade <__udivmodhi4_ep>:
    2ade:	88 1f       	adc	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	5a 95       	dec	r21
    2ae4:	a9 f7       	brne	.-22     	; 0x2ad0 <__udivmodhi4_loop>
    2ae6:	80 95       	com	r24
    2ae8:	90 95       	com	r25
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	08 95       	ret

00002af0 <__divmodhi4>:
    2af0:	97 fb       	bst	r25, 7
    2af2:	07 2e       	mov	r0, r23
    2af4:	16 f4       	brtc	.+4      	; 0x2afa <__divmodhi4+0xa>
    2af6:	00 94       	com	r0
    2af8:	06 d0       	rcall	.+12     	; 0x2b06 <__divmodhi4_neg1>
    2afa:	77 fd       	sbrc	r23, 7
    2afc:	08 d0       	rcall	.+16     	; 0x2b0e <__divmodhi4_neg2>
    2afe:	e4 df       	rcall	.-56     	; 0x2ac8 <__udivmodhi4>
    2b00:	07 fc       	sbrc	r0, 7
    2b02:	05 d0       	rcall	.+10     	; 0x2b0e <__divmodhi4_neg2>
    2b04:	3e f4       	brtc	.+14     	; 0x2b14 <__divmodhi4_exit>

00002b06 <__divmodhi4_neg1>:
    2b06:	90 95       	com	r25
    2b08:	81 95       	neg	r24
    2b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0c:	08 95       	ret

00002b0e <__divmodhi4_neg2>:
    2b0e:	70 95       	com	r23
    2b10:	61 95       	neg	r22
    2b12:	7f 4f       	sbci	r23, 0xFF	; 255

00002b14 <__divmodhi4_exit>:
    2b14:	08 95       	ret

00002b16 <__tablejump2__>:
    2b16:	ee 0f       	add	r30, r30
    2b18:	ff 1f       	adc	r31, r31
    2b1a:	05 90       	lpm	r0, Z+
    2b1c:	f4 91       	lpm	r31, Z
    2b1e:	e0 2d       	mov	r30, r0
    2b20:	09 94       	ijmp

00002b22 <memcpy>:
    2b22:	fb 01       	movw	r30, r22
    2b24:	dc 01       	movw	r26, r24
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <memcpy+0xa>
    2b28:	01 90       	ld	r0, Z+
    2b2a:	0d 92       	st	X+, r0
    2b2c:	41 50       	subi	r20, 0x01	; 1
    2b2e:	50 40       	sbci	r21, 0x00	; 0
    2b30:	d8 f7       	brcc	.-10     	; 0x2b28 <memcpy+0x6>
    2b32:	08 95       	ret

00002b34 <_exit>:
    2b34:	f8 94       	cli

00002b36 <__stop_program>:
    2b36:	ff cf       	rjmp	.-2      	; 0x2b36 <__stop_program>
