
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  00002cfa  00002d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d9e  008020b2  008020b2  00002e42  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00002eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b4af  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cf4  00000000  00000000  0000e84f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000093fe  00000000  00000000  00010543  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  00019944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f6f7  00000000  00000000  0001a45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002402  00000000  00000000  00049b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  0004bf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bc26  00000000  00000000  0004c360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2c c1       	rjmp	.+600    	; 0x25a <__ctors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c6       	rjmp	.+3266   	; 0xcdc <__vector_6>
      1a:	00 00       	nop
      1c:	97 c7       	rjmp	.+3886   	; 0xf4c <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_8>
      24:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_9>
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	26 c1       	rjmp	.+588    	; 0x292 <__bad_interrupt>
      46:	00 00       	nop
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1a c1       	rjmp	.+564    	; 0x292 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_24>
      64:	16 c1       	rjmp	.+556    	; 0x292 <__bad_interrupt>
      66:	00 00       	nop
      68:	14 c1       	rjmp	.+552    	; 0x292 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	08 c1       	rjmp	.+528    	; 0x292 <__bad_interrupt>
      82:	00 00       	nop
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fa c0       	rjmp	.+500    	; 0x292 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f4 c0       	rjmp	.+488    	; 0x292 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ea c0       	rjmp	.+468    	; 0x292 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d6 c0       	rjmp	.+428    	; 0x292 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d4 c0       	rjmp	.+424    	; 0x292 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d2 c0       	rjmp	.+420    	; 0x292 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d0 c0       	rjmp	.+416    	; 0x292 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ce c0       	rjmp	.+412    	; 0x292 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	cc c0       	rjmp	.+408    	; 0x292 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ca c0       	rjmp	.+404    	; 0x292 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c8 c0       	rjmp	.+400    	; 0x292 <__bad_interrupt>
     102:	00 00       	nop
     104:	c6 c0       	rjmp	.+396    	; 0x292 <__bad_interrupt>
     106:	00 00       	nop
     108:	c4 c0       	rjmp	.+392    	; 0x292 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c2 c0       	rjmp	.+388    	; 0x292 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c0 c0       	rjmp	.+384    	; 0x292 <__bad_interrupt>
     112:	00 00       	nop
     114:	be c0       	rjmp	.+380    	; 0x292 <__bad_interrupt>
     116:	00 00       	nop
     118:	bc c0       	rjmp	.+376    	; 0x292 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c0       	rjmp	.+372    	; 0x292 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b8 c0       	rjmp	.+368    	; 0x292 <__bad_interrupt>
     122:	00 00       	nop
     124:	b6 c0       	rjmp	.+364    	; 0x292 <__bad_interrupt>
     126:	00 00       	nop
     128:	b4 c0       	rjmp	.+360    	; 0x292 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	b2 c0       	rjmp	.+356    	; 0x292 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b0 c0       	rjmp	.+352    	; 0x292 <__bad_interrupt>
     132:	00 00       	nop
     134:	ae c0       	rjmp	.+348    	; 0x292 <__bad_interrupt>
     136:	00 00       	nop
     138:	ac c0       	rjmp	.+344    	; 0x292 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	aa c0       	rjmp	.+340    	; 0x292 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a8 c0       	rjmp	.+336    	; 0x292 <__bad_interrupt>
     142:	00 00       	nop
     144:	a6 c0       	rjmp	.+332    	; 0x292 <__bad_interrupt>
     146:	00 00       	nop
     148:	a4 c0       	rjmp	.+328    	; 0x292 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_83>
     150:	a0 c0       	rjmp	.+320    	; 0x292 <__bad_interrupt>
     152:	00 00       	nop
     154:	9e c0       	rjmp	.+316    	; 0x292 <__bad_interrupt>
     156:	00 00       	nop
     158:	9c c0       	rjmp	.+312    	; 0x292 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9a c0       	rjmp	.+308    	; 0x292 <__bad_interrupt>
     15e:	00 00       	nop
     160:	98 c0       	rjmp	.+304    	; 0x292 <__bad_interrupt>
     162:	00 00       	nop
     164:	96 c0       	rjmp	.+300    	; 0x292 <__bad_interrupt>
     166:	00 00       	nop
     168:	94 c0       	rjmp	.+296    	; 0x292 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	92 c0       	rjmp	.+292    	; 0x292 <__bad_interrupt>
     16e:	00 00       	nop
     170:	90 c0       	rjmp	.+288    	; 0x292 <__bad_interrupt>
     172:	00 00       	nop
     174:	8e c0       	rjmp	.+284    	; 0x292 <__bad_interrupt>
     176:	00 00       	nop
     178:	8c c0       	rjmp	.+280    	; 0x292 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8a c0       	rjmp	.+276    	; 0x292 <__bad_interrupt>
     17e:	00 00       	nop
     180:	88 c0       	rjmp	.+272    	; 0x292 <__bad_interrupt>
     182:	00 00       	nop
     184:	86 c0       	rjmp	.+268    	; 0x292 <__bad_interrupt>
     186:	00 00       	nop
     188:	84 c0       	rjmp	.+264    	; 0x292 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	82 c0       	rjmp	.+260    	; 0x292 <__bad_interrupt>
     18e:	00 00       	nop
     190:	80 c0       	rjmp	.+256    	; 0x292 <__bad_interrupt>
     192:	00 00       	nop
     194:	7e c0       	rjmp	.+252    	; 0x292 <__bad_interrupt>
     196:	00 00       	nop
     198:	7c c0       	rjmp	.+248    	; 0x292 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7a c0       	rjmp	.+244    	; 0x292 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	78 c0       	rjmp	.+240    	; 0x292 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	76 c0       	rjmp	.+236    	; 0x292 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	74 c0       	rjmp	.+232    	; 0x292 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	72 c0       	rjmp	.+228    	; 0x292 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	70 c0       	rjmp	.+224    	; 0x292 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	6e c0       	rjmp	.+220    	; 0x292 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	6c c0       	rjmp	.+216    	; 0x292 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6a c0       	rjmp	.+212    	; 0x292 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	68 c0       	rjmp	.+208    	; 0x292 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	66 c0       	rjmp	.+204    	; 0x292 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	64 c0       	rjmp	.+200    	; 0x292 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	62 c0       	rjmp	.+196    	; 0x292 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	60 c0       	rjmp	.+192    	; 0x292 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5e c0       	rjmp	.+188    	; 0x292 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	5c c0       	rjmp	.+184    	; 0x292 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5a c0       	rjmp	.+180    	; 0x292 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	58 c0       	rjmp	.+176    	; 0x292 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	54 c0       	rjmp	.+168    	; 0x292 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	52 c0       	rjmp	.+164    	; 0x292 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	50 c0       	rjmp	.+160    	; 0x292 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__vector_125>
     1f8:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__vector_126>
     1fc:	8c 06       	cpc	r8, r28
     1fe:	b3 06       	cpc	r11, r19
     200:	da 06       	cpc	r13, r26
     202:	01 07       	cpc	r16, r17
     204:	28 07       	cpc	r18, r24
     206:	98 07       	cpc	r25, r24
     208:	4f 07       	cpc	r20, r31
     20a:	74 07       	cpc	r23, r20
     20c:	94 0b       	sbc	r25, r20
     20e:	96 0b       	sbc	r25, r22
     210:	d4 0b       	sbc	r29, r20
     212:	13 0c       	add	r1, r3
     214:	1c 0c       	add	r1, r12
     216:	21 0c       	add	r2, r1
     218:	75 0c       	add	r7, r5
     21a:	7a 0c       	add	r7, r10
     21c:	c2 0b       	sbc	r28, r18
     21e:	c5 0b       	sbc	r28, r21
     220:	c8 0b       	sbc	r28, r24
     222:	ca 0b       	sbc	r28, r26
     224:	cc 0b       	sbc	r28, r28
     226:	ce 0b       	sbc	r28, r30
     228:	d0 0b       	sbc	r29, r16
     22a:	d2 0b       	sbc	r29, r18
     22c:	00 0c       	add	r0, r0
     22e:	03 0c       	add	r0, r3
     230:	06 0c       	add	r0, r6
     232:	09 0c       	add	r0, r9
     234:	0b 0c       	add	r0, r11
     236:	0d 0c       	add	r0, r13
     238:	0f 0c       	add	r0, r15
     23a:	11 0c       	add	r1, r1
     23c:	2d 0c       	add	r2, r13
     23e:	38 0c       	add	r3, r8
     240:	43 0c       	add	r4, r3
     242:	52 0c       	add	r5, r2
     244:	54 0c       	add	r5, r4
     246:	56 0c       	add	r5, r6
     248:	60 0c       	add	r6, r0
     24a:	6a 0c       	add	r6, r10
     24c:	f2 0f       	add	r31, r18
     24e:	f5 0f       	add	r31, r21
     250:	f8 0f       	add	r31, r24
     252:	fb 0f       	add	r31, r27
     254:	fe 0f       	add	r31, r30
     256:	01 10       	cpse	r0, r1
     258:	04 10       	cpse	r0, r4

0000025a <__ctors_end>:
     25a:	11 24       	eor	r1, r1
     25c:	1f be       	out	0x3f, r1	; 63
     25e:	cf ef       	ldi	r28, 0xFF	; 255
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df e2       	ldi	r29, 0x2F	; 47
     264:	de bf       	out	0x3e, r29	; 62

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	ea ef       	ldi	r30, 0xFA	; 250
     26e:	fc e2       	ldi	r31, 0x2C	; 44
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x10>
     272:	05 90       	lpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	a2 3b       	cpi	r26, 0xB2	; 178
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0xc>

0000027c <__do_clear_bss>:
     27c:	2e e2       	ldi	r18, 0x2E	; 46
     27e:	a2 eb       	ldi	r26, 0xB2	; 178
     280:	b0 e2       	ldi	r27, 0x20	; 32
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	a0 35       	cpi	r26, 0x50	; 80
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	53 d0       	rcall	.+166    	; 0x334 <main>
     28e:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <_exit>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <tiny_calibration_init>:

#include "tiny_calibration.h"
#include "globals.h"

tiny_calibration_init(){
	PR.PRPE &= 0b11111110;
     294:	e0 e7       	ldi	r30, 0x70	; 112
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	85 81       	ldd	r24, Z+5	; 0x05
     29a:	8e 7f       	andi	r24, 0xFE	; 254
     29c:	85 83       	std	Z+5, r24	; 0x05
	TC_CALI.PER = 24000;
     29e:	e0 e0       	ldi	r30, 0x00	; 0
     2a0:	fa e0       	ldi	r31, 0x0A	; 10
     2a2:	80 ec       	ldi	r24, 0xC0	; 192
     2a4:	9d e5       	ldi	r25, 0x5D	; 93
     2a6:	86 a3       	std	Z+38, r24	; 0x26
     2a8:	97 a3       	std	Z+39, r25	; 0x27
	TC_CALI.CNT = 12000;
     2aa:	80 ee       	ldi	r24, 0xE0	; 224
     2ac:	9e e2       	ldi	r25, 0x2E	; 46
     2ae:	80 a3       	std	Z+32, r24	; 0x20
     2b0:	91 a3       	std	Z+33, r25	; 0x21
	TC_CALI.CTRLA = TC_CLKSEL_DIV1_gc;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	80 83       	st	Z, r24
     2b6:	08 95       	ret

000002b8 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     2b8:	e0 e8       	ldi	r30, 0x80	; 128
     2ba:	f6 e0       	ldi	r31, 0x06	; 6
     2bc:	8f e0       	ldi	r24, 0x0F	; 15
     2be:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     2c0:	85 e0       	ldi	r24, 0x05	; 5
     2c2:	84 83       	std	Z+4, r24	; 0x04
     2c4:	08 95       	ret

000002c6 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     2c6:	08 95       	ret

000002c8 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * PACKET_SIZE], 250, iso_callback);
     2c8:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <usb_state>
     2cc:	2e ee       	ldi	r18, 0xEE	; 238
     2ce:	32 e0       	ldi	r19, 0x02	; 2
     2d0:	42 9f       	mul	r20, r18
     2d2:	c0 01       	movw	r24, r0
     2d4:	43 9f       	mul	r20, r19
     2d6:	90 0d       	add	r25, r0
     2d8:	11 24       	eor	r1, r1
     2da:	44 e6       	ldi	r20, 0x64	; 100
     2dc:	51 e0       	ldi	r21, 0x01	; 1
     2de:	6a ef       	ldi	r22, 0xFA	; 250
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	82 59       	subi	r24, 0x92	; 146
     2e4:	99 4d       	sbci	r25, 0xD9	; 217
     2e6:	0c 94 05 0a 	jmp	0x140a	; 0x140a <udi_vendor_iso_in_run>
     2ea:	08 95       	ret

000002ec <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 250], 250, iso_callback2);
     2ec:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <usb_state>
     2f0:	2e ee       	ldi	r18, 0xEE	; 238
     2f2:	32 e0       	ldi	r19, 0x02	; 2
     2f4:	42 9f       	mul	r20, r18
     2f6:	c0 01       	movw	r24, r0
     2f8:	43 9f       	mul	r20, r19
     2fa:	90 0d       	add	r25, r0
     2fc:	11 24       	eor	r1, r1
     2fe:	46 e7       	ldi	r20, 0x76	; 118
     300:	51 e0       	ldi	r21, 0x01	; 1
     302:	6a ef       	ldi	r22, 0xFA	; 250
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	88 59       	subi	r24, 0x98	; 152
     308:	98 4d       	sbci	r25, 0xD8	; 216
     30a:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <udi_vendor_iso_in_run2>
     30e:	08 95       	ret

00000310 <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 500], 250, iso_callback3);
     310:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <usb_state>
     314:	2e ee       	ldi	r18, 0xEE	; 238
     316:	32 e0       	ldi	r19, 0x02	; 2
     318:	42 9f       	mul	r20, r18
     31a:	c0 01       	movw	r24, r0
     31c:	43 9f       	mul	r20, r19
     31e:	90 0d       	add	r25, r0
     320:	11 24       	eor	r1, r1
     322:	48 e8       	ldi	r20, 0x88	; 136
     324:	51 e0       	ldi	r21, 0x01	; 1
     326:	6a ef       	ldi	r22, 0xFA	; 250
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	8e 59       	subi	r24, 0x9E	; 158
     32c:	97 4d       	sbci	r25, 0xD7	; 215
     32e:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <udi_vendor_iso_in_run3>
     332:	08 95       	ret

00000334 <main>:
#define CNT_CNT_MAX 256
volatile unsigned short cntCnt[CNT_CNT_MAX];
volatile unsigned short cntCntCnt = 0;

int main(void){
	irq_initialize_vectors();
     334:	87 e0       	ldi	r24, 0x07	; 7
     336:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     33a:	78 94       	sei
//	sysclk_init();

	
	//Set up 48MHz DFLL for USB.
	OSC.DFLLCTRL = OSC_RC32MCREF_USBSOF_gc;
     33c:	c0 e5       	ldi	r28, 0x50	; 80
     33e:	d0 e0       	ldi	r29, 0x00	; 0
     340:	14 e0       	ldi	r17, 0x04	; 4
     342:	1e 83       	std	Y+6, r17	; 0x06
	DFLLRC32M.CALB = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC)); //THIS is the val for 48MHz.  RCOSC32M is for a 32MHz calibration.  That makes a lot of sense now...
     344:	8c e1       	ldi	r24, 0x1C	; 28
     346:	e7 d0       	rcall	.+462    	; 0x516 <ReadCalibrationByte>
     348:	e0 e6       	ldi	r30, 0x60	; 96
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	83 83       	std	Z+3, r24	; 0x03
	DFLLRC32M.COMP2 = 0xBB;
     34e:	8b eb       	ldi	r24, 0xBB	; 187
     350:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.COMP1= 0x80;  //0xBB80 = 48,000.  
     352:	80 e8       	ldi	r24, 0x80	; 128
     354:	85 83       	std	Z+5, r24	; 0x05
	DFLLRC32M.CTRL = 0x01; //Enable
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 83       	st	Z, r24
		
	CCP = CCP_IOREG_gc;
     35a:	88 ed       	ldi	r24, 0xD8	; 216
     35c:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc;  //All peripheral clocks = CLKsys / 2.
     35e:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
	//CLK.USBCTRL handled by udc
	OSC.CTRL = OSC_RC32MEN_bm | OSC_RC2MEN_bm;  //Enable 2MHz, 32MHz references.
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	88 83       	st	Y, r24
	while(OSC.STATUS != (OSC_RC32MRDY_bm | OSC_RC2MRDY_bm)); //Wait for them all to be ready before continuing
     366:	e0 e5       	ldi	r30, 0x50	; 80
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	81 81       	ldd	r24, Z+1	; 0x01
     36c:	83 30       	cpi	r24, 0x03	; 3
     36e:	e9 f7       	brne	.-6      	; 0x36a <main+0x36>
	
	//4 step process from ASF manual.  Puts a 48MHz clock on the PLL output
	OSC.CTRL |= OSC_RC2MEN_bm;  //1. Enable reference clock source.
     370:	e0 e5       	ldi	r30, 0x50	; 80
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	81 60       	ori	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
	OSC.PLLCTRL = OSC_PLLSRC_RC2M_gc | 25; //2. Set the multiplication factor and select the clock reference for the PLL.
     37a:	89 e1       	ldi	r24, 0x19	; 25
     37c:	85 83       	std	Z+5, r24	; 0x05
	while(!(OSC.STATUS & OSC_RC2MRDY_bm)); //3. Wait until the clock reference source is stable.
     37e:	81 81       	ldd	r24, Z+1	; 0x01
     380:	80 ff       	sbrs	r24, 0
     382:	fd cf       	rjmp	.-6      	; 0x37e <main+0x4a>
	OSC.CTRL |= OSC_PLLEN_bm; //4. Enable the PLL
     384:	e0 e5       	ldi	r30, 0x50	; 80
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	80 61       	ori	r24, 0x10	; 16
     38c:	80 83       	st	Z, r24
	
	//Move CPU + Peripherals to 48MHz PLLL clock.
	while(!(OSC.STATUS & OSC_PLLRDY_bm));
     38e:	81 81       	ldd	r24, Z+1	; 0x01
     390:	84 ff       	sbrs	r24, 4
     392:	fd cf       	rjmp	.-6      	; 0x38e <main+0x5a>
	CCP = CCP_IOREG_gc;
     394:	88 ed       	ldi	r24, 0xD8	; 216
     396:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     398:	84 e0       	ldi	r24, 0x04	; 4
     39a:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	
	board_init();
     39e:	93 df       	rcall	.-218    	; 0x2c6 <board_init>
	udc_start();
     3a0:	0e 94 14 0b 	call	0x1628	; 0x1628 <udc_start>
	tiny_dac_setup();
     3a4:	fe d0       	rcall	.+508    	; 0x5a2 <tiny_dac_setup>
	tiny_dma_setup();
     3a6:	21 d1       	rcall	.+578    	; 0x5ea <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	bd d0       	rcall	.+378    	; 0x528 <tiny_adc_setup>
	tiny_adc_pid_setup();
     3ae:	a9 d0       	rcall	.+338    	; 0x502 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     3b0:	8c e0       	ldi	r24, 0x0C	; 12
     3b2:	9d d0       	rcall	.+314    	; 0x4ee <tiny_adc_ch1setup>
	tiny_timer_setup();
     3b4:	c0 d6       	rcall	.+3456   	; 0x1136 <tiny_timer_setup>
	tiny_uart_setup();
     3b6:	7b d7       	rcall	.+3830   	; 0x12ae <tiny_uart_setup>
	tiny_spi_setup();
     3b8:	92 d7       	rcall	.+3876   	; 0x12de <tiny_spi_setup>
	tiny_dig_setup();
     3ba:	7e df       	rcall	.-260    	; 0x2b8 <tiny_dig_setup>
     3bc:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <debug_counter>
     3c0:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <debug_counter+0x1>
     3c4:	a0 91 5c 22 	lds	r26, 0x225C	; 0x80225c <debug_counter+0x2>
     3c8:	b0 91 5d 22 	lds	r27, 0x225D	; 0x80225d <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	a1 1d       	adc	r26, r1
     3d0:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	21 ee       	ldi	r18, 0xE1	; 225
     3d6:	92 07       	cpc	r25, r18
     3d8:	25 ef       	ldi	r18, 0xF5	; 245
     3da:	a2 07       	cpc	r26, r18
     3dc:	25 e0       	ldi	r18, 0x05	; 5
     3de:	b2 07       	cpc	r27, r18
     3e0:	18 f0       	brcs	.+6      	; 0x3e8 <main+0xb4>
			debug_counter = 0;
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     404:	e3 cf       	rjmp	.-58     	; 0x3cc <main+0x98>

00000406 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     406:	08 95       	ret

00000408 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     408:	08 95       	ret

0000040a <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	if(firstFrame){
     40a:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <firstFrame>
     40e:	88 23       	and	r24, r24
     410:	39 f0       	breq	.+14     	; 0x420 <main_sof_action+0x16>
		tiny_calibration_init();
     412:	40 df       	rcall	.-384    	; 0x294 <tiny_calibration_init>
		firstFrame = 0;
     414:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <firstFrame>
		tcinit = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <tcinit>
     41e:	27 c0       	rjmp	.+78     	; 0x46e <main_sof_action+0x64>
	}
	else{
		if(tcinit){
     420:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tcinit>
     424:	88 23       	and	r24, r24
     426:	19 f1       	breq	.+70     	; 0x46e <main_sof_action+0x64>
			cntCnt[cntCntCnt] = TC_CALI.CNT;
     428:	e0 91 b2 20 	lds	r30, 0x20B2	; 0x8020b2 <__data_end>
     42c:	f0 91 b3 20 	lds	r31, 0x20B3	; 0x8020b3 <__data_end+0x1>
     430:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     434:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     438:	ee 0f       	add	r30, r30
     43a:	ff 1f       	adc	r31, r31
     43c:	e6 5b       	subi	r30, 0xB6	; 182
     43e:	f3 4d       	sbci	r31, 0xD3	; 211
     440:	80 83       	st	Z, r24
     442:	91 83       	std	Z+1, r25	; 0x01
			if(cntCntCnt == (CNT_CNT_MAX - 1)){
     444:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     448:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <__data_end+0x1>
     44c:	8f 3f       	cpi	r24, 0xFF	; 255
     44e:	91 05       	cpc	r25, r1
     450:	29 f4       	brne	.+10     	; 0x45c <main_sof_action+0x52>
				cntCntCnt = 0;
     452:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <__data_end>
     456:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <__data_end+0x1>
     45a:	09 c0       	rjmp	.+18     	; 0x46e <main_sof_action+0x64>
			}
			else cntCntCnt++;
     45c:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     460:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <__data_end+0x1>
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
     46a:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <__data_end+0x1>
		}
	}
	usb_state = !b1_state;
     46e:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	91 11       	cpse	r25, r1
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <usb_state>
     47c:	08 95       	ret

0000047e <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <main_b_vendor_enable>
	firstFrame = 1;
     484:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     488:	44 e6       	ldi	r20, 0x64	; 100
     48a:	51 e0       	ldi	r21, 0x01	; 1
     48c:	6e ee       	ldi	r22, 0xEE	; 238
     48e:	72 e0       	ldi	r23, 0x02	; 2
     490:	8e e6       	ldi	r24, 0x6E	; 110
     492:	96 e2       	ldi	r25, 0x26	; 38
     494:	ba d7       	rcall	.+3956   	; 0x140a <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     496:	46 e7       	ldi	r20, 0x76	; 118
     498:	51 e0       	ldi	r21, 0x01	; 1
     49a:	6e ee       	ldi	r22, 0xEE	; 238
     49c:	72 e0       	ldi	r23, 0x02	; 2
     49e:	88 e6       	ldi	r24, 0x68	; 104
     4a0:	97 e2       	ldi	r25, 0x27	; 39
     4a2:	bf d7       	rcall	.+3966   	; 0x1422 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     4a4:	48 e8       	ldi	r20, 0x88	; 136
     4a6:	51 e0       	ldi	r21, 0x01	; 1
     4a8:	6e ee       	ldi	r22, 0xEE	; 238
     4aa:	72 e0       	ldi	r23, 0x02	; 2
     4ac:	82 e6       	ldi	r24, 0x62	; 98
     4ae:	98 e2       	ldi	r25, 0x28	; 40
     4b0:	c4 d7       	rcall	.+3976   	; 0x143a <udi_vendor_iso_in_run3>
	return true;
}
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	08 95       	ret

000004b6 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     4b6:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <main_b_vendor_enable>
     4ba:	08 95       	ret

000004bc <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	08 95       	ret

000004c0 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	08 95       	ret

000004c4 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     4c4:	e0 e0       	ldi	r30, 0x00	; 0
     4c6:	f2 e0       	ldi	r31, 0x02	; 2
     4c8:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     4ca:	98 2f       	mov	r25, r24
     4cc:	9c 71       	andi	r25, 0x1C	; 28
     4ce:	93 68       	ori	r25, 0x83	; 131
     4d0:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     4d2:	88 23       	and	r24, r24
     4d4:	1c f4       	brge	.+6      	; 0x4dc <tiny_adc_ch0setup+0x18>
     4d6:	90 e1       	ldi	r25, 0x10	; 16
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <tiny_adc_ch0setup+0x1c>
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	89 2b       	or	r24, r25
     4e2:	e0 e0       	ldi	r30, 0x00	; 0
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     4e8:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     4ea:	16 a2       	std	Z+38, r1	; 0x26
     4ec:	08 95       	ret

000004ee <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
     4f0:	f2 e0       	ldi	r31, 0x02	; 2
     4f2:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     4f4:	83 68       	ori	r24, 0x83	; 131
     4f6:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     4f8:	80 e1       	ldi	r24, 0x10	; 16
     4fa:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     4fc:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     4fe:	16 aa       	std	Z+54, r1	; 0x36
     500:	08 95       	ret

00000502 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     502:	e0 e0       	ldi	r30, 0x00	; 0
     504:	f2 e0       	ldi	r31, 0x02	; 2
     506:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     508:	83 e8       	ldi	r24, 0x83	; 131
     50a:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     50c:	8f e2       	ldi	r24, 0x2F	; 47
     50e:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     510:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     512:	16 a6       	std	Z+46, r1	; 0x2e
     514:	08 95       	ret

00000516 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     516:	aa ec       	ldi	r26, 0xCA	; 202
     518:	b1 e0       	ldi	r27, 0x01	; 1
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     51e:	e8 2f       	mov	r30, r24
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     524:	1c 92       	st	X, r1

	return( result );
     526:	08 95       	ret

00000528 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     52c:	e0 e7       	ldi	r30, 0x70	; 112
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	9d 7f       	andi	r25, 0xFD	; 253
     534:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     536:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     53a:	62 30       	cpi	r22, 0x02	; 2
     53c:	31 f1       	breq	.+76     	; 0x58a <tiny_adc_setup+0x62>
     53e:	e0 e0       	ldi	r30, 0x00	; 0
     540:	f2 e0       	ldi	r31, 0x02	; 2
     542:	9c e1       	ldi	r25, 0x1C	; 28
     544:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     546:	90 e4       	ldi	r25, 0x40	; 64
     548:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     54a:	81 11       	cpse	r24, r1
     54c:	02 c0       	rjmp	.+4      	; 0x552 <tiny_adc_setup+0x2a>
     54e:	80 e4       	ldi	r24, 0x40	; 64
     550:	01 c0       	rjmp	.+2      	; 0x554 <tiny_adc_setup+0x2c>
     552:	80 ec       	ldi	r24, 0xC0	; 192
     554:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     558:	61 30       	cpi	r22, 0x01	; 1
     55a:	11 f0       	breq	.+4      	; 0x560 <tiny_adc_setup+0x38>
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	01 c0       	rjmp	.+2      	; 0x562 <tiny_adc_setup+0x3a>
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	c0 e0       	ldi	r28, 0x00	; 0
     564:	d2 e0       	ldi	r29, 0x02	; 2
     566:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     568:	80 e2       	ldi	r24, 0x20	; 32
     56a:	d5 df       	rcall	.-86     	; 0x516 <ReadCalibrationByte>
     56c:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     56e:	81 e2       	ldi	r24, 0x21	; 33
     570:	d2 df       	rcall	.-92     	; 0x516 <ReadCalibrationByte>
     572:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     574:	18 8e       	std	Y+24, r1	; 0x18
     576:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     57c:	c2 df       	rcall	.-124    	; 0x502 <tiny_adc_pid_setup>
     57e:	0e c0       	rjmp	.+28     	; 0x59c <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     580:	80 ec       	ldi	r24, 0xC0	; 192
     582:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	ec cf       	rjmp	.-40     	; 0x562 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     58a:	e0 e0       	ldi	r30, 0x00	; 0
     58c:	f2 e0       	ldi	r31, 0x02	; 2
     58e:	9e e1       	ldi	r25, 0x1E	; 30
     590:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     592:	90 e4       	ldi	r25, 0x40	; 64
     594:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     596:	81 11       	cpse	r24, r1
     598:	f3 cf       	rjmp	.-26     	; 0x580 <tiny_adc_setup+0x58>
     59a:	d9 cf       	rjmp	.-78     	; 0x54e <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     5a6:	e0 e7       	ldi	r30, 0x70	; 112
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	82 81       	ldd	r24, Z+2	; 0x02
     5ac:	8b 7f       	andi	r24, 0xFB	; 251
     5ae:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     5b0:	c0 e2       	ldi	r28, 0x20	; 32
     5b2:	d3 e0       	ldi	r29, 0x03	; 3
     5b4:	8d e0       	ldi	r24, 0x0D	; 13
     5b6:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     5b8:	80 e4       	ldi	r24, 0x40	; 64
     5ba:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     5bc:	89 e0       	ldi	r24, 0x09	; 9
     5be:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     5c0:	83 e3       	ldi	r24, 0x33	; 51
     5c2:	a9 df       	rcall	.-174    	; 0x516 <ReadCalibrationByte>
     5c4:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     5c6:	82 e3       	ldi	r24, 0x32	; 50
     5c8:	a6 df       	rcall	.-180    	; 0x516 <ReadCalibrationByte>
     5ca:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     5cc:	87 e3       	ldi	r24, 0x37	; 55
     5ce:	a3 df       	rcall	.-186    	; 0x516 <ReadCalibrationByte>
     5d0:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     5d2:	86 e3       	ldi	r24, 0x36	; 54
     5d4:	a0 df       	rcall	.-192    	; 0x516 <ReadCalibrationByte>
     5d6:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     5d8:	e0 e2       	ldi	r30, 0x20	; 32
     5da:	f6 e0       	ldi	r31, 0x06	; 6
     5dc:	80 81       	ld	r24, Z
     5de:	83 60       	ori	r24, 0x03	; 3
     5e0:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     5e2:	14 82       	std	Z+4, r1	; 0x04
	
	

     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     5ea:	e0 e7       	ldi	r30, 0x70	; 112
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8e 7f       	andi	r24, 0xFE	; 254
     5f2:	80 83       	st	Z, r24
     5f4:	83 e8       	ldi	r24, 0x83	; 131
     5f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     5fa:	08 95       	ret

000005fc <tiny_dma_flush>:
     5fc:	e0 e0       	ldi	r30, 0x00	; 0
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	10 8a       	std	Z+16, r1	; 0x10
     602:	80 e4       	ldi	r24, 0x40	; 64
     604:	80 8b       	std	Z+16, r24	; 0x10
     606:	10 a2       	std	Z+32, r1	; 0x20
     608:	80 a3       	std	Z+32, r24	; 0x20
     60a:	10 aa       	std	Z+48, r1	; 0x30
     60c:	80 ab       	std	Z+48, r24	; 0x30
     60e:	e0 e4       	ldi	r30, 0x40	; 64
     610:	f1 e0       	ldi	r31, 0x01	; 1
     612:	10 82       	st	Z, r1
     614:	80 83       	st	Z, r24
     616:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <b1_state>
     61a:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <b2_state>
     61e:	08 95       	ret

00000620 <tiny_dma_set_mode_0>:
     620:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
     624:	eb df       	rcall	.-42     	; 0x5fc <tiny_dma_flush>
     626:	e0 e0       	ldi	r30, 0x00	; 0
     628:	f1 e0       	ldi	r31, 0x01	; 1
     62a:	16 aa       	std	Z+54, r1	; 0x36
     62c:	94 e2       	ldi	r25, 0x24	; 36
     62e:	90 ab       	std	Z+48, r25	; 0x30
     630:	11 aa       	std	Z+49, r1	; 0x31
     632:	49 e5       	ldi	r20, 0x59	; 89
     634:	42 ab       	std	Z+50, r20	; 0x32
     636:	32 e0       	ldi	r19, 0x02	; 2
     638:	33 ab       	std	Z+51, r19	; 0x33
     63a:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     63e:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     642:	64 ab       	std	Z+52, r22	; 0x34
     644:	75 ab       	std	Z+53, r23	; 0x35
     646:	6e e6       	ldi	r22, 0x6E	; 110
     648:	74 e2       	ldi	r23, 0x24	; 36
     64a:	60 af       	std	Z+56, r22	; 0x38
     64c:	71 af       	std	Z+57, r23	; 0x39
     64e:	12 ae       	std	Z+58, r1	; 0x3a
     650:	8b e3       	ldi	r24, 0x3B	; 59
     652:	84 af       	std	Z+60, r24	; 0x3c
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     65a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     65e:	20 a9       	ldd	r18, Z+48	; 0x30
     660:	20 68       	ori	r18, 0x80	; 128
     662:	20 ab       	std	Z+48, r18	; 0x30
     664:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     668:	a0 e4       	ldi	r26, 0x40	; 64
     66a:	b1 e0       	ldi	r27, 0x01	; 1
     66c:	9c 93       	st	X, r25
     66e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     672:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     676:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     67a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     67e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     682:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     686:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     68a:	4e e5       	ldi	r20, 0x5E	; 94
     68c:	52 e2       	ldi	r21, 0x22	; 34
     68e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     692:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     696:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     69a:	29 e3       	ldi	r18, 0x39	; 57
     69c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     6a0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     6a4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     6a8:	2c 91       	ld	r18, X
     6aa:	20 68       	ori	r18, 0x80	; 128
     6ac:	2c 93       	st	X, r18
     6ae:	10 8a       	std	Z+16, r1	; 0x10
     6b0:	20 e4       	ldi	r18, 0x40	; 64
     6b2:	20 8b       	std	Z+16, r18	; 0x10
     6b4:	24 e0       	ldi	r18, 0x04	; 4
     6b6:	20 8b       	std	Z+16, r18	; 0x10
     6b8:	81 8b       	std	Z+17, r24	; 0x11
     6ba:	81 e9       	ldi	r24, 0x91	; 145
     6bc:	82 8b       	std	Z+18, r24	; 0x12
     6be:	80 e1       	ldi	r24, 0x10	; 16
     6c0:	83 8b       	std	Z+19, r24	; 0x13
     6c2:	47 e7       	ldi	r20, 0x77	; 119
     6c4:	51 e0       	ldi	r21, 0x01	; 1
     6c6:	44 8b       	std	Z+20, r20	; 0x14
     6c8:	55 8b       	std	Z+21, r21	; 0x15
     6ca:	90 8f       	std	Z+24, r25	; 0x18
     6cc:	31 8f       	std	Z+25, r19	; 0x19
     6ce:	12 8e       	std	Z+26, r1	; 0x1a
     6d0:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     6d4:	2e ee       	ldi	r18, 0xEE	; 238
     6d6:	32 e0       	ldi	r19, 0x02	; 2
     6d8:	42 9f       	mul	r20, r18
     6da:	c0 01       	movw	r24, r0
     6dc:	43 9f       	mul	r20, r19
     6de:	90 0d       	add	r25, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	82 59       	subi	r24, 0x92	; 146
     6e4:	99 4d       	sbci	r25, 0xD9	; 217
     6e6:	84 8f       	std	Z+28, r24	; 0x1c
     6e8:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     6ec:	42 9f       	mul	r20, r18
     6ee:	c0 01       	movw	r24, r0
     6f0:	43 9f       	mul	r20, r19
     6f2:	90 0d       	add	r25, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	82 59       	subi	r24, 0x92	; 146
     6f8:	99 4d       	sbci	r25, 0xD9	; 217
     6fa:	95 8f       	std	Z+29, r25	; 0x1d
     6fc:	16 8e       	std	Z+30, r1	; 0x1e
     6fe:	80 89       	ldd	r24, Z+16	; 0x10
     700:	80 68       	ori	r24, 0x80	; 128
     702:	80 8b       	std	Z+16, r24	; 0x10
     704:	08 95       	ret

00000706 <tiny_dma_set_mode_1>:
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     710:	75 df       	rcall	.-278    	; 0x5fc <tiny_dma_flush>
     712:	e0 e0       	ldi	r30, 0x00	; 0
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	10 aa       	std	Z+48, r1	; 0x30
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	80 ab       	std	Z+48, r24	; 0x30
     71c:	94 e0       	ldi	r25, 0x04	; 4
     71e:	90 ab       	std	Z+48, r25	; 0x30
     720:	11 aa       	std	Z+49, r1	; 0x31
     722:	12 aa       	std	Z+50, r1	; 0x32
     724:	5b e4       	ldi	r21, 0x4B	; 75
     726:	53 ab       	std	Z+51, r21	; 0x33
     728:	14 aa       	std	Z+52, r1	; 0x34
     72a:	15 aa       	std	Z+53, r1	; 0x35
     72c:	16 aa       	std	Z+54, r1	; 0x36
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	30 e2       	ldi	r19, 0x20	; 32
     732:	20 af       	std	Z+56, r18	; 0x38
     734:	31 af       	std	Z+57, r19	; 0x39
     736:	12 ae       	std	Z+58, r1	; 0x3a
     738:	40 ea       	ldi	r20, 0xA0	; 160
     73a:	44 af       	std	Z+60, r20	; 0x3c
     73c:	38 e0       	ldi	r19, 0x08	; 8
     73e:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     742:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     746:	80 a9       	ldd	r24, Z+48	; 0x30
     748:	80 6a       	ori	r24, 0xA0	; 160
     74a:	80 ab       	std	Z+48, r24	; 0x30
     74c:	85 e5       	ldi	r24, 0x55	; 85
     74e:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     752:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     756:	a0 e4       	ldi	r26, 0x40	; 64
     758:	b1 e0       	ldi	r27, 0x01	; 1
     75a:	d4 e2       	ldi	r29, 0x24	; 36
     75c:	dc 93       	st	X, r29
     75e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     762:	89 e5       	ldi	r24, 0x59	; 89
     764:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     768:	c2 e0       	ldi	r28, 0x02	; 2
     76a:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     76e:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     772:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     776:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     77a:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     77e:	6e e6       	ldi	r22, 0x6E	; 110
     780:	74 e2       	ldi	r23, 0x24	; 36
     782:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     786:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     78a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     78e:	8b e3       	ldi	r24, 0x3B	; 59
     790:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     79a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     79e:	2c 91       	ld	r18, X
     7a0:	20 68       	ori	r18, 0x80	; 128
     7a2:	2c 93       	st	X, r18
     7a4:	90 8b       	std	Z+16, r25	; 0x10
     7a6:	81 8b       	std	Z+17, r24	; 0x11
     7a8:	a1 e9       	ldi	r26, 0x91	; 145
     7aa:	a2 8b       	std	Z+18, r26	; 0x12
     7ac:	20 e1       	ldi	r18, 0x10	; 16
     7ae:	23 8b       	std	Z+19, r18	; 0x13
     7b0:	67 e7       	ldi	r22, 0x77	; 119
     7b2:	71 e0       	ldi	r23, 0x01	; 1
     7b4:	64 8b       	std	Z+20, r22	; 0x14
     7b6:	75 8b       	std	Z+21, r23	; 0x15
     7b8:	d0 8f       	std	Z+24, r29	; 0x18
     7ba:	c1 8f       	std	Z+25, r28	; 0x19
     7bc:	12 8e       	std	Z+26, r1	; 0x1a
     7be:	ce e6       	ldi	r28, 0x6E	; 110
     7c0:	d6 e2       	ldi	r29, 0x26	; 38
     7c2:	c4 8f       	std	Z+28, r28	; 0x1c
     7c4:	d5 8f       	std	Z+29, r29	; 0x1d
     7c6:	16 8e       	std	Z+30, r1	; 0x1e
     7c8:	20 89       	ldd	r18, Z+16	; 0x10
     7ca:	20 68       	ori	r18, 0x80	; 128
     7cc:	20 8b       	std	Z+16, r18	; 0x10
     7ce:	90 a3       	std	Z+32, r25	; 0x20
     7d0:	81 a3       	std	Z+33, r24	; 0x21
     7d2:	a2 a3       	std	Z+34, r26	; 0x22
     7d4:	53 a3       	std	Z+35, r21	; 0x23
     7d6:	64 a3       	std	Z+36, r22	; 0x24
     7d8:	75 a3       	std	Z+37, r23	; 0x25
     7da:	40 a7       	std	Z+40, r20	; 0x28
     7dc:	31 a7       	std	Z+41, r19	; 0x29
     7de:	12 a6       	std	Z+42, r1	; 0x2a
     7e0:	85 ee       	ldi	r24, 0xE5	; 229
     7e2:	97 e2       	ldi	r25, 0x27	; 39
     7e4:	84 a7       	std	Z+44, r24	; 0x2c
     7e6:	95 a7       	std	Z+45, r25	; 0x2d
     7e8:	16 a6       	std	Z+46, r1	; 0x2e
     7ea:	80 a1       	ldd	r24, Z+32	; 0x20
     7ec:	80 68       	ori	r24, 0x80	; 128
     7ee:	80 a3       	std	Z+32, r24	; 0x20
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <tiny_dma_set_mode_2>:
     7f6:	cf 93       	push	r28
     7f8:	f8 94       	cli
     7fa:	c2 e0       	ldi	r28, 0x02	; 2
     7fc:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     800:	fd de       	rcall	.-518    	; 0x5fc <tiny_dma_flush>
     802:	e0 e0       	ldi	r30, 0x00	; 0
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	16 aa       	std	Z+54, r1	; 0x36
     808:	94 e2       	ldi	r25, 0x24	; 36
     80a:	90 ab       	std	Z+48, r25	; 0x30
     80c:	11 aa       	std	Z+49, r1	; 0x31
     80e:	39 e5       	ldi	r19, 0x59	; 89
     810:	32 ab       	std	Z+50, r19	; 0x32
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	83 ab       	std	Z+51, r24	; 0x33
     816:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     81a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     81e:	44 ab       	std	Z+52, r20	; 0x34
     820:	55 ab       	std	Z+53, r21	; 0x35
     822:	4e e5       	ldi	r20, 0x5E	; 94
     824:	52 e2       	ldi	r21, 0x22	; 34
     826:	40 af       	std	Z+56, r20	; 0x38
     828:	51 af       	std	Z+57, r21	; 0x39
     82a:	12 ae       	std	Z+58, r1	; 0x3a
     82c:	29 e3       	ldi	r18, 0x39	; 57
     82e:	24 af       	std	Z+60, r18	; 0x3c
     830:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     834:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     838:	20 a9       	ldd	r18, Z+48	; 0x30
     83a:	20 68       	ori	r18, 0x80	; 128
     83c:	20 ab       	std	Z+48, r18	; 0x30
     83e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     842:	a0 e4       	ldi	r26, 0x40	; 64
     844:	b1 e0       	ldi	r27, 0x01	; 1
     846:	9c 93       	st	X, r25
     848:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     84c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     850:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     854:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     858:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     85c:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     860:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     864:	2e e6       	ldi	r18, 0x6E	; 110
     866:	34 e2       	ldi	r19, 0x24	; 36
     868:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     86c:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     870:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     874:	2b e3       	ldi	r18, 0x3B	; 59
     876:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     87a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     87e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     882:	2c 91       	ld	r18, X
     884:	20 68       	ori	r18, 0x80	; 128
     886:	2c 93       	st	X, r18
     888:	54 e0       	ldi	r21, 0x04	; 4
     88a:	50 8b       	std	Z+16, r21	; 0x10
     88c:	81 8b       	std	Z+17, r24	; 0x11
     88e:	41 e9       	ldi	r20, 0x91	; 145
     890:	42 8b       	std	Z+18, r20	; 0x12
     892:	20 e1       	ldi	r18, 0x10	; 16
     894:	23 8b       	std	Z+19, r18	; 0x13
     896:	27 e7       	ldi	r18, 0x77	; 119
     898:	31 e0       	ldi	r19, 0x01	; 1
     89a:	24 8b       	std	Z+20, r18	; 0x14
     89c:	35 8b       	std	Z+21, r19	; 0x15
     89e:	90 8f       	std	Z+24, r25	; 0x18
     8a0:	c1 8f       	std	Z+25, r28	; 0x19
     8a2:	12 8e       	std	Z+26, r1	; 0x1a
     8a4:	6e e6       	ldi	r22, 0x6E	; 110
     8a6:	76 e2       	ldi	r23, 0x26	; 38
     8a8:	64 8f       	std	Z+28, r22	; 0x1c
     8aa:	75 8f       	std	Z+29, r23	; 0x1d
     8ac:	16 8e       	std	Z+30, r1	; 0x1e
     8ae:	90 89       	ldd	r25, Z+16	; 0x10
     8b0:	90 68       	ori	r25, 0x80	; 128
     8b2:	90 8b       	std	Z+16, r25	; 0x10
     8b4:	50 a3       	std	Z+32, r21	; 0x20
     8b6:	81 a3       	std	Z+33, r24	; 0x21
     8b8:	42 a3       	std	Z+34, r20	; 0x22
     8ba:	82 e1       	ldi	r24, 0x12	; 18
     8bc:	83 a3       	std	Z+35, r24	; 0x23
     8be:	24 a3       	std	Z+36, r18	; 0x24
     8c0:	35 a3       	std	Z+37, r19	; 0x25
     8c2:	84 e3       	ldi	r24, 0x34	; 52
     8c4:	80 a7       	std	Z+40, r24	; 0x28
     8c6:	c1 a7       	std	Z+41, r28	; 0x29
     8c8:	12 a6       	std	Z+42, r1	; 0x2a
     8ca:	85 ee       	ldi	r24, 0xE5	; 229
     8cc:	97 e2       	ldi	r25, 0x27	; 39
     8ce:	84 a7       	std	Z+44, r24	; 0x2c
     8d0:	95 a7       	std	Z+45, r25	; 0x2d
     8d2:	16 a6       	std	Z+46, r1	; 0x2e
     8d4:	80 a1       	ldd	r24, Z+32	; 0x20
     8d6:	80 68       	ori	r24, 0x80	; 128
     8d8:	80 a3       	std	Z+32, r24	; 0x20
     8da:	78 94       	sei
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <tiny_dma_set_mode_3>:
     8e0:	cf 93       	push	r28
     8e2:	c3 e0       	ldi	r28, 0x03	; 3
     8e4:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     8e8:	89 de       	rcall	.-750    	; 0x5fc <tiny_dma_flush>
     8ea:	e0 e0       	ldi	r30, 0x00	; 0
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	10 a2       	std	Z+32, r1	; 0x20
     8f0:	50 e4       	ldi	r21, 0x40	; 64
     8f2:	50 a3       	std	Z+32, r21	; 0x20
     8f4:	44 e0       	ldi	r20, 0x04	; 4
     8f6:	40 a3       	std	Z+32, r20	; 0x20
     8f8:	11 a2       	std	Z+33, r1	; 0x21
     8fa:	12 a2       	std	Z+34, r1	; 0x22
     8fc:	3b e4       	ldi	r19, 0x4B	; 75
     8fe:	33 a3       	std	Z+35, r19	; 0x23
     900:	14 a2       	std	Z+36, r1	; 0x24
     902:	15 a2       	std	Z+37, r1	; 0x25
     904:	16 a2       	std	Z+38, r1	; 0x26
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e2       	ldi	r25, 0x20	; 32
     90a:	80 a7       	std	Z+40, r24	; 0x28
     90c:	91 a7       	std	Z+41, r25	; 0x29
     90e:	12 a6       	std	Z+42, r1	; 0x2a
     910:	20 ea       	ldi	r18, 0xA0	; 160
     912:	24 a7       	std	Z+44, r18	; 0x2c
     914:	98 e0       	ldi	r25, 0x08	; 8
     916:	95 a7       	std	Z+45, r25	; 0x2d
     918:	16 a6       	std	Z+46, r1	; 0x2e
     91a:	80 a1       	ldd	r24, Z+32	; 0x20
     91c:	80 6a       	ori	r24, 0xA0	; 160
     91e:	80 a3       	std	Z+32, r24	; 0x20
     920:	85 e5       	ldi	r24, 0x55	; 85
     922:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     926:	16 aa       	std	Z+54, r1	; 0x36
     928:	74 e2       	ldi	r23, 0x24	; 36
     92a:	70 ab       	std	Z+48, r23	; 0x30
     92c:	11 aa       	std	Z+49, r1	; 0x31
     92e:	69 e5       	ldi	r22, 0x59	; 89
     930:	62 ab       	std	Z+50, r22	; 0x32
     932:	c3 ab       	std	Z+51, r28	; 0x33
     934:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <dacBuf_len>
     938:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <dacBuf_len+0x1>
     93c:	a4 ab       	std	Z+52, r26	; 0x34
     93e:	b5 ab       	std	Z+53, r27	; 0x35
     940:	ae e5       	ldi	r26, 0x5E	; 94
     942:	b2 e2       	ldi	r27, 0x22	; 34
     944:	a0 af       	std	Z+56, r26	; 0x38
     946:	b1 af       	std	Z+57, r27	; 0x39
     948:	12 ae       	std	Z+58, r1	; 0x3a
     94a:	89 e3       	ldi	r24, 0x39	; 57
     94c:	84 af       	std	Z+60, r24	; 0x3c
     94e:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     952:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     956:	80 a9       	ldd	r24, Z+48	; 0x30
     958:	80 68       	ori	r24, 0x80	; 128
     95a:	80 ab       	std	Z+48, r24	; 0x30
     95c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     960:	a0 e4       	ldi	r26, 0x40	; 64
     962:	b1 e0       	ldi	r27, 0x01	; 1
     964:	7c 93       	st	X, r23
     966:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     96a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     974:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     978:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     97c:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     980:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     984:	6e e6       	ldi	r22, 0x6E	; 110
     986:	74 e2       	ldi	r23, 0x24	; 36
     988:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     98c:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     990:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     994:	8b e3       	ldi	r24, 0x3B	; 59
     996:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     99a:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     99e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     9a2:	8c 91       	ld	r24, X
     9a4:	80 68       	ori	r24, 0x80	; 128
     9a6:	8c 93       	st	X, r24
     9a8:	10 8a       	std	Z+16, r1	; 0x10
     9aa:	50 8b       	std	Z+16, r21	; 0x10
     9ac:	40 8b       	std	Z+16, r20	; 0x10
     9ae:	c1 8b       	std	Z+17, r28	; 0x11
     9b0:	81 e9       	ldi	r24, 0x91	; 145
     9b2:	82 8b       	std	Z+18, r24	; 0x12
     9b4:	33 8b       	std	Z+19, r19	; 0x13
     9b6:	47 e7       	ldi	r20, 0x77	; 119
     9b8:	51 e0       	ldi	r21, 0x01	; 1
     9ba:	44 8b       	std	Z+20, r20	; 0x14
     9bc:	55 8b       	std	Z+21, r21	; 0x15
     9be:	20 8f       	std	Z+24, r18	; 0x18
     9c0:	91 8f       	std	Z+25, r25	; 0x19
     9c2:	12 8e       	std	Z+26, r1	; 0x1a
     9c4:	8e e6       	ldi	r24, 0x6E	; 110
     9c6:	96 e2       	ldi	r25, 0x26	; 38
     9c8:	84 8f       	std	Z+28, r24	; 0x1c
     9ca:	95 8f       	std	Z+29, r25	; 0x1d
     9cc:	16 8e       	std	Z+30, r1	; 0x1e
     9ce:	80 89       	ldd	r24, Z+16	; 0x10
     9d0:	80 68       	ori	r24, 0x80	; 128
     9d2:	80 8b       	std	Z+16, r24	; 0x10
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <tiny_dma_set_mode_4>:
     9d8:	cf 93       	push	r28
     9da:	c4 e0       	ldi	r28, 0x04	; 4
     9dc:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     9e0:	0d de       	rcall	.-998    	; 0x5fc <tiny_dma_flush>
     9e2:	e0 e0       	ldi	r30, 0x00	; 0
     9e4:	f1 e0       	ldi	r31, 0x01	; 1
     9e6:	10 a2       	std	Z+32, r1	; 0x20
     9e8:	80 e4       	ldi	r24, 0x40	; 64
     9ea:	80 a3       	std	Z+32, r24	; 0x20
     9ec:	c0 a3       	std	Z+32, r28	; 0x20
     9ee:	11 a2       	std	Z+33, r1	; 0x21
     9f0:	12 a2       	std	Z+34, r1	; 0x22
     9f2:	4b e4       	ldi	r20, 0x4B	; 75
     9f4:	43 a3       	std	Z+35, r20	; 0x23
     9f6:	14 a2       	std	Z+36, r1	; 0x24
     9f8:	15 a2       	std	Z+37, r1	; 0x25
     9fa:	16 a2       	std	Z+38, r1	; 0x26
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e2       	ldi	r25, 0x20	; 32
     a00:	80 a7       	std	Z+40, r24	; 0x28
     a02:	91 a7       	std	Z+41, r25	; 0x29
     a04:	12 a6       	std	Z+42, r1	; 0x2a
     a06:	60 ea       	ldi	r22, 0xA0	; 160
     a08:	64 a7       	std	Z+44, r22	; 0x2c
     a0a:	88 e0       	ldi	r24, 0x08	; 8
     a0c:	85 a7       	std	Z+45, r24	; 0x2d
     a0e:	16 a6       	std	Z+46, r1	; 0x2e
     a10:	90 a1       	ldd	r25, Z+32	; 0x20
     a12:	90 6a       	ori	r25, 0xA0	; 160
     a14:	90 a3       	std	Z+32, r25	; 0x20
     a16:	95 e5       	ldi	r25, 0x55	; 85
     a18:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     a1c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     a20:	a0 e4       	ldi	r26, 0x40	; 64
     a22:	b1 e0       	ldi	r27, 0x01	; 1
     a24:	94 e2       	ldi	r25, 0x24	; 36
     a26:	9c 93       	st	X, r25
     a28:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     a2c:	99 e5       	ldi	r25, 0x59	; 89
     a2e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     a38:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     a3c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     a40:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a44:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     a48:	2e e6       	ldi	r18, 0x6E	; 110
     a4a:	34 e2       	ldi	r19, 0x24	; 36
     a4c:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a50:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a54:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     a58:	9b e3       	ldi	r25, 0x3B	; 59
     a5a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a5e:	93 e0       	ldi	r25, 0x03	; 3
     a60:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a64:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     a68:	2c 91       	ld	r18, X
     a6a:	20 68       	ori	r18, 0x80	; 128
     a6c:	2c 93       	st	X, r18
     a6e:	c0 8b       	std	Z+16, r28	; 0x10
     a70:	91 8b       	std	Z+17, r25	; 0x11
     a72:	31 e9       	ldi	r19, 0x91	; 145
     a74:	32 8b       	std	Z+18, r19	; 0x12
     a76:	43 8b       	std	Z+19, r20	; 0x13
     a78:	47 e7       	ldi	r20, 0x77	; 119
     a7a:	51 e0       	ldi	r21, 0x01	; 1
     a7c:	44 8b       	std	Z+20, r20	; 0x14
     a7e:	55 8b       	std	Z+21, r21	; 0x15
     a80:	60 8f       	std	Z+24, r22	; 0x18
     a82:	81 8f       	std	Z+25, r24	; 0x19
     a84:	12 8e       	std	Z+26, r1	; 0x1a
     a86:	6e e6       	ldi	r22, 0x6E	; 110
     a88:	76 e2       	ldi	r23, 0x26	; 38
     a8a:	64 8f       	std	Z+28, r22	; 0x1c
     a8c:	75 8f       	std	Z+29, r23	; 0x1d
     a8e:	16 8e       	std	Z+30, r1	; 0x1e
     a90:	20 89       	ldd	r18, Z+16	; 0x10
     a92:	20 68       	ori	r18, 0x80	; 128
     a94:	20 8b       	std	Z+16, r18	; 0x10
     a96:	c0 ab       	std	Z+48, r28	; 0x30
     a98:	91 ab       	std	Z+49, r25	; 0x31
     a9a:	32 ab       	std	Z+50, r19	; 0x32
     a9c:	9a e4       	ldi	r25, 0x4A	; 74
     a9e:	93 ab       	std	Z+51, r25	; 0x33
     aa0:	44 ab       	std	Z+52, r20	; 0x34
     aa2:	55 ab       	std	Z+53, r21	; 0x35
     aa4:	93 ec       	ldi	r25, 0xC3	; 195
     aa6:	90 af       	std	Z+56, r25	; 0x38
     aa8:	81 af       	std	Z+57, r24	; 0x39
     aaa:	12 ae       	std	Z+58, r1	; 0x3a
     aac:	85 ee       	ldi	r24, 0xE5	; 229
     aae:	97 e2       	ldi	r25, 0x27	; 39
     ab0:	84 af       	std	Z+60, r24	; 0x3c
     ab2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     ab6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     aba:	80 a9       	ldd	r24, Z+48	; 0x30
     abc:	80 68       	ori	r24, 0x80	; 128
     abe:	80 ab       	std	Z+48, r24	; 0x30
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <tiny_dma_set_mode_5>:
     ac4:	85 e0       	ldi	r24, 0x05	; 5
     ac6:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     aca:	98 dd       	rcall	.-1232   	; 0x5fc <tiny_dma_flush>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f1 e0       	ldi	r31, 0x01	; 1
     ad0:	16 aa       	std	Z+54, r1	; 0x36
     ad2:	34 e2       	ldi	r19, 0x24	; 36
     ad4:	30 ab       	std	Z+48, r19	; 0x30
     ad6:	11 aa       	std	Z+49, r1	; 0x31
     ad8:	29 e5       	ldi	r18, 0x59	; 89
     ada:	22 ab       	std	Z+50, r18	; 0x32
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	83 ab       	std	Z+51, r24	; 0x33
     ae0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     ae4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     ae8:	44 ab       	std	Z+52, r20	; 0x34
     aea:	55 ab       	std	Z+53, r21	; 0x35
     aec:	4e e5       	ldi	r20, 0x5E	; 94
     aee:	52 e2       	ldi	r21, 0x22	; 34
     af0:	40 af       	std	Z+56, r20	; 0x38
     af2:	51 af       	std	Z+57, r21	; 0x39
     af4:	12 ae       	std	Z+58, r1	; 0x3a
     af6:	99 e3       	ldi	r25, 0x39	; 57
     af8:	94 af       	std	Z+60, r25	; 0x3c
     afa:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     afe:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b02:	90 a9       	ldd	r25, Z+48	; 0x30
     b04:	90 68       	ori	r25, 0x80	; 128
     b06:	90 ab       	std	Z+48, r25	; 0x30
     b08:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b0c:	e0 e4       	ldi	r30, 0x40	; 64
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	30 83       	st	Z, r19
     b12:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b16:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b1a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b1e:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
     b22:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b26:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b2a:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     b2e:	2e e6       	ldi	r18, 0x6E	; 110
     b30:	34 e2       	ldi	r19, 0x24	; 36
     b32:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b36:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b3a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b3e:	9b e3       	ldi	r25, 0x3B	; 59
     b40:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b44:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b48:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b4c:	80 81       	ld	r24, Z
     b4e:	80 68       	ori	r24, 0x80	; 128
     b50:	80 83       	st	Z, r24
     b52:	08 95       	ret

00000b54 <tiny_dma_set_mode_6>:
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     b5a:	50 dd       	rcall	.-1376   	; 0x5fc <tiny_dma_flush>
     b5c:	e0 e0       	ldi	r30, 0x00	; 0
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	16 aa       	std	Z+54, r1	; 0x36
     b62:	94 e2       	ldi	r25, 0x24	; 36
     b64:	90 ab       	std	Z+48, r25	; 0x30
     b66:	11 aa       	std	Z+49, r1	; 0x31
     b68:	39 e5       	ldi	r19, 0x59	; 89
     b6a:	32 ab       	std	Z+50, r19	; 0x32
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	83 ab       	std	Z+51, r24	; 0x33
     b70:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     b74:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b78:	44 ab       	std	Z+52, r20	; 0x34
     b7a:	55 ab       	std	Z+53, r21	; 0x35
     b7c:	4e e5       	ldi	r20, 0x5E	; 94
     b7e:	52 e2       	ldi	r21, 0x22	; 34
     b80:	40 af       	std	Z+56, r20	; 0x38
     b82:	51 af       	std	Z+57, r21	; 0x39
     b84:	12 ae       	std	Z+58, r1	; 0x3a
     b86:	29 e3       	ldi	r18, 0x39	; 57
     b88:	24 af       	std	Z+60, r18	; 0x3c
     b8a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b8e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b92:	20 a9       	ldd	r18, Z+48	; 0x30
     b94:	20 68       	ori	r18, 0x80	; 128
     b96:	20 ab       	std	Z+48, r18	; 0x30
     b98:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b9c:	a0 e4       	ldi	r26, 0x40	; 64
     b9e:	b1 e0       	ldi	r27, 0x01	; 1
     ba0:	9c 93       	st	X, r25
     ba2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ba6:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     baa:	32 e0       	ldi	r19, 0x02	; 2
     bac:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bb0:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     bb4:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     bb8:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bbc:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     bc0:	4e e6       	ldi	r20, 0x6E	; 110
     bc2:	54 e2       	ldi	r21, 0x24	; 36
     bc4:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     bc8:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     bcc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     bd0:	2b e3       	ldi	r18, 0x3B	; 59
     bd2:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     bd6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     bda:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     bde:	2c 91       	ld	r18, X
     be0:	20 68       	ori	r18, 0x80	; 128
     be2:	2c 93       	st	X, r18
     be4:	10 8a       	std	Z+16, r1	; 0x10
     be6:	20 e4       	ldi	r18, 0x40	; 64
     be8:	20 8b       	std	Z+16, r18	; 0x10
     bea:	24 e0       	ldi	r18, 0x04	; 4
     bec:	20 8b       	std	Z+16, r18	; 0x10
     bee:	81 8b       	std	Z+17, r24	; 0x11
     bf0:	81 e9       	ldi	r24, 0x91	; 145
     bf2:	82 8b       	std	Z+18, r24	; 0x12
     bf4:	80 e1       	ldi	r24, 0x10	; 16
     bf6:	83 8b       	std	Z+19, r24	; 0x13
     bf8:	4e ee       	ldi	r20, 0xEE	; 238
     bfa:	52 e0       	ldi	r21, 0x02	; 2
     bfc:	44 8b       	std	Z+20, r20	; 0x14
     bfe:	55 8b       	std	Z+21, r21	; 0x15
     c00:	90 8f       	std	Z+24, r25	; 0x18
     c02:	31 8f       	std	Z+25, r19	; 0x19
     c04:	12 8e       	std	Z+26, r1	; 0x1a
     c06:	8e e6       	ldi	r24, 0x6E	; 110
     c08:	96 e2       	ldi	r25, 0x26	; 38
     c0a:	84 8f       	std	Z+28, r24	; 0x1c
     c0c:	95 8f       	std	Z+29, r25	; 0x1d
     c0e:	16 8e       	std	Z+30, r1	; 0x1e
     c10:	80 89       	ldd	r24, Z+16	; 0x10
     c12:	80 68       	ori	r24, 0x80	; 128
     c14:	80 8b       	std	Z+16, r24	; 0x10
     c16:	08 95       	ret

00000c18 <tiny_dma_set_mode_7>:
     c18:	87 e0       	ldi	r24, 0x07	; 7
     c1a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     c1e:	ee dc       	rcall	.-1572   	; 0x5fc <tiny_dma_flush>
     c20:	e0 e0       	ldi	r30, 0x00	; 0
     c22:	f1 e0       	ldi	r31, 0x01	; 1
     c24:	16 aa       	std	Z+54, r1	; 0x36
     c26:	94 e2       	ldi	r25, 0x24	; 36
     c28:	90 ab       	std	Z+48, r25	; 0x30
     c2a:	11 aa       	std	Z+49, r1	; 0x31
     c2c:	39 e5       	ldi	r19, 0x59	; 89
     c2e:	32 ab       	std	Z+50, r19	; 0x32
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	83 ab       	std	Z+51, r24	; 0x33
     c34:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     c38:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     c3c:	44 ab       	std	Z+52, r20	; 0x34
     c3e:	55 ab       	std	Z+53, r21	; 0x35
     c40:	4e e5       	ldi	r20, 0x5E	; 94
     c42:	52 e2       	ldi	r21, 0x22	; 34
     c44:	40 af       	std	Z+56, r20	; 0x38
     c46:	51 af       	std	Z+57, r21	; 0x39
     c48:	12 ae       	std	Z+58, r1	; 0x3a
     c4a:	29 e3       	ldi	r18, 0x39	; 57
     c4c:	24 af       	std	Z+60, r18	; 0x3c
     c4e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c52:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c56:	20 a9       	ldd	r18, Z+48	; 0x30
     c58:	20 68       	ori	r18, 0x80	; 128
     c5a:	20 ab       	std	Z+48, r18	; 0x30
     c5c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c60:	a0 e4       	ldi	r26, 0x40	; 64
     c62:	b1 e0       	ldi	r27, 0x01	; 1
     c64:	9c 93       	st	X, r25
     c66:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c6a:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c6e:	32 e0       	ldi	r19, 0x02	; 2
     c70:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c74:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     c78:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     c7c:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c80:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c84:	4e e6       	ldi	r20, 0x6E	; 110
     c86:	54 e2       	ldi	r21, 0x24	; 36
     c88:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c8c:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c90:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c94:	2b e3       	ldi	r18, 0x3B	; 59
     c96:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c9a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c9e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     ca2:	2c 91       	ld	r18, X
     ca4:	20 68       	ori	r18, 0x80	; 128
     ca6:	2c 93       	st	X, r18
     ca8:	10 8a       	std	Z+16, r1	; 0x10
     caa:	20 e4       	ldi	r18, 0x40	; 64
     cac:	20 8b       	std	Z+16, r18	; 0x10
     cae:	25 e0       	ldi	r18, 0x05	; 5
     cb0:	20 8b       	std	Z+16, r18	; 0x10
     cb2:	81 8b       	std	Z+17, r24	; 0x11
     cb4:	81 e9       	ldi	r24, 0x91	; 145
     cb6:	82 8b       	std	Z+18, r24	; 0x12
     cb8:	80 e1       	ldi	r24, 0x10	; 16
     cba:	83 8b       	std	Z+19, r24	; 0x13
     cbc:	4e ee       	ldi	r20, 0xEE	; 238
     cbe:	52 e0       	ldi	r21, 0x02	; 2
     cc0:	44 8b       	std	Z+20, r20	; 0x14
     cc2:	55 8b       	std	Z+21, r21	; 0x15
     cc4:	90 8f       	std	Z+24, r25	; 0x18
     cc6:	31 8f       	std	Z+25, r19	; 0x19
     cc8:	12 8e       	std	Z+26, r1	; 0x1a
     cca:	8e e6       	ldi	r24, 0x6E	; 110
     ccc:	96 e2       	ldi	r25, 0x26	; 38
     cce:	84 8f       	std	Z+28, r24	; 0x1c
     cd0:	95 8f       	std	Z+29, r25	; 0x1d
     cd2:	16 8e       	std	Z+30, r1	; 0x1e
     cd4:	80 89       	ldd	r24, Z+16	; 0x10
     cd6:	80 68       	ori	r24, 0x80	; 128
     cd8:	80 8b       	std	Z+16, r24	; 0x10
     cda:	08 95       	ret

00000cdc <__vector_6>:
}

ISR(DMA_CH0_vect){
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	2f 93       	push	r18
     ce8:	3f 93       	push	r19
     cea:	4f 93       	push	r20
     cec:	8f 93       	push	r24
     cee:	9f 93       	push	r25
     cf0:	af 93       	push	r26
     cf2:	bf 93       	push	r27
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
		DMA.INTFLAGS = 0x01;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     cfe:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
     d02:	8e 2f       	mov	r24, r30
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	88 30       	cpi	r24, 0x08	; 8
     d08:	91 05       	cpc	r25, r1
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <__vector_6+0x32>
     d0c:	11 c1       	rjmp	.+546    	; 0xf30 <__vector_6+0x254>
     d0e:	fc 01       	movw	r30, r24
     d10:	e2 50       	subi	r30, 0x02	; 2
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__tablejump2__>
			case 0:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     d18:	e0 e0       	ldi	r30, 0x00	; 0
     d1a:	f1 e0       	ldi	r31, 0x01	; 1
     d1c:	87 e7       	ldi	r24, 0x77	; 119
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	84 8b       	std	Z+20, r24	; 0x14
     d22:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d24:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     d28:	2e ee       	ldi	r18, 0xEE	; 238
     d2a:	32 e0       	ldi	r19, 0x02	; 2
     d2c:	42 9f       	mul	r20, r18
     d2e:	c0 01       	movw	r24, r0
     d30:	43 9f       	mul	r20, r19
     d32:	90 0d       	add	r25, r0
     d34:	11 24       	eor	r1, r1
     d36:	82 59       	subi	r24, 0x92	; 146
     d38:	99 4d       	sbci	r25, 0xD9	; 217
     d3a:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d3c:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     d40:	42 9f       	mul	r20, r18
     d42:	c0 01       	movw	r24, r0
     d44:	43 9f       	mul	r20, r19
     d46:	90 0d       	add	r25, r0
     d48:	11 24       	eor	r1, r1
     d4a:	82 59       	subi	r24, 0x92	; 146
     d4c:	99 4d       	sbci	r25, 0xD9	; 217
     d4e:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d50:	80 89       	ldd	r24, Z+16	; 0x10
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     d56:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	91 11       	cpse	r25, r1
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     d64:	e5 c0       	rjmp	.+458    	; 0xf30 <__vector_6+0x254>
			case 1:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     d66:	e0 e0       	ldi	r30, 0x00	; 0
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	87 e7       	ldi	r24, 0x77	; 119
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	84 8b       	std	Z+20, r24	; 0x14
     d70:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d72:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     d76:	2e ee       	ldi	r18, 0xEE	; 238
     d78:	32 e0       	ldi	r19, 0x02	; 2
     d7a:	42 9f       	mul	r20, r18
     d7c:	c0 01       	movw	r24, r0
     d7e:	43 9f       	mul	r20, r19
     d80:	90 0d       	add	r25, r0
     d82:	11 24       	eor	r1, r1
     d84:	82 59       	subi	r24, 0x92	; 146
     d86:	99 4d       	sbci	r25, 0xD9	; 217
     d88:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d8a:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     d8e:	42 9f       	mul	r20, r18
     d90:	c0 01       	movw	r24, r0
     d92:	43 9f       	mul	r20, r19
     d94:	90 0d       	add	r25, r0
     d96:	11 24       	eor	r1, r1
     d98:	82 59       	subi	r24, 0x92	; 146
     d9a:	99 4d       	sbci	r25, 0xD9	; 217
     d9c:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d9e:	80 89       	ldd	r24, Z+16	; 0x10
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     da4:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	91 11       	cpse	r25, r1
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     db2:	be c0       	rjmp	.+380    	; 0xf30 <__vector_6+0x254>
			case 2:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     db4:	e0 e0       	ldi	r30, 0x00	; 0
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	87 e7       	ldi	r24, 0x77	; 119
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	84 8b       	std	Z+20, r24	; 0x14
     dbe:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     dc0:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     dc4:	2e ee       	ldi	r18, 0xEE	; 238
     dc6:	32 e0       	ldi	r19, 0x02	; 2
     dc8:	42 9f       	mul	r20, r18
     dca:	c0 01       	movw	r24, r0
     dcc:	43 9f       	mul	r20, r19
     dce:	90 0d       	add	r25, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	82 59       	subi	r24, 0x92	; 146
     dd4:	99 4d       	sbci	r25, 0xD9	; 217
     dd6:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     dd8:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     ddc:	42 9f       	mul	r20, r18
     dde:	c0 01       	movw	r24, r0
     de0:	43 9f       	mul	r20, r19
     de2:	90 0d       	add	r25, r0
     de4:	11 24       	eor	r1, r1
     de6:	82 59       	subi	r24, 0x92	; 146
     de8:	99 4d       	sbci	r25, 0xD9	; 217
     dea:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     dec:	80 89       	ldd	r24, Z+16	; 0x10
     dee:	80 68       	ori	r24, 0x80	; 128
     df0:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     df2:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	91 11       	cpse	r25, r1
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     e00:	97 c0       	rjmp	.+302    	; 0xf30 <__vector_6+0x254>
			case 3:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     e02:	e0 e0       	ldi	r30, 0x00	; 0
     e04:	f1 e0       	ldi	r31, 0x01	; 1
     e06:	87 e7       	ldi	r24, 0x77	; 119
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	84 8b       	std	Z+20, r24	; 0x14
     e0c:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e0e:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     e12:	2e ee       	ldi	r18, 0xEE	; 238
     e14:	32 e0       	ldi	r19, 0x02	; 2
     e16:	42 9f       	mul	r20, r18
     e18:	c0 01       	movw	r24, r0
     e1a:	43 9f       	mul	r20, r19
     e1c:	90 0d       	add	r25, r0
     e1e:	11 24       	eor	r1, r1
     e20:	82 59       	subi	r24, 0x92	; 146
     e22:	99 4d       	sbci	r25, 0xD9	; 217
     e24:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     e26:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     e2a:	42 9f       	mul	r20, r18
     e2c:	c0 01       	movw	r24, r0
     e2e:	43 9f       	mul	r20, r19
     e30:	90 0d       	add	r25, r0
     e32:	11 24       	eor	r1, r1
     e34:	82 59       	subi	r24, 0x92	; 146
     e36:	99 4d       	sbci	r25, 0xD9	; 217
     e38:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e3a:	80 89       	ldd	r24, Z+16	; 0x10
     e3c:	80 68       	ori	r24, 0x80	; 128
     e3e:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e40:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	91 11       	cpse	r25, r1
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     e4e:	70 c0       	rjmp	.+224    	; 0xf30 <__vector_6+0x254>
			case 4:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     e50:	e0 e0       	ldi	r30, 0x00	; 0
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	87 e7       	ldi	r24, 0x77	; 119
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	84 8b       	std	Z+20, r24	; 0x14
     e5a:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e5c:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     e60:	2e ee       	ldi	r18, 0xEE	; 238
     e62:	32 e0       	ldi	r19, 0x02	; 2
     e64:	42 9f       	mul	r20, r18
     e66:	c0 01       	movw	r24, r0
     e68:	43 9f       	mul	r20, r19
     e6a:	90 0d       	add	r25, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	82 59       	subi	r24, 0x92	; 146
     e70:	99 4d       	sbci	r25, 0xD9	; 217
     e72:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     e74:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     e78:	42 9f       	mul	r20, r18
     e7a:	c0 01       	movw	r24, r0
     e7c:	43 9f       	mul	r20, r19
     e7e:	90 0d       	add	r25, r0
     e80:	11 24       	eor	r1, r1
     e82:	82 59       	subi	r24, 0x92	; 146
     e84:	99 4d       	sbci	r25, 0xD9	; 217
     e86:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e88:	80 89       	ldd	r24, Z+16	; 0x10
     e8a:	80 68       	ori	r24, 0x80	; 128
     e8c:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e8e:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	91 11       	cpse	r25, r1
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     e9c:	49 c0       	rjmp	.+146    	; 0xf30 <__vector_6+0x254>
			case 6:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f1 e0       	ldi	r31, 0x01	; 1
     ea2:	2e ee       	ldi	r18, 0xEE	; 238
     ea4:	32 e0       	ldi	r19, 0x02	; 2
     ea6:	24 8b       	std	Z+20, r18	; 0x14
     ea8:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     eaa:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     eae:	42 9f       	mul	r20, r18
     eb0:	c0 01       	movw	r24, r0
     eb2:	43 9f       	mul	r20, r19
     eb4:	90 0d       	add	r25, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	82 59       	subi	r24, 0x92	; 146
     eba:	99 4d       	sbci	r25, 0xD9	; 217
     ebc:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     ebe:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     ec2:	42 9f       	mul	r20, r18
     ec4:	c0 01       	movw	r24, r0
     ec6:	43 9f       	mul	r20, r19
     ec8:	90 0d       	add	r25, r0
     eca:	11 24       	eor	r1, r1
     ecc:	82 59       	subi	r24, 0x92	; 146
     ece:	99 4d       	sbci	r25, 0xD9	; 217
     ed0:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ed2:	80 89       	ldd	r24, Z+16	; 0x10
     ed4:	80 68       	ori	r24, 0x80	; 128
     ed6:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     ed8:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	91 11       	cpse	r25, r1
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
     ee6:	24 c0       	rjmp	.+72     	; 0xf30 <__vector_6+0x254>
			case 7:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     ee8:	e0 e0       	ldi	r30, 0x00	; 0
     eea:	f1 e0       	ldi	r31, 0x01	; 1
     eec:	2e ee       	ldi	r18, 0xEE	; 238
     eee:	32 e0       	ldi	r19, 0x02	; 2
     ef0:	24 8b       	std	Z+20, r18	; 0x14
     ef2:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     ef4:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     ef8:	42 9f       	mul	r20, r18
     efa:	c0 01       	movw	r24, r0
     efc:	43 9f       	mul	r20, r19
     efe:	90 0d       	add	r25, r0
     f00:	11 24       	eor	r1, r1
     f02:	82 59       	subi	r24, 0x92	; 146
     f04:	99 4d       	sbci	r25, 0xD9	; 217
     f06:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     f08:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <b1_state>
     f0c:	42 9f       	mul	r20, r18
     f0e:	c0 01       	movw	r24, r0
     f10:	43 9f       	mul	r20, r19
     f12:	90 0d       	add	r25, r0
     f14:	11 24       	eor	r1, r1
     f16:	82 59       	subi	r24, 0x92	; 146
     f18:	99 4d       	sbci	r25, 0xD9	; 217
     f1a:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     f1c:	80 89       	ldd	r24, Z+16	; 0x10
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     f22:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <b1_state>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	91 11       	cpse	r25, r1
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <b1_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	4f 91       	pop	r20
     f3e:	3f 91       	pop	r19
     f40:	2f 91       	pop	r18
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_7>:

ISR(DMA_CH1_vect){
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	2f 93       	push	r18
     f58:	3f 93       	push	r19
     f5a:	4f 93       	push	r20
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	ef 93       	push	r30
     f62:	ff 93       	push	r31
		DMA.INTFLAGS = 0x02;
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     f6a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	19 f0       	breq	.+6      	; 0xf78 <__vector_7+0x2c>
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	41 f1       	breq	.+80     	; 0xfc6 <__vector_7+0x7a>
     f76:	4d c0       	rjmp	.+154    	; 0x1012 <__vector_7+0xc6>
			case 0:
			////////////////////////////////////////
			break;
			case 1:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     f78:	e0 e0       	ldi	r30, 0x00	; 0
     f7a:	f1 e0       	ldi	r31, 0x01	; 1
     f7c:	87 e7       	ldi	r24, 0x77	; 119
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	84 a3       	std	Z+36, r24	; 0x24
     f82:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     f84:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
     f88:	2e ee       	ldi	r18, 0xEE	; 238
     f8a:	32 e0       	ldi	r19, 0x02	; 2
     f8c:	42 9f       	mul	r20, r18
     f8e:	c0 01       	movw	r24, r0
     f90:	43 9f       	mul	r20, r19
     f92:	90 0d       	add	r25, r0
     f94:	11 24       	eor	r1, r1
     f96:	8b 51       	subi	r24, 0x1B	; 27
     f98:	98 4d       	sbci	r25, 0xD8	; 216
     f9a:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     f9c:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
     fa0:	42 9f       	mul	r20, r18
     fa2:	c0 01       	movw	r24, r0
     fa4:	43 9f       	mul	r20, r19
     fa6:	90 0d       	add	r25, r0
     fa8:	11 24       	eor	r1, r1
     faa:	8b 51       	subi	r24, 0x1B	; 27
     fac:	98 4d       	sbci	r25, 0xD8	; 216
     fae:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     fb0:	80 a1       	ldd	r24, Z+32	; 0x20
     fb2:	80 68       	ori	r24, 0x80	; 128
     fb4:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
     fb6:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <b2_state>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	91 11       	cpse	r25, r1
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <b2_state>
			break;
     fc4:	26 c0       	rjmp	.+76     	; 0x1012 <__vector_7+0xc6>
			case 2:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     fc6:	e0 e0       	ldi	r30, 0x00	; 0
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	87 e7       	ldi	r24, 0x77	; 119
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	84 a3       	std	Z+36, r24	; 0x24
     fd0:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     fd2:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
     fd6:	2e ee       	ldi	r18, 0xEE	; 238
     fd8:	32 e0       	ldi	r19, 0x02	; 2
     fda:	42 9f       	mul	r20, r18
     fdc:	c0 01       	movw	r24, r0
     fde:	43 9f       	mul	r20, r19
     fe0:	90 0d       	add	r25, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	8b 51       	subi	r24, 0x1B	; 27
     fe6:	98 4d       	sbci	r25, 0xD8	; 216
     fe8:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     fea:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
     fee:	42 9f       	mul	r20, r18
     ff0:	c0 01       	movw	r24, r0
     ff2:	43 9f       	mul	r20, r19
     ff4:	90 0d       	add	r25, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	8b 51       	subi	r24, 0x1B	; 27
     ffa:	98 4d       	sbci	r25, 0xD8	; 216
     ffc:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ffe:	80 a1       	ldd	r24, Z+32	; 0x20
    1000:	80 68       	ori	r24, 0x80	; 128
    1002:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
    1004:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <b2_state>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	91 11       	cpse	r25, r1
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <b2_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
    1012:	ff 91       	pop	r31
    1014:	ef 91       	pop	r30
    1016:	9f 91       	pop	r25
    1018:	8f 91       	pop	r24
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <__vector_8>:
ISR(DMA_CH2_vect){
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	8f 93       	push	r24
    103c:	9f 93       	push	r25
    103e:	ef 93       	push	r30
    1040:	ff 93       	push	r31
	DMA.INTFLAGS = 0x04;
    1042:	e0 e0       	ldi	r30, 0x00	; 0
    1044:	f1 e0       	ldi	r31, 0x01	; 1
    1046:	84 e0       	ldi	r24, 0x04	; 4
    1048:	83 83       	std	Z+3, r24	; 0x03
	DMA.CH2.TRFCNT = HALFPACKET_SIZE;		
    104a:	87 e7       	ldi	r24, 0x77	; 119
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	84 ab       	std	Z+52, r24	; 0x34
    1050:	95 ab       	std	Z+53, r25	; 0x35
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    1052:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
    1056:	2e ee       	ldi	r18, 0xEE	; 238
    1058:	32 e0       	ldi	r19, 0x02	; 2
    105a:	42 9f       	mul	r20, r18
    105c:	c0 01       	movw	r24, r0
    105e:	43 9f       	mul	r20, r19
    1060:	90 0d       	add	r25, r0
    1062:	11 24       	eor	r1, r1
    1064:	8b 51       	subi	r24, 0x1B	; 27
    1066:	98 4d       	sbci	r25, 0xD8	; 216
    1068:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;	
    106a:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
    106e:	42 9f       	mul	r20, r18
    1070:	c0 01       	movw	r24, r0
    1072:	43 9f       	mul	r20, r19
    1074:	90 0d       	add	r25, r0
    1076:	11 24       	eor	r1, r1
    1078:	8b 51       	subi	r24, 0x1B	; 27
    107a:	98 4d       	sbci	r25, 0xD8	; 216
    107c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    1080:	80 a9       	ldd	r24, Z+48	; 0x30
    1082:	80 68       	ori	r24, 0x80	; 128
    1084:	80 ab       	std	Z+48, r24	; 0x30
	b2_state = !b2_state;
    1086:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <b2_state>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	91 11       	cpse	r25, r1
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <b2_state>
}
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	9f 91       	pop	r25
    109a:	8f 91       	pop	r24
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <__vector_9>:

ISR(DMA_CH3_vect){
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	8f 93       	push	r24
    10be:	9f 93       	push	r25
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
	DMA.INTFLAGS = 0x08;
    10c4:	88 e0       	ldi	r24, 0x08	; 8
    10c6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	DMA.CH3.TRFCNT = HALFPACKET_SIZE;
    10ca:	87 e7       	ldi	r24, 0x77	; 119
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    10d2:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    10d6:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
    10da:	2e ee       	ldi	r18, 0xEE	; 238
    10dc:	32 e0       	ldi	r19, 0x02	; 2
    10de:	42 9f       	mul	r20, r18
    10e0:	c0 01       	movw	r24, r0
    10e2:	43 9f       	mul	r20, r19
    10e4:	90 0d       	add	r25, r0
    10e6:	11 24       	eor	r1, r1
    10e8:	8b 51       	subi	r24, 0x1B	; 27
    10ea:	98 4d       	sbci	r25, 0xD8	; 216
    10ec:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
    10f0:	40 91 b8 20 	lds	r20, 0x20B8	; 0x8020b8 <b2_state>
    10f4:	42 9f       	mul	r20, r18
    10f6:	c0 01       	movw	r24, r0
    10f8:	43 9f       	mul	r20, r19
    10fa:	90 0d       	add	r25, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	8b 51       	subi	r24, 0x1B	; 27
    1100:	98 4d       	sbci	r25, 0xD8	; 216
    1102:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    1106:	e0 e4       	ldi	r30, 0x40	; 64
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	80 81       	ld	r24, Z
    110c:	80 68       	ori	r24, 0x80	; 128
    110e:	80 83       	st	Z, r24
	b2_state = !b2_state;
    1110:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <b2_state>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	91 11       	cpse	r25, r1
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <b2_state>
}
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    1136:	e0 e7       	ldi	r30, 0x70	; 112
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	83 81       	ldd	r24, Z+3	; 0x03
    113c:	8c 7f       	andi	r24, 0xFC	; 252
    113e:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    1140:	84 81       	ldd	r24, Z+4	; 0x04
    1142:	8c 7f       	andi	r24, 0xFC	; 252
    1144:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1146:	80 81       	ld	r24, Z
    1148:	8d 7f       	andi	r24, 0xFD	; 253
    114a:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    114c:	e0 e8       	ldi	r30, 0x80	; 128
    114e:	f1 e0       	ldi	r31, 0x01	; 1
    1150:	80 ec       	ldi	r24, 0xC0	; 192
    1152:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1154:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1156:	88 ec       	ldi	r24, 0xC8	; 200
    1158:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    115a:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    115c:	a0 e0       	ldi	r26, 0x00	; 0
    115e:	b8 e0       	ldi	r27, 0x08	; 8
    1160:	34 e0       	ldi	r19, 0x04	; 4
    1162:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1164:	23 e0       	ldi	r18, 0x03	; 3
    1166:	11 96       	adiw	r26, 0x01	; 1
    1168:	2c 93       	st	X, r18
    116a:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    116c:	14 96       	adiw	r26, 0x04	; 4
    116e:	1c 92       	st	X, r1
    1170:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1172:	85 ed       	ldi	r24, 0xD5	; 213
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	96 96       	adiw	r26, 0x26	; 38
    1178:	8d 93       	st	X+, r24
    117a:	9c 93       	st	X, r25
    117c:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    117e:	16 96       	adiw	r26, 0x06	; 6
    1180:	1c 92       	st	X, r1
    1182:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1184:	e0 e4       	ldi	r30, 0x40	; 64
    1186:	f8 e0       	ldi	r31, 0x08	; 8
    1188:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    118a:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    118c:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    118e:	86 a3       	std	Z+38, r24	; 0x26
    1190:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    1192:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    1194:	e0 e6       	ldi	r30, 0x60	; 96
    1196:	f6 e0       	ldi	r31, 0x06	; 6
    1198:	80 81       	ld	r24, Z
    119a:	80 61       	ori	r24, 0x10	; 16
    119c:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    119e:	e0 e4       	ldi	r30, 0x40	; 64
    11a0:	f9 e0       	ldi	r31, 0x09	; 9
    11a2:	83 e1       	ldi	r24, 0x13	; 19
    11a4:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    11a6:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    11ac:	a6 a3       	std	Z+38, r26	; 0x26
    11ae:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    11b0:	10 a6       	std	Z+40, r1	; 0x28
    11b2:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 83       	st	Z, r24
    11b8:	08 95       	ret

000011ba <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	ef 93       	push	r30
    11d2:	ff 93       	push	r31
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	1f 92       	push	r1
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    11e4:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    11e8:	87 30       	cpi	r24, 0x07	; 7
    11ea:	31 f4       	brne	.+12     	; 0x11f8 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    11ec:	e0 e0       	ldi	r30, 0x00	; 0
    11ee:	f2 e0       	ldi	r31, 0x02	; 2
    11f0:	84 a5       	ldd	r24, Z+44	; 0x2c
    11f2:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    11f4:	95 a5       	ldd	r25, Z+45	; 0x2d
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    11f8:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    11fc:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <PSU_target>
    1200:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    1202:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1206:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	82 30       	cpi	r24, 0x02	; 2
    120e:	0c f4       	brge	.+2      	; 0x1212 <__vector_83+0x58>
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	99 23       	and	r25, r25
    1214:	c9 f0       	breq	.+50     	; 0x1248 <__vector_83+0x8e>
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	2a 3f       	cpi	r18, 0xFA	; 250
    121a:	37 40       	sbci	r19, 0x07	; 7
    121c:	08 f0       	brcs	.+2      	; 0x1220 <__vector_83+0x66>
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	99 23       	and	r25, r25
    1222:	91 f0       	breq	.+36     	; 0x1248 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    1224:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1228:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    122c:	89 30       	cpi	r24, 0x09	; 9
    122e:	1c f4       	brge	.+6      	; 0x1236 <__vector_83+0x7c>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <__vector_83+0x80>
    1236:	86 e0       	ldi	r24, 0x06	; 6
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	82 0f       	add	r24, r18
    123c:	93 1f       	adc	r25, r19
    123e:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1242:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1246:	23 c0       	rjmp	.+70     	; 0x128e <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1248:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    124c:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	8f 3f       	cpi	r24, 0xFF	; 255
    1254:	0c f0       	brlt	.+2      	; 0x1258 <__vector_83+0x9e>
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	99 23       	and	r25, r25
    125a:	c9 f0       	breq	.+50     	; 0x128e <__vector_83+0xd4>
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	27 30       	cpi	r18, 0x07	; 7
    1260:	31 05       	cpc	r19, r1
    1262:	08 f4       	brcc	.+2      	; 0x1266 <__vector_83+0xac>
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	99 23       	and	r25, r25
    1268:	91 f0       	breq	.+36     	; 0x128e <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    126a:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    126e:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1272:	88 3f       	cpi	r24, 0xF8	; 248
    1274:	1c f0       	brlt	.+6      	; 0x127c <__vector_83+0xc2>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <__vector_83+0xc6>
    127c:	86 e0       	ldi	r24, 0x06	; 6
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	48 1b       	sub	r20, r24
    1284:	59 0b       	sbc	r21, r25
    1286:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    128a:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    128e:	0f 90       	pop	r0
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	5f 91       	pop	r21
    129e:	4f 91       	pop	r20
    12a0:	3f 91       	pop	r19
    12a2:	2f 91       	pop	r18
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    12ae:	e0 e7       	ldi	r30, 0x70	; 112
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	83 81       	ldd	r24, Z+3	; 0x03
    12b4:	8f 7e       	andi	r24, 0xEF	; 239
    12b6:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    12b8:	e0 e4       	ldi	r30, 0x40	; 64
    12ba:	f6 e0       	ldi	r31, 0x06	; 6
    12bc:	80 81       	ld	r24, Z
    12be:	8a 6a       	ori	r24, 0xAA	; 170
    12c0:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    12c6:	88 e5       	ldi	r24, 0x58	; 88
    12c8:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    12ca:	e0 ea       	ldi	r30, 0xA0	; 160
    12cc:	f8 e0       	ldi	r31, 0x08	; 8
    12ce:	84 ec       	ldi	r24, 0xC4	; 196
    12d0:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    12d6:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    12d8:	88 e1       	ldi	r24, 0x18	; 24
    12da:	84 83       	std	Z+4, r24	; 0x04
    12dc:	08 95       	ret

000012de <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    12de:	e0 e7       	ldi	r30, 0x70	; 112
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	83 81       	ldd	r24, Z+3	; 0x03
    12e4:	87 7f       	andi	r24, 0xF7	; 247
    12e6:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    12e8:	e0 ec       	ldi	r30, 0xC0	; 192
    12ea:	f8 e0       	ldi	r31, 0x08	; 8
    12ec:	80 e4       	ldi	r24, 0x40	; 64
    12ee:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    12f0:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    12f2:	88 e5       	ldi	r24, 0x58	; 88
    12f4:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    12f8:	08 95       	ret

000012fa <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
	asm("nop");
    1304:	00 00       	nop
}
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1310:	9f b7       	in	r25, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	e8 2f       	mov	r30, r24
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	e0 59       	subi	r30, 0x90	; 144
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	60 95       	com	r22
    131e:	80 81       	ld	r24, Z
    1320:	68 23       	and	r22, r24
    1322:	60 83       	st	Z, r22
    1324:	9f bf       	out	0x3f, r25	; 63
    1326:	08 95       	ret

00001328 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1328:	86 30       	cpi	r24, 0x06	; 6
    132a:	11 f0       	breq	.+4      	; 0x1330 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1330:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1332:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1336:	81 fd       	sbrc	r24, 1
    1338:	26 c0       	rjmp	.+76     	; 0x1386 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    133a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    133c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    133e:	e0 e5       	ldi	r30, 0x50	; 80
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	82 60       	ori	r24, 0x02	; 2
    1346:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1348:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    134a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    134c:	81 ff       	sbrs	r24, 1
    134e:	fd cf       	rjmp	.-6      	; 0x134a <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1350:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1352:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1354:	a0 e5       	ldi	r26, 0x50	; 80
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	16 96       	adiw	r26, 0x06	; 6
    135a:	8c 91       	ld	r24, X
    135c:	16 97       	sbiw	r26, 0x06	; 6
    135e:	89 7f       	andi	r24, 0xF9	; 249
    1360:	16 96       	adiw	r26, 0x06	; 6
    1362:	8c 93       	st	X, r24
    1364:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1366:	e0 e6       	ldi	r30, 0x60	; 96
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 e8       	ldi	r24, 0x80	; 128
    136c:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    136e:	8b eb       	ldi	r24, 0xBB	; 187
    1370:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1372:	16 96       	adiw	r26, 0x06	; 6
    1374:	8c 91       	ld	r24, X
    1376:	16 97       	sbiw	r26, 0x06	; 6
    1378:	84 60       	ori	r24, 0x04	; 4
    137a:	16 96       	adiw	r26, 0x06	; 6
    137c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    137e:	80 81       	ld	r24, Z
    1380:	81 60       	ori	r24, 0x01	; 1
    1382:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1384:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1386:	63 60       	ori	r22, 0x03	; 3
    1388:	84 e4       	ldi	r24, 0x44	; 68
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	2d d5       	rcall	.+2650   	; 0x1de8 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    138e:	60 e4       	ldi	r22, 0x40	; 64
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	be cf       	rjmp	.-132    	; 0x1310 <sysclk_enable_module>
    1394:	08 95       	ret

00001396 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1396:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <udi_vendor_alternate_setting>
    139a:	08 95       	ret

0000139c <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    139c:	40 d1       	rcall	.+640    	; 0x161e <udc_get_interface_desc>
    139e:	fc 01       	movw	r30, r24
    13a0:	83 81       	ldd	r24, Z+3	; 0x03
    13a2:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    13a6:	81 11       	cpse	r24, r1
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    13aa:	69 c8       	rjmp	.-3886   	; 0x47e <main_vendor_enable>
    13ac:	08 95       	ret
			return false;
		}
	}
	return true;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
}
    13b0:	08 95       	ret

000013b2 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    13b2:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <udi_vendor_alternate_setting>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    13ba:	7d c8       	rjmp	.-3846   	; 0x4b6 <main_vendor_disable>
    13bc:	08 95       	ret

000013be <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    13be:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    13c2:	88 23       	and	r24, r24
    13c4:	4c f4       	brge	.+18     	; 0x13d8 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    13c6:	80 76       	andi	r24, 0x60	; 96
    13c8:	80 34       	cpi	r24, 0x40	; 64
    13ca:	a9 f4       	brne	.+42     	; 0x13f6 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    13cc:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    13d0:	81 11       	cpse	r24, r1
    13d2:	13 c0       	rjmp	.+38     	; 0x13fa <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    13d4:	75 c8       	rjmp	.-3862   	; 0x4c0 <main_setup_in_received>
    13d6:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    13d8:	80 76       	andi	r24, 0x60	; 96
    13da:	80 34       	cpi	r24, 0x40	; 64
    13dc:	81 f4       	brne	.+32     	; 0x13fe <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    13de:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    13e2:	81 11       	cpse	r24, r1
    13e4:	0e c0       	rjmp	.+28     	; 0x1402 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    13e6:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    13ea:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    13ee:	89 2b       	or	r24, r25
    13f0:	51 f0       	breq	.+20     	; 0x1406 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    13f2:	64 c8       	rjmp	.-3896   	; 0x4bc <main_setup_out_received>
    13f4:	08 95       	ret
		}
	}
	return false; // Not supported request
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	08 95       	ret
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	08 95       	ret
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	08 95       	ret
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	08 95       	ret
    1406:	80 e0       	ldi	r24, 0x00	; 0
}
    1408:	08 95       	ret

0000140a <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    1410:	8a 01       	movw	r16, r20
    1412:	ac 01       	movw	r20, r24
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	81 e8       	ldi	r24, 0x81	; 129
    1418:	0e 94 68 13 	call	0x26d0	; 0x26d0 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    1428:	8a 01       	movw	r16, r20
    142a:	ac 01       	movw	r20, r24
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	82 e8       	ldi	r24, 0x82	; 130
    1430:	0e 94 68 13 	call	0x26d0	; 0x26d0 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	08 95       	ret

0000143a <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    1440:	8a 01       	movw	r16, r20
    1442:	ac 01       	movw	r20, r24
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	83 e8       	ldi	r24, 0x83	; 131
    1448:	0e 94 68 13 	call	0x26d0	; 0x26d0 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	08 95       	ret

00001452 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1452:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1456:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    145a:	01 90       	ld	r0, Z+
    145c:	f0 81       	ld	r31, Z
    145e:	e0 2d       	mov	r30, r0
    1460:	22 81       	ldd	r18, Z+2	; 0x02
    1462:	33 81       	ldd	r19, Z+3	; 0x03
    1464:	2e 0f       	add	r18, r30
    1466:	3f 1f       	adc	r19, r31
    1468:	fc 01       	movw	r30, r24
    146a:	40 81       	ld	r20, Z
    146c:	e4 0f       	add	r30, r20
    146e:	f1 1d       	adc	r31, r1
    1470:	e2 17       	cp	r30, r18
    1472:	f3 07       	cpc	r31, r19
    1474:	b8 f4       	brcc	.+46     	; 0x14a4 <udc_next_desc_in_iface+0x52>
    1476:	81 81       	ldd	r24, Z+1	; 0x01
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	b9 f0       	breq	.+46     	; 0x14aa <udc_next_desc_in_iface+0x58>
    147c:	86 13       	cpse	r24, r22
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <udc_next_desc_in_iface+0x40>
    1480:	05 c0       	rjmp	.+10     	; 0x148c <udc_next_desc_in_iface+0x3a>
    1482:	81 81       	ldd	r24, Z+1	; 0x01
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	a1 f0       	breq	.+40     	; 0x14b0 <udc_next_desc_in_iface+0x5e>
    1488:	86 13       	cpse	r24, r22
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <udc_next_desc_in_iface+0x40>
    148c:	8e 2f       	mov	r24, r30
    148e:	9f 2f       	mov	r25, r31
    1490:	08 95       	ret
    1492:	80 81       	ld	r24, Z
    1494:	e8 0f       	add	r30, r24
    1496:	f1 1d       	adc	r31, r1
    1498:	e2 17       	cp	r30, r18
    149a:	f3 07       	cpc	r31, r19
    149c:	90 f3       	brcs	.-28     	; 0x1482 <udc_next_desc_in_iface+0x30>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	08 95       	ret
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	08 95       	ret
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	08 95       	ret
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	08 95       	ret

000014b6 <udc_valid_address>:
    14b6:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    14ba:	8f 77       	andi	r24, 0x7F	; 127
    14bc:	0c 94 96 12 	jmp	0x252c	; 0x252c <udd_set_address>
    14c0:	08 95       	ret

000014c2 <udc_update_iface_desc>:
    14c2:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <udc_num_configuration>
    14c6:	99 23       	and	r25, r25
    14c8:	81 f1       	breq	.+96     	; 0x152a <udc_update_iface_desc+0x68>
    14ca:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    14ce:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    14d2:	01 90       	ld	r0, Z+
    14d4:	f0 81       	ld	r31, Z
    14d6:	e0 2d       	mov	r30, r0
    14d8:	94 81       	ldd	r25, Z+4	; 0x04
    14da:	89 17       	cp	r24, r25
    14dc:	40 f5       	brcc	.+80     	; 0x152e <udc_update_iface_desc+0x6c>
    14de:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_iface>
    14e2:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_iface+0x1>
    14e6:	22 81       	ldd	r18, Z+2	; 0x02
    14e8:	33 81       	ldd	r19, Z+3	; 0x03
    14ea:	2e 0f       	add	r18, r30
    14ec:	3f 1f       	adc	r19, r31
    14ee:	e2 17       	cp	r30, r18
    14f0:	f3 07       	cpc	r31, r19
    14f2:	f8 f4       	brcc	.+62     	; 0x1532 <udc_update_iface_desc+0x70>
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	94 30       	cpi	r25, 0x04	; 4
    14f8:	61 f4       	brne	.+24     	; 0x1512 <udc_update_iface_desc+0x50>
    14fa:	92 81       	ldd	r25, Z+2	; 0x02
    14fc:	98 13       	cpse	r25, r24
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <udc_update_iface_desc+0x50>
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	96 13       	cpse	r25, r22
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <udc_update_iface_desc+0x50>
    1506:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_iface>
    150a:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_iface+0x1>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	08 95       	ret
    1512:	90 81       	ld	r25, Z
    1514:	e9 0f       	add	r30, r25
    1516:	f1 1d       	adc	r31, r1
    1518:	e2 17       	cp	r30, r18
    151a:	f3 07       	cpc	r31, r19
    151c:	58 f3       	brcs	.-42     	; 0x14f4 <udc_update_iface_desc+0x32>
    151e:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_iface>
    1522:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_iface+0x1>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	08 95       	ret
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	08 95       	ret
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	08 95       	ret
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	08 95       	ret

00001536 <udc_iface_disable>:
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	c8 2f       	mov	r28, r24
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	be df       	rcall	.-132    	; 0x14c2 <udc_update_iface_desc>
    1546:	18 2f       	mov	r17, r24
    1548:	88 23       	and	r24, r24
    154a:	81 f1       	breq	.+96     	; 0x15ac <udc_iface_disable+0x76>
    154c:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1550:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1554:	ec 2f       	mov	r30, r28
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	12 96       	adiw	r26, 0x02	; 2
    155e:	8d 91       	ld	r24, X+
    1560:	9c 91       	ld	r25, X
    1562:	13 97       	sbiw	r26, 0x03	; 3
    1564:	e8 0f       	add	r30, r24
    1566:	f9 1f       	adc	r31, r25
    1568:	e0 80       	ld	r14, Z
    156a:	f1 80       	ldd	r15, Z+1	; 0x01
    156c:	d7 01       	movw	r26, r14
    156e:	16 96       	adiw	r26, 0x06	; 6
    1570:	ed 91       	ld	r30, X+
    1572:	fc 91       	ld	r31, X
    1574:	17 97       	sbiw	r26, 0x07	; 7
    1576:	09 95       	icall
    1578:	68 2f       	mov	r22, r24
    157a:	8c 2f       	mov	r24, r28
    157c:	a2 df       	rcall	.-188    	; 0x14c2 <udc_update_iface_desc>
    157e:	18 2f       	mov	r17, r24
    1580:	88 23       	and	r24, r24
    1582:	a1 f0       	breq	.+40     	; 0x15ac <udc_iface_disable+0x76>
    1584:	c0 91 be 20 	lds	r28, 0x20BE	; 0x8020be <udc_ptr_iface>
    1588:	d0 91 bf 20 	lds	r29, 0x20BF	; 0x8020bf <udc_ptr_iface+0x1>
    158c:	65 e0       	ldi	r22, 0x05	; 5
    158e:	ce 01       	movw	r24, r28
    1590:	60 df       	rcall	.-320    	; 0x1452 <udc_next_desc_in_iface>
    1592:	ec 01       	movw	r28, r24
    1594:	89 2b       	or	r24, r25
    1596:	21 f0       	breq	.+8      	; 0x15a0 <udc_iface_disable+0x6a>
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <udd_ep_free>
    159e:	f6 cf       	rjmp	.-20     	; 0x158c <udc_iface_disable+0x56>
    15a0:	d7 01       	movw	r26, r14
    15a2:	12 96       	adiw	r26, 0x02	; 2
    15a4:	ed 91       	ld	r30, X+
    15a6:	fc 91       	ld	r31, X
    15a8:	13 97       	sbiw	r26, 0x03	; 3
    15aa:	09 95       	icall
    15ac:	81 2f       	mov	r24, r17
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	ff 90       	pop	r15
    15b6:	ef 90       	pop	r14
    15b8:	08 95       	ret

000015ba <udc_iface_enable>:
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	18 2f       	mov	r17, r24
    15c2:	7f df       	rcall	.-258    	; 0x14c2 <udc_update_iface_desc>
    15c4:	88 23       	and	r24, r24
    15c6:	39 f1       	breq	.+78     	; 0x1616 <udc_iface_enable+0x5c>
    15c8:	c0 91 be 20 	lds	r28, 0x20BE	; 0x8020be <udc_ptr_iface>
    15cc:	d0 91 bf 20 	lds	r29, 0x20BF	; 0x8020bf <udc_ptr_iface+0x1>
    15d0:	65 e0       	ldi	r22, 0x05	; 5
    15d2:	ce 01       	movw	r24, r28
    15d4:	3e df       	rcall	.-388    	; 0x1452 <udc_next_desc_in_iface>
    15d6:	ec 01       	movw	r28, r24
    15d8:	89 2b       	or	r24, r25
    15da:	41 f0       	breq	.+16     	; 0x15ec <udc_iface_enable+0x32>
    15dc:	4c 81       	ldd	r20, Y+4	; 0x04
    15de:	5d 81       	ldd	r21, Y+5	; 0x05
    15e0:	6b 81       	ldd	r22, Y+3	; 0x03
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	b0 d7       	rcall	.+3936   	; 0x2546 <udd_ep_alloc>
    15e6:	81 11       	cpse	r24, r1
    15e8:	f3 cf       	rjmp	.-26     	; 0x15d0 <udc_iface_enable+0x16>
    15ea:	15 c0       	rjmp	.+42     	; 0x1616 <udc_iface_enable+0x5c>
    15ec:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    15f0:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    15f4:	e1 2f       	mov	r30, r17
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	ee 0f       	add	r30, r30
    15fa:	ff 1f       	adc	r31, r31
    15fc:	12 96       	adiw	r26, 0x02	; 2
    15fe:	8d 91       	ld	r24, X+
    1600:	9c 91       	ld	r25, X
    1602:	13 97       	sbiw	r26, 0x03	; 3
    1604:	e8 0f       	add	r30, r24
    1606:	f9 1f       	adc	r31, r25
    1608:	01 90       	ld	r0, Z+
    160a:	f0 81       	ld	r31, Z
    160c:	e0 2d       	mov	r30, r0
    160e:	01 90       	ld	r0, Z+
    1610:	f0 81       	ld	r31, Z
    1612:	e0 2d       	mov	r30, r0
    1614:	09 95       	icall
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	08 95       	ret

0000161e <udc_get_interface_desc>:
    161e:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_ptr_iface>
    1622:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <udc_ptr_iface+0x1>
    1626:	08 95       	ret

00001628 <udc_start>:
    1628:	fc c6       	rjmp	.+3576   	; 0x2422 <udd_enable>
    162a:	08 95       	ret

0000162c <udc_reset>:
    162c:	cf 93       	push	r28
    162e:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1632:	88 23       	and	r24, r24
    1634:	c1 f0       	breq	.+48     	; 0x1666 <udc_reset+0x3a>
    1636:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    163a:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    163e:	01 90       	ld	r0, Z+
    1640:	f0 81       	ld	r31, Z
    1642:	e0 2d       	mov	r30, r0
    1644:	84 81       	ldd	r24, Z+4	; 0x04
    1646:	88 23       	and	r24, r24
    1648:	71 f0       	breq	.+28     	; 0x1666 <udc_reset+0x3a>
    164a:	c0 e0       	ldi	r28, 0x00	; 0
    164c:	8c 2f       	mov	r24, r28
    164e:	73 df       	rcall	.-282    	; 0x1536 <udc_iface_disable>
    1650:	cf 5f       	subi	r28, 0xFF	; 255
    1652:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1656:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    165a:	01 90       	ld	r0, Z+
    165c:	f0 81       	ld	r31, Z
    165e:	e0 2d       	mov	r30, r0
    1660:	84 81       	ldd	r24, Z+4	; 0x04
    1662:	c8 17       	cp	r28, r24
    1664:	98 f3       	brcs	.-26     	; 0x164c <udc_reset+0x20>
    1666:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udc_num_configuration>
    166a:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <udc_device_status>
    166e:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <udc_device_status+0x1>
    1672:	cf 91       	pop	r28
    1674:	08 95       	ret

00001676 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1676:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1678:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    167c:	88 23       	and	r24, r24
    167e:	49 f1       	breq	.+82     	; 0x16d2 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1680:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1684:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1688:	ed 91       	ld	r30, X+
    168a:	fc 91       	ld	r31, X
    168c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    168e:	84 81       	ldd	r24, Z+4	; 0x04
    1690:	88 23       	and	r24, r24
    1692:	f9 f0       	breq	.+62     	; 0x16d2 <udc_sof_notify+0x5c>
    1694:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1696:	ec 2f       	mov	r30, r28
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	12 96       	adiw	r26, 0x02	; 2
    16a0:	8d 91       	ld	r24, X+
    16a2:	9c 91       	ld	r25, X
    16a4:	13 97       	sbiw	r26, 0x03	; 3
    16a6:	e8 0f       	add	r30, r24
    16a8:	f9 1f       	adc	r31, r25
    16aa:	01 90       	ld	r0, Z+
    16ac:	f0 81       	ld	r31, Z
    16ae:	e0 2d       	mov	r30, r0
    16b0:	00 84       	ldd	r0, Z+8	; 0x08
    16b2:	f1 85       	ldd	r31, Z+9	; 0x09
    16b4:	e0 2d       	mov	r30, r0
    16b6:	30 97       	sbiw	r30, 0x00	; 0
    16b8:	09 f0       	breq	.+2      	; 0x16bc <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    16ba:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    16bc:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16be:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    16c2:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    16c6:	ed 91       	ld	r30, X+
    16c8:	fc 91       	ld	r31, X
    16ca:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    16cc:	84 81       	ldd	r24, Z+4	; 0x04
    16ce:	c8 17       	cp	r28, r24
    16d0:	10 f3       	brcs	.-60     	; 0x1696 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    16de:	ee e5       	ldi	r30, 0x5E	; 94
    16e0:	f4 e2       	ldi	r31, 0x24	; 36
    16e2:	12 86       	std	Z+10, r1	; 0x0a
    16e4:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    16e6:	14 86       	std	Z+12, r1	; 0x0c
    16e8:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    16ea:	16 86       	std	Z+14, r1	; 0x0e
    16ec:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    16ee:	80 81       	ld	r24, Z
    16f0:	88 23       	and	r24, r24
    16f2:	3c f4       	brge	.+14     	; 0x1702 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    16f4:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    16f8:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    16fc:	23 2b       	or	r18, r19
    16fe:	09 f4       	brne	.+2      	; 0x1702 <udc_process_setup+0x2c>
    1700:	67 c3       	rjmp	.+1742   	; 0x1dd0 <udc_process_setup+0x6fa>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1702:	80 76       	andi	r24, 0x60	; 96
    1704:	80 34       	cpi	r24, 0x40	; 64
    1706:	09 f0       	breq	.+2      	; 0x170a <udc_process_setup+0x34>
    1708:	05 c1       	rjmp	.+522    	; 0x1914 <udc_process_setup+0x23e>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    170a:	e0 91 5f 24 	lds	r30, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    170e:	8e 2f       	mov	r24, r30
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	fc 01       	movw	r30, r24
    1714:	e0 5a       	subi	r30, 0xA0	; 160
    1716:	f1 09       	sbc	r31, r1
    1718:	e8 30       	cpi	r30, 0x08	; 8
    171a:	f1 05       	cpc	r31, r1
    171c:	08 f0       	brcs	.+2      	; 0x1720 <udc_process_setup+0x4a>
    171e:	f1 c0       	rjmp	.+482    	; 0x1902 <udc_process_setup+0x22c>
    1720:	ea 5f       	subi	r30, 0xFA	; 250
    1722:	fe 4f       	sbci	r31, 0xFE	; 254
    1724:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    1728:	00 00       	nop
    172a:	56 c3       	rjmp	.+1708   	; 0x1dd8 <udc_process_setup+0x702>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    172c:	e0 e0       	ldi	r30, 0x00	; 0
    172e:	f8 e0       	ldi	r31, 0x08	; 8
    1730:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1732:	ce e5       	ldi	r28, 0x5E	; 94
    1734:	d4 e2       	ldi	r29, 0x24	; 36
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	86 ab       	std	Z+54, r24	; 0x36
    173c:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	8f 70       	andi	r24, 0x0F	; 15
    1742:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1744:	6e 81       	ldd	r22, Y+6	; 0x06
    1746:	7f 81       	ldd	r23, Y+7	; 0x07
    1748:	8e e5       	ldi	r24, 0x5E	; 94
    174a:	92 e2       	ldi	r25, 0x22	; 34
    174c:	f5 d6       	rcall	.+3562   	; 0x2538 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    174e:	8e 81       	ldd	r24, Y+6	; 0x06
    1750:	9f 81       	ldd	r25, Y+7	; 0x07
    1752:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
    1756:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
    175a:	82 17       	cp	r24, r18
    175c:	93 07       	cpc	r25, r19
    175e:	09 f4       	brne	.+2      	; 0x1762 <udc_process_setup+0x8c>
    1760:	3b c3       	rjmp	.+1654   	; 0x1dd8 <udc_process_setup+0x702>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1762:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <dacBuf_len>
    1766:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <dacBuf_len+0x1>
				switch(global_mode){
    176a:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    176e:	8e 2f       	mov	r24, r30
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	88 30       	cpi	r24, 0x08	; 8
    1774:	91 05       	cpc	r25, r1
    1776:	08 f0       	brcs	.+2      	; 0x177a <udc_process_setup+0xa4>
    1778:	c6 c0       	rjmp	.+396    	; 0x1906 <udc_process_setup+0x230>
    177a:	fc 01       	movw	r30, r24
    177c:	e2 5f       	subi	r30, 0xF2	; 242
    177e:	fe 4f       	sbci	r31, 0xFE	; 254
    1780:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1784:	0e 94 10 03 	call	0x620	; 0x620 <tiny_dma_set_mode_0>
    1788:	27 c3       	rjmp	.+1614   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 1:
					tiny_dma_set_mode_1();
    178a:	0e 94 83 03 	call	0x706	; 0x706 <tiny_dma_set_mode_1>
    178e:	24 c3       	rjmp	.+1608   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1790:	32 d8       	rcall	.-3996   	; 0x7f6 <tiny_dma_set_mode_2>
    1792:	22 c3       	rjmp	.+1604   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1794:	a5 d8       	rcall	.-3766   	; 0x8e0 <tiny_dma_set_mode_3>
    1796:	20 c3       	rjmp	.+1600   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1798:	1f d9       	rcall	.-3522   	; 0x9d8 <tiny_dma_set_mode_4>
    179a:	1e c3       	rjmp	.+1596   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 5:
					tiny_dma_set_mode_5();
    179c:	93 d9       	rcall	.-3290   	; 0xac4 <tiny_dma_set_mode_5>
    179e:	1c c3       	rjmp	.+1592   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 6:
					tiny_dma_set_mode_6();
    17a0:	d9 d9       	rcall	.-3150   	; 0xb54 <tiny_dma_set_mode_6>
    17a2:	1a c3       	rjmp	.+1588   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 7:
					tiny_dma_set_mode_7();
    17a4:	39 da       	rcall	.-2958   	; 0xc18 <tiny_dma_set_mode_7>
    17a6:	18 c3       	rjmp	.+1584   	; 0x1dd8 <udc_process_setup+0x702>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    17a8:	e0 e4       	ldi	r30, 0x40	; 64
    17aa:	f8 e0       	ldi	r31, 0x08	; 8
    17ac:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    17ae:	ce e5       	ldi	r28, 0x5E	; 94
    17b0:	d4 e2       	ldi	r29, 0x24	; 36
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	9b 81       	ldd	r25, Y+3	; 0x03
    17b6:	86 ab       	std	Z+54, r24	; 0x36
    17b8:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	8f 70       	andi	r24, 0x0F	; 15
    17be:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    17c0:	6e 81       	ldd	r22, Y+6	; 0x06
    17c2:	7f 81       	ldd	r23, Y+7	; 0x07
    17c4:	8e e6       	ldi	r24, 0x6E	; 110
    17c6:	94 e2       	ldi	r25, 0x24	; 36
    17c8:	b7 d6       	rcall	.+3438   	; 0x2538 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    17ca:	8e 81       	ldd	r24, Y+6	; 0x06
    17cc:	9f 81       	ldd	r25, Y+7	; 0x07
    17ce:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
    17d2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
    17d6:	82 17       	cp	r24, r18
    17d8:	93 07       	cpc	r25, r19
    17da:	09 f4       	brne	.+2      	; 0x17de <udc_process_setup+0x108>
    17dc:	fd c2       	rjmp	.+1530   	; 0x1dd8 <udc_process_setup+0x702>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    17de:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <auxDacBufLen>
    17e2:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <auxDacBufLen+0x1>
				switch(global_mode){
    17e6:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    17ea:	8e 2f       	mov	r24, r30
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	88 30       	cpi	r24, 0x08	; 8
    17f0:	91 05       	cpc	r25, r1
    17f2:	08 f0       	brcs	.+2      	; 0x17f6 <udc_process_setup+0x120>
    17f4:	8a c0       	rjmp	.+276    	; 0x190a <udc_process_setup+0x234>
    17f6:	fc 01       	movw	r30, r24
    17f8:	ea 5e       	subi	r30, 0xEA	; 234
    17fa:	fe 4f       	sbci	r31, 0xFE	; 254
    17fc:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1800:	0e 94 10 03 	call	0x620	; 0x620 <tiny_dma_set_mode_0>
    1804:	e9 c2       	rjmp	.+1490   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1806:	0e 94 83 03 	call	0x706	; 0x706 <tiny_dma_set_mode_1>
    180a:	e6 c2       	rjmp	.+1484   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 2:
					tiny_dma_set_mode_2();
    180c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <tiny_dma_set_mode_2>
    1810:	e3 c2       	rjmp	.+1478   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1812:	66 d8       	rcall	.-3892   	; 0x8e0 <tiny_dma_set_mode_3>
    1814:	e1 c2       	rjmp	.+1474   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1816:	e0 d8       	rcall	.-3648   	; 0x9d8 <tiny_dma_set_mode_4>
    1818:	df c2       	rjmp	.+1470   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 5:
					tiny_dma_set_mode_5();
    181a:	54 d9       	rcall	.-3416   	; 0xac4 <tiny_dma_set_mode_5>
    181c:	dd c2       	rjmp	.+1466   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 6:
					tiny_dma_set_mode_6();
    181e:	9a d9       	rcall	.-3276   	; 0xb54 <tiny_dma_set_mode_6>
    1820:	db c2       	rjmp	.+1462   	; 0x1dd8 <udc_process_setup+0x702>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1822:	fa d9       	rcall	.-3084   	; 0xc18 <tiny_dma_set_mode_7>
    1824:	d9 c2       	rjmp	.+1458   	; 0x1dd8 <udc_process_setup+0x702>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1826:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    182a:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    182e:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1832:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <PSU_target>
    1836:	d0 c2       	rjmp	.+1440   	; 0x1dd8 <udc_process_setup+0x702>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1838:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    183c:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1840:	cb c2       	rjmp	.+1430   	; 0x1dd8 <udc_process_setup+0x702>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1842:	e0 91 60 24 	lds	r30, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1846:	f0 91 61 24 	lds	r31, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    184a:	e8 30       	cpi	r30, 0x08	; 8
    184c:	f1 05       	cpc	r31, r1
    184e:	08 f0       	brcs	.+2      	; 0x1852 <udc_process_setup+0x17c>
    1850:	5e c0       	rjmp	.+188    	; 0x190e <udc_process_setup+0x238>
    1852:	e2 5e       	subi	r30, 0xE2	; 226
    1854:	fe 4f       	sbci	r31, 0xFE	; 254
    1856:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	0e 94 94 02 	call	0x528	; 0x528 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1862:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1866:	0e 94 62 02 	call	0x4c4	; 0x4c4 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    186a:	0e 94 10 03 	call	0x620	; 0x620 <tiny_dma_set_mode_0>
    186e:	b4 c2       	rjmp	.+1384   	; 0x1dd8 <udc_process_setup+0x702>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0e 94 94 02 	call	0x528	; 0x528 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1878:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    187c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1880:	0e 94 83 03 	call	0x706	; 0x706 <tiny_dma_set_mode_1>
    1884:	a9 c2       	rjmp	.+1362   	; 0x1dd8 <udc_process_setup+0x702>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 94 02 	call	0x528	; 0x528 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    188e:	ce e5       	ldi	r28, 0x5E	; 94
    1890:	d4 e2       	ldi	r29, 0x24	; 36
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	0e 94 62 02 	call	0x4c4	; 0x4c4 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	0e 94 77 02 	call	0x4ee	; 0x4ee <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    189e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <tiny_dma_set_mode_2>
    18a2:	9a c2       	rjmp	.+1332   	; 0x1dd8 <udc_process_setup+0x702>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    18a4:	1d d8       	rcall	.-4038   	; 0x8e0 <tiny_dma_set_mode_3>
    18a6:	98 c2       	rjmp	.+1328   	; 0x1dd8 <udc_process_setup+0x702>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    18a8:	97 d8       	rcall	.-3794   	; 0x9d8 <tiny_dma_set_mode_4>
    18aa:	96 c2       	rjmp	.+1324   	; 0x1dd8 <udc_process_setup+0x702>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	0e 94 94 02 	call	0x528	; 0x528 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18b4:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    18b8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    18bc:	03 d9       	rcall	.-3578   	; 0xac4 <tiny_dma_set_mode_5>
    18be:	8c c2       	rjmp	.+1304   	; 0x1dd8 <udc_process_setup+0x702>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	0e 94 94 02 	call	0x528	; 0x528 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18c8:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    18cc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    18d0:	41 d9       	rcall	.-3454   	; 0xb54 <tiny_dma_set_mode_6>
    18d2:	82 c2       	rjmp	.+1284   	; 0x1dd8 <udc_process_setup+0x702>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    18d4:	62 e0       	ldi	r22, 0x02	; 2
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	0e 94 94 02 	call	0x528	; 0x528 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    18dc:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    18e0:	80 68       	ori	r24, 0x80	; 128
    18e2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    18e6:	98 d9       	rcall	.-3280   	; 0xc18 <tiny_dma_set_mode_7>
    18e8:	77 c2       	rjmp	.+1262   	; 0x1dd8 <udc_process_setup+0x702>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    18ea:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    18ee:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    18f2:	72 c2       	rjmp	.+1252   	; 0x1dd8 <udc_process_setup+0x702>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    18f4:	e9 e7       	ldi	r30, 0x79	; 121
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	88 ed       	ldi	r24, 0xD8	; 216
    18fc:	f8 94       	cli
    18fe:	84 bf       	out	0x34, r24	; 52
    1900:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <udc_process_setup+0x23a>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <udc_process_setup+0x23a>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <udc_process_setup+0x23a>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    190e:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1910:	81 11       	cpse	r24, r1
    1912:	65 c2       	rjmp	.+1226   	; 0x1dde <udc_process_setup+0x708>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1914:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    1918:	98 2f       	mov	r25, r24
    191a:	90 76       	andi	r25, 0x60	; 96
    191c:	09 f0       	breq	.+2      	; 0x1920 <udc_process_setup+0x24a>
    191e:	e1 c1       	rjmp	.+962    	; 0x1ce2 <udc_process_setup+0x60c>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1920:	88 23       	and	r24, r24
    1922:	0c f0       	brlt	.+2      	; 0x1926 <udc_process_setup+0x250>
    1924:	05 c1       	rjmp	.+522    	; 0x1b30 <udc_process_setup+0x45a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1926:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    192a:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    192e:	21 15       	cp	r18, r1
    1930:	31 05       	cpc	r19, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <udc_process_setup+0x260>
    1934:	d6 c1       	rjmp	.+940    	; 0x1ce2 <udc_process_setup+0x60c>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1936:	8f 71       	andi	r24, 0x1F	; 31
    1938:	09 f0       	breq	.+2      	; 0x193c <udc_process_setup+0x266>
    193a:	a3 c0       	rjmp	.+326    	; 0x1a82 <udc_process_setup+0x3ac>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    193c:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1940:	96 30       	cpi	r25, 0x06	; 6
    1942:	79 f0       	breq	.+30     	; 0x1962 <udc_process_setup+0x28c>
    1944:	98 30       	cpi	r25, 0x08	; 8
    1946:	09 f4       	brne	.+2      	; 0x194a <udc_process_setup+0x274>
    1948:	92 c0       	rjmp	.+292    	; 0x1a6e <udc_process_setup+0x398>
    194a:	91 11       	cpse	r25, r1
    194c:	9a c0       	rjmp	.+308    	; 0x1a82 <udc_process_setup+0x3ac>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	09 f0       	breq	.+2      	; 0x1956 <udc_process_setup+0x280>
    1954:	c6 c1       	rjmp	.+908    	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1956:	62 e0       	ldi	r22, 0x02	; 2
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	86 ec       	ldi	r24, 0xC6	; 198
    195c:	90 e2       	ldi	r25, 0x20	; 32
    195e:	ec d5       	rcall	.+3032   	; 0x2538 <udd_set_setup_payload>
    1960:	3d c2       	rjmp	.+1146   	; 0x1ddc <udc_process_setup+0x706>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1962:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1966:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    196a:	29 2f       	mov	r18, r25
    196c:	33 27       	eor	r19, r19
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	a9 f0       	breq	.+42     	; 0x199e <udc_process_setup+0x2c8>
    1974:	24 f4       	brge	.+8      	; 0x197e <udc_process_setup+0x2a8>
    1976:	21 30       	cpi	r18, 0x01	; 1
    1978:	31 05       	cpc	r19, r1
    197a:	41 f0       	breq	.+16     	; 0x198c <udc_process_setup+0x2b6>
    197c:	a9 c1       	rjmp	.+850    	; 0x1cd0 <udc_process_setup+0x5fa>
    197e:	23 30       	cpi	r18, 0x03	; 3
    1980:	31 05       	cpc	r19, r1
    1982:	d9 f1       	breq	.+118    	; 0x19fa <udc_process_setup+0x324>
    1984:	2f 30       	cpi	r18, 0x0F	; 15
    1986:	31 05       	cpc	r19, r1
    1988:	51 f1       	breq	.+84     	; 0x19de <udc_process_setup+0x308>
    198a:	a2 c1       	rjmp	.+836    	; 0x1cd0 <udc_process_setup+0x5fa>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    198c:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <udc_config>
    1990:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1994:	dc 01       	movw	r26, r24
    1996:	6c 91       	ld	r22, X
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	ce d5       	rcall	.+2972   	; 0x2538 <udd_set_setup_payload>
    199c:	59 c0       	rjmp	.+178    	; 0x1a50 <udc_process_setup+0x37a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    199e:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    19a2:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
    19a6:	21 89       	ldd	r18, Z+17	; 0x11
    19a8:	82 17       	cp	r24, r18
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <udc_process_setup+0x2d8>
    19ac:	9a c1       	rjmp	.+820    	; 0x1ce2 <udc_process_setup+0x60c>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    19ae:	99 27       	eor	r25, r25
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    19bc:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    19c0:	e8 0f       	add	r30, r24
    19c2:	f9 1f       	adc	r31, r25
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    19c8:	fc 01       	movw	r30, r24
    19ca:	62 81       	ldd	r22, Z+2	; 0x02
    19cc:	73 81       	ldd	r23, Z+3	; 0x03
    19ce:	b4 d5       	rcall	.+2920   	; 0x2538 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    19d0:	e0 91 66 24 	lds	r30, 0x2466	; 0x802466 <udd_g_ctrlreq+0x8>
    19d4:	f0 91 67 24 	lds	r31, 0x2467	; 0x802467 <udd_g_ctrlreq+0x9>
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	81 83       	std	Z+1, r24	; 0x01
    19dc:	39 c0       	rjmp	.+114    	; 0x1a50 <udc_process_setup+0x37a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    19de:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config+0x4>
    19e2:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x5>
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	09 f4       	brne	.+2      	; 0x19ec <udc_process_setup+0x316>
    19ea:	7b c1       	rjmp	.+758    	; 0x1ce2 <udc_process_setup+0x60c>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    19ec:	dc 01       	movw	r26, r24
    19ee:	12 96       	adiw	r26, 0x02	; 2
    19f0:	6d 91       	ld	r22, X+
    19f2:	7c 91       	ld	r23, X
    19f4:	13 97       	sbiw	r26, 0x03	; 3
    19f6:	a0 d5       	rcall	.+2880   	; 0x2538 <udd_set_setup_payload>
    19f8:	2b c0       	rjmp	.+86     	; 0x1a50 <udc_process_setup+0x37a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    19fa:	99 27       	eor	r25, r25
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 05       	cpc	r25, r1
    1a00:	71 f0       	breq	.+28     	; 0x1a1e <udc_process_setup+0x348>
    1a02:	38 f0       	brcs	.+14     	; 0x1a12 <udc_process_setup+0x33c>
    1a04:	02 97       	sbiw	r24, 0x02	; 2
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <udc_process_setup+0x334>
    1a08:	6c c1       	rjmp	.+728    	; 0x1ce2 <udc_process_setup+0x60c>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1a0a:	8a e8       	ldi	r24, 0x8A	; 138
    1a0c:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a0e:	28 e1       	ldi	r18, 0x18	; 24
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <udc_process_setup+0x34e>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a12:	64 e0       	ldi	r22, 0x04	; 4
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	8e ea       	ldi	r24, 0xAE	; 174
    1a18:	90 e2       	ldi	r25, 0x20	; 32
    1a1a:	8e d5       	rcall	.+2844   	; 0x2538 <udd_set_setup_payload>
    1a1c:	19 c0       	rjmp	.+50     	; 0x1a50 <udc_process_setup+0x37a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1a1e:	83 ea       	ldi	r24, 0xA3	; 163
    1a20:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a22:	29 e0       	ldi	r18, 0x09	; 9
    1a24:	38 2f       	mov	r19, r24
    1a26:	aa e5       	ldi	r26, 0x5A	; 90
    1a28:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a2a:	e8 2f       	mov	r30, r24
    1a2c:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1a2e:	81 91       	ld	r24, Z+
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	8d 93       	st	X+, r24
    1a34:	9d 93       	st	X+, r25
    1a36:	8e 2f       	mov	r24, r30
    1a38:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1a3a:	82 17       	cp	r24, r18
    1a3c:	c0 f3       	brcs	.-16     	; 0x1a2e <udc_process_setup+0x358>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1a3e:	62 2f       	mov	r22, r18
    1a40:	66 0f       	add	r22, r22
    1a42:	6e 5f       	subi	r22, 0xFE	; 254
    1a44:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	88 e5       	ldi	r24, 0x58	; 88
    1a4c:	90 e2       	ldi	r25, 0x20	; 32
    1a4e:	74 d5       	rcall	.+2792   	; 0x2538 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1a50:	ee e5       	ldi	r30, 0x5E	; 94
    1a52:	f4 e2       	ldi	r31, 0x24	; 36
    1a54:	86 81       	ldd	r24, Z+6	; 0x06
    1a56:	97 81       	ldd	r25, Z+7	; 0x07
    1a58:	22 85       	ldd	r18, Z+10	; 0x0a
    1a5a:	33 85       	ldd	r19, Z+11	; 0x0b
    1a5c:	82 17       	cp	r24, r18
    1a5e:	93 07       	cpc	r25, r19
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <udc_process_setup+0x38e>
    1a62:	bc c1       	rjmp	.+888    	; 0x1ddc <udc_process_setup+0x706>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1a64:	80 93 68 24 	sts	0x2468, r24	; 0x802468 <udd_g_ctrlreq+0xa>
    1a68:	90 93 69 24 	sts	0x2469, r25	; 0x802469 <udd_g_ctrlreq+0xb>
    1a6c:	b7 c1       	rjmp	.+878    	; 0x1ddc <udc_process_setup+0x706>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a6e:	21 30       	cpi	r18, 0x01	; 1
    1a70:	31 05       	cpc	r19, r1
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <udc_process_setup+0x3a0>
    1a74:	36 c1       	rjmp	.+620    	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	82 ec       	ldi	r24, 0xC2	; 194
    1a7c:	90 e2       	ldi	r25, 0x20	; 32
    1a7e:	5c d5       	rcall	.+2744   	; 0x2538 <udd_set_setup_payload>
    1a80:	ad c1       	rjmp	.+858    	; 0x1ddc <udc_process_setup+0x706>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	e1 f5       	brne	.+120    	; 0x1afe <udc_process_setup+0x428>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a86:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1a8a:	9a 30       	cpi	r25, 0x0A	; 10
    1a8c:	c1 f5       	brne	.+112    	; 0x1afe <udc_process_setup+0x428>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1a8e:	21 30       	cpi	r18, 0x01	; 1
    1a90:	31 05       	cpc	r19, r1
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <udc_process_setup+0x3c0>
    1a94:	26 c1       	rjmp	.+588    	; 0x1ce2 <udc_process_setup+0x60c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a96:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1a9a:	88 23       	and	r24, r24
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <udc_process_setup+0x3ca>
    1a9e:	21 c1       	rjmp	.+578    	; 0x1ce2 <udc_process_setup+0x60c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1aa0:	c0 91 62 24 	lds	r28, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1aa4:	d0 91 63 24 	lds	r29, 0x2463	; 0x802463 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1aa8:	00 91 c0 20 	lds	r16, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1aac:	10 91 c1 20 	lds	r17, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1ab0:	d8 01       	movw	r26, r16
    1ab2:	ed 91       	ld	r30, X+
    1ab4:	fc 91       	ld	r31, X
    1ab6:	84 81       	ldd	r24, Z+4	; 0x04
    1ab8:	c8 17       	cp	r28, r24
    1aba:	08 f0       	brcs	.+2      	; 0x1abe <udc_process_setup+0x3e8>
    1abc:	12 c1       	rjmp	.+548    	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	8c 2f       	mov	r24, r28
    1ac2:	ff dc       	rcall	.-1538   	; 0x14c2 <udc_update_iface_desc>
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <udc_process_setup+0x3f4>
    1ac8:	0c c1       	rjmp	.+536    	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1aca:	ce 01       	movw	r24, r28
    1acc:	99 27       	eor	r25, r25
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	d8 01       	movw	r26, r16
    1ad4:	12 96       	adiw	r26, 0x02	; 2
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	13 97       	sbiw	r26, 0x03	; 3
    1adc:	e8 0f       	add	r30, r24
    1ade:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1ae0:	01 90       	ld	r0, Z+
    1ae2:	f0 81       	ld	r31, Z
    1ae4:	e0 2d       	mov	r30, r0
    1ae6:	86 81       	ldd	r24, Z+6	; 0x06
    1ae8:	97 81       	ldd	r25, Z+7	; 0x07
    1aea:	fc 01       	movw	r30, r24
    1aec:	09 95       	icall
    1aee:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	84 ec       	ldi	r24, 0xC4	; 196
    1af8:	90 e2       	ldi	r25, 0x20	; 32
    1afa:	1e d5       	rcall	.+2620   	; 0x2538 <udd_set_setup_payload>
    1afc:	6f c1       	rjmp	.+734    	; 0x1ddc <udc_process_setup+0x706>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1afe:	82 30       	cpi	r24, 0x02	; 2
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <udc_process_setup+0x42e>
    1b02:	ef c0       	rjmp	.+478    	; 0x1ce2 <udc_process_setup+0x60c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b04:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1b08:	81 11       	cpse	r24, r1
    1b0a:	e4 c0       	rjmp	.+456    	; 0x1cd4 <udc_process_setup+0x5fe>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <udc_process_setup+0x43e>
    1b12:	e7 c0       	rjmp	.+462    	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1b14:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1b18:	8b d5       	rcall	.+2838   	; 0x2630 <udd_ep_is_halted>
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <udc_ep_status.5522>
    1b20:	90 93 bd 20 	sts	0x20BD, r25	; 0x8020bd <udc_ep_status.5522+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1b24:	62 e0       	ldi	r22, 0x02	; 2
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	8c eb       	ldi	r24, 0xBC	; 188
    1b2a:	90 e2       	ldi	r25, 0x20	; 32
    1b2c:	05 d5       	rcall	.+2570   	; 0x2538 <udd_set_setup_payload>
    1b2e:	56 c1       	rjmp	.+684    	; 0x1ddc <udc_process_setup+0x706>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b30:	8f 71       	andi	r24, 0x1F	; 31
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <udc_process_setup+0x460>
    1b34:	83 c0       	rjmp	.+262    	; 0x1c3c <udc_process_setup+0x566>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b36:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1b3a:	93 30       	cpi	r25, 0x03	; 3
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <udc_process_setup+0x46a>
    1b3e:	cc c0       	rjmp	.+408    	; 0x1cd8 <udc_process_setup+0x602>
    1b40:	18 f4       	brcc	.+6      	; 0x1b48 <udc_process_setup+0x472>
    1b42:	91 30       	cpi	r25, 0x01	; 1
    1b44:	a1 f0       	breq	.+40     	; 0x1b6e <udc_process_setup+0x498>
    1b46:	7a c0       	rjmp	.+244    	; 0x1c3c <udc_process_setup+0x566>
    1b48:	95 30       	cpi	r25, 0x05	; 5
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <udc_process_setup+0x47c>
    1b4c:	99 30       	cpi	r25, 0x09	; 9
    1b4e:	39 f1       	breq	.+78     	; 0x1b9e <udc_process_setup+0x4c8>
    1b50:	75 c0       	rjmp	.+234    	; 0x1c3c <udc_process_setup+0x566>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b52:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1b56:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1b5a:	89 2b       	or	r24, r25
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <udc_process_setup+0x48a>
    1b5e:	c1 c0       	rjmp	.+386    	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1b60:	8b e5       	ldi	r24, 0x5B	; 91
    1b62:	9a e0       	ldi	r25, 0x0A	; 10
    1b64:	80 93 6a 24 	sts	0x246A, r24	; 0x80246a <udd_g_ctrlreq+0xc>
    1b68:	90 93 6b 24 	sts	0x246B, r25	; 0x80246b <udd_g_ctrlreq+0xd>
    1b6c:	37 c1       	rjmp	.+622    	; 0x1ddc <udc_process_setup+0x706>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b6e:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1b72:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1b76:	89 2b       	or	r24, r25
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <udc_process_setup+0x4a6>
    1b7a:	b3 c0       	rjmp	.+358    	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b7c:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1b80:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <udc_process_setup+0x4b4>
    1b88:	ac c0       	rjmp	.+344    	; 0x1ce2 <udc_process_setup+0x60c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1b8a:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udc_device_status>
    1b8e:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <udc_device_status+0x1>
    1b92:	8d 7f       	andi	r24, 0xFD	; 253
    1b94:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udc_device_status>
    1b98:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <udc_device_status+0x1>
    1b9c:	1f c1       	rjmp	.+574    	; 0x1ddc <udc_process_setup+0x706>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1b9e:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1ba2:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1ba6:	89 2b       	or	r24, r25
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <udc_process_setup+0x4d6>
    1baa:	9b c0       	rjmp	.+310    	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1bac:	c2 d4       	rcall	.+2436   	; 0x2532 <udd_getaddress>
    1bae:	88 23       	and	r24, r24
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <udc_process_setup+0x4de>
    1bb2:	97 c0       	rjmp	.+302    	; 0x1ce2 <udc_process_setup+0x60c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1bb4:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1bb8:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1bbc:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1bbe:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    1bc2:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1bc6:	81 89       	ldd	r24, Z+17	; 0x11
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	82 17       	cp	r24, r18
    1bcc:	93 07       	cpc	r25, r19
    1bce:	08 f4       	brcc	.+2      	; 0x1bd2 <udc_process_setup+0x4fc>
    1bd0:	88 c0       	rjmp	.+272    	; 0x1ce2 <udc_process_setup+0x60c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1bd2:	2c dd       	rcall	.-1448   	; 0x162c <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1bd4:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1bd8:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1bdc:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1be0:	88 23       	and	r24, r24
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <udc_process_setup+0x510>
    1be4:	fb c0       	rjmp	.+502    	; 0x1ddc <udc_process_setup+0x706>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1be6:	99 27       	eor	r25, r25
    1be8:	81 50       	subi	r24, 0x01	; 1
    1bea:	90 4c       	sbci	r25, 0xC0	; 192
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    1bf8:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    1bfc:	e8 0f       	add	r30, r24
    1bfe:	f9 1f       	adc	r31, r25
    1c00:	e0 93 c0 20 	sts	0x20C0, r30	; 0x8020c0 <udc_ptr_conf>
    1c04:	f0 93 c1 20 	sts	0x20C1, r31	; 0x8020c1 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c08:	01 90       	ld	r0, Z+
    1c0a:	f0 81       	ld	r31, Z
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	84 81       	ldd	r24, Z+4	; 0x04
    1c10:	88 23       	and	r24, r24
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <udc_process_setup+0x540>
    1c14:	e3 c0       	rjmp	.+454    	; 0x1ddc <udc_process_setup+0x706>
    1c16:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	8c 2f       	mov	r24, r28
    1c1c:	ce dc       	rcall	.-1636   	; 0x15ba <udc_iface_enable>
    1c1e:	88 23       	and	r24, r24
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <udc_process_setup+0x54e>
    1c22:	5f c0       	rjmp	.+190    	; 0x1ce2 <udc_process_setup+0x60c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c24:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c26:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1c2a:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1c2e:	01 90       	ld	r0, Z+
    1c30:	f0 81       	ld	r31, Z
    1c32:	e0 2d       	mov	r30, r0
    1c34:	84 81       	ldd	r24, Z+4	; 0x04
    1c36:	c8 17       	cp	r28, r24
    1c38:	78 f3       	brcs	.-34     	; 0x1c18 <udc_process_setup+0x542>
    1c3a:	d0 c0       	rjmp	.+416    	; 0x1ddc <udc_process_setup+0x706>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	e1 f4       	brne	.+56     	; 0x1c78 <udc_process_setup+0x5a2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c40:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1c44:	9b 30       	cpi	r25, 0x0B	; 11
    1c46:	c1 f4       	brne	.+48     	; 0x1c78 <udc_process_setup+0x5a2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1c48:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1c4c:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1c50:	89 2b       	or	r24, r25
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <udc_process_setup+0x580>
    1c54:	46 c0       	rjmp	.+140    	; 0x1ce2 <udc_process_setup+0x60c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c56:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <udc_process_setup+0x58a>
    1c5e:	41 c0       	rjmp	.+130    	; 0x1ce2 <udc_process_setup+0x60c>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c60:	ee e5       	ldi	r30, 0x5E	; 94
    1c62:	f4 e2       	ldi	r31, 0x24	; 36
    1c64:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c66:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1c68:	8c 2f       	mov	r24, r28
    1c6a:	65 dc       	rcall	.-1846   	; 0x1536 <udc_iface_disable>
    1c6c:	88 23       	and	r24, r24
    1c6e:	c9 f1       	breq	.+114    	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1c70:	6d 2f       	mov	r22, r29
    1c72:	8c 2f       	mov	r24, r28
    1c74:	a2 dc       	rcall	.-1724   	; 0x15ba <udc_iface_enable>
    1c76:	33 c0       	rjmp	.+102    	; 0x1cde <udc_process_setup+0x608>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c78:	82 30       	cpi	r24, 0x02	; 2
    1c7a:	99 f5       	brne	.+102    	; 0x1ce2 <udc_process_setup+0x60c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c7c:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq+0x1>
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	19 f0       	breq	.+6      	; 0x1c8a <udc_process_setup+0x5b4>
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	89 f0       	breq	.+34     	; 0x1caa <udc_process_setup+0x5d4>
    1c88:	29 c0       	rjmp	.+82     	; 0x1cdc <udc_process_setup+0x606>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c8a:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1c8e:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1c92:	89 2b       	or	r24, r25
    1c94:	31 f5       	brne	.+76     	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c96:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1c9a:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1c9e:	89 2b       	or	r24, r25
    1ca0:	01 f5       	brne	.+64     	; 0x1ce2 <udc_process_setup+0x60c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ca2:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1ca6:	df d4       	rcall	.+2494   	; 0x2666 <udd_ep_clear_halt>
    1ca8:	1a c0       	rjmp	.+52     	; 0x1cde <udc_process_setup+0x608>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1caa:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1cae:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1cb2:	89 2b       	or	r24, r25
    1cb4:	b1 f4       	brne	.+44     	; 0x1ce2 <udc_process_setup+0x60c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cb6:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x2>
    1cba:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x3>
    1cbe:	89 2b       	or	r24, r25
    1cc0:	81 f4       	brne	.+32     	; 0x1ce2 <udc_process_setup+0x60c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cc2:	ce e5       	ldi	r28, 0x5E	; 94
    1cc4:	d4 e2       	ldi	r29, 0x24	; 36
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	bd d5       	rcall	.+2938   	; 0x2844 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ccc:	20 d6       	rcall	.+3136   	; 0x290e <udd_ep_set_halt>
    1cce:	07 c0       	rjmp	.+14     	; 0x1cde <udc_process_setup+0x608>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	05 c0       	rjmp	.+10     	; 0x1cde <udc_process_setup+0x608>
				break;
			}
		}
#endif
	}
	return false;
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	03 c0       	rjmp	.+6      	; 0x1cde <udc_process_setup+0x608>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <udc_process_setup+0x608>
				break;
			}
		}
#endif
	}
	return false;
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1cde:	81 11       	cpse	r24, r1
    1ce0:	7e c0       	rjmp	.+252    	; 0x1dde <udc_process_setup+0x708>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1ce2:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    1ce6:	8f 71       	andi	r24, 0x1F	; 31
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	71 f5       	brne	.+92     	; 0x1d48 <udc_process_setup+0x672>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1cec:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1cf0:	88 23       	and	r24, r24
    1cf2:	51 f1       	breq	.+84     	; 0x1d48 <udc_process_setup+0x672>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1cf4:	00 91 62 24 	lds	r16, 0x2462	; 0x802462 <udd_g_ctrlreq+0x4>
    1cf8:	10 91 63 24 	lds	r17, 0x2463	; 0x802463 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1cfc:	c0 91 c0 20 	lds	r28, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1d00:	d0 91 c1 20 	lds	r29, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1d04:	e8 81       	ld	r30, Y
    1d06:	f9 81       	ldd	r31, Y+1	; 0x01
    1d08:	84 81       	ldd	r24, Z+4	; 0x04
    1d0a:	08 17       	cp	r16, r24
    1d0c:	e8 f4       	brcc	.+58     	; 0x1d48 <udc_process_setup+0x672>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	80 2f       	mov	r24, r16
    1d12:	d7 db       	rcall	.-2130   	; 0x14c2 <udc_update_iface_desc>
    1d14:	88 23       	and	r24, r24
    1d16:	c1 f0       	breq	.+48     	; 0x1d48 <udc_process_setup+0x672>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d18:	f8 01       	movw	r30, r16
    1d1a:	ff 27       	eor	r31, r31
    1d1c:	cf 01       	movw	r24, r30
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	ea 81       	ldd	r30, Y+2	; 0x02
    1d24:	fb 81       	ldd	r31, Y+3	; 0x03
    1d26:	e8 0f       	add	r30, r24
    1d28:	f9 1f       	adc	r31, r25
    1d2a:	c0 81       	ld	r28, Z
    1d2c:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d2e:	ee 81       	ldd	r30, Y+6	; 0x06
    1d30:	ff 81       	ldd	r31, Y+7	; 0x07
    1d32:	09 95       	icall
    1d34:	68 2f       	mov	r22, r24
    1d36:	80 2f       	mov	r24, r16
    1d38:	c4 db       	rcall	.-2168   	; 0x14c2 <udc_update_iface_desc>
    1d3a:	88 23       	and	r24, r24
    1d3c:	29 f0       	breq	.+10     	; 0x1d48 <udc_process_setup+0x672>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1d3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d40:	fd 81       	ldd	r31, Y+5	; 0x05
    1d42:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1d44:	81 11       	cpse	r24, r1
    1d46:	4b c0       	rjmp	.+150    	; 0x1dde <udc_process_setup+0x708>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d48:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    1d4c:	8f 71       	andi	r24, 0x1F	; 31
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <udc_process_setup+0x67e>
    1d52:	40 c0       	rjmp	.+128    	; 0x1dd4 <udc_process_setup+0x6fe>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d54:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1d58:	88 23       	and	r24, r24
    1d5a:	b1 f1       	breq	.+108    	; 0x1dc8 <udc_process_setup+0x6f2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d5c:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1d60:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1d64:	ed 91       	ld	r30, X+
    1d66:	fc 91       	ld	r31, X
    1d68:	11 97       	sbiw	r26, 0x01	; 1
    1d6a:	84 81       	ldd	r24, Z+4	; 0x04
    1d6c:	88 23       	and	r24, r24
    1d6e:	71 f1       	breq	.+92     	; 0x1dcc <udc_process_setup+0x6f6>
    1d70:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d72:	ec 2f       	mov	r30, r28
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	ee 0f       	add	r30, r30
    1d78:	ff 1f       	adc	r31, r31
    1d7a:	12 96       	adiw	r26, 0x02	; 2
    1d7c:	8d 91       	ld	r24, X+
    1d7e:	9c 91       	ld	r25, X
    1d80:	13 97       	sbiw	r26, 0x03	; 3
    1d82:	e8 0f       	add	r30, r24
    1d84:	f9 1f       	adc	r31, r25
    1d86:	00 81       	ld	r16, Z
    1d88:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d8a:	d8 01       	movw	r26, r16
    1d8c:	16 96       	adiw	r26, 0x06	; 6
    1d8e:	ed 91       	ld	r30, X+
    1d90:	fc 91       	ld	r31, X
    1d92:	17 97       	sbiw	r26, 0x07	; 7
    1d94:	09 95       	icall
    1d96:	68 2f       	mov	r22, r24
    1d98:	8c 2f       	mov	r24, r28
    1d9a:	93 db       	rcall	.-2266   	; 0x14c2 <udc_update_iface_desc>
    1d9c:	88 23       	and	r24, r24
    1d9e:	f9 f0       	breq	.+62     	; 0x1dde <udc_process_setup+0x708>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1da0:	d8 01       	movw	r26, r16
    1da2:	14 96       	adiw	r26, 0x04	; 4
    1da4:	ed 91       	ld	r30, X+
    1da6:	fc 91       	ld	r31, X
    1da8:	15 97       	sbiw	r26, 0x05	; 5
    1daa:	09 95       	icall
    1dac:	81 11       	cpse	r24, r1
    1dae:	17 c0       	rjmp	.+46     	; 0x1dde <udc_process_setup+0x708>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1db0:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1db2:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1db6:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1dba:	ed 91       	ld	r30, X+
    1dbc:	fc 91       	ld	r31, X
    1dbe:	11 97       	sbiw	r26, 0x01	; 1
    1dc0:	94 81       	ldd	r25, Z+4	; 0x04
    1dc2:	c9 17       	cp	r28, r25
    1dc4:	b0 f2       	brcs	.-84     	; 0x1d72 <udc_process_setup+0x69c>
    1dc6:	0b c0       	rjmp	.+22     	; 0x1dde <udc_process_setup+0x708>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	09 c0       	rjmp	.+18     	; 0x1dde <udc_process_setup+0x708>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	07 c0       	rjmp	.+14     	; 0x1dde <udc_process_setup+0x708>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <udc_process_setup+0x708>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	03 c0       	rjmp	.+6      	; 0x1dde <udc_process_setup+0x708>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	01 c0       	rjmp	.+2      	; 0x1dde <udc_process_setup+0x708>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	08 95       	ret

00001de8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1de8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1dea:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1dec:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1dee:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1df0:	60 83       	st	Z, r22
	ret                             // Return to caller
    1df2:	08 95       	ret

00001df4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1df4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1df8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1dfa:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1dfc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1e00:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1e02:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1e06:	08 95       	ret

00001e08 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e08:	81 11       	cpse	r24, r1
    1e0a:	22 c0       	rjmp	.+68     	; 0x1e50 <udd_sleep_mode+0x48>
    1e0c:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1e10:	99 23       	and	r25, r25
    1e12:	d9 f0       	breq	.+54     	; 0x1e4a <udd_sleep_mode+0x42>
    1e14:	90 91 4b 2e 	lds	r25, 0x2E4B	; 0x802e4b <sleepmgr_locks+0x1>
    1e18:	91 11       	cpse	r25, r1
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <udd_sleep_mode+0x16>
    1e1c:	ff cf       	rjmp	.-2      	; 0x1e1c <udd_sleep_mode+0x14>
    1e1e:	2f b7       	in	r18, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	ea e4       	ldi	r30, 0x4A	; 74
    1e24:	fe e2       	ldi	r31, 0x2E	; 46
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	91 50       	subi	r25, 0x01	; 1
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	2f bf       	out	0x3f, r18	; 63
    1e2e:	0d c0       	rjmp	.+26     	; 0x1e4a <udd_sleep_mode+0x42>
    1e30:	90 91 4b 2e 	lds	r25, 0x2E4B	; 0x802e4b <sleepmgr_locks+0x1>
    1e34:	9f 3f       	cpi	r25, 0xFF	; 255
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <udd_sleep_mode+0x32>
    1e38:	ff cf       	rjmp	.-2      	; 0x1e38 <udd_sleep_mode+0x30>
    1e3a:	2f b7       	in	r18, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	ea e4       	ldi	r30, 0x4A	; 74
    1e40:	fe e2       	ldi	r31, 0x2E	; 46
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	9f 5f       	subi	r25, 0xFF	; 255
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	2f bf       	out	0x3f, r18	; 63
    1e4a:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <udd_b_idle>
    1e4e:	08 95       	ret
    1e50:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1e54:	99 23       	and	r25, r25
    1e56:	61 f3       	breq	.-40     	; 0x1e30 <udd_sleep_mode+0x28>
    1e58:	f8 cf       	rjmp	.-16     	; 0x1e4a <udd_sleep_mode+0x42>

00001e5a <udd_ctrl_init>:
    1e5a:	0f 93       	push	r16
    1e5c:	e8 ec       	ldi	r30, 0xC8	; 200
    1e5e:	f4 e0       	ldi	r31, 0x04	; 4
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 7d       	andi	r24, 0xDF	; 223
    1e64:	80 83       	st	Z, r24
    1e66:	80 81       	ld	r24, Z
    1e68:	8f 7d       	andi	r24, 0xDF	; 223
    1e6a:	80 83       	st	Z, r24
    1e6c:	ec e1       	ldi	r30, 0x1C	; 28
    1e6e:	f2 e2       	ldi	r31, 0x22	; 34
    1e70:	02 e0       	ldi	r16, 0x02	; 2
    1e72:	05 93       	las	Z, r16
    1e74:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1e78:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1e7c:	00 e2       	ldi	r16, 0x20	; 32
    1e7e:	06 93       	lac	Z, r16
    1e80:	00 e4       	ldi	r16, 0x40	; 64
    1e82:	06 93       	lac	Z, r16
    1e84:	e4 e1       	ldi	r30, 0x14	; 20
    1e86:	f2 e2       	ldi	r31, 0x22	; 34
    1e88:	00 e2       	ldi	r16, 0x20	; 32
    1e8a:	06 93       	lac	Z, r16
    1e8c:	00 e4       	ldi	r16, 0x40	; 64
    1e8e:	06 93       	lac	Z, r16
    1e90:	ee e5       	ldi	r30, 0x5E	; 94
    1e92:	f4 e2       	ldi	r31, 0x24	; 36
    1e94:	14 86       	std	Z+12, r1	; 0x0c
    1e96:	15 86       	std	Z+13, r1	; 0x0d
    1e98:	16 86       	std	Z+14, r1	; 0x0e
    1e9a:	17 86       	std	Z+15, r1	; 0x0f
    1e9c:	12 86       	std	Z+10, r1	; 0x0a
    1e9e:	13 86       	std	Z+11, r1	; 0x0b
    1ea0:	10 92 03 22 	sts	0x2203, r1	; 0x802203 <udd_ep_control_state>
    1ea4:	0f 91       	pop	r16
    1ea6:	08 95       	ret

00001ea8 <udd_ctrl_stall_data>:
    1ea8:	0f 93       	push	r16
    1eaa:	85 e0       	ldi	r24, 0x05	; 5
    1eac:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1eb0:	ed e1       	ldi	r30, 0x1D	; 29
    1eb2:	f2 e2       	ldi	r31, 0x22	; 34
    1eb4:	04 e0       	ldi	r16, 0x04	; 4
    1eb6:	05 93       	las	Z, r16
    1eb8:	e5 e1       	ldi	r30, 0x15	; 21
    1eba:	f2 e2       	ldi	r31, 0x22	; 34
    1ebc:	04 e0       	ldi	r16, 0x04	; 4
    1ebe:	05 93       	las	Z, r16
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <udd_ctrl_send_zlp_in>:
    1ec4:	0f 93       	push	r16
    1ec6:	83 e0       	ldi	r24, 0x03	; 3
    1ec8:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1ecc:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1ed0:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1ed4:	ec e1       	ldi	r30, 0x1C	; 28
    1ed6:	f2 e2       	ldi	r31, 0x22	; 34
    1ed8:	02 e0       	ldi	r16, 0x02	; 2
    1eda:	06 93       	lac	Z, r16
    1edc:	0f 91       	pop	r16
    1ede:	08 95       	ret

00001ee0 <udd_ctrl_endofrequest>:
    1ee0:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <udd_g_ctrlreq+0xc>
    1ee4:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <udd_g_ctrlreq+0xd>
    1ee8:	30 97       	sbiw	r30, 0x00	; 0
    1eea:	09 f0       	breq	.+2      	; 0x1eee <udd_ctrl_endofrequest+0xe>
    1eec:	09 95       	icall
    1eee:	08 95       	ret

00001ef0 <udd_ctrl_in_sent>:
    1ef0:	0f 93       	push	r16
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    1efa:	83 30       	cpi	r24, 0x03	; 3
    1efc:	19 f4       	brne	.+6      	; 0x1f04 <udd_ctrl_in_sent+0x14>
    1efe:	f0 df       	rcall	.-32     	; 0x1ee0 <udd_ctrl_endofrequest>
    1f00:	ac df       	rcall	.-168    	; 0x1e5a <udd_ctrl_init>
    1f02:	5e c0       	rjmp	.+188    	; 0x1fc0 <udd_ctrl_in_sent+0xd0>
    1f04:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1f08:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1f0c:	c0 91 68 24 	lds	r28, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    1f10:	d0 91 69 24 	lds	r29, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    1f14:	c8 1b       	sub	r28, r24
    1f16:	d9 0b       	sbc	r29, r25
    1f18:	71 f5       	brne	.+92     	; 0x1f76 <udd_ctrl_in_sent+0x86>
    1f1a:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    1f1e:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f22:	82 0f       	add	r24, r18
    1f24:	93 1f       	adc	r25, r19
    1f26:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    1f2a:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f2e:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    1f32:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    1f36:	82 17       	cp	r24, r18
    1f38:	93 07       	cpc	r25, r19
    1f3a:	21 f0       	breq	.+8      	; 0x1f44 <udd_ctrl_in_sent+0x54>
    1f3c:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b_shortpacket.5272>
    1f40:	88 23       	and	r24, r24
    1f42:	41 f0       	breq	.+16     	; 0x1f54 <udd_ctrl_in_sent+0x64>
    1f44:	84 e0       	ldi	r24, 0x04	; 4
    1f46:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    1f4a:	e4 e1       	ldi	r30, 0x14	; 20
    1f4c:	f2 e2       	ldi	r31, 0x22	; 34
    1f4e:	02 e0       	ldi	r16, 0x02	; 2
    1f50:	06 93       	lac	Z, r16
    1f52:	36 c0       	rjmp	.+108    	; 0x1fc0 <udd_ctrl_in_sent+0xd0>
    1f54:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <udd_g_ctrlreq+0xe>
    1f58:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <udd_g_ctrlreq+0xf>
    1f5c:	30 97       	sbiw	r30, 0x00	; 0
    1f5e:	99 f0       	breq	.+38     	; 0x1f86 <udd_ctrl_in_sent+0x96>
    1f60:	09 95       	icall
    1f62:	88 23       	and	r24, r24
    1f64:	81 f0       	breq	.+32     	; 0x1f86 <udd_ctrl_in_sent+0x96>
    1f66:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1f6a:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1f6e:	c0 91 68 24 	lds	r28, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    1f72:	d0 91 69 24 	lds	r29, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    1f76:	c0 34       	cpi	r28, 0x40	; 64
    1f78:	d1 05       	cpc	r29, r1
    1f7a:	28 f0       	brcs	.+10     	; 0x1f86 <udd_ctrl_in_sent+0x96>
    1f7c:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b_shortpacket.5272>
    1f80:	c0 e4       	ldi	r28, 0x40	; 64
    1f82:	d0 e0       	ldi	r29, 0x00	; 0
    1f84:	03 c0       	rjmp	.+6      	; 0x1f8c <udd_ctrl_in_sent+0x9c>
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <b_shortpacket.5272>
    1f8c:	e4 e0       	ldi	r30, 0x04	; 4
    1f8e:	f2 e2       	ldi	r31, 0x22	; 34
    1f90:	c2 8f       	std	Z+26, r28	; 0x1a
    1f92:	d3 8f       	std	Z+27, r29	; 0x1b
    1f94:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1f98:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1f9c:	20 91 66 24 	lds	r18, 0x2466	; 0x802466 <udd_g_ctrlreq+0x8>
    1fa0:	30 91 67 24 	lds	r19, 0x2467	; 0x802467 <udd_g_ctrlreq+0x9>
    1fa4:	28 0f       	add	r18, r24
    1fa6:	39 1f       	adc	r19, r25
    1fa8:	24 8f       	std	Z+28, r18	; 0x1c
    1faa:	35 8f       	std	Z+29, r19	; 0x1d
    1fac:	c8 0f       	add	r28, r24
    1fae:	d9 1f       	adc	r29, r25
    1fb0:	c0 93 ff 21 	sts	0x21FF, r28	; 0x8021ff <udd_ctrl_payload_nb_trans>
    1fb4:	d0 93 00 22 	sts	0x2200, r29	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    1fb8:	ec e1       	ldi	r30, 0x1C	; 28
    1fba:	f2 e2       	ldi	r31, 0x22	; 34
    1fbc:	02 e0       	ldi	r16, 0x02	; 2
    1fbe:	06 93       	lac	Z, r16
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	0f 91       	pop	r16
    1fc6:	08 95       	ret

00001fc8 <udd_ep_get_size>:
    1fc8:	fc 01       	movw	r30, r24
    1fca:	81 81       	ldd	r24, Z+1	; 0x01
    1fcc:	e8 2f       	mov	r30, r24
    1fce:	e7 70       	andi	r30, 0x07	; 7
    1fd0:	8e 2f       	mov	r24, r30
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	31 97       	sbiw	r30, 0x01	; 1
    1fd8:	e7 30       	cpi	r30, 0x07	; 7
    1fda:	f1 05       	cpc	r31, r1
    1fdc:	c0 f4       	brcc	.+48     	; 0x200e <udd_ep_get_size+0x46>
    1fde:	ea 5d       	subi	r30, 0xDA	; 218
    1fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe2:	7a c6       	rjmp	.+3316   	; 0x2cd8 <__tablejump2__>
    1fe4:	80 e1       	ldi	r24, 0x10	; 16
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	08 95       	ret
    1fea:	80 e2       	ldi	r24, 0x20	; 32
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	08 95       	ret
    1ff0:	80 e4       	ldi	r24, 0x40	; 64
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	08 95       	ret
    1ff6:	80 e8       	ldi	r24, 0x80	; 128
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	08 95       	ret
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	08 95       	ret
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	92 e0       	ldi	r25, 0x02	; 2
    2006:	08 95       	ret
    2008:	8f ef       	ldi	r24, 0xFF	; 255
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	08 95       	ret
    200e:	88 e0       	ldi	r24, 0x08	; 8
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	08 95       	ret

00002014 <udd_ep_get_job>:
    2014:	28 2f       	mov	r18, r24
    2016:	2f 70       	andi	r18, 0x0F	; 15
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	22 0f       	add	r18, r18
    201c:	33 1f       	adc	r19, r19
    201e:	08 2e       	mov	r0, r24
    2020:	00 0c       	add	r0, r0
    2022:	99 0b       	sbc	r25, r25
    2024:	88 27       	eor	r24, r24
    2026:	99 0f       	add	r25, r25
    2028:	88 1f       	adc	r24, r24
    202a:	99 27       	eor	r25, r25
    202c:	82 0f       	add	r24, r18
    202e:	93 1f       	adc	r25, r19
    2030:	02 97       	sbiw	r24, 0x02	; 2
    2032:	9c 01       	movw	r18, r24
    2034:	22 0f       	add	r18, r18
    2036:	33 1f       	adc	r19, r19
    2038:	22 0f       	add	r18, r18
    203a:	33 1f       	adc	r19, r19
    203c:	22 0f       	add	r18, r18
    203e:	33 1f       	adc	r19, r19
    2040:	82 0f       	add	r24, r18
    2042:	93 1f       	adc	r25, r19
    2044:	87 57       	subi	r24, 0x77	; 119
    2046:	9e 4d       	sbci	r25, 0xDE	; 222
    2048:	08 95       	ret

0000204a <udd_ctrl_interrupt_tc_setup>:
    204a:	0f 93       	push	r16
    204c:	cf 93       	push	r28
    204e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2052:	80 ff       	sbrs	r24, 0
    2054:	62 c0       	rjmp	.+196    	; 0x211a <udd_ctrl_interrupt_tc_setup+0xd0>
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    205c:	e4 e1       	ldi	r30, 0x14	; 20
    205e:	f2 e2       	ldi	r31, 0x22	; 34
    2060:	00 e8       	ldi	r16, 0x80	; 128
    2062:	06 93       	lac	Z, r16
    2064:	ec e1       	ldi	r30, 0x1C	; 28
    2066:	f2 e2       	ldi	r31, 0x22	; 34
    2068:	00 e8       	ldi	r16, 0x80	; 128
    206a:	06 93       	lac	Z, r16
    206c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2070:	e4 e1       	ldi	r30, 0x14	; 20
    2072:	f2 e2       	ldi	r31, 0x22	; 34
    2074:	00 e1       	ldi	r16, 0x10	; 16
    2076:	06 93       	lac	Z, r16
    2078:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    207c:	88 23       	and	r24, r24
    207e:	29 f0       	breq	.+10     	; 0x208a <udd_ctrl_interrupt_tc_setup+0x40>
    2080:	83 50       	subi	r24, 0x03	; 3
    2082:	82 30       	cpi	r24, 0x02	; 2
    2084:	08 f4       	brcc	.+2      	; 0x2088 <udd_ctrl_interrupt_tc_setup+0x3e>
    2086:	2c df       	rcall	.-424    	; 0x1ee0 <udd_ctrl_endofrequest>
    2088:	e8 de       	rcall	.-560    	; 0x1e5a <udd_ctrl_init>
    208a:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udd_sram+0x12>
    208e:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <udd_sram+0x13>
    2092:	08 97       	sbiw	r24, 0x08	; 8
    2094:	09 f0       	breq	.+2      	; 0x2098 <udd_ctrl_interrupt_tc_setup+0x4e>
    2096:	43 c0       	rjmp	.+134    	; 0x211e <udd_ctrl_interrupt_tc_setup+0xd4>
    2098:	88 e0       	ldi	r24, 0x08	; 8
    209a:	ef eb       	ldi	r30, 0xBF	; 191
    209c:	f1 e2       	ldi	r31, 0x21	; 33
    209e:	ae e5       	ldi	r26, 0x5E	; 94
    20a0:	b4 e2       	ldi	r27, 0x24	; 36
    20a2:	01 90       	ld	r0, Z+
    20a4:	0d 92       	st	X+, r0
    20a6:	8a 95       	dec	r24
    20a8:	e1 f7       	brne	.-8      	; 0x20a2 <udd_ctrl_interrupt_tc_setup+0x58>
    20aa:	e8 ec       	ldi	r30, 0xC8	; 200
    20ac:	f4 e0       	ldi	r31, 0x04	; 4
    20ae:	80 81       	ld	r24, Z
    20b0:	80 62       	ori	r24, 0x20	; 32
    20b2:	80 83       	st	Z, r24
    20b4:	80 81       	ld	r24, Z
    20b6:	80 62       	ori	r24, 0x20	; 32
    20b8:	80 83       	st	Z, r24
    20ba:	0d db       	rcall	.-2534   	; 0x16d6 <udc_process_setup>
    20bc:	c8 2f       	mov	r28, r24
    20be:	81 11       	cpse	r24, r1
    20c0:	03 c0       	rjmp	.+6      	; 0x20c8 <udd_ctrl_interrupt_tc_setup+0x7e>
    20c2:	f2 de       	rcall	.-540    	; 0x1ea8 <udd_ctrl_stall_data>
    20c4:	c1 e0       	ldi	r28, 0x01	; 1
    20c6:	2c c0       	rjmp	.+88     	; 0x2120 <udd_ctrl_interrupt_tc_setup+0xd6>
    20c8:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq>
    20cc:	88 23       	and	r24, r24
    20ce:	6c f4       	brge	.+26     	; 0x20ea <udd_ctrl_interrupt_tc_setup+0xa0>
    20d0:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    20d4:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    20d8:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    20dc:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    20e6:	04 df       	rcall	.-504    	; 0x1ef0 <udd_ctrl_in_sent>
    20e8:	1b c0       	rjmp	.+54     	; 0x2120 <udd_ctrl_interrupt_tc_setup+0xd6>
    20ea:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    20ee:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    20f2:	89 2b       	or	r24, r25
    20f4:	11 f4       	brne	.+4      	; 0x20fa <udd_ctrl_interrupt_tc_setup+0xb0>
    20f6:	e6 de       	rcall	.-564    	; 0x1ec4 <udd_ctrl_send_zlp_in>
    20f8:	13 c0       	rjmp	.+38     	; 0x2120 <udd_ctrl_interrupt_tc_setup+0xd6>
    20fa:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    20fe:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    2102:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2106:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
    2110:	e4 e1       	ldi	r30, 0x14	; 20
    2112:	f2 e2       	ldi	r31, 0x22	; 34
    2114:	02 e0       	ldi	r16, 0x02	; 2
    2116:	06 93       	lac	Z, r16
    2118:	03 c0       	rjmp	.+6      	; 0x2120 <udd_ctrl_interrupt_tc_setup+0xd6>
    211a:	c0 e0       	ldi	r28, 0x00	; 0
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <udd_ctrl_interrupt_tc_setup+0xd6>
    211e:	c1 e0       	ldi	r28, 0x01	; 1
    2120:	8c 2f       	mov	r24, r28
    2122:	cf 91       	pop	r28
    2124:	0f 91       	pop	r16
    2126:	08 95       	ret

00002128 <udd_ep_trans_complet>:
    2128:	8f 92       	push	r8
    212a:	9f 92       	push	r9
    212c:	af 92       	push	r10
    212e:	bf 92       	push	r11
    2130:	df 92       	push	r13
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	d8 2e       	mov	r13, r24
    2140:	69 df       	rcall	.-302    	; 0x2014 <udd_ep_get_job>
    2142:	8c 01       	movw	r16, r24
    2144:	bd 2c       	mov	r11, r13
    2146:	bb 1c       	adc	r11, r11
    2148:	bb 24       	eor	r11, r11
    214a:	bb 1c       	adc	r11, r11
    214c:	cd 2d       	mov	r28, r13
    214e:	cf 70       	andi	r28, 0x0F	; 15
    2150:	d0 e0       	ldi	r29, 0x00	; 0
    2152:	cc 0f       	add	r28, r28
    2154:	dd 1f       	adc	r29, r29
    2156:	cb 0d       	add	r28, r11
    2158:	d1 1d       	adc	r29, r1
    215a:	ce 01       	movw	r24, r28
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	9c 01       	movw	r18, r24
    216a:	2c 5e       	subi	r18, 0xEC	; 236
    216c:	3d 4d       	sbci	r19, 0xDD	; 221
    216e:	79 01       	movw	r14, r18
    2170:	c9 01       	movw	r24, r18
    2172:	2a df       	rcall	.-428    	; 0x1fc8 <udd_ep_get_size>
    2174:	4c 01       	movw	r8, r24
    2176:	bb 20       	and	r11, r11
    2178:	09 f4       	brne	.+2      	; 0x217c <udd_ep_trans_complet+0x54>
    217a:	70 c0       	rjmp	.+224    	; 0x225c <udd_ep_trans_complet+0x134>
    217c:	fe 01       	movw	r30, r28
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	ec 5f       	subi	r30, 0xFC	; 252
    218c:	fd 4d       	sbci	r31, 0xDD	; 221
    218e:	26 89       	ldd	r18, Z+22	; 0x16
    2190:	37 89       	ldd	r19, Z+23	; 0x17
    2192:	d8 01       	movw	r26, r16
    2194:	15 96       	adiw	r26, 0x05	; 5
    2196:	8d 91       	ld	r24, X+
    2198:	9c 91       	ld	r25, X
    219a:	16 97       	sbiw	r26, 0x06	; 6
    219c:	82 0f       	add	r24, r18
    219e:	93 1f       	adc	r25, r19
    21a0:	15 96       	adiw	r26, 0x05	; 5
    21a2:	8d 93       	st	X+, r24
    21a4:	9c 93       	st	X, r25
    21a6:	16 97       	sbiw	r26, 0x06	; 6
    21a8:	13 96       	adiw	r26, 0x03	; 3
    21aa:	2d 91       	ld	r18, X+
    21ac:	3c 91       	ld	r19, X
    21ae:	14 97       	sbiw	r26, 0x04	; 4
    21b0:	82 17       	cp	r24, r18
    21b2:	93 07       	cpc	r25, r19
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <udd_ep_trans_complet+0x90>
    21b6:	3c c0       	rjmp	.+120    	; 0x2230 <udd_ep_trans_complet+0x108>
    21b8:	28 1b       	sub	r18, r24
    21ba:	39 0b       	sbc	r19, r25
    21bc:	21 15       	cp	r18, r1
    21be:	b4 e0       	ldi	r27, 0x04	; 4
    21c0:	3b 07       	cpc	r19, r27
    21c2:	38 f0       	brcs	.+14     	; 0x21d2 <udd_ep_trans_complet+0xaa>
    21c4:	2f ef       	ldi	r18, 0xFF	; 255
    21c6:	33 e0       	ldi	r19, 0x03	; 3
    21c8:	c9 01       	movw	r24, r18
    21ca:	b4 01       	movw	r22, r8
    21cc:	71 d5       	rcall	.+2786   	; 0x2cb0 <__udivmodhi4>
    21ce:	28 1b       	sub	r18, r24
    21d0:	39 0b       	sbc	r19, r25
    21d2:	f8 01       	movw	r30, r16
    21d4:	80 81       	ld	r24, Z
    21d6:	81 ff       	sbrs	r24, 1
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <udd_ep_trans_complet+0xc4>
    21da:	c9 01       	movw	r24, r18
    21dc:	b4 01       	movw	r22, r8
    21de:	68 d5       	rcall	.+2768   	; 0x2cb0 <__udivmodhi4>
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	89 2b       	or	r24, r25
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <udd_ep_trans_complet+0xc0>
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	84 2f       	mov	r24, r20
    21ea:	01 c0       	rjmp	.+2      	; 0x21ee <udd_ep_trans_complet+0xc6>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	d8 01       	movw	r26, r16
    21f0:	9c 91       	ld	r25, X
    21f2:	80 fb       	bst	r24, 0
    21f4:	91 f9       	bld	r25, 1
    21f6:	9c 93       	st	X, r25
    21f8:	cc 0f       	add	r28, r28
    21fa:	dd 1f       	adc	r29, r29
    21fc:	cc 0f       	add	r28, r28
    21fe:	dd 1f       	adc	r29, r29
    2200:	cc 0f       	add	r28, r28
    2202:	dd 1f       	adc	r29, r29
    2204:	cc 5f       	subi	r28, 0xFC	; 252
    2206:	dd 4d       	sbci	r29, 0xDD	; 221
    2208:	1e 8a       	std	Y+22, r1	; 0x16
    220a:	1f 8a       	std	Y+23, r1	; 0x17
    220c:	2a 8b       	std	Y+18, r18	; 0x12
    220e:	3b 8b       	std	Y+19, r19	; 0x13
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	2d 91       	ld	r18, X+
    2214:	3c 91       	ld	r19, X
    2216:	12 97       	sbiw	r26, 0x02	; 2
    2218:	15 96       	adiw	r26, 0x05	; 5
    221a:	8d 91       	ld	r24, X+
    221c:	9c 91       	ld	r25, X
    221e:	16 97       	sbiw	r26, 0x06	; 6
    2220:	82 0f       	add	r24, r18
    2222:	93 1f       	adc	r25, r19
    2224:	8c 8b       	std	Y+20, r24	; 0x14
    2226:	9d 8b       	std	Y+21, r25	; 0x15
    2228:	f7 01       	movw	r30, r14
    222a:	02 e0       	ldi	r16, 0x02	; 2
    222c:	06 93       	lac	Z, r16
    222e:	ca c0       	rjmp	.+404    	; 0x23c4 <udd_ep_trans_complet+0x29c>
    2230:	d8 01       	movw	r26, r16
    2232:	8c 91       	ld	r24, X
    2234:	81 ff       	sbrs	r24, 1
    2236:	b3 c0       	rjmp	.+358    	; 0x239e <udd_ep_trans_complet+0x276>
    2238:	8d 7f       	andi	r24, 0xFD	; 253
    223a:	8c 93       	st	X, r24
    223c:	cc 0f       	add	r28, r28
    223e:	dd 1f       	adc	r29, r29
    2240:	cc 0f       	add	r28, r28
    2242:	dd 1f       	adc	r29, r29
    2244:	cc 0f       	add	r28, r28
    2246:	dd 1f       	adc	r29, r29
    2248:	cc 5f       	subi	r28, 0xFC	; 252
    224a:	dd 4d       	sbci	r29, 0xDD	; 221
    224c:	1e 8a       	std	Y+22, r1	; 0x16
    224e:	1f 8a       	std	Y+23, r1	; 0x17
    2250:	1a 8a       	std	Y+18, r1	; 0x12
    2252:	1b 8a       	std	Y+19, r1	; 0x13
    2254:	f7 01       	movw	r30, r14
    2256:	02 e0       	ldi	r16, 0x02	; 2
    2258:	06 93       	lac	Z, r16
    225a:	b4 c0       	rjmp	.+360    	; 0x23c4 <udd_ep_trans_complet+0x29c>
    225c:	fe 01       	movw	r30, r28
    225e:	ee 0f       	add	r30, r30
    2260:	ff 1f       	adc	r31, r31
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	ee 0f       	add	r30, r30
    2268:	ff 1f       	adc	r31, r31
    226a:	ec 5f       	subi	r30, 0xFC	; 252
    226c:	fd 4d       	sbci	r31, 0xDD	; 221
    226e:	a2 88       	ldd	r10, Z+18	; 0x12
    2270:	b3 88       	ldd	r11, Z+19	; 0x13
    2272:	d8 01       	movw	r26, r16
    2274:	8c 91       	ld	r24, X
    2276:	82 ff       	sbrs	r24, 2
    2278:	19 c0       	rjmp	.+50     	; 0x22ac <udd_ep_trans_complet+0x184>
    227a:	11 96       	adiw	r26, 0x01	; 1
    227c:	ed 91       	ld	r30, X+
    227e:	fc 91       	ld	r31, X
    2280:	12 97       	sbiw	r26, 0x02	; 2
    2282:	15 96       	adiw	r26, 0x05	; 5
    2284:	2d 91       	ld	r18, X+
    2286:	3c 91       	ld	r19, X
    2288:	16 97       	sbiw	r26, 0x06	; 6
    228a:	13 96       	adiw	r26, 0x03	; 3
    228c:	8d 91       	ld	r24, X+
    228e:	9c 91       	ld	r25, X
    2290:	14 97       	sbiw	r26, 0x04	; 4
    2292:	b4 01       	movw	r22, r8
    2294:	0d d5       	rcall	.+2586   	; 0x2cb0 <__udivmodhi4>
    2296:	b0 e4       	ldi	r27, 0x40	; 64
    2298:	db 9e       	mul	r13, r27
    229a:	b0 01       	movw	r22, r0
    229c:	11 24       	eor	r1, r1
    229e:	67 57       	subi	r22, 0x77	; 119
    22a0:	7f 4d       	sbci	r23, 0xDF	; 223
    22a2:	ac 01       	movw	r20, r24
    22a4:	cf 01       	movw	r24, r30
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	1c d5       	rcall	.+2616   	; 0x2ce4 <memcpy>
    22ac:	f8 01       	movw	r30, r16
    22ae:	25 81       	ldd	r18, Z+5	; 0x05
    22b0:	36 81       	ldd	r19, Z+6	; 0x06
    22b2:	2a 0d       	add	r18, r10
    22b4:	3b 1d       	adc	r19, r11
    22b6:	25 83       	std	Z+5, r18	; 0x05
    22b8:	36 83       	std	Z+6, r19	; 0x06
    22ba:	83 81       	ldd	r24, Z+3	; 0x03
    22bc:	94 81       	ldd	r25, Z+4	; 0x04
    22be:	82 17       	cp	r24, r18
    22c0:	93 07       	cpc	r25, r19
    22c2:	68 f4       	brcc	.+26     	; 0x22de <udd_ep_trans_complet+0x1b6>
    22c4:	85 83       	std	Z+5, r24	; 0x05
    22c6:	96 83       	std	Z+6, r25	; 0x06
    22c8:	cc 0f       	add	r28, r28
    22ca:	dd 1f       	adc	r29, r29
    22cc:	cc 0f       	add	r28, r28
    22ce:	dd 1f       	adc	r29, r29
    22d0:	cc 0f       	add	r28, r28
    22d2:	dd 1f       	adc	r29, r29
    22d4:	cc 5f       	subi	r28, 0xFC	; 252
    22d6:	dd 4d       	sbci	r29, 0xDD	; 221
    22d8:	8e 89       	ldd	r24, Y+22	; 0x16
    22da:	9f 89       	ldd	r25, Y+23	; 0x17
    22dc:	60 c0       	rjmp	.+192    	; 0x239e <udd_ep_trans_complet+0x276>
    22de:	fe 01       	movw	r30, r28
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	ee 0f       	add	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	ee 0f       	add	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	ec 5f       	subi	r30, 0xFC	; 252
    22ee:	fd 4d       	sbci	r31, 0xDD	; 221
    22f0:	46 89       	ldd	r20, Z+22	; 0x16
    22f2:	57 89       	ldd	r21, Z+23	; 0x17
    22f4:	4a 15       	cp	r20, r10
    22f6:	5b 05       	cpc	r21, r11
    22f8:	09 f0       	breq	.+2      	; 0x22fc <udd_ep_trans_complet+0x1d4>
    22fa:	51 c0       	rjmp	.+162    	; 0x239e <udd_ep_trans_complet+0x276>
    22fc:	28 17       	cp	r18, r24
    22fe:	39 07       	cpc	r19, r25
    2300:	09 f4       	brne	.+2      	; 0x2304 <udd_ep_trans_complet+0x1dc>
    2302:	4d c0       	rjmp	.+154    	; 0x239e <udd_ep_trans_complet+0x276>
    2304:	ac 01       	movw	r20, r24
    2306:	42 1b       	sub	r20, r18
    2308:	53 0b       	sbc	r21, r19
    230a:	9a 01       	movw	r18, r20
    230c:	21 15       	cp	r18, r1
    230e:	54 e0       	ldi	r21, 0x04	; 4
    2310:	35 07       	cpc	r19, r21
    2312:	50 f0       	brcs	.+20     	; 0x2328 <udd_ep_trans_complet+0x200>
    2314:	2f ef       	ldi	r18, 0xFF	; 255
    2316:	33 e0       	ldi	r19, 0x03	; 3
    2318:	c9 01       	movw	r24, r18
    231a:	b4 01       	movw	r22, r8
    231c:	c9 d4       	rcall	.+2450   	; 0x2cb0 <__udivmodhi4>
    231e:	d9 01       	movw	r26, r18
    2320:	a8 1b       	sub	r26, r24
    2322:	b9 0b       	sbc	r27, r25
    2324:	cd 01       	movw	r24, r26
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <udd_ep_trans_complet+0x20e>
    2328:	c9 01       	movw	r24, r18
    232a:	b4 01       	movw	r22, r8
    232c:	c1 d4       	rcall	.+2434   	; 0x2cb0 <__udivmodhi4>
    232e:	f9 01       	movw	r30, r18
    2330:	e8 1b       	sub	r30, r24
    2332:	f9 0b       	sbc	r31, r25
    2334:	cf 01       	movw	r24, r30
    2336:	fe 01       	movw	r30, r28
    2338:	ee 0f       	add	r30, r30
    233a:	ff 1f       	adc	r31, r31
    233c:	ee 0f       	add	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	ee 0f       	add	r30, r30
    2342:	ff 1f       	adc	r31, r31
    2344:	ec 5f       	subi	r30, 0xFC	; 252
    2346:	fd 4d       	sbci	r31, 0xDD	; 221
    2348:	12 8a       	std	Z+18, r1	; 0x12
    234a:	13 8a       	std	Z+19, r1	; 0x13
    234c:	88 15       	cp	r24, r8
    234e:	99 05       	cpc	r25, r9
    2350:	78 f4       	brcc	.+30     	; 0x2370 <udd_ep_trans_complet+0x248>
    2352:	d8 01       	movw	r26, r16
    2354:	8c 91       	ld	r24, X
    2356:	84 60       	ori	r24, 0x04	; 4
    2358:	8c 93       	st	X, r24
    235a:	b0 e4       	ldi	r27, 0x40	; 64
    235c:	db 9e       	mul	r13, r27
    235e:	c0 01       	movw	r24, r0
    2360:	11 24       	eor	r1, r1
    2362:	87 57       	subi	r24, 0x77	; 119
    2364:	9f 4d       	sbci	r25, 0xDF	; 223
    2366:	84 8b       	std	Z+20, r24	; 0x14
    2368:	95 8b       	std	Z+21, r25	; 0x15
    236a:	86 8a       	std	Z+22, r8	; 0x16
    236c:	97 8a       	std	Z+23, r9	; 0x17
    236e:	13 c0       	rjmp	.+38     	; 0x2396 <udd_ep_trans_complet+0x26e>
    2370:	f8 01       	movw	r30, r16
    2372:	41 81       	ldd	r20, Z+1	; 0x01
    2374:	52 81       	ldd	r21, Z+2	; 0x02
    2376:	25 81       	ldd	r18, Z+5	; 0x05
    2378:	36 81       	ldd	r19, Z+6	; 0x06
    237a:	24 0f       	add	r18, r20
    237c:	35 1f       	adc	r19, r21
    237e:	cc 0f       	add	r28, r28
    2380:	dd 1f       	adc	r29, r29
    2382:	cc 0f       	add	r28, r28
    2384:	dd 1f       	adc	r29, r29
    2386:	cc 0f       	add	r28, r28
    2388:	dd 1f       	adc	r29, r29
    238a:	cc 5f       	subi	r28, 0xFC	; 252
    238c:	dd 4d       	sbci	r29, 0xDD	; 221
    238e:	2c 8b       	std	Y+20, r18	; 0x14
    2390:	3d 8b       	std	Y+21, r19	; 0x15
    2392:	8e 8b       	std	Y+22, r24	; 0x16
    2394:	9f 8b       	std	Y+23, r25	; 0x17
    2396:	f7 01       	movw	r30, r14
    2398:	02 e0       	ldi	r16, 0x02	; 2
    239a:	06 93       	lac	Z, r16
    239c:	13 c0       	rjmp	.+38     	; 0x23c4 <udd_ep_trans_complet+0x29c>
    239e:	d8 01       	movw	r26, r16
    23a0:	8c 91       	ld	r24, X
    23a2:	80 ff       	sbrs	r24, 0
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <udd_ep_trans_complet+0x29c>
    23a6:	8e 7f       	andi	r24, 0xFE	; 254
    23a8:	8c 93       	st	X, r24
    23aa:	17 96       	adiw	r26, 0x07	; 7
    23ac:	ed 91       	ld	r30, X+
    23ae:	fc 91       	ld	r31, X
    23b0:	18 97       	sbiw	r26, 0x08	; 8
    23b2:	30 97       	sbiw	r30, 0x00	; 0
    23b4:	39 f0       	breq	.+14     	; 0x23c4 <udd_ep_trans_complet+0x29c>
    23b6:	15 96       	adiw	r26, 0x05	; 5
    23b8:	6d 91       	ld	r22, X+
    23ba:	7c 91       	ld	r23, X
    23bc:	16 97       	sbiw	r26, 0x06	; 6
    23be:	4d 2d       	mov	r20, r13
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	09 95       	icall
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	df 90       	pop	r13
    23d2:	bf 90       	pop	r11
    23d4:	af 90       	pop	r10
    23d6:	9f 90       	pop	r9
    23d8:	8f 90       	pop	r8
    23da:	08 95       	ret

000023dc <udd_attach>:
    23dc:	cf 93       	push	r28
    23de:	cf b7       	in	r28, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	11 dd       	rcall	.-1502   	; 0x1e08 <udd_sleep_mode>
    23e6:	ea ec       	ldi	r30, 0xCA	; 202
    23e8:	f4 e0       	ldi	r31, 0x04	; 4
    23ea:	80 e4       	ldi	r24, 0x40	; 64
    23ec:	80 83       	st	Z, r24
    23ee:	80 e2       	ldi	r24, 0x20	; 32
    23f0:	80 83       	st	Z, r24
    23f2:	e1 ec       	ldi	r30, 0xC1	; 193
    23f4:	f4 e0       	ldi	r31, 0x04	; 4
    23f6:	80 81       	ld	r24, Z
    23f8:	81 60       	ori	r24, 0x01	; 1
    23fa:	80 83       	st	Z, r24
    23fc:	a9 ec       	ldi	r26, 0xC9	; 201
    23fe:	b4 e0       	ldi	r27, 0x04	; 4
    2400:	8c 91       	ld	r24, X
    2402:	82 60       	ori	r24, 0x02	; 2
    2404:	8c 93       	st	X, r24
    2406:	e8 ec       	ldi	r30, 0xC8	; 200
    2408:	f4 e0       	ldi	r31, 0x04	; 4
    240a:	80 81       	ld	r24, Z
    240c:	80 64       	ori	r24, 0x40	; 64
    240e:	80 83       	st	Z, r24
    2410:	8c 91       	ld	r24, X
    2412:	81 60       	ori	r24, 0x01	; 1
    2414:	8c 93       	st	X, r24
    2416:	80 81       	ld	r24, Z
    2418:	80 68       	ori	r24, 0x80	; 128
    241a:	80 83       	st	Z, r24
    241c:	cf bf       	out	0x3f, r28	; 63
    241e:	cf 91       	pop	r28
    2420:	08 95       	ret

00002422 <udd_enable>:
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	c0 e6       	ldi	r28, 0x60	; 96
    2428:	d0 e0       	ldi	r29, 0x00	; 0
    242a:	18 82       	st	Y, r1
    242c:	80 e3       	ldi	r24, 0x30	; 48
    242e:	0e 94 94 09 	call	0x1328	; 0x1328 <sysclk_enable_usb>
    2432:	e0 ec       	ldi	r30, 0xC0	; 192
    2434:	f4 e0       	ldi	r31, 0x04	; 4
    2436:	80 81       	ld	r24, Z
    2438:	80 64       	ori	r24, 0x40	; 64
    243a:	80 83       	st	Z, r24
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	88 83       	st	Y, r24
    2440:	cf b7       	in	r28, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	fc 01       	movw	r30, r24
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	ec 5f       	subi	r30, 0xFC	; 252
    2458:	fd 4d       	sbci	r31, 0xDD	; 221
    245a:	11 8a       	std	Z+17, r1	; 0x11
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	88 30       	cpi	r24, 0x08	; 8
    2460:	91 05       	cpc	r25, r1
    2462:	91 f7       	brne	.-28     	; 0x2448 <udd_enable+0x26>
    2464:	e9 e8       	ldi	r30, 0x89	; 137
    2466:	f1 e2       	ldi	r31, 0x21	; 33
    2468:	80 81       	ld	r24, Z
    246a:	8e 7f       	andi	r24, 0xFE	; 254
    246c:	80 83       	st	Z, r24
    246e:	e2 e9       	ldi	r30, 0x92	; 146
    2470:	f1 e2       	ldi	r31, 0x21	; 33
    2472:	80 81       	ld	r24, Z
    2474:	8e 7f       	andi	r24, 0xFE	; 254
    2476:	80 83       	st	Z, r24
    2478:	eb e9       	ldi	r30, 0x9B	; 155
    247a:	f1 e2       	ldi	r31, 0x21	; 33
    247c:	80 81       	ld	r24, Z
    247e:	8e 7f       	andi	r24, 0xFE	; 254
    2480:	80 83       	st	Z, r24
    2482:	e4 ea       	ldi	r30, 0xA4	; 164
    2484:	f1 e2       	ldi	r31, 0x21	; 33
    2486:	80 81       	ld	r24, Z
    2488:	8e 7f       	andi	r24, 0xFE	; 254
    248a:	80 83       	st	Z, r24
    248c:	ed ea       	ldi	r30, 0xAD	; 173
    248e:	f1 e2       	ldi	r31, 0x21	; 33
    2490:	80 81       	ld	r24, Z
    2492:	8e 7f       	andi	r24, 0xFE	; 254
    2494:	80 83       	st	Z, r24
    2496:	e6 eb       	ldi	r30, 0xB6	; 182
    2498:	f1 e2       	ldi	r31, 0x21	; 33
    249a:	80 81       	ld	r24, Z
    249c:	8e 7f       	andi	r24, 0xFE	; 254
    249e:	80 83       	st	Z, r24
    24a0:	6a e1       	ldi	r22, 0x1A	; 26
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	a6 dc       	rcall	.-1716   	; 0x1df4 <nvm_read_byte>
    24a8:	8f 3f       	cpi	r24, 0xFF	; 255
    24aa:	19 f0       	breq	.+6      	; 0x24b2 <udd_enable+0x90>
    24ac:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    24b0:	03 c0       	rjmp	.+6      	; 0x24b8 <udd_enable+0x96>
    24b2:	8f e1       	ldi	r24, 0x1F	; 31
    24b4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    24b8:	6b e1       	ldi	r22, 0x1B	; 27
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	9a dc       	rcall	.-1740   	; 0x1df4 <nvm_read_byte>
    24c0:	8f 3f       	cpi	r24, 0xFF	; 255
    24c2:	19 f0       	breq	.+6      	; 0x24ca <udd_enable+0xa8>
    24c4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <udd_enable+0xae>
    24ca:	8f e1       	ldi	r24, 0x1F	; 31
    24cc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    24d0:	e0 ec       	ldi	r30, 0xC0	; 192
    24d2:	f4 e0       	ldi	r31, 0x04	; 4
    24d4:	80 81       	ld	r24, Z
    24d6:	83 60       	ori	r24, 0x03	; 3
    24d8:	80 83       	st	Z, r24
    24da:	80 81       	ld	r24, Z
    24dc:	80 68       	ori	r24, 0x80	; 128
    24de:	80 83       	st	Z, r24
    24e0:	80 81       	ld	r24, Z
    24e2:	80 61       	ori	r24, 0x10	; 16
    24e4:	80 83       	st	Z, r24
    24e6:	84 e1       	ldi	r24, 0x14	; 20
    24e8:	92 e2       	ldi	r25, 0x22	; 34
    24ea:	86 83       	std	Z+6, r24	; 0x06
    24ec:	97 83       	std	Z+7, r25	; 0x07
    24ee:	80 81       	ld	r24, Z
    24f0:	80 62       	ori	r24, 0x20	; 32
    24f2:	80 83       	st	Z, r24
    24f4:	8f ef       	ldi	r24, 0xFF	; 255
    24f6:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    24fa:	e8 ec       	ldi	r30, 0xC8	; 200
    24fc:	f4 e0       	ldi	r31, 0x04	; 4
    24fe:	80 81       	ld	r24, Z
    2500:	82 60       	ori	r24, 0x02	; 2
    2502:	80 83       	st	Z, r24
    2504:	10 92 58 22 	sts	0x2258, r1	; 0x802258 <udd_b_idle>
    2508:	80 91 4f 2e 	lds	r24, 0x2E4F	; 0x802e4f <sleepmgr_locks+0x5>
    250c:	8f 3f       	cpi	r24, 0xFF	; 255
    250e:	09 f4       	brne	.+2      	; 0x2512 <udd_enable+0xf0>
    2510:	ff cf       	rjmp	.-2      	; 0x2510 <udd_enable+0xee>
    2512:	9f b7       	in	r25, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	ea e4       	ldi	r30, 0x4A	; 74
    2518:	fe e2       	ldi	r31, 0x2E	; 46
    251a:	85 81       	ldd	r24, Z+5	; 0x05
    251c:	8f 5f       	subi	r24, 0xFF	; 255
    251e:	85 83       	std	Z+5, r24	; 0x05
    2520:	9f bf       	out	0x3f, r25	; 63
    2522:	5c df       	rcall	.-328    	; 0x23dc <udd_attach>
    2524:	cf bf       	out	0x3f, r28	; 63
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	08 95       	ret

0000252c <udd_set_address>:
    252c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2530:	08 95       	ret

00002532 <udd_getaddress>:
    2532:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2536:	08 95       	ret

00002538 <udd_set_setup_payload>:
    2538:	ee e5       	ldi	r30, 0x5E	; 94
    253a:	f4 e2       	ldi	r31, 0x24	; 36
    253c:	80 87       	std	Z+8, r24	; 0x08
    253e:	91 87       	std	Z+9, r25	; 0x09
    2540:	62 87       	std	Z+10, r22	; 0x0a
    2542:	73 87       	std	Z+11, r23	; 0x0b
    2544:	08 95       	ret

00002546 <udd_ep_alloc>:
    2546:	28 2f       	mov	r18, r24
    2548:	2f 70       	andi	r18, 0x0F	; 15
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	22 0f       	add	r18, r18
    254e:	33 1f       	adc	r19, r19
    2550:	08 2e       	mov	r0, r24
    2552:	00 0c       	add	r0, r0
    2554:	99 0b       	sbc	r25, r25
    2556:	88 27       	eor	r24, r24
    2558:	99 0f       	add	r25, r25
    255a:	88 1f       	adc	r24, r24
    255c:	99 27       	eor	r25, r25
    255e:	82 0f       	add	r24, r18
    2560:	93 1f       	adc	r25, r19
    2562:	fc 01       	movw	r30, r24
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	ee 0f       	add	r30, r30
    256e:	ff 1f       	adc	r31, r31
    2570:	ec 5f       	subi	r30, 0xFC	; 252
    2572:	fd 4d       	sbci	r31, 0xDD	; 221
    2574:	21 89       	ldd	r18, Z+17	; 0x11
    2576:	20 7c       	andi	r18, 0xC0	; 192
    2578:	09 f0       	breq	.+2      	; 0x257c <udd_ep_alloc+0x36>
    257a:	58 c0       	rjmp	.+176    	; 0x262c <udd_ep_alloc+0xe6>
    257c:	63 70       	andi	r22, 0x03	; 3
    257e:	61 30       	cpi	r22, 0x01	; 1
    2580:	11 f0       	breq	.+4      	; 0x2586 <udd_ep_alloc+0x40>
    2582:	18 f4       	brcc	.+6      	; 0x258a <udd_ep_alloc+0x44>
    2584:	04 c0       	rjmp	.+8      	; 0x258e <udd_ep_alloc+0x48>
    2586:	20 ec       	ldi	r18, 0xC0	; 192
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <udd_ep_alloc+0x4a>
    258a:	20 e8       	ldi	r18, 0x80	; 128
    258c:	01 c0       	rjmp	.+2      	; 0x2590 <udd_ep_alloc+0x4a>
    258e:	20 e4       	ldi	r18, 0x40	; 64
    2590:	40 38       	cpi	r20, 0x80	; 128
    2592:	51 05       	cpc	r21, r1
    2594:	e9 f0       	breq	.+58     	; 0x25d0 <udd_ep_alloc+0x8a>
    2596:	50 f4       	brcc	.+20     	; 0x25ac <udd_ep_alloc+0x66>
    2598:	40 32       	cpi	r20, 0x20	; 32
    259a:	51 05       	cpc	r21, r1
    259c:	a9 f0       	breq	.+42     	; 0x25c8 <udd_ep_alloc+0x82>
    259e:	40 34       	cpi	r20, 0x40	; 64
    25a0:	51 05       	cpc	r21, r1
    25a2:	a1 f0       	breq	.+40     	; 0x25cc <udd_ep_alloc+0x86>
    25a4:	40 31       	cpi	r20, 0x10	; 16
    25a6:	51 05       	cpc	r21, r1
    25a8:	d9 f4       	brne	.+54     	; 0x25e0 <udd_ep_alloc+0x9a>
    25aa:	0c c0       	rjmp	.+24     	; 0x25c4 <udd_ep_alloc+0x7e>
    25ac:	41 15       	cp	r20, r1
    25ae:	32 e0       	ldi	r19, 0x02	; 2
    25b0:	53 07       	cpc	r21, r19
    25b2:	91 f0       	breq	.+36     	; 0x25d8 <udd_ep_alloc+0x92>
    25b4:	4f 3f       	cpi	r20, 0xFF	; 255
    25b6:	33 e0       	ldi	r19, 0x03	; 3
    25b8:	53 07       	cpc	r21, r19
    25ba:	81 f0       	breq	.+32     	; 0x25dc <udd_ep_alloc+0x96>
    25bc:	41 15       	cp	r20, r1
    25be:	51 40       	sbci	r21, 0x01	; 1
    25c0:	79 f4       	brne	.+30     	; 0x25e0 <udd_ep_alloc+0x9a>
    25c2:	08 c0       	rjmp	.+16     	; 0x25d4 <udd_ep_alloc+0x8e>
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	0d c0       	rjmp	.+26     	; 0x25e2 <udd_ep_alloc+0x9c>
    25c8:	42 e0       	ldi	r20, 0x02	; 2
    25ca:	0b c0       	rjmp	.+22     	; 0x25e2 <udd_ep_alloc+0x9c>
    25cc:	43 e0       	ldi	r20, 0x03	; 3
    25ce:	09 c0       	rjmp	.+18     	; 0x25e2 <udd_ep_alloc+0x9c>
    25d0:	44 e0       	ldi	r20, 0x04	; 4
    25d2:	07 c0       	rjmp	.+14     	; 0x25e2 <udd_ep_alloc+0x9c>
    25d4:	45 e0       	ldi	r20, 0x05	; 5
    25d6:	05 c0       	rjmp	.+10     	; 0x25e2 <udd_ep_alloc+0x9c>
    25d8:	46 e0       	ldi	r20, 0x06	; 6
    25da:	03 c0       	rjmp	.+6      	; 0x25e2 <udd_ep_alloc+0x9c>
    25dc:	47 e0       	ldi	r20, 0x07	; 7
    25de:	01 c0       	rjmp	.+2      	; 0x25e2 <udd_ep_alloc+0x9c>
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	fc 01       	movw	r30, r24
    25e4:	ee 0f       	add	r30, r30
    25e6:	ff 1f       	adc	r31, r31
    25e8:	ee 0f       	add	r30, r30
    25ea:	ff 1f       	adc	r31, r31
    25ec:	ee 0f       	add	r30, r30
    25ee:	ff 1f       	adc	r31, r31
    25f0:	ec 5f       	subi	r30, 0xFC	; 252
    25f2:	fd 4d       	sbci	r31, 0xDD	; 221
    25f4:	11 8a       	std	Z+17, r1	; 0x11
    25f6:	dc 01       	movw	r26, r24
    25f8:	aa 0f       	add	r26, r26
    25fa:	bb 1f       	adc	r27, r27
    25fc:	aa 0f       	add	r26, r26
    25fe:	bb 1f       	adc	r27, r27
    2600:	aa 0f       	add	r26, r26
    2602:	bb 1f       	adc	r27, r27
    2604:	ac 5e       	subi	r26, 0xEC	; 236
    2606:	bd 4d       	sbci	r27, 0xDD	; 221
    2608:	36 e0       	ldi	r19, 0x06	; 6
    260a:	3c 93       	st	X, r19
    260c:	24 2b       	or	r18, r20
    260e:	21 8b       	std	Z+17, r18	; 0x11
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	88 0f       	add	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	fc 01       	movw	r30, r24
    261e:	ec 5f       	subi	r30, 0xFC	; 252
    2620:	fd 4d       	sbci	r31, 0xDD	; 221
    2622:	81 89       	ldd	r24, Z+17	; 0x11
    2624:	80 62       	ori	r24, 0x20	; 32
    2626:	81 8b       	std	Z+17, r24	; 0x11
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	08 95       	ret
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	08 95       	ret

00002630 <udd_ep_is_halted>:
    2630:	e8 2f       	mov	r30, r24
    2632:	ef 70       	andi	r30, 0x0F	; 15
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	08 2e       	mov	r0, r24
    263c:	00 0c       	add	r0, r0
    263e:	99 0b       	sbc	r25, r25
    2640:	88 27       	eor	r24, r24
    2642:	99 0f       	add	r25, r25
    2644:	88 1f       	adc	r24, r24
    2646:	99 27       	eor	r25, r25
    2648:	e8 0f       	add	r30, r24
    264a:	f9 1f       	adc	r31, r25
    264c:	ee 0f       	add	r30, r30
    264e:	ff 1f       	adc	r31, r31
    2650:	ee 0f       	add	r30, r30
    2652:	ff 1f       	adc	r31, r31
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	ec 5f       	subi	r30, 0xFC	; 252
    265a:	fd 4d       	sbci	r31, 0xDD	; 221
    265c:	81 89       	ldd	r24, Z+17	; 0x11
    265e:	82 fb       	bst	r24, 2
    2660:	88 27       	eor	r24, r24
    2662:	80 f9       	bld	r24, 0
    2664:	08 95       	ret

00002666 <udd_ep_clear_halt>:
    2666:	28 2f       	mov	r18, r24
    2668:	2f 70       	andi	r18, 0x0F	; 15
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	a9 01       	movw	r20, r18
    266e:	44 0f       	add	r20, r20
    2670:	55 1f       	adc	r21, r21
    2672:	28 2f       	mov	r18, r24
    2674:	08 2e       	mov	r0, r24
    2676:	00 0c       	add	r0, r0
    2678:	33 0b       	sbc	r19, r19
    267a:	22 27       	eor	r18, r18
    267c:	33 0f       	add	r19, r19
    267e:	22 1f       	adc	r18, r18
    2680:	33 27       	eor	r19, r19
    2682:	24 0f       	add	r18, r20
    2684:	35 1f       	adc	r19, r21
    2686:	f9 01       	movw	r30, r18
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	ee 0f       	add	r30, r30
    268e:	ff 1f       	adc	r31, r31
    2690:	ee 0f       	add	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	ec 5f       	subi	r30, 0xFC	; 252
    2696:	fd 4d       	sbci	r31, 0xDD	; 221
    2698:	91 89       	ldd	r25, Z+17	; 0x11
    269a:	92 ff       	sbrs	r25, 2
    269c:	17 c0       	rjmp	.+46     	; 0x26cc <udd_ep_clear_halt+0x66>
    269e:	22 0f       	add	r18, r18
    26a0:	33 1f       	adc	r19, r19
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	22 0f       	add	r18, r18
    26a8:	33 1f       	adc	r19, r19
    26aa:	f9 01       	movw	r30, r18
    26ac:	ec 5f       	subi	r30, 0xFC	; 252
    26ae:	fd 4d       	sbci	r31, 0xDD	; 221
    26b0:	91 89       	ldd	r25, Z+17	; 0x11
    26b2:	9b 7f       	andi	r25, 0xFB	; 251
    26b4:	91 8b       	std	Z+17, r25	; 0x11
    26b6:	ae dc       	rcall	.-1700   	; 0x2014 <udd_ep_get_job>
    26b8:	fc 01       	movw	r30, r24
    26ba:	80 81       	ld	r24, Z
    26bc:	80 ff       	sbrs	r24, 0
    26be:	06 c0       	rjmp	.+12     	; 0x26cc <udd_ep_clear_halt+0x66>
    26c0:	8e 7f       	andi	r24, 0xFE	; 254
    26c2:	80 83       	st	Z, r24
    26c4:	07 80       	ldd	r0, Z+7	; 0x07
    26c6:	f0 85       	ldd	r31, Z+8	; 0x08
    26c8:	e0 2d       	mov	r30, r0
    26ca:	09 95       	icall
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	08 95       	ret

000026d0 <udd_ep_run>:
    26d0:	7f 92       	push	r7
    26d2:	8f 92       	push	r8
    26d4:	9f 92       	push	r9
    26d6:	af 92       	push	r10
    26d8:	bf 92       	push	r11
    26da:	cf 92       	push	r12
    26dc:	df 92       	push	r13
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	98 2e       	mov	r9, r24
    26ec:	86 2e       	mov	r8, r22
    26ee:	6a 01       	movw	r12, r20
    26f0:	79 01       	movw	r14, r18
    26f2:	90 dc       	rcall	.-1760   	; 0x2014 <udd_ep_get_job>
    26f4:	5c 01       	movw	r10, r24
    26f6:	79 2c       	mov	r7, r9
    26f8:	77 1c       	adc	r7, r7
    26fa:	77 24       	eor	r7, r7
    26fc:	77 1c       	adc	r7, r7
    26fe:	c9 2d       	mov	r28, r9
    2700:	cf 70       	andi	r28, 0x0F	; 15
    2702:	d0 e0       	ldi	r29, 0x00	; 0
    2704:	cc 0f       	add	r28, r28
    2706:	dd 1f       	adc	r29, r29
    2708:	c7 0d       	add	r28, r7
    270a:	d1 1d       	adc	r29, r1
    270c:	fe 01       	movw	r30, r28
    270e:	ee 0f       	add	r30, r30
    2710:	ff 1f       	adc	r31, r31
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	ec 5f       	subi	r30, 0xFC	; 252
    271c:	fd 4d       	sbci	r31, 0xDD	; 221
    271e:	81 89       	ldd	r24, Z+17	; 0x11
    2720:	80 7c       	andi	r24, 0xC0	; 192
    2722:	09 f4       	brne	.+2      	; 0x2726 <udd_ep_run+0x56>
    2724:	7d c0       	rjmp	.+250    	; 0x2820 <udd_ep_run+0x150>
    2726:	fe 01       	movw	r30, r28
    2728:	ee 0f       	add	r30, r30
    272a:	ff 1f       	adc	r31, r31
    272c:	ee 0f       	add	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ec 5f       	subi	r30, 0xFC	; 252
    2736:	fd 4d       	sbci	r31, 0xDD	; 221
    2738:	81 89       	ldd	r24, Z+17	; 0x11
    273a:	80 7c       	andi	r24, 0xC0	; 192
    273c:	80 3c       	cpi	r24, 0xC0	; 192
    273e:	61 f0       	breq	.+24     	; 0x2758 <udd_ep_run+0x88>
    2740:	fe 01       	movw	r30, r28
    2742:	ee 0f       	add	r30, r30
    2744:	ff 1f       	adc	r31, r31
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	ec 5f       	subi	r30, 0xFC	; 252
    2750:	fd 4d       	sbci	r31, 0xDD	; 221
    2752:	81 89       	ldd	r24, Z+17	; 0x11
    2754:	82 fd       	sbrc	r24, 2
    2756:	66 c0       	rjmp	.+204    	; 0x2824 <udd_ep_run+0x154>
    2758:	8f b7       	in	r24, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	f5 01       	movw	r30, r10
    275e:	90 81       	ld	r25, Z
    2760:	90 ff       	sbrs	r25, 0
    2762:	03 c0       	rjmp	.+6      	; 0x276a <udd_ep_run+0x9a>
    2764:	8f bf       	out	0x3f, r24	; 63
    2766:	71 2c       	mov	r7, r1
    2768:	5e c0       	rjmp	.+188    	; 0x2826 <udd_ep_run+0x156>
    276a:	f5 01       	movw	r30, r10
    276c:	90 81       	ld	r25, Z
    276e:	91 60       	ori	r25, 0x01	; 1
    2770:	90 83       	st	Z, r25
    2772:	8f bf       	out	0x3f, r24	; 63
    2774:	c1 82       	std	Z+1, r12	; 0x01
    2776:	d2 82       	std	Z+2, r13	; 0x02
    2778:	e3 82       	std	Z+3, r14	; 0x03
    277a:	f4 82       	std	Z+4, r15	; 0x04
    277c:	15 82       	std	Z+5, r1	; 0x05
    277e:	16 82       	std	Z+6, r1	; 0x06
    2780:	07 83       	std	Z+7, r16	; 0x07
    2782:	10 87       	std	Z+8, r17	; 0x08
    2784:	81 10       	cpse	r8, r1
    2786:	06 c0       	rjmp	.+12     	; 0x2794 <udd_ep_run+0xc4>
    2788:	91 e0       	ldi	r25, 0x01	; 1
    278a:	e1 14       	cp	r14, r1
    278c:	f1 04       	cpc	r15, r1
    278e:	19 f0       	breq	.+6      	; 0x2796 <udd_ep_run+0xc6>
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <udd_ep_run+0xc6>
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	f5 01       	movw	r30, r10
    2798:	80 81       	ld	r24, Z
    279a:	90 fb       	bst	r25, 0
    279c:	81 f9       	bld	r24, 1
    279e:	8b 7f       	andi	r24, 0xFB	; 251
    27a0:	80 83       	st	Z, r24
    27a2:	77 20       	and	r7, r7
    27a4:	59 f0       	breq	.+22     	; 0x27bc <udd_ep_run+0xec>
    27a6:	cc 0f       	add	r28, r28
    27a8:	dd 1f       	adc	r29, r29
    27aa:	cc 0f       	add	r28, r28
    27ac:	dd 1f       	adc	r29, r29
    27ae:	cc 0f       	add	r28, r28
    27b0:	dd 1f       	adc	r29, r29
    27b2:	cc 5f       	subi	r28, 0xFC	; 252
    27b4:	dd 4d       	sbci	r29, 0xDD	; 221
    27b6:	1e 8a       	std	Y+22, r1	; 0x16
    27b8:	1f 8a       	std	Y+23, r1	; 0x17
    27ba:	2d c0       	rjmp	.+90     	; 0x2816 <udd_ep_run+0x146>
    27bc:	fe 01       	movw	r30, r28
    27be:	ee 0f       	add	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	ee 0f       	add	r30, r30
    27c4:	ff 1f       	adc	r31, r31
    27c6:	ee 0f       	add	r30, r30
    27c8:	ff 1f       	adc	r31, r31
    27ca:	ec 5f       	subi	r30, 0xFC	; 252
    27cc:	fd 4d       	sbci	r31, 0xDD	; 221
    27ce:	81 89       	ldd	r24, Z+17	; 0x11
    27d0:	80 7c       	andi	r24, 0xC0	; 192
    27d2:	80 3c       	cpi	r24, 0xC0	; 192
    27d4:	a1 f4       	brne	.+40     	; 0x27fe <udd_ep_run+0x12e>
    27d6:	ce 01       	movw	r24, r28
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	8c 5e       	subi	r24, 0xEC	; 236
    27e6:	9d 4d       	sbci	r25, 0xDD	; 221
    27e8:	ef db       	rcall	.-2082   	; 0x1fc8 <udd_ep_get_size>
    27ea:	bc 01       	movw	r22, r24
    27ec:	c7 01       	movw	r24, r14
    27ee:	60 d2       	rcall	.+1216   	; 0x2cb0 <__udivmodhi4>
    27f0:	89 2b       	or	r24, r25
    27f2:	29 f0       	breq	.+10     	; 0x27fe <udd_ep_run+0x12e>
    27f4:	f5 01       	movw	r30, r10
    27f6:	80 81       	ld	r24, Z
    27f8:	8e 7f       	andi	r24, 0xFE	; 254
    27fa:	80 83       	st	Z, r24
    27fc:	14 c0       	rjmp	.+40     	; 0x2826 <udd_ep_run+0x156>
    27fe:	cc 0f       	add	r28, r28
    2800:	dd 1f       	adc	r29, r29
    2802:	cc 0f       	add	r28, r28
    2804:	dd 1f       	adc	r29, r29
    2806:	cc 0f       	add	r28, r28
    2808:	dd 1f       	adc	r29, r29
    280a:	cc 5f       	subi	r28, 0xFC	; 252
    280c:	dd 4d       	sbci	r29, 0xDD	; 221
    280e:	1a 8a       	std	Y+18, r1	; 0x12
    2810:	1b 8a       	std	Y+19, r1	; 0x13
    2812:	1e 8a       	std	Y+22, r1	; 0x16
    2814:	1f 8a       	std	Y+23, r1	; 0x17
    2816:	89 2d       	mov	r24, r9
    2818:	87 dc       	rcall	.-1778   	; 0x2128 <udd_ep_trans_complet>
    281a:	77 24       	eor	r7, r7
    281c:	73 94       	inc	r7
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <udd_ep_run+0x156>
    2820:	71 2c       	mov	r7, r1
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <udd_ep_run+0x156>
    2824:	71 2c       	mov	r7, r1
    2826:	87 2d       	mov	r24, r7
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	ff 90       	pop	r15
    2832:	ef 90       	pop	r14
    2834:	df 90       	pop	r13
    2836:	cf 90       	pop	r12
    2838:	bf 90       	pop	r11
    283a:	af 90       	pop	r10
    283c:	9f 90       	pop	r9
    283e:	8f 90       	pop	r8
    2840:	7f 90       	pop	r7
    2842:	08 95       	ret

00002844 <udd_ep_abort>:
    2844:	ff 92       	push	r15
    2846:	0f 93       	push	r16
    2848:	1f 93       	push	r17
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	18 2f       	mov	r17, r24
    2850:	f8 2e       	mov	r15, r24
    2852:	ff 1c       	adc	r15, r15
    2854:	ff 24       	eor	r15, r15
    2856:	ff 1c       	adc	r15, r15
    2858:	c8 2f       	mov	r28, r24
    285a:	cf 70       	andi	r28, 0x0F	; 15
    285c:	d0 e0       	ldi	r29, 0x00	; 0
    285e:	cc 0f       	add	r28, r28
    2860:	dd 1f       	adc	r29, r29
    2862:	cf 0d       	add	r28, r15
    2864:	d1 1d       	adc	r29, r1
    2866:	d6 db       	rcall	.-2132   	; 0x2014 <udd_ep_get_job>
    2868:	dc 01       	movw	r26, r24
    286a:	fe 01       	movw	r30, r28
    286c:	ee 0f       	add	r30, r30
    286e:	ff 1f       	adc	r31, r31
    2870:	ee 0f       	add	r30, r30
    2872:	ff 1f       	adc	r31, r31
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	ec 5e       	subi	r30, 0xEC	; 236
    287a:	fd 4d       	sbci	r31, 0xDD	; 221
    287c:	02 e0       	ldi	r16, 0x02	; 2
    287e:	05 93       	las	Z, r16
    2880:	8c 91       	ld	r24, X
    2882:	80 ff       	sbrs	r24, 0
    2884:	22 c0       	rjmp	.+68     	; 0x28ca <udd_ep_abort+0x86>
    2886:	8e 7f       	andi	r24, 0xFE	; 254
    2888:	8c 93       	st	X, r24
    288a:	17 96       	adiw	r26, 0x07	; 7
    288c:	ed 91       	ld	r30, X+
    288e:	fc 91       	ld	r31, X
    2890:	18 97       	sbiw	r26, 0x08	; 8
    2892:	30 97       	sbiw	r30, 0x00	; 0
    2894:	d1 f0       	breq	.+52     	; 0x28ca <udd_ep_abort+0x86>
    2896:	ff 20       	and	r15, r15
    2898:	59 f0       	breq	.+22     	; 0x28b0 <udd_ep_abort+0x6c>
    289a:	cc 0f       	add	r28, r28
    289c:	dd 1f       	adc	r29, r29
    289e:	cc 0f       	add	r28, r28
    28a0:	dd 1f       	adc	r29, r29
    28a2:	cc 0f       	add	r28, r28
    28a4:	dd 1f       	adc	r29, r29
    28a6:	cc 5f       	subi	r28, 0xFC	; 252
    28a8:	dd 4d       	sbci	r29, 0xDD	; 221
    28aa:	6e 89       	ldd	r22, Y+22	; 0x16
    28ac:	7f 89       	ldd	r23, Y+23	; 0x17
    28ae:	0a c0       	rjmp	.+20     	; 0x28c4 <udd_ep_abort+0x80>
    28b0:	cc 0f       	add	r28, r28
    28b2:	dd 1f       	adc	r29, r29
    28b4:	cc 0f       	add	r28, r28
    28b6:	dd 1f       	adc	r29, r29
    28b8:	cc 0f       	add	r28, r28
    28ba:	dd 1f       	adc	r29, r29
    28bc:	cc 5f       	subi	r28, 0xFC	; 252
    28be:	dd 4d       	sbci	r29, 0xDD	; 221
    28c0:	6a 89       	ldd	r22, Y+18	; 0x12
    28c2:	7b 89       	ldd	r23, Y+19	; 0x13
    28c4:	41 2f       	mov	r20, r17
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	09 95       	icall
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	ff 90       	pop	r15
    28d4:	08 95       	ret

000028d6 <udd_ep_free>:
    28d6:	cf 93       	push	r28
    28d8:	c8 2f       	mov	r28, r24
    28da:	b4 df       	rcall	.-152    	; 0x2844 <udd_ep_abort>
    28dc:	ec 2f       	mov	r30, r28
    28de:	ef 70       	andi	r30, 0x0F	; 15
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	ee 0f       	add	r30, r30
    28e4:	ff 1f       	adc	r31, r31
    28e6:	8c 2f       	mov	r24, r28
    28e8:	cc 0f       	add	r28, r28
    28ea:	99 0b       	sbc	r25, r25
    28ec:	88 27       	eor	r24, r24
    28ee:	99 0f       	add	r25, r25
    28f0:	88 1f       	adc	r24, r24
    28f2:	99 27       	eor	r25, r25
    28f4:	e8 0f       	add	r30, r24
    28f6:	f9 1f       	adc	r31, r25
    28f8:	ee 0f       	add	r30, r30
    28fa:	ff 1f       	adc	r31, r31
    28fc:	ee 0f       	add	r30, r30
    28fe:	ff 1f       	adc	r31, r31
    2900:	ee 0f       	add	r30, r30
    2902:	ff 1f       	adc	r31, r31
    2904:	ec 5f       	subi	r30, 0xFC	; 252
    2906:	fd 4d       	sbci	r31, 0xDD	; 221
    2908:	11 8a       	std	Z+17, r1	; 0x11
    290a:	cf 91       	pop	r28
    290c:	08 95       	ret

0000290e <udd_ep_set_halt>:
    290e:	0f 93       	push	r16
    2910:	e8 2f       	mov	r30, r24
    2912:	ef 70       	andi	r30, 0x0F	; 15
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	ee 0f       	add	r30, r30
    2918:	ff 1f       	adc	r31, r31
    291a:	28 2f       	mov	r18, r24
    291c:	08 2e       	mov	r0, r24
    291e:	00 0c       	add	r0, r0
    2920:	33 0b       	sbc	r19, r19
    2922:	22 27       	eor	r18, r18
    2924:	33 0f       	add	r19, r19
    2926:	22 1f       	adc	r18, r18
    2928:	33 27       	eor	r19, r19
    292a:	e2 0f       	add	r30, r18
    292c:	f3 1f       	adc	r31, r19
    292e:	df 01       	movw	r26, r30
    2930:	aa 0f       	add	r26, r26
    2932:	bb 1f       	adc	r27, r27
    2934:	aa 0f       	add	r26, r26
    2936:	bb 1f       	adc	r27, r27
    2938:	aa 0f       	add	r26, r26
    293a:	bb 1f       	adc	r27, r27
    293c:	ac 5f       	subi	r26, 0xFC	; 252
    293e:	bd 4d       	sbci	r27, 0xDD	; 221
    2940:	51 96       	adiw	r26, 0x11	; 17
    2942:	9c 91       	ld	r25, X
    2944:	51 97       	sbiw	r26, 0x11	; 17
    2946:	94 60       	ori	r25, 0x04	; 4
    2948:	51 96       	adiw	r26, 0x11	; 17
    294a:	9c 93       	st	X, r25
    294c:	ee 0f       	add	r30, r30
    294e:	ff 1f       	adc	r31, r31
    2950:	ee 0f       	add	r30, r30
    2952:	ff 1f       	adc	r31, r31
    2954:	ee 0f       	add	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	ec 5e       	subi	r30, 0xEC	; 236
    295a:	fd 4d       	sbci	r31, 0xDD	; 221
    295c:	01 e0       	ldi	r16, 0x01	; 1
    295e:	06 93       	lac	Z, r16
    2960:	71 df       	rcall	.-286    	; 0x2844 <udd_ep_abort>
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	0f 91       	pop	r16
    2966:	08 95       	ret

00002968 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2968:	1f 92       	push	r1
    296a:	0f 92       	push	r0
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	0f 92       	push	r0
    2970:	11 24       	eor	r1, r1
    2972:	0f 93       	push	r16
    2974:	2f 93       	push	r18
    2976:	3f 93       	push	r19
    2978:	4f 93       	push	r20
    297a:	5f 93       	push	r21
    297c:	6f 93       	push	r22
    297e:	7f 93       	push	r23
    2980:	8f 93       	push	r24
    2982:	9f 93       	push	r25
    2984:	af 93       	push	r26
    2986:	bf 93       	push	r27
    2988:	ef 93       	push	r30
    298a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    298c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2990:	88 23       	and	r24, r24
    2992:	44 f4       	brge	.+16     	; 0x29a4 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2994:	80 e8       	ldi	r24, 0x80	; 128
    2996:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    299a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    299e:	0e 94 05 02 	call	0x40a	; 0x40a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    29a2:	8a c0       	rjmp	.+276    	; 0x2ab8 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    29a4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29a8:	82 ff       	sbrs	r24, 2
    29aa:	20 c0       	rjmp	.+64     	; 0x29ec <__vector_125+0x84>
		udd_ack_underflow_event();
    29ac:	84 e0       	ldi	r24, 0x04	; 4
    29ae:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    29b2:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udd_sram+0x18>
    29b6:	86 ff       	sbrs	r24, 6
    29b8:	7f c0       	rjmp	.+254    	; 0x2ab8 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    29ba:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    29be:	81 fd       	sbrc	r24, 1
    29c0:	7b c0       	rjmp	.+246    	; 0x2ab8 <__vector_125+0x150>
    29c2:	43 db       	rcall	.-2426   	; 0x204a <udd_ctrl_interrupt_tc_setup>
    29c4:	81 11       	cpse	r24, r1
    29c6:	78 c0       	rjmp	.+240    	; 0x2ab8 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    29c8:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    29cc:	81 30       	cpi	r24, 0x01	; 1
    29ce:	11 f4       	brne	.+4      	; 0x29d4 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    29d0:	79 da       	rcall	.-2830   	; 0x1ec4 <udd_ctrl_send_zlp_in>
    29d2:	72 c0       	rjmp	.+228    	; 0x2ab8 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29d4:	84 30       	cpi	r24, 0x04	; 4
    29d6:	09 f0       	breq	.+2      	; 0x29da <__vector_125+0x72>
    29d8:	6f c0       	rjmp	.+222    	; 0x2ab8 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    29da:	ed e1       	ldi	r30, 0x1D	; 29
    29dc:	f2 e2       	ldi	r31, 0x22	; 34
    29de:	04 e0       	ldi	r16, 0x04	; 4
    29e0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    29e2:	e5 e1       	ldi	r30, 0x15	; 21
    29e4:	f2 e2       	ldi	r31, 0x22	; 34
    29e6:	04 e0       	ldi	r16, 0x04	; 4
    29e8:	05 93       	las	Z, r16
    29ea:	66 c0       	rjmp	.+204    	; 0x2ab8 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    29ec:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29f0:	81 ff       	sbrs	r24, 1
    29f2:	5d c0       	rjmp	.+186    	; 0x2aae <__vector_125+0x146>
		udd_ack_overflow_event();
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    29fa:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udd_sram+0x10>
    29fe:	86 ff       	sbrs	r24, 6
    2a00:	5b c0       	rjmp	.+182    	; 0x2ab8 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a02:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a06:	81 fd       	sbrc	r24, 1
    2a08:	57 c0       	rjmp	.+174    	; 0x2ab8 <__vector_125+0x150>
    2a0a:	1f db       	rcall	.-2498   	; 0x204a <udd_ctrl_interrupt_tc_setup>
    2a0c:	81 11       	cpse	r24, r1
    2a0e:	54 c0       	rjmp	.+168    	; 0x2ab8 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2a10:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    2a14:	82 30       	cpi	r24, 0x02	; 2
    2a16:	41 f4       	brne	.+16     	; 0x2a28 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2a18:	84 e0       	ldi	r24, 0x04	; 4
    2a1a:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2a1e:	e4 e1       	ldi	r30, 0x14	; 20
    2a20:	f2 e2       	ldi	r31, 0x22	; 34
    2a22:	02 e0       	ldi	r16, 0x02	; 2
    2a24:	06 93       	lac	Z, r16
    2a26:	48 c0       	rjmp	.+144    	; 0x2ab8 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2a28:	83 30       	cpi	r24, 0x03	; 3
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <__vector_125+0xc6>
    2a2c:	45 c0       	rjmp	.+138    	; 0x2ab8 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2a2e:	ed e1       	ldi	r30, 0x1D	; 29
    2a30:	f2 e2       	ldi	r31, 0x22	; 34
    2a32:	04 e0       	ldi	r16, 0x04	; 4
    2a34:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2a36:	e5 e1       	ldi	r30, 0x15	; 21
    2a38:	f2 e2       	ldi	r31, 0x22	; 34
    2a3a:	04 e0       	ldi	r16, 0x04	; 4
    2a3c:	05 93       	las	Z, r16
    2a3e:	3c c0       	rjmp	.+120    	; 0x2ab8 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2a40:	80 e1       	ldi	r24, 0x10	; 16
    2a42:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	fd de       	rcall	.-518    	; 0x2844 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a4a:	81 e8       	ldi	r24, 0x81	; 129
    2a4c:	fb de       	rcall	.-522    	; 0x2844 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	f9 de       	rcall	.-526    	; 0x2844 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a52:	82 e8       	ldi	r24, 0x82	; 130
    2a54:	f7 de       	rcall	.-530    	; 0x2844 <udd_ep_abort>
		}
#endif
		udc_reset();
    2a56:	0e 94 16 0b 	call	0x162c	; 0x162c <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2a5a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a5e:	e4 e0       	ldi	r30, 0x04	; 4
    2a60:	f2 e2       	ldi	r31, 0x22	; 34
    2a62:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2a64:	96 e0       	ldi	r25, 0x06	; 6
    2a66:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a68:	83 e4       	ldi	r24, 0x43	; 67
    2a6a:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a6c:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2a6e:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a70:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2a72:	8f eb       	ldi	r24, 0xBF	; 191
    2a74:	91 e2       	ldi	r25, 0x21	; 33
    2a76:	84 8b       	std	Z+20, r24	; 0x14
    2a78:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2a7a:	ef d9       	rcall	.-3106   	; 0x1e5a <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2a7c:	1d c0       	rjmp	.+58     	; 0x2ab8 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2a7e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a82:	86 ff       	sbrs	r24, 6
    2a84:	08 c0       	rjmp	.+16     	; 0x2a96 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2a86:	80 e4       	ldi	r24, 0x40	; 64
    2a88:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	bc d9       	rcall	.-3208   	; 0x1e08 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2a90:	0e 94 03 02 	call	0x406	; 0x406 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a94:	11 c0       	rjmp	.+34     	; 0x2ab8 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2a96:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a9a:	85 ff       	sbrs	r24, 5
    2a9c:	0d c0       	rjmp	.+26     	; 0x2ab8 <__vector_125+0x150>
		udd_ack_resume_event();
    2a9e:	80 e2       	ldi	r24, 0x20	; 32
    2aa0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	b0 d9       	rcall	.-3232   	; 0x1e08 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2aa8:	0e 94 04 02 	call	0x408	; 0x408 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2aac:	05 c0       	rjmp	.+10     	; 0x2ab8 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2aae:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ab2:	84 fd       	sbrc	r24, 4
    2ab4:	c5 cf       	rjmp	.-118    	; 0x2a40 <__vector_125+0xd8>
    2ab6:	e3 cf       	rjmp	.-58     	; 0x2a7e <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2ab8:	ff 91       	pop	r31
    2aba:	ef 91       	pop	r30
    2abc:	bf 91       	pop	r27
    2abe:	af 91       	pop	r26
    2ac0:	9f 91       	pop	r25
    2ac2:	8f 91       	pop	r24
    2ac4:	7f 91       	pop	r23
    2ac6:	6f 91       	pop	r22
    2ac8:	5f 91       	pop	r21
    2aca:	4f 91       	pop	r20
    2acc:	3f 91       	pop	r19
    2ace:	2f 91       	pop	r18
    2ad0:	0f 91       	pop	r16
    2ad2:	0f 90       	pop	r0
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	0f 90       	pop	r0
    2ad8:	1f 90       	pop	r1
    2ada:	18 95       	reti

00002adc <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2adc:	1f 92       	push	r1
    2ade:	0f 92       	push	r0
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	0f 92       	push	r0
    2ae4:	11 24       	eor	r1, r1
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	2f 93       	push	r18
    2aec:	3f 93       	push	r19
    2aee:	4f 93       	push	r20
    2af0:	5f 93       	push	r21
    2af2:	6f 93       	push	r22
    2af4:	7f 93       	push	r23
    2af6:	8f 93       	push	r24
    2af8:	9f 93       	push	r25
    2afa:	af 93       	push	r26
    2afc:	bf 93       	push	r27
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	ef 93       	push	r30
    2b04:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2b06:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b0a:	81 fd       	sbrc	r24, 1
    2b0c:	03 c0       	rjmp	.+6      	; 0x2b14 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2b0e:	9d da       	rcall	.-2758   	; 0x204a <udd_ctrl_interrupt_tc_setup>
    2b10:	81 11       	cpse	r24, r1
    2b12:	b9 c0       	rjmp	.+370    	; 0x2c86 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2b14:	82 e0       	ldi	r24, 0x02	; 2
    2b16:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2b1a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2b1e:	81 95       	neg	r24
    2b20:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2b22:	e4 e1       	ldi	r30, 0x14	; 20
    2b24:	f2 e2       	ldi	r31, 0x22	; 34
    2b26:	e8 1b       	sub	r30, r24
    2b28:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2b2a:	20 81       	ld	r18, Z
    2b2c:	31 81       	ldd	r19, Z+1	; 0x01
    2b2e:	24 51       	subi	r18, 0x14	; 20
    2b30:	32 42       	sbci	r19, 0x22	; 34
    2b32:	36 95       	lsr	r19
    2b34:	27 95       	ror	r18
    2b36:	36 95       	lsr	r19
    2b38:	27 95       	ror	r18
    2b3a:	36 95       	lsr	r19
    2b3c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2b3e:	82 2f       	mov	r24, r18
    2b40:	86 95       	lsr	r24
    2b42:	20 fd       	sbrc	r18, 0
    2b44:	02 c0       	rjmp	.+4      	; 0x2b4a <__vector_126+0x6e>
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	01 c0       	rjmp	.+2      	; 0x2b4c <__vector_126+0x70>
    2b4a:	90 e8       	ldi	r25, 0x80	; 128
    2b4c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b4e:	e8 2f       	mov	r30, r24
    2b50:	ef 70       	andi	r30, 0x0F	; 15
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	ee 0f       	add	r30, r30
    2b56:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2b58:	28 2f       	mov	r18, r24
    2b5a:	08 2e       	mov	r0, r24
    2b5c:	00 0c       	add	r0, r0
    2b5e:	33 0b       	sbc	r19, r19
    2b60:	22 27       	eor	r18, r18
    2b62:	33 0f       	add	r19, r19
    2b64:	22 1f       	adc	r18, r18
    2b66:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b68:	e2 0f       	add	r30, r18
    2b6a:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2b6c:	df 01       	movw	r26, r30
    2b6e:	aa 0f       	add	r26, r26
    2b70:	bb 1f       	adc	r27, r27
    2b72:	aa 0f       	add	r26, r26
    2b74:	bb 1f       	adc	r27, r27
    2b76:	aa 0f       	add	r26, r26
    2b78:	bb 1f       	adc	r27, r27
    2b7a:	ac 5e       	subi	r26, 0xEC	; 236
    2b7c:	bd 4d       	sbci	r27, 0xDD	; 221
    2b7e:	9c 91       	ld	r25, X
    2b80:	95 ff       	sbrs	r25, 5
    2b82:	81 c0       	rjmp	.+258    	; 0x2c86 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2b84:	fd 01       	movw	r30, r26
    2b86:	00 e2       	ldi	r16, 0x20	; 32
    2b88:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2b8a:	81 11       	cpse	r24, r1
    2b8c:	77 c0       	rjmp	.+238    	; 0x2c7c <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b8e:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <udd_ep_control_state>
    2b92:	84 30       	cpi	r24, 0x04	; 4
    2b94:	19 f4       	brne	.+6      	; 0x2b9c <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2b96:	a4 d9       	rcall	.-3256   	; 0x1ee0 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2b98:	60 d9       	rcall	.-3392   	; 0x1e5a <udd_ctrl_init>
    2b9a:	75 c0       	rjmp	.+234    	; 0x2c86 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2b9c:	00 91 16 22 	lds	r16, 0x2216	; 0x802216 <udd_sram+0x12>
    2ba0:	10 91 17 22 	lds	r17, 0x2217	; 0x802217 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2ba4:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    2ba8:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    2bac:	c0 91 ff 21 	lds	r28, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2bb0:	d0 91 00 22 	lds	r29, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    2bb4:	9e 01       	movw	r18, r28
    2bb6:	20 0f       	add	r18, r16
    2bb8:	31 1f       	adc	r19, r17
    2bba:	82 17       	cp	r24, r18
    2bbc:	93 07       	cpc	r25, r19
    2bbe:	18 f4       	brcc	.+6      	; 0x2bc6 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2bc0:	8c 01       	movw	r16, r24
    2bc2:	0c 1b       	sub	r16, r28
    2bc4:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2bc6:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <udd_g_ctrlreq+0x8>
    2bca:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <udd_g_ctrlreq+0x9>
    2bce:	a8 01       	movw	r20, r16
    2bd0:	6f eb       	ldi	r22, 0xBF	; 191
    2bd2:	71 e2       	ldi	r23, 0x21	; 33
    2bd4:	8c 0f       	add	r24, r28
    2bd6:	9d 1f       	adc	r25, r29
    2bd8:	85 d0       	rcall	.+266    	; 0x2ce4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2bda:	c0 0f       	add	r28, r16
    2bdc:	d1 1f       	adc	r29, r17
    2bde:	c0 93 ff 21 	sts	0x21FF, r28	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2be2:	d0 93 00 22 	sts	0x2200, r29	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2be6:	00 34       	cpi	r16, 0x40	; 64
    2be8:	11 05       	cpc	r17, r1
    2bea:	69 f4       	brne	.+26     	; 0x2c06 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2bec:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    2bf0:	90 91 02 22 	lds	r25, 0x2202	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    2bf4:	8c 0f       	add	r24, r28
    2bf6:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2bf8:	20 91 64 24 	lds	r18, 0x2464	; 0x802464 <udd_g_ctrlreq+0x6>
    2bfc:	30 91 65 24 	lds	r19, 0x2465	; 0x802465 <udd_g_ctrlreq+0x7>
    2c00:	82 17       	cp	r24, r18
    2c02:	93 07       	cpc	r25, r19
    2c04:	80 f0       	brcs	.+32     	; 0x2c26 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2c06:	ee e5       	ldi	r30, 0x5E	; 94
    2c08:	f4 e2       	ldi	r31, 0x24	; 36
    2c0a:	c2 87       	std	Z+10, r28	; 0x0a
    2c0c:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2c0e:	06 84       	ldd	r0, Z+14	; 0x0e
    2c10:	f7 85       	ldd	r31, Z+15	; 0x0f
    2c12:	e0 2d       	mov	r30, r0
    2c14:	30 97       	sbiw	r30, 0x00	; 0
    2c16:	29 f0       	breq	.+10     	; 0x2c22 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2c18:	09 95       	icall
    2c1a:	81 11       	cpse	r24, r1
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2c1e:	44 d9       	rcall	.-3448   	; 0x1ea8 <udd_ctrl_stall_data>
    2c20:	32 c0       	rjmp	.+100    	; 0x2c86 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2c22:	50 d9       	rcall	.-3424   	; 0x1ec4 <udd_ctrl_send_zlp_in>
    2c24:	30 c0       	rjmp	.+96     	; 0x2c86 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2c26:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <udd_g_ctrlreq+0xa>
    2c2a:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <udd_g_ctrlreq+0xb>
    2c2e:	c8 17       	cp	r28, r24
    2c30:	d9 07       	cpc	r29, r25
    2c32:	f9 f4       	brne	.+62     	; 0x2c72 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2c34:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <udd_g_ctrlreq+0xe>
    2c38:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <udd_g_ctrlreq+0xf>
    2c3c:	30 97       	sbiw	r30, 0x00	; 0
    2c3e:	11 f4       	brne	.+4      	; 0x2c44 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2c40:	33 d9       	rcall	.-3482   	; 0x1ea8 <udd_ctrl_stall_data>
    2c42:	21 c0       	rjmp	.+66     	; 0x2c86 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2c44:	09 95       	icall
    2c46:	81 11       	cpse	r24, r1
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2c4a:	2e d9       	rcall	.-3492   	; 0x1ea8 <udd_ctrl_stall_data>
    2c4c:	1c c0       	rjmp	.+56     	; 0x2c86 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2c4e:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    2c52:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c56:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2c5a:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
    2c5e:	82 0f       	add	r24, r18
    2c60:	93 1f       	adc	r25, r19
    2c62:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ctrl_prev_payload_nb_trans>
    2c66:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2c6a:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans>
    2c6e:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2c72:	e4 e1       	ldi	r30, 0x14	; 20
    2c74:	f2 e2       	ldi	r31, 0x22	; 34
    2c76:	02 e0       	ldi	r16, 0x02	; 2
    2c78:	06 93       	lac	Z, r16
    2c7a:	05 c0       	rjmp	.+10     	; 0x2c86 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2c7c:	80 38       	cpi	r24, 0x80	; 128
    2c7e:	11 f4       	brne	.+4      	; 0x2c84 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2c80:	37 d9       	rcall	.-3474   	; 0x1ef0 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2c82:	01 c0       	rjmp	.+2      	; 0x2c86 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2c84:	51 da       	rcall	.-2910   	; 0x2128 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c86:	ff 91       	pop	r31
    2c88:	ef 91       	pop	r30
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	bf 91       	pop	r27
    2c90:	af 91       	pop	r26
    2c92:	9f 91       	pop	r25
    2c94:	8f 91       	pop	r24
    2c96:	7f 91       	pop	r23
    2c98:	6f 91       	pop	r22
    2c9a:	5f 91       	pop	r21
    2c9c:	4f 91       	pop	r20
    2c9e:	3f 91       	pop	r19
    2ca0:	2f 91       	pop	r18
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	0f 90       	pop	r0
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	0f 90       	pop	r0
    2cac:	1f 90       	pop	r1
    2cae:	18 95       	reti

00002cb0 <__udivmodhi4>:
    2cb0:	aa 1b       	sub	r26, r26
    2cb2:	bb 1b       	sub	r27, r27
    2cb4:	51 e1       	ldi	r21, 0x11	; 17
    2cb6:	07 c0       	rjmp	.+14     	; 0x2cc6 <__udivmodhi4_ep>

00002cb8 <__udivmodhi4_loop>:
    2cb8:	aa 1f       	adc	r26, r26
    2cba:	bb 1f       	adc	r27, r27
    2cbc:	a6 17       	cp	r26, r22
    2cbe:	b7 07       	cpc	r27, r23
    2cc0:	10 f0       	brcs	.+4      	; 0x2cc6 <__udivmodhi4_ep>
    2cc2:	a6 1b       	sub	r26, r22
    2cc4:	b7 0b       	sbc	r27, r23

00002cc6 <__udivmodhi4_ep>:
    2cc6:	88 1f       	adc	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	5a 95       	dec	r21
    2ccc:	a9 f7       	brne	.-22     	; 0x2cb8 <__udivmodhi4_loop>
    2cce:	80 95       	com	r24
    2cd0:	90 95       	com	r25
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	08 95       	ret

00002cd8 <__tablejump2__>:
    2cd8:	ee 0f       	add	r30, r30
    2cda:	ff 1f       	adc	r31, r31
    2cdc:	05 90       	lpm	r0, Z+
    2cde:	f4 91       	lpm	r31, Z
    2ce0:	e0 2d       	mov	r30, r0
    2ce2:	09 94       	ijmp

00002ce4 <memcpy>:
    2ce4:	fb 01       	movw	r30, r22
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <memcpy+0xa>
    2cea:	01 90       	ld	r0, Z+
    2cec:	0d 92       	st	X+, r0
    2cee:	41 50       	subi	r20, 0x01	; 1
    2cf0:	50 40       	sbci	r21, 0x00	; 0
    2cf2:	d8 f7       	brcc	.-10     	; 0x2cea <memcpy+0x6>
    2cf4:	08 95       	ret

00002cf6 <_exit>:
    2cf6:	f8 94       	cli

00002cf8 <__stop_program>:
    2cf8:	ff cf       	rjmp	.-2      	; 0x2cf8 <__stop_program>
