
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00802000  00002d38  00002dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000db0  008020ba  008020ba  00002e86  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  00002ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b853  00000000  00000000  00003410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e39  00000000  00000000  0000ec63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009681  00000000  00000000  00010a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b04  00000000  00000000  0001a120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fcc2  00000000  00000000  0001ac24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002544  00000000  00000000  0004a8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0004ce30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bdd8  00000000  00000000  0004d268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_6>
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
      1e:	00 00       	nop
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_24>
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	55 c4       	rjmp	.+2218   	; 0x9c8 <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_83>
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <__vector_125>
     1f8:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__vector_126>
     1fc:	a4 0b       	sbc	r26, r20
     1fe:	a8 0b       	sbc	r26, r24
     200:	e4 0b       	sbc	r30, r20
     202:	20 0c       	add	r2, r0
     204:	29 0c       	add	r2, r9
     206:	2e 0c       	add	r2, r14
     208:	72 0c       	add	r7, r2
     20a:	77 0c       	add	r7, r7
     20c:	d4 0b       	sbc	r29, r20
     20e:	d6 0b       	sbc	r29, r22
     210:	d8 0b       	sbc	r29, r24
     212:	da 0b       	sbc	r29, r26
     214:	dc 0b       	sbc	r29, r28
     216:	de 0b       	sbc	r29, r30
     218:	e0 0b       	sbc	r30, r16
     21a:	e2 0b       	sbc	r30, r18
     21c:	10 0c       	add	r1, r0
     21e:	12 0c       	add	r1, r2
     220:	14 0c       	add	r1, r4
     222:	16 0c       	add	r1, r6
     224:	18 0c       	add	r1, r8
     226:	1a 0c       	add	r1, r10
     228:	1c 0c       	add	r1, r12
     22a:	1e 0c       	add	r1, r14
     22c:	3a 0c       	add	r3, r10
     22e:	42 0c       	add	r4, r2
     230:	4a 0c       	add	r4, r10
     232:	55 0c       	add	r5, r5
     234:	57 0c       	add	r5, r7
     236:	59 0c       	add	r5, r9
     238:	61 0c       	add	r6, r1
     23a:	69 0c       	add	r6, r9
     23c:	ef 0f       	add	r30, r31
     23e:	f2 0f       	add	r31, r18
     240:	f5 0f       	add	r31, r21
     242:	f8 0f       	add	r31, r24
     244:	fb 0f       	add	r31, r27
     246:	fe 0f       	add	r31, r30
     248:	01 10       	cpse	r0, r1

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	e8 e3       	ldi	r30, 0x38	; 56
     25e:	fd e2       	ldi	r31, 0x2D	; 45
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	aa 3b       	cpi	r26, 0xBA	; 186
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	aa eb       	ldi	r26, 0xBA	; 186
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	aa 36       	cpi	r26, 0x6A	; 106
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	75 d2       	rcall	.+1258   	; 0x768 <main>
     27e:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	53 d3       	rcall	.+1702   	; 0x93c <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <tiny_calibration_first_sof>:
     2f4:	e0 e7       	ldi	r30, 0x70	; 112
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	85 81       	ldd	r24, Z+5	; 0x05
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	85 83       	std	Z+5, r24	; 0x05
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	fa e0       	ldi	r31, 0x0A	; 10
     302:	8f eb       	ldi	r24, 0xBF	; 191
     304:	9d e5       	ldi	r25, 0x5D	; 93
     306:	86 a3       	std	Z+38, r24	; 0x26
     308:	97 a3       	std	Z+39, r25	; 0x27
     30a:	80 ee       	ldi	r24, 0xE0	; 224
     30c:	9e e2       	ldi	r25, 0x2E	; 46
     30e:	80 a3       	std	Z+32, r24	; 0x20
     310:	91 a3       	std	Z+33, r25	; 0x21
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
     316:	08 95       	ret

00000318 <tiny_calibration_maintain>:
     318:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     31c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     320:	81 3e       	cpi	r24, 0xE1	; 225
     322:	2e e2       	ldi	r18, 0x2E	; 46
     324:	92 07       	cpc	r25, r18
     326:	20 f0       	brcs	.+8      	; 0x330 <tiny_calibration_maintain+0x18>
     328:	20 91 6e 22 	lds	r18, 0x226E	; 0x80226e <cali_value_negative_gradient>
     32c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     330:	80 3e       	cpi	r24, 0xE0	; 224
     332:	2e e2       	ldi	r18, 0x2E	; 46
     334:	92 07       	cpc	r25, r18
     336:	20 f4       	brcc	.+8      	; 0x340 <tiny_calibration_maintain+0x28>
     338:	20 91 6b 22 	lds	r18, 0x226B	; 0x80226b <cali_value_positive_gradient>
     33c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     340:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     344:	22 23       	and	r18, r18
     346:	31 f0       	breq	.+12     	; 0x354 <tiny_calibration_maintain+0x3c>
     348:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     352:	1d c0       	rjmp	.+58     	; 0x38e <tiny_calibration_maintain+0x76>
     354:	88 5f       	subi	r24, 0xF8	; 248
     356:	9a 42       	sbci	r25, 0x2A	; 42
     358:	81 3d       	cpi	r24, 0xD1	; 209
     35a:	97 40       	sbci	r25, 0x07	; 7
     35c:	c0 f0       	brcs	.+48     	; 0x38e <tiny_calibration_maintain+0x76>
     35e:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <__data_end>
     362:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <outOfRange>
     366:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <outOfRange+0x1>
     36a:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <outOfRange+0x2>
     36e:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <outOfRange+0x3>
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	a1 1d       	adc	r26, r1
     376:	b1 1d       	adc	r27, r1
     378:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <outOfRange>
     37c:	90 93 bc 20 	sts	0x20BC, r25	; 0x8020bc <outOfRange+0x1>
     380:	a0 93 bd 20 	sts	0x20BD, r26	; 0x8020bd <outOfRange+0x2>
     384:	b0 93 be 20 	sts	0x20BE, r27	; 0x8020be <outOfRange+0x3>
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     38e:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT>
     392:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <median_TRFCNT+0x1>
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	61 f4       	brne	.+24     	; 0x3b2 <tiny_calibration_maintain+0x9a>
     39a:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <global_mode>
     39e:	8f 3f       	cpi	r24, 0xFF	; 255
     3a0:	41 f0       	breq	.+16     	; 0x3b2 <tiny_calibration_maintain+0x9a>
     3a2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3a6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3aa:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT>
     3ae:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <median_TRFCNT+0x1>
     3b2:	08 95       	ret

000003b4 <tiny_calibration_safe_add>:
     3b4:	00 97       	sbiw	r24, 0x00	; 0
     3b6:	09 f4       	brne	.+2      	; 0x3ba <tiny_calibration_safe_add+0x6>
     3b8:	66 c0       	rjmp	.+204    	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
     3ba:	0c f0       	brlt	.+2      	; 0x3be <tiny_calibration_safe_add+0xa>
     3bc:	9c 01       	movw	r18, r24
     3be:	99 23       	and	r25, r25
     3c0:	34 f4       	brge	.+12     	; 0x3ce <tiny_calibration_safe_add+0x1a>
     3c2:	22 27       	eor	r18, r18
     3c4:	33 27       	eor	r19, r19
     3c6:	28 1b       	sub	r18, r24
     3c8:	39 0b       	sbc	r19, r25
     3ca:	51 e0       	ldi	r21, 0x01	; 1
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <tiny_calibration_safe_add+0x1c>
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	e8 e6       	ldi	r30, 0x68	; 104
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	83 81       	ldd	r24, Z+3	; 0x03
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	80 93 6c 22 	sts	0x226C, r24	; 0x80226c <calTemp>
     3dc:	90 93 6d 22 	sts	0x226D, r25	; 0x80226d <calTemp+0x1>
     3e0:	80 91 6c 22 	lds	r24, 0x226C	; 0x80226c <calTemp>
     3e4:	90 91 6d 22 	lds	r25, 0x226D	; 0x80226d <calTemp+0x1>
     3e8:	96 95       	lsr	r25
     3ea:	98 2f       	mov	r25, r24
     3ec:	88 27       	eor	r24, r24
     3ee:	97 95       	ror	r25
     3f0:	87 95       	ror	r24
     3f2:	80 93 6c 22 	sts	0x226C, r24	; 0x80226c <calTemp>
     3f6:	90 93 6d 22 	sts	0x226D, r25	; 0x80226d <calTemp+0x1>
     3fa:	42 81       	ldd	r20, Z+2	; 0x02
     3fc:	80 91 6c 22 	lds	r24, 0x226C	; 0x80226c <calTemp>
     400:	90 91 6d 22 	lds	r25, 0x226D	; 0x80226d <calTemp+0x1>
     404:	84 0f       	add	r24, r20
     406:	91 1d       	adc	r25, r1
     408:	80 93 6c 22 	sts	0x226C, r24	; 0x80226c <calTemp>
     40c:	90 93 6d 22 	sts	0x226D, r25	; 0x80226d <calTemp+0x1>
     410:	00 00       	nop
     412:	80 91 6c 22 	lds	r24, 0x226C	; 0x80226c <calTemp>
     416:	90 91 6d 22 	lds	r25, 0x226D	; 0x80226d <calTemp+0x1>
     41a:	82 17       	cp	r24, r18
     41c:	93 07       	cpc	r25, r19
     41e:	28 f4       	brcc	.+10     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     420:	10 92 6c 22 	sts	0x226C, r1	; 0x80226c <calTemp>
     424:	10 92 6d 22 	sts	0x226D, r1	; 0x80226d <calTemp+0x1>
     428:	08 95       	ret
     42a:	80 91 6c 22 	lds	r24, 0x226C	; 0x80226c <calTemp>
     42e:	90 91 6d 22 	lds	r25, 0x226D	; 0x80226d <calTemp+0x1>
     432:	82 0f       	add	r24, r18
     434:	93 1f       	adc	r25, r19
     436:	81 15       	cp	r24, r1
     438:	90 42       	sbci	r25, 0x20	; 32
     43a:	38 f0       	brcs	.+14     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	9f e1       	ldi	r25, 0x1F	; 31
     440:	80 93 6c 22 	sts	0x226C, r24	; 0x80226c <calTemp>
     444:	90 93 6d 22 	sts	0x226D, r25	; 0x80226d <calTemp+0x1>
     448:	08 95       	ret
     44a:	55 23       	and	r21, r21
     44c:	59 f0       	breq	.+22     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
     44e:	80 91 6c 22 	lds	r24, 0x226C	; 0x80226c <calTemp>
     452:	90 91 6d 22 	lds	r25, 0x226D	; 0x80226d <calTemp+0x1>
     456:	82 1b       	sub	r24, r18
     458:	93 0b       	sbc	r25, r19
     45a:	80 93 6c 22 	sts	0x226C, r24	; 0x80226c <calTemp>
     45e:	90 93 6d 22 	sts	0x226D, r25	; 0x80226d <calTemp+0x1>
     462:	0a c0       	rjmp	.+20     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
     464:	80 91 6c 22 	lds	r24, 0x226C	; 0x80226c <calTemp>
     468:	90 91 6d 22 	lds	r25, 0x226D	; 0x80226d <calTemp+0x1>
     46c:	28 0f       	add	r18, r24
     46e:	39 1f       	adc	r19, r25
     470:	20 93 6c 22 	sts	0x226C, r18	; 0x80226c <calTemp>
     474:	30 93 6d 22 	sts	0x226D, r19	; 0x80226d <calTemp+0x1>
     478:	80 91 6c 22 	lds	r24, 0x226C	; 0x80226c <calTemp>
     47c:	90 91 6d 22 	lds	r25, 0x226D	; 0x80226d <calTemp+0x1>
     480:	8f 77       	andi	r24, 0x7F	; 127
     482:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     486:	08 95       	ret

00000488 <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     48c:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     490:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     494:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     498:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     49c:	9e 01       	movw	r18, r28
     49e:	28 1b       	sub	r18, r24
     4a0:	39 0b       	sbc	r19, r25
     4a2:	20 93 6f 22 	sts	0x226F, r18	; 0x80226f <gradient>
     4a6:	30 93 70 22 	sts	0x2270, r19	; 0x802270 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4aa:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <__data_end>
     4ae:	81 11       	cpse	r24, r1
     4b0:	4d c0       	rjmp	.+154    	; 0x54c <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4b2:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <gradient>
     4b6:	90 91 70 22 	lds	r25, 0x2270	; 0x802270 <gradient+0x1>
     4ba:	8e 3c       	cpi	r24, 0xCE	; 206
     4bc:	9f 4f       	sbci	r25, 0xFF	; 255
     4be:	e4 f4       	brge	.+56     	; 0x4f8 <tiny_calibration_find_values+0x70>
     4c0:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <gradient>
     4c4:	90 91 70 22 	lds	r25, 0x2270	; 0x802270 <gradient+0x1>
     4c8:	8b 36       	cpi	r24, 0x6B	; 107
     4ca:	9f 4f       	sbci	r25, 0xFF	; 255
     4cc:	ac f0       	brlt	.+42     	; 0x4f8 <tiny_calibration_find_values+0x70>
			if(inarow){
     4ce:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     4d2:	88 23       	and	r24, r24
     4d4:	31 f0       	breq	.+12     	; 0x4e2 <tiny_calibration_find_values+0x5a>
				inarow--;
     4d6:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     4da:	81 50       	subi	r24, 0x01	; 1
     4dc:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     4e0:	35 c0       	rjmp	.+106    	; 0x54c <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     4e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4e6:	80 93 6e 22 	sts	0x226E, r24	; 0x80226e <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <__data_end>
				inarow = NUM_INAROW;
     4f0:	8c e0       	ldi	r24, 0x0C	; 12
     4f2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     4f6:	2a c0       	rjmp	.+84     	; 0x54c <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     4f8:	8c e0       	ldi	r24, 0x0C	; 12
     4fa:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     4fe:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <gradient>
     502:	90 91 70 22 	lds	r25, 0x2270	; 0x802270 <gradient+0x1>
     506:	8a 36       	cpi	r24, 0x6A	; 106
     508:	9f 4f       	sbci	r25, 0xFF	; 255
     50a:	1c f0       	brlt	.+6      	; 0x512 <tiny_calibration_find_values+0x8a>
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	02 c0       	rjmp	.+4      	; 0x516 <tiny_calibration_find_values+0x8e>
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <calChange>
     51a:	90 93 6a 22 	sts	0x226A, r25	; 0x80226a <calChange+0x1>
			calChange -= gradient / 48;
     51e:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <gradient>
     522:	90 91 70 22 	lds	r25, 0x2270	; 0x802270 <gradient+0x1>
     526:	20 91 69 22 	lds	r18, 0x2269	; 0x802269 <calChange>
     52a:	30 91 6a 22 	lds	r19, 0x226A	; 0x80226a <calChange+0x1>
     52e:	60 e3       	ldi	r22, 0x30	; 48
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__divmodhi4>
     536:	26 1b       	sub	r18, r22
     538:	37 0b       	sbc	r19, r23
     53a:	20 93 69 22 	sts	0x2269, r18	; 0x802269 <calChange>
     53e:	30 93 6a 22 	sts	0x226A, r19	; 0x80226a <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     542:	80 91 69 22 	lds	r24, 0x2269	; 0x802269 <calChange>
     546:	90 91 6a 22 	lds	r25, 0x226A	; 0x80226a <calChange+0x1>
     54a:	34 df       	rcall	.-408    	; 0x3b4 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     54c:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <__data_end>
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	29 f5       	brne	.+74     	; 0x59e <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     554:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <gradient>
     558:	90 91 70 22 	lds	r25, 0x2270	; 0x802270 <gradient+0x1>
     55c:	c3 97       	sbiw	r24, 0x33	; 51
     55e:	94 f0       	brlt	.+36     	; 0x584 <tiny_calibration_find_values+0xfc>
			if(inarow){
     560:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     564:	88 23       	and	r24, r24
     566:	31 f0       	breq	.+12     	; 0x574 <tiny_calibration_find_values+0xec>
				inarow--;
     568:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     56c:	81 50       	subi	r24, 0x01	; 1
     56e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     572:	15 c0       	rjmp	.+42     	; 0x59e <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     574:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     578:	80 93 6b 22 	sts	0x226B, r24	; 0x80226b <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <__data_end>
     582:	0d c0       	rjmp	.+26     	; 0x59e <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     584:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <gradient>
     588:	90 91 70 22 	lds	r25, 0x2270	; 0x802270 <gradient+0x1>
     58c:	87 39       	cpi	r24, 0x97	; 151
     58e:	91 05       	cpc	r25, r1
     590:	1c f4       	brge	.+6      	; 0x598 <tiny_calibration_find_values+0x110>
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	02 c0       	rjmp	.+4      	; 0x59c <tiny_calibration_find_values+0x114>
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	9f ef       	ldi	r25, 0xFF	; 255
     59c:	0b df       	rcall	.-490    	; 0x3b4 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     59e:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5a2:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5ac:	86 17       	cp	r24, r22
     5ae:	97 07       	cpc	r25, r23
     5b0:	79 f0       	breq	.+30     	; 0x5d0 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5b2:	68 17       	cp	r22, r24
     5b4:	79 07       	cpc	r23, r25
     5b6:	28 f4       	brcc	.+10     	; 0x5c2 <magnitude_difference+0x16>
     5b8:	9c 01       	movw	r18, r24
     5ba:	26 1b       	sub	r18, r22
     5bc:	37 0b       	sbc	r19, r23
     5be:	b9 01       	movw	r22, r18
     5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5c2:	86 17       	cp	r24, r22
     5c4:	97 07       	cpc	r25, r23
     5c6:	18 f4       	brcc	.+6      	; 0x5ce <magnitude_difference+0x22>
     5c8:	68 1b       	sub	r22, r24
     5ca:	79 0b       	sbc	r23, r25
     5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <magnitude_difference+0x28>
     5ce:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	86 2f       	mov	r24, r22
     5d6:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     5d8:	08 95       	ret

000005da <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     5de:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     5e2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     5e6:	89 2b       	or	r24, r25
     5e8:	51 f0       	breq	.+20     	; 0x5fe <tiny_calibration_layer2+0x24>
		layer2_counter--;
     5ea:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     5ee:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     5f8:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     5fc:	65 c0       	rjmp	.+202    	; 0x6c8 <tiny_calibration_layer2+0xee>
	}
	layer2_counter = LAYER2_INTERVAL;
     5fe:	80 e4       	ldi	r24, 0x40	; 64
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     606:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     60a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT>
     60e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <median_TRFCNT+0x1>
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	09 f4       	brne	.+2      	; 0x618 <tiny_calibration_layer2+0x3e>
     616:	58 c0       	rjmp	.+176    	; 0x6c8 <tiny_calibration_layer2+0xee>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     618:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     61c:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	if(magnitude_difference(TRFCNT_temp, median_TRFCNT) > 200){
     620:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <median_TRFCNT>
     624:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <median_TRFCNT+0x1>
     628:	ce 01       	movw	r24, r28
     62a:	c0 df       	rcall	.-128    	; 0x5ac <magnitude_difference>
     62c:	89 3c       	cpi	r24, 0xC9	; 201
     62e:	91 05       	cpc	r25, r1
     630:	00 f1       	brcs	.+64     	; 0x672 <tiny_calibration_layer2+0x98>
		TRFCNT_temp = (TRFCNT_temp + HALFPACKET_SIZE) % PACKET_SIZE;
     632:	ae 01       	movw	r20, r28
     634:	49 58       	subi	r20, 0x89	; 137
     636:	5e 4f       	sbci	r21, 0xFE	; 254
     638:	9a 01       	movw	r18, r20
     63a:	36 95       	lsr	r19
     63c:	27 95       	ror	r18
     63e:	a1 eb       	ldi	r26, 0xB1	; 177
     640:	bb e2       	ldi	r27, 0x2B	; 43
     642:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__umulhisi3>
     646:	ec 01       	movw	r28, r24
     648:	00 24       	eor	r0, r0
     64a:	cc 0f       	add	r28, r28
     64c:	dd 1f       	adc	r29, r29
     64e:	00 1c       	adc	r0, r0
     650:	cc 0f       	add	r28, r28
     652:	dd 1f       	adc	r29, r29
     654:	00 1c       	adc	r0, r0
     656:	cd 2f       	mov	r28, r29
     658:	d0 2d       	mov	r29, r0
     65a:	2e ee       	ldi	r18, 0xEE	; 238
     65c:	32 e0       	ldi	r19, 0x02	; 2
     65e:	c2 9f       	mul	r28, r18
     660:	c0 01       	movw	r24, r0
     662:	c3 9f       	mul	r28, r19
     664:	90 0d       	add	r25, r0
     666:	d2 9f       	mul	r29, r18
     668:	90 0d       	add	r25, r0
     66a:	11 24       	eor	r1, r1
     66c:	ea 01       	movw	r28, r20
     66e:	c8 1b       	sub	r28, r24
     670:	d9 0b       	sbc	r29, r25
	}
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     672:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT>
     676:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <median_TRFCNT+0x1>
     67a:	8c 17       	cp	r24, r28
     67c:	9d 07       	cpc	r25, r29
     67e:	78 f4       	brcc	.+30     	; 0x69e <tiny_calibration_layer2+0xc4>
     680:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <median_TRFCNT>
     684:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <median_TRFCNT+0x1>
     688:	ce 01       	movw	r24, r28
     68a:	90 df       	rcall	.-224    	; 0x5ac <magnitude_difference>
     68c:	02 97       	sbiw	r24, 0x02	; 2
     68e:	38 f0       	brcs	.+14     	; 0x69e <tiny_calibration_layer2+0xc4>
		TC_CALI.PERBUF = 24000;
     690:	80 ec       	ldi	r24, 0xC0	; 192
     692:	9d e5       	ldi	r25, 0x5D	; 93
     694:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     698:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     69c:	15 c0       	rjmp	.+42     	; 0x6c8 <tiny_calibration_layer2+0xee>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     69e:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT>
     6a2:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <median_TRFCNT+0x1>
     6a6:	c8 17       	cp	r28, r24
     6a8:	d9 07       	cpc	r29, r25
     6aa:	70 f4       	brcc	.+28     	; 0x6c8 <tiny_calibration_layer2+0xee>
     6ac:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <median_TRFCNT>
     6b0:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <median_TRFCNT+0x1>
     6b4:	ce 01       	movw	r24, r28
     6b6:	7a df       	rcall	.-268    	; 0x5ac <magnitude_difference>
     6b8:	02 97       	sbiw	r24, 0x02	; 2
     6ba:	30 f0       	brcs	.+12     	; 0x6c8 <tiny_calibration_layer2+0xee>
		TC_CALI.PERBUF = 23999;
     6bc:	8f eb       	ldi	r24, 0xBF	; 191
     6be:	9d e5       	ldi	r25, 0x5D	; 93
     6c0:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6c4:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6ce:	ac 01       	movw	r20, r24
     6d0:	46 0f       	add	r20, r22
     6d2:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6d4:	86 1b       	sub	r24, r22
     6d6:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6d8:	e0 e0       	ldi	r30, 0x00	; 0
     6da:	fa e0       	ldi	r31, 0x0A	; 10
     6dc:	20 a1       	ldd	r18, Z+32	; 0x20
     6de:	31 a1       	ldd	r19, Z+33	; 0x21
     6e0:	24 17       	cp	r18, r20
     6e2:	35 07       	cpc	r19, r21
     6e4:	d8 f7       	brcc	.-10     	; 0x6dc <tiny_calibration_synchronise_phase+0xe>
     6e6:	20 a1       	ldd	r18, Z+32	; 0x20
     6e8:	31 a1       	ldd	r19, Z+33	; 0x21
     6ea:	82 17       	cp	r24, r18
     6ec:	93 07       	cpc	r25, r19
     6ee:	b0 f7       	brcc	.-20     	; 0x6dc <tiny_calibration_synchronise_phase+0xe>
	return;
}
     6f0:	08 95       	ret

000006f2 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     6f2:	e0 e8       	ldi	r30, 0x80	; 128
     6f4:	f6 e0       	ldi	r31, 0x06	; 6
     6f6:	8f e0       	ldi	r24, 0x0F	; 15
     6f8:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     6fa:	85 e0       	ldi	r24, 0x05	; 5
     6fc:	84 83       	std	Z+4, r24	; 0x04
     6fe:	08 95       	ret

00000700 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     700:	08 95       	ret

00000702 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, iso_callback);
     702:	40 91 c6 20 	lds	r20, 0x20C6	; 0x8020c6 <usb_state>
     706:	27 e7       	ldi	r18, 0x77	; 119
     708:	31 e0       	ldi	r19, 0x01	; 1
     70a:	42 9f       	mul	r20, r18
     70c:	c0 01       	movw	r24, r0
     70e:	43 9f       	mul	r20, r19
     710:	90 0d       	add	r25, r0
     712:	11 24       	eor	r1, r1
     714:	41 e8       	ldi	r20, 0x81	; 129
     716:	53 e0       	ldi	r21, 0x03	; 3
     718:	6a ef       	ldi	r22, 0xFA	; 250
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	8a 57       	subi	r24, 0x7A	; 122
     71e:	99 4d       	sbci	r25, 0xD9	; 217
     720:	84 c6       	rjmp	.+3336   	; 0x142a <udi_vendor_iso_in_run>
     722:	08 95       	ret

00000724 <iso_callback2>:
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, iso_callback2);
     724:	40 91 c6 20 	lds	r20, 0x20C6	; 0x8020c6 <usb_state>
     728:	27 e7       	ldi	r18, 0x77	; 119
     72a:	31 e0       	ldi	r19, 0x01	; 1
     72c:	42 9f       	mul	r20, r18
     72e:	c0 01       	movw	r24, r0
     730:	43 9f       	mul	r20, r19
     732:	90 0d       	add	r25, r0
     734:	11 24       	eor	r1, r1
     736:	42 e9       	ldi	r20, 0x92	; 146
     738:	53 e0       	ldi	r21, 0x03	; 3
     73a:	6a ef       	ldi	r22, 0xFA	; 250
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 58       	subi	r24, 0x80	; 128
     740:	98 4d       	sbci	r25, 0xD8	; 216
     742:	7f c6       	rjmp	.+3326   	; 0x1442 <udi_vendor_iso_in_run2>
     744:	08 95       	ret

00000746 <iso_callback3>:
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, iso_callback3);
     746:	40 91 c6 20 	lds	r20, 0x20C6	; 0x8020c6 <usb_state>
     74a:	27 e7       	ldi	r18, 0x77	; 119
     74c:	31 e0       	ldi	r19, 0x01	; 1
     74e:	42 9f       	mul	r20, r18
     750:	c0 01       	movw	r24, r0
     752:	43 9f       	mul	r20, r19
     754:	90 0d       	add	r25, r0
     756:	11 24       	eor	r1, r1
     758:	43 ea       	ldi	r20, 0xA3	; 163
     75a:	53 e0       	ldi	r21, 0x03	; 3
     75c:	6a ef       	ldi	r22, 0xFA	; 250
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	86 58       	subi	r24, 0x86	; 134
     762:	97 4d       	sbci	r25, 0xD7	; 215
     764:	7a c6       	rjmp	.+3316   	; 0x145a <udi_vendor_iso_in_run3>
     766:	08 95       	ret

00000768 <main>:
volatile unsigned char debug_divider = 0;

volatile unsigned int median_TRFCNT = 65535;

int main(void){
	irq_initialize_vectors();
     768:	87 e0       	ldi	r24, 0x07	; 7
     76a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     76e:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     770:	89 dd       	rcall	.-1262   	; 0x284 <tiny_calibration_init>
		
	board_init();
     772:	c6 df       	rcall	.-116    	; 0x700 <board_init>
	udc_start();
     774:	69 d7       	rcall	.+3794   	; 0x1648 <udc_start>
	tiny_dac_setup();
     776:	3b d1       	rcall	.+630    	; 0x9ee <tiny_dac_setup>
	tiny_dma_setup();
     778:	5e d1       	rcall	.+700    	; 0xa36 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	e7 d0       	rcall	.+462    	; 0x94e <tiny_adc_setup>
	tiny_adc_pid_setup();
     780:	d3 d0       	rcall	.+422    	; 0x928 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     782:	8c e0       	ldi	r24, 0x0C	; 12
     784:	c6 d0       	rcall	.+396    	; 0x912 <tiny_adc_ch1setup>
	tiny_timer_setup();
     786:	e7 d4       	rcall	.+2510   	; 0x1156 <tiny_timer_setup>
	tiny_uart_setup();
     788:	a2 d5       	rcall	.+2884   	; 0x12ce <tiny_uart_setup>
	tiny_spi_setup();
     78a:	b9 d5       	rcall	.+2930   	; 0x12fe <tiny_spi_setup>
	tiny_dig_setup();
     78c:	b2 df       	rcall	.-156    	; 0x6f2 <tiny_dig_setup>
     78e:	80 91 72 22 	lds	r24, 0x2272	; 0x802272 <debug_counter>
     792:	90 91 73 22 	lds	r25, 0x2273	; 0x802273 <debug_counter+0x1>
     796:	a0 91 74 22 	lds	r26, 0x2274	; 0x802274 <debug_counter+0x2>
     79a:	b0 91 75 22 	lds	r27, 0x2275	; 0x802275 <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	a1 1d       	adc	r26, r1
     7a2:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	21 ee       	ldi	r18, 0xE1	; 225
     7a8:	92 07       	cpc	r25, r18
     7aa:	25 ef       	ldi	r18, 0xF5	; 245
     7ac:	a2 07       	cpc	r26, r18
     7ae:	25 e0       	ldi	r18, 0x05	; 5
     7b0:	b2 07       	cpc	r27, r18
     7b2:	18 f0       	brcs	.+6      	; 0x7ba <main+0x52>
			debug_counter = 0;
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     7d6:	e3 cf       	rjmp	.-58     	; 0x79e <main+0x36>

000007d8 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     7d8:	08 95       	ret

000007da <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     7da:	08 95       	ret

000007dc <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	cli();
     7dc:	f8 94       	cli
	if(firstFrame){
     7de:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <firstFrame>
     7e2:	88 23       	and	r24, r24
     7e4:	41 f0       	breq	.+16     	; 0x7f6 <main_sof_action+0x1a>
		tiny_calibration_first_sof();
     7e6:	86 dd       	rcall	.-1268   	; 0x2f4 <tiny_calibration_first_sof>
		firstFrame = 0;
     7e8:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <firstFrame>
		tcinit = 1;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <tcinit>
		sei();
     7f2:	78 94       	sei
		return;
     7f4:	08 95       	ret
	}
	else{
		if(tcinit){
     7f6:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <tcinit>
     7fa:	88 23       	and	r24, r24
     7fc:	b9 f1       	breq	.+110    	; 0x86c <main_sof_action+0x90>
			if(calibration_values_found == 0x03){
     7fe:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <__data_end>
     802:	83 30       	cpi	r24, 0x03	; 3
     804:	19 f4       	brne	.+6      	; 0x80c <main_sof_action+0x30>
				tiny_calibration_maintain();
     806:	88 dd       	rcall	.-1264   	; 0x318 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     808:	e8 de       	rcall	.-560    	; 0x5da <tiny_calibration_layer2>
     80a:	01 c0       	rjmp	.+2      	; 0x80e <main_sof_action+0x32>
			} else tiny_calibration_find_values();
     80c:	3d de       	rcall	.-902    	; 0x488 <tiny_calibration_find_values>
			if(debug_divider == DEBUG_DIVISION){
     80e:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <debug_divider>
     812:	8f 37       	cpi	r24, 0x7F	; 127
     814:	31 f5       	brne	.+76     	; 0x862 <main_sof_action+0x86>
				debug_divider = 0;
     816:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <debug_divider>
				cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     81a:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <cntCntCnt>
     81e:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <cntCntCnt+0x1>
     822:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     826:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	ee 59       	subi	r30, 0x9E	; 158
     830:	f3 4d       	sbci	r31, 0xD3	; 211
     832:	80 83       	st	Z, r24
     834:	91 83       	std	Z+1, r25	; 0x01
				if(cntCntCnt == (CNT_CNT_MAX - 1)){
     836:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <cntCntCnt>
     83a:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <cntCntCnt+0x1>
     83e:	8f 3f       	cpi	r24, 0xFF	; 255
     840:	91 05       	cpc	r25, r1
     842:	29 f4       	brne	.+10     	; 0x84e <main_sof_action+0x72>
					cntCntCnt = 0;
     844:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <cntCntCnt>
     848:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <cntCntCnt+0x1>
     84c:	0f c0       	rjmp	.+30     	; 0x86c <main_sof_action+0x90>
				}
				else cntCntCnt++;
     84e:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <cntCntCnt>
     852:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <cntCntCnt+0x1>
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <cntCntCnt>
     85c:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <cntCntCnt+0x1>
     860:	05 c0       	rjmp	.+10     	; 0x86c <main_sof_action+0x90>
			}
			else debug_divider++;
     862:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <debug_divider>
     866:	8f 5f       	subi	r24, 0xFF	; 255
     868:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <debug_divider>
		}
	}
	
	if(debugOnNextEnd){
     86c:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <debugOnNextEnd>
     870:	88 23       	and	r24, r24
     872:	51 f0       	breq	.+20     	; 0x888 <main_sof_action+0xac>
		currentTrfcnt = DMA.CH0.TRFCNT;
     874:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     878:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     87c:	80 93 62 2e 	sts	0x2E62, r24	; 0x802e62 <currentTrfcnt>
     880:	90 93 63 2e 	sts	0x2E63, r25	; 0x802e63 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     884:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <debugOnNextEnd>
	}
	usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     888:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     88c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	27 37       	cpi	r18, 0x77	; 119
     894:	31 40       	sbci	r19, 0x01	; 1
     896:	08 f0       	brcs	.+2      	; 0x89a <main_sof_action+0xbe>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <usb_state>
	sei();
     89e:	78 94       	sei
     8a0:	08 95       	ret

000008a2 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 c9 20 	sts	0x20C9, r24	; 0x8020c9 <main_b_vendor_enable>
	firstFrame = 1;
     8a8:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     8ac:	41 e8       	ldi	r20, 0x81	; 129
     8ae:	53 e0       	ldi	r21, 0x03	; 3
     8b0:	6e ee       	ldi	r22, 0xEE	; 238
     8b2:	72 e0       	ldi	r23, 0x02	; 2
     8b4:	86 e8       	ldi	r24, 0x86	; 134
     8b6:	96 e2       	ldi	r25, 0x26	; 38
     8b8:	b8 d5       	rcall	.+2928   	; 0x142a <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     8ba:	42 e9       	ldi	r20, 0x92	; 146
     8bc:	53 e0       	ldi	r21, 0x03	; 3
     8be:	6e ee       	ldi	r22, 0xEE	; 238
     8c0:	72 e0       	ldi	r23, 0x02	; 2
     8c2:	80 e8       	ldi	r24, 0x80	; 128
     8c4:	97 e2       	ldi	r25, 0x27	; 39
     8c6:	bd d5       	rcall	.+2938   	; 0x1442 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     8c8:	43 ea       	ldi	r20, 0xA3	; 163
     8ca:	53 e0       	ldi	r21, 0x03	; 3
     8cc:	6e ee       	ldi	r22, 0xEE	; 238
     8ce:	72 e0       	ldi	r23, 0x02	; 2
     8d0:	8a e7       	ldi	r24, 0x7A	; 122
     8d2:	98 e2       	ldi	r25, 0x28	; 40
     8d4:	c2 d5       	rcall	.+2948   	; 0x145a <udi_vendor_iso_in_run3>
	return true;
}
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	08 95       	ret

000008da <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     8da:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <main_b_vendor_enable>
     8de:	08 95       	ret

000008e0 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	08 95       	ret

000008e4 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	08 95       	ret

000008e8 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     8e8:	e0 e0       	ldi	r30, 0x00	; 0
     8ea:	f2 e0       	ldi	r31, 0x02	; 2
     8ec:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     8ee:	98 2f       	mov	r25, r24
     8f0:	9c 71       	andi	r25, 0x1C	; 28
     8f2:	93 68       	ori	r25, 0x83	; 131
     8f4:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     8f6:	88 23       	and	r24, r24
     8f8:	1c f4       	brge	.+6      	; 0x900 <tiny_adc_ch0setup+0x18>
     8fa:	90 e1       	ldi	r25, 0x10	; 16
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <tiny_adc_ch0setup+0x1c>
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	89 2b       	or	r24, r25
     906:	e0 e0       	ldi	r30, 0x00	; 0
     908:	f2 e0       	ldi	r31, 0x02	; 2
     90a:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     90c:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     90e:	16 a2       	std	Z+38, r1	; 0x26
     910:	08 95       	ret

00000912 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     912:	e0 e0       	ldi	r30, 0x00	; 0
     914:	f2 e0       	ldi	r31, 0x02	; 2
     916:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     918:	83 68       	ori	r24, 0x83	; 131
     91a:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     91c:	80 e1       	ldi	r24, 0x10	; 16
     91e:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_HI_gc;
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	82 ab       	std	Z+50, r24	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     924:	16 aa       	std	Z+54, r1	; 0x36
     926:	08 95       	ret

00000928 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     928:	e0 e0       	ldi	r30, 0x00	; 0
     92a:	f2 e0       	ldi	r31, 0x02	; 2
     92c:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     92e:	83 e8       	ldi	r24, 0x83	; 131
     930:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     932:	8f e2       	ldi	r24, 0x2F	; 47
     934:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     936:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     938:	16 a6       	std	Z+46, r1	; 0x2e
     93a:	08 95       	ret

0000093c <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     93c:	aa ec       	ldi	r26, 0xCA	; 202
     93e:	b1 e0       	ldi	r27, 0x01	; 1
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     944:	e8 2f       	mov	r30, r24
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     94a:	1c 92       	st	X, r1

	return( result );
}
     94c:	08 95       	ret

0000094e <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     952:	e0 e7       	ldi	r30, 0x70	; 112
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	91 81       	ldd	r25, Z+1	; 0x01
     958:	9d 7f       	andi	r25, 0xFD	; 253
     95a:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     95c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     960:	62 30       	cpi	r22, 0x02	; 2
     962:	31 f1       	breq	.+76     	; 0x9b0 <tiny_adc_setup+0x62>
     964:	e0 e0       	ldi	r30, 0x00	; 0
     966:	f2 e0       	ldi	r31, 0x02	; 2
     968:	9c e1       	ldi	r25, 0x1C	; 28
     96a:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     96c:	90 e4       	ldi	r25, 0x40	; 64
     96e:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     970:	81 11       	cpse	r24, r1
     972:	02 c0       	rjmp	.+4      	; 0x978 <tiny_adc_setup+0x2a>
     974:	80 e4       	ldi	r24, 0x40	; 64
     976:	01 c0       	rjmp	.+2      	; 0x97a <tiny_adc_setup+0x2c>
     978:	80 ec       	ldi	r24, 0xC0	; 192
     97a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     97e:	61 30       	cpi	r22, 0x01	; 1
     980:	11 f0       	breq	.+4      	; 0x986 <tiny_adc_setup+0x38>
     982:	83 e0       	ldi	r24, 0x03	; 3
     984:	01 c0       	rjmp	.+2      	; 0x988 <tiny_adc_setup+0x3a>
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	c0 e0       	ldi	r28, 0x00	; 0
     98a:	d2 e0       	ldi	r29, 0x02	; 2
     98c:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     98e:	80 e2       	ldi	r24, 0x20	; 32
     990:	d5 df       	rcall	.-86     	; 0x93c <ReadCalibrationByte>
     992:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     994:	81 e2       	ldi	r24, 0x21	; 33
     996:	d2 df       	rcall	.-92     	; 0x93c <ReadCalibrationByte>
     998:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     99a:	18 8e       	std	Y+24, r1	; 0x18
     99c:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     9a2:	c2 df       	rcall	.-124    	; 0x928 <tiny_adc_pid_setup>
     9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     9a6:	80 ec       	ldi	r24, 0xC0	; 192
     9a8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	ec cf       	rjmp	.-40     	; 0x988 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     9b0:	e0 e0       	ldi	r30, 0x00	; 0
     9b2:	f2 e0       	ldi	r31, 0x02	; 2
     9b4:	9e e1       	ldi	r25, 0x1E	; 30
     9b6:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     9b8:	90 e4       	ldi	r25, 0x40	; 64
     9ba:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     9bc:	81 11       	cpse	r24, r1
     9be:	f3 cf       	rjmp	.-26     	; 0x9a6 <tiny_adc_setup+0x58>
     9c0:	d9 cf       	rjmp	.-78     	; 0x974 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     9e2:	8f 91       	pop	r24
     9e4:	0f 90       	pop	r0
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	0f 90       	pop	r0
     9ea:	1f 90       	pop	r1
     9ec:	18 95       	reti

000009ee <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     9f2:	e0 e7       	ldi	r30, 0x70	; 112
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	82 81       	ldd	r24, Z+2	; 0x02
     9f8:	8b 7f       	andi	r24, 0xFB	; 251
     9fa:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     9fc:	c0 e2       	ldi	r28, 0x20	; 32
     9fe:	d3 e0       	ldi	r29, 0x03	; 3
     a00:	8d e0       	ldi	r24, 0x0D	; 13
     a02:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     a08:	89 e0       	ldi	r24, 0x09	; 9
     a0a:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     a0c:	83 e3       	ldi	r24, 0x33	; 51
     a0e:	96 df       	rcall	.-212    	; 0x93c <ReadCalibrationByte>
     a10:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     a12:	82 e3       	ldi	r24, 0x32	; 50
     a14:	93 df       	rcall	.-218    	; 0x93c <ReadCalibrationByte>
     a16:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     a18:	87 e3       	ldi	r24, 0x37	; 55
     a1a:	90 df       	rcall	.-224    	; 0x93c <ReadCalibrationByte>
     a1c:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     a1e:	86 e3       	ldi	r24, 0x36	; 54
     a20:	8d df       	rcall	.-230    	; 0x93c <ReadCalibrationByte>
     a22:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     a24:	e0 e2       	ldi	r30, 0x20	; 32
     a26:	f6 e0       	ldi	r31, 0x06	; 6
     a28:	80 81       	ld	r24, Z
     a2a:	83 60       	ori	r24, 0x03	; 3
     a2c:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     a2e:	14 82       	std	Z+4, r1	; 0x04
	
	

     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     a36:	e0 e7       	ldi	r30, 0x70	; 112
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	8e 7f       	andi	r24, 0xFE	; 254
     a3e:	80 83       	st	Z, r24
     a40:	83 e8       	ldi	r24, 0x83	; 131
     a42:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     a46:	08 95       	ret

00000a48 <tiny_dma_flush>:
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	10 8a       	std	Z+16, r1	; 0x10
     a4e:	80 e4       	ldi	r24, 0x40	; 64
     a50:	80 8b       	std	Z+16, r24	; 0x10
     a52:	10 a2       	std	Z+32, r1	; 0x20
     a54:	80 a3       	std	Z+32, r24	; 0x20
     a56:	10 aa       	std	Z+48, r1	; 0x30
     a58:	80 ab       	std	Z+48, r24	; 0x30
     a5a:	e0 e4       	ldi	r30, 0x40	; 64
     a5c:	f1 e0       	ldi	r31, 0x01	; 1
     a5e:	10 82       	st	Z, r1
     a60:	80 83       	st	Z, r24
     a62:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b1_state>
     a66:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <b2_state>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <usb_state>
     a70:	08 95       	ret

00000a72 <tiny_dma_set_mode_0>:
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	f8 94       	cli
     a78:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <global_mode>
     a7c:	e5 df       	rcall	.-54     	; 0xa48 <tiny_dma_flush>
     a7e:	c0 e0       	ldi	r28, 0x00	; 0
     a80:	d1 e0       	ldi	r29, 0x01	; 1
     a82:	1e aa       	std	Y+54, r1	; 0x36
     a84:	84 e2       	ldi	r24, 0x24	; 36
     a86:	88 ab       	std	Y+48, r24	; 0x30
     a88:	19 aa       	std	Y+49, r1	; 0x31
     a8a:	49 e5       	ldi	r20, 0x59	; 89
     a8c:	4a ab       	std	Y+50, r20	; 0x32
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	9b ab       	std	Y+51, r25	; 0x33
     a92:	20 91 0a 20 	lds	r18, 0x200A	; 0x80200a <auxDacBufLen>
     a96:	30 91 0b 20 	lds	r19, 0x200B	; 0x80200b <auxDacBufLen+0x1>
     a9a:	2c ab       	std	Y+52, r18	; 0x34
     a9c:	3d ab       	std	Y+53, r19	; 0x35
     a9e:	26 e8       	ldi	r18, 0x86	; 134
     aa0:	34 e2       	ldi	r19, 0x24	; 36
     aa2:	28 af       	std	Y+56, r18	; 0x38
     aa4:	39 af       	std	Y+57, r19	; 0x39
     aa6:	1a ae       	std	Y+58, r1	; 0x3a
     aa8:	2b e3       	ldi	r18, 0x3B	; 59
     aaa:	2c af       	std	Y+60, r18	; 0x3c
     aac:	23 e0       	ldi	r18, 0x03	; 3
     aae:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     ab2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ab6:	38 a9       	ldd	r19, Y+48	; 0x30
     ab8:	30 68       	ori	r19, 0x80	; 128
     aba:	38 ab       	std	Y+48, r19	; 0x30
     abc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ac0:	e0 e4       	ldi	r30, 0x40	; 64
     ac2:	f1 e0       	ldi	r31, 0x01	; 1
     ac4:	80 83       	st	Z, r24
     ac6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     aca:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ace:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ad2:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <dacBuf_len>
     ad6:	50 91 0d 20 	lds	r21, 0x200D	; 0x80200d <dacBuf_len+0x1>
     ada:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ade:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     ae2:	46 e7       	ldi	r20, 0x76	; 118
     ae4:	52 e2       	ldi	r21, 0x22	; 34
     ae6:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     aea:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     aee:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     af2:	39 e3       	ldi	r19, 0x39	; 57
     af4:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     af8:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     afc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b00:	20 81       	ld	r18, Z
     b02:	20 68       	ori	r18, 0x80	; 128
     b04:	20 83       	st	Z, r18
     b06:	18 8a       	std	Y+16, r1	; 0x10
     b08:	20 e4       	ldi	r18, 0x40	; 64
     b0a:	28 8b       	std	Y+16, r18	; 0x10
     b0c:	88 8b       	std	Y+16, r24	; 0x10
     b0e:	99 8b       	std	Y+17, r25	; 0x11
     b10:	25 e9       	ldi	r18, 0x95	; 149
     b12:	2a 8b       	std	Y+18, r18	; 0x12
     b14:	20 e1       	ldi	r18, 0x10	; 16
     b16:	2b 8b       	std	Y+19, r18	; 0x13
     b18:	2e ee       	ldi	r18, 0xEE	; 238
     b1a:	32 e0       	ldi	r19, 0x02	; 2
     b1c:	2c 8b       	std	Y+20, r18	; 0x14
     b1e:	3d 8b       	std	Y+21, r19	; 0x15
     b20:	88 8f       	std	Y+24, r24	; 0x18
     b22:	99 8f       	std	Y+25, r25	; 0x19
     b24:	1a 8e       	std	Y+26, r1	; 0x1a
     b26:	86 e8       	ldi	r24, 0x86	; 134
     b28:	96 e2       	ldi	r25, 0x26	; 38
     b2a:	8c 8f       	std	Y+28, r24	; 0x1c
     b2c:	9d 8f       	std	Y+29, r25	; 0x1d
     b2e:	1e 8e       	std	Y+30, r1	; 0x1e
     b30:	64 e6       	ldi	r22, 0x64	; 100
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	80 e7       	ldi	r24, 0x70	; 112
     b36:	97 e1       	ldi	r25, 0x17	; 23
     b38:	ca dd       	rcall	.-1132   	; 0x6ce <tiny_calibration_synchronise_phase>
     b3a:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b1_state>
     b3e:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <b2_state>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <usb_state>
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	9f ef       	ldi	r25, 0xFF	; 255
     b4c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT>
     b50:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <median_TRFCNT+0x1>
     b54:	88 89       	ldd	r24, Y+16	; 0x10
     b56:	80 68       	ori	r24, 0x80	; 128
     b58:	88 8b       	std	Y+16, r24	; 0x10
     b5a:	78 94       	sei
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <tiny_dma_set_mode_1>:
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <global_mode>
     b6c:	6d df       	rcall	.-294    	; 0xa48 <tiny_dma_flush>
     b6e:	e0 e0       	ldi	r30, 0x00	; 0
     b70:	f1 e0       	ldi	r31, 0x01	; 1
     b72:	10 aa       	std	Z+48, r1	; 0x30
     b74:	80 e4       	ldi	r24, 0x40	; 64
     b76:	80 ab       	std	Z+48, r24	; 0x30
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	90 ab       	std	Z+48, r25	; 0x30
     b7c:	11 aa       	std	Z+49, r1	; 0x31
     b7e:	12 aa       	std	Z+50, r1	; 0x32
     b80:	5b e4       	ldi	r21, 0x4B	; 75
     b82:	53 ab       	std	Z+51, r21	; 0x33
     b84:	14 aa       	std	Z+52, r1	; 0x34
     b86:	15 aa       	std	Z+53, r1	; 0x35
     b88:	16 aa       	std	Z+54, r1	; 0x36
     b8a:	29 e0       	ldi	r18, 0x09	; 9
     b8c:	30 e2       	ldi	r19, 0x20	; 32
     b8e:	20 af       	std	Z+56, r18	; 0x38
     b90:	31 af       	std	Z+57, r19	; 0x39
     b92:	12 ae       	std	Z+58, r1	; 0x3a
     b94:	40 ea       	ldi	r20, 0xA0	; 160
     b96:	44 af       	std	Z+60, r20	; 0x3c
     b98:	38 e0       	ldi	r19, 0x08	; 8
     b9a:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b9e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ba2:	80 a9       	ldd	r24, Z+48	; 0x30
     ba4:	80 6a       	ori	r24, 0xA0	; 160
     ba6:	80 ab       	std	Z+48, r24	; 0x30
     ba8:	85 e5       	ldi	r24, 0x55	; 85
     baa:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     bae:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     bb2:	a0 e4       	ldi	r26, 0x40	; 64
     bb4:	b1 e0       	ldi	r27, 0x01	; 1
     bb6:	d4 e2       	ldi	r29, 0x24	; 36
     bb8:	dc 93       	st	X, r29
     bba:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bbe:	89 e5       	ldi	r24, 0x59	; 89
     bc0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     bc4:	c2 e0       	ldi	r28, 0x02	; 2
     bc6:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bca:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <auxDacBufLen>
     bce:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <auxDacBufLen+0x1>
     bd2:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bd6:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     bda:	66 e8       	ldi	r22, 0x86	; 134
     bdc:	74 e2       	ldi	r23, 0x24	; 36
     bde:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     be2:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     be6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     bea:	8b e3       	ldi	r24, 0x3B	; 59
     bec:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     bf6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     bfa:	2c 91       	ld	r18, X
     bfc:	20 68       	ori	r18, 0x80	; 128
     bfe:	2c 93       	st	X, r18
     c00:	90 8b       	std	Z+16, r25	; 0x10
     c02:	81 8b       	std	Z+17, r24	; 0x11
     c04:	a1 e9       	ldi	r26, 0x91	; 145
     c06:	a2 8b       	std	Z+18, r26	; 0x12
     c08:	20 e1       	ldi	r18, 0x10	; 16
     c0a:	23 8b       	std	Z+19, r18	; 0x13
     c0c:	67 e7       	ldi	r22, 0x77	; 119
     c0e:	71 e0       	ldi	r23, 0x01	; 1
     c10:	64 8b       	std	Z+20, r22	; 0x14
     c12:	75 8b       	std	Z+21, r23	; 0x15
     c14:	d0 8f       	std	Z+24, r29	; 0x18
     c16:	c1 8f       	std	Z+25, r28	; 0x19
     c18:	12 8e       	std	Z+26, r1	; 0x1a
     c1a:	c6 e8       	ldi	r28, 0x86	; 134
     c1c:	d6 e2       	ldi	r29, 0x26	; 38
     c1e:	c4 8f       	std	Z+28, r28	; 0x1c
     c20:	d5 8f       	std	Z+29, r29	; 0x1d
     c22:	16 8e       	std	Z+30, r1	; 0x1e
     c24:	20 89       	ldd	r18, Z+16	; 0x10
     c26:	20 68       	ori	r18, 0x80	; 128
     c28:	20 8b       	std	Z+16, r18	; 0x10
     c2a:	90 a3       	std	Z+32, r25	; 0x20
     c2c:	81 a3       	std	Z+33, r24	; 0x21
     c2e:	a2 a3       	std	Z+34, r26	; 0x22
     c30:	53 a3       	std	Z+35, r21	; 0x23
     c32:	64 a3       	std	Z+36, r22	; 0x24
     c34:	75 a3       	std	Z+37, r23	; 0x25
     c36:	40 a7       	std	Z+40, r20	; 0x28
     c38:	31 a7       	std	Z+41, r19	; 0x29
     c3a:	12 a6       	std	Z+42, r1	; 0x2a
     c3c:	8d ef       	ldi	r24, 0xFD	; 253
     c3e:	97 e2       	ldi	r25, 0x27	; 39
     c40:	84 a7       	std	Z+44, r24	; 0x2c
     c42:	95 a7       	std	Z+45, r25	; 0x2d
     c44:	16 a6       	std	Z+46, r1	; 0x2e
     c46:	80 a1       	ldd	r24, Z+32	; 0x20
     c48:	80 68       	ori	r24, 0x80	; 128
     c4a:	80 a3       	std	Z+32, r24	; 0x20
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <tiny_dma_set_mode_2>:
     c52:	cf 93       	push	r28
     c54:	f8 94       	cli
     c56:	c2 e0       	ldi	r28, 0x02	; 2
     c58:	c0 93 08 20 	sts	0x2008, r28	; 0x802008 <global_mode>
     c5c:	f5 de       	rcall	.-534    	; 0xa48 <tiny_dma_flush>
     c5e:	e0 e0       	ldi	r30, 0x00	; 0
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	16 aa       	std	Z+54, r1	; 0x36
     c64:	94 e2       	ldi	r25, 0x24	; 36
     c66:	90 ab       	std	Z+48, r25	; 0x30
     c68:	11 aa       	std	Z+49, r1	; 0x31
     c6a:	39 e5       	ldi	r19, 0x59	; 89
     c6c:	32 ab       	std	Z+50, r19	; 0x32
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	83 ab       	std	Z+51, r24	; 0x33
     c72:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <dacBuf_len>
     c76:	50 91 0d 20 	lds	r21, 0x200D	; 0x80200d <dacBuf_len+0x1>
     c7a:	44 ab       	std	Z+52, r20	; 0x34
     c7c:	55 ab       	std	Z+53, r21	; 0x35
     c7e:	46 e7       	ldi	r20, 0x76	; 118
     c80:	52 e2       	ldi	r21, 0x22	; 34
     c82:	40 af       	std	Z+56, r20	; 0x38
     c84:	51 af       	std	Z+57, r21	; 0x39
     c86:	12 ae       	std	Z+58, r1	; 0x3a
     c88:	29 e3       	ldi	r18, 0x39	; 57
     c8a:	24 af       	std	Z+60, r18	; 0x3c
     c8c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c90:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c94:	20 a9       	ldd	r18, Z+48	; 0x30
     c96:	20 68       	ori	r18, 0x80	; 128
     c98:	20 ab       	std	Z+48, r18	; 0x30
     c9a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c9e:	a0 e4       	ldi	r26, 0x40	; 64
     ca0:	b1 e0       	ldi	r27, 0x01	; 1
     ca2:	9c 93       	st	X, r25
     ca4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ca8:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     cac:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     cb0:	20 91 0a 20 	lds	r18, 0x200A	; 0x80200a <auxDacBufLen>
     cb4:	30 91 0b 20 	lds	r19, 0x200B	; 0x80200b <auxDacBufLen+0x1>
     cb8:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     cbc:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     cc0:	26 e8       	ldi	r18, 0x86	; 134
     cc2:	34 e2       	ldi	r19, 0x24	; 36
     cc4:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     cc8:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     ccc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     cd0:	2b e3       	ldi	r18, 0x3B	; 59
     cd2:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     cd6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     cda:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     cde:	2c 91       	ld	r18, X
     ce0:	20 68       	ori	r18, 0x80	; 128
     ce2:	2c 93       	st	X, r18
     ce4:	54 e0       	ldi	r21, 0x04	; 4
     ce6:	50 8b       	std	Z+16, r21	; 0x10
     ce8:	81 8b       	std	Z+17, r24	; 0x11
     cea:	41 e9       	ldi	r20, 0x91	; 145
     cec:	42 8b       	std	Z+18, r20	; 0x12
     cee:	20 e1       	ldi	r18, 0x10	; 16
     cf0:	23 8b       	std	Z+19, r18	; 0x13
     cf2:	27 e7       	ldi	r18, 0x77	; 119
     cf4:	31 e0       	ldi	r19, 0x01	; 1
     cf6:	24 8b       	std	Z+20, r18	; 0x14
     cf8:	35 8b       	std	Z+21, r19	; 0x15
     cfa:	90 8f       	std	Z+24, r25	; 0x18
     cfc:	c1 8f       	std	Z+25, r28	; 0x19
     cfe:	12 8e       	std	Z+26, r1	; 0x1a
     d00:	66 e8       	ldi	r22, 0x86	; 134
     d02:	76 e2       	ldi	r23, 0x26	; 38
     d04:	64 8f       	std	Z+28, r22	; 0x1c
     d06:	75 8f       	std	Z+29, r23	; 0x1d
     d08:	16 8e       	std	Z+30, r1	; 0x1e
     d0a:	90 89       	ldd	r25, Z+16	; 0x10
     d0c:	90 68       	ori	r25, 0x80	; 128
     d0e:	90 8b       	std	Z+16, r25	; 0x10
     d10:	50 a3       	std	Z+32, r21	; 0x20
     d12:	81 a3       	std	Z+33, r24	; 0x21
     d14:	42 a3       	std	Z+34, r20	; 0x22
     d16:	82 e1       	ldi	r24, 0x12	; 18
     d18:	83 a3       	std	Z+35, r24	; 0x23
     d1a:	24 a3       	std	Z+36, r18	; 0x24
     d1c:	35 a3       	std	Z+37, r19	; 0x25
     d1e:	84 e3       	ldi	r24, 0x34	; 52
     d20:	80 a7       	std	Z+40, r24	; 0x28
     d22:	c1 a7       	std	Z+41, r28	; 0x29
     d24:	12 a6       	std	Z+42, r1	; 0x2a
     d26:	8d ef       	ldi	r24, 0xFD	; 253
     d28:	97 e2       	ldi	r25, 0x27	; 39
     d2a:	84 a7       	std	Z+44, r24	; 0x2c
     d2c:	95 a7       	std	Z+45, r25	; 0x2d
     d2e:	16 a6       	std	Z+46, r1	; 0x2e
     d30:	80 a1       	ldd	r24, Z+32	; 0x20
     d32:	80 68       	ori	r24, 0x80	; 128
     d34:	80 a3       	std	Z+32, r24	; 0x20
     d36:	78 94       	sei
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <tiny_dma_set_mode_3>:
     d3c:	cf 93       	push	r28
     d3e:	c3 e0       	ldi	r28, 0x03	; 3
     d40:	c0 93 08 20 	sts	0x2008, r28	; 0x802008 <global_mode>
     d44:	81 de       	rcall	.-766    	; 0xa48 <tiny_dma_flush>
     d46:	e0 e0       	ldi	r30, 0x00	; 0
     d48:	f1 e0       	ldi	r31, 0x01	; 1
     d4a:	10 a2       	std	Z+32, r1	; 0x20
     d4c:	50 e4       	ldi	r21, 0x40	; 64
     d4e:	50 a3       	std	Z+32, r21	; 0x20
     d50:	44 e0       	ldi	r20, 0x04	; 4
     d52:	40 a3       	std	Z+32, r20	; 0x20
     d54:	11 a2       	std	Z+33, r1	; 0x21
     d56:	12 a2       	std	Z+34, r1	; 0x22
     d58:	3b e4       	ldi	r19, 0x4B	; 75
     d5a:	33 a3       	std	Z+35, r19	; 0x23
     d5c:	14 a2       	std	Z+36, r1	; 0x24
     d5e:	15 a2       	std	Z+37, r1	; 0x25
     d60:	16 a2       	std	Z+38, r1	; 0x26
     d62:	89 e0       	ldi	r24, 0x09	; 9
     d64:	90 e2       	ldi	r25, 0x20	; 32
     d66:	80 a7       	std	Z+40, r24	; 0x28
     d68:	91 a7       	std	Z+41, r25	; 0x29
     d6a:	12 a6       	std	Z+42, r1	; 0x2a
     d6c:	20 ea       	ldi	r18, 0xA0	; 160
     d6e:	24 a7       	std	Z+44, r18	; 0x2c
     d70:	98 e0       	ldi	r25, 0x08	; 8
     d72:	95 a7       	std	Z+45, r25	; 0x2d
     d74:	16 a6       	std	Z+46, r1	; 0x2e
     d76:	80 a1       	ldd	r24, Z+32	; 0x20
     d78:	80 6a       	ori	r24, 0xA0	; 160
     d7a:	80 a3       	std	Z+32, r24	; 0x20
     d7c:	85 e5       	ldi	r24, 0x55	; 85
     d7e:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     d82:	16 aa       	std	Z+54, r1	; 0x36
     d84:	74 e2       	ldi	r23, 0x24	; 36
     d86:	70 ab       	std	Z+48, r23	; 0x30
     d88:	11 aa       	std	Z+49, r1	; 0x31
     d8a:	69 e5       	ldi	r22, 0x59	; 89
     d8c:	62 ab       	std	Z+50, r22	; 0x32
     d8e:	c3 ab       	std	Z+51, r28	; 0x33
     d90:	a0 91 0c 20 	lds	r26, 0x200C	; 0x80200c <dacBuf_len>
     d94:	b0 91 0d 20 	lds	r27, 0x200D	; 0x80200d <dacBuf_len+0x1>
     d98:	a4 ab       	std	Z+52, r26	; 0x34
     d9a:	b5 ab       	std	Z+53, r27	; 0x35
     d9c:	a6 e7       	ldi	r26, 0x76	; 118
     d9e:	b2 e2       	ldi	r27, 0x22	; 34
     da0:	a0 af       	std	Z+56, r26	; 0x38
     da2:	b1 af       	std	Z+57, r27	; 0x39
     da4:	12 ae       	std	Z+58, r1	; 0x3a
     da6:	89 e3       	ldi	r24, 0x39	; 57
     da8:	84 af       	std	Z+60, r24	; 0x3c
     daa:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     dae:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     db2:	80 a9       	ldd	r24, Z+48	; 0x30
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	80 ab       	std	Z+48, r24	; 0x30
     db8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     dbc:	a0 e4       	ldi	r26, 0x40	; 64
     dbe:	b1 e0       	ldi	r27, 0x01	; 1
     dc0:	7c 93       	st	X, r23
     dc2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     dc6:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dd0:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <auxDacBufLen>
     dd4:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <auxDacBufLen+0x1>
     dd8:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ddc:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     de0:	66 e8       	ldi	r22, 0x86	; 134
     de2:	74 e2       	ldi	r23, 0x24	; 36
     de4:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     de8:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     dec:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     df0:	8b e3       	ldi	r24, 0x3B	; 59
     df2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     df6:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     dfa:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     dfe:	8c 91       	ld	r24, X
     e00:	80 68       	ori	r24, 0x80	; 128
     e02:	8c 93       	st	X, r24
     e04:	10 8a       	std	Z+16, r1	; 0x10
     e06:	50 8b       	std	Z+16, r21	; 0x10
     e08:	40 8b       	std	Z+16, r20	; 0x10
     e0a:	c1 8b       	std	Z+17, r28	; 0x11
     e0c:	81 e9       	ldi	r24, 0x91	; 145
     e0e:	82 8b       	std	Z+18, r24	; 0x12
     e10:	33 8b       	std	Z+19, r19	; 0x13
     e12:	47 e7       	ldi	r20, 0x77	; 119
     e14:	51 e0       	ldi	r21, 0x01	; 1
     e16:	44 8b       	std	Z+20, r20	; 0x14
     e18:	55 8b       	std	Z+21, r21	; 0x15
     e1a:	20 8f       	std	Z+24, r18	; 0x18
     e1c:	91 8f       	std	Z+25, r25	; 0x19
     e1e:	12 8e       	std	Z+26, r1	; 0x1a
     e20:	86 e8       	ldi	r24, 0x86	; 134
     e22:	96 e2       	ldi	r25, 0x26	; 38
     e24:	84 8f       	std	Z+28, r24	; 0x1c
     e26:	95 8f       	std	Z+29, r25	; 0x1d
     e28:	16 8e       	std	Z+30, r1	; 0x1e
     e2a:	80 89       	ldd	r24, Z+16	; 0x10
     e2c:	80 68       	ori	r24, 0x80	; 128
     e2e:	80 8b       	std	Z+16, r24	; 0x10
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <tiny_dma_set_mode_4>:
     e34:	cf 93       	push	r28
     e36:	c4 e0       	ldi	r28, 0x04	; 4
     e38:	c0 93 08 20 	sts	0x2008, r28	; 0x802008 <global_mode>
     e3c:	05 de       	rcall	.-1014   	; 0xa48 <tiny_dma_flush>
     e3e:	e0 e0       	ldi	r30, 0x00	; 0
     e40:	f1 e0       	ldi	r31, 0x01	; 1
     e42:	10 a2       	std	Z+32, r1	; 0x20
     e44:	80 e4       	ldi	r24, 0x40	; 64
     e46:	80 a3       	std	Z+32, r24	; 0x20
     e48:	c0 a3       	std	Z+32, r28	; 0x20
     e4a:	11 a2       	std	Z+33, r1	; 0x21
     e4c:	12 a2       	std	Z+34, r1	; 0x22
     e4e:	4b e4       	ldi	r20, 0x4B	; 75
     e50:	43 a3       	std	Z+35, r20	; 0x23
     e52:	14 a2       	std	Z+36, r1	; 0x24
     e54:	15 a2       	std	Z+37, r1	; 0x25
     e56:	16 a2       	std	Z+38, r1	; 0x26
     e58:	89 e0       	ldi	r24, 0x09	; 9
     e5a:	90 e2       	ldi	r25, 0x20	; 32
     e5c:	80 a7       	std	Z+40, r24	; 0x28
     e5e:	91 a7       	std	Z+41, r25	; 0x29
     e60:	12 a6       	std	Z+42, r1	; 0x2a
     e62:	60 ea       	ldi	r22, 0xA0	; 160
     e64:	64 a7       	std	Z+44, r22	; 0x2c
     e66:	88 e0       	ldi	r24, 0x08	; 8
     e68:	85 a7       	std	Z+45, r24	; 0x2d
     e6a:	16 a6       	std	Z+46, r1	; 0x2e
     e6c:	90 a1       	ldd	r25, Z+32	; 0x20
     e6e:	90 6a       	ori	r25, 0xA0	; 160
     e70:	90 a3       	std	Z+32, r25	; 0x20
     e72:	95 e5       	ldi	r25, 0x55	; 85
     e74:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     e78:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     e7c:	a0 e4       	ldi	r26, 0x40	; 64
     e7e:	b1 e0       	ldi	r27, 0x01	; 1
     e80:	94 e2       	ldi	r25, 0x24	; 36
     e82:	9c 93       	st	X, r25
     e84:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e88:	99 e5       	ldi	r25, 0x59	; 89
     e8a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e94:	20 91 0a 20 	lds	r18, 0x200A	; 0x80200a <auxDacBufLen>
     e98:	30 91 0b 20 	lds	r19, 0x200B	; 0x80200b <auxDacBufLen+0x1>
     e9c:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ea0:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     ea4:	26 e8       	ldi	r18, 0x86	; 134
     ea6:	34 e2       	ldi	r19, 0x24	; 36
     ea8:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     eac:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     eb0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     eb4:	9b e3       	ldi	r25, 0x3B	; 59
     eb6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     eba:	93 e0       	ldi	r25, 0x03	; 3
     ebc:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     ec0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     ec4:	2c 91       	ld	r18, X
     ec6:	20 68       	ori	r18, 0x80	; 128
     ec8:	2c 93       	st	X, r18
     eca:	c0 8b       	std	Z+16, r28	; 0x10
     ecc:	91 8b       	std	Z+17, r25	; 0x11
     ece:	31 e9       	ldi	r19, 0x91	; 145
     ed0:	32 8b       	std	Z+18, r19	; 0x12
     ed2:	43 8b       	std	Z+19, r20	; 0x13
     ed4:	47 e7       	ldi	r20, 0x77	; 119
     ed6:	51 e0       	ldi	r21, 0x01	; 1
     ed8:	44 8b       	std	Z+20, r20	; 0x14
     eda:	55 8b       	std	Z+21, r21	; 0x15
     edc:	60 8f       	std	Z+24, r22	; 0x18
     ede:	81 8f       	std	Z+25, r24	; 0x19
     ee0:	12 8e       	std	Z+26, r1	; 0x1a
     ee2:	66 e8       	ldi	r22, 0x86	; 134
     ee4:	76 e2       	ldi	r23, 0x26	; 38
     ee6:	64 8f       	std	Z+28, r22	; 0x1c
     ee8:	75 8f       	std	Z+29, r23	; 0x1d
     eea:	16 8e       	std	Z+30, r1	; 0x1e
     eec:	20 89       	ldd	r18, Z+16	; 0x10
     eee:	20 68       	ori	r18, 0x80	; 128
     ef0:	20 8b       	std	Z+16, r18	; 0x10
     ef2:	c0 ab       	std	Z+48, r28	; 0x30
     ef4:	91 ab       	std	Z+49, r25	; 0x31
     ef6:	32 ab       	std	Z+50, r19	; 0x32
     ef8:	9a e4       	ldi	r25, 0x4A	; 74
     efa:	93 ab       	std	Z+51, r25	; 0x33
     efc:	44 ab       	std	Z+52, r20	; 0x34
     efe:	55 ab       	std	Z+53, r21	; 0x35
     f00:	93 ec       	ldi	r25, 0xC3	; 195
     f02:	90 af       	std	Z+56, r25	; 0x38
     f04:	81 af       	std	Z+57, r24	; 0x39
     f06:	12 ae       	std	Z+58, r1	; 0x3a
     f08:	8d ef       	ldi	r24, 0xFD	; 253
     f0a:	97 e2       	ldi	r25, 0x27	; 39
     f0c:	84 af       	std	Z+60, r24	; 0x3c
     f0e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f12:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f16:	80 a9       	ldd	r24, Z+48	; 0x30
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	80 ab       	std	Z+48, r24	; 0x30
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <tiny_dma_set_mode_5>:
     f20:	85 e0       	ldi	r24, 0x05	; 5
     f22:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <global_mode>
     f26:	90 dd       	rcall	.-1248   	; 0xa48 <tiny_dma_flush>
     f28:	e0 e0       	ldi	r30, 0x00	; 0
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	16 aa       	std	Z+54, r1	; 0x36
     f2e:	34 e2       	ldi	r19, 0x24	; 36
     f30:	30 ab       	std	Z+48, r19	; 0x30
     f32:	11 aa       	std	Z+49, r1	; 0x31
     f34:	29 e5       	ldi	r18, 0x59	; 89
     f36:	22 ab       	std	Z+50, r18	; 0x32
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	83 ab       	std	Z+51, r24	; 0x33
     f3c:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <dacBuf_len>
     f40:	50 91 0d 20 	lds	r21, 0x200D	; 0x80200d <dacBuf_len+0x1>
     f44:	44 ab       	std	Z+52, r20	; 0x34
     f46:	55 ab       	std	Z+53, r21	; 0x35
     f48:	46 e7       	ldi	r20, 0x76	; 118
     f4a:	52 e2       	ldi	r21, 0x22	; 34
     f4c:	40 af       	std	Z+56, r20	; 0x38
     f4e:	51 af       	std	Z+57, r21	; 0x39
     f50:	12 ae       	std	Z+58, r1	; 0x3a
     f52:	99 e3       	ldi	r25, 0x39	; 57
     f54:	94 af       	std	Z+60, r25	; 0x3c
     f56:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f5a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f5e:	90 a9       	ldd	r25, Z+48	; 0x30
     f60:	90 68       	ori	r25, 0x80	; 128
     f62:	90 ab       	std	Z+48, r25	; 0x30
     f64:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f68:	e0 e4       	ldi	r30, 0x40	; 64
     f6a:	f1 e0       	ldi	r31, 0x01	; 1
     f6c:	30 83       	st	Z, r19
     f6e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f72:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f76:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f7a:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <dacBuf_len>
     f7e:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <dacBuf_len+0x1>
     f82:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f86:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f8a:	26 e8       	ldi	r18, 0x86	; 134
     f8c:	34 e2       	ldi	r19, 0x24	; 36
     f8e:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f92:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f96:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f9a:	9b e3       	ldi	r25, 0x3B	; 59
     f9c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     fa0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     fa4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     fa8:	80 81       	ld	r24, Z
     faa:	80 68       	ori	r24, 0x80	; 128
     fac:	80 83       	st	Z, r24
     fae:	08 95       	ret

00000fb0 <tiny_dma_set_mode_6>:
     fb0:	86 e0       	ldi	r24, 0x06	; 6
     fb2:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <global_mode>
     fb6:	48 dd       	rcall	.-1392   	; 0xa48 <tiny_dma_flush>
     fb8:	e0 e0       	ldi	r30, 0x00	; 0
     fba:	f1 e0       	ldi	r31, 0x01	; 1
     fbc:	16 aa       	std	Z+54, r1	; 0x36
     fbe:	94 e2       	ldi	r25, 0x24	; 36
     fc0:	90 ab       	std	Z+48, r25	; 0x30
     fc2:	11 aa       	std	Z+49, r1	; 0x31
     fc4:	39 e5       	ldi	r19, 0x59	; 89
     fc6:	32 ab       	std	Z+50, r19	; 0x32
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	83 ab       	std	Z+51, r24	; 0x33
     fcc:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <dacBuf_len>
     fd0:	50 91 0d 20 	lds	r21, 0x200D	; 0x80200d <dacBuf_len+0x1>
     fd4:	44 ab       	std	Z+52, r20	; 0x34
     fd6:	55 ab       	std	Z+53, r21	; 0x35
     fd8:	46 e7       	ldi	r20, 0x76	; 118
     fda:	52 e2       	ldi	r21, 0x22	; 34
     fdc:	40 af       	std	Z+56, r20	; 0x38
     fde:	51 af       	std	Z+57, r21	; 0x39
     fe0:	12 ae       	std	Z+58, r1	; 0x3a
     fe2:	29 e3       	ldi	r18, 0x39	; 57
     fe4:	24 af       	std	Z+60, r18	; 0x3c
     fe6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     fea:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     fee:	20 a9       	ldd	r18, Z+48	; 0x30
     ff0:	20 68       	ori	r18, 0x80	; 128
     ff2:	20 ab       	std	Z+48, r18	; 0x30
     ff4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ff8:	a0 e4       	ldi	r26, 0x40	; 64
     ffa:	b1 e0       	ldi	r27, 0x01	; 1
     ffc:	9c 93       	st	X, r25
     ffe:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1002:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1006:	32 e0       	ldi	r19, 0x02	; 2
    1008:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    100c:	40 91 0a 20 	lds	r20, 0x200A	; 0x80200a <auxDacBufLen>
    1010:	50 91 0b 20 	lds	r21, 0x200B	; 0x80200b <auxDacBufLen+0x1>
    1014:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1018:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    101c:	46 e8       	ldi	r20, 0x86	; 134
    101e:	54 e2       	ldi	r21, 0x24	; 36
    1020:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1024:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1028:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    102c:	2b e3       	ldi	r18, 0x3B	; 59
    102e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1032:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1036:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    103a:	2c 91       	ld	r18, X
    103c:	20 68       	ori	r18, 0x80	; 128
    103e:	2c 93       	st	X, r18
    1040:	10 8a       	std	Z+16, r1	; 0x10
    1042:	20 e4       	ldi	r18, 0x40	; 64
    1044:	20 8b       	std	Z+16, r18	; 0x10
    1046:	24 e0       	ldi	r18, 0x04	; 4
    1048:	20 8b       	std	Z+16, r18	; 0x10
    104a:	81 8b       	std	Z+17, r24	; 0x11
    104c:	81 e9       	ldi	r24, 0x91	; 145
    104e:	82 8b       	std	Z+18, r24	; 0x12
    1050:	80 e1       	ldi	r24, 0x10	; 16
    1052:	83 8b       	std	Z+19, r24	; 0x13
    1054:	4e ee       	ldi	r20, 0xEE	; 238
    1056:	52 e0       	ldi	r21, 0x02	; 2
    1058:	44 8b       	std	Z+20, r20	; 0x14
    105a:	55 8b       	std	Z+21, r21	; 0x15
    105c:	90 8f       	std	Z+24, r25	; 0x18
    105e:	31 8f       	std	Z+25, r19	; 0x19
    1060:	12 8e       	std	Z+26, r1	; 0x1a
    1062:	86 e8       	ldi	r24, 0x86	; 134
    1064:	96 e2       	ldi	r25, 0x26	; 38
    1066:	84 8f       	std	Z+28, r24	; 0x1c
    1068:	95 8f       	std	Z+29, r25	; 0x1d
    106a:	16 8e       	std	Z+30, r1	; 0x1e
    106c:	80 89       	ldd	r24, Z+16	; 0x10
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	80 8b       	std	Z+16, r24	; 0x10
    1072:	08 95       	ret

00001074 <tiny_dma_set_mode_7>:
    1074:	87 e0       	ldi	r24, 0x07	; 7
    1076:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <global_mode>
    107a:	e6 dc       	rcall	.-1588   	; 0xa48 <tiny_dma_flush>
    107c:	e0 e0       	ldi	r30, 0x00	; 0
    107e:	f1 e0       	ldi	r31, 0x01	; 1
    1080:	16 aa       	std	Z+54, r1	; 0x36
    1082:	94 e2       	ldi	r25, 0x24	; 36
    1084:	90 ab       	std	Z+48, r25	; 0x30
    1086:	11 aa       	std	Z+49, r1	; 0x31
    1088:	39 e5       	ldi	r19, 0x59	; 89
    108a:	32 ab       	std	Z+50, r19	; 0x32
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	83 ab       	std	Z+51, r24	; 0x33
    1090:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <dacBuf_len>
    1094:	50 91 0d 20 	lds	r21, 0x200D	; 0x80200d <dacBuf_len+0x1>
    1098:	44 ab       	std	Z+52, r20	; 0x34
    109a:	55 ab       	std	Z+53, r21	; 0x35
    109c:	46 e7       	ldi	r20, 0x76	; 118
    109e:	52 e2       	ldi	r21, 0x22	; 34
    10a0:	40 af       	std	Z+56, r20	; 0x38
    10a2:	51 af       	std	Z+57, r21	; 0x39
    10a4:	12 ae       	std	Z+58, r1	; 0x3a
    10a6:	29 e3       	ldi	r18, 0x39	; 57
    10a8:	24 af       	std	Z+60, r18	; 0x3c
    10aa:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    10ae:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    10b2:	20 a9       	ldd	r18, Z+48	; 0x30
    10b4:	20 68       	ori	r18, 0x80	; 128
    10b6:	20 ab       	std	Z+48, r18	; 0x30
    10b8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    10bc:	a0 e4       	ldi	r26, 0x40	; 64
    10be:	b1 e0       	ldi	r27, 0x01	; 1
    10c0:	9c 93       	st	X, r25
    10c2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    10c6:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    10ca:	32 e0       	ldi	r19, 0x02	; 2
    10cc:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    10d0:	40 91 0a 20 	lds	r20, 0x200A	; 0x80200a <auxDacBufLen>
    10d4:	50 91 0b 20 	lds	r21, 0x200B	; 0x80200b <auxDacBufLen+0x1>
    10d8:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    10dc:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    10e0:	46 e8       	ldi	r20, 0x86	; 134
    10e2:	54 e2       	ldi	r21, 0x24	; 36
    10e4:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    10e8:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    10ec:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    10f0:	2b e3       	ldi	r18, 0x3B	; 59
    10f2:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    10f6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    10fa:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    10fe:	2c 91       	ld	r18, X
    1100:	20 68       	ori	r18, 0x80	; 128
    1102:	2c 93       	st	X, r18
    1104:	10 8a       	std	Z+16, r1	; 0x10
    1106:	20 e4       	ldi	r18, 0x40	; 64
    1108:	20 8b       	std	Z+16, r18	; 0x10
    110a:	25 e0       	ldi	r18, 0x05	; 5
    110c:	20 8b       	std	Z+16, r18	; 0x10
    110e:	81 8b       	std	Z+17, r24	; 0x11
    1110:	81 e9       	ldi	r24, 0x91	; 145
    1112:	82 8b       	std	Z+18, r24	; 0x12
    1114:	80 e1       	ldi	r24, 0x10	; 16
    1116:	83 8b       	std	Z+19, r24	; 0x13
    1118:	4e ee       	ldi	r20, 0xEE	; 238
    111a:	52 e0       	ldi	r21, 0x02	; 2
    111c:	44 8b       	std	Z+20, r20	; 0x14
    111e:	55 8b       	std	Z+21, r21	; 0x15
    1120:	90 8f       	std	Z+24, r25	; 0x18
    1122:	31 8f       	std	Z+25, r19	; 0x19
    1124:	12 8e       	std	Z+26, r1	; 0x1a
    1126:	86 e8       	ldi	r24, 0x86	; 134
    1128:	96 e2       	ldi	r25, 0x26	; 38
    112a:	84 8f       	std	Z+28, r24	; 0x1c
    112c:	95 8f       	std	Z+29, r25	; 0x1d
    112e:	16 8e       	std	Z+30, r1	; 0x1e
    1130:	80 89       	ldd	r24, Z+16	; 0x10
    1132:	80 68       	ori	r24, 0x80	; 128
    1134:	80 8b       	std	Z+16, r24	; 0x10
    1136:	08 95       	ret

00001138 <__vector_6>:
}

ISR(DMA_CH0_vect){
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	8f 93       	push	r24
	DMA.INTFLAGS = 0x01;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
}
    114a:	8f 91       	pop	r24
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    1156:	e0 e7       	ldi	r30, 0x70	; 112
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	83 81       	ldd	r24, Z+3	; 0x03
    115c:	8c 7f       	andi	r24, 0xFC	; 252
    115e:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    1160:	84 81       	ldd	r24, Z+4	; 0x04
    1162:	8c 7f       	andi	r24, 0xFC	; 252
    1164:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1166:	80 81       	ld	r24, Z
    1168:	8d 7f       	andi	r24, 0xFD	; 253
    116a:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    116c:	e0 e8       	ldi	r30, 0x80	; 128
    116e:	f1 e0       	ldi	r31, 0x01	; 1
    1170:	80 ec       	ldi	r24, 0xC0	; 192
    1172:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1174:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1176:	88 ec       	ldi	r24, 0xC8	; 200
    1178:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    117a:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	b8 e0       	ldi	r27, 0x08	; 8
    1180:	34 e0       	ldi	r19, 0x04	; 4
    1182:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1184:	23 e0       	ldi	r18, 0x03	; 3
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	2c 93       	st	X, r18
    118a:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    118c:	14 96       	adiw	r26, 0x04	; 4
    118e:	1c 92       	st	X, r1
    1190:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1192:	85 ed       	ldi	r24, 0xD5	; 213
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	96 96       	adiw	r26, 0x26	; 38
    1198:	8d 93       	st	X+, r24
    119a:	9c 93       	st	X, r25
    119c:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    119e:	16 96       	adiw	r26, 0x06	; 6
    11a0:	1c 92       	st	X, r1
    11a2:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    11a4:	e0 e4       	ldi	r30, 0x40	; 64
    11a6:	f8 e0       	ldi	r31, 0x08	; 8
    11a8:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    11aa:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    11ac:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    11ae:	86 a3       	std	Z+38, r24	; 0x26
    11b0:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    11b2:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    11b4:	e0 e6       	ldi	r30, 0x60	; 96
    11b6:	f6 e0       	ldi	r31, 0x06	; 6
    11b8:	80 81       	ld	r24, Z
    11ba:	80 61       	ori	r24, 0x10	; 16
    11bc:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    11be:	e0 e4       	ldi	r30, 0x40	; 64
    11c0:	f9 e0       	ldi	r31, 0x09	; 9
    11c2:	83 e1       	ldi	r24, 0x13	; 19
    11c4:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    11c6:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    11cc:	a6 a3       	std	Z+38, r26	; 0x26
    11ce:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    11d0:	10 a6       	std	Z+40, r1	; 0x28
    11d2:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 83       	st	Z, r24
    11d8:	08 95       	ret

000011da <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	2f 93       	push	r18
    11e6:	3f 93       	push	r19
    11e8:	4f 93       	push	r20
    11ea:	5f 93       	push	r21
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	ef 93       	push	r30
    11f2:	ff 93       	push	r31
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	1f 92       	push	r1
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    1204:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <global_mode>
    1208:	87 30       	cpi	r24, 0x07	; 7
    120a:	31 f4       	brne	.+12     	; 0x1218 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    120c:	e0 e0       	ldi	r30, 0x00	; 0
    120e:	f2 e0       	ldi	r31, 0x02	; 2
    1210:	84 a5       	ldd	r24, Z+44	; 0x2c
    1212:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    1214:	95 a5       	ldd	r25, Z+45	; 0x2d
    1216:	02 c0       	rjmp	.+4      	; 0x121c <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1218:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    121c:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <PSU_target>
    1220:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    1222:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1226:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	0c f4       	brge	.+2      	; 0x1232 <__vector_83+0x58>
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	99 23       	and	r25, r25
    1234:	c9 f0       	breq	.+50     	; 0x1268 <__vector_83+0x8e>
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	2a 3f       	cpi	r18, 0xFA	; 250
    123a:	37 40       	sbci	r19, 0x07	; 7
    123c:	08 f0       	brcs	.+2      	; 0x1240 <__vector_83+0x66>
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	99 23       	and	r25, r25
    1242:	91 f0       	breq	.+36     	; 0x1268 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    1244:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1248:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    124c:	89 30       	cpi	r24, 0x09	; 9
    124e:	1c f4       	brge	.+6      	; 0x1256 <__vector_83+0x7c>
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <__vector_83+0x80>
    1256:	86 e0       	ldi	r24, 0x06	; 6
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	82 0f       	add	r24, r18
    125c:	93 1f       	adc	r25, r19
    125e:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1262:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1266:	23 c0       	rjmp	.+70     	; 0x12ae <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1268:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    126c:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	8f 3f       	cpi	r24, 0xFF	; 255
    1274:	0c f0       	brlt	.+2      	; 0x1278 <__vector_83+0x9e>
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	99 23       	and	r25, r25
    127a:	c9 f0       	breq	.+50     	; 0x12ae <__vector_83+0xd4>
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	27 30       	cpi	r18, 0x07	; 7
    1280:	31 05       	cpc	r19, r1
    1282:	08 f4       	brcc	.+2      	; 0x1286 <__vector_83+0xac>
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	99 23       	and	r25, r25
    1288:	91 f0       	breq	.+36     	; 0x12ae <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    128a:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    128e:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1292:	88 3f       	cpi	r24, 0xF8	; 248
    1294:	1c f0       	brlt	.+6      	; 0x129c <__vector_83+0xc2>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <__vector_83+0xc6>
    129c:	86 e0       	ldi	r24, 0x06	; 6
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a9 01       	movw	r20, r18
    12a2:	48 1b       	sub	r20, r24
    12a4:	59 0b       	sbc	r21, r25
    12a6:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    12aa:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    12ae:	0f 90       	pop	r0
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    12ce:	e0 e7       	ldi	r30, 0x70	; 112
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	83 81       	ldd	r24, Z+3	; 0x03
    12d4:	8f 7e       	andi	r24, 0xEF	; 239
    12d6:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    12d8:	e0 e4       	ldi	r30, 0x40	; 64
    12da:	f6 e0       	ldi	r31, 0x06	; 6
    12dc:	80 81       	ld	r24, Z
    12de:	8a 6a       	ori	r24, 0xAA	; 170
    12e0:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    12e6:	88 e5       	ldi	r24, 0x58	; 88
    12e8:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    12ea:	e0 ea       	ldi	r30, 0xA0	; 160
    12ec:	f8 e0       	ldi	r31, 0x08	; 8
    12ee:	84 ec       	ldi	r24, 0xC4	; 196
    12f0:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    12f6:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    12f8:	88 e1       	ldi	r24, 0x18	; 24
    12fa:	84 83       	std	Z+4, r24	; 0x04
    12fc:	08 95       	ret

000012fe <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    12fe:	e0 e7       	ldi	r30, 0x70	; 112
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	83 81       	ldd	r24, Z+3	; 0x03
    1304:	87 7f       	andi	r24, 0xF7	; 247
    1306:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1308:	e0 ec       	ldi	r30, 0xC0	; 192
    130a:	f8 e0       	ldi	r31, 0x08	; 8
    130c:	80 e4       	ldi	r24, 0x40	; 64
    130e:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    1310:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1312:	88 e5       	ldi	r24, 0x58	; 88
    1314:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1318:	08 95       	ret

0000131a <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
	asm("nop");
    1324:	00 00       	nop
}
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1330:	9f b7       	in	r25, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	e8 2f       	mov	r30, r24
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	e0 59       	subi	r30, 0x90	; 144
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	60 95       	com	r22
    133e:	80 81       	ld	r24, Z
    1340:	68 23       	and	r22, r24
    1342:	60 83       	st	Z, r22
    1344:	9f bf       	out	0x3f, r25	; 63
    1346:	08 95       	ret

00001348 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1348:	86 30       	cpi	r24, 0x06	; 6
    134a:	11 f0       	breq	.+4      	; 0x1350 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1350:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1352:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1356:	81 fd       	sbrc	r24, 1
    1358:	26 c0       	rjmp	.+76     	; 0x13a6 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    135a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    135c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    135e:	e0 e5       	ldi	r30, 0x50	; 80
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	82 60       	ori	r24, 0x02	; 2
    1366:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1368:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    136a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    136c:	81 ff       	sbrs	r24, 1
    136e:	fd cf       	rjmp	.-6      	; 0x136a <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1370:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1372:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1374:	a0 e5       	ldi	r26, 0x50	; 80
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	16 96       	adiw	r26, 0x06	; 6
    137a:	8c 91       	ld	r24, X
    137c:	16 97       	sbiw	r26, 0x06	; 6
    137e:	89 7f       	andi	r24, 0xF9	; 249
    1380:	16 96       	adiw	r26, 0x06	; 6
    1382:	8c 93       	st	X, r24
    1384:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1386:	e0 e6       	ldi	r30, 0x60	; 96
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 e8       	ldi	r24, 0x80	; 128
    138c:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    138e:	8b eb       	ldi	r24, 0xBB	; 187
    1390:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1392:	16 96       	adiw	r26, 0x06	; 6
    1394:	8c 91       	ld	r24, X
    1396:	16 97       	sbiw	r26, 0x06	; 6
    1398:	84 60       	ori	r24, 0x04	; 4
    139a:	16 96       	adiw	r26, 0x06	; 6
    139c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    139e:	80 81       	ld	r24, Z
    13a0:	81 60       	ori	r24, 0x01	; 1
    13a2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13a4:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    13a6:	63 60       	ori	r22, 0x03	; 3
    13a8:	84 e4       	ldi	r24, 0x44	; 68
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	1a d5       	rcall	.+2612   	; 0x1de2 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    13ae:	60 e4       	ldi	r22, 0x40	; 64
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	be cf       	rjmp	.-132    	; 0x1330 <sysclk_enable_module>
    13b4:	08 95       	ret

000013b6 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    13b6:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udi_vendor_alternate_setting>
    13ba:	08 95       	ret

000013bc <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    13bc:	40 d1       	rcall	.+640    	; 0x163e <udc_get_interface_desc>
    13be:	fc 01       	movw	r30, r24
    13c0:	83 81       	ldd	r24, Z+3	; 0x03
    13c2:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    13c6:	81 11       	cpse	r24, r1
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    13ca:	6b ca       	rjmp	.-2858   	; 0x8a2 <main_vendor_enable>
    13cc:	08 95       	ret
			return false;
		}
	}
	return true;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
}
    13d0:	08 95       	ret

000013d2 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    13d2:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udi_vendor_alternate_setting>
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    13da:	7f ca       	rjmp	.-2818   	; 0x8da <main_vendor_disable>
    13dc:	08 95       	ret

000013de <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    13de:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq>
    13e2:	88 23       	and	r24, r24
    13e4:	4c f4       	brge	.+18     	; 0x13f8 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    13e6:	80 76       	andi	r24, 0x60	; 96
    13e8:	80 34       	cpi	r24, 0x40	; 64
    13ea:	a9 f4       	brne	.+42     	; 0x1416 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    13ec:	80 91 77 24 	lds	r24, 0x2477	; 0x802477 <udd_g_ctrlreq+0x1>
    13f0:	81 11       	cpse	r24, r1
    13f2:	13 c0       	rjmp	.+38     	; 0x141a <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    13f4:	77 ca       	rjmp	.-2834   	; 0x8e4 <main_setup_in_received>
    13f6:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    13f8:	80 76       	andi	r24, 0x60	; 96
    13fa:	80 34       	cpi	r24, 0x40	; 64
    13fc:	81 f4       	brne	.+32     	; 0x141e <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    13fe:	80 91 77 24 	lds	r24, 0x2477	; 0x802477 <udd_g_ctrlreq+0x1>
    1402:	81 11       	cpse	r24, r1
    1404:	0e c0       	rjmp	.+28     	; 0x1422 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1406:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    140a:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    140e:	89 2b       	or	r24, r25
    1410:	51 f0       	breq	.+20     	; 0x1426 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1412:	66 ca       	rjmp	.-2868   	; 0x8e0 <main_setup_out_received>
    1414:	08 95       	ret
		}
	}
	return false; // Not supported request
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	08 95       	ret
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	08 95       	ret
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	08 95       	ret
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	08 95       	ret
    1426:	80 e0       	ldi	r24, 0x00	; 0
}
    1428:	08 95       	ret

0000142a <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    1430:	8a 01       	movw	r16, r20
    1432:	ac 01       	movw	r20, r24
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	81 e8       	ldi	r24, 0x81	; 129
    1438:	0e 94 65 13 	call	0x26ca	; 0x26ca <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	08 95       	ret

00001442 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    1448:	8a 01       	movw	r16, r20
    144a:	ac 01       	movw	r20, r24
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	82 e8       	ldi	r24, 0x82	; 130
    1450:	0e 94 65 13 	call	0x26ca	; 0x26ca <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	08 95       	ret

0000145a <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    1460:	8a 01       	movw	r16, r20
    1462:	ac 01       	movw	r20, r24
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	83 e8       	ldi	r24, 0x83	; 131
    1468:	0e 94 65 13 	call	0x26ca	; 0x26ca <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	08 95       	ret

00001472 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1472:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <udc_ptr_conf>
    1476:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    147a:	01 90       	ld	r0, Z+
    147c:	f0 81       	ld	r31, Z
    147e:	e0 2d       	mov	r30, r0
    1480:	22 81       	ldd	r18, Z+2	; 0x02
    1482:	33 81       	ldd	r19, Z+3	; 0x03
    1484:	2e 0f       	add	r18, r30
    1486:	3f 1f       	adc	r19, r31
    1488:	fc 01       	movw	r30, r24
    148a:	40 81       	ld	r20, Z
    148c:	e4 0f       	add	r30, r20
    148e:	f1 1d       	adc	r31, r1
    1490:	e2 17       	cp	r30, r18
    1492:	f3 07       	cpc	r31, r19
    1494:	b8 f4       	brcc	.+46     	; 0x14c4 <udc_next_desc_in_iface+0x52>
    1496:	81 81       	ldd	r24, Z+1	; 0x01
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	b9 f0       	breq	.+46     	; 0x14ca <udc_next_desc_in_iface+0x58>
    149c:	86 13       	cpse	r24, r22
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <udc_next_desc_in_iface+0x40>
    14a0:	05 c0       	rjmp	.+10     	; 0x14ac <udc_next_desc_in_iface+0x3a>
    14a2:	81 81       	ldd	r24, Z+1	; 0x01
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	a1 f0       	breq	.+40     	; 0x14d0 <udc_next_desc_in_iface+0x5e>
    14a8:	86 13       	cpse	r24, r22
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <udc_next_desc_in_iface+0x40>
    14ac:	8e 2f       	mov	r24, r30
    14ae:	9f 2f       	mov	r25, r31
    14b0:	08 95       	ret
    14b2:	80 81       	ld	r24, Z
    14b4:	e8 0f       	add	r30, r24
    14b6:	f1 1d       	adc	r31, r1
    14b8:	e2 17       	cp	r30, r18
    14ba:	f3 07       	cpc	r31, r19
    14bc:	90 f3       	brcs	.-28     	; 0x14a2 <udc_next_desc_in_iface+0x30>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	08 95       	ret
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	08 95       	ret
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	08 95       	ret
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	08 95       	ret

000014d6 <udc_valid_address>:
    14d6:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    14da:	8f 77       	andi	r24, 0x7F	; 127
    14dc:	0c 94 93 12 	jmp	0x2526	; 0x2526 <udd_set_address>
    14e0:	08 95       	ret

000014e2 <udc_update_iface_desc>:
    14e2:	90 91 d2 20 	lds	r25, 0x20D2	; 0x8020d2 <udc_num_configuration>
    14e6:	99 23       	and	r25, r25
    14e8:	81 f1       	breq	.+96     	; 0x154a <udc_update_iface_desc+0x68>
    14ea:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <udc_ptr_conf>
    14ee:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    14f2:	01 90       	ld	r0, Z+
    14f4:	f0 81       	ld	r31, Z
    14f6:	e0 2d       	mov	r30, r0
    14f8:	94 81       	ldd	r25, Z+4	; 0x04
    14fa:	89 17       	cp	r24, r25
    14fc:	40 f5       	brcc	.+80     	; 0x154e <udc_update_iface_desc+0x6c>
    14fe:	e0 93 cd 20 	sts	0x20CD, r30	; 0x8020cd <udc_ptr_iface>
    1502:	f0 93 ce 20 	sts	0x20CE, r31	; 0x8020ce <udc_ptr_iface+0x1>
    1506:	22 81       	ldd	r18, Z+2	; 0x02
    1508:	33 81       	ldd	r19, Z+3	; 0x03
    150a:	2e 0f       	add	r18, r30
    150c:	3f 1f       	adc	r19, r31
    150e:	e2 17       	cp	r30, r18
    1510:	f3 07       	cpc	r31, r19
    1512:	f8 f4       	brcc	.+62     	; 0x1552 <udc_update_iface_desc+0x70>
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	94 30       	cpi	r25, 0x04	; 4
    1518:	61 f4       	brne	.+24     	; 0x1532 <udc_update_iface_desc+0x50>
    151a:	92 81       	ldd	r25, Z+2	; 0x02
    151c:	98 13       	cpse	r25, r24
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <udc_update_iface_desc+0x50>
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	96 13       	cpse	r25, r22
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <udc_update_iface_desc+0x50>
    1526:	e0 93 cd 20 	sts	0x20CD, r30	; 0x8020cd <udc_ptr_iface>
    152a:	f0 93 ce 20 	sts	0x20CE, r31	; 0x8020ce <udc_ptr_iface+0x1>
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	08 95       	ret
    1532:	90 81       	ld	r25, Z
    1534:	e9 0f       	add	r30, r25
    1536:	f1 1d       	adc	r31, r1
    1538:	e2 17       	cp	r30, r18
    153a:	f3 07       	cpc	r31, r19
    153c:	58 f3       	brcs	.-42     	; 0x1514 <udc_update_iface_desc+0x32>
    153e:	e0 93 cd 20 	sts	0x20CD, r30	; 0x8020cd <udc_ptr_iface>
    1542:	f0 93 ce 20 	sts	0x20CE, r31	; 0x8020ce <udc_ptr_iface+0x1>
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	08 95       	ret
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	08 95       	ret
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	08 95       	ret
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	08 95       	ret

00001556 <udc_iface_disable>:
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	c8 2f       	mov	r28, r24
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	be df       	rcall	.-132    	; 0x14e2 <udc_update_iface_desc>
    1566:	18 2f       	mov	r17, r24
    1568:	88 23       	and	r24, r24
    156a:	81 f1       	breq	.+96     	; 0x15cc <udc_iface_disable+0x76>
    156c:	a0 91 cf 20 	lds	r26, 0x20CF	; 0x8020cf <udc_ptr_conf>
    1570:	b0 91 d0 20 	lds	r27, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    1574:	ec 2f       	mov	r30, r28
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	12 96       	adiw	r26, 0x02	; 2
    157e:	8d 91       	ld	r24, X+
    1580:	9c 91       	ld	r25, X
    1582:	13 97       	sbiw	r26, 0x03	; 3
    1584:	e8 0f       	add	r30, r24
    1586:	f9 1f       	adc	r31, r25
    1588:	e0 80       	ld	r14, Z
    158a:	f1 80       	ldd	r15, Z+1	; 0x01
    158c:	d7 01       	movw	r26, r14
    158e:	16 96       	adiw	r26, 0x06	; 6
    1590:	ed 91       	ld	r30, X+
    1592:	fc 91       	ld	r31, X
    1594:	17 97       	sbiw	r26, 0x07	; 7
    1596:	09 95       	icall
    1598:	68 2f       	mov	r22, r24
    159a:	8c 2f       	mov	r24, r28
    159c:	a2 df       	rcall	.-188    	; 0x14e2 <udc_update_iface_desc>
    159e:	18 2f       	mov	r17, r24
    15a0:	88 23       	and	r24, r24
    15a2:	a1 f0       	breq	.+40     	; 0x15cc <udc_iface_disable+0x76>
    15a4:	c0 91 cd 20 	lds	r28, 0x20CD	; 0x8020cd <udc_ptr_iface>
    15a8:	d0 91 ce 20 	lds	r29, 0x20CE	; 0x8020ce <udc_ptr_iface+0x1>
    15ac:	65 e0       	ldi	r22, 0x05	; 5
    15ae:	ce 01       	movw	r24, r28
    15b0:	60 df       	rcall	.-320    	; 0x1472 <udc_next_desc_in_iface>
    15b2:	ec 01       	movw	r28, r24
    15b4:	89 2b       	or	r24, r25
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <udc_iface_disable+0x6a>
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	0e 94 68 14 	call	0x28d0	; 0x28d0 <udd_ep_free>
    15be:	f6 cf       	rjmp	.-20     	; 0x15ac <udc_iface_disable+0x56>
    15c0:	d7 01       	movw	r26, r14
    15c2:	12 96       	adiw	r26, 0x02	; 2
    15c4:	ed 91       	ld	r30, X+
    15c6:	fc 91       	ld	r31, X
    15c8:	13 97       	sbiw	r26, 0x03	; 3
    15ca:	09 95       	icall
    15cc:	81 2f       	mov	r24, r17
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	08 95       	ret

000015da <udc_iface_enable>:
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	18 2f       	mov	r17, r24
    15e2:	7f df       	rcall	.-258    	; 0x14e2 <udc_update_iface_desc>
    15e4:	88 23       	and	r24, r24
    15e6:	39 f1       	breq	.+78     	; 0x1636 <udc_iface_enable+0x5c>
    15e8:	c0 91 cd 20 	lds	r28, 0x20CD	; 0x8020cd <udc_ptr_iface>
    15ec:	d0 91 ce 20 	lds	r29, 0x20CE	; 0x8020ce <udc_ptr_iface+0x1>
    15f0:	65 e0       	ldi	r22, 0x05	; 5
    15f2:	ce 01       	movw	r24, r28
    15f4:	3e df       	rcall	.-388    	; 0x1472 <udc_next_desc_in_iface>
    15f6:	ec 01       	movw	r28, r24
    15f8:	89 2b       	or	r24, r25
    15fa:	41 f0       	breq	.+16     	; 0x160c <udc_iface_enable+0x32>
    15fc:	4c 81       	ldd	r20, Y+4	; 0x04
    15fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1600:	6b 81       	ldd	r22, Y+3	; 0x03
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	9d d7       	rcall	.+3898   	; 0x2540 <udd_ep_alloc>
    1606:	81 11       	cpse	r24, r1
    1608:	f3 cf       	rjmp	.-26     	; 0x15f0 <udc_iface_enable+0x16>
    160a:	15 c0       	rjmp	.+42     	; 0x1636 <udc_iface_enable+0x5c>
    160c:	a0 91 cf 20 	lds	r26, 0x20CF	; 0x8020cf <udc_ptr_conf>
    1610:	b0 91 d0 20 	lds	r27, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    1614:	e1 2f       	mov	r30, r17
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	12 96       	adiw	r26, 0x02	; 2
    161e:	8d 91       	ld	r24, X+
    1620:	9c 91       	ld	r25, X
    1622:	13 97       	sbiw	r26, 0x03	; 3
    1624:	e8 0f       	add	r30, r24
    1626:	f9 1f       	adc	r31, r25
    1628:	01 90       	ld	r0, Z+
    162a:	f0 81       	ld	r31, Z
    162c:	e0 2d       	mov	r30, r0
    162e:	01 90       	ld	r0, Z+
    1630:	f0 81       	ld	r31, Z
    1632:	e0 2d       	mov	r30, r0
    1634:	09 95       	icall
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	08 95       	ret

0000163e <udc_get_interface_desc>:
    163e:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <udc_ptr_iface>
    1642:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <udc_ptr_iface+0x1>
    1646:	08 95       	ret

00001648 <udc_start>:
    1648:	e9 c6       	rjmp	.+3538   	; 0x241c <udd_enable>
    164a:	08 95       	ret

0000164c <udc_reset>:
    164c:	cf 93       	push	r28
    164e:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <udc_num_configuration>
    1652:	88 23       	and	r24, r24
    1654:	c1 f0       	breq	.+48     	; 0x1686 <udc_reset+0x3a>
    1656:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <udc_ptr_conf>
    165a:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    165e:	01 90       	ld	r0, Z+
    1660:	f0 81       	ld	r31, Z
    1662:	e0 2d       	mov	r30, r0
    1664:	84 81       	ldd	r24, Z+4	; 0x04
    1666:	88 23       	and	r24, r24
    1668:	71 f0       	breq	.+28     	; 0x1686 <udc_reset+0x3a>
    166a:	c0 e0       	ldi	r28, 0x00	; 0
    166c:	8c 2f       	mov	r24, r28
    166e:	73 df       	rcall	.-282    	; 0x1556 <udc_iface_disable>
    1670:	cf 5f       	subi	r28, 0xFF	; 255
    1672:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <udc_ptr_conf>
    1676:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    167a:	01 90       	ld	r0, Z+
    167c:	f0 81       	ld	r31, Z
    167e:	e0 2d       	mov	r30, r0
    1680:	84 81       	ldd	r24, Z+4	; 0x04
    1682:	c8 17       	cp	r28, r24
    1684:	98 f3       	brcs	.-26     	; 0x166c <udc_reset+0x20>
    1686:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <udc_num_configuration>
    168a:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <udc_device_status>
    168e:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <udc_device_status+0x1>
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1696:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1698:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <udc_num_configuration>
    169c:	88 23       	and	r24, r24
    169e:	49 f1       	breq	.+82     	; 0x16f2 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16a0:	a0 91 cf 20 	lds	r26, 0x20CF	; 0x8020cf <udc_ptr_conf>
    16a4:	b0 91 d0 20 	lds	r27, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    16a8:	ed 91       	ld	r30, X+
    16aa:	fc 91       	ld	r31, X
    16ac:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    16ae:	84 81       	ldd	r24, Z+4	; 0x04
    16b0:	88 23       	and	r24, r24
    16b2:	f9 f0       	breq	.+62     	; 0x16f2 <udc_sof_notify+0x5c>
    16b4:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    16b6:	ec 2f       	mov	r30, r28
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	12 96       	adiw	r26, 0x02	; 2
    16c0:	8d 91       	ld	r24, X+
    16c2:	9c 91       	ld	r25, X
    16c4:	13 97       	sbiw	r26, 0x03	; 3
    16c6:	e8 0f       	add	r30, r24
    16c8:	f9 1f       	adc	r31, r25
    16ca:	01 90       	ld	r0, Z+
    16cc:	f0 81       	ld	r31, Z
    16ce:	e0 2d       	mov	r30, r0
    16d0:	00 84       	ldd	r0, Z+8	; 0x08
    16d2:	f1 85       	ldd	r31, Z+9	; 0x09
    16d4:	e0 2d       	mov	r30, r0
    16d6:	30 97       	sbiw	r30, 0x00	; 0
    16d8:	09 f0       	breq	.+2      	; 0x16dc <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    16da:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    16dc:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16de:	a0 91 cf 20 	lds	r26, 0x20CF	; 0x8020cf <udc_ptr_conf>
    16e2:	b0 91 d0 20 	lds	r27, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    16e6:	ed 91       	ld	r30, X+
    16e8:	fc 91       	ld	r31, X
    16ea:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    16ec:	84 81       	ldd	r24, Z+4	; 0x04
    16ee:	c8 17       	cp	r28, r24
    16f0:	10 f3       	brcs	.-60     	; 0x16b6 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    16fe:	e6 e7       	ldi	r30, 0x76	; 118
    1700:	f4 e2       	ldi	r31, 0x24	; 36
    1702:	12 86       	std	Z+10, r1	; 0x0a
    1704:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1706:	14 86       	std	Z+12, r1	; 0x0c
    1708:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    170a:	16 86       	std	Z+14, r1	; 0x0e
    170c:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    170e:	80 81       	ld	r24, Z
    1710:	88 23       	and	r24, r24
    1712:	3c f4       	brge	.+14     	; 0x1722 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1714:	20 91 7c 24 	lds	r18, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    1718:	30 91 7d 24 	lds	r19, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    171c:	23 2b       	or	r18, r19
    171e:	09 f4       	brne	.+2      	; 0x1722 <udc_process_setup+0x2c>
    1720:	54 c3       	rjmp	.+1704   	; 0x1dca <udc_process_setup+0x6d4>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1722:	80 76       	andi	r24, 0x60	; 96
    1724:	80 34       	cpi	r24, 0x40	; 64
    1726:	09 f0       	breq	.+2      	; 0x172a <udc_process_setup+0x34>
    1728:	f2 c0       	rjmp	.+484    	; 0x190e <udc_process_setup+0x218>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    172a:	e0 91 77 24 	lds	r30, 0x2477	; 0x802477 <udd_g_ctrlreq+0x1>
    172e:	8e 2f       	mov	r24, r30
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	fc 01       	movw	r30, r24
    1734:	e0 5a       	subi	r30, 0xA0	; 160
    1736:	f1 09       	sbc	r31, r1
    1738:	e8 30       	cpi	r30, 0x08	; 8
    173a:	f1 05       	cpc	r31, r1
    173c:	08 f0       	brcs	.+2      	; 0x1740 <udc_process_setup+0x4a>
    173e:	de c0       	rjmp	.+444    	; 0x18fc <udc_process_setup+0x206>
    1740:	e2 50       	subi	r30, 0x02	; 2
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <debugOnNextEnd>
    174e:	41 c3       	rjmp	.+1666   	; 0x1dd2 <udc_process_setup+0x6dc>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1750:	e0 e0       	ldi	r30, 0x00	; 0
    1752:	f8 e0       	ldi	r31, 0x08	; 8
    1754:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1756:	c6 e7       	ldi	r28, 0x76	; 118
    1758:	d4 e2       	ldi	r29, 0x24	; 36
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	86 ab       	std	Z+54, r24	; 0x36
    1760:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	8f 70       	andi	r24, 0x0F	; 15
    1766:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1768:	6e 81       	ldd	r22, Y+6	; 0x06
    176a:	7f 81       	ldd	r23, Y+7	; 0x07
    176c:	86 e7       	ldi	r24, 0x76	; 118
    176e:	92 e2       	ldi	r25, 0x22	; 34
    1770:	e0 d6       	rcall	.+3520   	; 0x2532 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	9f 81       	ldd	r25, Y+7	; 0x07
    1776:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <dacBuf_len>
    177a:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <dacBuf_len+0x1>
    177e:	82 17       	cp	r24, r18
    1780:	93 07       	cpc	r25, r19
    1782:	09 f4       	brne	.+2      	; 0x1786 <udc_process_setup+0x90>
    1784:	26 c3       	rjmp	.+1612   	; 0x1dd2 <udc_process_setup+0x6dc>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1786:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <dacBuf_len>
    178a:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <dacBuf_len+0x1>
				switch(global_mode){
    178e:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <global_mode>
    1792:	8e 2f       	mov	r24, r30
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	88 30       	cpi	r24, 0x08	; 8
    1798:	91 05       	cpc	r25, r1
    179a:	08 f0       	brcs	.+2      	; 0x179e <udc_process_setup+0xa8>
    179c:	b1 c0       	rjmp	.+354    	; 0x1900 <udc_process_setup+0x20a>
    179e:	fc 01       	movw	r30, r24
    17a0:	ea 5f       	subi	r30, 0xFA	; 250
    17a2:	fe 4f       	sbci	r31, 0xFE	; 254
    17a4:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    17a8:	64 d9       	rcall	.-3384   	; 0xa72 <tiny_dma_set_mode_0>
    17aa:	13 c3       	rjmp	.+1574   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    17ac:	da d9       	rcall	.-3148   	; 0xb62 <tiny_dma_set_mode_1>
    17ae:	11 c3       	rjmp	.+1570   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    17b0:	50 da       	rcall	.-2912   	; 0xc52 <tiny_dma_set_mode_2>
    17b2:	0f c3       	rjmp	.+1566   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    17b4:	c3 da       	rcall	.-2682   	; 0xd3c <tiny_dma_set_mode_3>
    17b6:	0d c3       	rjmp	.+1562   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    17b8:	3d db       	rcall	.-2438   	; 0xe34 <tiny_dma_set_mode_4>
    17ba:	0b c3       	rjmp	.+1558   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    17bc:	b1 db       	rcall	.-2206   	; 0xf20 <tiny_dma_set_mode_5>
    17be:	09 c3       	rjmp	.+1554   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    17c0:	f7 db       	rcall	.-2066   	; 0xfb0 <tiny_dma_set_mode_6>
    17c2:	07 c3       	rjmp	.+1550   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    17c4:	57 dc       	rcall	.-1874   	; 0x1074 <tiny_dma_set_mode_7>
    17c6:	05 c3       	rjmp	.+1546   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    17c8:	e0 e4       	ldi	r30, 0x40	; 64
    17ca:	f8 e0       	ldi	r31, 0x08	; 8
    17cc:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    17ce:	c6 e7       	ldi	r28, 0x76	; 118
    17d0:	d4 e2       	ldi	r29, 0x24	; 36
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	9b 81       	ldd	r25, Y+3	; 0x03
    17d6:	86 ab       	std	Z+54, r24	; 0x36
    17d8:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	8f 70       	andi	r24, 0x0F	; 15
    17de:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    17e0:	6e 81       	ldd	r22, Y+6	; 0x06
    17e2:	7f 81       	ldd	r23, Y+7	; 0x07
    17e4:	86 e8       	ldi	r24, 0x86	; 134
    17e6:	94 e2       	ldi	r25, 0x24	; 36
    17e8:	a4 d6       	rcall	.+3400   	; 0x2532 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    17ea:	8e 81       	ldd	r24, Y+6	; 0x06
    17ec:	9f 81       	ldd	r25, Y+7	; 0x07
    17ee:	20 91 0a 20 	lds	r18, 0x200A	; 0x80200a <auxDacBufLen>
    17f2:	30 91 0b 20 	lds	r19, 0x200B	; 0x80200b <auxDacBufLen+0x1>
    17f6:	82 17       	cp	r24, r18
    17f8:	93 07       	cpc	r25, r19
    17fa:	09 f4       	brne	.+2      	; 0x17fe <udc_process_setup+0x108>
    17fc:	ea c2       	rjmp	.+1492   	; 0x1dd2 <udc_process_setup+0x6dc>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    17fe:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <auxDacBufLen>
    1802:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <auxDacBufLen+0x1>
				switch(global_mode){
    1806:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <global_mode>
    180a:	8e 2f       	mov	r24, r30
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	88 30       	cpi	r24, 0x08	; 8
    1810:	91 05       	cpc	r25, r1
    1812:	08 f0       	brcs	.+2      	; 0x1816 <udc_process_setup+0x120>
    1814:	77 c0       	rjmp	.+238    	; 0x1904 <udc_process_setup+0x20e>
    1816:	fc 01       	movw	r30, r24
    1818:	e2 5f       	subi	r30, 0xF2	; 242
    181a:	fe 4f       	sbci	r31, 0xFE	; 254
    181c:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1820:	28 d9       	rcall	.-3504   	; 0xa72 <tiny_dma_set_mode_0>
    1822:	d7 c2       	rjmp	.+1454   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1824:	9e d9       	rcall	.-3268   	; 0xb62 <tiny_dma_set_mode_1>
    1826:	d5 c2       	rjmp	.+1450   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1828:	14 da       	rcall	.-3032   	; 0xc52 <tiny_dma_set_mode_2>
    182a:	d3 c2       	rjmp	.+1446   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    182c:	87 da       	rcall	.-2802   	; 0xd3c <tiny_dma_set_mode_3>
    182e:	d1 c2       	rjmp	.+1442   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1830:	01 db       	rcall	.-2558   	; 0xe34 <tiny_dma_set_mode_4>
    1832:	cf c2       	rjmp	.+1438   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1834:	75 db       	rcall	.-2326   	; 0xf20 <tiny_dma_set_mode_5>
    1836:	cd c2       	rjmp	.+1434   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1838:	bb db       	rcall	.-2186   	; 0xfb0 <tiny_dma_set_mode_6>
    183a:	cb c2       	rjmp	.+1430   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    183c:	1b dc       	rcall	.-1994   	; 0x1074 <tiny_dma_set_mode_7>
    183e:	c9 c2       	rjmp	.+1426   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1840:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1844:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1848:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    184c:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <PSU_target>
    1850:	c0 c2       	rjmp	.+1408   	; 0x1dd2 <udc_process_setup+0x6dc>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1852:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    1856:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    185a:	bb c2       	rjmp	.+1398   	; 0x1dd2 <udc_process_setup+0x6dc>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    185c:	e0 91 78 24 	lds	r30, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    1860:	f0 91 79 24 	lds	r31, 0x2479	; 0x802479 <udd_g_ctrlreq+0x3>
    1864:	e8 30       	cpi	r30, 0x08	; 8
    1866:	f1 05       	cpc	r31, r1
    1868:	08 f0       	brcs	.+2      	; 0x186c <udc_process_setup+0x176>
    186a:	4e c0       	rjmp	.+156    	; 0x1908 <udc_process_setup+0x212>
    186c:	ea 5e       	subi	r30, 0xEA	; 234
    186e:	fe 4f       	sbci	r31, 0xFE	; 254
    1870:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	6a d8       	rcall	.-3884   	; 0x94e <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    187a:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x4>
    187e:	34 d8       	rcall	.-3992   	; 0x8e8 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    1880:	f8 d8       	rcall	.-3600   	; 0xa72 <tiny_dma_set_mode_0>
    1882:	a7 c2       	rjmp	.+1358   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	62 d8       	rcall	.-3900   	; 0x94e <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    188a:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x4>
    188e:	2c d8       	rcall	.-4008   	; 0x8e8 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1890:	68 d9       	rcall	.-3376   	; 0xb62 <tiny_dma_set_mode_1>
    1892:	9f c2       	rjmp	.+1342   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	5a d8       	rcall	.-3916   	; 0x94e <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    189a:	c6 e7       	ldi	r28, 0x76	; 118
    189c:	d4 e2       	ldi	r29, 0x24	; 36
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	23 d8       	rcall	.-4026   	; 0x8e8 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	36 d8       	rcall	.-3988   	; 0x912 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    18a6:	d5 d9       	rcall	.-3158   	; 0xc52 <tiny_dma_set_mode_2>
    18a8:	94 c2       	rjmp	.+1320   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    18aa:	48 da       	rcall	.-2928   	; 0xd3c <tiny_dma_set_mode_3>
    18ac:	92 c2       	rjmp	.+1316   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    18ae:	c2 da       	rcall	.-2684   	; 0xe34 <tiny_dma_set_mode_4>
    18b0:	90 c2       	rjmp	.+1312   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	4b d8       	rcall	.-3946   	; 0x94e <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18b8:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x4>
    18bc:	15 d8       	rcall	.-4054   	; 0x8e8 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    18be:	30 db       	rcall	.-2464   	; 0xf20 <tiny_dma_set_mode_5>
    18c0:	88 c2       	rjmp	.+1296   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	43 d8       	rcall	.-3962   	; 0x94e <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    18c8:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x4>
    18cc:	0d d8       	rcall	.-4070   	; 0x8e8 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    18ce:	70 db       	rcall	.-2336   	; 0xfb0 <tiny_dma_set_mode_6>
    18d0:	80 c2       	rjmp	.+1280   	; 0x1dd2 <udc_process_setup+0x6dc>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	3b d8       	rcall	.-3978   	; 0x94e <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    18d8:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x4>
    18dc:	80 68       	ori	r24, 0x80	; 128
    18de:	04 d8       	rcall	.-4088   	; 0x8e8 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    18e0:	c9 db       	rcall	.-2158   	; 0x1074 <tiny_dma_set_mode_7>
    18e2:	77 c2       	rjmp	.+1262   	; 0x1dd2 <udc_process_setup+0x6dc>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    18e4:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    18e8:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    18ec:	72 c2       	rjmp	.+1252   	; 0x1dd2 <udc_process_setup+0x6dc>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    18ee:	e9 e7       	ldi	r30, 0x79	; 121
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	88 ed       	ldi	r24, 0xD8	; 216
    18f6:	f8 94       	cli
    18f8:	84 bf       	out	0x34, r24	; 52
    18fa:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	03 c0       	rjmp	.+6      	; 0x190a <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	01 c0       	rjmp	.+2      	; 0x190a <udc_process_setup+0x214>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    1908:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    190a:	81 11       	cpse	r24, r1
    190c:	65 c2       	rjmp	.+1226   	; 0x1dd8 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    190e:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq>
    1912:	98 2f       	mov	r25, r24
    1914:	90 76       	andi	r25, 0x60	; 96
    1916:	09 f0       	breq	.+2      	; 0x191a <udc_process_setup+0x224>
    1918:	e1 c1       	rjmp	.+962    	; 0x1cdc <udc_process_setup+0x5e6>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    191a:	88 23       	and	r24, r24
    191c:	0c f0       	brlt	.+2      	; 0x1920 <udc_process_setup+0x22a>
    191e:	05 c1       	rjmp	.+522    	; 0x1b2a <udc_process_setup+0x434>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1920:	20 91 7c 24 	lds	r18, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    1924:	30 91 7d 24 	lds	r19, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    1928:	21 15       	cp	r18, r1
    192a:	31 05       	cpc	r19, r1
    192c:	09 f4       	brne	.+2      	; 0x1930 <udc_process_setup+0x23a>
    192e:	d6 c1       	rjmp	.+940    	; 0x1cdc <udc_process_setup+0x5e6>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1930:	8f 71       	andi	r24, 0x1F	; 31
    1932:	09 f0       	breq	.+2      	; 0x1936 <udc_process_setup+0x240>
    1934:	a3 c0       	rjmp	.+326    	; 0x1a7c <udc_process_setup+0x386>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1936:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <udd_g_ctrlreq+0x1>
    193a:	96 30       	cpi	r25, 0x06	; 6
    193c:	79 f0       	breq	.+30     	; 0x195c <udc_process_setup+0x266>
    193e:	98 30       	cpi	r25, 0x08	; 8
    1940:	09 f4       	brne	.+2      	; 0x1944 <udc_process_setup+0x24e>
    1942:	92 c0       	rjmp	.+292    	; 0x1a68 <udc_process_setup+0x372>
    1944:	91 11       	cpse	r25, r1
    1946:	9a c0       	rjmp	.+308    	; 0x1a7c <udc_process_setup+0x386>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	09 f0       	breq	.+2      	; 0x1950 <udc_process_setup+0x25a>
    194e:	c6 c1       	rjmp	.+908    	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1950:	62 e0       	ldi	r22, 0x02	; 2
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	86 ed       	ldi	r24, 0xD6	; 214
    1956:	90 e2       	ldi	r25, 0x20	; 32
    1958:	ec d5       	rcall	.+3032   	; 0x2532 <udd_set_setup_payload>
    195a:	3d c2       	rjmp	.+1146   	; 0x1dd6 <udc_process_setup+0x6e0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    195c:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    1960:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1964:	29 2f       	mov	r18, r25
    1966:	33 27       	eor	r19, r19
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	a9 f0       	breq	.+42     	; 0x1998 <udc_process_setup+0x2a2>
    196e:	24 f4       	brge	.+8      	; 0x1978 <udc_process_setup+0x282>
    1970:	21 30       	cpi	r18, 0x01	; 1
    1972:	31 05       	cpc	r19, r1
    1974:	41 f0       	breq	.+16     	; 0x1986 <udc_process_setup+0x290>
    1976:	a9 c1       	rjmp	.+850    	; 0x1cca <udc_process_setup+0x5d4>
    1978:	23 30       	cpi	r18, 0x03	; 3
    197a:	31 05       	cpc	r19, r1
    197c:	d9 f1       	breq	.+118    	; 0x19f4 <udc_process_setup+0x2fe>
    197e:	2f 30       	cpi	r18, 0x0F	; 15
    1980:	31 05       	cpc	r19, r1
    1982:	51 f1       	breq	.+84     	; 0x19d8 <udc_process_setup+0x2e2>
    1984:	a2 c1       	rjmp	.+836    	; 0x1cca <udc_process_setup+0x5d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1986:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <udc_config>
    198a:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    198e:	dc 01       	movw	r26, r24
    1990:	6c 91       	ld	r22, X
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	ce d5       	rcall	.+2972   	; 0x2532 <udd_set_setup_payload>
    1996:	59 c0       	rjmp	.+178    	; 0x1a4a <udc_process_setup+0x354>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1998:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <udc_config>
    199c:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <udc_config+0x1>
    19a0:	21 89       	ldd	r18, Z+17	; 0x11
    19a2:	82 17       	cp	r24, r18
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <udc_process_setup+0x2b2>
    19a6:	9a c1       	rjmp	.+820    	; 0x1cdc <udc_process_setup+0x5e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    19a8:	99 27       	eor	r25, r25
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config+0x2>
    19b6:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x3>
    19ba:	e8 0f       	add	r30, r24
    19bc:	f9 1f       	adc	r31, r25
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    19c2:	fc 01       	movw	r30, r24
    19c4:	62 81       	ldd	r22, Z+2	; 0x02
    19c6:	73 81       	ldd	r23, Z+3	; 0x03
    19c8:	b4 d5       	rcall	.+2920   	; 0x2532 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    19ca:	e0 91 7e 24 	lds	r30, 0x247E	; 0x80247e <udd_g_ctrlreq+0x8>
    19ce:	f0 91 7f 24 	lds	r31, 0x247F	; 0x80247f <udd_g_ctrlreq+0x9>
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	81 83       	std	Z+1, r24	; 0x01
    19d6:	39 c0       	rjmp	.+114    	; 0x1a4a <udc_process_setup+0x354>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    19d8:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <udc_config+0x4>
    19dc:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <udc_config+0x5>
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <udc_process_setup+0x2f0>
    19e4:	7b c1       	rjmp	.+758    	; 0x1cdc <udc_process_setup+0x5e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    19e6:	dc 01       	movw	r26, r24
    19e8:	12 96       	adiw	r26, 0x02	; 2
    19ea:	6d 91       	ld	r22, X+
    19ec:	7c 91       	ld	r23, X
    19ee:	13 97       	sbiw	r26, 0x03	; 3
    19f0:	a0 d5       	rcall	.+2880   	; 0x2532 <udd_set_setup_payload>
    19f2:	2b c0       	rjmp	.+86     	; 0x1a4a <udc_process_setup+0x354>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    19f4:	99 27       	eor	r25, r25
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	91 05       	cpc	r25, r1
    19fa:	71 f0       	breq	.+28     	; 0x1a18 <udc_process_setup+0x322>
    19fc:	38 f0       	brcs	.+14     	; 0x1a0c <udc_process_setup+0x316>
    19fe:	02 97       	sbiw	r24, 0x02	; 2
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <udc_process_setup+0x30e>
    1a02:	6c c1       	rjmp	.+728    	; 0x1cdc <udc_process_setup+0x5e6>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1a04:	82 e9       	ldi	r24, 0x92	; 146
    1a06:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a08:	28 e1       	ldi	r18, 0x18	; 24
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <udc_process_setup+0x328>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a0c:	64 e0       	ldi	r22, 0x04	; 4
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	86 eb       	ldi	r24, 0xB6	; 182
    1a12:	90 e2       	ldi	r25, 0x20	; 32
    1a14:	8e d5       	rcall	.+2844   	; 0x2532 <udd_set_setup_payload>
    1a16:	19 c0       	rjmp	.+50     	; 0x1a4a <udc_process_setup+0x354>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1a18:	8b ea       	ldi	r24, 0xAB	; 171
    1a1a:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a1c:	29 e0       	ldi	r18, 0x09	; 9
    1a1e:	38 2f       	mov	r19, r24
    1a20:	a2 e6       	ldi	r26, 0x62	; 98
    1a22:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a24:	e8 2f       	mov	r30, r24
    1a26:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1a28:	81 91       	ld	r24, Z+
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	8d 93       	st	X+, r24
    1a2e:	9d 93       	st	X+, r25
    1a30:	8e 2f       	mov	r24, r30
    1a32:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1a34:	82 17       	cp	r24, r18
    1a36:	c0 f3       	brcs	.-16     	; 0x1a28 <udc_process_setup+0x332>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1a38:	62 2f       	mov	r22, r18
    1a3a:	66 0f       	add	r22, r22
    1a3c:	6e 5f       	subi	r22, 0xFE	; 254
    1a3e:	60 93 60 20 	sts	0x2060, r22	; 0x802060 <udc_string_desc>
		udd_set_setup_payload(
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	80 e6       	ldi	r24, 0x60	; 96
    1a46:	90 e2       	ldi	r25, 0x20	; 32
    1a48:	74 d5       	rcall	.+2792   	; 0x2532 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1a4a:	e6 e7       	ldi	r30, 0x76	; 118
    1a4c:	f4 e2       	ldi	r31, 0x24	; 36
    1a4e:	86 81       	ldd	r24, Z+6	; 0x06
    1a50:	97 81       	ldd	r25, Z+7	; 0x07
    1a52:	22 85       	ldd	r18, Z+10	; 0x0a
    1a54:	33 85       	ldd	r19, Z+11	; 0x0b
    1a56:	82 17       	cp	r24, r18
    1a58:	93 07       	cpc	r25, r19
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <udc_process_setup+0x368>
    1a5c:	bc c1       	rjmp	.+888    	; 0x1dd6 <udc_process_setup+0x6e0>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1a5e:	80 93 80 24 	sts	0x2480, r24	; 0x802480 <udd_g_ctrlreq+0xa>
    1a62:	90 93 81 24 	sts	0x2481, r25	; 0x802481 <udd_g_ctrlreq+0xb>
    1a66:	b7 c1       	rjmp	.+878    	; 0x1dd6 <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a68:	21 30       	cpi	r18, 0x01	; 1
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <udc_process_setup+0x37a>
    1a6e:	36 c1       	rjmp	.+620    	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	82 ed       	ldi	r24, 0xD2	; 210
    1a76:	90 e2       	ldi	r25, 0x20	; 32
    1a78:	5c d5       	rcall	.+2744   	; 0x2532 <udd_set_setup_payload>
    1a7a:	ad c1       	rjmp	.+858    	; 0x1dd6 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	e1 f5       	brne	.+120    	; 0x1af8 <udc_process_setup+0x402>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a80:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <udd_g_ctrlreq+0x1>
    1a84:	9a 30       	cpi	r25, 0x0A	; 10
    1a86:	c1 f5       	brne	.+112    	; 0x1af8 <udc_process_setup+0x402>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1a88:	21 30       	cpi	r18, 0x01	; 1
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <udc_process_setup+0x39a>
    1a8e:	26 c1       	rjmp	.+588    	; 0x1cdc <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a90:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <udc_num_configuration>
    1a94:	88 23       	and	r24, r24
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <udc_process_setup+0x3a4>
    1a98:	21 c1       	rjmp	.+578    	; 0x1cdc <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a9a:	c0 91 7a 24 	lds	r28, 0x247A	; 0x80247a <udd_g_ctrlreq+0x4>
    1a9e:	d0 91 7b 24 	lds	r29, 0x247B	; 0x80247b <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1aa2:	00 91 cf 20 	lds	r16, 0x20CF	; 0x8020cf <udc_ptr_conf>
    1aa6:	10 91 d0 20 	lds	r17, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    1aaa:	d8 01       	movw	r26, r16
    1aac:	ed 91       	ld	r30, X+
    1aae:	fc 91       	ld	r31, X
    1ab0:	84 81       	ldd	r24, Z+4	; 0x04
    1ab2:	c8 17       	cp	r28, r24
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <udc_process_setup+0x3c2>
    1ab6:	12 c1       	rjmp	.+548    	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	8c 2f       	mov	r24, r28
    1abc:	12 dd       	rcall	.-1500   	; 0x14e2 <udc_update_iface_desc>
    1abe:	88 23       	and	r24, r24
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <udc_process_setup+0x3ce>
    1ac2:	0c c1       	rjmp	.+536    	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	99 27       	eor	r25, r25
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	d8 01       	movw	r26, r16
    1ace:	12 96       	adiw	r26, 0x02	; 2
    1ad0:	ed 91       	ld	r30, X+
    1ad2:	fc 91       	ld	r31, X
    1ad4:	13 97       	sbiw	r26, 0x03	; 3
    1ad6:	e8 0f       	add	r30, r24
    1ad8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1ada:	01 90       	ld	r0, Z+
    1adc:	f0 81       	ld	r31, Z
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	86 81       	ldd	r24, Z+6	; 0x06
    1ae2:	97 81       	ldd	r25, Z+7	; 0x07
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	09 95       	icall
    1ae8:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	84 ed       	ldi	r24, 0xD4	; 212
    1af2:	90 e2       	ldi	r25, 0x20	; 32
    1af4:	1e d5       	rcall	.+2620   	; 0x2532 <udd_set_setup_payload>
    1af6:	6f c1       	rjmp	.+734    	; 0x1dd6 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	09 f0       	breq	.+2      	; 0x1afe <udc_process_setup+0x408>
    1afc:	ef c0       	rjmp	.+478    	; 0x1cdc <udc_process_setup+0x5e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1afe:	80 91 77 24 	lds	r24, 0x2477	; 0x802477 <udd_g_ctrlreq+0x1>
    1b02:	81 11       	cpse	r24, r1
    1b04:	e4 c0       	rjmp	.+456    	; 0x1cce <udc_process_setup+0x5d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <udc_process_setup+0x418>
    1b0c:	e7 c0       	rjmp	.+462    	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1b0e:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x4>
    1b12:	8b d5       	rcall	.+2838   	; 0x262a <udd_ep_is_halted>
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <udc_ep_status.5524>
    1b1a:	90 93 cc 20 	sts	0x20CC, r25	; 0x8020cc <udc_ep_status.5524+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	8b ec       	ldi	r24, 0xCB	; 203
    1b24:	90 e2       	ldi	r25, 0x20	; 32
    1b26:	05 d5       	rcall	.+2570   	; 0x2532 <udd_set_setup_payload>
    1b28:	56 c1       	rjmp	.+684    	; 0x1dd6 <udc_process_setup+0x6e0>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b2a:	8f 71       	andi	r24, 0x1F	; 31
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <udc_process_setup+0x43a>
    1b2e:	83 c0       	rjmp	.+262    	; 0x1c36 <udc_process_setup+0x540>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b30:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <udd_g_ctrlreq+0x1>
    1b34:	93 30       	cpi	r25, 0x03	; 3
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <udc_process_setup+0x444>
    1b38:	cc c0       	rjmp	.+408    	; 0x1cd2 <udc_process_setup+0x5dc>
    1b3a:	18 f4       	brcc	.+6      	; 0x1b42 <udc_process_setup+0x44c>
    1b3c:	91 30       	cpi	r25, 0x01	; 1
    1b3e:	a1 f0       	breq	.+40     	; 0x1b68 <udc_process_setup+0x472>
    1b40:	7a c0       	rjmp	.+244    	; 0x1c36 <udc_process_setup+0x540>
    1b42:	95 30       	cpi	r25, 0x05	; 5
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <udc_process_setup+0x456>
    1b46:	99 30       	cpi	r25, 0x09	; 9
    1b48:	39 f1       	breq	.+78     	; 0x1b98 <udc_process_setup+0x4a2>
    1b4a:	75 c0       	rjmp	.+234    	; 0x1c36 <udc_process_setup+0x540>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b4c:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    1b50:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    1b54:	89 2b       	or	r24, r25
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <udc_process_setup+0x464>
    1b58:	c1 c0       	rjmp	.+386    	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1b5a:	8b e6       	ldi	r24, 0x6B	; 107
    1b5c:	9a e0       	ldi	r25, 0x0A	; 10
    1b5e:	80 93 82 24 	sts	0x2482, r24	; 0x802482 <udd_g_ctrlreq+0xc>
    1b62:	90 93 83 24 	sts	0x2483, r25	; 0x802483 <udd_g_ctrlreq+0xd>
    1b66:	37 c1       	rjmp	.+622    	; 0x1dd6 <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b68:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    1b6c:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    1b70:	89 2b       	or	r24, r25
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <udc_process_setup+0x480>
    1b74:	b3 c0       	rjmp	.+358    	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b76:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    1b7a:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x3>
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <udc_process_setup+0x48e>
    1b82:	ac c0       	rjmp	.+344    	; 0x1cdc <udc_process_setup+0x5e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1b84:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <udc_device_status>
    1b88:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <udc_device_status+0x1>
    1b8c:	8d 7f       	andi	r24, 0xFD	; 253
    1b8e:	80 93 d6 20 	sts	0x20D6, r24	; 0x8020d6 <udc_device_status>
    1b92:	90 93 d7 20 	sts	0x20D7, r25	; 0x8020d7 <udc_device_status+0x1>
    1b96:	1f c1       	rjmp	.+574    	; 0x1dd6 <udc_process_setup+0x6e0>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1b98:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    1b9c:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    1ba0:	89 2b       	or	r24, r25
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <udc_process_setup+0x4b0>
    1ba4:	9b c0       	rjmp	.+310    	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1ba6:	c2 d4       	rcall	.+2436   	; 0x252c <udd_getaddress>
    1ba8:	88 23       	and	r24, r24
    1baa:	09 f4       	brne	.+2      	; 0x1bae <udc_process_setup+0x4b8>
    1bac:	97 c0       	rjmp	.+302    	; 0x1cdc <udc_process_setup+0x5e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1bae:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    1bb2:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udd_g_ctrlreq+0x3>
    1bb6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1bb8:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <udc_config>
    1bbc:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1bc0:	81 89       	ldd	r24, Z+17	; 0x11
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	82 17       	cp	r24, r18
    1bc6:	93 07       	cpc	r25, r19
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <udc_process_setup+0x4d6>
    1bca:	88 c0       	rjmp	.+272    	; 0x1cdc <udc_process_setup+0x5e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1bcc:	3f dd       	rcall	.-1410   	; 0x164c <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1bce:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    1bd2:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x3>
    1bd6:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1bda:	88 23       	and	r24, r24
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <udc_process_setup+0x4ea>
    1bde:	fb c0       	rjmp	.+502    	; 0x1dd6 <udc_process_setup+0x6e0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1be0:	99 27       	eor	r25, r25
    1be2:	81 50       	subi	r24, 0x01	; 1
    1be4:	90 4c       	sbci	r25, 0xC0	; 192
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config+0x2>
    1bf2:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x3>
    1bf6:	e8 0f       	add	r30, r24
    1bf8:	f9 1f       	adc	r31, r25
    1bfa:	e0 93 cf 20 	sts	0x20CF, r30	; 0x8020cf <udc_ptr_conf>
    1bfe:	f0 93 d0 20 	sts	0x20D0, r31	; 0x8020d0 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c02:	01 90       	ld	r0, Z+
    1c04:	f0 81       	ld	r31, Z
    1c06:	e0 2d       	mov	r30, r0
    1c08:	84 81       	ldd	r24, Z+4	; 0x04
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <udc_process_setup+0x51a>
    1c0e:	e3 c0       	rjmp	.+454    	; 0x1dd6 <udc_process_setup+0x6e0>
    1c10:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	8c 2f       	mov	r24, r28
    1c16:	e1 dc       	rcall	.-1598   	; 0x15da <udc_iface_enable>
    1c18:	88 23       	and	r24, r24
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <udc_process_setup+0x528>
    1c1c:	5f c0       	rjmp	.+190    	; 0x1cdc <udc_process_setup+0x5e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c1e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c20:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <udc_ptr_conf>
    1c24:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    1c28:	01 90       	ld	r0, Z+
    1c2a:	f0 81       	ld	r31, Z
    1c2c:	e0 2d       	mov	r30, r0
    1c2e:	84 81       	ldd	r24, Z+4	; 0x04
    1c30:	c8 17       	cp	r28, r24
    1c32:	78 f3       	brcs	.-34     	; 0x1c12 <udc_process_setup+0x51c>
    1c34:	d0 c0       	rjmp	.+416    	; 0x1dd6 <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	e1 f4       	brne	.+56     	; 0x1c72 <udc_process_setup+0x57c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c3a:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <udd_g_ctrlreq+0x1>
    1c3e:	9b 30       	cpi	r25, 0x0B	; 11
    1c40:	c1 f4       	brne	.+48     	; 0x1c72 <udc_process_setup+0x57c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1c42:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    1c46:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <udc_process_setup+0x55a>
    1c4e:	46 c0       	rjmp	.+140    	; 0x1cdc <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c50:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <udc_num_configuration>
    1c54:	88 23       	and	r24, r24
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <udc_process_setup+0x564>
    1c58:	41 c0       	rjmp	.+130    	; 0x1cdc <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c5a:	e6 e7       	ldi	r30, 0x76	; 118
    1c5c:	f4 e2       	ldi	r31, 0x24	; 36
    1c5e:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c60:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1c62:	8c 2f       	mov	r24, r28
    1c64:	78 dc       	rcall	.-1808   	; 0x1556 <udc_iface_disable>
    1c66:	88 23       	and	r24, r24
    1c68:	c9 f1       	breq	.+114    	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1c6a:	6d 2f       	mov	r22, r29
    1c6c:	8c 2f       	mov	r24, r28
    1c6e:	b5 dc       	rcall	.-1686   	; 0x15da <udc_iface_enable>
    1c70:	33 c0       	rjmp	.+102    	; 0x1cd8 <udc_process_setup+0x5e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	99 f5       	brne	.+102    	; 0x1cdc <udc_process_setup+0x5e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c76:	80 91 77 24 	lds	r24, 0x2477	; 0x802477 <udd_g_ctrlreq+0x1>
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	19 f0       	breq	.+6      	; 0x1c84 <udc_process_setup+0x58e>
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	89 f0       	breq	.+34     	; 0x1ca4 <udc_process_setup+0x5ae>
    1c82:	29 c0       	rjmp	.+82     	; 0x1cd6 <udc_process_setup+0x5e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c84:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    1c88:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    1c8c:	89 2b       	or	r24, r25
    1c8e:	31 f5       	brne	.+76     	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c90:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    1c94:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x3>
    1c98:	89 2b       	or	r24, r25
    1c9a:	01 f5       	brne	.+64     	; 0x1cdc <udc_process_setup+0x5e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c9c:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x4>
    1ca0:	df d4       	rcall	.+2494   	; 0x2660 <udd_ep_clear_halt>
    1ca2:	1a c0       	rjmp	.+52     	; 0x1cd8 <udc_process_setup+0x5e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ca4:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    1ca8:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    1cac:	89 2b       	or	r24, r25
    1cae:	b1 f4       	brne	.+44     	; 0x1cdc <udc_process_setup+0x5e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cb0:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0x2>
    1cb4:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0x3>
    1cb8:	89 2b       	or	r24, r25
    1cba:	81 f4       	brne	.+32     	; 0x1cdc <udc_process_setup+0x5e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cbc:	c6 e7       	ldi	r28, 0x76	; 118
    1cbe:	d4 e2       	ldi	r29, 0x24	; 36
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc2:	bd d5       	rcall	.+2938   	; 0x283e <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	20 d6       	rcall	.+3136   	; 0x2908 <udd_ep_set_halt>
    1cc8:	07 c0       	rjmp	.+14     	; 0x1cd8 <udc_process_setup+0x5e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	05 c0       	rjmp	.+10     	; 0x1cd8 <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <udc_process_setup+0x5e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1cd8:	81 11       	cpse	r24, r1
    1cda:	7e c0       	rjmp	.+252    	; 0x1dd8 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1cdc:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq>
    1ce0:	8f 71       	andi	r24, 0x1F	; 31
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	71 f5       	brne	.+92     	; 0x1d42 <udc_process_setup+0x64c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ce6:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <udc_num_configuration>
    1cea:	88 23       	and	r24, r24
    1cec:	51 f1       	breq	.+84     	; 0x1d42 <udc_process_setup+0x64c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1cee:	00 91 7a 24 	lds	r16, 0x247A	; 0x80247a <udd_g_ctrlreq+0x4>
    1cf2:	10 91 7b 24 	lds	r17, 0x247B	; 0x80247b <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1cf6:	c0 91 cf 20 	lds	r28, 0x20CF	; 0x8020cf <udc_ptr_conf>
    1cfa:	d0 91 d0 20 	lds	r29, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    1cfe:	e8 81       	ld	r30, Y
    1d00:	f9 81       	ldd	r31, Y+1	; 0x01
    1d02:	84 81       	ldd	r24, Z+4	; 0x04
    1d04:	08 17       	cp	r16, r24
    1d06:	e8 f4       	brcc	.+58     	; 0x1d42 <udc_process_setup+0x64c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	80 2f       	mov	r24, r16
    1d0c:	ea db       	rcall	.-2092   	; 0x14e2 <udc_update_iface_desc>
    1d0e:	88 23       	and	r24, r24
    1d10:	c1 f0       	breq	.+48     	; 0x1d42 <udc_process_setup+0x64c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d12:	f8 01       	movw	r30, r16
    1d14:	ff 27       	eor	r31, r31
    1d16:	cf 01       	movw	r24, r30
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d20:	e8 0f       	add	r30, r24
    1d22:	f9 1f       	adc	r31, r25
    1d24:	c0 81       	ld	r28, Z
    1d26:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d28:	ee 81       	ldd	r30, Y+6	; 0x06
    1d2a:	ff 81       	ldd	r31, Y+7	; 0x07
    1d2c:	09 95       	icall
    1d2e:	68 2f       	mov	r22, r24
    1d30:	80 2f       	mov	r24, r16
    1d32:	d7 db       	rcall	.-2130   	; 0x14e2 <udc_update_iface_desc>
    1d34:	88 23       	and	r24, r24
    1d36:	29 f0       	breq	.+10     	; 0x1d42 <udc_process_setup+0x64c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1d38:	ec 81       	ldd	r30, Y+4	; 0x04
    1d3a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d3c:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1d3e:	81 11       	cpse	r24, r1
    1d40:	4b c0       	rjmp	.+150    	; 0x1dd8 <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d42:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq>
    1d46:	8f 71       	andi	r24, 0x1F	; 31
    1d48:	82 30       	cpi	r24, 0x02	; 2
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <udc_process_setup+0x658>
    1d4c:	40 c0       	rjmp	.+128    	; 0x1dce <udc_process_setup+0x6d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d4e:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <udc_num_configuration>
    1d52:	88 23       	and	r24, r24
    1d54:	b1 f1       	breq	.+108    	; 0x1dc2 <udc_process_setup+0x6cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d56:	a0 91 cf 20 	lds	r26, 0x20CF	; 0x8020cf <udc_ptr_conf>
    1d5a:	b0 91 d0 20 	lds	r27, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    1d5e:	ed 91       	ld	r30, X+
    1d60:	fc 91       	ld	r31, X
    1d62:	11 97       	sbiw	r26, 0x01	; 1
    1d64:	84 81       	ldd	r24, Z+4	; 0x04
    1d66:	88 23       	and	r24, r24
    1d68:	71 f1       	breq	.+92     	; 0x1dc6 <udc_process_setup+0x6d0>
    1d6a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d6c:	ec 2f       	mov	r30, r28
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	ee 0f       	add	r30, r30
    1d72:	ff 1f       	adc	r31, r31
    1d74:	12 96       	adiw	r26, 0x02	; 2
    1d76:	8d 91       	ld	r24, X+
    1d78:	9c 91       	ld	r25, X
    1d7a:	13 97       	sbiw	r26, 0x03	; 3
    1d7c:	e8 0f       	add	r30, r24
    1d7e:	f9 1f       	adc	r31, r25
    1d80:	00 81       	ld	r16, Z
    1d82:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d84:	d8 01       	movw	r26, r16
    1d86:	16 96       	adiw	r26, 0x06	; 6
    1d88:	ed 91       	ld	r30, X+
    1d8a:	fc 91       	ld	r31, X
    1d8c:	17 97       	sbiw	r26, 0x07	; 7
    1d8e:	09 95       	icall
    1d90:	68 2f       	mov	r22, r24
    1d92:	8c 2f       	mov	r24, r28
    1d94:	a6 db       	rcall	.-2228   	; 0x14e2 <udc_update_iface_desc>
    1d96:	88 23       	and	r24, r24
    1d98:	f9 f0       	breq	.+62     	; 0x1dd8 <udc_process_setup+0x6e2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1d9a:	d8 01       	movw	r26, r16
    1d9c:	14 96       	adiw	r26, 0x04	; 4
    1d9e:	ed 91       	ld	r30, X+
    1da0:	fc 91       	ld	r31, X
    1da2:	15 97       	sbiw	r26, 0x05	; 5
    1da4:	09 95       	icall
    1da6:	81 11       	cpse	r24, r1
    1da8:	17 c0       	rjmp	.+46     	; 0x1dd8 <udc_process_setup+0x6e2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1daa:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dac:	a0 91 cf 20 	lds	r26, 0x20CF	; 0x8020cf <udc_ptr_conf>
    1db0:	b0 91 d0 20 	lds	r27, 0x20D0	; 0x8020d0 <udc_ptr_conf+0x1>
    1db4:	ed 91       	ld	r30, X+
    1db6:	fc 91       	ld	r31, X
    1db8:	11 97       	sbiw	r26, 0x01	; 1
    1dba:	94 81       	ldd	r25, Z+4	; 0x04
    1dbc:	c9 17       	cp	r28, r25
    1dbe:	b0 f2       	brcs	.-84     	; 0x1d6c <udc_process_setup+0x676>
    1dc0:	0b c0       	rjmp	.+22     	; 0x1dd8 <udc_process_setup+0x6e2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	09 c0       	rjmp	.+18     	; 0x1dd8 <udc_process_setup+0x6e2>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	07 c0       	rjmp	.+14     	; 0x1dd8 <udc_process_setup+0x6e2>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	05 c0       	rjmp	.+10     	; 0x1dd8 <udc_process_setup+0x6e2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <udc_process_setup+0x6e2>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	01 c0       	rjmp	.+2      	; 0x1dd8 <udc_process_setup+0x6e2>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	08 95       	ret

00001de2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1de2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1de4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1de6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1de8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1dea:	60 83       	st	Z, r22
	ret                             // Return to caller
    1dec:	08 95       	ret

00001dee <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1dee:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1df2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1df4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1df6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1dfa:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1dfc:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1e00:	08 95       	ret

00001e02 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e02:	81 11       	cpse	r24, r1
    1e04:	22 c0       	rjmp	.+68     	; 0x1e4a <udd_sleep_mode+0x48>
    1e06:	90 91 68 22 	lds	r25, 0x2268	; 0x802268 <udd_b_idle>
    1e0a:	99 23       	and	r25, r25
    1e0c:	d9 f0       	breq	.+54     	; 0x1e44 <udd_sleep_mode+0x42>
    1e0e:	90 91 65 2e 	lds	r25, 0x2E65	; 0x802e65 <sleepmgr_locks+0x1>
    1e12:	91 11       	cpse	r25, r1
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <udd_sleep_mode+0x16>
    1e16:	ff cf       	rjmp	.-2      	; 0x1e16 <udd_sleep_mode+0x14>
    1e18:	2f b7       	in	r18, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	e4 e6       	ldi	r30, 0x64	; 100
    1e1e:	fe e2       	ldi	r31, 0x2E	; 46
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	91 50       	subi	r25, 0x01	; 1
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	2f bf       	out	0x3f, r18	; 63
    1e28:	0d c0       	rjmp	.+26     	; 0x1e44 <udd_sleep_mode+0x42>
    1e2a:	90 91 65 2e 	lds	r25, 0x2E65	; 0x802e65 <sleepmgr_locks+0x1>
    1e2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <udd_sleep_mode+0x32>
    1e32:	ff cf       	rjmp	.-2      	; 0x1e32 <udd_sleep_mode+0x30>
    1e34:	2f b7       	in	r18, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	e4 e6       	ldi	r30, 0x64	; 100
    1e3a:	fe e2       	ldi	r31, 0x2E	; 46
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	9f 5f       	subi	r25, 0xFF	; 255
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	2f bf       	out	0x3f, r18	; 63
    1e44:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_b_idle>
    1e48:	08 95       	ret
    1e4a:	90 91 68 22 	lds	r25, 0x2268	; 0x802268 <udd_b_idle>
    1e4e:	99 23       	and	r25, r25
    1e50:	61 f3       	breq	.-40     	; 0x1e2a <udd_sleep_mode+0x28>
    1e52:	f8 cf       	rjmp	.-16     	; 0x1e44 <udd_sleep_mode+0x42>

00001e54 <udd_ctrl_init>:
    1e54:	0f 93       	push	r16
    1e56:	e8 ec       	ldi	r30, 0xC8	; 200
    1e58:	f4 e0       	ldi	r31, 0x04	; 4
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8f 7d       	andi	r24, 0xDF	; 223
    1e5e:	80 83       	st	Z, r24
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 7d       	andi	r24, 0xDF	; 223
    1e64:	80 83       	st	Z, r24
    1e66:	ec e2       	ldi	r30, 0x2C	; 44
    1e68:	f2 e2       	ldi	r31, 0x22	; 34
    1e6a:	02 e0       	ldi	r16, 0x02	; 2
    1e6c:	05 93       	las	Z, r16
    1e6e:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <udd_sram+0x1a>
    1e72:	10 92 2f 22 	sts	0x222F, r1	; 0x80222f <udd_sram+0x1b>
    1e76:	00 e2       	ldi	r16, 0x20	; 32
    1e78:	06 93       	lac	Z, r16
    1e7a:	00 e4       	ldi	r16, 0x40	; 64
    1e7c:	06 93       	lac	Z, r16
    1e7e:	e4 e2       	ldi	r30, 0x24	; 36
    1e80:	f2 e2       	ldi	r31, 0x22	; 34
    1e82:	00 e2       	ldi	r16, 0x20	; 32
    1e84:	06 93       	lac	Z, r16
    1e86:	00 e4       	ldi	r16, 0x40	; 64
    1e88:	06 93       	lac	Z, r16
    1e8a:	e6 e7       	ldi	r30, 0x76	; 118
    1e8c:	f4 e2       	ldi	r31, 0x24	; 36
    1e8e:	14 86       	std	Z+12, r1	; 0x0c
    1e90:	15 86       	std	Z+13, r1	; 0x0d
    1e92:	16 86       	std	Z+14, r1	; 0x0e
    1e94:	17 86       	std	Z+15, r1	; 0x0f
    1e96:	12 86       	std	Z+10, r1	; 0x0a
    1e98:	13 86       	std	Z+11, r1	; 0x0b
    1e9a:	10 92 13 22 	sts	0x2213, r1	; 0x802213 <udd_ep_control_state>
    1e9e:	0f 91       	pop	r16
    1ea0:	08 95       	ret

00001ea2 <udd_ctrl_stall_data>:
    1ea2:	0f 93       	push	r16
    1ea4:	85 e0       	ldi	r24, 0x05	; 5
    1ea6:	80 93 13 22 	sts	0x2213, r24	; 0x802213 <udd_ep_control_state>
    1eaa:	ed e2       	ldi	r30, 0x2D	; 45
    1eac:	f2 e2       	ldi	r31, 0x22	; 34
    1eae:	04 e0       	ldi	r16, 0x04	; 4
    1eb0:	05 93       	las	Z, r16
    1eb2:	e5 e2       	ldi	r30, 0x25	; 37
    1eb4:	f2 e2       	ldi	r31, 0x22	; 34
    1eb6:	04 e0       	ldi	r16, 0x04	; 4
    1eb8:	05 93       	las	Z, r16
    1eba:	0f 91       	pop	r16
    1ebc:	08 95       	ret

00001ebe <udd_ctrl_send_zlp_in>:
    1ebe:	0f 93       	push	r16
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	80 93 13 22 	sts	0x2213, r24	; 0x802213 <udd_ep_control_state>
    1ec6:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <udd_sram+0x1a>
    1eca:	10 92 2f 22 	sts	0x222F, r1	; 0x80222f <udd_sram+0x1b>
    1ece:	ec e2       	ldi	r30, 0x2C	; 44
    1ed0:	f2 e2       	ldi	r31, 0x22	; 34
    1ed2:	02 e0       	ldi	r16, 0x02	; 2
    1ed4:	06 93       	lac	Z, r16
    1ed6:	0f 91       	pop	r16
    1ed8:	08 95       	ret

00001eda <udd_ctrl_endofrequest>:
    1eda:	e0 91 82 24 	lds	r30, 0x2482	; 0x802482 <udd_g_ctrlreq+0xc>
    1ede:	f0 91 83 24 	lds	r31, 0x2483	; 0x802483 <udd_g_ctrlreq+0xd>
    1ee2:	30 97       	sbiw	r30, 0x00	; 0
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <udd_ctrl_endofrequest+0xe>
    1ee6:	09 95       	icall
    1ee8:	08 95       	ret

00001eea <udd_ctrl_in_sent>:
    1eea:	0f 93       	push	r16
    1eec:	cf 93       	push	r28
    1eee:	df 93       	push	r29
    1ef0:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <udd_ep_control_state>
    1ef4:	83 30       	cpi	r24, 0x03	; 3
    1ef6:	19 f4       	brne	.+6      	; 0x1efe <udd_ctrl_in_sent+0x14>
    1ef8:	f0 df       	rcall	.-32     	; 0x1eda <udd_ctrl_endofrequest>
    1efa:	ac df       	rcall	.-168    	; 0x1e54 <udd_ctrl_init>
    1efc:	5e c0       	rjmp	.+188    	; 0x1fba <udd_ctrl_in_sent+0xd0>
    1efe:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <udd_ctrl_payload_nb_trans>
    1f02:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>
    1f06:	c0 91 80 24 	lds	r28, 0x2480	; 0x802480 <udd_g_ctrlreq+0xa>
    1f0a:	d0 91 81 24 	lds	r29, 0x2481	; 0x802481 <udd_g_ctrlreq+0xb>
    1f0e:	c8 1b       	sub	r28, r24
    1f10:	d9 0b       	sbc	r29, r25
    1f12:	71 f5       	brne	.+92     	; 0x1f70 <udd_ctrl_in_sent+0x86>
    1f14:	20 91 11 22 	lds	r18, 0x2211	; 0x802211 <udd_ctrl_prev_payload_nb_trans>
    1f18:	30 91 12 22 	lds	r19, 0x2212	; 0x802212 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f1c:	82 0f       	add	r24, r18
    1f1e:	93 1f       	adc	r25, r19
    1f20:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <udd_ctrl_prev_payload_nb_trans>
    1f24:	90 93 12 22 	sts	0x2212, r25	; 0x802212 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f28:	20 91 7c 24 	lds	r18, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    1f2c:	30 91 7d 24 	lds	r19, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    1f30:	82 17       	cp	r24, r18
    1f32:	93 07       	cpc	r25, r19
    1f34:	21 f0       	breq	.+8      	; 0x1f3e <udd_ctrl_in_sent+0x54>
    1f36:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <b_shortpacket.5272>
    1f3a:	88 23       	and	r24, r24
    1f3c:	41 f0       	breq	.+16     	; 0x1f4e <udd_ctrl_in_sent+0x64>
    1f3e:	84 e0       	ldi	r24, 0x04	; 4
    1f40:	80 93 13 22 	sts	0x2213, r24	; 0x802213 <udd_ep_control_state>
    1f44:	e4 e2       	ldi	r30, 0x24	; 36
    1f46:	f2 e2       	ldi	r31, 0x22	; 34
    1f48:	02 e0       	ldi	r16, 0x02	; 2
    1f4a:	06 93       	lac	Z, r16
    1f4c:	36 c0       	rjmp	.+108    	; 0x1fba <udd_ctrl_in_sent+0xd0>
    1f4e:	e0 91 84 24 	lds	r30, 0x2484	; 0x802484 <udd_g_ctrlreq+0xe>
    1f52:	f0 91 85 24 	lds	r31, 0x2485	; 0x802485 <udd_g_ctrlreq+0xf>
    1f56:	30 97       	sbiw	r30, 0x00	; 0
    1f58:	99 f0       	breq	.+38     	; 0x1f80 <udd_ctrl_in_sent+0x96>
    1f5a:	09 95       	icall
    1f5c:	88 23       	and	r24, r24
    1f5e:	81 f0       	breq	.+32     	; 0x1f80 <udd_ctrl_in_sent+0x96>
    1f60:	10 92 0f 22 	sts	0x220F, r1	; 0x80220f <udd_ctrl_payload_nb_trans>
    1f64:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>
    1f68:	c0 91 80 24 	lds	r28, 0x2480	; 0x802480 <udd_g_ctrlreq+0xa>
    1f6c:	d0 91 81 24 	lds	r29, 0x2481	; 0x802481 <udd_g_ctrlreq+0xb>
    1f70:	c0 34       	cpi	r28, 0x40	; 64
    1f72:	d1 05       	cpc	r29, r1
    1f74:	28 f0       	brcs	.+10     	; 0x1f80 <udd_ctrl_in_sent+0x96>
    1f76:	10 92 d8 20 	sts	0x20D8, r1	; 0x8020d8 <b_shortpacket.5272>
    1f7a:	c0 e4       	ldi	r28, 0x40	; 64
    1f7c:	d0 e0       	ldi	r29, 0x00	; 0
    1f7e:	03 c0       	rjmp	.+6      	; 0x1f86 <udd_ctrl_in_sent+0x9c>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <b_shortpacket.5272>
    1f86:	e4 e1       	ldi	r30, 0x14	; 20
    1f88:	f2 e2       	ldi	r31, 0x22	; 34
    1f8a:	c2 8f       	std	Z+26, r28	; 0x1a
    1f8c:	d3 8f       	std	Z+27, r29	; 0x1b
    1f8e:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <udd_ctrl_payload_nb_trans>
    1f92:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>
    1f96:	20 91 7e 24 	lds	r18, 0x247E	; 0x80247e <udd_g_ctrlreq+0x8>
    1f9a:	30 91 7f 24 	lds	r19, 0x247F	; 0x80247f <udd_g_ctrlreq+0x9>
    1f9e:	28 0f       	add	r18, r24
    1fa0:	39 1f       	adc	r19, r25
    1fa2:	24 8f       	std	Z+28, r18	; 0x1c
    1fa4:	35 8f       	std	Z+29, r19	; 0x1d
    1fa6:	c8 0f       	add	r28, r24
    1fa8:	d9 1f       	adc	r29, r25
    1faa:	c0 93 0f 22 	sts	0x220F, r28	; 0x80220f <udd_ctrl_payload_nb_trans>
    1fae:	d0 93 10 22 	sts	0x2210, r29	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>
    1fb2:	ec e2       	ldi	r30, 0x2C	; 44
    1fb4:	f2 e2       	ldi	r31, 0x22	; 34
    1fb6:	02 e0       	ldi	r16, 0x02	; 2
    1fb8:	06 93       	lac	Z, r16
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	0f 91       	pop	r16
    1fc0:	08 95       	ret

00001fc2 <udd_ep_get_size>:
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	81 81       	ldd	r24, Z+1	; 0x01
    1fc6:	e8 2f       	mov	r30, r24
    1fc8:	e7 70       	andi	r30, 0x07	; 7
    1fca:	8e 2f       	mov	r24, r30
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	fc 01       	movw	r30, r24
    1fd0:	31 97       	sbiw	r30, 0x01	; 1
    1fd2:	e7 30       	cpi	r30, 0x07	; 7
    1fd4:	f1 05       	cpc	r31, r1
    1fd6:	c0 f4       	brcc	.+48     	; 0x2008 <udd_ep_get_size+0x46>
    1fd8:	e2 5e       	subi	r30, 0xE2	; 226
    1fda:	fe 4f       	sbci	r31, 0xFE	; 254
    1fdc:	8d c6       	rjmp	.+3354   	; 0x2cf8 <__tablejump2__>
    1fde:	80 e1       	ldi	r24, 0x10	; 16
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	08 95       	ret
    1fe4:	80 e2       	ldi	r24, 0x20	; 32
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	08 95       	ret
    1fea:	80 e4       	ldi	r24, 0x40	; 64
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	08 95       	ret
    1ff0:	80 e8       	ldi	r24, 0x80	; 128
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	08 95       	ret
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
    1ffa:	08 95       	ret
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	92 e0       	ldi	r25, 0x02	; 2
    2000:	08 95       	ret
    2002:	8f ef       	ldi	r24, 0xFF	; 255
    2004:	93 e0       	ldi	r25, 0x03	; 3
    2006:	08 95       	ret
    2008:	88 e0       	ldi	r24, 0x08	; 8
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	08 95       	ret

0000200e <udd_ep_get_job>:
    200e:	28 2f       	mov	r18, r24
    2010:	2f 70       	andi	r18, 0x0F	; 15
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	22 0f       	add	r18, r18
    2016:	33 1f       	adc	r19, r19
    2018:	08 2e       	mov	r0, r24
    201a:	00 0c       	add	r0, r0
    201c:	99 0b       	sbc	r25, r25
    201e:	88 27       	eor	r24, r24
    2020:	99 0f       	add	r25, r25
    2022:	88 1f       	adc	r24, r24
    2024:	99 27       	eor	r25, r25
    2026:	82 0f       	add	r24, r18
    2028:	93 1f       	adc	r25, r19
    202a:	02 97       	sbiw	r24, 0x02	; 2
    202c:	9c 01       	movw	r18, r24
    202e:	22 0f       	add	r18, r18
    2030:	33 1f       	adc	r19, r19
    2032:	22 0f       	add	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	22 0f       	add	r18, r18
    2038:	33 1f       	adc	r19, r19
    203a:	82 0f       	add	r24, r18
    203c:	93 1f       	adc	r25, r19
    203e:	87 56       	subi	r24, 0x67	; 103
    2040:	9e 4d       	sbci	r25, 0xDE	; 222
    2042:	08 95       	ret

00002044 <udd_ctrl_interrupt_tc_setup>:
    2044:	0f 93       	push	r16
    2046:	cf 93       	push	r28
    2048:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    204c:	80 ff       	sbrs	r24, 0
    204e:	62 c0       	rjmp	.+196    	; 0x2114 <udd_ctrl_interrupt_tc_setup+0xd0>
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2056:	e4 e2       	ldi	r30, 0x24	; 36
    2058:	f2 e2       	ldi	r31, 0x22	; 34
    205a:	00 e8       	ldi	r16, 0x80	; 128
    205c:	06 93       	lac	Z, r16
    205e:	ec e2       	ldi	r30, 0x2C	; 44
    2060:	f2 e2       	ldi	r31, 0x22	; 34
    2062:	00 e8       	ldi	r16, 0x80	; 128
    2064:	06 93       	lac	Z, r16
    2066:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    206a:	e4 e2       	ldi	r30, 0x24	; 36
    206c:	f2 e2       	ldi	r31, 0x22	; 34
    206e:	00 e1       	ldi	r16, 0x10	; 16
    2070:	06 93       	lac	Z, r16
    2072:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <udd_ep_control_state>
    2076:	88 23       	and	r24, r24
    2078:	29 f0       	breq	.+10     	; 0x2084 <udd_ctrl_interrupt_tc_setup+0x40>
    207a:	83 50       	subi	r24, 0x03	; 3
    207c:	82 30       	cpi	r24, 0x02	; 2
    207e:	08 f4       	brcc	.+2      	; 0x2082 <udd_ctrl_interrupt_tc_setup+0x3e>
    2080:	2c df       	rcall	.-424    	; 0x1eda <udd_ctrl_endofrequest>
    2082:	e8 de       	rcall	.-560    	; 0x1e54 <udd_ctrl_init>
    2084:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <udd_sram+0x12>
    2088:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <udd_sram+0x13>
    208c:	08 97       	sbiw	r24, 0x08	; 8
    208e:	09 f0       	breq	.+2      	; 0x2092 <udd_ctrl_interrupt_tc_setup+0x4e>
    2090:	43 c0       	rjmp	.+134    	; 0x2118 <udd_ctrl_interrupt_tc_setup+0xd4>
    2092:	88 e0       	ldi	r24, 0x08	; 8
    2094:	ef ec       	ldi	r30, 0xCF	; 207
    2096:	f1 e2       	ldi	r31, 0x21	; 33
    2098:	a6 e7       	ldi	r26, 0x76	; 118
    209a:	b4 e2       	ldi	r27, 0x24	; 36
    209c:	01 90       	ld	r0, Z+
    209e:	0d 92       	st	X+, r0
    20a0:	8a 95       	dec	r24
    20a2:	e1 f7       	brne	.-8      	; 0x209c <udd_ctrl_interrupt_tc_setup+0x58>
    20a4:	e8 ec       	ldi	r30, 0xC8	; 200
    20a6:	f4 e0       	ldi	r31, 0x04	; 4
    20a8:	80 81       	ld	r24, Z
    20aa:	80 62       	ori	r24, 0x20	; 32
    20ac:	80 83       	st	Z, r24
    20ae:	80 81       	ld	r24, Z
    20b0:	80 62       	ori	r24, 0x20	; 32
    20b2:	80 83       	st	Z, r24
    20b4:	20 db       	rcall	.-2496   	; 0x16f6 <udc_process_setup>
    20b6:	c8 2f       	mov	r28, r24
    20b8:	81 11       	cpse	r24, r1
    20ba:	03 c0       	rjmp	.+6      	; 0x20c2 <udd_ctrl_interrupt_tc_setup+0x7e>
    20bc:	f2 de       	rcall	.-540    	; 0x1ea2 <udd_ctrl_stall_data>
    20be:	c1 e0       	ldi	r28, 0x01	; 1
    20c0:	2c c0       	rjmp	.+88     	; 0x211a <udd_ctrl_interrupt_tc_setup+0xd6>
    20c2:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq>
    20c6:	88 23       	and	r24, r24
    20c8:	6c f4       	brge	.+26     	; 0x20e4 <udd_ctrl_interrupt_tc_setup+0xa0>
    20ca:	10 92 11 22 	sts	0x2211, r1	; 0x802211 <udd_ctrl_prev_payload_nb_trans>
    20ce:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <udd_ctrl_prev_payload_nb_trans+0x1>
    20d2:	10 92 0f 22 	sts	0x220F, r1	; 0x80220f <udd_ctrl_payload_nb_trans>
    20d6:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	80 93 13 22 	sts	0x2213, r24	; 0x802213 <udd_ep_control_state>
    20e0:	04 df       	rcall	.-504    	; 0x1eea <udd_ctrl_in_sent>
    20e2:	1b c0       	rjmp	.+54     	; 0x211a <udd_ctrl_interrupt_tc_setup+0xd6>
    20e4:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    20e8:	90 91 7d 24 	lds	r25, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    20ec:	89 2b       	or	r24, r25
    20ee:	11 f4       	brne	.+4      	; 0x20f4 <udd_ctrl_interrupt_tc_setup+0xb0>
    20f0:	e6 de       	rcall	.-564    	; 0x1ebe <udd_ctrl_send_zlp_in>
    20f2:	13 c0       	rjmp	.+38     	; 0x211a <udd_ctrl_interrupt_tc_setup+0xd6>
    20f4:	10 92 11 22 	sts	0x2211, r1	; 0x802211 <udd_ctrl_prev_payload_nb_trans>
    20f8:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <udd_ctrl_prev_payload_nb_trans+0x1>
    20fc:	10 92 0f 22 	sts	0x220F, r1	; 0x80220f <udd_ctrl_payload_nb_trans>
    2100:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	80 93 13 22 	sts	0x2213, r24	; 0x802213 <udd_ep_control_state>
    210a:	e4 e2       	ldi	r30, 0x24	; 36
    210c:	f2 e2       	ldi	r31, 0x22	; 34
    210e:	02 e0       	ldi	r16, 0x02	; 2
    2110:	06 93       	lac	Z, r16
    2112:	03 c0       	rjmp	.+6      	; 0x211a <udd_ctrl_interrupt_tc_setup+0xd6>
    2114:	c0 e0       	ldi	r28, 0x00	; 0
    2116:	01 c0       	rjmp	.+2      	; 0x211a <udd_ctrl_interrupt_tc_setup+0xd6>
    2118:	c1 e0       	ldi	r28, 0x01	; 1
    211a:	8c 2f       	mov	r24, r28
    211c:	cf 91       	pop	r28
    211e:	0f 91       	pop	r16
    2120:	08 95       	ret

00002122 <udd_ep_trans_complet>:
    2122:	8f 92       	push	r8
    2124:	9f 92       	push	r9
    2126:	af 92       	push	r10
    2128:	bf 92       	push	r11
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	d8 2e       	mov	r13, r24
    213a:	69 df       	rcall	.-302    	; 0x200e <udd_ep_get_job>
    213c:	8c 01       	movw	r16, r24
    213e:	bd 2c       	mov	r11, r13
    2140:	bb 1c       	adc	r11, r11
    2142:	bb 24       	eor	r11, r11
    2144:	bb 1c       	adc	r11, r11
    2146:	cd 2d       	mov	r28, r13
    2148:	cf 70       	andi	r28, 0x0F	; 15
    214a:	d0 e0       	ldi	r29, 0x00	; 0
    214c:	cc 0f       	add	r28, r28
    214e:	dd 1f       	adc	r29, r29
    2150:	cb 0d       	add	r28, r11
    2152:	d1 1d       	adc	r29, r1
    2154:	ce 01       	movw	r24, r28
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	9c 01       	movw	r18, r24
    2164:	2c 5d       	subi	r18, 0xDC	; 220
    2166:	3d 4d       	sbci	r19, 0xDD	; 221
    2168:	79 01       	movw	r14, r18
    216a:	c9 01       	movw	r24, r18
    216c:	2a df       	rcall	.-428    	; 0x1fc2 <udd_ep_get_size>
    216e:	4c 01       	movw	r8, r24
    2170:	bb 20       	and	r11, r11
    2172:	09 f4       	brne	.+2      	; 0x2176 <udd_ep_trans_complet+0x54>
    2174:	70 c0       	rjmp	.+224    	; 0x2256 <udd_ep_trans_complet+0x134>
    2176:	fe 01       	movw	r30, r28
    2178:	ee 0f       	add	r30, r30
    217a:	ff 1f       	adc	r31, r31
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	ec 5e       	subi	r30, 0xEC	; 236
    2186:	fd 4d       	sbci	r31, 0xDD	; 221
    2188:	26 89       	ldd	r18, Z+22	; 0x16
    218a:	37 89       	ldd	r19, Z+23	; 0x17
    218c:	d8 01       	movw	r26, r16
    218e:	15 96       	adiw	r26, 0x05	; 5
    2190:	8d 91       	ld	r24, X+
    2192:	9c 91       	ld	r25, X
    2194:	16 97       	sbiw	r26, 0x06	; 6
    2196:	82 0f       	add	r24, r18
    2198:	93 1f       	adc	r25, r19
    219a:	15 96       	adiw	r26, 0x05	; 5
    219c:	8d 93       	st	X+, r24
    219e:	9c 93       	st	X, r25
    21a0:	16 97       	sbiw	r26, 0x06	; 6
    21a2:	13 96       	adiw	r26, 0x03	; 3
    21a4:	2d 91       	ld	r18, X+
    21a6:	3c 91       	ld	r19, X
    21a8:	14 97       	sbiw	r26, 0x04	; 4
    21aa:	82 17       	cp	r24, r18
    21ac:	93 07       	cpc	r25, r19
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <udd_ep_trans_complet+0x90>
    21b0:	3c c0       	rjmp	.+120    	; 0x222a <udd_ep_trans_complet+0x108>
    21b2:	28 1b       	sub	r18, r24
    21b4:	39 0b       	sbc	r19, r25
    21b6:	21 15       	cp	r18, r1
    21b8:	b4 e0       	ldi	r27, 0x04	; 4
    21ba:	3b 07       	cpc	r19, r27
    21bc:	38 f0       	brcs	.+14     	; 0x21cc <udd_ep_trans_complet+0xaa>
    21be:	2f ef       	ldi	r18, 0xFF	; 255
    21c0:	33 e0       	ldi	r19, 0x03	; 3
    21c2:	c9 01       	movw	r24, r18
    21c4:	b4 01       	movw	r22, r8
    21c6:	71 d5       	rcall	.+2786   	; 0x2caa <__udivmodhi4>
    21c8:	28 1b       	sub	r18, r24
    21ca:	39 0b       	sbc	r19, r25
    21cc:	f8 01       	movw	r30, r16
    21ce:	80 81       	ld	r24, Z
    21d0:	81 ff       	sbrs	r24, 1
    21d2:	09 c0       	rjmp	.+18     	; 0x21e6 <udd_ep_trans_complet+0xc4>
    21d4:	c9 01       	movw	r24, r18
    21d6:	b4 01       	movw	r22, r8
    21d8:	68 d5       	rcall	.+2768   	; 0x2caa <__udivmodhi4>
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	89 2b       	or	r24, r25
    21de:	09 f0       	breq	.+2      	; 0x21e2 <udd_ep_trans_complet+0xc0>
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	84 2f       	mov	r24, r20
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <udd_ep_trans_complet+0xc6>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	d8 01       	movw	r26, r16
    21ea:	9c 91       	ld	r25, X
    21ec:	80 fb       	bst	r24, 0
    21ee:	91 f9       	bld	r25, 1
    21f0:	9c 93       	st	X, r25
    21f2:	cc 0f       	add	r28, r28
    21f4:	dd 1f       	adc	r29, r29
    21f6:	cc 0f       	add	r28, r28
    21f8:	dd 1f       	adc	r29, r29
    21fa:	cc 0f       	add	r28, r28
    21fc:	dd 1f       	adc	r29, r29
    21fe:	cc 5e       	subi	r28, 0xEC	; 236
    2200:	dd 4d       	sbci	r29, 0xDD	; 221
    2202:	1e 8a       	std	Y+22, r1	; 0x16
    2204:	1f 8a       	std	Y+23, r1	; 0x17
    2206:	2a 8b       	std	Y+18, r18	; 0x12
    2208:	3b 8b       	std	Y+19, r19	; 0x13
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	2d 91       	ld	r18, X+
    220e:	3c 91       	ld	r19, X
    2210:	12 97       	sbiw	r26, 0x02	; 2
    2212:	15 96       	adiw	r26, 0x05	; 5
    2214:	8d 91       	ld	r24, X+
    2216:	9c 91       	ld	r25, X
    2218:	16 97       	sbiw	r26, 0x06	; 6
    221a:	82 0f       	add	r24, r18
    221c:	93 1f       	adc	r25, r19
    221e:	8c 8b       	std	Y+20, r24	; 0x14
    2220:	9d 8b       	std	Y+21, r25	; 0x15
    2222:	f7 01       	movw	r30, r14
    2224:	02 e0       	ldi	r16, 0x02	; 2
    2226:	06 93       	lac	Z, r16
    2228:	ca c0       	rjmp	.+404    	; 0x23be <udd_ep_trans_complet+0x29c>
    222a:	d8 01       	movw	r26, r16
    222c:	8c 91       	ld	r24, X
    222e:	81 ff       	sbrs	r24, 1
    2230:	b3 c0       	rjmp	.+358    	; 0x2398 <udd_ep_trans_complet+0x276>
    2232:	8d 7f       	andi	r24, 0xFD	; 253
    2234:	8c 93       	st	X, r24
    2236:	cc 0f       	add	r28, r28
    2238:	dd 1f       	adc	r29, r29
    223a:	cc 0f       	add	r28, r28
    223c:	dd 1f       	adc	r29, r29
    223e:	cc 0f       	add	r28, r28
    2240:	dd 1f       	adc	r29, r29
    2242:	cc 5e       	subi	r28, 0xEC	; 236
    2244:	dd 4d       	sbci	r29, 0xDD	; 221
    2246:	1e 8a       	std	Y+22, r1	; 0x16
    2248:	1f 8a       	std	Y+23, r1	; 0x17
    224a:	1a 8a       	std	Y+18, r1	; 0x12
    224c:	1b 8a       	std	Y+19, r1	; 0x13
    224e:	f7 01       	movw	r30, r14
    2250:	02 e0       	ldi	r16, 0x02	; 2
    2252:	06 93       	lac	Z, r16
    2254:	b4 c0       	rjmp	.+360    	; 0x23be <udd_ep_trans_complet+0x29c>
    2256:	fe 01       	movw	r30, r28
    2258:	ee 0f       	add	r30, r30
    225a:	ff 1f       	adc	r31, r31
    225c:	ee 0f       	add	r30, r30
    225e:	ff 1f       	adc	r31, r31
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	ec 5e       	subi	r30, 0xEC	; 236
    2266:	fd 4d       	sbci	r31, 0xDD	; 221
    2268:	a2 88       	ldd	r10, Z+18	; 0x12
    226a:	b3 88       	ldd	r11, Z+19	; 0x13
    226c:	d8 01       	movw	r26, r16
    226e:	8c 91       	ld	r24, X
    2270:	82 ff       	sbrs	r24, 2
    2272:	19 c0       	rjmp	.+50     	; 0x22a6 <udd_ep_trans_complet+0x184>
    2274:	11 96       	adiw	r26, 0x01	; 1
    2276:	ed 91       	ld	r30, X+
    2278:	fc 91       	ld	r31, X
    227a:	12 97       	sbiw	r26, 0x02	; 2
    227c:	15 96       	adiw	r26, 0x05	; 5
    227e:	2d 91       	ld	r18, X+
    2280:	3c 91       	ld	r19, X
    2282:	16 97       	sbiw	r26, 0x06	; 6
    2284:	13 96       	adiw	r26, 0x03	; 3
    2286:	8d 91       	ld	r24, X+
    2288:	9c 91       	ld	r25, X
    228a:	14 97       	sbiw	r26, 0x04	; 4
    228c:	b4 01       	movw	r22, r8
    228e:	0d d5       	rcall	.+2586   	; 0x2caa <__udivmodhi4>
    2290:	b0 e4       	ldi	r27, 0x40	; 64
    2292:	db 9e       	mul	r13, r27
    2294:	b0 01       	movw	r22, r0
    2296:	11 24       	eor	r1, r1
    2298:	67 56       	subi	r22, 0x67	; 103
    229a:	7f 4d       	sbci	r23, 0xDF	; 223
    229c:	ac 01       	movw	r20, r24
    229e:	cf 01       	movw	r24, r30
    22a0:	82 0f       	add	r24, r18
    22a2:	93 1f       	adc	r25, r19
    22a4:	3e d5       	rcall	.+2684   	; 0x2d22 <memcpy>
    22a6:	f8 01       	movw	r30, r16
    22a8:	25 81       	ldd	r18, Z+5	; 0x05
    22aa:	36 81       	ldd	r19, Z+6	; 0x06
    22ac:	2a 0d       	add	r18, r10
    22ae:	3b 1d       	adc	r19, r11
    22b0:	25 83       	std	Z+5, r18	; 0x05
    22b2:	36 83       	std	Z+6, r19	; 0x06
    22b4:	83 81       	ldd	r24, Z+3	; 0x03
    22b6:	94 81       	ldd	r25, Z+4	; 0x04
    22b8:	82 17       	cp	r24, r18
    22ba:	93 07       	cpc	r25, r19
    22bc:	68 f4       	brcc	.+26     	; 0x22d8 <udd_ep_trans_complet+0x1b6>
    22be:	85 83       	std	Z+5, r24	; 0x05
    22c0:	96 83       	std	Z+6, r25	; 0x06
    22c2:	cc 0f       	add	r28, r28
    22c4:	dd 1f       	adc	r29, r29
    22c6:	cc 0f       	add	r28, r28
    22c8:	dd 1f       	adc	r29, r29
    22ca:	cc 0f       	add	r28, r28
    22cc:	dd 1f       	adc	r29, r29
    22ce:	cc 5e       	subi	r28, 0xEC	; 236
    22d0:	dd 4d       	sbci	r29, 0xDD	; 221
    22d2:	8e 89       	ldd	r24, Y+22	; 0x16
    22d4:	9f 89       	ldd	r25, Y+23	; 0x17
    22d6:	60 c0       	rjmp	.+192    	; 0x2398 <udd_ep_trans_complet+0x276>
    22d8:	fe 01       	movw	r30, r28
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	ee 0f       	add	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	ec 5e       	subi	r30, 0xEC	; 236
    22e8:	fd 4d       	sbci	r31, 0xDD	; 221
    22ea:	46 89       	ldd	r20, Z+22	; 0x16
    22ec:	57 89       	ldd	r21, Z+23	; 0x17
    22ee:	4a 15       	cp	r20, r10
    22f0:	5b 05       	cpc	r21, r11
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <udd_ep_trans_complet+0x1d4>
    22f4:	51 c0       	rjmp	.+162    	; 0x2398 <udd_ep_trans_complet+0x276>
    22f6:	28 17       	cp	r18, r24
    22f8:	39 07       	cpc	r19, r25
    22fa:	09 f4       	brne	.+2      	; 0x22fe <udd_ep_trans_complet+0x1dc>
    22fc:	4d c0       	rjmp	.+154    	; 0x2398 <udd_ep_trans_complet+0x276>
    22fe:	ac 01       	movw	r20, r24
    2300:	42 1b       	sub	r20, r18
    2302:	53 0b       	sbc	r21, r19
    2304:	9a 01       	movw	r18, r20
    2306:	21 15       	cp	r18, r1
    2308:	54 e0       	ldi	r21, 0x04	; 4
    230a:	35 07       	cpc	r19, r21
    230c:	50 f0       	brcs	.+20     	; 0x2322 <udd_ep_trans_complet+0x200>
    230e:	2f ef       	ldi	r18, 0xFF	; 255
    2310:	33 e0       	ldi	r19, 0x03	; 3
    2312:	c9 01       	movw	r24, r18
    2314:	b4 01       	movw	r22, r8
    2316:	c9 d4       	rcall	.+2450   	; 0x2caa <__udivmodhi4>
    2318:	d9 01       	movw	r26, r18
    231a:	a8 1b       	sub	r26, r24
    231c:	b9 0b       	sbc	r27, r25
    231e:	cd 01       	movw	r24, r26
    2320:	07 c0       	rjmp	.+14     	; 0x2330 <udd_ep_trans_complet+0x20e>
    2322:	c9 01       	movw	r24, r18
    2324:	b4 01       	movw	r22, r8
    2326:	c1 d4       	rcall	.+2434   	; 0x2caa <__udivmodhi4>
    2328:	f9 01       	movw	r30, r18
    232a:	e8 1b       	sub	r30, r24
    232c:	f9 0b       	sbc	r31, r25
    232e:	cf 01       	movw	r24, r30
    2330:	fe 01       	movw	r30, r28
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	ee 0f       	add	r30, r30
    233c:	ff 1f       	adc	r31, r31
    233e:	ec 5e       	subi	r30, 0xEC	; 236
    2340:	fd 4d       	sbci	r31, 0xDD	; 221
    2342:	12 8a       	std	Z+18, r1	; 0x12
    2344:	13 8a       	std	Z+19, r1	; 0x13
    2346:	88 15       	cp	r24, r8
    2348:	99 05       	cpc	r25, r9
    234a:	78 f4       	brcc	.+30     	; 0x236a <udd_ep_trans_complet+0x248>
    234c:	d8 01       	movw	r26, r16
    234e:	8c 91       	ld	r24, X
    2350:	84 60       	ori	r24, 0x04	; 4
    2352:	8c 93       	st	X, r24
    2354:	b0 e4       	ldi	r27, 0x40	; 64
    2356:	db 9e       	mul	r13, r27
    2358:	c0 01       	movw	r24, r0
    235a:	11 24       	eor	r1, r1
    235c:	87 56       	subi	r24, 0x67	; 103
    235e:	9f 4d       	sbci	r25, 0xDF	; 223
    2360:	84 8b       	std	Z+20, r24	; 0x14
    2362:	95 8b       	std	Z+21, r25	; 0x15
    2364:	86 8a       	std	Z+22, r8	; 0x16
    2366:	97 8a       	std	Z+23, r9	; 0x17
    2368:	13 c0       	rjmp	.+38     	; 0x2390 <udd_ep_trans_complet+0x26e>
    236a:	f8 01       	movw	r30, r16
    236c:	41 81       	ldd	r20, Z+1	; 0x01
    236e:	52 81       	ldd	r21, Z+2	; 0x02
    2370:	25 81       	ldd	r18, Z+5	; 0x05
    2372:	36 81       	ldd	r19, Z+6	; 0x06
    2374:	24 0f       	add	r18, r20
    2376:	35 1f       	adc	r19, r21
    2378:	cc 0f       	add	r28, r28
    237a:	dd 1f       	adc	r29, r29
    237c:	cc 0f       	add	r28, r28
    237e:	dd 1f       	adc	r29, r29
    2380:	cc 0f       	add	r28, r28
    2382:	dd 1f       	adc	r29, r29
    2384:	cc 5e       	subi	r28, 0xEC	; 236
    2386:	dd 4d       	sbci	r29, 0xDD	; 221
    2388:	2c 8b       	std	Y+20, r18	; 0x14
    238a:	3d 8b       	std	Y+21, r19	; 0x15
    238c:	8e 8b       	std	Y+22, r24	; 0x16
    238e:	9f 8b       	std	Y+23, r25	; 0x17
    2390:	f7 01       	movw	r30, r14
    2392:	02 e0       	ldi	r16, 0x02	; 2
    2394:	06 93       	lac	Z, r16
    2396:	13 c0       	rjmp	.+38     	; 0x23be <udd_ep_trans_complet+0x29c>
    2398:	d8 01       	movw	r26, r16
    239a:	8c 91       	ld	r24, X
    239c:	80 ff       	sbrs	r24, 0
    239e:	0f c0       	rjmp	.+30     	; 0x23be <udd_ep_trans_complet+0x29c>
    23a0:	8e 7f       	andi	r24, 0xFE	; 254
    23a2:	8c 93       	st	X, r24
    23a4:	17 96       	adiw	r26, 0x07	; 7
    23a6:	ed 91       	ld	r30, X+
    23a8:	fc 91       	ld	r31, X
    23aa:	18 97       	sbiw	r26, 0x08	; 8
    23ac:	30 97       	sbiw	r30, 0x00	; 0
    23ae:	39 f0       	breq	.+14     	; 0x23be <udd_ep_trans_complet+0x29c>
    23b0:	15 96       	adiw	r26, 0x05	; 5
    23b2:	6d 91       	ld	r22, X+
    23b4:	7c 91       	ld	r23, X
    23b6:	16 97       	sbiw	r26, 0x06	; 6
    23b8:	4d 2d       	mov	r20, r13
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	09 95       	icall
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	ef 90       	pop	r14
    23ca:	df 90       	pop	r13
    23cc:	bf 90       	pop	r11
    23ce:	af 90       	pop	r10
    23d0:	9f 90       	pop	r9
    23d2:	8f 90       	pop	r8
    23d4:	08 95       	ret

000023d6 <udd_attach>:
    23d6:	cf 93       	push	r28
    23d8:	cf b7       	in	r28, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	11 dd       	rcall	.-1502   	; 0x1e02 <udd_sleep_mode>
    23e0:	ea ec       	ldi	r30, 0xCA	; 202
    23e2:	f4 e0       	ldi	r31, 0x04	; 4
    23e4:	80 e4       	ldi	r24, 0x40	; 64
    23e6:	80 83       	st	Z, r24
    23e8:	80 e2       	ldi	r24, 0x20	; 32
    23ea:	80 83       	st	Z, r24
    23ec:	e1 ec       	ldi	r30, 0xC1	; 193
    23ee:	f4 e0       	ldi	r31, 0x04	; 4
    23f0:	80 81       	ld	r24, Z
    23f2:	81 60       	ori	r24, 0x01	; 1
    23f4:	80 83       	st	Z, r24
    23f6:	a9 ec       	ldi	r26, 0xC9	; 201
    23f8:	b4 e0       	ldi	r27, 0x04	; 4
    23fa:	8c 91       	ld	r24, X
    23fc:	82 60       	ori	r24, 0x02	; 2
    23fe:	8c 93       	st	X, r24
    2400:	e8 ec       	ldi	r30, 0xC8	; 200
    2402:	f4 e0       	ldi	r31, 0x04	; 4
    2404:	80 81       	ld	r24, Z
    2406:	80 64       	ori	r24, 0x40	; 64
    2408:	80 83       	st	Z, r24
    240a:	8c 91       	ld	r24, X
    240c:	81 60       	ori	r24, 0x01	; 1
    240e:	8c 93       	st	X, r24
    2410:	80 81       	ld	r24, Z
    2412:	80 68       	ori	r24, 0x80	; 128
    2414:	80 83       	st	Z, r24
    2416:	cf bf       	out	0x3f, r28	; 63
    2418:	cf 91       	pop	r28
    241a:	08 95       	ret

0000241c <udd_enable>:
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	c0 e6       	ldi	r28, 0x60	; 96
    2422:	d0 e0       	ldi	r29, 0x00	; 0
    2424:	18 82       	st	Y, r1
    2426:	80 e3       	ldi	r24, 0x30	; 48
    2428:	0e 94 a4 09 	call	0x1348	; 0x1348 <sysclk_enable_usb>
    242c:	e0 ec       	ldi	r30, 0xC0	; 192
    242e:	f4 e0       	ldi	r31, 0x04	; 4
    2430:	80 81       	ld	r24, Z
    2432:	80 64       	ori	r24, 0x40	; 64
    2434:	80 83       	st	Z, r24
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	88 83       	st	Y, r24
    243a:	cf b7       	in	r28, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	fc 01       	movw	r30, r24
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	ec 5e       	subi	r30, 0xEC	; 236
    2452:	fd 4d       	sbci	r31, 0xDD	; 221
    2454:	11 8a       	std	Z+17, r1	; 0x11
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	88 30       	cpi	r24, 0x08	; 8
    245a:	91 05       	cpc	r25, r1
    245c:	91 f7       	brne	.-28     	; 0x2442 <udd_enable+0x26>
    245e:	e9 e9       	ldi	r30, 0x99	; 153
    2460:	f1 e2       	ldi	r31, 0x21	; 33
    2462:	80 81       	ld	r24, Z
    2464:	8e 7f       	andi	r24, 0xFE	; 254
    2466:	80 83       	st	Z, r24
    2468:	e2 ea       	ldi	r30, 0xA2	; 162
    246a:	f1 e2       	ldi	r31, 0x21	; 33
    246c:	80 81       	ld	r24, Z
    246e:	8e 7f       	andi	r24, 0xFE	; 254
    2470:	80 83       	st	Z, r24
    2472:	eb ea       	ldi	r30, 0xAB	; 171
    2474:	f1 e2       	ldi	r31, 0x21	; 33
    2476:	80 81       	ld	r24, Z
    2478:	8e 7f       	andi	r24, 0xFE	; 254
    247a:	80 83       	st	Z, r24
    247c:	e4 eb       	ldi	r30, 0xB4	; 180
    247e:	f1 e2       	ldi	r31, 0x21	; 33
    2480:	80 81       	ld	r24, Z
    2482:	8e 7f       	andi	r24, 0xFE	; 254
    2484:	80 83       	st	Z, r24
    2486:	ed eb       	ldi	r30, 0xBD	; 189
    2488:	f1 e2       	ldi	r31, 0x21	; 33
    248a:	80 81       	ld	r24, Z
    248c:	8e 7f       	andi	r24, 0xFE	; 254
    248e:	80 83       	st	Z, r24
    2490:	e6 ec       	ldi	r30, 0xC6	; 198
    2492:	f1 e2       	ldi	r31, 0x21	; 33
    2494:	80 81       	ld	r24, Z
    2496:	8e 7f       	andi	r24, 0xFE	; 254
    2498:	80 83       	st	Z, r24
    249a:	6a e1       	ldi	r22, 0x1A	; 26
    249c:	70 e0       	ldi	r23, 0x00	; 0
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	a6 dc       	rcall	.-1716   	; 0x1dee <nvm_read_byte>
    24a2:	8f 3f       	cpi	r24, 0xFF	; 255
    24a4:	19 f0       	breq	.+6      	; 0x24ac <udd_enable+0x90>
    24a6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    24aa:	03 c0       	rjmp	.+6      	; 0x24b2 <udd_enable+0x96>
    24ac:	8f e1       	ldi	r24, 0x1F	; 31
    24ae:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    24b2:	6b e1       	ldi	r22, 0x1B	; 27
    24b4:	70 e0       	ldi	r23, 0x00	; 0
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	9a dc       	rcall	.-1740   	; 0x1dee <nvm_read_byte>
    24ba:	8f 3f       	cpi	r24, 0xFF	; 255
    24bc:	19 f0       	breq	.+6      	; 0x24c4 <udd_enable+0xa8>
    24be:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    24c2:	03 c0       	rjmp	.+6      	; 0x24ca <udd_enable+0xae>
    24c4:	8f e1       	ldi	r24, 0x1F	; 31
    24c6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    24ca:	e0 ec       	ldi	r30, 0xC0	; 192
    24cc:	f4 e0       	ldi	r31, 0x04	; 4
    24ce:	80 81       	ld	r24, Z
    24d0:	83 60       	ori	r24, 0x03	; 3
    24d2:	80 83       	st	Z, r24
    24d4:	80 81       	ld	r24, Z
    24d6:	80 68       	ori	r24, 0x80	; 128
    24d8:	80 83       	st	Z, r24
    24da:	80 81       	ld	r24, Z
    24dc:	80 61       	ori	r24, 0x10	; 16
    24de:	80 83       	st	Z, r24
    24e0:	84 e2       	ldi	r24, 0x24	; 36
    24e2:	92 e2       	ldi	r25, 0x22	; 34
    24e4:	86 83       	std	Z+6, r24	; 0x06
    24e6:	97 83       	std	Z+7, r25	; 0x07
    24e8:	80 81       	ld	r24, Z
    24ea:	80 62       	ori	r24, 0x20	; 32
    24ec:	80 83       	st	Z, r24
    24ee:	8f ef       	ldi	r24, 0xFF	; 255
    24f0:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    24f4:	e8 ec       	ldi	r30, 0xC8	; 200
    24f6:	f4 e0       	ldi	r31, 0x04	; 4
    24f8:	80 81       	ld	r24, Z
    24fa:	82 60       	ori	r24, 0x02	; 2
    24fc:	80 83       	st	Z, r24
    24fe:	10 92 68 22 	sts	0x2268, r1	; 0x802268 <udd_b_idle>
    2502:	80 91 69 2e 	lds	r24, 0x2E69	; 0x802e69 <sleepmgr_locks+0x5>
    2506:	8f 3f       	cpi	r24, 0xFF	; 255
    2508:	09 f4       	brne	.+2      	; 0x250c <udd_enable+0xf0>
    250a:	ff cf       	rjmp	.-2      	; 0x250a <udd_enable+0xee>
    250c:	9f b7       	in	r25, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	e4 e6       	ldi	r30, 0x64	; 100
    2512:	fe e2       	ldi	r31, 0x2E	; 46
    2514:	85 81       	ldd	r24, Z+5	; 0x05
    2516:	8f 5f       	subi	r24, 0xFF	; 255
    2518:	85 83       	std	Z+5, r24	; 0x05
    251a:	9f bf       	out	0x3f, r25	; 63
    251c:	5c df       	rcall	.-328    	; 0x23d6 <udd_attach>
    251e:	cf bf       	out	0x3f, r28	; 63
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	08 95       	ret

00002526 <udd_set_address>:
    2526:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    252a:	08 95       	ret

0000252c <udd_getaddress>:
    252c:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2530:	08 95       	ret

00002532 <udd_set_setup_payload>:
    2532:	e6 e7       	ldi	r30, 0x76	; 118
    2534:	f4 e2       	ldi	r31, 0x24	; 36
    2536:	80 87       	std	Z+8, r24	; 0x08
    2538:	91 87       	std	Z+9, r25	; 0x09
    253a:	62 87       	std	Z+10, r22	; 0x0a
    253c:	73 87       	std	Z+11, r23	; 0x0b
    253e:	08 95       	ret

00002540 <udd_ep_alloc>:
    2540:	28 2f       	mov	r18, r24
    2542:	2f 70       	andi	r18, 0x0F	; 15
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	22 0f       	add	r18, r18
    2548:	33 1f       	adc	r19, r19
    254a:	08 2e       	mov	r0, r24
    254c:	00 0c       	add	r0, r0
    254e:	99 0b       	sbc	r25, r25
    2550:	88 27       	eor	r24, r24
    2552:	99 0f       	add	r25, r25
    2554:	88 1f       	adc	r24, r24
    2556:	99 27       	eor	r25, r25
    2558:	82 0f       	add	r24, r18
    255a:	93 1f       	adc	r25, r19
    255c:	fc 01       	movw	r30, r24
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	ee 0f       	add	r30, r30
    2568:	ff 1f       	adc	r31, r31
    256a:	ec 5e       	subi	r30, 0xEC	; 236
    256c:	fd 4d       	sbci	r31, 0xDD	; 221
    256e:	21 89       	ldd	r18, Z+17	; 0x11
    2570:	20 7c       	andi	r18, 0xC0	; 192
    2572:	09 f0       	breq	.+2      	; 0x2576 <udd_ep_alloc+0x36>
    2574:	58 c0       	rjmp	.+176    	; 0x2626 <udd_ep_alloc+0xe6>
    2576:	63 70       	andi	r22, 0x03	; 3
    2578:	61 30       	cpi	r22, 0x01	; 1
    257a:	11 f0       	breq	.+4      	; 0x2580 <udd_ep_alloc+0x40>
    257c:	18 f4       	brcc	.+6      	; 0x2584 <udd_ep_alloc+0x44>
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <udd_ep_alloc+0x48>
    2580:	20 ec       	ldi	r18, 0xC0	; 192
    2582:	03 c0       	rjmp	.+6      	; 0x258a <udd_ep_alloc+0x4a>
    2584:	20 e8       	ldi	r18, 0x80	; 128
    2586:	01 c0       	rjmp	.+2      	; 0x258a <udd_ep_alloc+0x4a>
    2588:	20 e4       	ldi	r18, 0x40	; 64
    258a:	40 38       	cpi	r20, 0x80	; 128
    258c:	51 05       	cpc	r21, r1
    258e:	e9 f0       	breq	.+58     	; 0x25ca <udd_ep_alloc+0x8a>
    2590:	50 f4       	brcc	.+20     	; 0x25a6 <udd_ep_alloc+0x66>
    2592:	40 32       	cpi	r20, 0x20	; 32
    2594:	51 05       	cpc	r21, r1
    2596:	a9 f0       	breq	.+42     	; 0x25c2 <udd_ep_alloc+0x82>
    2598:	40 34       	cpi	r20, 0x40	; 64
    259a:	51 05       	cpc	r21, r1
    259c:	a1 f0       	breq	.+40     	; 0x25c6 <udd_ep_alloc+0x86>
    259e:	40 31       	cpi	r20, 0x10	; 16
    25a0:	51 05       	cpc	r21, r1
    25a2:	d9 f4       	brne	.+54     	; 0x25da <udd_ep_alloc+0x9a>
    25a4:	0c c0       	rjmp	.+24     	; 0x25be <udd_ep_alloc+0x7e>
    25a6:	41 15       	cp	r20, r1
    25a8:	32 e0       	ldi	r19, 0x02	; 2
    25aa:	53 07       	cpc	r21, r19
    25ac:	91 f0       	breq	.+36     	; 0x25d2 <udd_ep_alloc+0x92>
    25ae:	4f 3f       	cpi	r20, 0xFF	; 255
    25b0:	33 e0       	ldi	r19, 0x03	; 3
    25b2:	53 07       	cpc	r21, r19
    25b4:	81 f0       	breq	.+32     	; 0x25d6 <udd_ep_alloc+0x96>
    25b6:	41 15       	cp	r20, r1
    25b8:	51 40       	sbci	r21, 0x01	; 1
    25ba:	79 f4       	brne	.+30     	; 0x25da <udd_ep_alloc+0x9a>
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <udd_ep_alloc+0x8e>
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0d c0       	rjmp	.+26     	; 0x25dc <udd_ep_alloc+0x9c>
    25c2:	42 e0       	ldi	r20, 0x02	; 2
    25c4:	0b c0       	rjmp	.+22     	; 0x25dc <udd_ep_alloc+0x9c>
    25c6:	43 e0       	ldi	r20, 0x03	; 3
    25c8:	09 c0       	rjmp	.+18     	; 0x25dc <udd_ep_alloc+0x9c>
    25ca:	44 e0       	ldi	r20, 0x04	; 4
    25cc:	07 c0       	rjmp	.+14     	; 0x25dc <udd_ep_alloc+0x9c>
    25ce:	45 e0       	ldi	r20, 0x05	; 5
    25d0:	05 c0       	rjmp	.+10     	; 0x25dc <udd_ep_alloc+0x9c>
    25d2:	46 e0       	ldi	r20, 0x06	; 6
    25d4:	03 c0       	rjmp	.+6      	; 0x25dc <udd_ep_alloc+0x9c>
    25d6:	47 e0       	ldi	r20, 0x07	; 7
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <udd_ep_alloc+0x9c>
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	fc 01       	movw	r30, r24
    25de:	ee 0f       	add	r30, r30
    25e0:	ff 1f       	adc	r31, r31
    25e2:	ee 0f       	add	r30, r30
    25e4:	ff 1f       	adc	r31, r31
    25e6:	ee 0f       	add	r30, r30
    25e8:	ff 1f       	adc	r31, r31
    25ea:	ec 5e       	subi	r30, 0xEC	; 236
    25ec:	fd 4d       	sbci	r31, 0xDD	; 221
    25ee:	11 8a       	std	Z+17, r1	; 0x11
    25f0:	dc 01       	movw	r26, r24
    25f2:	aa 0f       	add	r26, r26
    25f4:	bb 1f       	adc	r27, r27
    25f6:	aa 0f       	add	r26, r26
    25f8:	bb 1f       	adc	r27, r27
    25fa:	aa 0f       	add	r26, r26
    25fc:	bb 1f       	adc	r27, r27
    25fe:	ac 5d       	subi	r26, 0xDC	; 220
    2600:	bd 4d       	sbci	r27, 0xDD	; 221
    2602:	36 e0       	ldi	r19, 0x06	; 6
    2604:	3c 93       	st	X, r19
    2606:	24 2b       	or	r18, r20
    2608:	21 8b       	std	Z+17, r18	; 0x11
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	fc 01       	movw	r30, r24
    2618:	ec 5e       	subi	r30, 0xEC	; 236
    261a:	fd 4d       	sbci	r31, 0xDD	; 221
    261c:	81 89       	ldd	r24, Z+17	; 0x11
    261e:	80 62       	ori	r24, 0x20	; 32
    2620:	81 8b       	std	Z+17, r24	; 0x11
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	08 95       	ret
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	08 95       	ret

0000262a <udd_ep_is_halted>:
    262a:	e8 2f       	mov	r30, r24
    262c:	ef 70       	andi	r30, 0x0F	; 15
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	ee 0f       	add	r30, r30
    2632:	ff 1f       	adc	r31, r31
    2634:	08 2e       	mov	r0, r24
    2636:	00 0c       	add	r0, r0
    2638:	99 0b       	sbc	r25, r25
    263a:	88 27       	eor	r24, r24
    263c:	99 0f       	add	r25, r25
    263e:	88 1f       	adc	r24, r24
    2640:	99 27       	eor	r25, r25
    2642:	e8 0f       	add	r30, r24
    2644:	f9 1f       	adc	r31, r25
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	ee 0f       	add	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	ec 5e       	subi	r30, 0xEC	; 236
    2654:	fd 4d       	sbci	r31, 0xDD	; 221
    2656:	81 89       	ldd	r24, Z+17	; 0x11
    2658:	82 fb       	bst	r24, 2
    265a:	88 27       	eor	r24, r24
    265c:	80 f9       	bld	r24, 0
    265e:	08 95       	ret

00002660 <udd_ep_clear_halt>:
    2660:	28 2f       	mov	r18, r24
    2662:	2f 70       	andi	r18, 0x0F	; 15
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	a9 01       	movw	r20, r18
    2668:	44 0f       	add	r20, r20
    266a:	55 1f       	adc	r21, r21
    266c:	28 2f       	mov	r18, r24
    266e:	08 2e       	mov	r0, r24
    2670:	00 0c       	add	r0, r0
    2672:	33 0b       	sbc	r19, r19
    2674:	22 27       	eor	r18, r18
    2676:	33 0f       	add	r19, r19
    2678:	22 1f       	adc	r18, r18
    267a:	33 27       	eor	r19, r19
    267c:	24 0f       	add	r18, r20
    267e:	35 1f       	adc	r19, r21
    2680:	f9 01       	movw	r30, r18
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	ee 0f       	add	r30, r30
    268c:	ff 1f       	adc	r31, r31
    268e:	ec 5e       	subi	r30, 0xEC	; 236
    2690:	fd 4d       	sbci	r31, 0xDD	; 221
    2692:	91 89       	ldd	r25, Z+17	; 0x11
    2694:	92 ff       	sbrs	r25, 2
    2696:	17 c0       	rjmp	.+46     	; 0x26c6 <udd_ep_clear_halt+0x66>
    2698:	22 0f       	add	r18, r18
    269a:	33 1f       	adc	r19, r19
    269c:	22 0f       	add	r18, r18
    269e:	33 1f       	adc	r19, r19
    26a0:	22 0f       	add	r18, r18
    26a2:	33 1f       	adc	r19, r19
    26a4:	f9 01       	movw	r30, r18
    26a6:	ec 5e       	subi	r30, 0xEC	; 236
    26a8:	fd 4d       	sbci	r31, 0xDD	; 221
    26aa:	91 89       	ldd	r25, Z+17	; 0x11
    26ac:	9b 7f       	andi	r25, 0xFB	; 251
    26ae:	91 8b       	std	Z+17, r25	; 0x11
    26b0:	ae dc       	rcall	.-1700   	; 0x200e <udd_ep_get_job>
    26b2:	fc 01       	movw	r30, r24
    26b4:	80 81       	ld	r24, Z
    26b6:	80 ff       	sbrs	r24, 0
    26b8:	06 c0       	rjmp	.+12     	; 0x26c6 <udd_ep_clear_halt+0x66>
    26ba:	8e 7f       	andi	r24, 0xFE	; 254
    26bc:	80 83       	st	Z, r24
    26be:	07 80       	ldd	r0, Z+7	; 0x07
    26c0:	f0 85       	ldd	r31, Z+8	; 0x08
    26c2:	e0 2d       	mov	r30, r0
    26c4:	09 95       	icall
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	08 95       	ret

000026ca <udd_ep_run>:
    26ca:	7f 92       	push	r7
    26cc:	8f 92       	push	r8
    26ce:	9f 92       	push	r9
    26d0:	af 92       	push	r10
    26d2:	bf 92       	push	r11
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	98 2e       	mov	r9, r24
    26e6:	86 2e       	mov	r8, r22
    26e8:	6a 01       	movw	r12, r20
    26ea:	79 01       	movw	r14, r18
    26ec:	90 dc       	rcall	.-1760   	; 0x200e <udd_ep_get_job>
    26ee:	5c 01       	movw	r10, r24
    26f0:	79 2c       	mov	r7, r9
    26f2:	77 1c       	adc	r7, r7
    26f4:	77 24       	eor	r7, r7
    26f6:	77 1c       	adc	r7, r7
    26f8:	c9 2d       	mov	r28, r9
    26fa:	cf 70       	andi	r28, 0x0F	; 15
    26fc:	d0 e0       	ldi	r29, 0x00	; 0
    26fe:	cc 0f       	add	r28, r28
    2700:	dd 1f       	adc	r29, r29
    2702:	c7 0d       	add	r28, r7
    2704:	d1 1d       	adc	r29, r1
    2706:	fe 01       	movw	r30, r28
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	ee 0f       	add	r30, r30
    2712:	ff 1f       	adc	r31, r31
    2714:	ec 5e       	subi	r30, 0xEC	; 236
    2716:	fd 4d       	sbci	r31, 0xDD	; 221
    2718:	81 89       	ldd	r24, Z+17	; 0x11
    271a:	80 7c       	andi	r24, 0xC0	; 192
    271c:	09 f4       	brne	.+2      	; 0x2720 <udd_ep_run+0x56>
    271e:	7d c0       	rjmp	.+250    	; 0x281a <udd_ep_run+0x150>
    2720:	fe 01       	movw	r30, r28
    2722:	ee 0f       	add	r30, r30
    2724:	ff 1f       	adc	r31, r31
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	ec 5e       	subi	r30, 0xEC	; 236
    2730:	fd 4d       	sbci	r31, 0xDD	; 221
    2732:	81 89       	ldd	r24, Z+17	; 0x11
    2734:	80 7c       	andi	r24, 0xC0	; 192
    2736:	80 3c       	cpi	r24, 0xC0	; 192
    2738:	61 f0       	breq	.+24     	; 0x2752 <udd_ep_run+0x88>
    273a:	fe 01       	movw	r30, r28
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	ee 0f       	add	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	ee 0f       	add	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	ec 5e       	subi	r30, 0xEC	; 236
    274a:	fd 4d       	sbci	r31, 0xDD	; 221
    274c:	81 89       	ldd	r24, Z+17	; 0x11
    274e:	82 fd       	sbrc	r24, 2
    2750:	66 c0       	rjmp	.+204    	; 0x281e <udd_ep_run+0x154>
    2752:	8f b7       	in	r24, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	f5 01       	movw	r30, r10
    2758:	90 81       	ld	r25, Z
    275a:	90 ff       	sbrs	r25, 0
    275c:	03 c0       	rjmp	.+6      	; 0x2764 <udd_ep_run+0x9a>
    275e:	8f bf       	out	0x3f, r24	; 63
    2760:	71 2c       	mov	r7, r1
    2762:	5e c0       	rjmp	.+188    	; 0x2820 <udd_ep_run+0x156>
    2764:	f5 01       	movw	r30, r10
    2766:	90 81       	ld	r25, Z
    2768:	91 60       	ori	r25, 0x01	; 1
    276a:	90 83       	st	Z, r25
    276c:	8f bf       	out	0x3f, r24	; 63
    276e:	c1 82       	std	Z+1, r12	; 0x01
    2770:	d2 82       	std	Z+2, r13	; 0x02
    2772:	e3 82       	std	Z+3, r14	; 0x03
    2774:	f4 82       	std	Z+4, r15	; 0x04
    2776:	15 82       	std	Z+5, r1	; 0x05
    2778:	16 82       	std	Z+6, r1	; 0x06
    277a:	07 83       	std	Z+7, r16	; 0x07
    277c:	10 87       	std	Z+8, r17	; 0x08
    277e:	81 10       	cpse	r8, r1
    2780:	06 c0       	rjmp	.+12     	; 0x278e <udd_ep_run+0xc4>
    2782:	91 e0       	ldi	r25, 0x01	; 1
    2784:	e1 14       	cp	r14, r1
    2786:	f1 04       	cpc	r15, r1
    2788:	19 f0       	breq	.+6      	; 0x2790 <udd_ep_run+0xc6>
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	01 c0       	rjmp	.+2      	; 0x2790 <udd_ep_run+0xc6>
    278e:	91 e0       	ldi	r25, 0x01	; 1
    2790:	f5 01       	movw	r30, r10
    2792:	80 81       	ld	r24, Z
    2794:	90 fb       	bst	r25, 0
    2796:	81 f9       	bld	r24, 1
    2798:	8b 7f       	andi	r24, 0xFB	; 251
    279a:	80 83       	st	Z, r24
    279c:	77 20       	and	r7, r7
    279e:	59 f0       	breq	.+22     	; 0x27b6 <udd_ep_run+0xec>
    27a0:	cc 0f       	add	r28, r28
    27a2:	dd 1f       	adc	r29, r29
    27a4:	cc 0f       	add	r28, r28
    27a6:	dd 1f       	adc	r29, r29
    27a8:	cc 0f       	add	r28, r28
    27aa:	dd 1f       	adc	r29, r29
    27ac:	cc 5e       	subi	r28, 0xEC	; 236
    27ae:	dd 4d       	sbci	r29, 0xDD	; 221
    27b0:	1e 8a       	std	Y+22, r1	; 0x16
    27b2:	1f 8a       	std	Y+23, r1	; 0x17
    27b4:	2d c0       	rjmp	.+90     	; 0x2810 <udd_ep_run+0x146>
    27b6:	fe 01       	movw	r30, r28
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	ee 0f       	add	r30, r30
    27be:	ff 1f       	adc	r31, r31
    27c0:	ee 0f       	add	r30, r30
    27c2:	ff 1f       	adc	r31, r31
    27c4:	ec 5e       	subi	r30, 0xEC	; 236
    27c6:	fd 4d       	sbci	r31, 0xDD	; 221
    27c8:	81 89       	ldd	r24, Z+17	; 0x11
    27ca:	80 7c       	andi	r24, 0xC0	; 192
    27cc:	80 3c       	cpi	r24, 0xC0	; 192
    27ce:	a1 f4       	brne	.+40     	; 0x27f8 <udd_ep_run+0x12e>
    27d0:	ce 01       	movw	r24, r28
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	8c 5d       	subi	r24, 0xDC	; 220
    27e0:	9d 4d       	sbci	r25, 0xDD	; 221
    27e2:	ef db       	rcall	.-2082   	; 0x1fc2 <udd_ep_get_size>
    27e4:	bc 01       	movw	r22, r24
    27e6:	c7 01       	movw	r24, r14
    27e8:	60 d2       	rcall	.+1216   	; 0x2caa <__udivmodhi4>
    27ea:	89 2b       	or	r24, r25
    27ec:	29 f0       	breq	.+10     	; 0x27f8 <udd_ep_run+0x12e>
    27ee:	f5 01       	movw	r30, r10
    27f0:	80 81       	ld	r24, Z
    27f2:	8e 7f       	andi	r24, 0xFE	; 254
    27f4:	80 83       	st	Z, r24
    27f6:	14 c0       	rjmp	.+40     	; 0x2820 <udd_ep_run+0x156>
    27f8:	cc 0f       	add	r28, r28
    27fa:	dd 1f       	adc	r29, r29
    27fc:	cc 0f       	add	r28, r28
    27fe:	dd 1f       	adc	r29, r29
    2800:	cc 0f       	add	r28, r28
    2802:	dd 1f       	adc	r29, r29
    2804:	cc 5e       	subi	r28, 0xEC	; 236
    2806:	dd 4d       	sbci	r29, 0xDD	; 221
    2808:	1a 8a       	std	Y+18, r1	; 0x12
    280a:	1b 8a       	std	Y+19, r1	; 0x13
    280c:	1e 8a       	std	Y+22, r1	; 0x16
    280e:	1f 8a       	std	Y+23, r1	; 0x17
    2810:	89 2d       	mov	r24, r9
    2812:	87 dc       	rcall	.-1778   	; 0x2122 <udd_ep_trans_complet>
    2814:	77 24       	eor	r7, r7
    2816:	73 94       	inc	r7
    2818:	03 c0       	rjmp	.+6      	; 0x2820 <udd_ep_run+0x156>
    281a:	71 2c       	mov	r7, r1
    281c:	01 c0       	rjmp	.+2      	; 0x2820 <udd_ep_run+0x156>
    281e:	71 2c       	mov	r7, r1
    2820:	87 2d       	mov	r24, r7
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	ff 90       	pop	r15
    282c:	ef 90       	pop	r14
    282e:	df 90       	pop	r13
    2830:	cf 90       	pop	r12
    2832:	bf 90       	pop	r11
    2834:	af 90       	pop	r10
    2836:	9f 90       	pop	r9
    2838:	8f 90       	pop	r8
    283a:	7f 90       	pop	r7
    283c:	08 95       	ret

0000283e <udd_ep_abort>:
    283e:	ff 92       	push	r15
    2840:	0f 93       	push	r16
    2842:	1f 93       	push	r17
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	18 2f       	mov	r17, r24
    284a:	f8 2e       	mov	r15, r24
    284c:	ff 1c       	adc	r15, r15
    284e:	ff 24       	eor	r15, r15
    2850:	ff 1c       	adc	r15, r15
    2852:	c8 2f       	mov	r28, r24
    2854:	cf 70       	andi	r28, 0x0F	; 15
    2856:	d0 e0       	ldi	r29, 0x00	; 0
    2858:	cc 0f       	add	r28, r28
    285a:	dd 1f       	adc	r29, r29
    285c:	cf 0d       	add	r28, r15
    285e:	d1 1d       	adc	r29, r1
    2860:	d6 db       	rcall	.-2132   	; 0x200e <udd_ep_get_job>
    2862:	dc 01       	movw	r26, r24
    2864:	fe 01       	movw	r30, r28
    2866:	ee 0f       	add	r30, r30
    2868:	ff 1f       	adc	r31, r31
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	ec 5d       	subi	r30, 0xDC	; 220
    2874:	fd 4d       	sbci	r31, 0xDD	; 221
    2876:	02 e0       	ldi	r16, 0x02	; 2
    2878:	05 93       	las	Z, r16
    287a:	8c 91       	ld	r24, X
    287c:	80 ff       	sbrs	r24, 0
    287e:	22 c0       	rjmp	.+68     	; 0x28c4 <udd_ep_abort+0x86>
    2880:	8e 7f       	andi	r24, 0xFE	; 254
    2882:	8c 93       	st	X, r24
    2884:	17 96       	adiw	r26, 0x07	; 7
    2886:	ed 91       	ld	r30, X+
    2888:	fc 91       	ld	r31, X
    288a:	18 97       	sbiw	r26, 0x08	; 8
    288c:	30 97       	sbiw	r30, 0x00	; 0
    288e:	d1 f0       	breq	.+52     	; 0x28c4 <udd_ep_abort+0x86>
    2890:	ff 20       	and	r15, r15
    2892:	59 f0       	breq	.+22     	; 0x28aa <udd_ep_abort+0x6c>
    2894:	cc 0f       	add	r28, r28
    2896:	dd 1f       	adc	r29, r29
    2898:	cc 0f       	add	r28, r28
    289a:	dd 1f       	adc	r29, r29
    289c:	cc 0f       	add	r28, r28
    289e:	dd 1f       	adc	r29, r29
    28a0:	cc 5e       	subi	r28, 0xEC	; 236
    28a2:	dd 4d       	sbci	r29, 0xDD	; 221
    28a4:	6e 89       	ldd	r22, Y+22	; 0x16
    28a6:	7f 89       	ldd	r23, Y+23	; 0x17
    28a8:	0a c0       	rjmp	.+20     	; 0x28be <udd_ep_abort+0x80>
    28aa:	cc 0f       	add	r28, r28
    28ac:	dd 1f       	adc	r29, r29
    28ae:	cc 0f       	add	r28, r28
    28b0:	dd 1f       	adc	r29, r29
    28b2:	cc 0f       	add	r28, r28
    28b4:	dd 1f       	adc	r29, r29
    28b6:	cc 5e       	subi	r28, 0xEC	; 236
    28b8:	dd 4d       	sbci	r29, 0xDD	; 221
    28ba:	6a 89       	ldd	r22, Y+18	; 0x12
    28bc:	7b 89       	ldd	r23, Y+19	; 0x13
    28be:	41 2f       	mov	r20, r17
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	09 95       	icall
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	ff 90       	pop	r15
    28ce:	08 95       	ret

000028d0 <udd_ep_free>:
    28d0:	cf 93       	push	r28
    28d2:	c8 2f       	mov	r28, r24
    28d4:	b4 df       	rcall	.-152    	; 0x283e <udd_ep_abort>
    28d6:	ec 2f       	mov	r30, r28
    28d8:	ef 70       	andi	r30, 0x0F	; 15
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	ee 0f       	add	r30, r30
    28de:	ff 1f       	adc	r31, r31
    28e0:	8c 2f       	mov	r24, r28
    28e2:	cc 0f       	add	r28, r28
    28e4:	99 0b       	sbc	r25, r25
    28e6:	88 27       	eor	r24, r24
    28e8:	99 0f       	add	r25, r25
    28ea:	88 1f       	adc	r24, r24
    28ec:	99 27       	eor	r25, r25
    28ee:	e8 0f       	add	r30, r24
    28f0:	f9 1f       	adc	r31, r25
    28f2:	ee 0f       	add	r30, r30
    28f4:	ff 1f       	adc	r31, r31
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	ec 5e       	subi	r30, 0xEC	; 236
    2900:	fd 4d       	sbci	r31, 0xDD	; 221
    2902:	11 8a       	std	Z+17, r1	; 0x11
    2904:	cf 91       	pop	r28
    2906:	08 95       	ret

00002908 <udd_ep_set_halt>:
    2908:	0f 93       	push	r16
    290a:	e8 2f       	mov	r30, r24
    290c:	ef 70       	andi	r30, 0x0F	; 15
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	28 2f       	mov	r18, r24
    2916:	08 2e       	mov	r0, r24
    2918:	00 0c       	add	r0, r0
    291a:	33 0b       	sbc	r19, r19
    291c:	22 27       	eor	r18, r18
    291e:	33 0f       	add	r19, r19
    2920:	22 1f       	adc	r18, r18
    2922:	33 27       	eor	r19, r19
    2924:	e2 0f       	add	r30, r18
    2926:	f3 1f       	adc	r31, r19
    2928:	df 01       	movw	r26, r30
    292a:	aa 0f       	add	r26, r26
    292c:	bb 1f       	adc	r27, r27
    292e:	aa 0f       	add	r26, r26
    2930:	bb 1f       	adc	r27, r27
    2932:	aa 0f       	add	r26, r26
    2934:	bb 1f       	adc	r27, r27
    2936:	ac 5e       	subi	r26, 0xEC	; 236
    2938:	bd 4d       	sbci	r27, 0xDD	; 221
    293a:	51 96       	adiw	r26, 0x11	; 17
    293c:	9c 91       	ld	r25, X
    293e:	51 97       	sbiw	r26, 0x11	; 17
    2940:	94 60       	ori	r25, 0x04	; 4
    2942:	51 96       	adiw	r26, 0x11	; 17
    2944:	9c 93       	st	X, r25
    2946:	ee 0f       	add	r30, r30
    2948:	ff 1f       	adc	r31, r31
    294a:	ee 0f       	add	r30, r30
    294c:	ff 1f       	adc	r31, r31
    294e:	ee 0f       	add	r30, r30
    2950:	ff 1f       	adc	r31, r31
    2952:	ec 5d       	subi	r30, 0xDC	; 220
    2954:	fd 4d       	sbci	r31, 0xDD	; 221
    2956:	01 e0       	ldi	r16, 0x01	; 1
    2958:	06 93       	lac	Z, r16
    295a:	71 df       	rcall	.-286    	; 0x283e <udd_ep_abort>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2962:	1f 92       	push	r1
    2964:	0f 92       	push	r0
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	0f 92       	push	r0
    296a:	11 24       	eor	r1, r1
    296c:	0f 93       	push	r16
    296e:	2f 93       	push	r18
    2970:	3f 93       	push	r19
    2972:	4f 93       	push	r20
    2974:	5f 93       	push	r21
    2976:	6f 93       	push	r22
    2978:	7f 93       	push	r23
    297a:	8f 93       	push	r24
    297c:	9f 93       	push	r25
    297e:	af 93       	push	r26
    2980:	bf 93       	push	r27
    2982:	ef 93       	push	r30
    2984:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2986:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    298a:	88 23       	and	r24, r24
    298c:	44 f4       	brge	.+16     	; 0x299e <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    298e:	80 e8       	ldi	r24, 0x80	; 128
    2990:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2994:	0e 94 4b 0b 	call	0x1696	; 0x1696 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2998:	0e 94 ee 03 	call	0x7dc	; 0x7dc <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    299c:	8a c0       	rjmp	.+276    	; 0x2ab2 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    299e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29a2:	82 ff       	sbrs	r24, 2
    29a4:	20 c0       	rjmp	.+64     	; 0x29e6 <__vector_125+0x84>
		udd_ack_underflow_event();
    29a6:	84 e0       	ldi	r24, 0x04	; 4
    29a8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    29ac:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <udd_sram+0x18>
    29b0:	86 ff       	sbrs	r24, 6
    29b2:	7f c0       	rjmp	.+254    	; 0x2ab2 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    29b4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    29b8:	81 fd       	sbrc	r24, 1
    29ba:	7b c0       	rjmp	.+246    	; 0x2ab2 <__vector_125+0x150>
    29bc:	43 db       	rcall	.-2426   	; 0x2044 <udd_ctrl_interrupt_tc_setup>
    29be:	81 11       	cpse	r24, r1
    29c0:	78 c0       	rjmp	.+240    	; 0x2ab2 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    29c2:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <udd_ep_control_state>
    29c6:	81 30       	cpi	r24, 0x01	; 1
    29c8:	11 f4       	brne	.+4      	; 0x29ce <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    29ca:	79 da       	rcall	.-2830   	; 0x1ebe <udd_ctrl_send_zlp_in>
    29cc:	72 c0       	rjmp	.+228    	; 0x2ab2 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29ce:	84 30       	cpi	r24, 0x04	; 4
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <__vector_125+0x72>
    29d2:	6f c0       	rjmp	.+222    	; 0x2ab2 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    29d4:	ed e2       	ldi	r30, 0x2D	; 45
    29d6:	f2 e2       	ldi	r31, 0x22	; 34
    29d8:	04 e0       	ldi	r16, 0x04	; 4
    29da:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    29dc:	e5 e2       	ldi	r30, 0x25	; 37
    29de:	f2 e2       	ldi	r31, 0x22	; 34
    29e0:	04 e0       	ldi	r16, 0x04	; 4
    29e2:	05 93       	las	Z, r16
    29e4:	66 c0       	rjmp	.+204    	; 0x2ab2 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    29e6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29ea:	81 ff       	sbrs	r24, 1
    29ec:	5d c0       	rjmp	.+186    	; 0x2aa8 <__vector_125+0x146>
		udd_ack_overflow_event();
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    29f4:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <udd_sram+0x10>
    29f8:	86 ff       	sbrs	r24, 6
    29fa:	5b c0       	rjmp	.+182    	; 0x2ab2 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    29fc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a00:	81 fd       	sbrc	r24, 1
    2a02:	57 c0       	rjmp	.+174    	; 0x2ab2 <__vector_125+0x150>
    2a04:	1f db       	rcall	.-2498   	; 0x2044 <udd_ctrl_interrupt_tc_setup>
    2a06:	81 11       	cpse	r24, r1
    2a08:	54 c0       	rjmp	.+168    	; 0x2ab2 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2a0a:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <udd_ep_control_state>
    2a0e:	82 30       	cpi	r24, 0x02	; 2
    2a10:	41 f4       	brne	.+16     	; 0x2a22 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2a12:	84 e0       	ldi	r24, 0x04	; 4
    2a14:	80 93 13 22 	sts	0x2213, r24	; 0x802213 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2a18:	e4 e2       	ldi	r30, 0x24	; 36
    2a1a:	f2 e2       	ldi	r31, 0x22	; 34
    2a1c:	02 e0       	ldi	r16, 0x02	; 2
    2a1e:	06 93       	lac	Z, r16
    2a20:	48 c0       	rjmp	.+144    	; 0x2ab2 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2a22:	83 30       	cpi	r24, 0x03	; 3
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <__vector_125+0xc6>
    2a26:	45 c0       	rjmp	.+138    	; 0x2ab2 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2a28:	ed e2       	ldi	r30, 0x2D	; 45
    2a2a:	f2 e2       	ldi	r31, 0x22	; 34
    2a2c:	04 e0       	ldi	r16, 0x04	; 4
    2a2e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2a30:	e5 e2       	ldi	r30, 0x25	; 37
    2a32:	f2 e2       	ldi	r31, 0x22	; 34
    2a34:	04 e0       	ldi	r16, 0x04	; 4
    2a36:	05 93       	las	Z, r16
    2a38:	3c c0       	rjmp	.+120    	; 0x2ab2 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2a3a:	80 e1       	ldi	r24, 0x10	; 16
    2a3c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	fd de       	rcall	.-518    	; 0x283e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a44:	81 e8       	ldi	r24, 0x81	; 129
    2a46:	fb de       	rcall	.-522    	; 0x283e <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	f9 de       	rcall	.-526    	; 0x283e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a4c:	82 e8       	ldi	r24, 0x82	; 130
    2a4e:	f7 de       	rcall	.-530    	; 0x283e <udd_ep_abort>
		}
#endif
		udc_reset();
    2a50:	0e 94 26 0b 	call	0x164c	; 0x164c <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2a54:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a58:	e4 e1       	ldi	r30, 0x14	; 20
    2a5a:	f2 e2       	ldi	r31, 0x22	; 34
    2a5c:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2a5e:	96 e0       	ldi	r25, 0x06	; 6
    2a60:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a62:	83 e4       	ldi	r24, 0x43	; 67
    2a64:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a66:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2a68:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a6a:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2a6c:	8f ec       	ldi	r24, 0xCF	; 207
    2a6e:	91 e2       	ldi	r25, 0x21	; 33
    2a70:	84 8b       	std	Z+20, r24	; 0x14
    2a72:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2a74:	ef d9       	rcall	.-3106   	; 0x1e54 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2a76:	1d c0       	rjmp	.+58     	; 0x2ab2 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2a78:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a7c:	86 ff       	sbrs	r24, 6
    2a7e:	08 c0       	rjmp	.+16     	; 0x2a90 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2a80:	80 e4       	ldi	r24, 0x40	; 64
    2a82:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	bc d9       	rcall	.-3208   	; 0x1e02 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2a8a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a8e:	11 c0       	rjmp	.+34     	; 0x2ab2 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2a90:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a94:	85 ff       	sbrs	r24, 5
    2a96:	0d c0       	rjmp	.+26     	; 0x2ab2 <__vector_125+0x150>
		udd_ack_resume_event();
    2a98:	80 e2       	ldi	r24, 0x20	; 32
    2a9a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	b0 d9       	rcall	.-3232   	; 0x1e02 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2aa2:	0e 94 ed 03 	call	0x7da	; 0x7da <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2aa6:	05 c0       	rjmp	.+10     	; 0x2ab2 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2aa8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2aac:	84 fd       	sbrc	r24, 4
    2aae:	c5 cf       	rjmp	.-118    	; 0x2a3a <__vector_125+0xd8>
    2ab0:	e3 cf       	rjmp	.-58     	; 0x2a78 <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2ab2:	ff 91       	pop	r31
    2ab4:	ef 91       	pop	r30
    2ab6:	bf 91       	pop	r27
    2ab8:	af 91       	pop	r26
    2aba:	9f 91       	pop	r25
    2abc:	8f 91       	pop	r24
    2abe:	7f 91       	pop	r23
    2ac0:	6f 91       	pop	r22
    2ac2:	5f 91       	pop	r21
    2ac4:	4f 91       	pop	r20
    2ac6:	3f 91       	pop	r19
    2ac8:	2f 91       	pop	r18
    2aca:	0f 91       	pop	r16
    2acc:	0f 90       	pop	r0
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	0f 90       	pop	r0
    2ad2:	1f 90       	pop	r1
    2ad4:	18 95       	reti

00002ad6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2ad6:	1f 92       	push	r1
    2ad8:	0f 92       	push	r0
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	0f 92       	push	r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	0f 93       	push	r16
    2ae2:	1f 93       	push	r17
    2ae4:	2f 93       	push	r18
    2ae6:	3f 93       	push	r19
    2ae8:	4f 93       	push	r20
    2aea:	5f 93       	push	r21
    2aec:	6f 93       	push	r22
    2aee:	7f 93       	push	r23
    2af0:	8f 93       	push	r24
    2af2:	9f 93       	push	r25
    2af4:	af 93       	push	r26
    2af6:	bf 93       	push	r27
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2b00:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b04:	81 fd       	sbrc	r24, 1
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2b08:	9d da       	rcall	.-2758   	; 0x2044 <udd_ctrl_interrupt_tc_setup>
    2b0a:	81 11       	cpse	r24, r1
    2b0c:	b9 c0       	rjmp	.+370    	; 0x2c80 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2b14:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2b18:	81 95       	neg	r24
    2b1a:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2b1c:	e4 e2       	ldi	r30, 0x24	; 36
    2b1e:	f2 e2       	ldi	r31, 0x22	; 34
    2b20:	e8 1b       	sub	r30, r24
    2b22:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2b24:	20 81       	ld	r18, Z
    2b26:	31 81       	ldd	r19, Z+1	; 0x01
    2b28:	24 52       	subi	r18, 0x24	; 36
    2b2a:	32 42       	sbci	r19, 0x22	; 34
    2b2c:	36 95       	lsr	r19
    2b2e:	27 95       	ror	r18
    2b30:	36 95       	lsr	r19
    2b32:	27 95       	ror	r18
    2b34:	36 95       	lsr	r19
    2b36:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2b38:	82 2f       	mov	r24, r18
    2b3a:	86 95       	lsr	r24
    2b3c:	20 fd       	sbrc	r18, 0
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <__vector_126+0x6e>
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	01 c0       	rjmp	.+2      	; 0x2b46 <__vector_126+0x70>
    2b44:	90 e8       	ldi	r25, 0x80	; 128
    2b46:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b48:	e8 2f       	mov	r30, r24
    2b4a:	ef 70       	andi	r30, 0x0F	; 15
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	ee 0f       	add	r30, r30
    2b50:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2b52:	28 2f       	mov	r18, r24
    2b54:	08 2e       	mov	r0, r24
    2b56:	00 0c       	add	r0, r0
    2b58:	33 0b       	sbc	r19, r19
    2b5a:	22 27       	eor	r18, r18
    2b5c:	33 0f       	add	r19, r19
    2b5e:	22 1f       	adc	r18, r18
    2b60:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2b66:	df 01       	movw	r26, r30
    2b68:	aa 0f       	add	r26, r26
    2b6a:	bb 1f       	adc	r27, r27
    2b6c:	aa 0f       	add	r26, r26
    2b6e:	bb 1f       	adc	r27, r27
    2b70:	aa 0f       	add	r26, r26
    2b72:	bb 1f       	adc	r27, r27
    2b74:	ac 5d       	subi	r26, 0xDC	; 220
    2b76:	bd 4d       	sbci	r27, 0xDD	; 221
    2b78:	9c 91       	ld	r25, X
    2b7a:	95 ff       	sbrs	r25, 5
    2b7c:	81 c0       	rjmp	.+258    	; 0x2c80 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2b7e:	fd 01       	movw	r30, r26
    2b80:	00 e2       	ldi	r16, 0x20	; 32
    2b82:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2b84:	81 11       	cpse	r24, r1
    2b86:	77 c0       	rjmp	.+238    	; 0x2c76 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b88:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <udd_ep_control_state>
    2b8c:	84 30       	cpi	r24, 0x04	; 4
    2b8e:	19 f4       	brne	.+6      	; 0x2b96 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2b90:	a4 d9       	rcall	.-3256   	; 0x1eda <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2b92:	60 d9       	rcall	.-3392   	; 0x1e54 <udd_ctrl_init>
    2b94:	75 c0       	rjmp	.+234    	; 0x2c80 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2b96:	00 91 26 22 	lds	r16, 0x2226	; 0x802226 <udd_sram+0x12>
    2b9a:	10 91 27 22 	lds	r17, 0x2227	; 0x802227 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2b9e:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0xa>
    2ba2:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0xb>
    2ba6:	c0 91 0f 22 	lds	r28, 0x220F	; 0x80220f <udd_ctrl_payload_nb_trans>
    2baa:	d0 91 10 22 	lds	r29, 0x2210	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>
    2bae:	9e 01       	movw	r18, r28
    2bb0:	20 0f       	add	r18, r16
    2bb2:	31 1f       	adc	r19, r17
    2bb4:	82 17       	cp	r24, r18
    2bb6:	93 07       	cpc	r25, r19
    2bb8:	18 f4       	brcc	.+6      	; 0x2bc0 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2bba:	8c 01       	movw	r16, r24
    2bbc:	0c 1b       	sub	r16, r28
    2bbe:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2bc0:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x8>
    2bc4:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x9>
    2bc8:	a8 01       	movw	r20, r16
    2bca:	6f ec       	ldi	r22, 0xCF	; 207
    2bcc:	71 e2       	ldi	r23, 0x21	; 33
    2bce:	8c 0f       	add	r24, r28
    2bd0:	9d 1f       	adc	r25, r29
    2bd2:	a7 d0       	rcall	.+334    	; 0x2d22 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2bd4:	c0 0f       	add	r28, r16
    2bd6:	d1 1f       	adc	r29, r17
    2bd8:	c0 93 0f 22 	sts	0x220F, r28	; 0x80220f <udd_ctrl_payload_nb_trans>
    2bdc:	d0 93 10 22 	sts	0x2210, r29	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2be0:	00 34       	cpi	r16, 0x40	; 64
    2be2:	11 05       	cpc	r17, r1
    2be4:	69 f4       	brne	.+26     	; 0x2c00 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2be6:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <udd_ctrl_prev_payload_nb_trans>
    2bea:	90 91 12 22 	lds	r25, 0x2212	; 0x802212 <udd_ctrl_prev_payload_nb_trans+0x1>
    2bee:	8c 0f       	add	r24, r28
    2bf0:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2bf2:	20 91 7c 24 	lds	r18, 0x247C	; 0x80247c <udd_g_ctrlreq+0x6>
    2bf6:	30 91 7d 24 	lds	r19, 0x247D	; 0x80247d <udd_g_ctrlreq+0x7>
    2bfa:	82 17       	cp	r24, r18
    2bfc:	93 07       	cpc	r25, r19
    2bfe:	80 f0       	brcs	.+32     	; 0x2c20 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2c00:	e6 e7       	ldi	r30, 0x76	; 118
    2c02:	f4 e2       	ldi	r31, 0x24	; 36
    2c04:	c2 87       	std	Z+10, r28	; 0x0a
    2c06:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2c08:	06 84       	ldd	r0, Z+14	; 0x0e
    2c0a:	f7 85       	ldd	r31, Z+15	; 0x0f
    2c0c:	e0 2d       	mov	r30, r0
    2c0e:	30 97       	sbiw	r30, 0x00	; 0
    2c10:	29 f0       	breq	.+10     	; 0x2c1c <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2c12:	09 95       	icall
    2c14:	81 11       	cpse	r24, r1
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2c18:	44 d9       	rcall	.-3448   	; 0x1ea2 <udd_ctrl_stall_data>
    2c1a:	32 c0       	rjmp	.+100    	; 0x2c80 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2c1c:	50 d9       	rcall	.-3424   	; 0x1ebe <udd_ctrl_send_zlp_in>
    2c1e:	30 c0       	rjmp	.+96     	; 0x2c80 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2c20:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0xa>
    2c24:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0xb>
    2c28:	c8 17       	cp	r28, r24
    2c2a:	d9 07       	cpc	r29, r25
    2c2c:	f9 f4       	brne	.+62     	; 0x2c6c <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2c2e:	e0 91 84 24 	lds	r30, 0x2484	; 0x802484 <udd_g_ctrlreq+0xe>
    2c32:	f0 91 85 24 	lds	r31, 0x2485	; 0x802485 <udd_g_ctrlreq+0xf>
    2c36:	30 97       	sbiw	r30, 0x00	; 0
    2c38:	11 f4       	brne	.+4      	; 0x2c3e <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2c3a:	33 d9       	rcall	.-3482   	; 0x1ea2 <udd_ctrl_stall_data>
    2c3c:	21 c0       	rjmp	.+66     	; 0x2c80 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2c3e:	09 95       	icall
    2c40:	81 11       	cpse	r24, r1
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2c44:	2e d9       	rcall	.-3492   	; 0x1ea2 <udd_ctrl_stall_data>
    2c46:	1c c0       	rjmp	.+56     	; 0x2c80 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2c48:	20 91 11 22 	lds	r18, 0x2211	; 0x802211 <udd_ctrl_prev_payload_nb_trans>
    2c4c:	30 91 12 22 	lds	r19, 0x2212	; 0x802212 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c50:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <udd_ctrl_payload_nb_trans>
    2c54:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>
    2c58:	82 0f       	add	r24, r18
    2c5a:	93 1f       	adc	r25, r19
    2c5c:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <udd_ctrl_prev_payload_nb_trans>
    2c60:	90 93 12 22 	sts	0x2212, r25	; 0x802212 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2c64:	10 92 0f 22 	sts	0x220F, r1	; 0x80220f <udd_ctrl_payload_nb_trans>
    2c68:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2c6c:	e4 e2       	ldi	r30, 0x24	; 36
    2c6e:	f2 e2       	ldi	r31, 0x22	; 34
    2c70:	02 e0       	ldi	r16, 0x02	; 2
    2c72:	06 93       	lac	Z, r16
    2c74:	05 c0       	rjmp	.+10     	; 0x2c80 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2c76:	80 38       	cpi	r24, 0x80	; 128
    2c78:	11 f4       	brne	.+4      	; 0x2c7e <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2c7a:	37 d9       	rcall	.-3474   	; 0x1eea <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2c7c:	01 c0       	rjmp	.+2      	; 0x2c80 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2c7e:	51 da       	rcall	.-2910   	; 0x2122 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c80:	ff 91       	pop	r31
    2c82:	ef 91       	pop	r30
    2c84:	df 91       	pop	r29
    2c86:	cf 91       	pop	r28
    2c88:	bf 91       	pop	r27
    2c8a:	af 91       	pop	r26
    2c8c:	9f 91       	pop	r25
    2c8e:	8f 91       	pop	r24
    2c90:	7f 91       	pop	r23
    2c92:	6f 91       	pop	r22
    2c94:	5f 91       	pop	r21
    2c96:	4f 91       	pop	r20
    2c98:	3f 91       	pop	r19
    2c9a:	2f 91       	pop	r18
    2c9c:	1f 91       	pop	r17
    2c9e:	0f 91       	pop	r16
    2ca0:	0f 90       	pop	r0
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	0f 90       	pop	r0
    2ca6:	1f 90       	pop	r1
    2ca8:	18 95       	reti

00002caa <__udivmodhi4>:
    2caa:	aa 1b       	sub	r26, r26
    2cac:	bb 1b       	sub	r27, r27
    2cae:	51 e1       	ldi	r21, 0x11	; 17
    2cb0:	07 c0       	rjmp	.+14     	; 0x2cc0 <__udivmodhi4_ep>

00002cb2 <__udivmodhi4_loop>:
    2cb2:	aa 1f       	adc	r26, r26
    2cb4:	bb 1f       	adc	r27, r27
    2cb6:	a6 17       	cp	r26, r22
    2cb8:	b7 07       	cpc	r27, r23
    2cba:	10 f0       	brcs	.+4      	; 0x2cc0 <__udivmodhi4_ep>
    2cbc:	a6 1b       	sub	r26, r22
    2cbe:	b7 0b       	sbc	r27, r23

00002cc0 <__udivmodhi4_ep>:
    2cc0:	88 1f       	adc	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	5a 95       	dec	r21
    2cc6:	a9 f7       	brne	.-22     	; 0x2cb2 <__udivmodhi4_loop>
    2cc8:	80 95       	com	r24
    2cca:	90 95       	com	r25
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	08 95       	ret

00002cd2 <__divmodhi4>:
    2cd2:	97 fb       	bst	r25, 7
    2cd4:	07 2e       	mov	r0, r23
    2cd6:	16 f4       	brtc	.+4      	; 0x2cdc <__divmodhi4+0xa>
    2cd8:	00 94       	com	r0
    2cda:	06 d0       	rcall	.+12     	; 0x2ce8 <__divmodhi4_neg1>
    2cdc:	77 fd       	sbrc	r23, 7
    2cde:	08 d0       	rcall	.+16     	; 0x2cf0 <__divmodhi4_neg2>
    2ce0:	e4 df       	rcall	.-56     	; 0x2caa <__udivmodhi4>
    2ce2:	07 fc       	sbrc	r0, 7
    2ce4:	05 d0       	rcall	.+10     	; 0x2cf0 <__divmodhi4_neg2>
    2ce6:	3e f4       	brtc	.+14     	; 0x2cf6 <__divmodhi4_exit>

00002ce8 <__divmodhi4_neg1>:
    2ce8:	90 95       	com	r25
    2cea:	81 95       	neg	r24
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	08 95       	ret

00002cf0 <__divmodhi4_neg2>:
    2cf0:	70 95       	com	r23
    2cf2:	61 95       	neg	r22
    2cf4:	7f 4f       	sbci	r23, 0xFF	; 255

00002cf6 <__divmodhi4_exit>:
    2cf6:	08 95       	ret

00002cf8 <__tablejump2__>:
    2cf8:	ee 0f       	add	r30, r30
    2cfa:	ff 1f       	adc	r31, r31
    2cfc:	05 90       	lpm	r0, Z+
    2cfe:	f4 91       	lpm	r31, Z
    2d00:	e0 2d       	mov	r30, r0
    2d02:	09 94       	ijmp

00002d04 <__umulhisi3>:
    2d04:	a2 9f       	mul	r26, r18
    2d06:	b0 01       	movw	r22, r0
    2d08:	b3 9f       	mul	r27, r19
    2d0a:	c0 01       	movw	r24, r0
    2d0c:	a3 9f       	mul	r26, r19
    2d0e:	70 0d       	add	r23, r0
    2d10:	81 1d       	adc	r24, r1
    2d12:	11 24       	eor	r1, r1
    2d14:	91 1d       	adc	r25, r1
    2d16:	b2 9f       	mul	r27, r18
    2d18:	70 0d       	add	r23, r0
    2d1a:	81 1d       	adc	r24, r1
    2d1c:	11 24       	eor	r1, r1
    2d1e:	91 1d       	adc	r25, r1
    2d20:	08 95       	ret

00002d22 <memcpy>:
    2d22:	fb 01       	movw	r30, r22
    2d24:	dc 01       	movw	r26, r24
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <memcpy+0xa>
    2d28:	01 90       	ld	r0, Z+
    2d2a:	0d 92       	st	X+, r0
    2d2c:	41 50       	subi	r20, 0x01	; 1
    2d2e:	50 40       	sbci	r21, 0x00	; 0
    2d30:	d8 f7       	brcc	.-10     	; 0x2d28 <memcpy+0x6>
    2d32:	08 95       	ret

00002d34 <_exit>:
    2d34:	f8 94       	cli

00002d36 <__stop_program>:
    2d36:	ff cf       	rjmp	.-2      	; 0x2d36 <__stop_program>
