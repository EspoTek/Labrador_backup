
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00802000  00002dce  00002e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dc0  008020c8  008020c8  00002f2c  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  00002fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b9ab  00000000  00000000  000034b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e79  00000000  00000000  0000ee63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000097c9  00000000  00000000  00010cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b04  00000000  00000000  0001a4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fd39  00000000  00000000  0001afac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002544  00000000  00000000  0004ace5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0004d230  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be40  00000000  00000000  0004d668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_6>
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
      1e:	00 00       	nop
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__vector_24>
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c4       	rjmp	.+2346   	; 0xa48 <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_83>
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__vector_125>
     1f8:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <__vector_126>
     1fc:	e7 0b       	sbc	r30, r23
     1fe:	f2 0b       	sbc	r31, r18
     200:	2e 0c       	add	r2, r14
     202:	6a 0c       	add	r6, r10
     204:	73 0c       	add	r7, r3
     206:	78 0c       	add	r7, r8
     208:	bd 0c       	add	r11, r13
     20a:	c2 0c       	add	r12, r2
     20c:	1e 0c       	add	r1, r14
     20e:	20 0c       	add	r2, r0
     210:	22 0c       	add	r2, r2
     212:	24 0c       	add	r2, r4
     214:	26 0c       	add	r2, r6
     216:	28 0c       	add	r2, r8
     218:	2a 0c       	add	r2, r10
     21a:	2c 0c       	add	r2, r12
     21c:	5a 0c       	add	r5, r10
     21e:	5c 0c       	add	r5, r12
     220:	5e 0c       	add	r5, r14
     222:	60 0c       	add	r6, r0
     224:	62 0c       	add	r6, r2
     226:	64 0c       	add	r6, r4
     228:	66 0c       	add	r6, r6
     22a:	68 0c       	add	r6, r8
     22c:	84 0c       	add	r8, r4
     22e:	8c 0c       	add	r8, r12
     230:	94 0c       	add	r9, r4
     232:	9f 0c       	add	r9, r15
     234:	a1 0c       	add	r10, r1
     236:	a3 0c       	add	r10, r3
     238:	ab 0c       	add	r10, r11
     23a:	b3 0c       	add	r11, r3
     23c:	3a 10       	cpse	r3, r10
     23e:	3d 10       	cpse	r3, r13
     240:	40 10       	cpse	r4, r0
     242:	43 10       	cpse	r4, r3
     244:	46 10       	cpse	r4, r6
     246:	49 10       	cpse	r4, r9
     248:	4c 10       	cpse	r4, r12

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	ee ec       	ldi	r30, 0xCE	; 206
     25e:	fd e2       	ldi	r31, 0x2D	; 45
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a8 3c       	cpi	r26, 0xC8	; 200
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	a8 ec       	ldi	r26, 0xC8	; 200
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a8 38       	cpi	r26, 0x88	; 136
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	7f d2       	rcall	.+1278   	; 0x77c <main>
     27e:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	93 d3       	rcall	.+1830   	; 0x9bc <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <tiny_calibration_first_sof>:
     2f4:	e0 e7       	ldi	r30, 0x70	; 112
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	85 81       	ldd	r24, Z+5	; 0x05
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	85 83       	std	Z+5, r24	; 0x05
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	fa e0       	ldi	r31, 0x0A	; 10
     302:	8f eb       	ldi	r24, 0xBF	; 191
     304:	9d e5       	ldi	r25, 0x5D	; 93
     306:	86 a3       	std	Z+38, r24	; 0x26
     308:	97 a3       	std	Z+39, r25	; 0x27
     30a:	80 ee       	ldi	r24, 0xE0	; 224
     30c:	9e e2       	ldi	r25, 0x2E	; 46
     30e:	80 a3       	std	Z+32, r24	; 0x20
     310:	91 a3       	std	Z+33, r25	; 0x21
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
     316:	08 95       	ret

00000318 <tiny_calibration_maintain>:
     318:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     31c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     320:	81 3e       	cpi	r24, 0xE1	; 225
     322:	2e e2       	ldi	r18, 0x2E	; 46
     324:	92 07       	cpc	r25, r18
     326:	20 f0       	brcs	.+8      	; 0x330 <tiny_calibration_maintain+0x18>
     328:	20 91 7e 22 	lds	r18, 0x227E	; 0x80227e <cali_value_negative_gradient>
     32c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     330:	80 3e       	cpi	r24, 0xE0	; 224
     332:	2e e2       	ldi	r18, 0x2E	; 46
     334:	92 07       	cpc	r25, r18
     336:	20 f4       	brcc	.+8      	; 0x340 <tiny_calibration_maintain+0x28>
     338:	20 91 7b 22 	lds	r18, 0x227B	; 0x80227b <cali_value_positive_gradient>
     33c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     340:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     344:	22 23       	and	r18, r18
     346:	31 f0       	breq	.+12     	; 0x354 <tiny_calibration_maintain+0x3c>
     348:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     352:	1d c0       	rjmp	.+58     	; 0x38e <tiny_calibration_maintain+0x76>
     354:	88 5f       	subi	r24, 0xF8	; 248
     356:	9a 42       	sbci	r25, 0x2A	; 42
     358:	81 3d       	cpi	r24, 0xD1	; 209
     35a:	97 40       	sbci	r25, 0x07	; 7
     35c:	c0 f0       	brcs	.+48     	; 0x38e <tiny_calibration_maintain+0x76>
     35e:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <__data_end>
     362:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <outOfRange>
     366:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <outOfRange+0x1>
     36a:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <outOfRange+0x2>
     36e:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <outOfRange+0x3>
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	a1 1d       	adc	r26, r1
     376:	b1 1d       	adc	r27, r1
     378:	80 93 c9 20 	sts	0x20C9, r24	; 0x8020c9 <outOfRange>
     37c:	90 93 ca 20 	sts	0x20CA, r25	; 0x8020ca <outOfRange+0x1>
     380:	a0 93 cb 20 	sts	0x20CB, r26	; 0x8020cb <outOfRange+0x2>
     384:	b0 93 cc 20 	sts	0x20CC, r27	; 0x8020cc <outOfRange+0x3>
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     38e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     392:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	b1 f4       	brne	.+44     	; 0x3c6 <tiny_calibration_maintain+0xae>
     39a:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     39e:	8f 3f       	cpi	r24, 0xFF	; 255
     3a0:	91 f0       	breq	.+36     	; 0x3c6 <tiny_calibration_maintain+0xae>
     3a2:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3a6:	81 11       	cpse	r24, r1
     3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <tiny_calibration_maintain+0x9e>
     3aa:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3ae:	81 50       	subi	r24, 0x01	; 1
     3b0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3b4:	08 95       	ret
     3b6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3ba:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3be:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3c2:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3c6:	08 95       	ret

000003c8 <tiny_calibration_safe_add>:
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	09 f4       	brne	.+2      	; 0x3ce <tiny_calibration_safe_add+0x6>
     3cc:	66 c0       	rjmp	.+204    	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
     3ce:	0c f0       	brlt	.+2      	; 0x3d2 <tiny_calibration_safe_add+0xa>
     3d0:	9c 01       	movw	r18, r24
     3d2:	99 23       	and	r25, r25
     3d4:	34 f4       	brge	.+12     	; 0x3e2 <tiny_calibration_safe_add+0x1a>
     3d6:	22 27       	eor	r18, r18
     3d8:	33 27       	eor	r19, r19
     3da:	28 1b       	sub	r18, r24
     3dc:	39 0b       	sbc	r19, r25
     3de:	51 e0       	ldi	r21, 0x01	; 1
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <tiny_calibration_safe_add+0x1c>
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	e8 e6       	ldi	r30, 0x68	; 104
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	83 81       	ldd	r24, Z+3	; 0x03
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     3f0:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     3f4:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     3f8:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     3fc:	96 95       	lsr	r25
     3fe:	98 2f       	mov	r25, r24
     400:	88 27       	eor	r24, r24
     402:	97 95       	ror	r25
     404:	87 95       	ror	r24
     406:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     40a:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     40e:	42 81       	ldd	r20, Z+2	; 0x02
     410:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     414:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     418:	84 0f       	add	r24, r20
     41a:	91 1d       	adc	r25, r1
     41c:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     420:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     424:	00 00       	nop
     426:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     42a:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     42e:	82 17       	cp	r24, r18
     430:	93 07       	cpc	r25, r19
     432:	28 f4       	brcc	.+10     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     434:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <calTemp>
     438:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <calTemp+0x1>
     43c:	08 95       	ret
     43e:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     442:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	81 15       	cp	r24, r1
     44c:	90 42       	sbci	r25, 0x20	; 32
     44e:	38 f0       	brcs	.+14     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	9f e1       	ldi	r25, 0x1F	; 31
     454:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     458:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     45c:	08 95       	ret
     45e:	55 23       	and	r21, r21
     460:	59 f0       	breq	.+22     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
     462:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     466:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     46a:	82 1b       	sub	r24, r18
     46c:	93 0b       	sbc	r25, r19
     46e:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     472:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     476:	0a c0       	rjmp	.+20     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
     478:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     47c:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     480:	28 0f       	add	r18, r24
     482:	39 1f       	adc	r19, r25
     484:	20 93 7c 22 	sts	0x227C, r18	; 0x80227c <calTemp>
     488:	30 93 7d 22 	sts	0x227D, r19	; 0x80227d <calTemp+0x1>
     48c:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     490:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     494:	8f 77       	andi	r24, 0x7F	; 127
     496:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     49a:	08 95       	ret

0000049c <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4a0:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4a4:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4a8:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4ac:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4b0:	9e 01       	movw	r18, r28
     4b2:	28 1b       	sub	r18, r24
     4b4:	39 0b       	sbc	r19, r25
     4b6:	20 93 7f 22 	sts	0x227F, r18	; 0x80227f <gradient>
     4ba:	30 93 80 22 	sts	0x2280, r19	; 0x802280 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4be:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__data_end>
     4c2:	81 11       	cpse	r24, r1
     4c4:	4d c0       	rjmp	.+154    	; 0x560 <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4c6:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     4ca:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     4ce:	8e 3c       	cpi	r24, 0xCE	; 206
     4d0:	9f 4f       	sbci	r25, 0xFF	; 255
     4d2:	e4 f4       	brge	.+56     	; 0x50c <tiny_calibration_find_values+0x70>
     4d4:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     4d8:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     4dc:	8b 36       	cpi	r24, 0x6B	; 107
     4de:	9f 4f       	sbci	r25, 0xFF	; 255
     4e0:	ac f0       	brlt	.+42     	; 0x50c <tiny_calibration_find_values+0x70>
			if(inarow){
     4e2:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     4e6:	88 23       	and	r24, r24
     4e8:	31 f0       	breq	.+12     	; 0x4f6 <tiny_calibration_find_values+0x5a>
				inarow--;
     4ea:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     4ee:	81 50       	subi	r24, 0x01	; 1
     4f0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     4f4:	35 c0       	rjmp	.+106    	; 0x560 <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     4f6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4fa:	80 93 7e 22 	sts	0x227E, r24	; 0x80227e <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <__data_end>
				inarow = NUM_INAROW;
     504:	8c e0       	ldi	r24, 0x0C	; 12
     506:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     50a:	2a c0       	rjmp	.+84     	; 0x560 <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     50c:	8c e0       	ldi	r24, 0x0C	; 12
     50e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     512:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     516:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     51a:	8a 36       	cpi	r24, 0x6A	; 106
     51c:	9f 4f       	sbci	r25, 0xFF	; 255
     51e:	1c f0       	brlt	.+6      	; 0x526 <tiny_calibration_find_values+0x8a>
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	9f ef       	ldi	r25, 0xFF	; 255
     524:	02 c0       	rjmp	.+4      	; 0x52a <tiny_calibration_find_values+0x8e>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <calChange>
     52e:	90 93 7a 22 	sts	0x227A, r25	; 0x80227a <calChange+0x1>
			calChange -= gradient / 48;
     532:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     536:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     53a:	20 91 79 22 	lds	r18, 0x2279	; 0x802279 <calChange>
     53e:	30 91 7a 22 	lds	r19, 0x227A	; 0x80227a <calChange+0x1>
     542:	60 e3       	ldi	r22, 0x30	; 48
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__divmodhi4>
     54a:	26 1b       	sub	r18, r22
     54c:	37 0b       	sbc	r19, r23
     54e:	20 93 79 22 	sts	0x2279, r18	; 0x802279 <calChange>
     552:	30 93 7a 22 	sts	0x227A, r19	; 0x80227a <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     556:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <calChange>
     55a:	90 91 7a 22 	lds	r25, 0x227A	; 0x80227a <calChange+0x1>
     55e:	34 df       	rcall	.-408    	; 0x3c8 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     560:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__data_end>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	29 f5       	brne	.+74     	; 0x5b2 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     568:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     56c:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     570:	c3 97       	sbiw	r24, 0x33	; 51
     572:	94 f0       	brlt	.+36     	; 0x598 <tiny_calibration_find_values+0xfc>
			if(inarow){
     574:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     578:	88 23       	and	r24, r24
     57a:	31 f0       	breq	.+12     	; 0x588 <tiny_calibration_find_values+0xec>
				inarow--;
     57c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     580:	81 50       	subi	r24, 0x01	; 1
     582:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     586:	15 c0       	rjmp	.+42     	; 0x5b2 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     588:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     58c:	80 93 7b 22 	sts	0x227B, r24	; 0x80227b <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <__data_end>
     596:	0d c0       	rjmp	.+26     	; 0x5b2 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     598:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     59c:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     5a0:	87 39       	cpi	r24, 0x97	; 151
     5a2:	91 05       	cpc	r25, r1
     5a4:	1c f4       	brge	.+6      	; 0x5ac <tiny_calibration_find_values+0x110>
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <tiny_calibration_find_values+0x114>
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	9f ef       	ldi	r25, 0xFF	; 255
     5b0:	0b df       	rcall	.-490    	; 0x3c8 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5b2:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5b6:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5c0:	86 17       	cp	r24, r22
     5c2:	97 07       	cpc	r25, r23
     5c4:	79 f0       	breq	.+30     	; 0x5e4 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5c6:	68 17       	cp	r22, r24
     5c8:	79 07       	cpc	r23, r25
     5ca:	28 f4       	brcc	.+10     	; 0x5d6 <magnitude_difference+0x16>
     5cc:	9c 01       	movw	r18, r24
     5ce:	26 1b       	sub	r18, r22
     5d0:	37 0b       	sbc	r19, r23
     5d2:	b9 01       	movw	r22, r18
     5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5d6:	86 17       	cp	r24, r22
     5d8:	97 07       	cpc	r25, r23
     5da:	18 f4       	brcc	.+6      	; 0x5e2 <magnitude_difference+0x22>
     5dc:	68 1b       	sub	r22, r24
     5de:	79 0b       	sbc	r23, r25
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <magnitude_difference+0x28>
     5e2:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	86 2f       	mov	r24, r22
     5ea:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     5ec:	08 95       	ret

000005ee <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     5f2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     5f6:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     5fa:	89 2b       	or	r24, r25
     5fc:	51 f0       	breq	.+20     	; 0x612 <tiny_calibration_layer2+0x24>
		layer2_counter--;
     5fe:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     602:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     60c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     610:	65 c0       	rjmp	.+202    	; 0x6dc <tiny_calibration_layer2+0xee>
	}
	layer2_counter = LAYER2_INTERVAL;
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     61a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     61e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     622:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	09 f4       	brne	.+2      	; 0x62c <tiny_calibration_layer2+0x3e>
     62a:	58 c0       	rjmp	.+176    	; 0x6dc <tiny_calibration_layer2+0xee>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     62c:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     630:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	if(magnitude_difference(TRFCNT_temp, median_TRFCNT) > 200){
     634:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     638:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     63c:	ce 01       	movw	r24, r28
     63e:	c0 df       	rcall	.-128    	; 0x5c0 <magnitude_difference>
     640:	89 3c       	cpi	r24, 0xC9	; 201
     642:	91 05       	cpc	r25, r1
     644:	00 f1       	brcs	.+64     	; 0x686 <tiny_calibration_layer2+0x98>
		TRFCNT_temp = (TRFCNT_temp + HALFPACKET_SIZE) % PACKET_SIZE;
     646:	ae 01       	movw	r20, r28
     648:	49 58       	subi	r20, 0x89	; 137
     64a:	5e 4f       	sbci	r21, 0xFE	; 254
     64c:	9a 01       	movw	r18, r20
     64e:	36 95       	lsr	r19
     650:	27 95       	ror	r18
     652:	a1 eb       	ldi	r26, 0xB1	; 177
     654:	bb e2       	ldi	r27, 0x2B	; 43
     656:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__umulhisi3>
     65a:	ec 01       	movw	r28, r24
     65c:	00 24       	eor	r0, r0
     65e:	cc 0f       	add	r28, r28
     660:	dd 1f       	adc	r29, r29
     662:	00 1c       	adc	r0, r0
     664:	cc 0f       	add	r28, r28
     666:	dd 1f       	adc	r29, r29
     668:	00 1c       	adc	r0, r0
     66a:	cd 2f       	mov	r28, r29
     66c:	d0 2d       	mov	r29, r0
     66e:	2e ee       	ldi	r18, 0xEE	; 238
     670:	32 e0       	ldi	r19, 0x02	; 2
     672:	c2 9f       	mul	r28, r18
     674:	c0 01       	movw	r24, r0
     676:	c3 9f       	mul	r28, r19
     678:	90 0d       	add	r25, r0
     67a:	d2 9f       	mul	r29, r18
     67c:	90 0d       	add	r25, r0
     67e:	11 24       	eor	r1, r1
     680:	ea 01       	movw	r28, r20
     682:	c8 1b       	sub	r28, r24
     684:	d9 0b       	sbc	r29, r25
	}
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     686:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     68a:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68e:	8c 17       	cp	r24, r28
     690:	9d 07       	cpc	r25, r29
     692:	78 f4       	brcc	.+30     	; 0x6b2 <tiny_calibration_layer2+0xc4>
     694:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     698:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     69c:	ce 01       	movw	r24, r28
     69e:	90 df       	rcall	.-224    	; 0x5c0 <magnitude_difference>
     6a0:	02 97       	sbiw	r24, 0x02	; 2
     6a2:	38 f0       	brcs	.+14     	; 0x6b2 <tiny_calibration_layer2+0xc4>
		TC_CALI.PERBUF = 24000;
     6a4:	80 ec       	ldi	r24, 0xC0	; 192
     6a6:	9d e5       	ldi	r25, 0x5D	; 93
     6a8:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6ac:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6b0:	15 c0       	rjmp	.+42     	; 0x6dc <tiny_calibration_layer2+0xee>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6b2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6b6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6ba:	c8 17       	cp	r28, r24
     6bc:	d9 07       	cpc	r29, r25
     6be:	70 f4       	brcc	.+28     	; 0x6dc <tiny_calibration_layer2+0xee>
     6c0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6c4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6c8:	ce 01       	movw	r24, r28
     6ca:	7a df       	rcall	.-268    	; 0x5c0 <magnitude_difference>
     6cc:	02 97       	sbiw	r24, 0x02	; 2
     6ce:	30 f0       	brcs	.+12     	; 0x6dc <tiny_calibration_layer2+0xee>
		TC_CALI.PERBUF = 23999;
     6d0:	8f eb       	ldi	r24, 0xBF	; 191
     6d2:	9d e5       	ldi	r25, 0x5D	; 93
     6d4:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6d8:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6e2:	ac 01       	movw	r20, r24
     6e4:	46 0f       	add	r20, r22
     6e6:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6e8:	86 1b       	sub	r24, r22
     6ea:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6ec:	e0 e0       	ldi	r30, 0x00	; 0
     6ee:	fa e0       	ldi	r31, 0x0A	; 10
     6f0:	20 a1       	ldd	r18, Z+32	; 0x20
     6f2:	31 a1       	ldd	r19, Z+33	; 0x21
     6f4:	24 17       	cp	r18, r20
     6f6:	35 07       	cpc	r19, r21
     6f8:	d8 f7       	brcc	.-10     	; 0x6f0 <tiny_calibration_synchronise_phase+0xe>
     6fa:	20 a1       	ldd	r18, Z+32	; 0x20
     6fc:	31 a1       	ldd	r19, Z+33	; 0x21
     6fe:	82 17       	cp	r24, r18
     700:	93 07       	cpc	r25, r19
     702:	b0 f7       	brcc	.-20     	; 0x6f0 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     704:	08 95       	ret

00000706 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     706:	e0 e8       	ldi	r30, 0x80	; 128
     708:	f6 e0       	ldi	r31, 0x06	; 6
     70a:	8f e0       	ldi	r24, 0x0F	; 15
     70c:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     70e:	85 e0       	ldi	r24, 0x05	; 5
     710:	84 83       	std	Z+4, r24	; 0x04
     712:	08 95       	ret

00000714 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     714:	08 95       	ret

00000716 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, iso_callback);
     716:	40 91 d4 20 	lds	r20, 0x20D4	; 0x8020d4 <usb_state>
     71a:	27 e7       	ldi	r18, 0x77	; 119
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	42 9f       	mul	r20, r18
     720:	c0 01       	movw	r24, r0
     722:	43 9f       	mul	r20, r19
     724:	90 0d       	add	r25, r0
     726:	11 24       	eor	r1, r1
     728:	4b e8       	ldi	r20, 0x8B	; 139
     72a:	53 e0       	ldi	r21, 0x03	; 3
     72c:	6a ef       	ldi	r22, 0xFA	; 250
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	8c 55       	subi	r24, 0x5C	; 92
     732:	99 4d       	sbci	r25, 0xD9	; 217
     734:	bd c6       	rjmp	.+3450   	; 0x14b0 <udi_vendor_iso_in_run>
     736:	08 95       	ret

00000738 <iso_callback2>:
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, iso_callback2);
     738:	40 91 d4 20 	lds	r20, 0x20D4	; 0x8020d4 <usb_state>
     73c:	27 e7       	ldi	r18, 0x77	; 119
     73e:	31 e0       	ldi	r19, 0x01	; 1
     740:	42 9f       	mul	r20, r18
     742:	c0 01       	movw	r24, r0
     744:	43 9f       	mul	r20, r19
     746:	90 0d       	add	r25, r0
     748:	11 24       	eor	r1, r1
     74a:	4c e9       	ldi	r20, 0x9C	; 156
     74c:	53 e0       	ldi	r21, 0x03	; 3
     74e:	6a ef       	ldi	r22, 0xFA	; 250
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	82 56       	subi	r24, 0x62	; 98
     754:	98 4d       	sbci	r25, 0xD8	; 216
     756:	b8 c6       	rjmp	.+3440   	; 0x14c8 <udi_vendor_iso_in_run2>
     758:	08 95       	ret

0000075a <iso_callback3>:
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, iso_callback3);
     75a:	40 91 d4 20 	lds	r20, 0x20D4	; 0x8020d4 <usb_state>
     75e:	27 e7       	ldi	r18, 0x77	; 119
     760:	31 e0       	ldi	r19, 0x01	; 1
     762:	42 9f       	mul	r20, r18
     764:	c0 01       	movw	r24, r0
     766:	43 9f       	mul	r20, r19
     768:	90 0d       	add	r25, r0
     76a:	11 24       	eor	r1, r1
     76c:	4d ea       	ldi	r20, 0xAD	; 173
     76e:	53 e0       	ldi	r21, 0x03	; 3
     770:	6a ef       	ldi	r22, 0xFA	; 250
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	88 56       	subi	r24, 0x68	; 104
     776:	97 4d       	sbci	r25, 0xD7	; 215
     778:	b3 c6       	rjmp	.+3430   	; 0x14e0 <udi_vendor_iso_in_run3>
     77a:	08 95       	ret

0000077c <main>:
volatile char debug_data[8] = "DEBUG123";

unified_debug uds;

int main(void){
	irq_initialize_vectors();
     77c:	87 e0       	ldi	r24, 0x07	; 7
     77e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     782:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     784:	7f dd       	rcall	.-1282   	; 0x284 <tiny_calibration_init>
		
	board_init();
     786:	c6 df       	rcall	.-116    	; 0x714 <board_init>
	udc_start();
     788:	a2 d7       	rcall	.+3908   	; 0x16ce <udc_start>
	tiny_dac_setup();
     78a:	71 d1       	rcall	.+738    	; 0xa6e <tiny_dac_setup>
	tiny_dma_setup();
     78c:	94 d1       	rcall	.+808    	; 0xab6 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	1d d1       	rcall	.+570    	; 0x9ce <tiny_adc_setup>
	tiny_adc_pid_setup();
     794:	09 d1       	rcall	.+530    	; 0x9a8 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     796:	8c e0       	ldi	r24, 0x0C	; 12
     798:	fc d0       	rcall	.+504    	; 0x992 <tiny_adc_ch1setup>
	tiny_timer_setup();
     79a:	20 d5       	rcall	.+2624   	; 0x11dc <tiny_timer_setup>
	tiny_uart_setup();
     79c:	db d5       	rcall	.+2998   	; 0x1354 <tiny_uart_setup>
	tiny_spi_setup();
     79e:	f2 d5       	rcall	.+3044   	; 0x1384 <tiny_spi_setup>
	tiny_dig_setup();
     7a0:	b2 df       	rcall	.-156    	; 0x706 <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");

	strcpy(uds.header, "debug123");
     7a2:	89 e0       	ldi	r24, 0x09	; 9
     7a4:	ee eb       	ldi	r30, 0xBE	; 190
     7a6:	f0 e2       	ldi	r31, 0x20	; 32
     7a8:	a6 e8       	ldi	r26, 0x86	; 134
     7aa:	b2 e2       	ldi	r27, 0x22	; 34
     7ac:	01 90       	ld	r0, Z+
     7ae:	0d 92       	st	X+, r0
     7b0:	8a 95       	dec	r24
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <main+0x30>
     7b4:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <debug_counter>
     7b8:	90 91 83 22 	lds	r25, 0x2283	; 0x802283 <debug_counter+0x1>
     7bc:	a0 91 84 22 	lds	r26, 0x2284	; 0x802284 <debug_counter+0x2>
     7c0:	b0 91 85 22 	lds	r27, 0x2285	; 0x802285 <debug_counter+0x3>

	while (true) {
		debug_counter++;
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	a1 1d       	adc	r26, r1
     7c8:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	21 ee       	ldi	r18, 0xE1	; 225
     7ce:	92 07       	cpc	r25, r18
     7d0:	25 ef       	ldi	r18, 0xF5	; 245
     7d2:	a2 07       	cpc	r26, r18
     7d4:	25 e0       	ldi	r18, 0x05	; 5
     7d6:	b2 07       	cpc	r27, r18
     7d8:	18 f0       	brcs	.+6      	; 0x7e0 <main+0x64>
			debug_counter = 0;
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     7fc:	e3 cf       	rjmp	.-58     	; 0x7c4 <main+0x48>

000007fe <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     7fe:	08 95       	ret

00000800 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     800:	08 95       	ret

00000802 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	cli();
     802:	f8 94       	cli
	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     804:	a0 e0       	ldi	r26, 0x00	; 0
     806:	b1 e0       	ldi	r27, 0x01	; 1
     808:	54 96       	adiw	r26, 0x14	; 20
     80a:	8c 91       	ld	r24, X
     80c:	54 97       	sbiw	r26, 0x14	; 20
     80e:	e6 e8       	ldi	r30, 0x86	; 134
     810:	f2 e2       	ldi	r31, 0x22	; 34
     812:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;
     814:	55 96       	adiw	r26, 0x15	; 21
     816:	8c 91       	ld	r24, X
     818:	55 97       	sbiw	r26, 0x15	; 21
     81a:	82 87       	std	Z+10, r24	; 0x0a
	uds.medianTrfcntL = median_TRFCNT & 0xff;
     81c:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     820:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     824:	83 87       	std	Z+11, r24	; 0x0b
	uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
     826:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     82a:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     82e:	94 87       	std	Z+12, r25	; 0x0c
	
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     830:	54 96       	adiw	r26, 0x14	; 20
     832:	8d 91       	ld	r24, X+
     834:	9c 91       	ld	r25, X
     836:	55 97       	sbiw	r26, 0x15	; 21
     838:	86 34       	cpi	r24, 0x46	; 70
     83a:	91 40       	sbci	r25, 0x01	; 1
     83c:	80 f0       	brcs	.+32     	; 0x85e <main_sof_action+0x5c>
     83e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     842:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     846:	89 3a       	cpi	r24, 0xA9	; 169
     848:	91 40       	sbci	r25, 0x01	; 1
     84a:	48 f4       	brcc	.+18     	; 0x85e <main_sof_action+0x5c>
		currentTrfcnt = DMA.CH0.TRFCNT;
     84c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     850:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     854:	80 93 80 2e 	sts	0x2E80, r24	; 0x802e80 <currentTrfcnt>
     858:	90 93 81 2e 	sts	0x2E81, r25	; 0x802e81 <currentTrfcnt+0x1>
		asm("nop");
     85c:	00 00       	nop
	}
	if(firstFrame){
     85e:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <firstFrame>
     862:	88 23       	and	r24, r24
     864:	41 f0       	breq	.+16     	; 0x876 <main_sof_action+0x74>
		tiny_calibration_first_sof();
     866:	46 dd       	rcall	.-1396   	; 0x2f4 <tiny_calibration_first_sof>
		firstFrame = 0;
     868:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <firstFrame>
		tcinit = 1;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	80 93 d1 20 	sts	0x20D1, r24	; 0x8020d1 <tcinit>
		sei();
     872:	78 94       	sei
		return;
     874:	08 95       	ret
	}
	else{
		if(tcinit){
     876:	80 91 d1 20 	lds	r24, 0x20D1	; 0x8020d1 <tcinit>
     87a:	88 23       	and	r24, r24
     87c:	b9 f1       	breq	.+110    	; 0x8ec <main_sof_action+0xea>
			if(calibration_values_found == 0x03){
     87e:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__data_end>
     882:	83 30       	cpi	r24, 0x03	; 3
     884:	19 f4       	brne	.+6      	; 0x88c <main_sof_action+0x8a>
				tiny_calibration_maintain();
     886:	48 dd       	rcall	.-1392   	; 0x318 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     888:	b2 de       	rcall	.-668    	; 0x5ee <tiny_calibration_layer2>
     88a:	01 c0       	rjmp	.+2      	; 0x88e <main_sof_action+0x8c>
			} else tiny_calibration_find_values();
     88c:	07 de       	rcall	.-1010   	; 0x49c <tiny_calibration_find_values>
			if(debug_divider == DEBUG_DIVISION){
     88e:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <debug_divider>
     892:	8f 37       	cpi	r24, 0x7F	; 127
     894:	31 f5       	brne	.+76     	; 0x8e2 <main_sof_action+0xe0>
				debug_divider = 0;
     896:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <debug_divider>
				cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     89a:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <cntCntCnt>
     89e:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <cntCntCnt+0x1>
     8a2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8a6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	e0 58       	subi	r30, 0x80	; 128
     8b0:	f3 4d       	sbci	r31, 0xD3	; 211
     8b2:	80 83       	st	Z, r24
     8b4:	91 83       	std	Z+1, r25	; 0x01
				if(cntCntCnt == (CNT_CNT_MAX - 1)){
     8b6:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <cntCntCnt>
     8ba:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <cntCntCnt+0x1>
     8be:	8f 3f       	cpi	r24, 0xFF	; 255
     8c0:	91 05       	cpc	r25, r1
     8c2:	29 f4       	brne	.+10     	; 0x8ce <main_sof_action+0xcc>
					cntCntCnt = 0;
     8c4:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <cntCntCnt>
     8c8:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <cntCntCnt+0x1>
     8cc:	0f c0       	rjmp	.+30     	; 0x8ec <main_sof_action+0xea>
				}
				else cntCntCnt++;
     8ce:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <cntCntCnt>
     8d2:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <cntCntCnt+0x1>
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <cntCntCnt>
     8dc:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <cntCntCnt+0x1>
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <main_sof_action+0xea>
			}
			else debug_divider++;
     8e2:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <debug_divider>
     8e6:	8f 5f       	subi	r24, 0xFF	; 255
     8e8:	80 93 cd 20 	sts	0x20CD, r24	; 0x8020cd <debug_divider>
		}
	}
	
	if(debugOnNextEnd){
     8ec:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <debugOnNextEnd>
     8f0:	88 23       	and	r24, r24
     8f2:	51 f0       	breq	.+20     	; 0x908 <main_sof_action+0x106>
		currentTrfcnt = DMA.CH0.TRFCNT;
     8f4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8f8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8fc:	80 93 80 2e 	sts	0x2E80, r24	; 0x802e80 <currentTrfcnt>
     900:	90 93 81 2e 	sts	0x2E81, r25	; 0x802e81 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     904:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <debugOnNextEnd>
	}
	usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     908:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     90c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	27 37       	cpi	r18, 0x77	; 119
     914:	31 40       	sbci	r19, 0x01	; 1
     916:	08 f0       	brcs	.+2      	; 0x91a <main_sof_action+0x118>
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <usb_state>
	sei();
     91e:	78 94       	sei
     920:	08 95       	ret

00000922 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <main_b_vendor_enable>
	firstFrame = 1;
     928:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], 250, iso_callback);
     92c:	4b e8       	ldi	r20, 0x8B	; 139
     92e:	53 e0       	ldi	r21, 0x03	; 3
     930:	6a ef       	ldi	r22, 0xFA	; 250
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	84 ea       	ldi	r24, 0xA4	; 164
     936:	96 e2       	ldi	r25, 0x26	; 38
     938:	bb d5       	rcall	.+2934   	; 0x14b0 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], 250, iso_callback2);
     93a:	4c e9       	ldi	r20, 0x9C	; 156
     93c:	53 e0       	ldi	r21, 0x03	; 3
     93e:	6a ef       	ldi	r22, 0xFA	; 250
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	8e e9       	ldi	r24, 0x9E	; 158
     944:	97 e2       	ldi	r25, 0x27	; 39
     946:	c0 d5       	rcall	.+2944   	; 0x14c8 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], 250, iso_callback3);
     948:	4d ea       	ldi	r20, 0xAD	; 173
     94a:	53 e0       	ldi	r21, 0x03	; 3
     94c:	6a ef       	ldi	r22, 0xFA	; 250
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	88 e9       	ldi	r24, 0x98	; 152
     952:	98 e2       	ldi	r25, 0x28	; 40
     954:	c5 d5       	rcall	.+2954   	; 0x14e0 <udi_vendor_iso_in_run3>
	return true;
}
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	08 95       	ret

0000095a <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     95a:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <main_b_vendor_enable>
     95e:	08 95       	ret

00000960 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 95       	ret

00000964 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	08 95       	ret

00000968 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     968:	e0 e0       	ldi	r30, 0x00	; 0
     96a:	f2 e0       	ldi	r31, 0x02	; 2
     96c:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     96e:	98 2f       	mov	r25, r24
     970:	9c 71       	andi	r25, 0x1C	; 28
     972:	93 68       	ori	r25, 0x83	; 131
     974:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     976:	88 23       	and	r24, r24
     978:	1c f4       	brge	.+6      	; 0x980 <tiny_adc_ch0setup+0x18>
     97a:	90 e1       	ldi	r25, 0x10	; 16
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	02 c0       	rjmp	.+4      	; 0x984 <tiny_adc_ch0setup+0x1c>
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	89 2b       	or	r24, r25
     986:	e0 e0       	ldi	r30, 0x00	; 0
     988:	f2 e0       	ldi	r31, 0x02	; 2
     98a:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     98c:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     98e:	16 a2       	std	Z+38, r1	; 0x26
     990:	08 95       	ret

00000992 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     992:	e0 e0       	ldi	r30, 0x00	; 0
     994:	f2 e0       	ldi	r31, 0x02	; 2
     996:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     998:	83 68       	ori	r24, 0x83	; 131
     99a:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     99c:	80 e1       	ldi	r24, 0x10	; 16
     99e:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_HI_gc;
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	82 ab       	std	Z+50, r24	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     9a4:	16 aa       	std	Z+54, r1	; 0x36
     9a6:	08 95       	ret

000009a8 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     9a8:	e0 e0       	ldi	r30, 0x00	; 0
     9aa:	f2 e0       	ldi	r31, 0x02	; 2
     9ac:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     9ae:	83 e8       	ldi	r24, 0x83	; 131
     9b0:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     9b2:	8f e2       	ldi	r24, 0x2F	; 47
     9b4:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9b6:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     9b8:	16 a6       	std	Z+46, r1	; 0x2e
     9ba:	08 95       	ret

000009bc <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     9bc:	aa ec       	ldi	r26, 0xCA	; 202
     9be:	b1 e0       	ldi	r27, 0x01	; 1
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     9c4:	e8 2f       	mov	r30, r24
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     9ca:	1c 92       	st	X, r1

	return( result );
}
     9cc:	08 95       	ret

000009ce <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     9d2:	e0 e7       	ldi	r30, 0x70	; 112
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	9d 7f       	andi	r25, 0xFD	; 253
     9da:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     9dc:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     9e0:	62 30       	cpi	r22, 0x02	; 2
     9e2:	31 f1       	breq	.+76     	; 0xa30 <tiny_adc_setup+0x62>
     9e4:	e0 e0       	ldi	r30, 0x00	; 0
     9e6:	f2 e0       	ldi	r31, 0x02	; 2
     9e8:	9c e1       	ldi	r25, 0x1C	; 28
     9ea:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     9ec:	90 e4       	ldi	r25, 0x40	; 64
     9ee:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     9f0:	81 11       	cpse	r24, r1
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <tiny_adc_setup+0x2a>
     9f4:	80 e4       	ldi	r24, 0x40	; 64
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <tiny_adc_setup+0x2c>
     9f8:	80 ec       	ldi	r24, 0xC0	; 192
     9fa:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     9fe:	61 30       	cpi	r22, 0x01	; 1
     a00:	11 f0       	breq	.+4      	; 0xa06 <tiny_adc_setup+0x38>
     a02:	83 e0       	ldi	r24, 0x03	; 3
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <tiny_adc_setup+0x3a>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	c0 e0       	ldi	r28, 0x00	; 0
     a0a:	d2 e0       	ldi	r29, 0x02	; 2
     a0c:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     a0e:	80 e2       	ldi	r24, 0x20	; 32
     a10:	d5 df       	rcall	.-86     	; 0x9bc <ReadCalibrationByte>
     a12:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     a14:	81 e2       	ldi	r24, 0x21	; 33
     a16:	d2 df       	rcall	.-92     	; 0x9bc <ReadCalibrationByte>
     a18:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     a1a:	18 8e       	std	Y+24, r1	; 0x18
     a1c:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     a22:	c2 df       	rcall	.-124    	; 0x9a8 <tiny_adc_pid_setup>
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a26:	80 ec       	ldi	r24, 0xC0	; 192
     a28:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	ec cf       	rjmp	.-40     	; 0xa08 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a30:	e0 e0       	ldi	r30, 0x00	; 0
     a32:	f2 e0       	ldi	r31, 0x02	; 2
     a34:	9e e1       	ldi	r25, 0x1E	; 30
     a36:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a38:	90 e4       	ldi	r25, 0x40	; 64
     a3a:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a3c:	81 11       	cpse	r24, r1
     a3e:	f3 cf       	rjmp	.-26     	; 0xa26 <tiny_adc_setup+0x58>
     a40:	d9 cf       	rjmp	.-78     	; 0x9f4 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     a62:	8f 91       	pop	r24
     a64:	0f 90       	pop	r0
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	0f 90       	pop	r0
     a6a:	1f 90       	pop	r1
     a6c:	18 95       	reti

00000a6e <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     a72:	e0 e7       	ldi	r30, 0x70	; 112
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	82 81       	ldd	r24, Z+2	; 0x02
     a78:	8b 7f       	andi	r24, 0xFB	; 251
     a7a:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     a7c:	c0 e2       	ldi	r28, 0x20	; 32
     a7e:	d3 e0       	ldi	r29, 0x03	; 3
     a80:	8d e0       	ldi	r24, 0x0D	; 13
     a82:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     a84:	80 e4       	ldi	r24, 0x40	; 64
     a86:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     a88:	89 e0       	ldi	r24, 0x09	; 9
     a8a:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     a8c:	83 e3       	ldi	r24, 0x33	; 51
     a8e:	96 df       	rcall	.-212    	; 0x9bc <ReadCalibrationByte>
     a90:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     a92:	82 e3       	ldi	r24, 0x32	; 50
     a94:	93 df       	rcall	.-218    	; 0x9bc <ReadCalibrationByte>
     a96:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     a98:	87 e3       	ldi	r24, 0x37	; 55
     a9a:	90 df       	rcall	.-224    	; 0x9bc <ReadCalibrationByte>
     a9c:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     a9e:	86 e3       	ldi	r24, 0x36	; 54
     aa0:	8d df       	rcall	.-230    	; 0x9bc <ReadCalibrationByte>
     aa2:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     aa4:	e0 e2       	ldi	r30, 0x20	; 32
     aa6:	f6 e0       	ldi	r31, 0x06	; 6
     aa8:	80 81       	ld	r24, Z
     aaa:	83 60       	ori	r24, 0x03	; 3
     aac:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     aae:	14 82       	std	Z+4, r1	; 0x04
	
	

     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     ab6:	e0 e7       	ldi	r30, 0x70	; 112
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	8e 7f       	andi	r24, 0xFE	; 254
     abe:	80 83       	st	Z, r24
     ac0:	83 e8       	ldi	r24, 0x83	; 131
     ac2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     ac6:	08 95       	ret

00000ac8 <tiny_dma_flush>:
     ac8:	e0 e0       	ldi	r30, 0x00	; 0
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	10 8a       	std	Z+16, r1	; 0x10
     ace:	80 e4       	ldi	r24, 0x40	; 64
     ad0:	80 8b       	std	Z+16, r24	; 0x10
     ad2:	10 a2       	std	Z+32, r1	; 0x20
     ad4:	80 a3       	std	Z+32, r24	; 0x20
     ad6:	10 aa       	std	Z+48, r1	; 0x30
     ad8:	80 ab       	std	Z+48, r24	; 0x30
     ada:	e0 e4       	ldi	r30, 0x40	; 64
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	10 82       	st	Z, r1
     ae0:	80 83       	st	Z, r24
     ae2:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <b1_state>
     ae6:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <b2_state>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <usb_state>
     af0:	08 95       	ret

00000af2 <tiny_dma_set_mode_0>:
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	f8 94       	cli
     af8:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     afc:	e5 df       	rcall	.-54     	; 0xac8 <tiny_dma_flush>
     afe:	c0 e0       	ldi	r28, 0x00	; 0
     b00:	d1 e0       	ldi	r29, 0x01	; 1
     b02:	1e aa       	std	Y+54, r1	; 0x36
     b04:	84 e2       	ldi	r24, 0x24	; 36
     b06:	88 ab       	std	Y+48, r24	; 0x30
     b08:	19 aa       	std	Y+49, r1	; 0x31
     b0a:	49 e5       	ldi	r20, 0x59	; 89
     b0c:	4a ab       	std	Y+50, r20	; 0x32
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	9b ab       	std	Y+51, r25	; 0x33
     b12:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     b16:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     b1a:	2c ab       	std	Y+52, r18	; 0x34
     b1c:	3d ab       	std	Y+53, r19	; 0x35
     b1e:	24 ea       	ldi	r18, 0xA4	; 164
     b20:	34 e2       	ldi	r19, 0x24	; 36
     b22:	28 af       	std	Y+56, r18	; 0x38
     b24:	39 af       	std	Y+57, r19	; 0x39
     b26:	1a ae       	std	Y+58, r1	; 0x3a
     b28:	2b e3       	ldi	r18, 0x3B	; 59
     b2a:	2c af       	std	Y+60, r18	; 0x3c
     b2c:	23 e0       	ldi	r18, 0x03	; 3
     b2e:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b32:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b36:	38 a9       	ldd	r19, Y+48	; 0x30
     b38:	30 68       	ori	r19, 0x80	; 128
     b3a:	38 ab       	std	Y+48, r19	; 0x30
     b3c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b40:	e0 e4       	ldi	r30, 0x40	; 64
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	80 83       	st	Z, r24
     b46:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b4a:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b4e:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b52:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     b56:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     b5a:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b5e:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     b62:	44 e9       	ldi	r20, 0x94	; 148
     b64:	52 e2       	ldi	r21, 0x22	; 34
     b66:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b6a:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b6e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b72:	39 e3       	ldi	r19, 0x39	; 57
     b74:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b78:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b7c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b80:	20 81       	ld	r18, Z
     b82:	20 68       	ori	r18, 0x80	; 128
     b84:	20 83       	st	Z, r18
     b86:	18 8a       	std	Y+16, r1	; 0x10
     b88:	20 e4       	ldi	r18, 0x40	; 64
     b8a:	28 8b       	std	Y+16, r18	; 0x10
     b8c:	88 8b       	std	Y+16, r24	; 0x10
     b8e:	99 8b       	std	Y+17, r25	; 0x11
     b90:	25 e9       	ldi	r18, 0x95	; 149
     b92:	2a 8b       	std	Y+18, r18	; 0x12
     b94:	20 e1       	ldi	r18, 0x10	; 16
     b96:	2b 8b       	std	Y+19, r18	; 0x13
     b98:	2e ee       	ldi	r18, 0xEE	; 238
     b9a:	32 e0       	ldi	r19, 0x02	; 2
     b9c:	2c 8b       	std	Y+20, r18	; 0x14
     b9e:	3d 8b       	std	Y+21, r19	; 0x15
     ba0:	88 8f       	std	Y+24, r24	; 0x18
     ba2:	99 8f       	std	Y+25, r25	; 0x19
     ba4:	1a 8e       	std	Y+26, r1	; 0x1a
     ba6:	84 ea       	ldi	r24, 0xA4	; 164
     ba8:	96 e2       	ldi	r25, 0x26	; 38
     baa:	8c 8f       	std	Y+28, r24	; 0x1c
     bac:	9d 8f       	std	Y+29, r25	; 0x1d
     bae:	1e 8e       	std	Y+30, r1	; 0x1e
     bb0:	68 ec       	ldi	r22, 0xC8	; 200
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	84 ef       	ldi	r24, 0xF4	; 244
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	94 dd       	rcall	.-1240   	; 0x6e2 <tiny_calibration_synchronise_phase>
     bba:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <b1_state>
     bbe:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <b2_state>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <usb_state>
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	9f ef       	ldi	r25, 0xFF	; 255
     bcc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     bd0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     bd4:	85 e0       	ldi	r24, 0x05	; 5
     bd6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     bda:	88 89       	ldd	r24, Y+16	; 0x10
     bdc:	80 68       	ori	r24, 0x80	; 128
     bde:	88 8b       	std	Y+16, r24	; 0x10
     be0:	78 94       	sei
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <tiny_dma_set_mode_1>:
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
     bf2:	6a df       	rcall	.-300    	; 0xac8 <tiny_dma_flush>
     bf4:	e0 e0       	ldi	r30, 0x00	; 0
     bf6:	f1 e0       	ldi	r31, 0x01	; 1
     bf8:	10 aa       	std	Z+48, r1	; 0x30
     bfa:	80 e4       	ldi	r24, 0x40	; 64
     bfc:	80 ab       	std	Z+48, r24	; 0x30
     bfe:	94 e0       	ldi	r25, 0x04	; 4
     c00:	90 ab       	std	Z+48, r25	; 0x30
     c02:	11 aa       	std	Z+49, r1	; 0x31
     c04:	12 aa       	std	Z+50, r1	; 0x32
     c06:	5b e4       	ldi	r21, 0x4B	; 75
     c08:	53 ab       	std	Z+51, r21	; 0x33
     c0a:	14 aa       	std	Z+52, r1	; 0x34
     c0c:	15 aa       	std	Z+53, r1	; 0x35
     c0e:	16 aa       	std	Z+54, r1	; 0x36
     c10:	2a e0       	ldi	r18, 0x0A	; 10
     c12:	30 e2       	ldi	r19, 0x20	; 32
     c14:	20 af       	std	Z+56, r18	; 0x38
     c16:	31 af       	std	Z+57, r19	; 0x39
     c18:	12 ae       	std	Z+58, r1	; 0x3a
     c1a:	40 ea       	ldi	r20, 0xA0	; 160
     c1c:	44 af       	std	Z+60, r20	; 0x3c
     c1e:	38 e0       	ldi	r19, 0x08	; 8
     c20:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c24:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c28:	80 a9       	ldd	r24, Z+48	; 0x30
     c2a:	80 6a       	ori	r24, 0xA0	; 160
     c2c:	80 ab       	std	Z+48, r24	; 0x30
     c2e:	85 e5       	ldi	r24, 0x55	; 85
     c30:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     c34:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c38:	a0 e4       	ldi	r26, 0x40	; 64
     c3a:	b1 e0       	ldi	r27, 0x01	; 1
     c3c:	d4 e2       	ldi	r29, 0x24	; 36
     c3e:	dc 93       	st	X, r29
     c40:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c44:	89 e5       	ldi	r24, 0x59	; 89
     c46:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c4a:	c2 e0       	ldi	r28, 0x02	; 2
     c4c:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c50:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     c54:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     c58:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c5c:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c60:	64 ea       	ldi	r22, 0xA4	; 164
     c62:	74 e2       	ldi	r23, 0x24	; 36
     c64:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c68:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c6c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c70:	8b e3       	ldi	r24, 0x3B	; 59
     c72:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c7c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c80:	2c 91       	ld	r18, X
     c82:	20 68       	ori	r18, 0x80	; 128
     c84:	2c 93       	st	X, r18
     c86:	90 8b       	std	Z+16, r25	; 0x10
     c88:	81 8b       	std	Z+17, r24	; 0x11
     c8a:	a1 e9       	ldi	r26, 0x91	; 145
     c8c:	a2 8b       	std	Z+18, r26	; 0x12
     c8e:	20 e1       	ldi	r18, 0x10	; 16
     c90:	23 8b       	std	Z+19, r18	; 0x13
     c92:	67 e7       	ldi	r22, 0x77	; 119
     c94:	71 e0       	ldi	r23, 0x01	; 1
     c96:	64 8b       	std	Z+20, r22	; 0x14
     c98:	75 8b       	std	Z+21, r23	; 0x15
     c9a:	d0 8f       	std	Z+24, r29	; 0x18
     c9c:	c1 8f       	std	Z+25, r28	; 0x19
     c9e:	12 8e       	std	Z+26, r1	; 0x1a
     ca0:	c4 ea       	ldi	r28, 0xA4	; 164
     ca2:	d6 e2       	ldi	r29, 0x26	; 38
     ca4:	c4 8f       	std	Z+28, r28	; 0x1c
     ca6:	d5 8f       	std	Z+29, r29	; 0x1d
     ca8:	16 8e       	std	Z+30, r1	; 0x1e
     caa:	20 89       	ldd	r18, Z+16	; 0x10
     cac:	20 68       	ori	r18, 0x80	; 128
     cae:	20 8b       	std	Z+16, r18	; 0x10
     cb0:	90 a3       	std	Z+32, r25	; 0x20
     cb2:	81 a3       	std	Z+33, r24	; 0x21
     cb4:	a2 a3       	std	Z+34, r26	; 0x22
     cb6:	53 a3       	std	Z+35, r21	; 0x23
     cb8:	64 a3       	std	Z+36, r22	; 0x24
     cba:	75 a3       	std	Z+37, r23	; 0x25
     cbc:	40 a7       	std	Z+40, r20	; 0x28
     cbe:	31 a7       	std	Z+41, r19	; 0x29
     cc0:	12 a6       	std	Z+42, r1	; 0x2a
     cc2:	8b e1       	ldi	r24, 0x1B	; 27
     cc4:	98 e2       	ldi	r25, 0x28	; 40
     cc6:	84 a7       	std	Z+44, r24	; 0x2c
     cc8:	95 a7       	std	Z+45, r25	; 0x2d
     cca:	16 a6       	std	Z+46, r1	; 0x2e
     ccc:	80 a1       	ldd	r24, Z+32	; 0x20
     cce:	80 68       	ori	r24, 0x80	; 128
     cd0:	80 a3       	std	Z+32, r24	; 0x20
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <tiny_dma_set_mode_2>:
     cd8:	cf 93       	push	r28
     cda:	f8 94       	cli
     cdc:	c2 e0       	ldi	r28, 0x02	; 2
     cde:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     ce2:	f2 de       	rcall	.-540    	; 0xac8 <tiny_dma_flush>
     ce4:	e0 e0       	ldi	r30, 0x00	; 0
     ce6:	f1 e0       	ldi	r31, 0x01	; 1
     ce8:	16 aa       	std	Z+54, r1	; 0x36
     cea:	94 e2       	ldi	r25, 0x24	; 36
     cec:	90 ab       	std	Z+48, r25	; 0x30
     cee:	11 aa       	std	Z+49, r1	; 0x31
     cf0:	39 e5       	ldi	r19, 0x59	; 89
     cf2:	32 ab       	std	Z+50, r19	; 0x32
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	83 ab       	std	Z+51, r24	; 0x33
     cf8:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     cfc:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     d00:	44 ab       	std	Z+52, r20	; 0x34
     d02:	55 ab       	std	Z+53, r21	; 0x35
     d04:	44 e9       	ldi	r20, 0x94	; 148
     d06:	52 e2       	ldi	r21, 0x22	; 34
     d08:	40 af       	std	Z+56, r20	; 0x38
     d0a:	51 af       	std	Z+57, r21	; 0x39
     d0c:	12 ae       	std	Z+58, r1	; 0x3a
     d0e:	29 e3       	ldi	r18, 0x39	; 57
     d10:	24 af       	std	Z+60, r18	; 0x3c
     d12:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     d16:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     d1a:	20 a9       	ldd	r18, Z+48	; 0x30
     d1c:	20 68       	ori	r18, 0x80	; 128
     d1e:	20 ab       	std	Z+48, r18	; 0x30
     d20:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     d24:	a0 e4       	ldi	r26, 0x40	; 64
     d26:	b1 e0       	ldi	r27, 0x01	; 1
     d28:	9c 93       	st	X, r25
     d2a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d2e:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     d32:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d36:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     d3a:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     d3e:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d42:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     d46:	24 ea       	ldi	r18, 0xA4	; 164
     d48:	34 e2       	ldi	r19, 0x24	; 36
     d4a:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d4e:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d52:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d56:	2b e3       	ldi	r18, 0x3B	; 59
     d58:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d5c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d60:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d64:	2c 91       	ld	r18, X
     d66:	20 68       	ori	r18, 0x80	; 128
     d68:	2c 93       	st	X, r18
     d6a:	54 e0       	ldi	r21, 0x04	; 4
     d6c:	50 8b       	std	Z+16, r21	; 0x10
     d6e:	81 8b       	std	Z+17, r24	; 0x11
     d70:	41 e9       	ldi	r20, 0x91	; 145
     d72:	42 8b       	std	Z+18, r20	; 0x12
     d74:	20 e1       	ldi	r18, 0x10	; 16
     d76:	23 8b       	std	Z+19, r18	; 0x13
     d78:	27 e7       	ldi	r18, 0x77	; 119
     d7a:	31 e0       	ldi	r19, 0x01	; 1
     d7c:	24 8b       	std	Z+20, r18	; 0x14
     d7e:	35 8b       	std	Z+21, r19	; 0x15
     d80:	90 8f       	std	Z+24, r25	; 0x18
     d82:	c1 8f       	std	Z+25, r28	; 0x19
     d84:	12 8e       	std	Z+26, r1	; 0x1a
     d86:	64 ea       	ldi	r22, 0xA4	; 164
     d88:	76 e2       	ldi	r23, 0x26	; 38
     d8a:	64 8f       	std	Z+28, r22	; 0x1c
     d8c:	75 8f       	std	Z+29, r23	; 0x1d
     d8e:	16 8e       	std	Z+30, r1	; 0x1e
     d90:	90 89       	ldd	r25, Z+16	; 0x10
     d92:	90 68       	ori	r25, 0x80	; 128
     d94:	90 8b       	std	Z+16, r25	; 0x10
     d96:	50 a3       	std	Z+32, r21	; 0x20
     d98:	81 a3       	std	Z+33, r24	; 0x21
     d9a:	42 a3       	std	Z+34, r20	; 0x22
     d9c:	82 e1       	ldi	r24, 0x12	; 18
     d9e:	83 a3       	std	Z+35, r24	; 0x23
     da0:	24 a3       	std	Z+36, r18	; 0x24
     da2:	35 a3       	std	Z+37, r19	; 0x25
     da4:	84 e3       	ldi	r24, 0x34	; 52
     da6:	80 a7       	std	Z+40, r24	; 0x28
     da8:	c1 a7       	std	Z+41, r28	; 0x29
     daa:	12 a6       	std	Z+42, r1	; 0x2a
     dac:	8b e1       	ldi	r24, 0x1B	; 27
     dae:	98 e2       	ldi	r25, 0x28	; 40
     db0:	84 a7       	std	Z+44, r24	; 0x2c
     db2:	95 a7       	std	Z+45, r25	; 0x2d
     db4:	16 a6       	std	Z+46, r1	; 0x2e
     db6:	80 a1       	ldd	r24, Z+32	; 0x20
     db8:	80 68       	ori	r24, 0x80	; 128
     dba:	80 a3       	std	Z+32, r24	; 0x20
     dbc:	78 94       	sei
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <tiny_dma_set_mode_3>:
     dc2:	cf 93       	push	r28
     dc4:	c3 e0       	ldi	r28, 0x03	; 3
     dc6:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     dca:	7e de       	rcall	.-772    	; 0xac8 <tiny_dma_flush>
     dcc:	e0 e0       	ldi	r30, 0x00	; 0
     dce:	f1 e0       	ldi	r31, 0x01	; 1
     dd0:	10 a2       	std	Z+32, r1	; 0x20
     dd2:	50 e4       	ldi	r21, 0x40	; 64
     dd4:	50 a3       	std	Z+32, r21	; 0x20
     dd6:	44 e0       	ldi	r20, 0x04	; 4
     dd8:	40 a3       	std	Z+32, r20	; 0x20
     dda:	11 a2       	std	Z+33, r1	; 0x21
     ddc:	12 a2       	std	Z+34, r1	; 0x22
     dde:	3b e4       	ldi	r19, 0x4B	; 75
     de0:	33 a3       	std	Z+35, r19	; 0x23
     de2:	14 a2       	std	Z+36, r1	; 0x24
     de4:	15 a2       	std	Z+37, r1	; 0x25
     de6:	16 a2       	std	Z+38, r1	; 0x26
     de8:	8a e0       	ldi	r24, 0x0A	; 10
     dea:	90 e2       	ldi	r25, 0x20	; 32
     dec:	80 a7       	std	Z+40, r24	; 0x28
     dee:	91 a7       	std	Z+41, r25	; 0x29
     df0:	12 a6       	std	Z+42, r1	; 0x2a
     df2:	20 ea       	ldi	r18, 0xA0	; 160
     df4:	24 a7       	std	Z+44, r18	; 0x2c
     df6:	98 e0       	ldi	r25, 0x08	; 8
     df8:	95 a7       	std	Z+45, r25	; 0x2d
     dfa:	16 a6       	std	Z+46, r1	; 0x2e
     dfc:	80 a1       	ldd	r24, Z+32	; 0x20
     dfe:	80 6a       	ori	r24, 0xA0	; 160
     e00:	80 a3       	std	Z+32, r24	; 0x20
     e02:	85 e5       	ldi	r24, 0x55	; 85
     e04:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     e08:	16 aa       	std	Z+54, r1	; 0x36
     e0a:	74 e2       	ldi	r23, 0x24	; 36
     e0c:	70 ab       	std	Z+48, r23	; 0x30
     e0e:	11 aa       	std	Z+49, r1	; 0x31
     e10:	69 e5       	ldi	r22, 0x59	; 89
     e12:	62 ab       	std	Z+50, r22	; 0x32
     e14:	c3 ab       	std	Z+51, r28	; 0x33
     e16:	a0 91 0d 20 	lds	r26, 0x200D	; 0x80200d <dacBuf_len>
     e1a:	b0 91 0e 20 	lds	r27, 0x200E	; 0x80200e <dacBuf_len+0x1>
     e1e:	a4 ab       	std	Z+52, r26	; 0x34
     e20:	b5 ab       	std	Z+53, r27	; 0x35
     e22:	a4 e9       	ldi	r26, 0x94	; 148
     e24:	b2 e2       	ldi	r27, 0x22	; 34
     e26:	a0 af       	std	Z+56, r26	; 0x38
     e28:	b1 af       	std	Z+57, r27	; 0x39
     e2a:	12 ae       	std	Z+58, r1	; 0x3a
     e2c:	89 e3       	ldi	r24, 0x39	; 57
     e2e:	84 af       	std	Z+60, r24	; 0x3c
     e30:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     e34:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     e38:	80 a9       	ldd	r24, Z+48	; 0x30
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	80 ab       	std	Z+48, r24	; 0x30
     e3e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     e42:	a0 e4       	ldi	r26, 0x40	; 64
     e44:	b1 e0       	ldi	r27, 0x01	; 1
     e46:	7c 93       	st	X, r23
     e48:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e4c:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e56:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     e5a:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     e5e:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     e62:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     e66:	64 ea       	ldi	r22, 0xA4	; 164
     e68:	74 e2       	ldi	r23, 0x24	; 36
     e6a:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e6e:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e72:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e76:	8b e3       	ldi	r24, 0x3B	; 59
     e78:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e7c:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e80:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e84:	8c 91       	ld	r24, X
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24
     e8a:	10 8a       	std	Z+16, r1	; 0x10
     e8c:	50 8b       	std	Z+16, r21	; 0x10
     e8e:	40 8b       	std	Z+16, r20	; 0x10
     e90:	c1 8b       	std	Z+17, r28	; 0x11
     e92:	81 e9       	ldi	r24, 0x91	; 145
     e94:	82 8b       	std	Z+18, r24	; 0x12
     e96:	33 8b       	std	Z+19, r19	; 0x13
     e98:	47 e7       	ldi	r20, 0x77	; 119
     e9a:	51 e0       	ldi	r21, 0x01	; 1
     e9c:	44 8b       	std	Z+20, r20	; 0x14
     e9e:	55 8b       	std	Z+21, r21	; 0x15
     ea0:	20 8f       	std	Z+24, r18	; 0x18
     ea2:	91 8f       	std	Z+25, r25	; 0x19
     ea4:	12 8e       	std	Z+26, r1	; 0x1a
     ea6:	84 ea       	ldi	r24, 0xA4	; 164
     ea8:	96 e2       	ldi	r25, 0x26	; 38
     eaa:	84 8f       	std	Z+28, r24	; 0x1c
     eac:	95 8f       	std	Z+29, r25	; 0x1d
     eae:	16 8e       	std	Z+30, r1	; 0x1e
     eb0:	80 89       	ldd	r24, Z+16	; 0x10
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	80 8b       	std	Z+16, r24	; 0x10
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <tiny_dma_set_mode_4>:
     eba:	cf 93       	push	r28
     ebc:	c4 e0       	ldi	r28, 0x04	; 4
     ebe:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     ec2:	02 de       	rcall	.-1020   	; 0xac8 <tiny_dma_flush>
     ec4:	e0 e0       	ldi	r30, 0x00	; 0
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	10 a2       	std	Z+32, r1	; 0x20
     eca:	80 e4       	ldi	r24, 0x40	; 64
     ecc:	80 a3       	std	Z+32, r24	; 0x20
     ece:	c0 a3       	std	Z+32, r28	; 0x20
     ed0:	11 a2       	std	Z+33, r1	; 0x21
     ed2:	12 a2       	std	Z+34, r1	; 0x22
     ed4:	4b e4       	ldi	r20, 0x4B	; 75
     ed6:	43 a3       	std	Z+35, r20	; 0x23
     ed8:	14 a2       	std	Z+36, r1	; 0x24
     eda:	15 a2       	std	Z+37, r1	; 0x25
     edc:	16 a2       	std	Z+38, r1	; 0x26
     ede:	8a e0       	ldi	r24, 0x0A	; 10
     ee0:	90 e2       	ldi	r25, 0x20	; 32
     ee2:	80 a7       	std	Z+40, r24	; 0x28
     ee4:	91 a7       	std	Z+41, r25	; 0x29
     ee6:	12 a6       	std	Z+42, r1	; 0x2a
     ee8:	60 ea       	ldi	r22, 0xA0	; 160
     eea:	64 a7       	std	Z+44, r22	; 0x2c
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	85 a7       	std	Z+45, r24	; 0x2d
     ef0:	16 a6       	std	Z+46, r1	; 0x2e
     ef2:	90 a1       	ldd	r25, Z+32	; 0x20
     ef4:	90 6a       	ori	r25, 0xA0	; 160
     ef6:	90 a3       	std	Z+32, r25	; 0x20
     ef8:	95 e5       	ldi	r25, 0x55	; 85
     efa:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     efe:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f02:	a0 e4       	ldi	r26, 0x40	; 64
     f04:	b1 e0       	ldi	r27, 0x01	; 1
     f06:	94 e2       	ldi	r25, 0x24	; 36
     f08:	9c 93       	st	X, r25
     f0a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f0e:	99 e5       	ldi	r25, 0x59	; 89
     f10:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f1a:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     f1e:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     f22:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f26:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f2a:	24 ea       	ldi	r18, 0xA4	; 164
     f2c:	34 e2       	ldi	r19, 0x24	; 36
     f2e:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f32:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f36:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f3a:	9b e3       	ldi	r25, 0x3B	; 59
     f3c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f46:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f4a:	2c 91       	ld	r18, X
     f4c:	20 68       	ori	r18, 0x80	; 128
     f4e:	2c 93       	st	X, r18
     f50:	c0 8b       	std	Z+16, r28	; 0x10
     f52:	91 8b       	std	Z+17, r25	; 0x11
     f54:	31 e9       	ldi	r19, 0x91	; 145
     f56:	32 8b       	std	Z+18, r19	; 0x12
     f58:	43 8b       	std	Z+19, r20	; 0x13
     f5a:	47 e7       	ldi	r20, 0x77	; 119
     f5c:	51 e0       	ldi	r21, 0x01	; 1
     f5e:	44 8b       	std	Z+20, r20	; 0x14
     f60:	55 8b       	std	Z+21, r21	; 0x15
     f62:	60 8f       	std	Z+24, r22	; 0x18
     f64:	81 8f       	std	Z+25, r24	; 0x19
     f66:	12 8e       	std	Z+26, r1	; 0x1a
     f68:	64 ea       	ldi	r22, 0xA4	; 164
     f6a:	76 e2       	ldi	r23, 0x26	; 38
     f6c:	64 8f       	std	Z+28, r22	; 0x1c
     f6e:	75 8f       	std	Z+29, r23	; 0x1d
     f70:	16 8e       	std	Z+30, r1	; 0x1e
     f72:	20 89       	ldd	r18, Z+16	; 0x10
     f74:	20 68       	ori	r18, 0x80	; 128
     f76:	20 8b       	std	Z+16, r18	; 0x10
     f78:	c0 ab       	std	Z+48, r28	; 0x30
     f7a:	91 ab       	std	Z+49, r25	; 0x31
     f7c:	32 ab       	std	Z+50, r19	; 0x32
     f7e:	9a e4       	ldi	r25, 0x4A	; 74
     f80:	93 ab       	std	Z+51, r25	; 0x33
     f82:	44 ab       	std	Z+52, r20	; 0x34
     f84:	55 ab       	std	Z+53, r21	; 0x35
     f86:	93 ec       	ldi	r25, 0xC3	; 195
     f88:	90 af       	std	Z+56, r25	; 0x38
     f8a:	81 af       	std	Z+57, r24	; 0x39
     f8c:	12 ae       	std	Z+58, r1	; 0x3a
     f8e:	8b e1       	ldi	r24, 0x1B	; 27
     f90:	98 e2       	ldi	r25, 0x28	; 40
     f92:	84 af       	std	Z+60, r24	; 0x3c
     f94:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f98:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f9c:	80 a9       	ldd	r24, Z+48	; 0x30
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	80 ab       	std	Z+48, r24	; 0x30
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret

00000fa6 <tiny_dma_set_mode_5>:
     fa6:	85 e0       	ldi	r24, 0x05	; 5
     fa8:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
     fac:	8d dd       	rcall	.-1254   	; 0xac8 <tiny_dma_flush>
     fae:	e0 e0       	ldi	r30, 0x00	; 0
     fb0:	f1 e0       	ldi	r31, 0x01	; 1
     fb2:	16 aa       	std	Z+54, r1	; 0x36
     fb4:	34 e2       	ldi	r19, 0x24	; 36
     fb6:	30 ab       	std	Z+48, r19	; 0x30
     fb8:	11 aa       	std	Z+49, r1	; 0x31
     fba:	29 e5       	ldi	r18, 0x59	; 89
     fbc:	22 ab       	std	Z+50, r18	; 0x32
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	83 ab       	std	Z+51, r24	; 0x33
     fc2:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     fc6:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     fca:	44 ab       	std	Z+52, r20	; 0x34
     fcc:	55 ab       	std	Z+53, r21	; 0x35
     fce:	44 e9       	ldi	r20, 0x94	; 148
     fd0:	52 e2       	ldi	r21, 0x22	; 34
     fd2:	40 af       	std	Z+56, r20	; 0x38
     fd4:	51 af       	std	Z+57, r21	; 0x39
     fd6:	12 ae       	std	Z+58, r1	; 0x3a
     fd8:	99 e3       	ldi	r25, 0x39	; 57
     fda:	94 af       	std	Z+60, r25	; 0x3c
     fdc:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     fe0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     fe4:	90 a9       	ldd	r25, Z+48	; 0x30
     fe6:	90 68       	ori	r25, 0x80	; 128
     fe8:	90 ab       	std	Z+48, r25	; 0x30
     fea:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     fee:	e0 e4       	ldi	r30, 0x40	; 64
     ff0:	f1 e0       	ldi	r31, 0x01	; 1
     ff2:	30 83       	st	Z, r19
     ff4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ff8:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ffc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1000:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    1004:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1008:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    100c:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1010:	24 ea       	ldi	r18, 0xA4	; 164
    1012:	34 e2       	ldi	r19, 0x24	; 36
    1014:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1018:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    101c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1020:	9b e3       	ldi	r25, 0x3B	; 59
    1022:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1026:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    102a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    102e:	80 81       	ld	r24, Z
    1030:	80 68       	ori	r24, 0x80	; 128
    1032:	80 83       	st	Z, r24
    1034:	08 95       	ret

00001036 <tiny_dma_set_mode_6>:
    1036:	86 e0       	ldi	r24, 0x06	; 6
    1038:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    103c:	45 dd       	rcall	.-1398   	; 0xac8 <tiny_dma_flush>
    103e:	e0 e0       	ldi	r30, 0x00	; 0
    1040:	f1 e0       	ldi	r31, 0x01	; 1
    1042:	16 aa       	std	Z+54, r1	; 0x36
    1044:	94 e2       	ldi	r25, 0x24	; 36
    1046:	90 ab       	std	Z+48, r25	; 0x30
    1048:	11 aa       	std	Z+49, r1	; 0x31
    104a:	39 e5       	ldi	r19, 0x59	; 89
    104c:	32 ab       	std	Z+50, r19	; 0x32
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	83 ab       	std	Z+51, r24	; 0x33
    1052:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    1056:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    105a:	44 ab       	std	Z+52, r20	; 0x34
    105c:	55 ab       	std	Z+53, r21	; 0x35
    105e:	44 e9       	ldi	r20, 0x94	; 148
    1060:	52 e2       	ldi	r21, 0x22	; 34
    1062:	40 af       	std	Z+56, r20	; 0x38
    1064:	51 af       	std	Z+57, r21	; 0x39
    1066:	12 ae       	std	Z+58, r1	; 0x3a
    1068:	29 e3       	ldi	r18, 0x39	; 57
    106a:	24 af       	std	Z+60, r18	; 0x3c
    106c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1070:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1074:	20 a9       	ldd	r18, Z+48	; 0x30
    1076:	20 68       	ori	r18, 0x80	; 128
    1078:	20 ab       	std	Z+48, r18	; 0x30
    107a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    107e:	a0 e4       	ldi	r26, 0x40	; 64
    1080:	b1 e0       	ldi	r27, 0x01	; 1
    1082:	9c 93       	st	X, r25
    1084:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1088:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    108c:	32 e0       	ldi	r19, 0x02	; 2
    108e:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1092:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    1096:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    109a:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    109e:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    10a2:	44 ea       	ldi	r20, 0xA4	; 164
    10a4:	54 e2       	ldi	r21, 0x24	; 36
    10a6:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    10aa:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    10ae:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    10b2:	2b e3       	ldi	r18, 0x3B	; 59
    10b4:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    10b8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    10bc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    10c0:	2c 91       	ld	r18, X
    10c2:	20 68       	ori	r18, 0x80	; 128
    10c4:	2c 93       	st	X, r18
    10c6:	10 8a       	std	Z+16, r1	; 0x10
    10c8:	20 e4       	ldi	r18, 0x40	; 64
    10ca:	20 8b       	std	Z+16, r18	; 0x10
    10cc:	24 e0       	ldi	r18, 0x04	; 4
    10ce:	20 8b       	std	Z+16, r18	; 0x10
    10d0:	81 8b       	std	Z+17, r24	; 0x11
    10d2:	81 e9       	ldi	r24, 0x91	; 145
    10d4:	82 8b       	std	Z+18, r24	; 0x12
    10d6:	80 e1       	ldi	r24, 0x10	; 16
    10d8:	83 8b       	std	Z+19, r24	; 0x13
    10da:	4e ee       	ldi	r20, 0xEE	; 238
    10dc:	52 e0       	ldi	r21, 0x02	; 2
    10de:	44 8b       	std	Z+20, r20	; 0x14
    10e0:	55 8b       	std	Z+21, r21	; 0x15
    10e2:	90 8f       	std	Z+24, r25	; 0x18
    10e4:	31 8f       	std	Z+25, r19	; 0x19
    10e6:	12 8e       	std	Z+26, r1	; 0x1a
    10e8:	84 ea       	ldi	r24, 0xA4	; 164
    10ea:	96 e2       	ldi	r25, 0x26	; 38
    10ec:	84 8f       	std	Z+28, r24	; 0x1c
    10ee:	95 8f       	std	Z+29, r25	; 0x1d
    10f0:	16 8e       	std	Z+30, r1	; 0x1e
    10f2:	80 89       	ldd	r24, Z+16	; 0x10
    10f4:	80 68       	ori	r24, 0x80	; 128
    10f6:	80 8b       	std	Z+16, r24	; 0x10
    10f8:	08 95       	ret

000010fa <tiny_dma_set_mode_7>:
    10fa:	87 e0       	ldi	r24, 0x07	; 7
    10fc:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    1100:	e3 dc       	rcall	.-1594   	; 0xac8 <tiny_dma_flush>
    1102:	e0 e0       	ldi	r30, 0x00	; 0
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	16 aa       	std	Z+54, r1	; 0x36
    1108:	94 e2       	ldi	r25, 0x24	; 36
    110a:	90 ab       	std	Z+48, r25	; 0x30
    110c:	11 aa       	std	Z+49, r1	; 0x31
    110e:	39 e5       	ldi	r19, 0x59	; 89
    1110:	32 ab       	std	Z+50, r19	; 0x32
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	83 ab       	std	Z+51, r24	; 0x33
    1116:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    111a:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    111e:	44 ab       	std	Z+52, r20	; 0x34
    1120:	55 ab       	std	Z+53, r21	; 0x35
    1122:	44 e9       	ldi	r20, 0x94	; 148
    1124:	52 e2       	ldi	r21, 0x22	; 34
    1126:	40 af       	std	Z+56, r20	; 0x38
    1128:	51 af       	std	Z+57, r21	; 0x39
    112a:	12 ae       	std	Z+58, r1	; 0x3a
    112c:	29 e3       	ldi	r18, 0x39	; 57
    112e:	24 af       	std	Z+60, r18	; 0x3c
    1130:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1134:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1138:	20 a9       	ldd	r18, Z+48	; 0x30
    113a:	20 68       	ori	r18, 0x80	; 128
    113c:	20 ab       	std	Z+48, r18	; 0x30
    113e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1142:	a0 e4       	ldi	r26, 0x40	; 64
    1144:	b1 e0       	ldi	r27, 0x01	; 1
    1146:	9c 93       	st	X, r25
    1148:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    114c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1150:	32 e0       	ldi	r19, 0x02	; 2
    1152:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1156:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    115a:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    115e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1162:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1166:	44 ea       	ldi	r20, 0xA4	; 164
    1168:	54 e2       	ldi	r21, 0x24	; 36
    116a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    116e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1172:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1176:	2b e3       	ldi	r18, 0x3B	; 59
    1178:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    117c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1180:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1184:	2c 91       	ld	r18, X
    1186:	20 68       	ori	r18, 0x80	; 128
    1188:	2c 93       	st	X, r18
    118a:	10 8a       	std	Z+16, r1	; 0x10
    118c:	20 e4       	ldi	r18, 0x40	; 64
    118e:	20 8b       	std	Z+16, r18	; 0x10
    1190:	25 e0       	ldi	r18, 0x05	; 5
    1192:	20 8b       	std	Z+16, r18	; 0x10
    1194:	81 8b       	std	Z+17, r24	; 0x11
    1196:	81 e9       	ldi	r24, 0x91	; 145
    1198:	82 8b       	std	Z+18, r24	; 0x12
    119a:	80 e1       	ldi	r24, 0x10	; 16
    119c:	83 8b       	std	Z+19, r24	; 0x13
    119e:	4e ee       	ldi	r20, 0xEE	; 238
    11a0:	52 e0       	ldi	r21, 0x02	; 2
    11a2:	44 8b       	std	Z+20, r20	; 0x14
    11a4:	55 8b       	std	Z+21, r21	; 0x15
    11a6:	90 8f       	std	Z+24, r25	; 0x18
    11a8:	31 8f       	std	Z+25, r19	; 0x19
    11aa:	12 8e       	std	Z+26, r1	; 0x1a
    11ac:	84 ea       	ldi	r24, 0xA4	; 164
    11ae:	96 e2       	ldi	r25, 0x26	; 38
    11b0:	84 8f       	std	Z+28, r24	; 0x1c
    11b2:	95 8f       	std	Z+29, r25	; 0x1d
    11b4:	16 8e       	std	Z+30, r1	; 0x1e
    11b6:	80 89       	ldd	r24, Z+16	; 0x10
    11b8:	80 68       	ori	r24, 0x80	; 128
    11ba:	80 8b       	std	Z+16, r24	; 0x10
    11bc:	08 95       	ret

000011be <__vector_6>:
}

ISR(DMA_CH0_vect){
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	8f 93       	push	r24
	DMA.INTFLAGS = 0x01;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
}
    11d0:	8f 91       	pop	r24
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    11dc:	e0 e7       	ldi	r30, 0x70	; 112
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	83 81       	ldd	r24, Z+3	; 0x03
    11e2:	8c 7f       	andi	r24, 0xFC	; 252
    11e4:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    11e6:	84 81       	ldd	r24, Z+4	; 0x04
    11e8:	8c 7f       	andi	r24, 0xFC	; 252
    11ea:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    11ec:	80 81       	ld	r24, Z
    11ee:	8d 7f       	andi	r24, 0xFD	; 253
    11f0:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    11f2:	e0 e8       	ldi	r30, 0x80	; 128
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	80 ec       	ldi	r24, 0xC0	; 192
    11f8:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    11fa:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    11fc:	88 ec       	ldi	r24, 0xC8	; 200
    11fe:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1200:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1202:	a0 e0       	ldi	r26, 0x00	; 0
    1204:	b8 e0       	ldi	r27, 0x08	; 8
    1206:	34 e0       	ldi	r19, 0x04	; 4
    1208:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    120a:	23 e0       	ldi	r18, 0x03	; 3
    120c:	11 96       	adiw	r26, 0x01	; 1
    120e:	2c 93       	st	X, r18
    1210:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1212:	14 96       	adiw	r26, 0x04	; 4
    1214:	1c 92       	st	X, r1
    1216:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1218:	85 ed       	ldi	r24, 0xD5	; 213
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	96 96       	adiw	r26, 0x26	; 38
    121e:	8d 93       	st	X+, r24
    1220:	9c 93       	st	X, r25
    1222:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    1224:	16 96       	adiw	r26, 0x06	; 6
    1226:	1c 92       	st	X, r1
    1228:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    122a:	e0 e4       	ldi	r30, 0x40	; 64
    122c:	f8 e0       	ldi	r31, 0x08	; 8
    122e:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1230:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1232:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    1234:	86 a3       	std	Z+38, r24	; 0x26
    1236:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    1238:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    123a:	e0 e6       	ldi	r30, 0x60	; 96
    123c:	f6 e0       	ldi	r31, 0x06	; 6
    123e:	80 81       	ld	r24, Z
    1240:	80 61       	ori	r24, 0x10	; 16
    1242:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    1244:	e0 e4       	ldi	r30, 0x40	; 64
    1246:	f9 e0       	ldi	r31, 0x09	; 9
    1248:	83 e1       	ldi	r24, 0x13	; 19
    124a:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    124c:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    1252:	a6 a3       	std	Z+38, r26	; 0x26
    1254:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    1256:	10 a6       	std	Z+40, r1	; 0x28
    1258:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 83       	st	Z, r24
    125e:	08 95       	ret

00001260 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	1f 92       	push	r1
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    128a:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    128e:	87 30       	cpi	r24, 0x07	; 7
    1290:	31 f4       	brne	.+12     	; 0x129e <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    1292:	e0 e0       	ldi	r30, 0x00	; 0
    1294:	f2 e0       	ldi	r31, 0x02	; 2
    1296:	84 a5       	ldd	r24, Z+44	; 0x2c
    1298:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    129a:	95 a5       	ldd	r25, Z+45	; 0x2d
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    129e:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    12a2:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <PSU_target>
    12a6:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    12a8:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12ac:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	0c f4       	brge	.+2      	; 0x12b8 <__vector_83+0x58>
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	99 23       	and	r25, r25
    12ba:	c9 f0       	breq	.+50     	; 0x12ee <__vector_83+0x8e>
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	2a 3f       	cpi	r18, 0xFA	; 250
    12c0:	37 40       	sbci	r19, 0x07	; 7
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <__vector_83+0x66>
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	99 23       	and	r25, r25
    12c8:	91 f0       	breq	.+36     	; 0x12ee <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    12ca:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12ce:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12d2:	89 30       	cpi	r24, 0x09	; 9
    12d4:	1c f4       	brge	.+6      	; 0x12dc <__vector_83+0x7c>
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <__vector_83+0x80>
    12dc:	86 e0       	ldi	r24, 0x06	; 6
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	82 0f       	add	r24, r18
    12e2:	93 1f       	adc	r25, r19
    12e4:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    12e8:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    12ec:	23 c0       	rjmp	.+70     	; 0x1334 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    12ee:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12f2:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	8f 3f       	cpi	r24, 0xFF	; 255
    12fa:	0c f0       	brlt	.+2      	; 0x12fe <__vector_83+0x9e>
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	99 23       	and	r25, r25
    1300:	c9 f0       	breq	.+50     	; 0x1334 <__vector_83+0xd4>
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	27 30       	cpi	r18, 0x07	; 7
    1306:	31 05       	cpc	r19, r1
    1308:	08 f4       	brcc	.+2      	; 0x130c <__vector_83+0xac>
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	99 23       	and	r25, r25
    130e:	91 f0       	breq	.+36     	; 0x1334 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1310:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1314:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1318:	88 3f       	cpi	r24, 0xF8	; 248
    131a:	1c f0       	brlt	.+6      	; 0x1322 <__vector_83+0xc2>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <__vector_83+0xc6>
    1322:	86 e0       	ldi	r24, 0x06	; 6
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	48 1b       	sub	r20, r24
    132a:	59 0b       	sbc	r21, r25
    132c:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1330:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    1334:	0f 90       	pop	r0
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	9f 91       	pop	r25
    1340:	8f 91       	pop	r24
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    1354:	e0 e7       	ldi	r30, 0x70	; 112
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	83 81       	ldd	r24, Z+3	; 0x03
    135a:	8f 7e       	andi	r24, 0xEF	; 239
    135c:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    135e:	e0 e4       	ldi	r30, 0x40	; 64
    1360:	f6 e0       	ldi	r31, 0x06	; 6
    1362:	80 81       	ld	r24, Z
    1364:	8a 6a       	ori	r24, 0xAA	; 170
    1366:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    136c:	88 e5       	ldi	r24, 0x58	; 88
    136e:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1370:	e0 ea       	ldi	r30, 0xA0	; 160
    1372:	f8 e0       	ldi	r31, 0x08	; 8
    1374:	84 ec       	ldi	r24, 0xC4	; 196
    1376:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    1378:	83 e0       	ldi	r24, 0x03	; 3
    137a:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    137c:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    137e:	88 e1       	ldi	r24, 0x18	; 24
    1380:	84 83       	std	Z+4, r24	; 0x04
    1382:	08 95       	ret

00001384 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    1384:	e0 e7       	ldi	r30, 0x70	; 112
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	83 81       	ldd	r24, Z+3	; 0x03
    138a:	87 7f       	andi	r24, 0xF7	; 247
    138c:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    138e:	e0 ec       	ldi	r30, 0xC0	; 192
    1390:	f8 e0       	ldi	r31, 0x08	; 8
    1392:	80 e4       	ldi	r24, 0x40	; 64
    1394:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    1396:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1398:	88 e5       	ldi	r24, 0x58	; 88
    139a:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    139e:	08 95       	ret

000013a0 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    13a0:	1f 92       	push	r1
    13a2:	0f 92       	push	r0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	0f 92       	push	r0
    13a8:	11 24       	eor	r1, r1
	asm("nop");
    13aa:	00 00       	nop
}
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti

000013b6 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13b6:	9f b7       	in	r25, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	e8 2f       	mov	r30, r24
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	e0 59       	subi	r30, 0x90	; 144
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	60 95       	com	r22
    13c4:	80 81       	ld	r24, Z
    13c6:	68 23       	and	r22, r24
    13c8:	60 83       	st	Z, r22
    13ca:	9f bf       	out	0x3f, r25	; 63
    13cc:	08 95       	ret

000013ce <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    13ce:	86 30       	cpi	r24, 0x06	; 6
    13d0:	11 f0       	breq	.+4      	; 0x13d6 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    13d6:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    13d8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    13dc:	81 fd       	sbrc	r24, 1
    13de:	26 c0       	rjmp	.+76     	; 0x142c <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    13e0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    13e2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    13e4:	e0 e5       	ldi	r30, 0x50	; 80
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	82 60       	ori	r24, 0x02	; 2
    13ec:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13ee:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    13f2:	81 ff       	sbrs	r24, 1
    13f4:	fd cf       	rjmp	.-6      	; 0x13f0 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    13f6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    13f8:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    13fa:	a0 e5       	ldi	r26, 0x50	; 80
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	16 96       	adiw	r26, 0x06	; 6
    1400:	8c 91       	ld	r24, X
    1402:	16 97       	sbiw	r26, 0x06	; 6
    1404:	89 7f       	andi	r24, 0xF9	; 249
    1406:	16 96       	adiw	r26, 0x06	; 6
    1408:	8c 93       	st	X, r24
    140a:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    140c:	e0 e6       	ldi	r30, 0x60	; 96
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 e8       	ldi	r24, 0x80	; 128
    1412:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1414:	8b eb       	ldi	r24, 0xBB	; 187
    1416:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1418:	16 96       	adiw	r26, 0x06	; 6
    141a:	8c 91       	ld	r24, X
    141c:	16 97       	sbiw	r26, 0x06	; 6
    141e:	84 60       	ori	r24, 0x04	; 4
    1420:	16 96       	adiw	r26, 0x06	; 6
    1422:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1424:	80 81       	ld	r24, Z
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    142a:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    142c:	63 60       	ori	r22, 0x03	; 3
    142e:	84 e4       	ldi	r24, 0x44	; 68
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	22 d5       	rcall	.+2628   	; 0x1e78 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1434:	60 e4       	ldi	r22, 0x40	; 64
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	be cf       	rjmp	.-132    	; 0x13b6 <sysclk_enable_module>
    143a:	08 95       	ret

0000143c <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    143c:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <udi_vendor_alternate_setting>
    1440:	08 95       	ret

00001442 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    1442:	40 d1       	rcall	.+640    	; 0x16c4 <udc_get_interface_desc>
    1444:	fc 01       	movw	r30, r24
    1446:	83 81       	ldd	r24, Z+3	; 0x03
    1448:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    144c:	81 11       	cpse	r24, r1
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    1450:	68 ca       	rjmp	.-2864   	; 0x922 <main_vendor_enable>
    1452:	08 95       	ret
			return false;
		}
	}
	return true;
    1454:	81 e0       	ldi	r24, 0x01	; 1
}
    1456:	08 95       	ret

00001458 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    1458:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <udi_vendor_alternate_setting>
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	09 f4       	brne	.+2      	; 0x1462 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    1460:	7c ca       	rjmp	.-2824   	; 0x95a <main_vendor_disable>
    1462:	08 95       	ret

00001464 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    1464:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <udd_g_ctrlreq>
    1468:	88 23       	and	r24, r24
    146a:	4c f4       	brge	.+18     	; 0x147e <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    146c:	80 76       	andi	r24, 0x60	; 96
    146e:	80 34       	cpi	r24, 0x40	; 64
    1470:	a9 f4       	brne	.+42     	; 0x149c <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1472:	80 91 95 24 	lds	r24, 0x2495	; 0x802495 <udd_g_ctrlreq+0x1>
    1476:	81 11       	cpse	r24, r1
    1478:	13 c0       	rjmp	.+38     	; 0x14a0 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    147a:	74 ca       	rjmp	.-2840   	; 0x964 <main_setup_in_received>
    147c:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    147e:	80 76       	andi	r24, 0x60	; 96
    1480:	80 34       	cpi	r24, 0x40	; 64
    1482:	81 f4       	brne	.+32     	; 0x14a4 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1484:	80 91 95 24 	lds	r24, 0x2495	; 0x802495 <udd_g_ctrlreq+0x1>
    1488:	81 11       	cpse	r24, r1
    148a:	0e c0       	rjmp	.+28     	; 0x14a8 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    148c:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    1490:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    1494:	89 2b       	or	r24, r25
    1496:	51 f0       	breq	.+20     	; 0x14ac <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1498:	63 ca       	rjmp	.-2874   	; 0x960 <main_setup_out_received>
    149a:	08 95       	ret
		}
	}
	return false; // Not supported request
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	08 95       	ret
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	08 95       	ret
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	08 95       	ret
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	08 95       	ret
    14ac:	80 e0       	ldi	r24, 0x00	; 0
}
    14ae:	08 95       	ret

000014b0 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    14b6:	8a 01       	movw	r16, r20
    14b8:	ac 01       	movw	r20, r24
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	81 e8       	ldi	r24, 0x81	; 129
    14be:	0e 94 b0 13 	call	0x2760	; 0x2760 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    14ce:	8a 01       	movw	r16, r20
    14d0:	ac 01       	movw	r20, r24
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	82 e8       	ldi	r24, 0x82	; 130
    14d6:	0e 94 b0 13 	call	0x2760	; 0x2760 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	08 95       	ret

000014e0 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    14e6:	8a 01       	movw	r16, r20
    14e8:	ac 01       	movw	r20, r24
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	83 e8       	ldi	r24, 0x83	; 131
    14ee:	0e 94 b0 13 	call	0x2760	; 0x2760 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    14f8:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    14fc:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1500:	01 90       	ld	r0, Z+
    1502:	f0 81       	ld	r31, Z
    1504:	e0 2d       	mov	r30, r0
    1506:	22 81       	ldd	r18, Z+2	; 0x02
    1508:	33 81       	ldd	r19, Z+3	; 0x03
    150a:	2e 0f       	add	r18, r30
    150c:	3f 1f       	adc	r19, r31
    150e:	fc 01       	movw	r30, r24
    1510:	40 81       	ld	r20, Z
    1512:	e4 0f       	add	r30, r20
    1514:	f1 1d       	adc	r31, r1
    1516:	e2 17       	cp	r30, r18
    1518:	f3 07       	cpc	r31, r19
    151a:	b8 f4       	brcc	.+46     	; 0x154a <udc_next_desc_in_iface+0x52>
    151c:	81 81       	ldd	r24, Z+1	; 0x01
    151e:	84 30       	cpi	r24, 0x04	; 4
    1520:	b9 f0       	breq	.+46     	; 0x1550 <udc_next_desc_in_iface+0x58>
    1522:	86 13       	cpse	r24, r22
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <udc_next_desc_in_iface+0x40>
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <udc_next_desc_in_iface+0x3a>
    1528:	81 81       	ldd	r24, Z+1	; 0x01
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	a1 f0       	breq	.+40     	; 0x1556 <udc_next_desc_in_iface+0x5e>
    152e:	86 13       	cpse	r24, r22
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <udc_next_desc_in_iface+0x40>
    1532:	8e 2f       	mov	r24, r30
    1534:	9f 2f       	mov	r25, r31
    1536:	08 95       	ret
    1538:	80 81       	ld	r24, Z
    153a:	e8 0f       	add	r30, r24
    153c:	f1 1d       	adc	r31, r1
    153e:	e2 17       	cp	r30, r18
    1540:	f3 07       	cpc	r31, r19
    1542:	90 f3       	brcs	.-28     	; 0x1528 <udc_next_desc_in_iface+0x30>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	08 95       	ret
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	08 95       	ret
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	08 95       	ret
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	08 95       	ret

0000155c <udc_valid_address>:
    155c:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    1560:	8f 77       	andi	r24, 0x7F	; 127
    1562:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <udd_set_address>
    1566:	08 95       	ret

00001568 <udc_update_iface_desc>:
    1568:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <udc_num_configuration>
    156c:	99 23       	and	r25, r25
    156e:	81 f1       	breq	.+96     	; 0x15d0 <udc_update_iface_desc+0x68>
    1570:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1574:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1578:	01 90       	ld	r0, Z+
    157a:	f0 81       	ld	r31, Z
    157c:	e0 2d       	mov	r30, r0
    157e:	94 81       	ldd	r25, Z+4	; 0x04
    1580:	89 17       	cp	r24, r25
    1582:	40 f5       	brcc	.+80     	; 0x15d4 <udc_update_iface_desc+0x6c>
    1584:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <udc_ptr_iface>
    1588:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <udc_ptr_iface+0x1>
    158c:	22 81       	ldd	r18, Z+2	; 0x02
    158e:	33 81       	ldd	r19, Z+3	; 0x03
    1590:	2e 0f       	add	r18, r30
    1592:	3f 1f       	adc	r19, r31
    1594:	e2 17       	cp	r30, r18
    1596:	f3 07       	cpc	r31, r19
    1598:	f8 f4       	brcc	.+62     	; 0x15d8 <udc_update_iface_desc+0x70>
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	94 30       	cpi	r25, 0x04	; 4
    159e:	61 f4       	brne	.+24     	; 0x15b8 <udc_update_iface_desc+0x50>
    15a0:	92 81       	ldd	r25, Z+2	; 0x02
    15a2:	98 13       	cpse	r25, r24
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <udc_update_iface_desc+0x50>
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	96 13       	cpse	r25, r22
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <udc_update_iface_desc+0x50>
    15ac:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <udc_ptr_iface>
    15b0:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <udc_ptr_iface+0x1>
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	08 95       	ret
    15b8:	90 81       	ld	r25, Z
    15ba:	e9 0f       	add	r30, r25
    15bc:	f1 1d       	adc	r31, r1
    15be:	e2 17       	cp	r30, r18
    15c0:	f3 07       	cpc	r31, r19
    15c2:	58 f3       	brcs	.-42     	; 0x159a <udc_update_iface_desc+0x32>
    15c4:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <udc_ptr_iface>
    15c8:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <udc_ptr_iface+0x1>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	08 95       	ret
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	08 95       	ret
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	08 95       	ret
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	08 95       	ret

000015dc <udc_iface_disable>:
    15dc:	ef 92       	push	r14
    15de:	ff 92       	push	r15
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	c8 2f       	mov	r28, r24
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	be df       	rcall	.-132    	; 0x1568 <udc_update_iface_desc>
    15ec:	18 2f       	mov	r17, r24
    15ee:	88 23       	and	r24, r24
    15f0:	81 f1       	breq	.+96     	; 0x1652 <udc_iface_disable+0x76>
    15f2:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    15f6:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    15fa:	ec 2f       	mov	r30, r28
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	ee 0f       	add	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	12 96       	adiw	r26, 0x02	; 2
    1604:	8d 91       	ld	r24, X+
    1606:	9c 91       	ld	r25, X
    1608:	13 97       	sbiw	r26, 0x03	; 3
    160a:	e8 0f       	add	r30, r24
    160c:	f9 1f       	adc	r31, r25
    160e:	e0 80       	ld	r14, Z
    1610:	f1 80       	ldd	r15, Z+1	; 0x01
    1612:	d7 01       	movw	r26, r14
    1614:	16 96       	adiw	r26, 0x06	; 6
    1616:	ed 91       	ld	r30, X+
    1618:	fc 91       	ld	r31, X
    161a:	17 97       	sbiw	r26, 0x07	; 7
    161c:	09 95       	icall
    161e:	68 2f       	mov	r22, r24
    1620:	8c 2f       	mov	r24, r28
    1622:	a2 df       	rcall	.-188    	; 0x1568 <udc_update_iface_desc>
    1624:	18 2f       	mov	r17, r24
    1626:	88 23       	and	r24, r24
    1628:	a1 f0       	breq	.+40     	; 0x1652 <udc_iface_disable+0x76>
    162a:	c0 91 db 20 	lds	r28, 0x20DB	; 0x8020db <udc_ptr_iface>
    162e:	d0 91 dc 20 	lds	r29, 0x20DC	; 0x8020dc <udc_ptr_iface+0x1>
    1632:	65 e0       	ldi	r22, 0x05	; 5
    1634:	ce 01       	movw	r24, r28
    1636:	60 df       	rcall	.-320    	; 0x14f8 <udc_next_desc_in_iface>
    1638:	ec 01       	movw	r28, r24
    163a:	89 2b       	or	r24, r25
    163c:	21 f0       	breq	.+8      	; 0x1646 <udc_iface_disable+0x6a>
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	0e 94 b3 14 	call	0x2966	; 0x2966 <udd_ep_free>
    1644:	f6 cf       	rjmp	.-20     	; 0x1632 <udc_iface_disable+0x56>
    1646:	d7 01       	movw	r26, r14
    1648:	12 96       	adiw	r26, 0x02	; 2
    164a:	ed 91       	ld	r30, X+
    164c:	fc 91       	ld	r31, X
    164e:	13 97       	sbiw	r26, 0x03	; 3
    1650:	09 95       	icall
    1652:	81 2f       	mov	r24, r17
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	08 95       	ret

00001660 <udc_iface_enable>:
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	18 2f       	mov	r17, r24
    1668:	7f df       	rcall	.-258    	; 0x1568 <udc_update_iface_desc>
    166a:	88 23       	and	r24, r24
    166c:	39 f1       	breq	.+78     	; 0x16bc <udc_iface_enable+0x5c>
    166e:	c0 91 db 20 	lds	r28, 0x20DB	; 0x8020db <udc_ptr_iface>
    1672:	d0 91 dc 20 	lds	r29, 0x20DC	; 0x8020dc <udc_ptr_iface+0x1>
    1676:	65 e0       	ldi	r22, 0x05	; 5
    1678:	ce 01       	movw	r24, r28
    167a:	3e df       	rcall	.-388    	; 0x14f8 <udc_next_desc_in_iface>
    167c:	ec 01       	movw	r28, r24
    167e:	89 2b       	or	r24, r25
    1680:	41 f0       	breq	.+16     	; 0x1692 <udc_iface_enable+0x32>
    1682:	4c 81       	ldd	r20, Y+4	; 0x04
    1684:	5d 81       	ldd	r21, Y+5	; 0x05
    1686:	6b 81       	ldd	r22, Y+3	; 0x03
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	a5 d7       	rcall	.+3914   	; 0x25d6 <udd_ep_alloc>
    168c:	81 11       	cpse	r24, r1
    168e:	f3 cf       	rjmp	.-26     	; 0x1676 <udc_iface_enable+0x16>
    1690:	15 c0       	rjmp	.+42     	; 0x16bc <udc_iface_enable+0x5c>
    1692:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1696:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    169a:	e1 2f       	mov	r30, r17
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	12 96       	adiw	r26, 0x02	; 2
    16a4:	8d 91       	ld	r24, X+
    16a6:	9c 91       	ld	r25, X
    16a8:	13 97       	sbiw	r26, 0x03	; 3
    16aa:	e8 0f       	add	r30, r24
    16ac:	f9 1f       	adc	r31, r25
    16ae:	01 90       	ld	r0, Z+
    16b0:	f0 81       	ld	r31, Z
    16b2:	e0 2d       	mov	r30, r0
    16b4:	01 90       	ld	r0, Z+
    16b6:	f0 81       	ld	r31, Z
    16b8:	e0 2d       	mov	r30, r0
    16ba:	09 95       	icall
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	08 95       	ret

000016c4 <udc_get_interface_desc>:
    16c4:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <udc_ptr_iface>
    16c8:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <udc_ptr_iface+0x1>
    16cc:	08 95       	ret

000016ce <udc_start>:
    16ce:	f1 c6       	rjmp	.+3554   	; 0x24b2 <udd_enable>
    16d0:	08 95       	ret

000016d2 <udc_reset>:
    16d2:	cf 93       	push	r28
    16d4:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    16d8:	88 23       	and	r24, r24
    16da:	c1 f0       	breq	.+48     	; 0x170c <udc_reset+0x3a>
    16dc:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    16e0:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    16e4:	01 90       	ld	r0, Z+
    16e6:	f0 81       	ld	r31, Z
    16e8:	e0 2d       	mov	r30, r0
    16ea:	84 81       	ldd	r24, Z+4	; 0x04
    16ec:	88 23       	and	r24, r24
    16ee:	71 f0       	breq	.+28     	; 0x170c <udc_reset+0x3a>
    16f0:	c0 e0       	ldi	r28, 0x00	; 0
    16f2:	8c 2f       	mov	r24, r28
    16f4:	73 df       	rcall	.-282    	; 0x15dc <udc_iface_disable>
    16f6:	cf 5f       	subi	r28, 0xFF	; 255
    16f8:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    16fc:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1700:	01 90       	ld	r0, Z+
    1702:	f0 81       	ld	r31, Z
    1704:	e0 2d       	mov	r30, r0
    1706:	84 81       	ldd	r24, Z+4	; 0x04
    1708:	c8 17       	cp	r28, r24
    170a:	98 f3       	brcs	.-26     	; 0x16f2 <udc_reset+0x20>
    170c:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <udc_num_configuration>
    1710:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <udc_device_status>
    1714:	10 92 e5 20 	sts	0x20E5, r1	; 0x8020e5 <udc_device_status+0x1>
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    171c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    171e:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1722:	88 23       	and	r24, r24
    1724:	49 f1       	breq	.+82     	; 0x1778 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1726:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    172a:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    172e:	ed 91       	ld	r30, X+
    1730:	fc 91       	ld	r31, X
    1732:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1734:	84 81       	ldd	r24, Z+4	; 0x04
    1736:	88 23       	and	r24, r24
    1738:	f9 f0       	breq	.+62     	; 0x1778 <udc_sof_notify+0x5c>
    173a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    173c:	ec 2f       	mov	r30, r28
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	ee 0f       	add	r30, r30
    1742:	ff 1f       	adc	r31, r31
    1744:	12 96       	adiw	r26, 0x02	; 2
    1746:	8d 91       	ld	r24, X+
    1748:	9c 91       	ld	r25, X
    174a:	13 97       	sbiw	r26, 0x03	; 3
    174c:	e8 0f       	add	r30, r24
    174e:	f9 1f       	adc	r31, r25
    1750:	01 90       	ld	r0, Z+
    1752:	f0 81       	ld	r31, Z
    1754:	e0 2d       	mov	r30, r0
    1756:	00 84       	ldd	r0, Z+8	; 0x08
    1758:	f1 85       	ldd	r31, Z+9	; 0x09
    175a:	e0 2d       	mov	r30, r0
    175c:	30 97       	sbiw	r30, 0x00	; 0
    175e:	09 f0       	breq	.+2      	; 0x1762 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1760:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1762:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1764:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1768:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    176c:	ed 91       	ld	r30, X+
    176e:	fc 91       	ld	r31, X
    1770:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1772:	84 81       	ldd	r24, Z+4	; 0x04
    1774:	c8 17       	cp	r28, r24
    1776:	10 f3       	brcs	.-60     	; 0x173c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1778:	cf 91       	pop	r28
    177a:	08 95       	ret

0000177c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1784:	e4 e9       	ldi	r30, 0x94	; 148
    1786:	f4 e2       	ldi	r31, 0x24	; 36
    1788:	12 86       	std	Z+10, r1	; 0x0a
    178a:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    178c:	14 86       	std	Z+12, r1	; 0x0c
    178e:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1790:	16 86       	std	Z+14, r1	; 0x0e
    1792:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1794:	80 81       	ld	r24, Z
    1796:	88 23       	and	r24, r24
    1798:	3c f4       	brge	.+14     	; 0x17a8 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    179a:	20 91 9a 24 	lds	r18, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    179e:	30 91 9b 24 	lds	r19, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    17a2:	23 2b       	or	r18, r19
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <udc_process_setup+0x2c>
    17a6:	5c c3       	rjmp	.+1720   	; 0x1e60 <udc_process_setup+0x6e4>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    17a8:	80 76       	andi	r24, 0x60	; 96
    17aa:	80 34       	cpi	r24, 0x40	; 64
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <udc_process_setup+0x34>
    17ae:	fa c0       	rjmp	.+500    	; 0x19a4 <udc_process_setup+0x228>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    17b0:	e0 91 95 24 	lds	r30, 0x2495	; 0x802495 <udd_g_ctrlreq+0x1>
    17b4:	8e 2f       	mov	r24, r30
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	fc 01       	movw	r30, r24
    17ba:	e0 5a       	subi	r30, 0xA0	; 160
    17bc:	f1 09       	sbc	r31, r1
    17be:	e8 30       	cpi	r30, 0x08	; 8
    17c0:	f1 05       	cpc	r31, r1
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <udc_process_setup+0x4a>
    17c4:	e6 c0       	rjmp	.+460    	; 0x1992 <udc_process_setup+0x216>
    17c6:	e2 50       	subi	r30, 0x02	; 2
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <debugOnNextEnd>
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    17d4:	60 91 9a 24 	lds	r22, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    17d8:	70 91 9b 24 	lds	r23, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    17dc:	86 e8       	ldi	r24, 0x86	; 134
    17de:	92 e2       	ldi	r25, 0x22	; 34
    17e0:	f3 d6       	rcall	.+3558   	; 0x25c8 <udd_set_setup_payload>
    17e2:	42 c3       	rjmp	.+1668   	; 0x1e68 <udc_process_setup+0x6ec>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    17e4:	e0 e0       	ldi	r30, 0x00	; 0
    17e6:	f8 e0       	ldi	r31, 0x08	; 8
    17e8:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    17ea:	c4 e9       	ldi	r28, 0x94	; 148
    17ec:	d4 e2       	ldi	r29, 0x24	; 36
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	9b 81       	ldd	r25, Y+3	; 0x03
    17f2:	86 ab       	std	Z+54, r24	; 0x36
    17f4:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	8f 70       	andi	r24, 0x0F	; 15
    17fa:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    17fc:	6e 81       	ldd	r22, Y+6	; 0x06
    17fe:	7f 81       	ldd	r23, Y+7	; 0x07
    1800:	84 e9       	ldi	r24, 0x94	; 148
    1802:	92 e2       	ldi	r25, 0x22	; 34
    1804:	e1 d6       	rcall	.+3522   	; 0x25c8 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1806:	8e 81       	ldd	r24, Y+6	; 0x06
    1808:	9f 81       	ldd	r25, Y+7	; 0x07
    180a:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    180e:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1812:	82 17       	cp	r24, r18
    1814:	93 07       	cpc	r25, r19
    1816:	09 f4       	brne	.+2      	; 0x181a <udc_process_setup+0x9e>
    1818:	27 c3       	rjmp	.+1614   	; 0x1e68 <udc_process_setup+0x6ec>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    181a:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    181e:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				switch(global_mode){
    1822:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    1826:	8e 2f       	mov	r24, r30
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	88 30       	cpi	r24, 0x08	; 8
    182c:	91 05       	cpc	r25, r1
    182e:	08 f0       	brcs	.+2      	; 0x1832 <udc_process_setup+0xb6>
    1830:	b2 c0       	rjmp	.+356    	; 0x1996 <udc_process_setup+0x21a>
    1832:	fc 01       	movw	r30, r24
    1834:	ea 5f       	subi	r30, 0xFA	; 250
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    183c:	5a d9       	rcall	.-3404   	; 0xaf2 <tiny_dma_set_mode_0>
    183e:	14 c3       	rjmp	.+1576   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1840:	d3 d9       	rcall	.-3162   	; 0xbe8 <tiny_dma_set_mode_1>
    1842:	12 c3       	rjmp	.+1572   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1844:	49 da       	rcall	.-2926   	; 0xcd8 <tiny_dma_set_mode_2>
    1846:	10 c3       	rjmp	.+1568   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1848:	bc da       	rcall	.-2696   	; 0xdc2 <tiny_dma_set_mode_3>
    184a:	0e c3       	rjmp	.+1564   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 4:
					tiny_dma_set_mode_4();
    184c:	36 db       	rcall	.-2452   	; 0xeba <tiny_dma_set_mode_4>
    184e:	0c c3       	rjmp	.+1560   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1850:	aa db       	rcall	.-2220   	; 0xfa6 <tiny_dma_set_mode_5>
    1852:	0a c3       	rjmp	.+1556   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1854:	f0 db       	rcall	.-2080   	; 0x1036 <tiny_dma_set_mode_6>
    1856:	08 c3       	rjmp	.+1552   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1858:	50 dc       	rcall	.-1888   	; 0x10fa <tiny_dma_set_mode_7>
    185a:	06 c3       	rjmp	.+1548   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    185c:	e0 e4       	ldi	r30, 0x40	; 64
    185e:	f8 e0       	ldi	r31, 0x08	; 8
    1860:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1862:	c4 e9       	ldi	r28, 0x94	; 148
    1864:	d4 e2       	ldi	r29, 0x24	; 36
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	86 ab       	std	Z+54, r24	; 0x36
    186c:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	8f 70       	andi	r24, 0x0F	; 15
    1872:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    1874:	6e 81       	ldd	r22, Y+6	; 0x06
    1876:	7f 81       	ldd	r23, Y+7	; 0x07
    1878:	84 ea       	ldi	r24, 0xA4	; 164
    187a:	94 e2       	ldi	r25, 0x24	; 36
    187c:	a5 d6       	rcall	.+3402   	; 0x25c8 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    187e:	8e 81       	ldd	r24, Y+6	; 0x06
    1880:	9f 81       	ldd	r25, Y+7	; 0x07
    1882:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    1886:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    188a:	82 17       	cp	r24, r18
    188c:	93 07       	cpc	r25, r19
    188e:	09 f4       	brne	.+2      	; 0x1892 <udc_process_setup+0x116>
    1890:	eb c2       	rjmp	.+1494   	; 0x1e68 <udc_process_setup+0x6ec>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1892:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    1896:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				switch(global_mode){
    189a:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    189e:	8e 2f       	mov	r24, r30
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	91 05       	cpc	r25, r1
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <udc_process_setup+0x12e>
    18a8:	78 c0       	rjmp	.+240    	; 0x199a <udc_process_setup+0x21e>
    18aa:	fc 01       	movw	r30, r24
    18ac:	e2 5f       	subi	r30, 0xF2	; 242
    18ae:	fe 4f       	sbci	r31, 0xFE	; 254
    18b0:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    18b4:	1e d9       	rcall	.-3524   	; 0xaf2 <tiny_dma_set_mode_0>
    18b6:	d8 c2       	rjmp	.+1456   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 1:
					tiny_dma_set_mode_1();
    18b8:	97 d9       	rcall	.-3282   	; 0xbe8 <tiny_dma_set_mode_1>
    18ba:	d6 c2       	rjmp	.+1452   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 2:
					tiny_dma_set_mode_2();
    18bc:	0d da       	rcall	.-3046   	; 0xcd8 <tiny_dma_set_mode_2>
    18be:	d4 c2       	rjmp	.+1448   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 3:
					tiny_dma_set_mode_3();
    18c0:	80 da       	rcall	.-2816   	; 0xdc2 <tiny_dma_set_mode_3>
    18c2:	d2 c2       	rjmp	.+1444   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 4:
					tiny_dma_set_mode_4();
    18c4:	fa da       	rcall	.-2572   	; 0xeba <tiny_dma_set_mode_4>
    18c6:	d0 c2       	rjmp	.+1440   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 5:
					tiny_dma_set_mode_5();
    18c8:	6e db       	rcall	.-2340   	; 0xfa6 <tiny_dma_set_mode_5>
    18ca:	ce c2       	rjmp	.+1436   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 6:
					tiny_dma_set_mode_6();
    18cc:	b4 db       	rcall	.-2200   	; 0x1036 <tiny_dma_set_mode_6>
    18ce:	cc c2       	rjmp	.+1432   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
					case 7:
					tiny_dma_set_mode_7();
    18d0:	14 dc       	rcall	.-2008   	; 0x10fa <tiny_dma_set_mode_7>
    18d2:	ca c2       	rjmp	.+1428   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    18d4:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    18d8:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    18dc:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    18e0:	80 93 d3 20 	sts	0x20D3, r24	; 0x8020d3 <PSU_target>
    18e4:	c1 c2       	rjmp	.+1410   	; 0x1e68 <udc_process_setup+0x6ec>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    18e6:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    18ea:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    18ee:	bc c2       	rjmp	.+1400   	; 0x1e68 <udc_process_setup+0x6ec>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    18f0:	e0 91 96 24 	lds	r30, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    18f4:	f0 91 97 24 	lds	r31, 0x2497	; 0x802497 <udd_g_ctrlreq+0x3>
    18f8:	e8 30       	cpi	r30, 0x08	; 8
    18fa:	f1 05       	cpc	r31, r1
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <udc_process_setup+0x184>
    18fe:	4f c0       	rjmp	.+158    	; 0x199e <udc_process_setup+0x222>
    1900:	ea 5e       	subi	r30, 0xEA	; 234
    1902:	fe 4f       	sbci	r31, 0xFE	; 254
    1904:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	60 d8       	rcall	.-3904   	; 0x9ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    190e:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x4>
    1912:	2a d8       	rcall	.-4012   	; 0x968 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    1914:	ee d8       	rcall	.-3620   	; 0xaf2 <tiny_dma_set_mode_0>
    1916:	a8 c2       	rjmp	.+1360   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	58 d8       	rcall	.-3920   	; 0x9ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    191e:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x4>
    1922:	22 d8       	rcall	.-4028   	; 0x968 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1924:	61 d9       	rcall	.-3390   	; 0xbe8 <tiny_dma_set_mode_1>
    1926:	a0 c2       	rjmp	.+1344   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	50 d8       	rcall	.-3936   	; 0x9ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    192e:	c4 e9       	ldi	r28, 0x94	; 148
    1930:	d4 e2       	ldi	r29, 0x24	; 36
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	19 d8       	rcall	.-4046   	; 0x968 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	2c d8       	rcall	.-4008   	; 0x992 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    193a:	ce d9       	rcall	.-3172   	; 0xcd8 <tiny_dma_set_mode_2>
    193c:	95 c2       	rjmp	.+1322   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    193e:	41 da       	rcall	.-2942   	; 0xdc2 <tiny_dma_set_mode_3>
    1940:	93 c2       	rjmp	.+1318   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    1942:	bb da       	rcall	.-2698   	; 0xeba <tiny_dma_set_mode_4>
    1944:	91 c2       	rjmp	.+1314   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	41 d8       	rcall	.-3966   	; 0x9ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    194c:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x4>
    1950:	0b d8       	rcall	.-4074   	; 0x968 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    1952:	29 db       	rcall	.-2478   	; 0xfa6 <tiny_dma_set_mode_5>
    1954:	89 c2       	rjmp	.+1298   	; 0x1e68 <udc_process_setup+0x6ec>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	39 d8       	rcall	.-3982   	; 0x9ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    195c:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x4>
    1960:	03 d8       	rcall	.-4090   	; 0x968 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    1962:	69 db       	rcall	.-2350   	; 0x1036 <tiny_dma_set_mode_6>
    1964:	81 c2       	rjmp	.+1282   	; 0x1e68 <udc_process_setup+0x6ec>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1966:	62 e0       	ldi	r22, 0x02	; 2
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	31 d8       	rcall	.-3998   	; 0x9ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    196c:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x4>
    1970:	80 68       	ori	r24, 0x80	; 128
    1972:	0e 94 b4 04 	call	0x968	; 0x968 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    1976:	c1 db       	rcall	.-2174   	; 0x10fa <tiny_dma_set_mode_7>
    1978:	77 c2       	rjmp	.+1262   	; 0x1e68 <udc_process_setup+0x6ec>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    197a:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    197e:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1982:	72 c2       	rjmp	.+1252   	; 0x1e68 <udc_process_setup+0x6ec>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1984:	e9 e7       	ldi	r30, 0x79	; 121
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	88 ed       	ldi	r24, 0xD8	; 216
    198c:	f8 94       	cli
    198e:	84 bf       	out	0x34, r24	; 52
    1990:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	05 c0       	rjmp	.+10     	; 0x19a0 <udc_process_setup+0x224>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <udc_process_setup+0x224>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <udc_process_setup+0x224>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    199e:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    19a0:	81 11       	cpse	r24, r1
    19a2:	65 c2       	rjmp	.+1226   	; 0x1e6e <udc_process_setup+0x6f2>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    19a4:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <udd_g_ctrlreq>
    19a8:	98 2f       	mov	r25, r24
    19aa:	90 76       	andi	r25, 0x60	; 96
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <udc_process_setup+0x234>
    19ae:	e1 c1       	rjmp	.+962    	; 0x1d72 <udc_process_setup+0x5f6>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    19b0:	88 23       	and	r24, r24
    19b2:	0c f0       	brlt	.+2      	; 0x19b6 <udc_process_setup+0x23a>
    19b4:	05 c1       	rjmp	.+522    	; 0x1bc0 <udc_process_setup+0x444>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    19b6:	20 91 9a 24 	lds	r18, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    19ba:	30 91 9b 24 	lds	r19, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    19be:	21 15       	cp	r18, r1
    19c0:	31 05       	cpc	r19, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <udc_process_setup+0x24a>
    19c4:	d6 c1       	rjmp	.+940    	; 0x1d72 <udc_process_setup+0x5f6>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    19c6:	8f 71       	andi	r24, 0x1F	; 31
    19c8:	09 f0       	breq	.+2      	; 0x19cc <udc_process_setup+0x250>
    19ca:	a3 c0       	rjmp	.+326    	; 0x1b12 <udc_process_setup+0x396>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    19cc:	90 91 95 24 	lds	r25, 0x2495	; 0x802495 <udd_g_ctrlreq+0x1>
    19d0:	96 30       	cpi	r25, 0x06	; 6
    19d2:	79 f0       	breq	.+30     	; 0x19f2 <udc_process_setup+0x276>
    19d4:	98 30       	cpi	r25, 0x08	; 8
    19d6:	09 f4       	brne	.+2      	; 0x19da <udc_process_setup+0x25e>
    19d8:	92 c0       	rjmp	.+292    	; 0x1afe <udc_process_setup+0x382>
    19da:	91 11       	cpse	r25, r1
    19dc:	9a c0       	rjmp	.+308    	; 0x1b12 <udc_process_setup+0x396>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <udc_process_setup+0x26a>
    19e4:	c6 c1       	rjmp	.+908    	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	84 ee       	ldi	r24, 0xE4	; 228
    19ec:	90 e2       	ldi	r25, 0x20	; 32
    19ee:	ec d5       	rcall	.+3032   	; 0x25c8 <udd_set_setup_payload>
    19f0:	3d c2       	rjmp	.+1146   	; 0x1e6c <udc_process_setup+0x6f0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    19f2:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    19f6:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    19fa:	29 2f       	mov	r18, r25
    19fc:	33 27       	eor	r19, r19
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	a9 f0       	breq	.+42     	; 0x1a2e <udc_process_setup+0x2b2>
    1a04:	24 f4       	brge	.+8      	; 0x1a0e <udc_process_setup+0x292>
    1a06:	21 30       	cpi	r18, 0x01	; 1
    1a08:	31 05       	cpc	r19, r1
    1a0a:	41 f0       	breq	.+16     	; 0x1a1c <udc_process_setup+0x2a0>
    1a0c:	a9 c1       	rjmp	.+850    	; 0x1d60 <udc_process_setup+0x5e4>
    1a0e:	23 30       	cpi	r18, 0x03	; 3
    1a10:	31 05       	cpc	r19, r1
    1a12:	d9 f1       	breq	.+118    	; 0x1a8a <udc_process_setup+0x30e>
    1a14:	2f 30       	cpi	r18, 0x0F	; 15
    1a16:	31 05       	cpc	r19, r1
    1a18:	51 f1       	breq	.+84     	; 0x1a6e <udc_process_setup+0x2f2>
    1a1a:	a2 c1       	rjmp	.+836    	; 0x1d60 <udc_process_setup+0x5e4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1a1c:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1a20:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1a24:	dc 01       	movw	r26, r24
    1a26:	6c 91       	ld	r22, X
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	ce d5       	rcall	.+2972   	; 0x25c8 <udd_set_setup_payload>
    1a2c:	59 c0       	rjmp	.+178    	; 0x1ae0 <udc_process_setup+0x364>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1a2e:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1a32:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1a36:	21 89       	ldd	r18, Z+17	; 0x11
    1a38:	82 17       	cp	r24, r18
    1a3a:	08 f0       	brcs	.+2      	; 0x1a3e <udc_process_setup+0x2c2>
    1a3c:	9a c1       	rjmp	.+820    	; 0x1d72 <udc_process_setup+0x5f6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1a3e:	99 27       	eor	r25, r25
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1a4c:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1a50:	e8 0f       	add	r30, r24
    1a52:	f9 1f       	adc	r31, r25
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1a58:	fc 01       	movw	r30, r24
    1a5a:	62 81       	ldd	r22, Z+2	; 0x02
    1a5c:	73 81       	ldd	r23, Z+3	; 0x03
    1a5e:	b4 d5       	rcall	.+2920   	; 0x25c8 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1a60:	e0 91 9c 24 	lds	r30, 0x249C	; 0x80249c <udd_g_ctrlreq+0x8>
    1a64:	f0 91 9d 24 	lds	r31, 0x249D	; 0x80249d <udd_g_ctrlreq+0x9>
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	81 83       	std	Z+1, r24	; 0x01
    1a6c:	39 c0       	rjmp	.+114    	; 0x1ae0 <udc_process_setup+0x364>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1a6e:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1a72:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <udc_process_setup+0x300>
    1a7a:	7b c1       	rjmp	.+758    	; 0x1d72 <udc_process_setup+0x5f6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	12 96       	adiw	r26, 0x02	; 2
    1a80:	6d 91       	ld	r22, X+
    1a82:	7c 91       	ld	r23, X
    1a84:	13 97       	sbiw	r26, 0x03	; 3
    1a86:	a0 d5       	rcall	.+2880   	; 0x25c8 <udd_set_setup_payload>
    1a88:	2b c0       	rjmp	.+86     	; 0x1ae0 <udc_process_setup+0x364>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1a8a:	99 27       	eor	r25, r25
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	91 05       	cpc	r25, r1
    1a90:	71 f0       	breq	.+28     	; 0x1aae <udc_process_setup+0x332>
    1a92:	38 f0       	brcs	.+14     	; 0x1aa2 <udc_process_setup+0x326>
    1a94:	02 97       	sbiw	r24, 0x02	; 2
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <udc_process_setup+0x31e>
    1a98:	6c c1       	rjmp	.+728    	; 0x1d72 <udc_process_setup+0x5f6>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1a9a:	86 e9       	ldi	r24, 0x96	; 150
    1a9c:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a9e:	28 e1       	ldi	r18, 0x18	; 24
    1aa0:	09 c0       	rjmp	.+18     	; 0x1ab4 <udc_process_setup+0x338>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1aa2:	64 e0       	ldi	r22, 0x04	; 4
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	8a eb       	ldi	r24, 0xBA	; 186
    1aa8:	90 e2       	ldi	r25, 0x20	; 32
    1aaa:	8e d5       	rcall	.+2844   	; 0x25c8 <udd_set_setup_payload>
    1aac:	19 c0       	rjmp	.+50     	; 0x1ae0 <udc_process_setup+0x364>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1aae:	8f ea       	ldi	r24, 0xAF	; 175
    1ab0:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1ab2:	29 e0       	ldi	r18, 0x09	; 9
    1ab4:	38 2f       	mov	r19, r24
    1ab6:	a6 e6       	ldi	r26, 0x66	; 102
    1ab8:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1aba:	e8 2f       	mov	r30, r24
    1abc:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1abe:	81 91       	ld	r24, Z+
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	8d 93       	st	X+, r24
    1ac4:	9d 93       	st	X+, r25
    1ac6:	8e 2f       	mov	r24, r30
    1ac8:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1aca:	82 17       	cp	r24, r18
    1acc:	c0 f3       	brcs	.-16     	; 0x1abe <udc_process_setup+0x342>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1ace:	62 2f       	mov	r22, r18
    1ad0:	66 0f       	add	r22, r22
    1ad2:	6e 5f       	subi	r22, 0xFE	; 254
    1ad4:	60 93 64 20 	sts	0x2064, r22	; 0x802064 <udc_string_desc>
		udd_set_setup_payload(
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	84 e6       	ldi	r24, 0x64	; 100
    1adc:	90 e2       	ldi	r25, 0x20	; 32
    1ade:	74 d5       	rcall	.+2792   	; 0x25c8 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1ae0:	e4 e9       	ldi	r30, 0x94	; 148
    1ae2:	f4 e2       	ldi	r31, 0x24	; 36
    1ae4:	86 81       	ldd	r24, Z+6	; 0x06
    1ae6:	97 81       	ldd	r25, Z+7	; 0x07
    1ae8:	22 85       	ldd	r18, Z+10	; 0x0a
    1aea:	33 85       	ldd	r19, Z+11	; 0x0b
    1aec:	82 17       	cp	r24, r18
    1aee:	93 07       	cpc	r25, r19
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <udc_process_setup+0x378>
    1af2:	bc c1       	rjmp	.+888    	; 0x1e6c <udc_process_setup+0x6f0>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1af4:	80 93 9e 24 	sts	0x249E, r24	; 0x80249e <udd_g_ctrlreq+0xa>
    1af8:	90 93 9f 24 	sts	0x249F, r25	; 0x80249f <udd_g_ctrlreq+0xb>
    1afc:	b7 c1       	rjmp	.+878    	; 0x1e6c <udc_process_setup+0x6f0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1afe:	21 30       	cpi	r18, 0x01	; 1
    1b00:	31 05       	cpc	r19, r1
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <udc_process_setup+0x38a>
    1b04:	36 c1       	rjmp	.+620    	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	80 ee       	ldi	r24, 0xE0	; 224
    1b0c:	90 e2       	ldi	r25, 0x20	; 32
    1b0e:	5c d5       	rcall	.+2744   	; 0x25c8 <udd_set_setup_payload>
    1b10:	ad c1       	rjmp	.+858    	; 0x1e6c <udc_process_setup+0x6f0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	e1 f5       	brne	.+120    	; 0x1b8e <udc_process_setup+0x412>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b16:	90 91 95 24 	lds	r25, 0x2495	; 0x802495 <udd_g_ctrlreq+0x1>
    1b1a:	9a 30       	cpi	r25, 0x0A	; 10
    1b1c:	c1 f5       	brne	.+112    	; 0x1b8e <udc_process_setup+0x412>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1b1e:	21 30       	cpi	r18, 0x01	; 1
    1b20:	31 05       	cpc	r19, r1
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <udc_process_setup+0x3aa>
    1b24:	26 c1       	rjmp	.+588    	; 0x1d72 <udc_process_setup+0x5f6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1b26:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1b2a:	88 23       	and	r24, r24
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <udc_process_setup+0x3b4>
    1b2e:	21 c1       	rjmp	.+578    	; 0x1d72 <udc_process_setup+0x5f6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b30:	c0 91 98 24 	lds	r28, 0x2498	; 0x802498 <udd_g_ctrlreq+0x4>
    1b34:	d0 91 99 24 	lds	r29, 0x2499	; 0x802499 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b38:	00 91 dd 20 	lds	r16, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1b3c:	10 91 de 20 	lds	r17, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1b40:	d8 01       	movw	r26, r16
    1b42:	ed 91       	ld	r30, X+
    1b44:	fc 91       	ld	r31, X
    1b46:	84 81       	ldd	r24, Z+4	; 0x04
    1b48:	c8 17       	cp	r28, r24
    1b4a:	08 f0       	brcs	.+2      	; 0x1b4e <udc_process_setup+0x3d2>
    1b4c:	12 c1       	rjmp	.+548    	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	8c 2f       	mov	r24, r28
    1b52:	0a dd       	rcall	.-1516   	; 0x1568 <udc_update_iface_desc>
    1b54:	88 23       	and	r24, r24
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <udc_process_setup+0x3de>
    1b58:	0c c1       	rjmp	.+536    	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	99 27       	eor	r25, r25
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	d8 01       	movw	r26, r16
    1b64:	12 96       	adiw	r26, 0x02	; 2
    1b66:	ed 91       	ld	r30, X+
    1b68:	fc 91       	ld	r31, X
    1b6a:	13 97       	sbiw	r26, 0x03	; 3
    1b6c:	e8 0f       	add	r30, r24
    1b6e:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1b70:	01 90       	ld	r0, Z+
    1b72:	f0 81       	ld	r31, Z
    1b74:	e0 2d       	mov	r30, r0
    1b76:	86 81       	ldd	r24, Z+6	; 0x06
    1b78:	97 81       	ldd	r25, Z+7	; 0x07
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	09 95       	icall
    1b7e:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	82 ee       	ldi	r24, 0xE2	; 226
    1b88:	90 e2       	ldi	r25, 0x20	; 32
    1b8a:	1e d5       	rcall	.+2620   	; 0x25c8 <udd_set_setup_payload>
    1b8c:	6f c1       	rjmp	.+734    	; 0x1e6c <udc_process_setup+0x6f0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b8e:	82 30       	cpi	r24, 0x02	; 2
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <udc_process_setup+0x418>
    1b92:	ef c0       	rjmp	.+478    	; 0x1d72 <udc_process_setup+0x5f6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b94:	80 91 95 24 	lds	r24, 0x2495	; 0x802495 <udd_g_ctrlreq+0x1>
    1b98:	81 11       	cpse	r24, r1
    1b9a:	e4 c0       	rjmp	.+456    	; 0x1d64 <udc_process_setup+0x5e8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1b9c:	22 30       	cpi	r18, 0x02	; 2
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <udc_process_setup+0x428>
    1ba2:	e7 c0       	rjmp	.+462    	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1ba4:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x4>
    1ba8:	8b d5       	rcall	.+2838   	; 0x26c0 <udd_ep_is_halted>
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <udc_ep_status.5532>
    1bb0:	90 93 da 20 	sts	0x20DA, r25	; 0x8020da <udc_ep_status.5532+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1bb4:	62 e0       	ldi	r22, 0x02	; 2
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	89 ed       	ldi	r24, 0xD9	; 217
    1bba:	90 e2       	ldi	r25, 0x20	; 32
    1bbc:	05 d5       	rcall	.+2570   	; 0x25c8 <udd_set_setup_payload>
    1bbe:	56 c1       	rjmp	.+684    	; 0x1e6c <udc_process_setup+0x6f0>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1bc0:	8f 71       	andi	r24, 0x1F	; 31
    1bc2:	09 f0       	breq	.+2      	; 0x1bc6 <udc_process_setup+0x44a>
    1bc4:	83 c0       	rjmp	.+262    	; 0x1ccc <udc_process_setup+0x550>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1bc6:	90 91 95 24 	lds	r25, 0x2495	; 0x802495 <udd_g_ctrlreq+0x1>
    1bca:	93 30       	cpi	r25, 0x03	; 3
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <udc_process_setup+0x454>
    1bce:	cc c0       	rjmp	.+408    	; 0x1d68 <udc_process_setup+0x5ec>
    1bd0:	18 f4       	brcc	.+6      	; 0x1bd8 <udc_process_setup+0x45c>
    1bd2:	91 30       	cpi	r25, 0x01	; 1
    1bd4:	a1 f0       	breq	.+40     	; 0x1bfe <udc_process_setup+0x482>
    1bd6:	7a c0       	rjmp	.+244    	; 0x1ccc <udc_process_setup+0x550>
    1bd8:	95 30       	cpi	r25, 0x05	; 5
    1bda:	19 f0       	breq	.+6      	; 0x1be2 <udc_process_setup+0x466>
    1bdc:	99 30       	cpi	r25, 0x09	; 9
    1bde:	39 f1       	breq	.+78     	; 0x1c2e <udc_process_setup+0x4b2>
    1be0:	75 c0       	rjmp	.+234    	; 0x1ccc <udc_process_setup+0x550>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1be2:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    1be6:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    1bea:	89 2b       	or	r24, r25
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <udc_process_setup+0x474>
    1bee:	c1 c0       	rjmp	.+386    	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1bf0:	8e ea       	ldi	r24, 0xAE	; 174
    1bf2:	9a e0       	ldi	r25, 0x0A	; 10
    1bf4:	80 93 a0 24 	sts	0x24A0, r24	; 0x8024a0 <udd_g_ctrlreq+0xc>
    1bf8:	90 93 a1 24 	sts	0x24A1, r25	; 0x8024a1 <udd_g_ctrlreq+0xd>
    1bfc:	37 c1       	rjmp	.+622    	; 0x1e6c <udc_process_setup+0x6f0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1bfe:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    1c02:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    1c06:	89 2b       	or	r24, r25
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <udc_process_setup+0x490>
    1c0a:	b3 c0       	rjmp	.+358    	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1c0c:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    1c10:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <udd_g_ctrlreq+0x3>
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <udc_process_setup+0x49e>
    1c18:	ac c0       	rjmp	.+344    	; 0x1d72 <udc_process_setup+0x5f6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1c1a:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <udc_device_status>
    1c1e:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <udc_device_status+0x1>
    1c22:	8d 7f       	andi	r24, 0xFD	; 253
    1c24:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <udc_device_status>
    1c28:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <udc_device_status+0x1>
    1c2c:	1f c1       	rjmp	.+574    	; 0x1e6c <udc_process_setup+0x6f0>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1c2e:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    1c32:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    1c36:	89 2b       	or	r24, r25
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <udc_process_setup+0x4c0>
    1c3a:	9b c0       	rjmp	.+310    	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1c3c:	c2 d4       	rcall	.+2436   	; 0x25c2 <udd_getaddress>
    1c3e:	88 23       	and	r24, r24
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <udc_process_setup+0x4c8>
    1c42:	97 c0       	rjmp	.+302    	; 0x1d72 <udc_process_setup+0x5f6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c44:	20 91 96 24 	lds	r18, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    1c48:	30 91 97 24 	lds	r19, 0x2497	; 0x802497 <udd_g_ctrlreq+0x3>
    1c4c:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1c4e:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1c52:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c56:	81 89       	ldd	r24, Z+17	; 0x11
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	82 17       	cp	r24, r18
    1c5c:	93 07       	cpc	r25, r19
    1c5e:	08 f4       	brcc	.+2      	; 0x1c62 <udc_process_setup+0x4e6>
    1c60:	88 c0       	rjmp	.+272    	; 0x1d72 <udc_process_setup+0x5f6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1c62:	37 dd       	rcall	.-1426   	; 0x16d2 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1c64:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    1c68:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <udd_g_ctrlreq+0x3>
    1c6c:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1c70:	88 23       	and	r24, r24
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <udc_process_setup+0x4fa>
    1c74:	fb c0       	rjmp	.+502    	; 0x1e6c <udc_process_setup+0x6f0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1c76:	99 27       	eor	r25, r25
    1c78:	81 50       	subi	r24, 0x01	; 1
    1c7a:	90 4c       	sbci	r25, 0xC0	; 192
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1c88:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1c8c:	e8 0f       	add	r30, r24
    1c8e:	f9 1f       	adc	r31, r25
    1c90:	e0 93 dd 20 	sts	0x20DD, r30	; 0x8020dd <udc_ptr_conf>
    1c94:	f0 93 de 20 	sts	0x20DE, r31	; 0x8020de <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c98:	01 90       	ld	r0, Z+
    1c9a:	f0 81       	ld	r31, Z
    1c9c:	e0 2d       	mov	r30, r0
    1c9e:	84 81       	ldd	r24, Z+4	; 0x04
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <udc_process_setup+0x52a>
    1ca4:	e3 c0       	rjmp	.+454    	; 0x1e6c <udc_process_setup+0x6f0>
    1ca6:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	8c 2f       	mov	r24, r28
    1cac:	d9 dc       	rcall	.-1614   	; 0x1660 <udc_iface_enable>
    1cae:	88 23       	and	r24, r24
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <udc_process_setup+0x538>
    1cb2:	5f c0       	rjmp	.+190    	; 0x1d72 <udc_process_setup+0x5f6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1cb4:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cb6:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1cba:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1cbe:	01 90       	ld	r0, Z+
    1cc0:	f0 81       	ld	r31, Z
    1cc2:	e0 2d       	mov	r30, r0
    1cc4:	84 81       	ldd	r24, Z+4	; 0x04
    1cc6:	c8 17       	cp	r28, r24
    1cc8:	78 f3       	brcs	.-34     	; 0x1ca8 <udc_process_setup+0x52c>
    1cca:	d0 c0       	rjmp	.+416    	; 0x1e6c <udc_process_setup+0x6f0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	e1 f4       	brne	.+56     	; 0x1d08 <udc_process_setup+0x58c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cd0:	90 91 95 24 	lds	r25, 0x2495	; 0x802495 <udd_g_ctrlreq+0x1>
    1cd4:	9b 30       	cpi	r25, 0x0B	; 11
    1cd6:	c1 f4       	brne	.+48     	; 0x1d08 <udc_process_setup+0x58c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1cd8:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    1cdc:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    1ce0:	89 2b       	or	r24, r25
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <udc_process_setup+0x56a>
    1ce4:	46 c0       	rjmp	.+140    	; 0x1d72 <udc_process_setup+0x5f6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1ce6:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1cea:	88 23       	and	r24, r24
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <udc_process_setup+0x574>
    1cee:	41 c0       	rjmp	.+130    	; 0x1d72 <udc_process_setup+0x5f6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1cf0:	e4 e9       	ldi	r30, 0x94	; 148
    1cf2:	f4 e2       	ldi	r31, 0x24	; 36
    1cf4:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1cf6:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1cf8:	8c 2f       	mov	r24, r28
    1cfa:	70 dc       	rcall	.-1824   	; 0x15dc <udc_iface_disable>
    1cfc:	88 23       	and	r24, r24
    1cfe:	c9 f1       	breq	.+114    	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1d00:	6d 2f       	mov	r22, r29
    1d02:	8c 2f       	mov	r24, r28
    1d04:	ad dc       	rcall	.-1702   	; 0x1660 <udc_iface_enable>
    1d06:	33 c0       	rjmp	.+102    	; 0x1d6e <udc_process_setup+0x5f2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1d08:	82 30       	cpi	r24, 0x02	; 2
    1d0a:	99 f5       	brne	.+102    	; 0x1d72 <udc_process_setup+0x5f6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d0c:	80 91 95 24 	lds	r24, 0x2495	; 0x802495 <udd_g_ctrlreq+0x1>
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <udc_process_setup+0x59e>
    1d14:	83 30       	cpi	r24, 0x03	; 3
    1d16:	89 f0       	breq	.+34     	; 0x1d3a <udc_process_setup+0x5be>
    1d18:	29 c0       	rjmp	.+82     	; 0x1d6c <udc_process_setup+0x5f0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d1a:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    1d1e:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    1d22:	89 2b       	or	r24, r25
    1d24:	31 f5       	brne	.+76     	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1d26:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    1d2a:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <udd_g_ctrlreq+0x3>
    1d2e:	89 2b       	or	r24, r25
    1d30:	01 f5       	brne	.+64     	; 0x1d72 <udc_process_setup+0x5f6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d32:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x4>
    1d36:	df d4       	rcall	.+2494   	; 0x26f6 <udd_ep_clear_halt>
    1d38:	1a c0       	rjmp	.+52     	; 0x1d6e <udc_process_setup+0x5f2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d3a:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    1d3e:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    1d42:	89 2b       	or	r24, r25
    1d44:	b1 f4       	brne	.+44     	; 0x1d72 <udc_process_setup+0x5f6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1d46:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq+0x2>
    1d4a:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <udd_g_ctrlreq+0x3>
    1d4e:	89 2b       	or	r24, r25
    1d50:	81 f4       	brne	.+32     	; 0x1d72 <udc_process_setup+0x5f6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d52:	c4 e9       	ldi	r28, 0x94	; 148
    1d54:	d4 e2       	ldi	r29, 0x24	; 36
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	bd d5       	rcall	.+2938   	; 0x28d4 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	20 d6       	rcall	.+3136   	; 0x299e <udd_ep_set_halt>
    1d5e:	07 c0       	rjmp	.+14     	; 0x1d6e <udc_process_setup+0x5f2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <udc_process_setup+0x5f2>
				break;
			}
		}
#endif
	}
	return false;
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <udc_process_setup+0x5f2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <udc_process_setup+0x5f2>
				break;
			}
		}
#endif
	}
	return false;
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1d6e:	81 11       	cpse	r24, r1
    1d70:	7e c0       	rjmp	.+252    	; 0x1e6e <udc_process_setup+0x6f2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1d72:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <udd_g_ctrlreq>
    1d76:	8f 71       	andi	r24, 0x1F	; 31
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	71 f5       	brne	.+92     	; 0x1dd8 <udc_process_setup+0x65c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d7c:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1d80:	88 23       	and	r24, r24
    1d82:	51 f1       	breq	.+84     	; 0x1dd8 <udc_process_setup+0x65c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d84:	00 91 98 24 	lds	r16, 0x2498	; 0x802498 <udd_g_ctrlreq+0x4>
    1d88:	10 91 99 24 	lds	r17, 0x2499	; 0x802499 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d8c:	c0 91 dd 20 	lds	r28, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1d90:	d0 91 de 20 	lds	r29, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1d94:	e8 81       	ld	r30, Y
    1d96:	f9 81       	ldd	r31, Y+1	; 0x01
    1d98:	84 81       	ldd	r24, Z+4	; 0x04
    1d9a:	08 17       	cp	r16, r24
    1d9c:	e8 f4       	brcc	.+58     	; 0x1dd8 <udc_process_setup+0x65c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	80 2f       	mov	r24, r16
    1da2:	e2 db       	rcall	.-2108   	; 0x1568 <udc_update_iface_desc>
    1da4:	88 23       	and	r24, r24
    1da6:	c1 f0       	breq	.+48     	; 0x1dd8 <udc_process_setup+0x65c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1da8:	f8 01       	movw	r30, r16
    1daa:	ff 27       	eor	r31, r31
    1dac:	cf 01       	movw	r24, r30
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	ea 81       	ldd	r30, Y+2	; 0x02
    1db4:	fb 81       	ldd	r31, Y+3	; 0x03
    1db6:	e8 0f       	add	r30, r24
    1db8:	f9 1f       	adc	r31, r25
    1dba:	c0 81       	ld	r28, Z
    1dbc:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1dbe:	ee 81       	ldd	r30, Y+6	; 0x06
    1dc0:	ff 81       	ldd	r31, Y+7	; 0x07
    1dc2:	09 95       	icall
    1dc4:	68 2f       	mov	r22, r24
    1dc6:	80 2f       	mov	r24, r16
    1dc8:	cf db       	rcall	.-2146   	; 0x1568 <udc_update_iface_desc>
    1dca:	88 23       	and	r24, r24
    1dcc:	29 f0       	breq	.+10     	; 0x1dd8 <udc_process_setup+0x65c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1dce:	ec 81       	ldd	r30, Y+4	; 0x04
    1dd0:	fd 81       	ldd	r31, Y+5	; 0x05
    1dd2:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1dd4:	81 11       	cpse	r24, r1
    1dd6:	4b c0       	rjmp	.+150    	; 0x1e6e <udc_process_setup+0x6f2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1dd8:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <udd_g_ctrlreq>
    1ddc:	8f 71       	andi	r24, 0x1F	; 31
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <udc_process_setup+0x668>
    1de2:	40 c0       	rjmp	.+128    	; 0x1e64 <udc_process_setup+0x6e8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1de4:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1de8:	88 23       	and	r24, r24
    1dea:	b1 f1       	breq	.+108    	; 0x1e58 <udc_process_setup+0x6dc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dec:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1df0:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1df4:	ed 91       	ld	r30, X+
    1df6:	fc 91       	ld	r31, X
    1df8:	11 97       	sbiw	r26, 0x01	; 1
    1dfa:	84 81       	ldd	r24, Z+4	; 0x04
    1dfc:	88 23       	and	r24, r24
    1dfe:	71 f1       	breq	.+92     	; 0x1e5c <udc_process_setup+0x6e0>
    1e00:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e02:	ec 2f       	mov	r30, r28
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	ee 0f       	add	r30, r30
    1e08:	ff 1f       	adc	r31, r31
    1e0a:	12 96       	adiw	r26, 0x02	; 2
    1e0c:	8d 91       	ld	r24, X+
    1e0e:	9c 91       	ld	r25, X
    1e10:	13 97       	sbiw	r26, 0x03	; 3
    1e12:	e8 0f       	add	r30, r24
    1e14:	f9 1f       	adc	r31, r25
    1e16:	00 81       	ld	r16, Z
    1e18:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e1a:	d8 01       	movw	r26, r16
    1e1c:	16 96       	adiw	r26, 0x06	; 6
    1e1e:	ed 91       	ld	r30, X+
    1e20:	fc 91       	ld	r31, X
    1e22:	17 97       	sbiw	r26, 0x07	; 7
    1e24:	09 95       	icall
    1e26:	68 2f       	mov	r22, r24
    1e28:	8c 2f       	mov	r24, r28
    1e2a:	9e db       	rcall	.-2244   	; 0x1568 <udc_update_iface_desc>
    1e2c:	88 23       	and	r24, r24
    1e2e:	f9 f0       	breq	.+62     	; 0x1e6e <udc_process_setup+0x6f2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1e30:	d8 01       	movw	r26, r16
    1e32:	14 96       	adiw	r26, 0x04	; 4
    1e34:	ed 91       	ld	r30, X+
    1e36:	fc 91       	ld	r31, X
    1e38:	15 97       	sbiw	r26, 0x05	; 5
    1e3a:	09 95       	icall
    1e3c:	81 11       	cpse	r24, r1
    1e3e:	17 c0       	rjmp	.+46     	; 0x1e6e <udc_process_setup+0x6f2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1e40:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e42:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1e46:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1e4a:	ed 91       	ld	r30, X+
    1e4c:	fc 91       	ld	r31, X
    1e4e:	11 97       	sbiw	r26, 0x01	; 1
    1e50:	94 81       	ldd	r25, Z+4	; 0x04
    1e52:	c9 17       	cp	r28, r25
    1e54:	b0 f2       	brcs	.-84     	; 0x1e02 <udc_process_setup+0x686>
    1e56:	0b c0       	rjmp	.+22     	; 0x1e6e <udc_process_setup+0x6f2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	09 c0       	rjmp	.+18     	; 0x1e6e <udc_process_setup+0x6f2>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	07 c0       	rjmp	.+14     	; 0x1e6e <udc_process_setup+0x6f2>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <udc_process_setup+0x6f2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	03 c0       	rjmp	.+6      	; 0x1e6e <udc_process_setup+0x6f2>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <udc_process_setup+0x6f2>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	08 95       	ret

00001e78 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1e78:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1e7a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1e7c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1e7e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1e80:	60 83       	st	Z, r22
	ret                             // Return to caller
    1e82:	08 95       	ret

00001e84 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1e84:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1e88:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1e8a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1e8c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1e90:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1e92:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1e96:	08 95       	ret

00001e98 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e98:	81 11       	cpse	r24, r1
    1e9a:	22 c0       	rjmp	.+68     	; 0x1ee0 <udd_sleep_mode+0x48>
    1e9c:	90 91 78 22 	lds	r25, 0x2278	; 0x802278 <udd_b_idle>
    1ea0:	99 23       	and	r25, r25
    1ea2:	d9 f0       	breq	.+54     	; 0x1eda <udd_sleep_mode+0x42>
    1ea4:	90 91 83 2e 	lds	r25, 0x2E83	; 0x802e83 <sleepmgr_locks+0x1>
    1ea8:	91 11       	cpse	r25, r1
    1eaa:	01 c0       	rjmp	.+2      	; 0x1eae <udd_sleep_mode+0x16>
    1eac:	ff cf       	rjmp	.-2      	; 0x1eac <udd_sleep_mode+0x14>
    1eae:	2f b7       	in	r18, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	e2 e8       	ldi	r30, 0x82	; 130
    1eb4:	fe e2       	ldi	r31, 0x2E	; 46
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	91 50       	subi	r25, 0x01	; 1
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	2f bf       	out	0x3f, r18	; 63
    1ebe:	0d c0       	rjmp	.+26     	; 0x1eda <udd_sleep_mode+0x42>
    1ec0:	90 91 83 2e 	lds	r25, 0x2E83	; 0x802e83 <sleepmgr_locks+0x1>
    1ec4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <udd_sleep_mode+0x32>
    1ec8:	ff cf       	rjmp	.-2      	; 0x1ec8 <udd_sleep_mode+0x30>
    1eca:	2f b7       	in	r18, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	e2 e8       	ldi	r30, 0x82	; 130
    1ed0:	fe e2       	ldi	r31, 0x2E	; 46
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	9f 5f       	subi	r25, 0xFF	; 255
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	2f bf       	out	0x3f, r18	; 63
    1eda:	80 93 78 22 	sts	0x2278, r24	; 0x802278 <udd_b_idle>
    1ede:	08 95       	ret
    1ee0:	90 91 78 22 	lds	r25, 0x2278	; 0x802278 <udd_b_idle>
    1ee4:	99 23       	and	r25, r25
    1ee6:	61 f3       	breq	.-40     	; 0x1ec0 <udd_sleep_mode+0x28>
    1ee8:	f8 cf       	rjmp	.-16     	; 0x1eda <udd_sleep_mode+0x42>

00001eea <udd_ctrl_init>:
    1eea:	0f 93       	push	r16
    1eec:	e8 ec       	ldi	r30, 0xC8	; 200
    1eee:	f4 e0       	ldi	r31, 0x04	; 4
    1ef0:	80 81       	ld	r24, Z
    1ef2:	8f 7d       	andi	r24, 0xDF	; 223
    1ef4:	80 83       	st	Z, r24
    1ef6:	80 81       	ld	r24, Z
    1ef8:	8f 7d       	andi	r24, 0xDF	; 223
    1efa:	80 83       	st	Z, r24
    1efc:	ec e3       	ldi	r30, 0x3C	; 60
    1efe:	f2 e2       	ldi	r31, 0x22	; 34
    1f00:	02 e0       	ldi	r16, 0x02	; 2
    1f02:	05 93       	las	Z, r16
    1f04:	10 92 3e 22 	sts	0x223E, r1	; 0x80223e <udd_sram+0x1a>
    1f08:	10 92 3f 22 	sts	0x223F, r1	; 0x80223f <udd_sram+0x1b>
    1f0c:	00 e2       	ldi	r16, 0x20	; 32
    1f0e:	06 93       	lac	Z, r16
    1f10:	00 e4       	ldi	r16, 0x40	; 64
    1f12:	06 93       	lac	Z, r16
    1f14:	e4 e3       	ldi	r30, 0x34	; 52
    1f16:	f2 e2       	ldi	r31, 0x22	; 34
    1f18:	00 e2       	ldi	r16, 0x20	; 32
    1f1a:	06 93       	lac	Z, r16
    1f1c:	00 e4       	ldi	r16, 0x40	; 64
    1f1e:	06 93       	lac	Z, r16
    1f20:	e4 e9       	ldi	r30, 0x94	; 148
    1f22:	f4 e2       	ldi	r31, 0x24	; 36
    1f24:	14 86       	std	Z+12, r1	; 0x0c
    1f26:	15 86       	std	Z+13, r1	; 0x0d
    1f28:	16 86       	std	Z+14, r1	; 0x0e
    1f2a:	17 86       	std	Z+15, r1	; 0x0f
    1f2c:	12 86       	std	Z+10, r1	; 0x0a
    1f2e:	13 86       	std	Z+11, r1	; 0x0b
    1f30:	10 92 21 22 	sts	0x2221, r1	; 0x802221 <udd_ep_control_state>
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

00001f38 <udd_ctrl_stall_data>:
    1f38:	0f 93       	push	r16
    1f3a:	85 e0       	ldi	r24, 0x05	; 5
    1f3c:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    1f40:	ed e3       	ldi	r30, 0x3D	; 61
    1f42:	f2 e2       	ldi	r31, 0x22	; 34
    1f44:	04 e0       	ldi	r16, 0x04	; 4
    1f46:	05 93       	las	Z, r16
    1f48:	e5 e3       	ldi	r30, 0x35	; 53
    1f4a:	f2 e2       	ldi	r31, 0x22	; 34
    1f4c:	04 e0       	ldi	r16, 0x04	; 4
    1f4e:	05 93       	las	Z, r16
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <udd_ctrl_send_zlp_in>:
    1f54:	0f 93       	push	r16
    1f56:	83 e0       	ldi	r24, 0x03	; 3
    1f58:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    1f5c:	10 92 3e 22 	sts	0x223E, r1	; 0x80223e <udd_sram+0x1a>
    1f60:	10 92 3f 22 	sts	0x223F, r1	; 0x80223f <udd_sram+0x1b>
    1f64:	ec e3       	ldi	r30, 0x3C	; 60
    1f66:	f2 e2       	ldi	r31, 0x22	; 34
    1f68:	02 e0       	ldi	r16, 0x02	; 2
    1f6a:	06 93       	lac	Z, r16
    1f6c:	0f 91       	pop	r16
    1f6e:	08 95       	ret

00001f70 <udd_ctrl_endofrequest>:
    1f70:	e0 91 a0 24 	lds	r30, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0xc>
    1f74:	f0 91 a1 24 	lds	r31, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0xd>
    1f78:	30 97       	sbiw	r30, 0x00	; 0
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <udd_ctrl_endofrequest+0xe>
    1f7c:	09 95       	icall
    1f7e:	08 95       	ret

00001f80 <udd_ctrl_in_sent>:
    1f80:	0f 93       	push	r16
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    1f8a:	83 30       	cpi	r24, 0x03	; 3
    1f8c:	19 f4       	brne	.+6      	; 0x1f94 <udd_ctrl_in_sent+0x14>
    1f8e:	f0 df       	rcall	.-32     	; 0x1f70 <udd_ctrl_endofrequest>
    1f90:	ac df       	rcall	.-168    	; 0x1eea <udd_ctrl_init>
    1f92:	5e c0       	rjmp	.+188    	; 0x2050 <udd_ctrl_in_sent+0xd0>
    1f94:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    1f98:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    1f9c:	c0 91 9e 24 	lds	r28, 0x249E	; 0x80249e <udd_g_ctrlreq+0xa>
    1fa0:	d0 91 9f 24 	lds	r29, 0x249F	; 0x80249f <udd_g_ctrlreq+0xb>
    1fa4:	c8 1b       	sub	r28, r24
    1fa6:	d9 0b       	sbc	r29, r25
    1fa8:	71 f5       	brne	.+92     	; 0x2006 <udd_ctrl_in_sent+0x86>
    1faa:	20 91 1f 22 	lds	r18, 0x221F	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    1fae:	30 91 20 22 	lds	r19, 0x2220	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fb2:	82 0f       	add	r24, r18
    1fb4:	93 1f       	adc	r25, r19
    1fb6:	80 93 1f 22 	sts	0x221F, r24	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    1fba:	90 93 20 22 	sts	0x2220, r25	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fbe:	20 91 9a 24 	lds	r18, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    1fc2:	30 91 9b 24 	lds	r19, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    1fc6:	82 17       	cp	r24, r18
    1fc8:	93 07       	cpc	r25, r19
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <udd_ctrl_in_sent+0x54>
    1fcc:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <b_shortpacket.5272>
    1fd0:	88 23       	and	r24, r24
    1fd2:	41 f0       	breq	.+16     	; 0x1fe4 <udd_ctrl_in_sent+0x64>
    1fd4:	84 e0       	ldi	r24, 0x04	; 4
    1fd6:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    1fda:	e4 e3       	ldi	r30, 0x34	; 52
    1fdc:	f2 e2       	ldi	r31, 0x22	; 34
    1fde:	02 e0       	ldi	r16, 0x02	; 2
    1fe0:	06 93       	lac	Z, r16
    1fe2:	36 c0       	rjmp	.+108    	; 0x2050 <udd_ctrl_in_sent+0xd0>
    1fe4:	e0 91 a2 24 	lds	r30, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0xe>
    1fe8:	f0 91 a3 24 	lds	r31, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0xf>
    1fec:	30 97       	sbiw	r30, 0x00	; 0
    1fee:	99 f0       	breq	.+38     	; 0x2016 <udd_ctrl_in_sent+0x96>
    1ff0:	09 95       	icall
    1ff2:	88 23       	and	r24, r24
    1ff4:	81 f0       	breq	.+32     	; 0x2016 <udd_ctrl_in_sent+0x96>
    1ff6:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    1ffa:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    1ffe:	c0 91 9e 24 	lds	r28, 0x249E	; 0x80249e <udd_g_ctrlreq+0xa>
    2002:	d0 91 9f 24 	lds	r29, 0x249F	; 0x80249f <udd_g_ctrlreq+0xb>
    2006:	c0 34       	cpi	r28, 0x40	; 64
    2008:	d1 05       	cpc	r29, r1
    200a:	28 f0       	brcs	.+10     	; 0x2016 <udd_ctrl_in_sent+0x96>
    200c:	10 92 e6 20 	sts	0x20E6, r1	; 0x8020e6 <b_shortpacket.5272>
    2010:	c0 e4       	ldi	r28, 0x40	; 64
    2012:	d0 e0       	ldi	r29, 0x00	; 0
    2014:	03 c0       	rjmp	.+6      	; 0x201c <udd_ctrl_in_sent+0x9c>
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <b_shortpacket.5272>
    201c:	e4 e2       	ldi	r30, 0x24	; 36
    201e:	f2 e2       	ldi	r31, 0x22	; 34
    2020:	c2 8f       	std	Z+26, r28	; 0x1a
    2022:	d3 8f       	std	Z+27, r29	; 0x1b
    2024:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    2028:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    202c:	20 91 9c 24 	lds	r18, 0x249C	; 0x80249c <udd_g_ctrlreq+0x8>
    2030:	30 91 9d 24 	lds	r19, 0x249D	; 0x80249d <udd_g_ctrlreq+0x9>
    2034:	28 0f       	add	r18, r24
    2036:	39 1f       	adc	r19, r25
    2038:	24 8f       	std	Z+28, r18	; 0x1c
    203a:	35 8f       	std	Z+29, r19	; 0x1d
    203c:	c8 0f       	add	r28, r24
    203e:	d9 1f       	adc	r29, r25
    2040:	c0 93 1d 22 	sts	0x221D, r28	; 0x80221d <udd_ctrl_payload_nb_trans>
    2044:	d0 93 1e 22 	sts	0x221E, r29	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2048:	ec e3       	ldi	r30, 0x3C	; 60
    204a:	f2 e2       	ldi	r31, 0x22	; 34
    204c:	02 e0       	ldi	r16, 0x02	; 2
    204e:	06 93       	lac	Z, r16
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	0f 91       	pop	r16
    2056:	08 95       	ret

00002058 <udd_ep_get_size>:
    2058:	fc 01       	movw	r30, r24
    205a:	81 81       	ldd	r24, Z+1	; 0x01
    205c:	e8 2f       	mov	r30, r24
    205e:	e7 70       	andi	r30, 0x07	; 7
    2060:	8e 2f       	mov	r24, r30
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	fc 01       	movw	r30, r24
    2066:	31 97       	sbiw	r30, 0x01	; 1
    2068:	e7 30       	cpi	r30, 0x07	; 7
    206a:	f1 05       	cpc	r31, r1
    206c:	c0 f4       	brcc	.+48     	; 0x209e <udd_ep_get_size+0x46>
    206e:	e2 5e       	subi	r30, 0xE2	; 226
    2070:	fe 4f       	sbci	r31, 0xFE	; 254
    2072:	8d c6       	rjmp	.+3354   	; 0x2d8e <__tablejump2__>
    2074:	80 e1       	ldi	r24, 0x10	; 16
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	08 95       	ret
    207a:	80 e2       	ldi	r24, 0x20	; 32
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	08 95       	ret
    2080:	80 e4       	ldi	r24, 0x40	; 64
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	08 95       	ret
    2086:	80 e8       	ldi	r24, 0x80	; 128
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	08 95       	ret
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	91 e0       	ldi	r25, 0x01	; 1
    2090:	08 95       	ret
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	92 e0       	ldi	r25, 0x02	; 2
    2096:	08 95       	ret
    2098:	8f ef       	ldi	r24, 0xFF	; 255
    209a:	93 e0       	ldi	r25, 0x03	; 3
    209c:	08 95       	ret
    209e:	88 e0       	ldi	r24, 0x08	; 8
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	08 95       	ret

000020a4 <udd_ep_get_job>:
    20a4:	28 2f       	mov	r18, r24
    20a6:	2f 70       	andi	r18, 0x0F	; 15
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	22 0f       	add	r18, r18
    20ac:	33 1f       	adc	r19, r19
    20ae:	08 2e       	mov	r0, r24
    20b0:	00 0c       	add	r0, r0
    20b2:	99 0b       	sbc	r25, r25
    20b4:	88 27       	eor	r24, r24
    20b6:	99 0f       	add	r25, r25
    20b8:	88 1f       	adc	r24, r24
    20ba:	99 27       	eor	r25, r25
    20bc:	82 0f       	add	r24, r18
    20be:	93 1f       	adc	r25, r19
    20c0:	02 97       	sbiw	r24, 0x02	; 2
    20c2:	9c 01       	movw	r18, r24
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	22 0f       	add	r18, r18
    20ca:	33 1f       	adc	r19, r19
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	82 0f       	add	r24, r18
    20d2:	93 1f       	adc	r25, r19
    20d4:	89 55       	subi	r24, 0x59	; 89
    20d6:	9e 4d       	sbci	r25, 0xDE	; 222
    20d8:	08 95       	ret

000020da <udd_ctrl_interrupt_tc_setup>:
    20da:	0f 93       	push	r16
    20dc:	cf 93       	push	r28
    20de:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    20e2:	80 ff       	sbrs	r24, 0
    20e4:	62 c0       	rjmp	.+196    	; 0x21aa <udd_ctrl_interrupt_tc_setup+0xd0>
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    20ec:	e4 e3       	ldi	r30, 0x34	; 52
    20ee:	f2 e2       	ldi	r31, 0x22	; 34
    20f0:	00 e8       	ldi	r16, 0x80	; 128
    20f2:	06 93       	lac	Z, r16
    20f4:	ec e3       	ldi	r30, 0x3C	; 60
    20f6:	f2 e2       	ldi	r31, 0x22	; 34
    20f8:	00 e8       	ldi	r16, 0x80	; 128
    20fa:	06 93       	lac	Z, r16
    20fc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2100:	e4 e3       	ldi	r30, 0x34	; 52
    2102:	f2 e2       	ldi	r31, 0x22	; 34
    2104:	00 e1       	ldi	r16, 0x10	; 16
    2106:	06 93       	lac	Z, r16
    2108:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    210c:	88 23       	and	r24, r24
    210e:	29 f0       	breq	.+10     	; 0x211a <udd_ctrl_interrupt_tc_setup+0x40>
    2110:	83 50       	subi	r24, 0x03	; 3
    2112:	82 30       	cpi	r24, 0x02	; 2
    2114:	08 f4       	brcc	.+2      	; 0x2118 <udd_ctrl_interrupt_tc_setup+0x3e>
    2116:	2c df       	rcall	.-424    	; 0x1f70 <udd_ctrl_endofrequest>
    2118:	e8 de       	rcall	.-560    	; 0x1eea <udd_ctrl_init>
    211a:	80 91 36 22 	lds	r24, 0x2236	; 0x802236 <udd_sram+0x12>
    211e:	90 91 37 22 	lds	r25, 0x2237	; 0x802237 <udd_sram+0x13>
    2122:	08 97       	sbiw	r24, 0x08	; 8
    2124:	09 f0       	breq	.+2      	; 0x2128 <udd_ctrl_interrupt_tc_setup+0x4e>
    2126:	43 c0       	rjmp	.+134    	; 0x21ae <udd_ctrl_interrupt_tc_setup+0xd4>
    2128:	88 e0       	ldi	r24, 0x08	; 8
    212a:	ed ed       	ldi	r30, 0xDD	; 221
    212c:	f1 e2       	ldi	r31, 0x21	; 33
    212e:	a4 e9       	ldi	r26, 0x94	; 148
    2130:	b4 e2       	ldi	r27, 0x24	; 36
    2132:	01 90       	ld	r0, Z+
    2134:	0d 92       	st	X+, r0
    2136:	8a 95       	dec	r24
    2138:	e1 f7       	brne	.-8      	; 0x2132 <udd_ctrl_interrupt_tc_setup+0x58>
    213a:	e8 ec       	ldi	r30, 0xC8	; 200
    213c:	f4 e0       	ldi	r31, 0x04	; 4
    213e:	80 81       	ld	r24, Z
    2140:	80 62       	ori	r24, 0x20	; 32
    2142:	80 83       	st	Z, r24
    2144:	80 81       	ld	r24, Z
    2146:	80 62       	ori	r24, 0x20	; 32
    2148:	80 83       	st	Z, r24
    214a:	18 db       	rcall	.-2512   	; 0x177c <udc_process_setup>
    214c:	c8 2f       	mov	r28, r24
    214e:	81 11       	cpse	r24, r1
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <udd_ctrl_interrupt_tc_setup+0x7e>
    2152:	f2 de       	rcall	.-540    	; 0x1f38 <udd_ctrl_stall_data>
    2154:	c1 e0       	ldi	r28, 0x01	; 1
    2156:	2c c0       	rjmp	.+88     	; 0x21b0 <udd_ctrl_interrupt_tc_setup+0xd6>
    2158:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <udd_g_ctrlreq>
    215c:	88 23       	and	r24, r24
    215e:	6c f4       	brge	.+26     	; 0x217a <udd_ctrl_interrupt_tc_setup+0xa0>
    2160:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2164:	10 92 20 22 	sts	0x2220, r1	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2168:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    216c:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    2176:	04 df       	rcall	.-504    	; 0x1f80 <udd_ctrl_in_sent>
    2178:	1b c0       	rjmp	.+54     	; 0x21b0 <udd_ctrl_interrupt_tc_setup+0xd6>
    217a:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    217e:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    2182:	89 2b       	or	r24, r25
    2184:	11 f4       	brne	.+4      	; 0x218a <udd_ctrl_interrupt_tc_setup+0xb0>
    2186:	e6 de       	rcall	.-564    	; 0x1f54 <udd_ctrl_send_zlp_in>
    2188:	13 c0       	rjmp	.+38     	; 0x21b0 <udd_ctrl_interrupt_tc_setup+0xd6>
    218a:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    218e:	10 92 20 22 	sts	0x2220, r1	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2192:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    2196:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    21a0:	e4 e3       	ldi	r30, 0x34	; 52
    21a2:	f2 e2       	ldi	r31, 0x22	; 34
    21a4:	02 e0       	ldi	r16, 0x02	; 2
    21a6:	06 93       	lac	Z, r16
    21a8:	03 c0       	rjmp	.+6      	; 0x21b0 <udd_ctrl_interrupt_tc_setup+0xd6>
    21aa:	c0 e0       	ldi	r28, 0x00	; 0
    21ac:	01 c0       	rjmp	.+2      	; 0x21b0 <udd_ctrl_interrupt_tc_setup+0xd6>
    21ae:	c1 e0       	ldi	r28, 0x01	; 1
    21b0:	8c 2f       	mov	r24, r28
    21b2:	cf 91       	pop	r28
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <udd_ep_trans_complet>:
    21b8:	8f 92       	push	r8
    21ba:	9f 92       	push	r9
    21bc:	af 92       	push	r10
    21be:	bf 92       	push	r11
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	d8 2e       	mov	r13, r24
    21d0:	69 df       	rcall	.-302    	; 0x20a4 <udd_ep_get_job>
    21d2:	8c 01       	movw	r16, r24
    21d4:	bd 2c       	mov	r11, r13
    21d6:	bb 1c       	adc	r11, r11
    21d8:	bb 24       	eor	r11, r11
    21da:	bb 1c       	adc	r11, r11
    21dc:	cd 2d       	mov	r28, r13
    21de:	cf 70       	andi	r28, 0x0F	; 15
    21e0:	d0 e0       	ldi	r29, 0x00	; 0
    21e2:	cc 0f       	add	r28, r28
    21e4:	dd 1f       	adc	r29, r29
    21e6:	cb 0d       	add	r28, r11
    21e8:	d1 1d       	adc	r29, r1
    21ea:	ce 01       	movw	r24, r28
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	9c 01       	movw	r18, r24
    21fa:	2c 5c       	subi	r18, 0xCC	; 204
    21fc:	3d 4d       	sbci	r19, 0xDD	; 221
    21fe:	79 01       	movw	r14, r18
    2200:	c9 01       	movw	r24, r18
    2202:	2a df       	rcall	.-428    	; 0x2058 <udd_ep_get_size>
    2204:	4c 01       	movw	r8, r24
    2206:	bb 20       	and	r11, r11
    2208:	09 f4       	brne	.+2      	; 0x220c <udd_ep_trans_complet+0x54>
    220a:	70 c0       	rjmp	.+224    	; 0x22ec <udd_ep_trans_complet+0x134>
    220c:	fe 01       	movw	r30, r28
    220e:	ee 0f       	add	r30, r30
    2210:	ff 1f       	adc	r31, r31
    2212:	ee 0f       	add	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	ec 5d       	subi	r30, 0xDC	; 220
    221c:	fd 4d       	sbci	r31, 0xDD	; 221
    221e:	26 89       	ldd	r18, Z+22	; 0x16
    2220:	37 89       	ldd	r19, Z+23	; 0x17
    2222:	d8 01       	movw	r26, r16
    2224:	15 96       	adiw	r26, 0x05	; 5
    2226:	8d 91       	ld	r24, X+
    2228:	9c 91       	ld	r25, X
    222a:	16 97       	sbiw	r26, 0x06	; 6
    222c:	82 0f       	add	r24, r18
    222e:	93 1f       	adc	r25, r19
    2230:	15 96       	adiw	r26, 0x05	; 5
    2232:	8d 93       	st	X+, r24
    2234:	9c 93       	st	X, r25
    2236:	16 97       	sbiw	r26, 0x06	; 6
    2238:	13 96       	adiw	r26, 0x03	; 3
    223a:	2d 91       	ld	r18, X+
    223c:	3c 91       	ld	r19, X
    223e:	14 97       	sbiw	r26, 0x04	; 4
    2240:	82 17       	cp	r24, r18
    2242:	93 07       	cpc	r25, r19
    2244:	09 f4       	brne	.+2      	; 0x2248 <udd_ep_trans_complet+0x90>
    2246:	3c c0       	rjmp	.+120    	; 0x22c0 <udd_ep_trans_complet+0x108>
    2248:	28 1b       	sub	r18, r24
    224a:	39 0b       	sbc	r19, r25
    224c:	21 15       	cp	r18, r1
    224e:	b4 e0       	ldi	r27, 0x04	; 4
    2250:	3b 07       	cpc	r19, r27
    2252:	38 f0       	brcs	.+14     	; 0x2262 <udd_ep_trans_complet+0xaa>
    2254:	2f ef       	ldi	r18, 0xFF	; 255
    2256:	33 e0       	ldi	r19, 0x03	; 3
    2258:	c9 01       	movw	r24, r18
    225a:	b4 01       	movw	r22, r8
    225c:	71 d5       	rcall	.+2786   	; 0x2d40 <__udivmodhi4>
    225e:	28 1b       	sub	r18, r24
    2260:	39 0b       	sbc	r19, r25
    2262:	f8 01       	movw	r30, r16
    2264:	80 81       	ld	r24, Z
    2266:	81 ff       	sbrs	r24, 1
    2268:	09 c0       	rjmp	.+18     	; 0x227c <udd_ep_trans_complet+0xc4>
    226a:	c9 01       	movw	r24, r18
    226c:	b4 01       	movw	r22, r8
    226e:	68 d5       	rcall	.+2768   	; 0x2d40 <__udivmodhi4>
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	89 2b       	or	r24, r25
    2274:	09 f0       	breq	.+2      	; 0x2278 <udd_ep_trans_complet+0xc0>
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	84 2f       	mov	r24, r20
    227a:	01 c0       	rjmp	.+2      	; 0x227e <udd_ep_trans_complet+0xc6>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	d8 01       	movw	r26, r16
    2280:	9c 91       	ld	r25, X
    2282:	80 fb       	bst	r24, 0
    2284:	91 f9       	bld	r25, 1
    2286:	9c 93       	st	X, r25
    2288:	cc 0f       	add	r28, r28
    228a:	dd 1f       	adc	r29, r29
    228c:	cc 0f       	add	r28, r28
    228e:	dd 1f       	adc	r29, r29
    2290:	cc 0f       	add	r28, r28
    2292:	dd 1f       	adc	r29, r29
    2294:	cc 5d       	subi	r28, 0xDC	; 220
    2296:	dd 4d       	sbci	r29, 0xDD	; 221
    2298:	1e 8a       	std	Y+22, r1	; 0x16
    229a:	1f 8a       	std	Y+23, r1	; 0x17
    229c:	2a 8b       	std	Y+18, r18	; 0x12
    229e:	3b 8b       	std	Y+19, r19	; 0x13
    22a0:	11 96       	adiw	r26, 0x01	; 1
    22a2:	2d 91       	ld	r18, X+
    22a4:	3c 91       	ld	r19, X
    22a6:	12 97       	sbiw	r26, 0x02	; 2
    22a8:	15 96       	adiw	r26, 0x05	; 5
    22aa:	8d 91       	ld	r24, X+
    22ac:	9c 91       	ld	r25, X
    22ae:	16 97       	sbiw	r26, 0x06	; 6
    22b0:	82 0f       	add	r24, r18
    22b2:	93 1f       	adc	r25, r19
    22b4:	8c 8b       	std	Y+20, r24	; 0x14
    22b6:	9d 8b       	std	Y+21, r25	; 0x15
    22b8:	f7 01       	movw	r30, r14
    22ba:	02 e0       	ldi	r16, 0x02	; 2
    22bc:	06 93       	lac	Z, r16
    22be:	ca c0       	rjmp	.+404    	; 0x2454 <udd_ep_trans_complet+0x29c>
    22c0:	d8 01       	movw	r26, r16
    22c2:	8c 91       	ld	r24, X
    22c4:	81 ff       	sbrs	r24, 1
    22c6:	b3 c0       	rjmp	.+358    	; 0x242e <udd_ep_trans_complet+0x276>
    22c8:	8d 7f       	andi	r24, 0xFD	; 253
    22ca:	8c 93       	st	X, r24
    22cc:	cc 0f       	add	r28, r28
    22ce:	dd 1f       	adc	r29, r29
    22d0:	cc 0f       	add	r28, r28
    22d2:	dd 1f       	adc	r29, r29
    22d4:	cc 0f       	add	r28, r28
    22d6:	dd 1f       	adc	r29, r29
    22d8:	cc 5d       	subi	r28, 0xDC	; 220
    22da:	dd 4d       	sbci	r29, 0xDD	; 221
    22dc:	1e 8a       	std	Y+22, r1	; 0x16
    22de:	1f 8a       	std	Y+23, r1	; 0x17
    22e0:	1a 8a       	std	Y+18, r1	; 0x12
    22e2:	1b 8a       	std	Y+19, r1	; 0x13
    22e4:	f7 01       	movw	r30, r14
    22e6:	02 e0       	ldi	r16, 0x02	; 2
    22e8:	06 93       	lac	Z, r16
    22ea:	b4 c0       	rjmp	.+360    	; 0x2454 <udd_ep_trans_complet+0x29c>
    22ec:	fe 01       	movw	r30, r28
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 1f       	adc	r31, r31
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	ee 0f       	add	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	ec 5d       	subi	r30, 0xDC	; 220
    22fc:	fd 4d       	sbci	r31, 0xDD	; 221
    22fe:	a2 88       	ldd	r10, Z+18	; 0x12
    2300:	b3 88       	ldd	r11, Z+19	; 0x13
    2302:	d8 01       	movw	r26, r16
    2304:	8c 91       	ld	r24, X
    2306:	82 ff       	sbrs	r24, 2
    2308:	19 c0       	rjmp	.+50     	; 0x233c <udd_ep_trans_complet+0x184>
    230a:	11 96       	adiw	r26, 0x01	; 1
    230c:	ed 91       	ld	r30, X+
    230e:	fc 91       	ld	r31, X
    2310:	12 97       	sbiw	r26, 0x02	; 2
    2312:	15 96       	adiw	r26, 0x05	; 5
    2314:	2d 91       	ld	r18, X+
    2316:	3c 91       	ld	r19, X
    2318:	16 97       	sbiw	r26, 0x06	; 6
    231a:	13 96       	adiw	r26, 0x03	; 3
    231c:	8d 91       	ld	r24, X+
    231e:	9c 91       	ld	r25, X
    2320:	14 97       	sbiw	r26, 0x04	; 4
    2322:	b4 01       	movw	r22, r8
    2324:	0d d5       	rcall	.+2586   	; 0x2d40 <__udivmodhi4>
    2326:	b0 e4       	ldi	r27, 0x40	; 64
    2328:	db 9e       	mul	r13, r27
    232a:	b0 01       	movw	r22, r0
    232c:	11 24       	eor	r1, r1
    232e:	69 55       	subi	r22, 0x59	; 89
    2330:	7f 4d       	sbci	r23, 0xDF	; 223
    2332:	ac 01       	movw	r20, r24
    2334:	cf 01       	movw	r24, r30
    2336:	82 0f       	add	r24, r18
    2338:	93 1f       	adc	r25, r19
    233a:	3e d5       	rcall	.+2684   	; 0x2db8 <memcpy>
    233c:	f8 01       	movw	r30, r16
    233e:	25 81       	ldd	r18, Z+5	; 0x05
    2340:	36 81       	ldd	r19, Z+6	; 0x06
    2342:	2a 0d       	add	r18, r10
    2344:	3b 1d       	adc	r19, r11
    2346:	25 83       	std	Z+5, r18	; 0x05
    2348:	36 83       	std	Z+6, r19	; 0x06
    234a:	83 81       	ldd	r24, Z+3	; 0x03
    234c:	94 81       	ldd	r25, Z+4	; 0x04
    234e:	82 17       	cp	r24, r18
    2350:	93 07       	cpc	r25, r19
    2352:	68 f4       	brcc	.+26     	; 0x236e <udd_ep_trans_complet+0x1b6>
    2354:	85 83       	std	Z+5, r24	; 0x05
    2356:	96 83       	std	Z+6, r25	; 0x06
    2358:	cc 0f       	add	r28, r28
    235a:	dd 1f       	adc	r29, r29
    235c:	cc 0f       	add	r28, r28
    235e:	dd 1f       	adc	r29, r29
    2360:	cc 0f       	add	r28, r28
    2362:	dd 1f       	adc	r29, r29
    2364:	cc 5d       	subi	r28, 0xDC	; 220
    2366:	dd 4d       	sbci	r29, 0xDD	; 221
    2368:	8e 89       	ldd	r24, Y+22	; 0x16
    236a:	9f 89       	ldd	r25, Y+23	; 0x17
    236c:	60 c0       	rjmp	.+192    	; 0x242e <udd_ep_trans_complet+0x276>
    236e:	fe 01       	movw	r30, r28
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	ec 5d       	subi	r30, 0xDC	; 220
    237e:	fd 4d       	sbci	r31, 0xDD	; 221
    2380:	46 89       	ldd	r20, Z+22	; 0x16
    2382:	57 89       	ldd	r21, Z+23	; 0x17
    2384:	4a 15       	cp	r20, r10
    2386:	5b 05       	cpc	r21, r11
    2388:	09 f0       	breq	.+2      	; 0x238c <udd_ep_trans_complet+0x1d4>
    238a:	51 c0       	rjmp	.+162    	; 0x242e <udd_ep_trans_complet+0x276>
    238c:	28 17       	cp	r18, r24
    238e:	39 07       	cpc	r19, r25
    2390:	09 f4       	brne	.+2      	; 0x2394 <udd_ep_trans_complet+0x1dc>
    2392:	4d c0       	rjmp	.+154    	; 0x242e <udd_ep_trans_complet+0x276>
    2394:	ac 01       	movw	r20, r24
    2396:	42 1b       	sub	r20, r18
    2398:	53 0b       	sbc	r21, r19
    239a:	9a 01       	movw	r18, r20
    239c:	21 15       	cp	r18, r1
    239e:	54 e0       	ldi	r21, 0x04	; 4
    23a0:	35 07       	cpc	r19, r21
    23a2:	50 f0       	brcs	.+20     	; 0x23b8 <udd_ep_trans_complet+0x200>
    23a4:	2f ef       	ldi	r18, 0xFF	; 255
    23a6:	33 e0       	ldi	r19, 0x03	; 3
    23a8:	c9 01       	movw	r24, r18
    23aa:	b4 01       	movw	r22, r8
    23ac:	c9 d4       	rcall	.+2450   	; 0x2d40 <__udivmodhi4>
    23ae:	d9 01       	movw	r26, r18
    23b0:	a8 1b       	sub	r26, r24
    23b2:	b9 0b       	sbc	r27, r25
    23b4:	cd 01       	movw	r24, r26
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <udd_ep_trans_complet+0x20e>
    23b8:	c9 01       	movw	r24, r18
    23ba:	b4 01       	movw	r22, r8
    23bc:	c1 d4       	rcall	.+2434   	; 0x2d40 <__udivmodhi4>
    23be:	f9 01       	movw	r30, r18
    23c0:	e8 1b       	sub	r30, r24
    23c2:	f9 0b       	sbc	r31, r25
    23c4:	cf 01       	movw	r24, r30
    23c6:	fe 01       	movw	r30, r28
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
    23cc:	ee 0f       	add	r30, r30
    23ce:	ff 1f       	adc	r31, r31
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	ec 5d       	subi	r30, 0xDC	; 220
    23d6:	fd 4d       	sbci	r31, 0xDD	; 221
    23d8:	12 8a       	std	Z+18, r1	; 0x12
    23da:	13 8a       	std	Z+19, r1	; 0x13
    23dc:	88 15       	cp	r24, r8
    23de:	99 05       	cpc	r25, r9
    23e0:	78 f4       	brcc	.+30     	; 0x2400 <udd_ep_trans_complet+0x248>
    23e2:	d8 01       	movw	r26, r16
    23e4:	8c 91       	ld	r24, X
    23e6:	84 60       	ori	r24, 0x04	; 4
    23e8:	8c 93       	st	X, r24
    23ea:	b0 e4       	ldi	r27, 0x40	; 64
    23ec:	db 9e       	mul	r13, r27
    23ee:	c0 01       	movw	r24, r0
    23f0:	11 24       	eor	r1, r1
    23f2:	89 55       	subi	r24, 0x59	; 89
    23f4:	9f 4d       	sbci	r25, 0xDF	; 223
    23f6:	84 8b       	std	Z+20, r24	; 0x14
    23f8:	95 8b       	std	Z+21, r25	; 0x15
    23fa:	86 8a       	std	Z+22, r8	; 0x16
    23fc:	97 8a       	std	Z+23, r9	; 0x17
    23fe:	13 c0       	rjmp	.+38     	; 0x2426 <udd_ep_trans_complet+0x26e>
    2400:	f8 01       	movw	r30, r16
    2402:	41 81       	ldd	r20, Z+1	; 0x01
    2404:	52 81       	ldd	r21, Z+2	; 0x02
    2406:	25 81       	ldd	r18, Z+5	; 0x05
    2408:	36 81       	ldd	r19, Z+6	; 0x06
    240a:	24 0f       	add	r18, r20
    240c:	35 1f       	adc	r19, r21
    240e:	cc 0f       	add	r28, r28
    2410:	dd 1f       	adc	r29, r29
    2412:	cc 0f       	add	r28, r28
    2414:	dd 1f       	adc	r29, r29
    2416:	cc 0f       	add	r28, r28
    2418:	dd 1f       	adc	r29, r29
    241a:	cc 5d       	subi	r28, 0xDC	; 220
    241c:	dd 4d       	sbci	r29, 0xDD	; 221
    241e:	2c 8b       	std	Y+20, r18	; 0x14
    2420:	3d 8b       	std	Y+21, r19	; 0x15
    2422:	8e 8b       	std	Y+22, r24	; 0x16
    2424:	9f 8b       	std	Y+23, r25	; 0x17
    2426:	f7 01       	movw	r30, r14
    2428:	02 e0       	ldi	r16, 0x02	; 2
    242a:	06 93       	lac	Z, r16
    242c:	13 c0       	rjmp	.+38     	; 0x2454 <udd_ep_trans_complet+0x29c>
    242e:	d8 01       	movw	r26, r16
    2430:	8c 91       	ld	r24, X
    2432:	80 ff       	sbrs	r24, 0
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <udd_ep_trans_complet+0x29c>
    2436:	8e 7f       	andi	r24, 0xFE	; 254
    2438:	8c 93       	st	X, r24
    243a:	17 96       	adiw	r26, 0x07	; 7
    243c:	ed 91       	ld	r30, X+
    243e:	fc 91       	ld	r31, X
    2440:	18 97       	sbiw	r26, 0x08	; 8
    2442:	30 97       	sbiw	r30, 0x00	; 0
    2444:	39 f0       	breq	.+14     	; 0x2454 <udd_ep_trans_complet+0x29c>
    2446:	15 96       	adiw	r26, 0x05	; 5
    2448:	6d 91       	ld	r22, X+
    244a:	7c 91       	ld	r23, X
    244c:	16 97       	sbiw	r26, 0x06	; 6
    244e:	4d 2d       	mov	r20, r13
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	09 95       	icall
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	ff 90       	pop	r15
    245e:	ef 90       	pop	r14
    2460:	df 90       	pop	r13
    2462:	bf 90       	pop	r11
    2464:	af 90       	pop	r10
    2466:	9f 90       	pop	r9
    2468:	8f 90       	pop	r8
    246a:	08 95       	ret

0000246c <udd_attach>:
    246c:	cf 93       	push	r28
    246e:	cf b7       	in	r28, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	11 dd       	rcall	.-1502   	; 0x1e98 <udd_sleep_mode>
    2476:	ea ec       	ldi	r30, 0xCA	; 202
    2478:	f4 e0       	ldi	r31, 0x04	; 4
    247a:	80 e4       	ldi	r24, 0x40	; 64
    247c:	80 83       	st	Z, r24
    247e:	80 e2       	ldi	r24, 0x20	; 32
    2480:	80 83       	st	Z, r24
    2482:	e1 ec       	ldi	r30, 0xC1	; 193
    2484:	f4 e0       	ldi	r31, 0x04	; 4
    2486:	80 81       	ld	r24, Z
    2488:	81 60       	ori	r24, 0x01	; 1
    248a:	80 83       	st	Z, r24
    248c:	a9 ec       	ldi	r26, 0xC9	; 201
    248e:	b4 e0       	ldi	r27, 0x04	; 4
    2490:	8c 91       	ld	r24, X
    2492:	82 60       	ori	r24, 0x02	; 2
    2494:	8c 93       	st	X, r24
    2496:	e8 ec       	ldi	r30, 0xC8	; 200
    2498:	f4 e0       	ldi	r31, 0x04	; 4
    249a:	80 81       	ld	r24, Z
    249c:	80 64       	ori	r24, 0x40	; 64
    249e:	80 83       	st	Z, r24
    24a0:	8c 91       	ld	r24, X
    24a2:	81 60       	ori	r24, 0x01	; 1
    24a4:	8c 93       	st	X, r24
    24a6:	80 81       	ld	r24, Z
    24a8:	80 68       	ori	r24, 0x80	; 128
    24aa:	80 83       	st	Z, r24
    24ac:	cf bf       	out	0x3f, r28	; 63
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <udd_enable>:
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	c0 e6       	ldi	r28, 0x60	; 96
    24b8:	d0 e0       	ldi	r29, 0x00	; 0
    24ba:	18 82       	st	Y, r1
    24bc:	80 e3       	ldi	r24, 0x30	; 48
    24be:	0e 94 e7 09 	call	0x13ce	; 0x13ce <sysclk_enable_usb>
    24c2:	e0 ec       	ldi	r30, 0xC0	; 192
    24c4:	f4 e0       	ldi	r31, 0x04	; 4
    24c6:	80 81       	ld	r24, Z
    24c8:	80 64       	ori	r24, 0x40	; 64
    24ca:	80 83       	st	Z, r24
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	88 83       	st	Y, r24
    24d0:	cf b7       	in	r28, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	fc 01       	movw	r30, r24
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	ec 5d       	subi	r30, 0xDC	; 220
    24e8:	fd 4d       	sbci	r31, 0xDD	; 221
    24ea:	11 8a       	std	Z+17, r1	; 0x11
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	88 30       	cpi	r24, 0x08	; 8
    24f0:	91 05       	cpc	r25, r1
    24f2:	91 f7       	brne	.-28     	; 0x24d8 <udd_enable+0x26>
    24f4:	e7 ea       	ldi	r30, 0xA7	; 167
    24f6:	f1 e2       	ldi	r31, 0x21	; 33
    24f8:	80 81       	ld	r24, Z
    24fa:	8e 7f       	andi	r24, 0xFE	; 254
    24fc:	80 83       	st	Z, r24
    24fe:	e0 eb       	ldi	r30, 0xB0	; 176
    2500:	f1 e2       	ldi	r31, 0x21	; 33
    2502:	80 81       	ld	r24, Z
    2504:	8e 7f       	andi	r24, 0xFE	; 254
    2506:	80 83       	st	Z, r24
    2508:	e9 eb       	ldi	r30, 0xB9	; 185
    250a:	f1 e2       	ldi	r31, 0x21	; 33
    250c:	80 81       	ld	r24, Z
    250e:	8e 7f       	andi	r24, 0xFE	; 254
    2510:	80 83       	st	Z, r24
    2512:	e2 ec       	ldi	r30, 0xC2	; 194
    2514:	f1 e2       	ldi	r31, 0x21	; 33
    2516:	80 81       	ld	r24, Z
    2518:	8e 7f       	andi	r24, 0xFE	; 254
    251a:	80 83       	st	Z, r24
    251c:	eb ec       	ldi	r30, 0xCB	; 203
    251e:	f1 e2       	ldi	r31, 0x21	; 33
    2520:	80 81       	ld	r24, Z
    2522:	8e 7f       	andi	r24, 0xFE	; 254
    2524:	80 83       	st	Z, r24
    2526:	e4 ed       	ldi	r30, 0xD4	; 212
    2528:	f1 e2       	ldi	r31, 0x21	; 33
    252a:	80 81       	ld	r24, Z
    252c:	8e 7f       	andi	r24, 0xFE	; 254
    252e:	80 83       	st	Z, r24
    2530:	6a e1       	ldi	r22, 0x1A	; 26
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	a6 dc       	rcall	.-1716   	; 0x1e84 <nvm_read_byte>
    2538:	8f 3f       	cpi	r24, 0xFF	; 255
    253a:	19 f0       	breq	.+6      	; 0x2542 <udd_enable+0x90>
    253c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2540:	03 c0       	rjmp	.+6      	; 0x2548 <udd_enable+0x96>
    2542:	8f e1       	ldi	r24, 0x1F	; 31
    2544:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2548:	6b e1       	ldi	r22, 0x1B	; 27
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	9a dc       	rcall	.-1740   	; 0x1e84 <nvm_read_byte>
    2550:	8f 3f       	cpi	r24, 0xFF	; 255
    2552:	19 f0       	breq	.+6      	; 0x255a <udd_enable+0xa8>
    2554:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2558:	03 c0       	rjmp	.+6      	; 0x2560 <udd_enable+0xae>
    255a:	8f e1       	ldi	r24, 0x1F	; 31
    255c:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2560:	e0 ec       	ldi	r30, 0xC0	; 192
    2562:	f4 e0       	ldi	r31, 0x04	; 4
    2564:	80 81       	ld	r24, Z
    2566:	83 60       	ori	r24, 0x03	; 3
    2568:	80 83       	st	Z, r24
    256a:	80 81       	ld	r24, Z
    256c:	80 68       	ori	r24, 0x80	; 128
    256e:	80 83       	st	Z, r24
    2570:	80 81       	ld	r24, Z
    2572:	80 61       	ori	r24, 0x10	; 16
    2574:	80 83       	st	Z, r24
    2576:	84 e3       	ldi	r24, 0x34	; 52
    2578:	92 e2       	ldi	r25, 0x22	; 34
    257a:	86 83       	std	Z+6, r24	; 0x06
    257c:	97 83       	std	Z+7, r25	; 0x07
    257e:	80 81       	ld	r24, Z
    2580:	80 62       	ori	r24, 0x20	; 32
    2582:	80 83       	st	Z, r24
    2584:	8f ef       	ldi	r24, 0xFF	; 255
    2586:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    258a:	e8 ec       	ldi	r30, 0xC8	; 200
    258c:	f4 e0       	ldi	r31, 0x04	; 4
    258e:	80 81       	ld	r24, Z
    2590:	82 60       	ori	r24, 0x02	; 2
    2592:	80 83       	st	Z, r24
    2594:	10 92 78 22 	sts	0x2278, r1	; 0x802278 <udd_b_idle>
    2598:	80 91 87 2e 	lds	r24, 0x2E87	; 0x802e87 <sleepmgr_locks+0x5>
    259c:	8f 3f       	cpi	r24, 0xFF	; 255
    259e:	09 f4       	brne	.+2      	; 0x25a2 <udd_enable+0xf0>
    25a0:	ff cf       	rjmp	.-2      	; 0x25a0 <udd_enable+0xee>
    25a2:	9f b7       	in	r25, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	e2 e8       	ldi	r30, 0x82	; 130
    25a8:	fe e2       	ldi	r31, 0x2E	; 46
    25aa:	85 81       	ldd	r24, Z+5	; 0x05
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	85 83       	std	Z+5, r24	; 0x05
    25b0:	9f bf       	out	0x3f, r25	; 63
    25b2:	5c df       	rcall	.-328    	; 0x246c <udd_attach>
    25b4:	cf bf       	out	0x3f, r28	; 63
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	08 95       	ret

000025bc <udd_set_address>:
    25bc:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25c0:	08 95       	ret

000025c2 <udd_getaddress>:
    25c2:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25c6:	08 95       	ret

000025c8 <udd_set_setup_payload>:
    25c8:	e4 e9       	ldi	r30, 0x94	; 148
    25ca:	f4 e2       	ldi	r31, 0x24	; 36
    25cc:	80 87       	std	Z+8, r24	; 0x08
    25ce:	91 87       	std	Z+9, r25	; 0x09
    25d0:	62 87       	std	Z+10, r22	; 0x0a
    25d2:	73 87       	std	Z+11, r23	; 0x0b
    25d4:	08 95       	ret

000025d6 <udd_ep_alloc>:
    25d6:	28 2f       	mov	r18, r24
    25d8:	2f 70       	andi	r18, 0x0F	; 15
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	22 0f       	add	r18, r18
    25de:	33 1f       	adc	r19, r19
    25e0:	08 2e       	mov	r0, r24
    25e2:	00 0c       	add	r0, r0
    25e4:	99 0b       	sbc	r25, r25
    25e6:	88 27       	eor	r24, r24
    25e8:	99 0f       	add	r25, r25
    25ea:	88 1f       	adc	r24, r24
    25ec:	99 27       	eor	r25, r25
    25ee:	82 0f       	add	r24, r18
    25f0:	93 1f       	adc	r25, r19
    25f2:	fc 01       	movw	r30, r24
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	ee 0f       	add	r30, r30
    25fa:	ff 1f       	adc	r31, r31
    25fc:	ee 0f       	add	r30, r30
    25fe:	ff 1f       	adc	r31, r31
    2600:	ec 5d       	subi	r30, 0xDC	; 220
    2602:	fd 4d       	sbci	r31, 0xDD	; 221
    2604:	21 89       	ldd	r18, Z+17	; 0x11
    2606:	20 7c       	andi	r18, 0xC0	; 192
    2608:	09 f0       	breq	.+2      	; 0x260c <udd_ep_alloc+0x36>
    260a:	58 c0       	rjmp	.+176    	; 0x26bc <udd_ep_alloc+0xe6>
    260c:	63 70       	andi	r22, 0x03	; 3
    260e:	61 30       	cpi	r22, 0x01	; 1
    2610:	11 f0       	breq	.+4      	; 0x2616 <udd_ep_alloc+0x40>
    2612:	18 f4       	brcc	.+6      	; 0x261a <udd_ep_alloc+0x44>
    2614:	04 c0       	rjmp	.+8      	; 0x261e <udd_ep_alloc+0x48>
    2616:	20 ec       	ldi	r18, 0xC0	; 192
    2618:	03 c0       	rjmp	.+6      	; 0x2620 <udd_ep_alloc+0x4a>
    261a:	20 e8       	ldi	r18, 0x80	; 128
    261c:	01 c0       	rjmp	.+2      	; 0x2620 <udd_ep_alloc+0x4a>
    261e:	20 e4       	ldi	r18, 0x40	; 64
    2620:	40 38       	cpi	r20, 0x80	; 128
    2622:	51 05       	cpc	r21, r1
    2624:	e9 f0       	breq	.+58     	; 0x2660 <udd_ep_alloc+0x8a>
    2626:	50 f4       	brcc	.+20     	; 0x263c <udd_ep_alloc+0x66>
    2628:	40 32       	cpi	r20, 0x20	; 32
    262a:	51 05       	cpc	r21, r1
    262c:	a9 f0       	breq	.+42     	; 0x2658 <udd_ep_alloc+0x82>
    262e:	40 34       	cpi	r20, 0x40	; 64
    2630:	51 05       	cpc	r21, r1
    2632:	a1 f0       	breq	.+40     	; 0x265c <udd_ep_alloc+0x86>
    2634:	40 31       	cpi	r20, 0x10	; 16
    2636:	51 05       	cpc	r21, r1
    2638:	d9 f4       	brne	.+54     	; 0x2670 <udd_ep_alloc+0x9a>
    263a:	0c c0       	rjmp	.+24     	; 0x2654 <udd_ep_alloc+0x7e>
    263c:	41 15       	cp	r20, r1
    263e:	32 e0       	ldi	r19, 0x02	; 2
    2640:	53 07       	cpc	r21, r19
    2642:	91 f0       	breq	.+36     	; 0x2668 <udd_ep_alloc+0x92>
    2644:	4f 3f       	cpi	r20, 0xFF	; 255
    2646:	33 e0       	ldi	r19, 0x03	; 3
    2648:	53 07       	cpc	r21, r19
    264a:	81 f0       	breq	.+32     	; 0x266c <udd_ep_alloc+0x96>
    264c:	41 15       	cp	r20, r1
    264e:	51 40       	sbci	r21, 0x01	; 1
    2650:	79 f4       	brne	.+30     	; 0x2670 <udd_ep_alloc+0x9a>
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <udd_ep_alloc+0x8e>
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0d c0       	rjmp	.+26     	; 0x2672 <udd_ep_alloc+0x9c>
    2658:	42 e0       	ldi	r20, 0x02	; 2
    265a:	0b c0       	rjmp	.+22     	; 0x2672 <udd_ep_alloc+0x9c>
    265c:	43 e0       	ldi	r20, 0x03	; 3
    265e:	09 c0       	rjmp	.+18     	; 0x2672 <udd_ep_alloc+0x9c>
    2660:	44 e0       	ldi	r20, 0x04	; 4
    2662:	07 c0       	rjmp	.+14     	; 0x2672 <udd_ep_alloc+0x9c>
    2664:	45 e0       	ldi	r20, 0x05	; 5
    2666:	05 c0       	rjmp	.+10     	; 0x2672 <udd_ep_alloc+0x9c>
    2668:	46 e0       	ldi	r20, 0x06	; 6
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <udd_ep_alloc+0x9c>
    266c:	47 e0       	ldi	r20, 0x07	; 7
    266e:	01 c0       	rjmp	.+2      	; 0x2672 <udd_ep_alloc+0x9c>
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	fc 01       	movw	r30, r24
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	ee 0f       	add	r30, r30
    267e:	ff 1f       	adc	r31, r31
    2680:	ec 5d       	subi	r30, 0xDC	; 220
    2682:	fd 4d       	sbci	r31, 0xDD	; 221
    2684:	11 8a       	std	Z+17, r1	; 0x11
    2686:	dc 01       	movw	r26, r24
    2688:	aa 0f       	add	r26, r26
    268a:	bb 1f       	adc	r27, r27
    268c:	aa 0f       	add	r26, r26
    268e:	bb 1f       	adc	r27, r27
    2690:	aa 0f       	add	r26, r26
    2692:	bb 1f       	adc	r27, r27
    2694:	ac 5c       	subi	r26, 0xCC	; 204
    2696:	bd 4d       	sbci	r27, 0xDD	; 221
    2698:	36 e0       	ldi	r19, 0x06	; 6
    269a:	3c 93       	st	X, r19
    269c:	24 2b       	or	r18, r20
    269e:	21 8b       	std	Z+17, r18	; 0x11
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	fc 01       	movw	r30, r24
    26ae:	ec 5d       	subi	r30, 0xDC	; 220
    26b0:	fd 4d       	sbci	r31, 0xDD	; 221
    26b2:	81 89       	ldd	r24, Z+17	; 0x11
    26b4:	80 62       	ori	r24, 0x20	; 32
    26b6:	81 8b       	std	Z+17, r24	; 0x11
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	08 95       	ret
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	08 95       	ret

000026c0 <udd_ep_is_halted>:
    26c0:	e8 2f       	mov	r30, r24
    26c2:	ef 70       	andi	r30, 0x0F	; 15
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	08 2e       	mov	r0, r24
    26cc:	00 0c       	add	r0, r0
    26ce:	99 0b       	sbc	r25, r25
    26d0:	88 27       	eor	r24, r24
    26d2:	99 0f       	add	r25, r25
    26d4:	88 1f       	adc	r24, r24
    26d6:	99 27       	eor	r25, r25
    26d8:	e8 0f       	add	r30, r24
    26da:	f9 1f       	adc	r31, r25
    26dc:	ee 0f       	add	r30, r30
    26de:	ff 1f       	adc	r31, r31
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	ee 0f       	add	r30, r30
    26e6:	ff 1f       	adc	r31, r31
    26e8:	ec 5d       	subi	r30, 0xDC	; 220
    26ea:	fd 4d       	sbci	r31, 0xDD	; 221
    26ec:	81 89       	ldd	r24, Z+17	; 0x11
    26ee:	82 fb       	bst	r24, 2
    26f0:	88 27       	eor	r24, r24
    26f2:	80 f9       	bld	r24, 0
    26f4:	08 95       	ret

000026f6 <udd_ep_clear_halt>:
    26f6:	28 2f       	mov	r18, r24
    26f8:	2f 70       	andi	r18, 0x0F	; 15
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	a9 01       	movw	r20, r18
    26fe:	44 0f       	add	r20, r20
    2700:	55 1f       	adc	r21, r21
    2702:	28 2f       	mov	r18, r24
    2704:	08 2e       	mov	r0, r24
    2706:	00 0c       	add	r0, r0
    2708:	33 0b       	sbc	r19, r19
    270a:	22 27       	eor	r18, r18
    270c:	33 0f       	add	r19, r19
    270e:	22 1f       	adc	r18, r18
    2710:	33 27       	eor	r19, r19
    2712:	24 0f       	add	r18, r20
    2714:	35 1f       	adc	r19, r21
    2716:	f9 01       	movw	r30, r18
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	ee 0f       	add	r30, r30
    2722:	ff 1f       	adc	r31, r31
    2724:	ec 5d       	subi	r30, 0xDC	; 220
    2726:	fd 4d       	sbci	r31, 0xDD	; 221
    2728:	91 89       	ldd	r25, Z+17	; 0x11
    272a:	92 ff       	sbrs	r25, 2
    272c:	17 c0       	rjmp	.+46     	; 0x275c <udd_ep_clear_halt+0x66>
    272e:	22 0f       	add	r18, r18
    2730:	33 1f       	adc	r19, r19
    2732:	22 0f       	add	r18, r18
    2734:	33 1f       	adc	r19, r19
    2736:	22 0f       	add	r18, r18
    2738:	33 1f       	adc	r19, r19
    273a:	f9 01       	movw	r30, r18
    273c:	ec 5d       	subi	r30, 0xDC	; 220
    273e:	fd 4d       	sbci	r31, 0xDD	; 221
    2740:	91 89       	ldd	r25, Z+17	; 0x11
    2742:	9b 7f       	andi	r25, 0xFB	; 251
    2744:	91 8b       	std	Z+17, r25	; 0x11
    2746:	ae dc       	rcall	.-1700   	; 0x20a4 <udd_ep_get_job>
    2748:	fc 01       	movw	r30, r24
    274a:	80 81       	ld	r24, Z
    274c:	80 ff       	sbrs	r24, 0
    274e:	06 c0       	rjmp	.+12     	; 0x275c <udd_ep_clear_halt+0x66>
    2750:	8e 7f       	andi	r24, 0xFE	; 254
    2752:	80 83       	st	Z, r24
    2754:	07 80       	ldd	r0, Z+7	; 0x07
    2756:	f0 85       	ldd	r31, Z+8	; 0x08
    2758:	e0 2d       	mov	r30, r0
    275a:	09 95       	icall
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	08 95       	ret

00002760 <udd_ep_run>:
    2760:	7f 92       	push	r7
    2762:	8f 92       	push	r8
    2764:	9f 92       	push	r9
    2766:	af 92       	push	r10
    2768:	bf 92       	push	r11
    276a:	cf 92       	push	r12
    276c:	df 92       	push	r13
    276e:	ef 92       	push	r14
    2770:	ff 92       	push	r15
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	98 2e       	mov	r9, r24
    277c:	86 2e       	mov	r8, r22
    277e:	6a 01       	movw	r12, r20
    2780:	79 01       	movw	r14, r18
    2782:	90 dc       	rcall	.-1760   	; 0x20a4 <udd_ep_get_job>
    2784:	5c 01       	movw	r10, r24
    2786:	79 2c       	mov	r7, r9
    2788:	77 1c       	adc	r7, r7
    278a:	77 24       	eor	r7, r7
    278c:	77 1c       	adc	r7, r7
    278e:	c9 2d       	mov	r28, r9
    2790:	cf 70       	andi	r28, 0x0F	; 15
    2792:	d0 e0       	ldi	r29, 0x00	; 0
    2794:	cc 0f       	add	r28, r28
    2796:	dd 1f       	adc	r29, r29
    2798:	c7 0d       	add	r28, r7
    279a:	d1 1d       	adc	r29, r1
    279c:	fe 01       	movw	r30, r28
    279e:	ee 0f       	add	r30, r30
    27a0:	ff 1f       	adc	r31, r31
    27a2:	ee 0f       	add	r30, r30
    27a4:	ff 1f       	adc	r31, r31
    27a6:	ee 0f       	add	r30, r30
    27a8:	ff 1f       	adc	r31, r31
    27aa:	ec 5d       	subi	r30, 0xDC	; 220
    27ac:	fd 4d       	sbci	r31, 0xDD	; 221
    27ae:	81 89       	ldd	r24, Z+17	; 0x11
    27b0:	80 7c       	andi	r24, 0xC0	; 192
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <udd_ep_run+0x56>
    27b4:	7d c0       	rjmp	.+250    	; 0x28b0 <udd_ep_run+0x150>
    27b6:	fe 01       	movw	r30, r28
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	ee 0f       	add	r30, r30
    27be:	ff 1f       	adc	r31, r31
    27c0:	ee 0f       	add	r30, r30
    27c2:	ff 1f       	adc	r31, r31
    27c4:	ec 5d       	subi	r30, 0xDC	; 220
    27c6:	fd 4d       	sbci	r31, 0xDD	; 221
    27c8:	81 89       	ldd	r24, Z+17	; 0x11
    27ca:	80 7c       	andi	r24, 0xC0	; 192
    27cc:	80 3c       	cpi	r24, 0xC0	; 192
    27ce:	61 f0       	breq	.+24     	; 0x27e8 <udd_ep_run+0x88>
    27d0:	fe 01       	movw	r30, r28
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	ee 0f       	add	r30, r30
    27d8:	ff 1f       	adc	r31, r31
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	ec 5d       	subi	r30, 0xDC	; 220
    27e0:	fd 4d       	sbci	r31, 0xDD	; 221
    27e2:	81 89       	ldd	r24, Z+17	; 0x11
    27e4:	82 fd       	sbrc	r24, 2
    27e6:	66 c0       	rjmp	.+204    	; 0x28b4 <udd_ep_run+0x154>
    27e8:	8f b7       	in	r24, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	f5 01       	movw	r30, r10
    27ee:	90 81       	ld	r25, Z
    27f0:	90 ff       	sbrs	r25, 0
    27f2:	03 c0       	rjmp	.+6      	; 0x27fa <udd_ep_run+0x9a>
    27f4:	8f bf       	out	0x3f, r24	; 63
    27f6:	71 2c       	mov	r7, r1
    27f8:	5e c0       	rjmp	.+188    	; 0x28b6 <udd_ep_run+0x156>
    27fa:	f5 01       	movw	r30, r10
    27fc:	90 81       	ld	r25, Z
    27fe:	91 60       	ori	r25, 0x01	; 1
    2800:	90 83       	st	Z, r25
    2802:	8f bf       	out	0x3f, r24	; 63
    2804:	c1 82       	std	Z+1, r12	; 0x01
    2806:	d2 82       	std	Z+2, r13	; 0x02
    2808:	e3 82       	std	Z+3, r14	; 0x03
    280a:	f4 82       	std	Z+4, r15	; 0x04
    280c:	15 82       	std	Z+5, r1	; 0x05
    280e:	16 82       	std	Z+6, r1	; 0x06
    2810:	07 83       	std	Z+7, r16	; 0x07
    2812:	10 87       	std	Z+8, r17	; 0x08
    2814:	81 10       	cpse	r8, r1
    2816:	06 c0       	rjmp	.+12     	; 0x2824 <udd_ep_run+0xc4>
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	e1 14       	cp	r14, r1
    281c:	f1 04       	cpc	r15, r1
    281e:	19 f0       	breq	.+6      	; 0x2826 <udd_ep_run+0xc6>
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <udd_ep_run+0xc6>
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	f5 01       	movw	r30, r10
    2828:	80 81       	ld	r24, Z
    282a:	90 fb       	bst	r25, 0
    282c:	81 f9       	bld	r24, 1
    282e:	8b 7f       	andi	r24, 0xFB	; 251
    2830:	80 83       	st	Z, r24
    2832:	77 20       	and	r7, r7
    2834:	59 f0       	breq	.+22     	; 0x284c <udd_ep_run+0xec>
    2836:	cc 0f       	add	r28, r28
    2838:	dd 1f       	adc	r29, r29
    283a:	cc 0f       	add	r28, r28
    283c:	dd 1f       	adc	r29, r29
    283e:	cc 0f       	add	r28, r28
    2840:	dd 1f       	adc	r29, r29
    2842:	cc 5d       	subi	r28, 0xDC	; 220
    2844:	dd 4d       	sbci	r29, 0xDD	; 221
    2846:	1e 8a       	std	Y+22, r1	; 0x16
    2848:	1f 8a       	std	Y+23, r1	; 0x17
    284a:	2d c0       	rjmp	.+90     	; 0x28a6 <udd_ep_run+0x146>
    284c:	fe 01       	movw	r30, r28
    284e:	ee 0f       	add	r30, r30
    2850:	ff 1f       	adc	r31, r31
    2852:	ee 0f       	add	r30, r30
    2854:	ff 1f       	adc	r31, r31
    2856:	ee 0f       	add	r30, r30
    2858:	ff 1f       	adc	r31, r31
    285a:	ec 5d       	subi	r30, 0xDC	; 220
    285c:	fd 4d       	sbci	r31, 0xDD	; 221
    285e:	81 89       	ldd	r24, Z+17	; 0x11
    2860:	80 7c       	andi	r24, 0xC0	; 192
    2862:	80 3c       	cpi	r24, 0xC0	; 192
    2864:	a1 f4       	brne	.+40     	; 0x288e <udd_ep_run+0x12e>
    2866:	ce 01       	movw	r24, r28
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	8c 5c       	subi	r24, 0xCC	; 204
    2876:	9d 4d       	sbci	r25, 0xDD	; 221
    2878:	ef db       	rcall	.-2082   	; 0x2058 <udd_ep_get_size>
    287a:	bc 01       	movw	r22, r24
    287c:	c7 01       	movw	r24, r14
    287e:	60 d2       	rcall	.+1216   	; 0x2d40 <__udivmodhi4>
    2880:	89 2b       	or	r24, r25
    2882:	29 f0       	breq	.+10     	; 0x288e <udd_ep_run+0x12e>
    2884:	f5 01       	movw	r30, r10
    2886:	80 81       	ld	r24, Z
    2888:	8e 7f       	andi	r24, 0xFE	; 254
    288a:	80 83       	st	Z, r24
    288c:	14 c0       	rjmp	.+40     	; 0x28b6 <udd_ep_run+0x156>
    288e:	cc 0f       	add	r28, r28
    2890:	dd 1f       	adc	r29, r29
    2892:	cc 0f       	add	r28, r28
    2894:	dd 1f       	adc	r29, r29
    2896:	cc 0f       	add	r28, r28
    2898:	dd 1f       	adc	r29, r29
    289a:	cc 5d       	subi	r28, 0xDC	; 220
    289c:	dd 4d       	sbci	r29, 0xDD	; 221
    289e:	1a 8a       	std	Y+18, r1	; 0x12
    28a0:	1b 8a       	std	Y+19, r1	; 0x13
    28a2:	1e 8a       	std	Y+22, r1	; 0x16
    28a4:	1f 8a       	std	Y+23, r1	; 0x17
    28a6:	89 2d       	mov	r24, r9
    28a8:	87 dc       	rcall	.-1778   	; 0x21b8 <udd_ep_trans_complet>
    28aa:	77 24       	eor	r7, r7
    28ac:	73 94       	inc	r7
    28ae:	03 c0       	rjmp	.+6      	; 0x28b6 <udd_ep_run+0x156>
    28b0:	71 2c       	mov	r7, r1
    28b2:	01 c0       	rjmp	.+2      	; 0x28b6 <udd_ep_run+0x156>
    28b4:	71 2c       	mov	r7, r1
    28b6:	87 2d       	mov	r24, r7
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	1f 91       	pop	r17
    28be:	0f 91       	pop	r16
    28c0:	ff 90       	pop	r15
    28c2:	ef 90       	pop	r14
    28c4:	df 90       	pop	r13
    28c6:	cf 90       	pop	r12
    28c8:	bf 90       	pop	r11
    28ca:	af 90       	pop	r10
    28cc:	9f 90       	pop	r9
    28ce:	8f 90       	pop	r8
    28d0:	7f 90       	pop	r7
    28d2:	08 95       	ret

000028d4 <udd_ep_abort>:
    28d4:	ff 92       	push	r15
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	18 2f       	mov	r17, r24
    28e0:	f8 2e       	mov	r15, r24
    28e2:	ff 1c       	adc	r15, r15
    28e4:	ff 24       	eor	r15, r15
    28e6:	ff 1c       	adc	r15, r15
    28e8:	c8 2f       	mov	r28, r24
    28ea:	cf 70       	andi	r28, 0x0F	; 15
    28ec:	d0 e0       	ldi	r29, 0x00	; 0
    28ee:	cc 0f       	add	r28, r28
    28f0:	dd 1f       	adc	r29, r29
    28f2:	cf 0d       	add	r28, r15
    28f4:	d1 1d       	adc	r29, r1
    28f6:	d6 db       	rcall	.-2132   	; 0x20a4 <udd_ep_get_job>
    28f8:	dc 01       	movw	r26, r24
    28fa:	fe 01       	movw	r30, r28
    28fc:	ee 0f       	add	r30, r30
    28fe:	ff 1f       	adc	r31, r31
    2900:	ee 0f       	add	r30, r30
    2902:	ff 1f       	adc	r31, r31
    2904:	ee 0f       	add	r30, r30
    2906:	ff 1f       	adc	r31, r31
    2908:	ec 5c       	subi	r30, 0xCC	; 204
    290a:	fd 4d       	sbci	r31, 0xDD	; 221
    290c:	02 e0       	ldi	r16, 0x02	; 2
    290e:	05 93       	las	Z, r16
    2910:	8c 91       	ld	r24, X
    2912:	80 ff       	sbrs	r24, 0
    2914:	22 c0       	rjmp	.+68     	; 0x295a <udd_ep_abort+0x86>
    2916:	8e 7f       	andi	r24, 0xFE	; 254
    2918:	8c 93       	st	X, r24
    291a:	17 96       	adiw	r26, 0x07	; 7
    291c:	ed 91       	ld	r30, X+
    291e:	fc 91       	ld	r31, X
    2920:	18 97       	sbiw	r26, 0x08	; 8
    2922:	30 97       	sbiw	r30, 0x00	; 0
    2924:	d1 f0       	breq	.+52     	; 0x295a <udd_ep_abort+0x86>
    2926:	ff 20       	and	r15, r15
    2928:	59 f0       	breq	.+22     	; 0x2940 <udd_ep_abort+0x6c>
    292a:	cc 0f       	add	r28, r28
    292c:	dd 1f       	adc	r29, r29
    292e:	cc 0f       	add	r28, r28
    2930:	dd 1f       	adc	r29, r29
    2932:	cc 0f       	add	r28, r28
    2934:	dd 1f       	adc	r29, r29
    2936:	cc 5d       	subi	r28, 0xDC	; 220
    2938:	dd 4d       	sbci	r29, 0xDD	; 221
    293a:	6e 89       	ldd	r22, Y+22	; 0x16
    293c:	7f 89       	ldd	r23, Y+23	; 0x17
    293e:	0a c0       	rjmp	.+20     	; 0x2954 <udd_ep_abort+0x80>
    2940:	cc 0f       	add	r28, r28
    2942:	dd 1f       	adc	r29, r29
    2944:	cc 0f       	add	r28, r28
    2946:	dd 1f       	adc	r29, r29
    2948:	cc 0f       	add	r28, r28
    294a:	dd 1f       	adc	r29, r29
    294c:	cc 5d       	subi	r28, 0xDC	; 220
    294e:	dd 4d       	sbci	r29, 0xDD	; 221
    2950:	6a 89       	ldd	r22, Y+18	; 0x12
    2952:	7b 89       	ldd	r23, Y+19	; 0x13
    2954:	41 2f       	mov	r20, r17
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	09 95       	icall
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	ff 90       	pop	r15
    2964:	08 95       	ret

00002966 <udd_ep_free>:
    2966:	cf 93       	push	r28
    2968:	c8 2f       	mov	r28, r24
    296a:	b4 df       	rcall	.-152    	; 0x28d4 <udd_ep_abort>
    296c:	ec 2f       	mov	r30, r28
    296e:	ef 70       	andi	r30, 0x0F	; 15
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	ee 0f       	add	r30, r30
    2974:	ff 1f       	adc	r31, r31
    2976:	8c 2f       	mov	r24, r28
    2978:	cc 0f       	add	r28, r28
    297a:	99 0b       	sbc	r25, r25
    297c:	88 27       	eor	r24, r24
    297e:	99 0f       	add	r25, r25
    2980:	88 1f       	adc	r24, r24
    2982:	99 27       	eor	r25, r25
    2984:	e8 0f       	add	r30, r24
    2986:	f9 1f       	adc	r31, r25
    2988:	ee 0f       	add	r30, r30
    298a:	ff 1f       	adc	r31, r31
    298c:	ee 0f       	add	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	ee 0f       	add	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	ec 5d       	subi	r30, 0xDC	; 220
    2996:	fd 4d       	sbci	r31, 0xDD	; 221
    2998:	11 8a       	std	Z+17, r1	; 0x11
    299a:	cf 91       	pop	r28
    299c:	08 95       	ret

0000299e <udd_ep_set_halt>:
    299e:	0f 93       	push	r16
    29a0:	e8 2f       	mov	r30, r24
    29a2:	ef 70       	andi	r30, 0x0F	; 15
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	ee 0f       	add	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	28 2f       	mov	r18, r24
    29ac:	08 2e       	mov	r0, r24
    29ae:	00 0c       	add	r0, r0
    29b0:	33 0b       	sbc	r19, r19
    29b2:	22 27       	eor	r18, r18
    29b4:	33 0f       	add	r19, r19
    29b6:	22 1f       	adc	r18, r18
    29b8:	33 27       	eor	r19, r19
    29ba:	e2 0f       	add	r30, r18
    29bc:	f3 1f       	adc	r31, r19
    29be:	df 01       	movw	r26, r30
    29c0:	aa 0f       	add	r26, r26
    29c2:	bb 1f       	adc	r27, r27
    29c4:	aa 0f       	add	r26, r26
    29c6:	bb 1f       	adc	r27, r27
    29c8:	aa 0f       	add	r26, r26
    29ca:	bb 1f       	adc	r27, r27
    29cc:	ac 5d       	subi	r26, 0xDC	; 220
    29ce:	bd 4d       	sbci	r27, 0xDD	; 221
    29d0:	51 96       	adiw	r26, 0x11	; 17
    29d2:	9c 91       	ld	r25, X
    29d4:	51 97       	sbiw	r26, 0x11	; 17
    29d6:	94 60       	ori	r25, 0x04	; 4
    29d8:	51 96       	adiw	r26, 0x11	; 17
    29da:	9c 93       	st	X, r25
    29dc:	ee 0f       	add	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	ec 5c       	subi	r30, 0xCC	; 204
    29ea:	fd 4d       	sbci	r31, 0xDD	; 221
    29ec:	01 e0       	ldi	r16, 0x01	; 1
    29ee:	06 93       	lac	Z, r16
    29f0:	71 df       	rcall	.-286    	; 0x28d4 <udd_ep_abort>
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	0f 91       	pop	r16
    29f6:	08 95       	ret

000029f8 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    29f8:	1f 92       	push	r1
    29fa:	0f 92       	push	r0
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	0f 92       	push	r0
    2a00:	11 24       	eor	r1, r1
    2a02:	0f 93       	push	r16
    2a04:	2f 93       	push	r18
    2a06:	3f 93       	push	r19
    2a08:	4f 93       	push	r20
    2a0a:	5f 93       	push	r21
    2a0c:	6f 93       	push	r22
    2a0e:	7f 93       	push	r23
    2a10:	8f 93       	push	r24
    2a12:	9f 93       	push	r25
    2a14:	af 93       	push	r26
    2a16:	bf 93       	push	r27
    2a18:	ef 93       	push	r30
    2a1a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2a1c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a20:	88 23       	and	r24, r24
    2a22:	44 f4       	brge	.+16     	; 0x2a34 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2a24:	80 e8       	ldi	r24, 0x80	; 128
    2a26:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2a2a:	0e 94 8e 0b 	call	0x171c	; 0x171c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2a2e:	0e 94 01 04 	call	0x802	; 0x802 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a32:	8a c0       	rjmp	.+276    	; 0x2b48 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2a34:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a38:	82 ff       	sbrs	r24, 2
    2a3a:	20 c0       	rjmp	.+64     	; 0x2a7c <__vector_125+0x84>
		udd_ack_underflow_event();
    2a3c:	84 e0       	ldi	r24, 0x04	; 4
    2a3e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2a42:	80 91 3c 22 	lds	r24, 0x223C	; 0x80223c <udd_sram+0x18>
    2a46:	86 ff       	sbrs	r24, 6
    2a48:	7f c0       	rjmp	.+254    	; 0x2b48 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a4a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a4e:	81 fd       	sbrc	r24, 1
    2a50:	7b c0       	rjmp	.+246    	; 0x2b48 <__vector_125+0x150>
    2a52:	43 db       	rcall	.-2426   	; 0x20da <udd_ctrl_interrupt_tc_setup>
    2a54:	81 11       	cpse	r24, r1
    2a56:	78 c0       	rjmp	.+240    	; 0x2b48 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2a58:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	11 f4       	brne	.+4      	; 0x2a64 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2a60:	79 da       	rcall	.-2830   	; 0x1f54 <udd_ctrl_send_zlp_in>
    2a62:	72 c0       	rjmp	.+228    	; 0x2b48 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2a64:	84 30       	cpi	r24, 0x04	; 4
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <__vector_125+0x72>
    2a68:	6f c0       	rjmp	.+222    	; 0x2b48 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2a6a:	ed e3       	ldi	r30, 0x3D	; 61
    2a6c:	f2 e2       	ldi	r31, 0x22	; 34
    2a6e:	04 e0       	ldi	r16, 0x04	; 4
    2a70:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2a72:	e5 e3       	ldi	r30, 0x35	; 53
    2a74:	f2 e2       	ldi	r31, 0x22	; 34
    2a76:	04 e0       	ldi	r16, 0x04	; 4
    2a78:	05 93       	las	Z, r16
    2a7a:	66 c0       	rjmp	.+204    	; 0x2b48 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2a7c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a80:	81 ff       	sbrs	r24, 1
    2a82:	5d c0       	rjmp	.+186    	; 0x2b3e <__vector_125+0x146>
		udd_ack_overflow_event();
    2a84:	82 e0       	ldi	r24, 0x02	; 2
    2a86:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2a8a:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <udd_sram+0x10>
    2a8e:	86 ff       	sbrs	r24, 6
    2a90:	5b c0       	rjmp	.+182    	; 0x2b48 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a92:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a96:	81 fd       	sbrc	r24, 1
    2a98:	57 c0       	rjmp	.+174    	; 0x2b48 <__vector_125+0x150>
    2a9a:	1f db       	rcall	.-2498   	; 0x20da <udd_ctrl_interrupt_tc_setup>
    2a9c:	81 11       	cpse	r24, r1
    2a9e:	54 c0       	rjmp	.+168    	; 0x2b48 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2aa0:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2aa4:	82 30       	cpi	r24, 0x02	; 2
    2aa6:	41 f4       	brne	.+16     	; 0x2ab8 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2aa8:	84 e0       	ldi	r24, 0x04	; 4
    2aaa:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2aae:	e4 e3       	ldi	r30, 0x34	; 52
    2ab0:	f2 e2       	ldi	r31, 0x22	; 34
    2ab2:	02 e0       	ldi	r16, 0x02	; 2
    2ab4:	06 93       	lac	Z, r16
    2ab6:	48 c0       	rjmp	.+144    	; 0x2b48 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2ab8:	83 30       	cpi	r24, 0x03	; 3
    2aba:	09 f0       	breq	.+2      	; 0x2abe <__vector_125+0xc6>
    2abc:	45 c0       	rjmp	.+138    	; 0x2b48 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2abe:	ed e3       	ldi	r30, 0x3D	; 61
    2ac0:	f2 e2       	ldi	r31, 0x22	; 34
    2ac2:	04 e0       	ldi	r16, 0x04	; 4
    2ac4:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2ac6:	e5 e3       	ldi	r30, 0x35	; 53
    2ac8:	f2 e2       	ldi	r31, 0x22	; 34
    2aca:	04 e0       	ldi	r16, 0x04	; 4
    2acc:	05 93       	las	Z, r16
    2ace:	3c c0       	rjmp	.+120    	; 0x2b48 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2ad0:	80 e1       	ldi	r24, 0x10	; 16
    2ad2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	fd de       	rcall	.-518    	; 0x28d4 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2ada:	81 e8       	ldi	r24, 0x81	; 129
    2adc:	fb de       	rcall	.-522    	; 0x28d4 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2ade:	82 e0       	ldi	r24, 0x02	; 2
    2ae0:	f9 de       	rcall	.-526    	; 0x28d4 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2ae2:	82 e8       	ldi	r24, 0x82	; 130
    2ae4:	f7 de       	rcall	.-530    	; 0x28d4 <udd_ep_abort>
		}
#endif
		udc_reset();
    2ae6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2aea:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2aee:	e4 e2       	ldi	r30, 0x24	; 36
    2af0:	f2 e2       	ldi	r31, 0x22	; 34
    2af2:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2af4:	96 e0       	ldi	r25, 0x06	; 6
    2af6:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2af8:	83 e4       	ldi	r24, 0x43	; 67
    2afa:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2afc:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2afe:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b00:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2b02:	8d ed       	ldi	r24, 0xDD	; 221
    2b04:	91 e2       	ldi	r25, 0x21	; 33
    2b06:	84 8b       	std	Z+20, r24	; 0x14
    2b08:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2b0a:	ef d9       	rcall	.-3106   	; 0x1eea <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2b0c:	1d c0       	rjmp	.+58     	; 0x2b48 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2b0e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b12:	86 ff       	sbrs	r24, 6
    2b14:	08 c0       	rjmp	.+16     	; 0x2b26 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2b16:	80 e4       	ldi	r24, 0x40	; 64
    2b18:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	bc d9       	rcall	.-3208   	; 0x1e98 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2b20:	0e 94 ff 03 	call	0x7fe	; 0x7fe <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b24:	11 c0       	rjmp	.+34     	; 0x2b48 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2b26:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b2a:	85 ff       	sbrs	r24, 5
    2b2c:	0d c0       	rjmp	.+26     	; 0x2b48 <__vector_125+0x150>
		udd_ack_resume_event();
    2b2e:	80 e2       	ldi	r24, 0x20	; 32
    2b30:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	b0 d9       	rcall	.-3232   	; 0x1e98 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2b38:	0e 94 00 04 	call	0x800	; 0x800 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b3c:	05 c0       	rjmp	.+10     	; 0x2b48 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2b3e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b42:	84 fd       	sbrc	r24, 4
    2b44:	c5 cf       	rjmp	.-118    	; 0x2ad0 <__vector_125+0xd8>
    2b46:	e3 cf       	rjmp	.-58     	; 0x2b0e <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2b48:	ff 91       	pop	r31
    2b4a:	ef 91       	pop	r30
    2b4c:	bf 91       	pop	r27
    2b4e:	af 91       	pop	r26
    2b50:	9f 91       	pop	r25
    2b52:	8f 91       	pop	r24
    2b54:	7f 91       	pop	r23
    2b56:	6f 91       	pop	r22
    2b58:	5f 91       	pop	r21
    2b5a:	4f 91       	pop	r20
    2b5c:	3f 91       	pop	r19
    2b5e:	2f 91       	pop	r18
    2b60:	0f 91       	pop	r16
    2b62:	0f 90       	pop	r0
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	0f 90       	pop	r0
    2b68:	1f 90       	pop	r1
    2b6a:	18 95       	reti

00002b6c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2b6c:	1f 92       	push	r1
    2b6e:	0f 92       	push	r0
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	0f 92       	push	r0
    2b74:	11 24       	eor	r1, r1
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	2f 93       	push	r18
    2b7c:	3f 93       	push	r19
    2b7e:	4f 93       	push	r20
    2b80:	5f 93       	push	r21
    2b82:	6f 93       	push	r22
    2b84:	7f 93       	push	r23
    2b86:	8f 93       	push	r24
    2b88:	9f 93       	push	r25
    2b8a:	af 93       	push	r26
    2b8c:	bf 93       	push	r27
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	ef 93       	push	r30
    2b94:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2b96:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b9a:	81 fd       	sbrc	r24, 1
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2b9e:	9d da       	rcall	.-2758   	; 0x20da <udd_ctrl_interrupt_tc_setup>
    2ba0:	81 11       	cpse	r24, r1
    2ba2:	b9 c0       	rjmp	.+370    	; 0x2d16 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2baa:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2bae:	81 95       	neg	r24
    2bb0:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2bb2:	e4 e3       	ldi	r30, 0x34	; 52
    2bb4:	f2 e2       	ldi	r31, 0x22	; 34
    2bb6:	e8 1b       	sub	r30, r24
    2bb8:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2bba:	20 81       	ld	r18, Z
    2bbc:	31 81       	ldd	r19, Z+1	; 0x01
    2bbe:	24 53       	subi	r18, 0x34	; 52
    2bc0:	32 42       	sbci	r19, 0x22	; 34
    2bc2:	36 95       	lsr	r19
    2bc4:	27 95       	ror	r18
    2bc6:	36 95       	lsr	r19
    2bc8:	27 95       	ror	r18
    2bca:	36 95       	lsr	r19
    2bcc:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2bce:	82 2f       	mov	r24, r18
    2bd0:	86 95       	lsr	r24
    2bd2:	20 fd       	sbrc	r18, 0
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <__vector_126+0x6e>
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	01 c0       	rjmp	.+2      	; 0x2bdc <__vector_126+0x70>
    2bda:	90 e8       	ldi	r25, 0x80	; 128
    2bdc:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2bde:	e8 2f       	mov	r30, r24
    2be0:	ef 70       	andi	r30, 0x0F	; 15
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	ee 0f       	add	r30, r30
    2be6:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2be8:	28 2f       	mov	r18, r24
    2bea:	08 2e       	mov	r0, r24
    2bec:	00 0c       	add	r0, r0
    2bee:	33 0b       	sbc	r19, r19
    2bf0:	22 27       	eor	r18, r18
    2bf2:	33 0f       	add	r19, r19
    2bf4:	22 1f       	adc	r18, r18
    2bf6:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2bf8:	e2 0f       	add	r30, r18
    2bfa:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2bfc:	df 01       	movw	r26, r30
    2bfe:	aa 0f       	add	r26, r26
    2c00:	bb 1f       	adc	r27, r27
    2c02:	aa 0f       	add	r26, r26
    2c04:	bb 1f       	adc	r27, r27
    2c06:	aa 0f       	add	r26, r26
    2c08:	bb 1f       	adc	r27, r27
    2c0a:	ac 5c       	subi	r26, 0xCC	; 204
    2c0c:	bd 4d       	sbci	r27, 0xDD	; 221
    2c0e:	9c 91       	ld	r25, X
    2c10:	95 ff       	sbrs	r25, 5
    2c12:	81 c0       	rjmp	.+258    	; 0x2d16 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2c14:	fd 01       	movw	r30, r26
    2c16:	00 e2       	ldi	r16, 0x20	; 32
    2c18:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2c1a:	81 11       	cpse	r24, r1
    2c1c:	77 c0       	rjmp	.+238    	; 0x2d0c <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c1e:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2c22:	84 30       	cpi	r24, 0x04	; 4
    2c24:	19 f4       	brne	.+6      	; 0x2c2c <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2c26:	a4 d9       	rcall	.-3256   	; 0x1f70 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2c28:	60 d9       	rcall	.-3392   	; 0x1eea <udd_ctrl_init>
    2c2a:	75 c0       	rjmp	.+234    	; 0x2d16 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2c2c:	00 91 36 22 	lds	r16, 0x2236	; 0x802236 <udd_sram+0x12>
    2c30:	10 91 37 22 	lds	r17, 0x2237	; 0x802237 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2c34:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0xa>
    2c38:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0xb>
    2c3c:	c0 91 1d 22 	lds	r28, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    2c40:	d0 91 1e 22 	lds	r29, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2c44:	9e 01       	movw	r18, r28
    2c46:	20 0f       	add	r18, r16
    2c48:	31 1f       	adc	r19, r17
    2c4a:	82 17       	cp	r24, r18
    2c4c:	93 07       	cpc	r25, r19
    2c4e:	18 f4       	brcc	.+6      	; 0x2c56 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2c50:	8c 01       	movw	r16, r24
    2c52:	0c 1b       	sub	r16, r28
    2c54:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2c56:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x8>
    2c5a:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x9>
    2c5e:	a8 01       	movw	r20, r16
    2c60:	6d ed       	ldi	r22, 0xDD	; 221
    2c62:	71 e2       	ldi	r23, 0x21	; 33
    2c64:	8c 0f       	add	r24, r28
    2c66:	9d 1f       	adc	r25, r29
    2c68:	a7 d0       	rcall	.+334    	; 0x2db8 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2c6a:	c0 0f       	add	r28, r16
    2c6c:	d1 1f       	adc	r29, r17
    2c6e:	c0 93 1d 22 	sts	0x221D, r28	; 0x80221d <udd_ctrl_payload_nb_trans>
    2c72:	d0 93 1e 22 	sts	0x221E, r29	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2c76:	00 34       	cpi	r16, 0x40	; 64
    2c78:	11 05       	cpc	r17, r1
    2c7a:	69 f4       	brne	.+26     	; 0x2c96 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2c7c:	80 91 1f 22 	lds	r24, 0x221F	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2c80:	90 91 20 22 	lds	r25, 0x2220	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c84:	8c 0f       	add	r24, r28
    2c86:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2c88:	20 91 9a 24 	lds	r18, 0x249A	; 0x80249a <udd_g_ctrlreq+0x6>
    2c8c:	30 91 9b 24 	lds	r19, 0x249B	; 0x80249b <udd_g_ctrlreq+0x7>
    2c90:	82 17       	cp	r24, r18
    2c92:	93 07       	cpc	r25, r19
    2c94:	80 f0       	brcs	.+32     	; 0x2cb6 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2c96:	e4 e9       	ldi	r30, 0x94	; 148
    2c98:	f4 e2       	ldi	r31, 0x24	; 36
    2c9a:	c2 87       	std	Z+10, r28	; 0x0a
    2c9c:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2c9e:	06 84       	ldd	r0, Z+14	; 0x0e
    2ca0:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ca2:	e0 2d       	mov	r30, r0
    2ca4:	30 97       	sbiw	r30, 0x00	; 0
    2ca6:	29 f0       	breq	.+10     	; 0x2cb2 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2ca8:	09 95       	icall
    2caa:	81 11       	cpse	r24, r1
    2cac:	02 c0       	rjmp	.+4      	; 0x2cb2 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2cae:	44 d9       	rcall	.-3448   	; 0x1f38 <udd_ctrl_stall_data>
    2cb0:	32 c0       	rjmp	.+100    	; 0x2d16 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2cb2:	50 d9       	rcall	.-3424   	; 0x1f54 <udd_ctrl_send_zlp_in>
    2cb4:	30 c0       	rjmp	.+96     	; 0x2d16 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2cb6:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0xa>
    2cba:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0xb>
    2cbe:	c8 17       	cp	r28, r24
    2cc0:	d9 07       	cpc	r29, r25
    2cc2:	f9 f4       	brne	.+62     	; 0x2d02 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2cc4:	e0 91 a2 24 	lds	r30, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0xe>
    2cc8:	f0 91 a3 24 	lds	r31, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0xf>
    2ccc:	30 97       	sbiw	r30, 0x00	; 0
    2cce:	11 f4       	brne	.+4      	; 0x2cd4 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2cd0:	33 d9       	rcall	.-3482   	; 0x1f38 <udd_ctrl_stall_data>
    2cd2:	21 c0       	rjmp	.+66     	; 0x2d16 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2cd4:	09 95       	icall
    2cd6:	81 11       	cpse	r24, r1
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2cda:	2e d9       	rcall	.-3492   	; 0x1f38 <udd_ctrl_stall_data>
    2cdc:	1c c0       	rjmp	.+56     	; 0x2d16 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2cde:	20 91 1f 22 	lds	r18, 0x221F	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2ce2:	30 91 20 22 	lds	r19, 0x2220	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2ce6:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    2cea:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2cee:	82 0f       	add	r24, r18
    2cf0:	93 1f       	adc	r25, r19
    2cf2:	80 93 1f 22 	sts	0x221F, r24	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2cf6:	90 93 20 22 	sts	0x2220, r25	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2cfa:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    2cfe:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2d02:	e4 e3       	ldi	r30, 0x34	; 52
    2d04:	f2 e2       	ldi	r31, 0x22	; 34
    2d06:	02 e0       	ldi	r16, 0x02	; 2
    2d08:	06 93       	lac	Z, r16
    2d0a:	05 c0       	rjmp	.+10     	; 0x2d16 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2d0c:	80 38       	cpi	r24, 0x80	; 128
    2d0e:	11 f4       	brne	.+4      	; 0x2d14 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2d10:	37 d9       	rcall	.-3474   	; 0x1f80 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2d12:	01 c0       	rjmp	.+2      	; 0x2d16 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2d14:	51 da       	rcall	.-2910   	; 0x21b8 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2d16:	ff 91       	pop	r31
    2d18:	ef 91       	pop	r30
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	bf 91       	pop	r27
    2d20:	af 91       	pop	r26
    2d22:	9f 91       	pop	r25
    2d24:	8f 91       	pop	r24
    2d26:	7f 91       	pop	r23
    2d28:	6f 91       	pop	r22
    2d2a:	5f 91       	pop	r21
    2d2c:	4f 91       	pop	r20
    2d2e:	3f 91       	pop	r19
    2d30:	2f 91       	pop	r18
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	0f 90       	pop	r0
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	0f 90       	pop	r0
    2d3c:	1f 90       	pop	r1
    2d3e:	18 95       	reti

00002d40 <__udivmodhi4>:
    2d40:	aa 1b       	sub	r26, r26
    2d42:	bb 1b       	sub	r27, r27
    2d44:	51 e1       	ldi	r21, 0x11	; 17
    2d46:	07 c0       	rjmp	.+14     	; 0x2d56 <__udivmodhi4_ep>

00002d48 <__udivmodhi4_loop>:
    2d48:	aa 1f       	adc	r26, r26
    2d4a:	bb 1f       	adc	r27, r27
    2d4c:	a6 17       	cp	r26, r22
    2d4e:	b7 07       	cpc	r27, r23
    2d50:	10 f0       	brcs	.+4      	; 0x2d56 <__udivmodhi4_ep>
    2d52:	a6 1b       	sub	r26, r22
    2d54:	b7 0b       	sbc	r27, r23

00002d56 <__udivmodhi4_ep>:
    2d56:	88 1f       	adc	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	5a 95       	dec	r21
    2d5c:	a9 f7       	brne	.-22     	; 0x2d48 <__udivmodhi4_loop>
    2d5e:	80 95       	com	r24
    2d60:	90 95       	com	r25
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	08 95       	ret

00002d68 <__divmodhi4>:
    2d68:	97 fb       	bst	r25, 7
    2d6a:	07 2e       	mov	r0, r23
    2d6c:	16 f4       	brtc	.+4      	; 0x2d72 <__divmodhi4+0xa>
    2d6e:	00 94       	com	r0
    2d70:	06 d0       	rcall	.+12     	; 0x2d7e <__divmodhi4_neg1>
    2d72:	77 fd       	sbrc	r23, 7
    2d74:	08 d0       	rcall	.+16     	; 0x2d86 <__divmodhi4_neg2>
    2d76:	e4 df       	rcall	.-56     	; 0x2d40 <__udivmodhi4>
    2d78:	07 fc       	sbrc	r0, 7
    2d7a:	05 d0       	rcall	.+10     	; 0x2d86 <__divmodhi4_neg2>
    2d7c:	3e f4       	brtc	.+14     	; 0x2d8c <__divmodhi4_exit>

00002d7e <__divmodhi4_neg1>:
    2d7e:	90 95       	com	r25
    2d80:	81 95       	neg	r24
    2d82:	9f 4f       	sbci	r25, 0xFF	; 255
    2d84:	08 95       	ret

00002d86 <__divmodhi4_neg2>:
    2d86:	70 95       	com	r23
    2d88:	61 95       	neg	r22
    2d8a:	7f 4f       	sbci	r23, 0xFF	; 255

00002d8c <__divmodhi4_exit>:
    2d8c:	08 95       	ret

00002d8e <__tablejump2__>:
    2d8e:	ee 0f       	add	r30, r30
    2d90:	ff 1f       	adc	r31, r31
    2d92:	05 90       	lpm	r0, Z+
    2d94:	f4 91       	lpm	r31, Z
    2d96:	e0 2d       	mov	r30, r0
    2d98:	09 94       	ijmp

00002d9a <__umulhisi3>:
    2d9a:	a2 9f       	mul	r26, r18
    2d9c:	b0 01       	movw	r22, r0
    2d9e:	b3 9f       	mul	r27, r19
    2da0:	c0 01       	movw	r24, r0
    2da2:	a3 9f       	mul	r26, r19
    2da4:	70 0d       	add	r23, r0
    2da6:	81 1d       	adc	r24, r1
    2da8:	11 24       	eor	r1, r1
    2daa:	91 1d       	adc	r25, r1
    2dac:	b2 9f       	mul	r27, r18
    2dae:	70 0d       	add	r23, r0
    2db0:	81 1d       	adc	r24, r1
    2db2:	11 24       	eor	r1, r1
    2db4:	91 1d       	adc	r25, r1
    2db6:	08 95       	ret

00002db8 <memcpy>:
    2db8:	fb 01       	movw	r30, r22
    2dba:	dc 01       	movw	r26, r24
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <memcpy+0xa>
    2dbe:	01 90       	ld	r0, Z+
    2dc0:	0d 92       	st	X+, r0
    2dc2:	41 50       	subi	r20, 0x01	; 1
    2dc4:	50 40       	sbci	r21, 0x00	; 0
    2dc6:	d8 f7       	brcc	.-10     	; 0x2dbe <memcpy+0x6>
    2dc8:	08 95       	ret

00002dca <_exit>:
    2dca:	f8 94       	cli

00002dcc <__stop_program>:
    2dcc:	ff cf       	rjmp	.-2      	; 0x2dcc <__stop_program>
