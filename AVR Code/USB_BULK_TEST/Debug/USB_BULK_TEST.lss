
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00802000  00002918  000029ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dac  008020b6  008020b6  00002a62  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  00002ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b30b  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001db8  00000000  00000000  0000e2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000093fa  00000000  00000000  0001008b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a80  00000000  00000000  00019488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fb59  00000000  00000000  00019f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000231b  00000000  00000000  00049a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  0004bd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bdb3  00000000  00000000  0004c190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	34 c1       	rjmp	.+616    	; 0x282 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
      1e:	00 00       	nop
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6e c7       	rjmp	.+3804   	; 0xf3e <__vector_24>
      62:	00 00       	nop
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8e c2       	rjmp	.+1308   	; 0x63a <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	58 c6       	rjmp	.+3248   	; 0xdfe <__vector_83>
     14e:	00 00       	nop
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_125>
     1f8:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__vector_126>
     1fc:	b6 09       	sbc	r27, r6
     1fe:	ba 09       	sbc	r27, r10
     200:	f6 09       	sbc	r31, r6
     202:	32 0a       	sbc	r3, r18
     204:	3b 0a       	sbc	r3, r27
     206:	40 0a       	sbc	r4, r16
     208:	84 0a       	sbc	r8, r20
     20a:	89 0a       	sbc	r8, r25
     20c:	e6 09       	sbc	r30, r6
     20e:	e8 09       	sbc	r30, r8
     210:	ea 09       	sbc	r30, r10
     212:	ec 09       	sbc	r30, r12
     214:	ee 09       	sbc	r30, r14
     216:	f0 09       	sbc	r31, r0
     218:	f2 09       	sbc	r31, r2
     21a:	f4 09       	sbc	r31, r4
     21c:	22 0a       	sbc	r2, r18
     21e:	24 0a       	sbc	r2, r20
     220:	26 0a       	sbc	r2, r22
     222:	28 0a       	sbc	r2, r24
     224:	2a 0a       	sbc	r2, r26
     226:	2c 0a       	sbc	r2, r28
     228:	2e 0a       	sbc	r2, r30
     22a:	30 0a       	sbc	r3, r16
     22c:	4c 0a       	sbc	r4, r28
     22e:	54 0a       	sbc	r5, r20
     230:	5c 0a       	sbc	r5, r28
     232:	67 0a       	sbc	r6, r23
     234:	69 0a       	sbc	r6, r25
     236:	6b 0a       	sbc	r6, r27
     238:	73 0a       	sbc	r7, r19
     23a:	7b 0a       	sbc	r7, r27
     23c:	01 0e       	add	r0, r17
     23e:	04 0e       	add	r0, r20
     240:	07 0e       	add	r0, r23
     242:	0a 0e       	add	r0, r26
     244:	0d 0e       	add	r0, r29
     246:	10 0e       	add	r1, r16
     248:	13 0e       	add	r1, r19

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	e8 e1       	ldi	r30, 0x18	; 24
     25e:	f9 e2       	ldi	r31, 0x29	; 41
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a6 3b       	cpi	r26, 0xB6	; 182
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	a6 eb       	ldi	r26, 0xB6	; 182
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a2 36       	cpi	r26, 0x62	; 98
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	c9 d0       	rcall	.+402    	; 0x410 <main>
     27e:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:

#include "tiny_calibration.h"
#include "globals.h"
#include "tiny_adc.h"

tiny_calibration_init(){
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
		//Set up 48MHz DFLL for USB.
		OSC.DFLLCTRL = OSC_RC32MCREF_USBSOF_gc;
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
		DFLLRC32M.CALB = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC)); //THIS is the val for 48MHz.  RCOSC32M is for a 32MHz calibration.  That makes a lot of sense now...
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	8c d1       	rcall	.+792    	; 0x5ae <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
		DFLLRC32M.COMP2 = 0xBB;
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
		DFLLRC32M.COMP1= 0x80;  //0xBB80 = 48,000.
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
		DFLLRC32M.CTRL = 0x01; //Enable
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
		
		//Turn on the 48MHz clock and scale it down to 24MHz
		CCP = CCP_IOREG_gc;
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
		CLK.PSCTRL = CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc;  //All peripheral clocks = CLKsys / 2.
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
		//CLK.USBCTRL handled by udc
		OSC.CTRL = OSC_RC32MEN_bm | OSC_RC2MEN_bm;  //Enable 32MHz reference.  Keep 2MHz on.
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
		while(OSC.STATUS != (OSC_RC32MRDY_bm | OSC_RC2MRDY_bm)); //Wait for it to be ready before continuing
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
		
		//4 step process from ASF manual.  Puts a 48MHz clock on the PLL output
		OSC.CTRL |= OSC_RC2MEN_bm;  //1. Enable reference clock source.
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
		OSC.PLLCTRL = OSC_PLLSRC_RC2M_gc | 24; //2. Set the multiplication factor and select the clock reference for the PLL.
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
		while(!(OSC.STATUS & OSC_RC2MRDY_bm)); //3. Wait until the clock reference source is stable.
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
		OSC.CTRL |= OSC_PLLEN_bm; //4. Enable the PLL
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
		
		//Move CPU + Peripherals to 48MHz PLLL clock.
		while(!(OSC.STATUS & OSC_PLLRDY_bm));
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
		CCP = CCP_IOREG_gc;
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
		
		//DFLLRC2M.CALB -= 1;
		DFLLRC2M.CALA -= 21;
     2ec:	e8 e6       	ldi	r30, 0x68	; 104
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	82 81       	ldd	r24, Z+2	; 0x02
     2f2:	85 51       	subi	r24, 0x15	; 21
     2f4:	82 83       	std	Z+2, r24	; 0x02
		return;
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	08 95       	ret

000002fe <tiny_calibration_first_sof>:

tiny_calibration_first_sof(){
		PR.PRPE &= 0b11111110;
     2fe:	e0 e7       	ldi	r30, 0x70	; 112
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	85 81       	ldd	r24, Z+5	; 0x05
     304:	8e 7f       	andi	r24, 0xFE	; 254
     306:	85 83       	std	Z+5, r24	; 0x05
		TC_CALI.PER = 24000;
     308:	e0 e0       	ldi	r30, 0x00	; 0
     30a:	fa e0       	ldi	r31, 0x0A	; 10
     30c:	80 ec       	ldi	r24, 0xC0	; 192
     30e:	9d e5       	ldi	r25, 0x5D	; 93
     310:	86 a3       	std	Z+38, r24	; 0x26
     312:	97 a3       	std	Z+39, r25	; 0x27
		TC_CALI.CNT = 12000;
     314:	80 ee       	ldi	r24, 0xE0	; 224
     316:	9e e2       	ldi	r25, 0x2E	; 46
     318:	80 a3       	std	Z+32, r24	; 0x20
     31a:	91 a3       	std	Z+33, r25	; 0x21
		TC_CALI.CTRLA = TC_CLKSEL_DIV1_gc;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 83       	st	Z, r24
     320:	08 95       	ret

00000322 <tiny_calibration_every_sof>:
volatile int gradient;

unsigned char deadTime = 0;
volatile unsigned long outOfRange = 0;
void tiny_calibration_every_sof(){
	unsigned int cnt = TC_CALI.CNT;
     322:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     326:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     32a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     32e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     332:	ac 01       	movw	r20, r24
     334:	42 1b       	sub	r20, r18
     336:	53 0b       	sbc	r21, r19
     338:	40 93 67 22 	sts	0x2267, r20	; 0x802267 <gradient>
     33c:	50 93 68 22 	sts	0x2268, r21	; 0x802268 <gradient+0x1>
	
	if(cnt > 12500){
     340:	85 3d       	cpi	r24, 0xD5	; 213
     342:	50 e3       	ldi	r21, 0x30	; 48
     344:	95 07       	cpc	r25, r21
     346:	18 f0       	brcs	.+6      	; 0x34e <tiny_calibration_every_sof+0x2c>
		DFLLRC2M.CALA = 39;
     348:	27 e2       	ldi	r18, 0x27	; 39
     34a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	}
	if(cnt < 11500){
     34e:	8c 3e       	cpi	r24, 0xEC	; 236
     350:	2c e2       	ldi	r18, 0x2C	; 44
     352:	92 07       	cpc	r25, r18
     354:	18 f4       	brcc	.+6      	; 0x35c <tiny_calibration_every_sof+0x3a>
		DFLLRC2M.CALA = 43;
     356:	2b e2       	ldi	r18, 0x2B	; 43
     358:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	}
	
	if((cnt<10000) || (cnt>14000)){
     35c:	9c 01       	movw	r18, r24
     35e:	20 51       	subi	r18, 0x10	; 16
     360:	37 42       	sbci	r19, 0x27	; 39
     362:	21 3a       	cpi	r18, 0xA1	; 161
     364:	3f 40       	sbci	r19, 0x0F	; 15
     366:	a0 f0       	brcs	.+40     	; 0x390 <tiny_calibration_every_sof+0x6e>
		outOfRange++;
     368:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <__data_end>
     36c:	50 91 b7 20 	lds	r21, 0x20B7	; 0x8020b7 <__data_end+0x1>
     370:	60 91 b8 20 	lds	r22, 0x20B8	; 0x8020b8 <__data_end+0x2>
     374:	70 91 b9 20 	lds	r23, 0x20B9	; 0x8020b9 <__data_end+0x3>
     378:	4f 5f       	subi	r20, 0xFF	; 255
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	6f 4f       	sbci	r22, 0xFF	; 255
     37e:	7f 4f       	sbci	r23, 0xFF	; 255
     380:	40 93 b6 20 	sts	0x20B6, r20	; 0x8020b6 <__data_end>
     384:	50 93 b7 20 	sts	0x20B7, r21	; 0x8020b7 <__data_end+0x1>
     388:	60 93 b8 20 	sts	0x20B8, r22	; 0x8020b8 <__data_end+0x2>
     38c:	70 93 b9 20 	sts	0x20B9, r23	; 0x8020b9 <__data_end+0x3>
	}
	
	last_val = cnt;
     390:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     394:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     398:	08 95       	ret

0000039a <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     39a:	e0 e8       	ldi	r30, 0x80	; 128
     39c:	f6 e0       	ldi	r31, 0x06	; 6
     39e:	8f e0       	ldi	r24, 0x0F	; 15
     3a0:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	84 83       	std	Z+4, r24	; 0x04
     3a6:	08 95       	ret

000003a8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     3a8:	08 95       	ret

000003aa <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, iso_callback);
     3aa:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <usb_state>
     3ae:	27 e7       	ldi	r18, 0x77	; 119
     3b0:	31 e0       	ldi	r19, 0x01	; 1
     3b2:	42 9f       	mul	r20, r18
     3b4:	c0 01       	movw	r24, r0
     3b6:	43 9f       	mul	r20, r19
     3b8:	90 0d       	add	r25, r0
     3ba:	11 24       	eor	r1, r1
     3bc:	45 ed       	ldi	r20, 0xD5	; 213
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	6a ef       	ldi	r22, 0xFA	; 250
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	82 58       	subi	r24, 0x82	; 130
     3c6:	99 4d       	sbci	r25, 0xD9	; 217
     3c8:	42 c6       	rjmp	.+3204   	; 0x104e <udi_vendor_iso_in_run>
     3ca:	08 95       	ret

000003cc <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * HALFPACKET_SIZE], 250, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, iso_callback2);
     3cc:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <usb_state>
     3d0:	27 e7       	ldi	r18, 0x77	; 119
     3d2:	31 e0       	ldi	r19, 0x01	; 1
     3d4:	42 9f       	mul	r20, r18
     3d6:	c0 01       	movw	r24, r0
     3d8:	43 9f       	mul	r20, r19
     3da:	90 0d       	add	r25, r0
     3dc:	11 24       	eor	r1, r1
     3de:	46 ee       	ldi	r20, 0xE6	; 230
     3e0:	51 e0       	ldi	r21, 0x01	; 1
     3e2:	6a ef       	ldi	r22, 0xFA	; 250
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	88 58       	subi	r24, 0x88	; 136
     3e8:	98 4d       	sbci	r25, 0xD8	; 216
     3ea:	3d c6       	rjmp	.+3194   	; 0x1066 <udi_vendor_iso_in_run2>
     3ec:	08 95       	ret

000003ee <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * HALFPACKET_SIZE + 250], 250, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, iso_callback3);
     3ee:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <usb_state>
     3f2:	27 e7       	ldi	r18, 0x77	; 119
     3f4:	31 e0       	ldi	r19, 0x01	; 1
     3f6:	42 9f       	mul	r20, r18
     3f8:	c0 01       	movw	r24, r0
     3fa:	43 9f       	mul	r20, r19
     3fc:	90 0d       	add	r25, r0
     3fe:	11 24       	eor	r1, r1
     400:	47 ef       	ldi	r20, 0xF7	; 247
     402:	51 e0       	ldi	r21, 0x01	; 1
     404:	6a ef       	ldi	r22, 0xFA	; 250
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	8e 58       	subi	r24, 0x8E	; 142
     40a:	97 4d       	sbci	r25, 0xD7	; 215
     40c:	38 c6       	rjmp	.+3184   	; 0x107e <udi_vendor_iso_in_run3>
     40e:	08 95       	ret

00000410 <main>:
#define CNT_CNT_MAX 256
volatile unsigned short cntCnt[CNT_CNT_MAX];
volatile unsigned short cntCntCnt = 0;

int main(void){
	irq_initialize_vectors();
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     416:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     418:	35 df       	rcall	.-406    	; 0x284 <tiny_calibration_init>
		
	board_init();
     41a:	c6 df       	rcall	.-116    	; 0x3a8 <board_init>
	udc_start();
     41c:	27 d7       	rcall	.+3662   	; 0x126c <udc_start>
	tiny_dac_setup();
     41e:	20 d1       	rcall	.+576    	; 0x660 <tiny_dac_setup>
	tiny_dma_setup();
     420:	43 d1       	rcall	.+646    	; 0x6a8 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	cc d0       	rcall	.+408    	; 0x5c0 <tiny_adc_setup>
	tiny_adc_pid_setup();
     428:	b8 d0       	rcall	.+368    	; 0x59a <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     42a:	8c e0       	ldi	r24, 0x0C	; 12
     42c:	ac d0       	rcall	.+344    	; 0x586 <tiny_adc_ch1setup>
	tiny_timer_setup();
     42e:	a5 d4       	rcall	.+2378   	; 0xd7a <tiny_timer_setup>
	tiny_uart_setup();
     430:	60 d5       	rcall	.+2752   	; 0xef2 <tiny_uart_setup>
	tiny_spi_setup();
     432:	77 d5       	rcall	.+2798   	; 0xf22 <tiny_spi_setup>
	tiny_dig_setup();
     434:	b2 df       	rcall	.-156    	; 0x39a <tiny_dig_setup>
     436:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <debug_counter>
     43a:	90 91 6b 22 	lds	r25, 0x226B	; 0x80226b <debug_counter+0x1>
     43e:	a0 91 6c 22 	lds	r26, 0x226C	; 0x80226c <debug_counter+0x2>
     442:	b0 91 6d 22 	lds	r27, 0x226D	; 0x80226d <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	a1 1d       	adc	r26, r1
     44a:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	21 ee       	ldi	r18, 0xE1	; 225
     450:	92 07       	cpc	r25, r18
     452:	25 ef       	ldi	r18, 0xF5	; 245
     454:	a2 07       	cpc	r26, r18
     456:	25 e0       	ldi	r18, 0x05	; 5
     458:	b2 07       	cpc	r27, r18
     45a:	18 f0       	brcs	.+6      	; 0x462 <main+0x52>
			debug_counter = 0;
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     47e:	e3 cf       	rjmp	.-58     	; 0x446 <main+0x36>

00000480 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     480:	08 95       	ret

00000482 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     482:	08 95       	ret

00000484 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	if(firstFrame){
     484:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <firstFrame>
     488:	88 23       	and	r24, r24
     48a:	39 f0       	breq	.+14     	; 0x49a <main_sof_action+0x16>
		tiny_calibration_first_sof();
     48c:	38 df       	rcall	.-400    	; 0x2fe <tiny_calibration_first_sof>
		firstFrame = 0;
     48e:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <firstFrame>
		tcinit = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <tcinit>
     498:	36 c0       	rjmp	.+108    	; 0x506 <main_sof_action+0x82>
	}
	else{
		if(tcinit){
     49a:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <tcinit>
     49e:	88 23       	and	r24, r24
     4a0:	91 f1       	breq	.+100    	; 0x506 <main_sof_action+0x82>
			tiny_calibration_every_sof();
     4a2:	3f df       	rcall	.-386    	; 0x322 <tiny_calibration_every_sof>
			cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     4a4:	e0 91 ba 20 	lds	r30, 0x20BA	; 0x8020ba <cntCntCnt>
     4a8:	f0 91 bb 20 	lds	r31, 0x20BB	; 0x8020bb <cntCntCnt+0x1>
     4ac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     4b0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     4b4:	ee 0f       	add	r30, r30
     4b6:	ff 1f       	adc	r31, r31
     4b8:	e6 5a       	subi	r30, 0xA6	; 166
     4ba:	f3 4d       	sbci	r31, 0xD3	; 211
     4bc:	80 83       	st	Z, r24
     4be:	91 83       	std	Z+1, r25	; 0x01
			if(cntCntCnt == (CNT_CNT_MAX - 1)){
     4c0:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <cntCntCnt>
     4c4:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <cntCntCnt+0x1>
     4c8:	8f 3f       	cpi	r24, 0xFF	; 255
     4ca:	91 05       	cpc	r25, r1
     4cc:	99 f4       	brne	.+38     	; 0x4f4 <main_sof_action+0x70>
				cntCntCnt = 0;
     4ce:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <cntCntCnt>
     4d2:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <cntCntCnt+0x1>
				if(debugOnNextEnd){
     4d6:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <debugOnNextEnd>
     4da:	88 23       	and	r24, r24
     4dc:	a1 f0       	breq	.+40     	; 0x506 <main_sof_action+0x82>
					currentTrfcnt = DMA.CH0.TRFCNT;
     4de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     4e2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     4e6:	80 93 5a 2e 	sts	0x2E5A, r24	; 0x802e5a <currentTrfcnt>
     4ea:	90 93 5b 2e 	sts	0x2E5B, r25	; 0x802e5b <currentTrfcnt+0x1>
					debugOnNextEnd = 0;
     4ee:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <debugOnNextEnd>
     4f2:	09 c0       	rjmp	.+18     	; 0x506 <main_sof_action+0x82>
				}
			}
			else cntCntCnt++;
     4f4:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <cntCntCnt>
     4f8:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <cntCntCnt+0x1>
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <cntCntCnt>
     502:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <cntCntCnt+0x1>
		}
	}
	usb_state = !usb_state;
     506:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <usb_state>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	91 11       	cpse	r25, r1
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <usb_state>
     514:	08 95       	ret

00000516 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <main_b_vendor_enable>
	firstFrame = 1;
     51c:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     520:	45 ed       	ldi	r20, 0xD5	; 213
     522:	51 e0       	ldi	r21, 0x01	; 1
     524:	6e ee       	ldi	r22, 0xEE	; 238
     526:	72 e0       	ldi	r23, 0x02	; 2
     528:	8e e7       	ldi	r24, 0x7E	; 126
     52a:	96 e2       	ldi	r25, 0x26	; 38
     52c:	90 d5       	rcall	.+2848   	; 0x104e <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     52e:	46 ee       	ldi	r20, 0xE6	; 230
     530:	51 e0       	ldi	r21, 0x01	; 1
     532:	6e ee       	ldi	r22, 0xEE	; 238
     534:	72 e0       	ldi	r23, 0x02	; 2
     536:	88 e7       	ldi	r24, 0x78	; 120
     538:	97 e2       	ldi	r25, 0x27	; 39
     53a:	95 d5       	rcall	.+2858   	; 0x1066 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     53c:	47 ef       	ldi	r20, 0xF7	; 247
     53e:	51 e0       	ldi	r21, 0x01	; 1
     540:	6e ee       	ldi	r22, 0xEE	; 238
     542:	72 e0       	ldi	r23, 0x02	; 2
     544:	82 e7       	ldi	r24, 0x72	; 114
     546:	98 e2       	ldi	r25, 0x28	; 40
     548:	9a d5       	rcall	.+2868   	; 0x107e <udi_vendor_iso_in_run3>
	return true;
}
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	08 95       	ret

0000054e <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     54e:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <main_b_vendor_enable>
     552:	08 95       	ret

00000554 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	08 95       	ret

00000558 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	08 95       	ret

0000055c <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     55c:	e0 e0       	ldi	r30, 0x00	; 0
     55e:	f2 e0       	ldi	r31, 0x02	; 2
     560:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     562:	98 2f       	mov	r25, r24
     564:	9c 71       	andi	r25, 0x1C	; 28
     566:	93 68       	ori	r25, 0x83	; 131
     568:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     56a:	88 23       	and	r24, r24
     56c:	1c f4       	brge	.+6      	; 0x574 <tiny_adc_ch0setup+0x18>
     56e:	90 e1       	ldi	r25, 0x10	; 16
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	02 c0       	rjmp	.+4      	; 0x578 <tiny_adc_ch0setup+0x1c>
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	89 2b       	or	r24, r25
     57a:	e0 e0       	ldi	r30, 0x00	; 0
     57c:	f2 e0       	ldi	r31, 0x02	; 2
     57e:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     580:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     582:	16 a2       	std	Z+38, r1	; 0x26
     584:	08 95       	ret

00000586 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     586:	e0 e0       	ldi	r30, 0x00	; 0
     588:	f2 e0       	ldi	r31, 0x02	; 2
     58a:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     58c:	83 68       	ori	r24, 0x83	; 131
     58e:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     590:	80 e1       	ldi	r24, 0x10	; 16
     592:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     594:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     596:	16 aa       	std	Z+54, r1	; 0x36
     598:	08 95       	ret

0000059a <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     59a:	e0 e0       	ldi	r30, 0x00	; 0
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     5a0:	83 e8       	ldi	r24, 0x83	; 131
     5a2:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     5a4:	8f e2       	ldi	r24, 0x2F	; 47
     5a6:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     5a8:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     5aa:	16 a6       	std	Z+46, r1	; 0x2e
     5ac:	08 95       	ret

000005ae <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     5ae:	aa ec       	ldi	r26, 0xCA	; 202
     5b0:	b1 e0       	ldi	r27, 0x01	; 1
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     5b6:	e8 2f       	mov	r30, r24
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     5bc:	1c 92       	st	X, r1

	return( result );
}
     5be:	08 95       	ret

000005c0 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     5c4:	e0 e7       	ldi	r30, 0x70	; 112
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	91 81       	ldd	r25, Z+1	; 0x01
     5ca:	9d 7f       	andi	r25, 0xFD	; 253
     5cc:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     5ce:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     5d2:	62 30       	cpi	r22, 0x02	; 2
     5d4:	31 f1       	breq	.+76     	; 0x622 <tiny_adc_setup+0x62>
     5d6:	e0 e0       	ldi	r30, 0x00	; 0
     5d8:	f2 e0       	ldi	r31, 0x02	; 2
     5da:	9c e1       	ldi	r25, 0x1C	; 28
     5dc:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     5de:	90 e4       	ldi	r25, 0x40	; 64
     5e0:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     5e2:	81 11       	cpse	r24, r1
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <tiny_adc_setup+0x2a>
     5e6:	80 e4       	ldi	r24, 0x40	; 64
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <tiny_adc_setup+0x2c>
     5ea:	80 ec       	ldi	r24, 0xC0	; 192
     5ec:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     5f0:	61 30       	cpi	r22, 0x01	; 1
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <tiny_adc_setup+0x38>
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <tiny_adc_setup+0x3a>
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	c0 e0       	ldi	r28, 0x00	; 0
     5fc:	d2 e0       	ldi	r29, 0x02	; 2
     5fe:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     600:	80 e2       	ldi	r24, 0x20	; 32
     602:	d5 df       	rcall	.-86     	; 0x5ae <ReadCalibrationByte>
     604:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     606:	81 e2       	ldi	r24, 0x21	; 33
     608:	d2 df       	rcall	.-92     	; 0x5ae <ReadCalibrationByte>
     60a:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     60c:	18 8e       	std	Y+24, r1	; 0x18
     60e:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     614:	c2 df       	rcall	.-124    	; 0x59a <tiny_adc_pid_setup>
     616:	0e c0       	rjmp	.+28     	; 0x634 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     618:	80 ec       	ldi	r24, 0xC0	; 192
     61a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	ec cf       	rjmp	.-40     	; 0x5fa <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     622:	e0 e0       	ldi	r30, 0x00	; 0
     624:	f2 e0       	ldi	r31, 0x02	; 2
     626:	9e e1       	ldi	r25, 0x1E	; 30
     628:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     62a:	90 e4       	ldi	r25, 0x40	; 64
     62c:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     62e:	81 11       	cpse	r24, r1
     630:	f3 cf       	rjmp	.-26     	; 0x618 <tiny_adc_setup+0x58>
     632:	d9 cf       	rjmp	.-78     	; 0x5e6 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	11 24       	eor	r1, r1
     644:	8f 93       	push	r24
	ADCA.CH0.INTFLAGS = 0x01;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
     654:	8f 91       	pop	r24
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	0f 90       	pop	r0
     65c:	1f 90       	pop	r1
     65e:	18 95       	reti

00000660 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     664:	e0 e7       	ldi	r30, 0x70	; 112
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	82 81       	ldd	r24, Z+2	; 0x02
     66a:	8b 7f       	andi	r24, 0xFB	; 251
     66c:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     66e:	c0 e2       	ldi	r28, 0x20	; 32
     670:	d3 e0       	ldi	r29, 0x03	; 3
     672:	8d e0       	ldi	r24, 0x0D	; 13
     674:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     676:	80 e4       	ldi	r24, 0x40	; 64
     678:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     67a:	89 e0       	ldi	r24, 0x09	; 9
     67c:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     67e:	83 e3       	ldi	r24, 0x33	; 51
     680:	96 df       	rcall	.-212    	; 0x5ae <ReadCalibrationByte>
     682:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     684:	82 e3       	ldi	r24, 0x32	; 50
     686:	93 df       	rcall	.-218    	; 0x5ae <ReadCalibrationByte>
     688:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     68a:	87 e3       	ldi	r24, 0x37	; 55
     68c:	90 df       	rcall	.-224    	; 0x5ae <ReadCalibrationByte>
     68e:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     690:	86 e3       	ldi	r24, 0x36	; 54
     692:	8d df       	rcall	.-230    	; 0x5ae <ReadCalibrationByte>
     694:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     696:	e0 e2       	ldi	r30, 0x20	; 32
     698:	f6 e0       	ldi	r31, 0x06	; 6
     69a:	80 81       	ld	r24, Z
     69c:	83 60       	ori	r24, 0x03	; 3
     69e:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     6a0:	14 82       	std	Z+4, r1	; 0x04
	
	

     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <tiny_dma_setup>:
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
	
}

void tiny_dma_loop_mode_6(void){
     6a8:	e0 e7       	ldi	r30, 0x70	; 112
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	8e 7f       	andi	r24, 0xFE	; 254
     6b0:	80 83       	st	Z, r24
     6b2:	83 e8       	ldi	r24, 0x83	; 131
     6b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     6b8:	08 95       	ret

000006ba <tiny_dma_flush>:
     6ba:	e0 e0       	ldi	r30, 0x00	; 0
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	10 8a       	std	Z+16, r1	; 0x10
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	80 8b       	std	Z+16, r24	; 0x10
     6c4:	10 a2       	std	Z+32, r1	; 0x20
     6c6:	80 a3       	std	Z+32, r24	; 0x20
     6c8:	10 aa       	std	Z+48, r1	; 0x30
     6ca:	80 ab       	std	Z+48, r24	; 0x30
     6cc:	e0 e4       	ldi	r30, 0x40	; 64
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	10 82       	st	Z, r1
     6d2:	80 83       	st	Z, r24
     6d4:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <b1_state>
     6d8:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <b2_state>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <usb_state>
     6e2:	08 95       	ret

000006e4 <tiny_dma_set_mode_0>:
     6e4:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <global_mode>
     6e8:	e8 df       	rcall	.-48     	; 0x6ba <tiny_dma_flush>
     6ea:	e0 e0       	ldi	r30, 0x00	; 0
     6ec:	f1 e0       	ldi	r31, 0x01	; 1
     6ee:	16 aa       	std	Z+54, r1	; 0x36
     6f0:	84 e2       	ldi	r24, 0x24	; 36
     6f2:	80 ab       	std	Z+48, r24	; 0x30
     6f4:	11 aa       	std	Z+49, r1	; 0x31
     6f6:	49 e5       	ldi	r20, 0x59	; 89
     6f8:	42 ab       	std	Z+50, r20	; 0x32
     6fa:	32 e0       	ldi	r19, 0x02	; 2
     6fc:	33 ab       	std	Z+51, r19	; 0x33
     6fe:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <auxDacBufLen>
     702:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     706:	64 ab       	std	Z+52, r22	; 0x34
     708:	75 ab       	std	Z+53, r23	; 0x35
     70a:	6e e7       	ldi	r22, 0x7E	; 126
     70c:	74 e2       	ldi	r23, 0x24	; 36
     70e:	60 af       	std	Z+56, r22	; 0x38
     710:	71 af       	std	Z+57, r23	; 0x39
     712:	12 ae       	std	Z+58, r1	; 0x3a
     714:	9b e3       	ldi	r25, 0x3B	; 59
     716:	94 af       	std	Z+60, r25	; 0x3c
     718:	93 e0       	ldi	r25, 0x03	; 3
     71a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     71e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     722:	20 a9       	ldd	r18, Z+48	; 0x30
     724:	20 68       	ori	r18, 0x80	; 128
     726:	20 ab       	std	Z+48, r18	; 0x30
     728:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     72c:	a0 e4       	ldi	r26, 0x40	; 64
     72e:	b1 e0       	ldi	r27, 0x01	; 1
     730:	8c 93       	st	X, r24
     732:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     736:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     73a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     73e:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     742:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     746:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     74a:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     74e:	4e e6       	ldi	r20, 0x6E	; 110
     750:	52 e2       	ldi	r21, 0x22	; 34
     752:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     756:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     75a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     75e:	29 e3       	ldi	r18, 0x39	; 57
     760:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     764:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     768:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     76c:	9c 91       	ld	r25, X
     76e:	90 68       	ori	r25, 0x80	; 128
     770:	9c 93       	st	X, r25
     772:	10 8a       	std	Z+16, r1	; 0x10
     774:	90 e4       	ldi	r25, 0x40	; 64
     776:	90 8b       	std	Z+16, r25	; 0x10
     778:	80 8b       	std	Z+16, r24	; 0x10
     77a:	11 8a       	std	Z+17, r1	; 0x11
     77c:	95 e9       	ldi	r25, 0x95	; 149
     77e:	92 8b       	std	Z+18, r25	; 0x12
     780:	90 e1       	ldi	r25, 0x10	; 16
     782:	93 8b       	std	Z+19, r25	; 0x13
     784:	4e ee       	ldi	r20, 0xEE	; 238
     786:	52 e0       	ldi	r21, 0x02	; 2
     788:	44 8b       	std	Z+20, r20	; 0x14
     78a:	55 8b       	std	Z+21, r21	; 0x15
     78c:	80 8f       	std	Z+24, r24	; 0x18
     78e:	31 8f       	std	Z+25, r19	; 0x19
     790:	12 8e       	std	Z+26, r1	; 0x1a
     792:	8e e7       	ldi	r24, 0x7E	; 126
     794:	96 e2       	ldi	r25, 0x26	; 38
     796:	84 8f       	std	Z+28, r24	; 0x1c
     798:	95 8f       	std	Z+29, r25	; 0x1d
     79a:	16 8e       	std	Z+30, r1	; 0x1e
     79c:	80 89       	ldd	r24, Z+16	; 0x10
     79e:	80 68       	ori	r24, 0x80	; 128
     7a0:	80 8b       	std	Z+16, r24	; 0x10
     7a2:	08 95       	ret

000007a4 <tiny_dma_set_mode_1>:
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     7ae:	85 df       	rcall	.-246    	; 0x6ba <tiny_dma_flush>
     7b0:	e0 e0       	ldi	r30, 0x00	; 0
     7b2:	f1 e0       	ldi	r31, 0x01	; 1
     7b4:	10 aa       	std	Z+48, r1	; 0x30
     7b6:	80 e4       	ldi	r24, 0x40	; 64
     7b8:	80 ab       	std	Z+48, r24	; 0x30
     7ba:	94 e0       	ldi	r25, 0x04	; 4
     7bc:	90 ab       	std	Z+48, r25	; 0x30
     7be:	11 aa       	std	Z+49, r1	; 0x31
     7c0:	12 aa       	std	Z+50, r1	; 0x32
     7c2:	5b e4       	ldi	r21, 0x4B	; 75
     7c4:	53 ab       	std	Z+51, r21	; 0x33
     7c6:	14 aa       	std	Z+52, r1	; 0x34
     7c8:	15 aa       	std	Z+53, r1	; 0x35
     7ca:	16 aa       	std	Z+54, r1	; 0x36
     7cc:	23 e0       	ldi	r18, 0x03	; 3
     7ce:	30 e2       	ldi	r19, 0x20	; 32
     7d0:	20 af       	std	Z+56, r18	; 0x38
     7d2:	31 af       	std	Z+57, r19	; 0x39
     7d4:	12 ae       	std	Z+58, r1	; 0x3a
     7d6:	40 ea       	ldi	r20, 0xA0	; 160
     7d8:	44 af       	std	Z+60, r20	; 0x3c
     7da:	38 e0       	ldi	r19, 0x08	; 8
     7dc:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     7e0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     7e4:	80 a9       	ldd	r24, Z+48	; 0x30
     7e6:	80 6a       	ori	r24, 0xA0	; 160
     7e8:	80 ab       	std	Z+48, r24	; 0x30
     7ea:	85 e5       	ldi	r24, 0x55	; 85
     7ec:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     7f0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     7f4:	a0 e4       	ldi	r26, 0x40	; 64
     7f6:	b1 e0       	ldi	r27, 0x01	; 1
     7f8:	d4 e2       	ldi	r29, 0x24	; 36
     7fa:	dc 93       	st	X, r29
     7fc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     800:	89 e5       	ldi	r24, 0x59	; 89
     802:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     806:	c2 e0       	ldi	r28, 0x02	; 2
     808:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     80c:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <auxDacBufLen>
     810:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     814:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     818:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     81c:	6e e7       	ldi	r22, 0x7E	; 126
     81e:	74 e2       	ldi	r23, 0x24	; 36
     820:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     824:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     828:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     82c:	8b e3       	ldi	r24, 0x3B	; 59
     82e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     838:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     83c:	2c 91       	ld	r18, X
     83e:	20 68       	ori	r18, 0x80	; 128
     840:	2c 93       	st	X, r18
     842:	90 8b       	std	Z+16, r25	; 0x10
     844:	81 8b       	std	Z+17, r24	; 0x11
     846:	a1 e9       	ldi	r26, 0x91	; 145
     848:	a2 8b       	std	Z+18, r26	; 0x12
     84a:	20 e1       	ldi	r18, 0x10	; 16
     84c:	23 8b       	std	Z+19, r18	; 0x13
     84e:	67 e7       	ldi	r22, 0x77	; 119
     850:	71 e0       	ldi	r23, 0x01	; 1
     852:	64 8b       	std	Z+20, r22	; 0x14
     854:	75 8b       	std	Z+21, r23	; 0x15
     856:	d0 8f       	std	Z+24, r29	; 0x18
     858:	c1 8f       	std	Z+25, r28	; 0x19
     85a:	12 8e       	std	Z+26, r1	; 0x1a
     85c:	ce e7       	ldi	r28, 0x7E	; 126
     85e:	d6 e2       	ldi	r29, 0x26	; 38
     860:	c4 8f       	std	Z+28, r28	; 0x1c
     862:	d5 8f       	std	Z+29, r29	; 0x1d
     864:	16 8e       	std	Z+30, r1	; 0x1e
     866:	20 89       	ldd	r18, Z+16	; 0x10
     868:	20 68       	ori	r18, 0x80	; 128
     86a:	20 8b       	std	Z+16, r18	; 0x10
     86c:	90 a3       	std	Z+32, r25	; 0x20
     86e:	81 a3       	std	Z+33, r24	; 0x21
     870:	a2 a3       	std	Z+34, r26	; 0x22
     872:	53 a3       	std	Z+35, r21	; 0x23
     874:	64 a3       	std	Z+36, r22	; 0x24
     876:	75 a3       	std	Z+37, r23	; 0x25
     878:	40 a7       	std	Z+40, r20	; 0x28
     87a:	31 a7       	std	Z+41, r19	; 0x29
     87c:	12 a6       	std	Z+42, r1	; 0x2a
     87e:	85 ef       	ldi	r24, 0xF5	; 245
     880:	97 e2       	ldi	r25, 0x27	; 39
     882:	84 a7       	std	Z+44, r24	; 0x2c
     884:	95 a7       	std	Z+45, r25	; 0x2d
     886:	16 a6       	std	Z+46, r1	; 0x2e
     888:	80 a1       	ldd	r24, Z+32	; 0x20
     88a:	80 68       	ori	r24, 0x80	; 128
     88c:	80 a3       	std	Z+32, r24	; 0x20
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <tiny_dma_set_mode_2>:
     894:	cf 93       	push	r28
     896:	f8 94       	cli
     898:	c2 e0       	ldi	r28, 0x02	; 2
     89a:	c0 93 02 20 	sts	0x2002, r28	; 0x802002 <global_mode>
     89e:	0d df       	rcall	.-486    	; 0x6ba <tiny_dma_flush>
     8a0:	e0 e0       	ldi	r30, 0x00	; 0
     8a2:	f1 e0       	ldi	r31, 0x01	; 1
     8a4:	16 aa       	std	Z+54, r1	; 0x36
     8a6:	94 e2       	ldi	r25, 0x24	; 36
     8a8:	90 ab       	std	Z+48, r25	; 0x30
     8aa:	11 aa       	std	Z+49, r1	; 0x31
     8ac:	39 e5       	ldi	r19, 0x59	; 89
     8ae:	32 ab       	std	Z+50, r19	; 0x32
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	83 ab       	std	Z+51, r24	; 0x33
     8b4:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     8b8:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     8bc:	44 ab       	std	Z+52, r20	; 0x34
     8be:	55 ab       	std	Z+53, r21	; 0x35
     8c0:	4e e6       	ldi	r20, 0x6E	; 110
     8c2:	52 e2       	ldi	r21, 0x22	; 34
     8c4:	40 af       	std	Z+56, r20	; 0x38
     8c6:	51 af       	std	Z+57, r21	; 0x39
     8c8:	12 ae       	std	Z+58, r1	; 0x3a
     8ca:	29 e3       	ldi	r18, 0x39	; 57
     8cc:	24 af       	std	Z+60, r18	; 0x3c
     8ce:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     8d2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     8d6:	20 a9       	ldd	r18, Z+48	; 0x30
     8d8:	20 68       	ori	r18, 0x80	; 128
     8da:	20 ab       	std	Z+48, r18	; 0x30
     8dc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     8e0:	a0 e4       	ldi	r26, 0x40	; 64
     8e2:	b1 e0       	ldi	r27, 0x01	; 1
     8e4:	9c 93       	st	X, r25
     8e6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8ea:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     8ee:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     8f2:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <auxDacBufLen>
     8f6:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     8fa:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     8fe:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     902:	2e e7       	ldi	r18, 0x7E	; 126
     904:	34 e2       	ldi	r19, 0x24	; 36
     906:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     90a:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     90e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     912:	2b e3       	ldi	r18, 0x3B	; 59
     914:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     918:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     91c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     920:	2c 91       	ld	r18, X
     922:	20 68       	ori	r18, 0x80	; 128
     924:	2c 93       	st	X, r18
     926:	54 e0       	ldi	r21, 0x04	; 4
     928:	50 8b       	std	Z+16, r21	; 0x10
     92a:	81 8b       	std	Z+17, r24	; 0x11
     92c:	41 e9       	ldi	r20, 0x91	; 145
     92e:	42 8b       	std	Z+18, r20	; 0x12
     930:	20 e1       	ldi	r18, 0x10	; 16
     932:	23 8b       	std	Z+19, r18	; 0x13
     934:	27 e7       	ldi	r18, 0x77	; 119
     936:	31 e0       	ldi	r19, 0x01	; 1
     938:	24 8b       	std	Z+20, r18	; 0x14
     93a:	35 8b       	std	Z+21, r19	; 0x15
     93c:	90 8f       	std	Z+24, r25	; 0x18
     93e:	c1 8f       	std	Z+25, r28	; 0x19
     940:	12 8e       	std	Z+26, r1	; 0x1a
     942:	6e e7       	ldi	r22, 0x7E	; 126
     944:	76 e2       	ldi	r23, 0x26	; 38
     946:	64 8f       	std	Z+28, r22	; 0x1c
     948:	75 8f       	std	Z+29, r23	; 0x1d
     94a:	16 8e       	std	Z+30, r1	; 0x1e
     94c:	90 89       	ldd	r25, Z+16	; 0x10
     94e:	90 68       	ori	r25, 0x80	; 128
     950:	90 8b       	std	Z+16, r25	; 0x10
     952:	50 a3       	std	Z+32, r21	; 0x20
     954:	81 a3       	std	Z+33, r24	; 0x21
     956:	42 a3       	std	Z+34, r20	; 0x22
     958:	82 e1       	ldi	r24, 0x12	; 18
     95a:	83 a3       	std	Z+35, r24	; 0x23
     95c:	24 a3       	std	Z+36, r18	; 0x24
     95e:	35 a3       	std	Z+37, r19	; 0x25
     960:	84 e3       	ldi	r24, 0x34	; 52
     962:	80 a7       	std	Z+40, r24	; 0x28
     964:	c1 a7       	std	Z+41, r28	; 0x29
     966:	12 a6       	std	Z+42, r1	; 0x2a
     968:	85 ef       	ldi	r24, 0xF5	; 245
     96a:	97 e2       	ldi	r25, 0x27	; 39
     96c:	84 a7       	std	Z+44, r24	; 0x2c
     96e:	95 a7       	std	Z+45, r25	; 0x2d
     970:	16 a6       	std	Z+46, r1	; 0x2e
     972:	80 a1       	ldd	r24, Z+32	; 0x20
     974:	80 68       	ori	r24, 0x80	; 128
     976:	80 a3       	std	Z+32, r24	; 0x20
     978:	78 94       	sei
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <tiny_dma_set_mode_3>:
     97e:	cf 93       	push	r28
     980:	c3 e0       	ldi	r28, 0x03	; 3
     982:	c0 93 02 20 	sts	0x2002, r28	; 0x802002 <global_mode>
     986:	99 de       	rcall	.-718    	; 0x6ba <tiny_dma_flush>
     988:	e0 e0       	ldi	r30, 0x00	; 0
     98a:	f1 e0       	ldi	r31, 0x01	; 1
     98c:	10 a2       	std	Z+32, r1	; 0x20
     98e:	50 e4       	ldi	r21, 0x40	; 64
     990:	50 a3       	std	Z+32, r21	; 0x20
     992:	44 e0       	ldi	r20, 0x04	; 4
     994:	40 a3       	std	Z+32, r20	; 0x20
     996:	11 a2       	std	Z+33, r1	; 0x21
     998:	12 a2       	std	Z+34, r1	; 0x22
     99a:	3b e4       	ldi	r19, 0x4B	; 75
     99c:	33 a3       	std	Z+35, r19	; 0x23
     99e:	14 a2       	std	Z+36, r1	; 0x24
     9a0:	15 a2       	std	Z+37, r1	; 0x25
     9a2:	16 a2       	std	Z+38, r1	; 0x26
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	90 e2       	ldi	r25, 0x20	; 32
     9a8:	80 a7       	std	Z+40, r24	; 0x28
     9aa:	91 a7       	std	Z+41, r25	; 0x29
     9ac:	12 a6       	std	Z+42, r1	; 0x2a
     9ae:	20 ea       	ldi	r18, 0xA0	; 160
     9b0:	24 a7       	std	Z+44, r18	; 0x2c
     9b2:	98 e0       	ldi	r25, 0x08	; 8
     9b4:	95 a7       	std	Z+45, r25	; 0x2d
     9b6:	16 a6       	std	Z+46, r1	; 0x2e
     9b8:	80 a1       	ldd	r24, Z+32	; 0x20
     9ba:	80 6a       	ori	r24, 0xA0	; 160
     9bc:	80 a3       	std	Z+32, r24	; 0x20
     9be:	85 e5       	ldi	r24, 0x55	; 85
     9c0:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     9c4:	16 aa       	std	Z+54, r1	; 0x36
     9c6:	74 e2       	ldi	r23, 0x24	; 36
     9c8:	70 ab       	std	Z+48, r23	; 0x30
     9ca:	11 aa       	std	Z+49, r1	; 0x31
     9cc:	69 e5       	ldi	r22, 0x59	; 89
     9ce:	62 ab       	std	Z+50, r22	; 0x32
     9d0:	c3 ab       	std	Z+51, r28	; 0x33
     9d2:	a0 91 06 20 	lds	r26, 0x2006	; 0x802006 <dacBuf_len>
     9d6:	b0 91 07 20 	lds	r27, 0x2007	; 0x802007 <dacBuf_len+0x1>
     9da:	a4 ab       	std	Z+52, r26	; 0x34
     9dc:	b5 ab       	std	Z+53, r27	; 0x35
     9de:	ae e6       	ldi	r26, 0x6E	; 110
     9e0:	b2 e2       	ldi	r27, 0x22	; 34
     9e2:	a0 af       	std	Z+56, r26	; 0x38
     9e4:	b1 af       	std	Z+57, r27	; 0x39
     9e6:	12 ae       	std	Z+58, r1	; 0x3a
     9e8:	89 e3       	ldi	r24, 0x39	; 57
     9ea:	84 af       	std	Z+60, r24	; 0x3c
     9ec:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     9f0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     9f4:	80 a9       	ldd	r24, Z+48	; 0x30
     9f6:	80 68       	ori	r24, 0x80	; 128
     9f8:	80 ab       	std	Z+48, r24	; 0x30
     9fa:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     9fe:	a0 e4       	ldi	r26, 0x40	; 64
     a00:	b1 e0       	ldi	r27, 0x01	; 1
     a02:	7c 93       	st	X, r23
     a04:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     a08:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     a12:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <auxDacBufLen>
     a16:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     a1a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a1e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     a22:	6e e7       	ldi	r22, 0x7E	; 126
     a24:	74 e2       	ldi	r23, 0x24	; 36
     a26:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a2a:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a2e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     a32:	8b e3       	ldi	r24, 0x3B	; 59
     a34:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a38:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a3c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     a40:	8c 91       	ld	r24, X
     a42:	80 68       	ori	r24, 0x80	; 128
     a44:	8c 93       	st	X, r24
     a46:	10 8a       	std	Z+16, r1	; 0x10
     a48:	50 8b       	std	Z+16, r21	; 0x10
     a4a:	40 8b       	std	Z+16, r20	; 0x10
     a4c:	c1 8b       	std	Z+17, r28	; 0x11
     a4e:	81 e9       	ldi	r24, 0x91	; 145
     a50:	82 8b       	std	Z+18, r24	; 0x12
     a52:	33 8b       	std	Z+19, r19	; 0x13
     a54:	47 e7       	ldi	r20, 0x77	; 119
     a56:	51 e0       	ldi	r21, 0x01	; 1
     a58:	44 8b       	std	Z+20, r20	; 0x14
     a5a:	55 8b       	std	Z+21, r21	; 0x15
     a5c:	20 8f       	std	Z+24, r18	; 0x18
     a5e:	91 8f       	std	Z+25, r25	; 0x19
     a60:	12 8e       	std	Z+26, r1	; 0x1a
     a62:	8e e7       	ldi	r24, 0x7E	; 126
     a64:	96 e2       	ldi	r25, 0x26	; 38
     a66:	84 8f       	std	Z+28, r24	; 0x1c
     a68:	95 8f       	std	Z+29, r25	; 0x1d
     a6a:	16 8e       	std	Z+30, r1	; 0x1e
     a6c:	80 89       	ldd	r24, Z+16	; 0x10
     a6e:	80 68       	ori	r24, 0x80	; 128
     a70:	80 8b       	std	Z+16, r24	; 0x10
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <tiny_dma_set_mode_4>:
     a76:	cf 93       	push	r28
     a78:	c4 e0       	ldi	r28, 0x04	; 4
     a7a:	c0 93 02 20 	sts	0x2002, r28	; 0x802002 <global_mode>
     a7e:	1d de       	rcall	.-966    	; 0x6ba <tiny_dma_flush>
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f1 e0       	ldi	r31, 0x01	; 1
     a84:	10 a2       	std	Z+32, r1	; 0x20
     a86:	80 e4       	ldi	r24, 0x40	; 64
     a88:	80 a3       	std	Z+32, r24	; 0x20
     a8a:	c0 a3       	std	Z+32, r28	; 0x20
     a8c:	11 a2       	std	Z+33, r1	; 0x21
     a8e:	12 a2       	std	Z+34, r1	; 0x22
     a90:	4b e4       	ldi	r20, 0x4B	; 75
     a92:	43 a3       	std	Z+35, r20	; 0x23
     a94:	14 a2       	std	Z+36, r1	; 0x24
     a96:	15 a2       	std	Z+37, r1	; 0x25
     a98:	16 a2       	std	Z+38, r1	; 0x26
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	90 e2       	ldi	r25, 0x20	; 32
     a9e:	80 a7       	std	Z+40, r24	; 0x28
     aa0:	91 a7       	std	Z+41, r25	; 0x29
     aa2:	12 a6       	std	Z+42, r1	; 0x2a
     aa4:	60 ea       	ldi	r22, 0xA0	; 160
     aa6:	64 a7       	std	Z+44, r22	; 0x2c
     aa8:	88 e0       	ldi	r24, 0x08	; 8
     aaa:	85 a7       	std	Z+45, r24	; 0x2d
     aac:	16 a6       	std	Z+46, r1	; 0x2e
     aae:	90 a1       	ldd	r25, Z+32	; 0x20
     ab0:	90 6a       	ori	r25, 0xA0	; 160
     ab2:	90 a3       	std	Z+32, r25	; 0x20
     ab4:	95 e5       	ldi	r25, 0x55	; 85
     ab6:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     aba:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     abe:	a0 e4       	ldi	r26, 0x40	; 64
     ac0:	b1 e0       	ldi	r27, 0x01	; 1
     ac2:	94 e2       	ldi	r25, 0x24	; 36
     ac4:	9c 93       	st	X, r25
     ac6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     aca:	99 e5       	ldi	r25, 0x59	; 89
     acc:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ad6:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <auxDacBufLen>
     ada:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     ade:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ae2:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     ae6:	2e e7       	ldi	r18, 0x7E	; 126
     ae8:	34 e2       	ldi	r19, 0x24	; 36
     aea:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     aee:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     af2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     af6:	9b e3       	ldi	r25, 0x3B	; 59
     af8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     afc:	93 e0       	ldi	r25, 0x03	; 3
     afe:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b02:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b06:	2c 91       	ld	r18, X
     b08:	20 68       	ori	r18, 0x80	; 128
     b0a:	2c 93       	st	X, r18
     b0c:	c0 8b       	std	Z+16, r28	; 0x10
     b0e:	91 8b       	std	Z+17, r25	; 0x11
     b10:	31 e9       	ldi	r19, 0x91	; 145
     b12:	32 8b       	std	Z+18, r19	; 0x12
     b14:	43 8b       	std	Z+19, r20	; 0x13
     b16:	47 e7       	ldi	r20, 0x77	; 119
     b18:	51 e0       	ldi	r21, 0x01	; 1
     b1a:	44 8b       	std	Z+20, r20	; 0x14
     b1c:	55 8b       	std	Z+21, r21	; 0x15
     b1e:	60 8f       	std	Z+24, r22	; 0x18
     b20:	81 8f       	std	Z+25, r24	; 0x19
     b22:	12 8e       	std	Z+26, r1	; 0x1a
     b24:	6e e7       	ldi	r22, 0x7E	; 126
     b26:	76 e2       	ldi	r23, 0x26	; 38
     b28:	64 8f       	std	Z+28, r22	; 0x1c
     b2a:	75 8f       	std	Z+29, r23	; 0x1d
     b2c:	16 8e       	std	Z+30, r1	; 0x1e
     b2e:	20 89       	ldd	r18, Z+16	; 0x10
     b30:	20 68       	ori	r18, 0x80	; 128
     b32:	20 8b       	std	Z+16, r18	; 0x10
     b34:	c0 ab       	std	Z+48, r28	; 0x30
     b36:	91 ab       	std	Z+49, r25	; 0x31
     b38:	32 ab       	std	Z+50, r19	; 0x32
     b3a:	9a e4       	ldi	r25, 0x4A	; 74
     b3c:	93 ab       	std	Z+51, r25	; 0x33
     b3e:	44 ab       	std	Z+52, r20	; 0x34
     b40:	55 ab       	std	Z+53, r21	; 0x35
     b42:	93 ec       	ldi	r25, 0xC3	; 195
     b44:	90 af       	std	Z+56, r25	; 0x38
     b46:	81 af       	std	Z+57, r24	; 0x39
     b48:	12 ae       	std	Z+58, r1	; 0x3a
     b4a:	85 ef       	ldi	r24, 0xF5	; 245
     b4c:	97 e2       	ldi	r25, 0x27	; 39
     b4e:	84 af       	std	Z+60, r24	; 0x3c
     b50:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b54:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b58:	80 a9       	ldd	r24, Z+48	; 0x30
     b5a:	80 68       	ori	r24, 0x80	; 128
     b5c:	80 ab       	std	Z+48, r24	; 0x30
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <tiny_dma_set_mode_5>:
     b62:	85 e0       	ldi	r24, 0x05	; 5
     b64:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     b68:	a8 dd       	rcall	.-1200   	; 0x6ba <tiny_dma_flush>
     b6a:	e0 e0       	ldi	r30, 0x00	; 0
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	16 aa       	std	Z+54, r1	; 0x36
     b70:	34 e2       	ldi	r19, 0x24	; 36
     b72:	30 ab       	std	Z+48, r19	; 0x30
     b74:	11 aa       	std	Z+49, r1	; 0x31
     b76:	29 e5       	ldi	r18, 0x59	; 89
     b78:	22 ab       	std	Z+50, r18	; 0x32
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	83 ab       	std	Z+51, r24	; 0x33
     b7e:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     b82:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     b86:	44 ab       	std	Z+52, r20	; 0x34
     b88:	55 ab       	std	Z+53, r21	; 0x35
     b8a:	4e e6       	ldi	r20, 0x6E	; 110
     b8c:	52 e2       	ldi	r21, 0x22	; 34
     b8e:	40 af       	std	Z+56, r20	; 0x38
     b90:	51 af       	std	Z+57, r21	; 0x39
     b92:	12 ae       	std	Z+58, r1	; 0x3a
     b94:	99 e3       	ldi	r25, 0x39	; 57
     b96:	94 af       	std	Z+60, r25	; 0x3c
     b98:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b9c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ba0:	90 a9       	ldd	r25, Z+48	; 0x30
     ba2:	90 68       	ori	r25, 0x80	; 128
     ba4:	90 ab       	std	Z+48, r25	; 0x30
     ba6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     baa:	e0 e4       	ldi	r30, 0x40	; 64
     bac:	f1 e0       	ldi	r31, 0x01	; 1
     bae:	30 83       	st	Z, r19
     bb0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bb4:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     bb8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bbc:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <dacBuf_len>
     bc0:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <dacBuf_len+0x1>
     bc4:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bc8:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     bcc:	2e e7       	ldi	r18, 0x7E	; 126
     bce:	34 e2       	ldi	r19, 0x24	; 36
     bd0:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     bd4:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     bd8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     bdc:	9b e3       	ldi	r25, 0x3B	; 59
     bde:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     be2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     be6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     bea:	80 81       	ld	r24, Z
     bec:	80 68       	ori	r24, 0x80	; 128
     bee:	80 83       	st	Z, r24
     bf0:	08 95       	ret

00000bf2 <tiny_dma_set_mode_6>:
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     bf8:	60 dd       	rcall	.-1344   	; 0x6ba <tiny_dma_flush>
     bfa:	e0 e0       	ldi	r30, 0x00	; 0
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	16 aa       	std	Z+54, r1	; 0x36
     c00:	94 e2       	ldi	r25, 0x24	; 36
     c02:	90 ab       	std	Z+48, r25	; 0x30
     c04:	11 aa       	std	Z+49, r1	; 0x31
     c06:	39 e5       	ldi	r19, 0x59	; 89
     c08:	32 ab       	std	Z+50, r19	; 0x32
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	83 ab       	std	Z+51, r24	; 0x33
     c0e:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     c12:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     c16:	44 ab       	std	Z+52, r20	; 0x34
     c18:	55 ab       	std	Z+53, r21	; 0x35
     c1a:	4e e6       	ldi	r20, 0x6E	; 110
     c1c:	52 e2       	ldi	r21, 0x22	; 34
     c1e:	40 af       	std	Z+56, r20	; 0x38
     c20:	51 af       	std	Z+57, r21	; 0x39
     c22:	12 ae       	std	Z+58, r1	; 0x3a
     c24:	29 e3       	ldi	r18, 0x39	; 57
     c26:	24 af       	std	Z+60, r18	; 0x3c
     c28:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c2c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c30:	20 a9       	ldd	r18, Z+48	; 0x30
     c32:	20 68       	ori	r18, 0x80	; 128
     c34:	20 ab       	std	Z+48, r18	; 0x30
     c36:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c3a:	a0 e4       	ldi	r26, 0x40	; 64
     c3c:	b1 e0       	ldi	r27, 0x01	; 1
     c3e:	9c 93       	st	X, r25
     c40:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c44:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c48:	32 e0       	ldi	r19, 0x02	; 2
     c4a:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c4e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <auxDacBufLen>
     c52:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     c56:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c5a:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c5e:	4e e7       	ldi	r20, 0x7E	; 126
     c60:	54 e2       	ldi	r21, 0x24	; 36
     c62:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c66:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c6a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c6e:	2b e3       	ldi	r18, 0x3B	; 59
     c70:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c74:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c78:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c7c:	2c 91       	ld	r18, X
     c7e:	20 68       	ori	r18, 0x80	; 128
     c80:	2c 93       	st	X, r18
     c82:	10 8a       	std	Z+16, r1	; 0x10
     c84:	20 e4       	ldi	r18, 0x40	; 64
     c86:	20 8b       	std	Z+16, r18	; 0x10
     c88:	24 e0       	ldi	r18, 0x04	; 4
     c8a:	20 8b       	std	Z+16, r18	; 0x10
     c8c:	81 8b       	std	Z+17, r24	; 0x11
     c8e:	81 e9       	ldi	r24, 0x91	; 145
     c90:	82 8b       	std	Z+18, r24	; 0x12
     c92:	80 e1       	ldi	r24, 0x10	; 16
     c94:	83 8b       	std	Z+19, r24	; 0x13
     c96:	4e ee       	ldi	r20, 0xEE	; 238
     c98:	52 e0       	ldi	r21, 0x02	; 2
     c9a:	44 8b       	std	Z+20, r20	; 0x14
     c9c:	55 8b       	std	Z+21, r21	; 0x15
     c9e:	90 8f       	std	Z+24, r25	; 0x18
     ca0:	31 8f       	std	Z+25, r19	; 0x19
     ca2:	12 8e       	std	Z+26, r1	; 0x1a
     ca4:	8e e7       	ldi	r24, 0x7E	; 126
     ca6:	96 e2       	ldi	r25, 0x26	; 38
     ca8:	84 8f       	std	Z+28, r24	; 0x1c
     caa:	95 8f       	std	Z+29, r25	; 0x1d
     cac:	16 8e       	std	Z+30, r1	; 0x1e
     cae:	80 89       	ldd	r24, Z+16	; 0x10
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	80 8b       	std	Z+16, r24	; 0x10
     cb4:	08 95       	ret

00000cb6 <tiny_dma_set_mode_7>:
	return;
}

void tiny_dma_set_mode_7(void){
		
		global_mode = 7;
     cb6:	87 e0       	ldi	r24, 0x07	; 7
     cb8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
		
		tiny_dma_flush();
     cbc:	fe dc       	rcall	.-1540   	; 0x6ba <tiny_dma_flush>
		
		DMA.CH2.REPCNT = 0; //Repeat forever!
     cbe:	e0 e0       	ldi	r30, 0x00	; 0
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	16 aa       	std	Z+54, r1	; 0x36
		DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     cc4:	94 e2       	ldi	r25, 0x24	; 36
     cc6:	90 ab       	std	Z+48, r25	; 0x30
		DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     cc8:	11 aa       	std	Z+49, r1	; 0x31
		DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     cca:	39 e5       	ldi	r19, 0x59	; 89
     ccc:	32 ab       	std	Z+50, r19	; 0x32
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     cce:	83 e0       	ldi	r24, 0x03	; 3
     cd0:	83 ab       	std	Z+51, r24	; 0x33
		DMA.CH2.TRFCNT = dacBuf_len;
     cd2:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     cd6:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     cda:	44 ab       	std	Z+52, r20	; 0x34
     cdc:	55 ab       	std	Z+53, r21	; 0x35

		DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     cde:	4e e6       	ldi	r20, 0x6E	; 110
     ce0:	52 e2       	ldi	r21, 0x22	; 34
     ce2:	40 af       	std	Z+56, r20	; 0x38
		DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     ce4:	51 af       	std	Z+57, r21	; 0x39
		DMA.CH2.SRCADDR2 = 0x00;
     ce6:	12 ae       	std	Z+58, r1	; 0x3a
			
		DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     ce8:	29 e3       	ldi	r18, 0x39	; 57
     cea:	24 af       	std	Z+60, r18	; 0x3c
		DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     cec:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
		DMA.CH2.DESTADDR2 = 0x00;
     cf0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
			
		//Must enable last for REPCNT won't work!
		DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     cf4:	20 a9       	ldd	r18, Z+48	; 0x30
     cf6:	20 68       	ori	r18, 0x80	; 128
     cf8:	20 ab       	std	Z+48, r18	; 0x30
		
		DMA.CH3.REPCNT = 0; //Repeat forever!
     cfa:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
		DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     cfe:	a0 e4       	ldi	r26, 0x40	; 64
     d00:	b1 e0       	ldi	r27, 0x01	; 1
     d02:	9c 93       	st	X, r25
		DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     d04:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
		DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     d08:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     d0c:	32 e0       	ldi	r19, 0x02	; 2
     d0e:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
		DMA.CH3.TRFCNT = auxDacBufLen;
     d12:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <auxDacBufLen>
     d16:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     d1a:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d1e:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

		DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     d22:	4e e7       	ldi	r20, 0x7E	; 126
     d24:	54 e2       	ldi	r21, 0x24	; 36
     d26:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
		DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     d2a:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
		DMA.CH3.SRCADDR2 = 0x00;
     d2e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
		DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     d32:	2b e3       	ldi	r18, 0x3B	; 59
     d34:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
		DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     d38:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
		DMA.CH3.DESTADDR2 = 0x00;
     d3c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
		//Must enable last for REPCNT won't work!
		DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     d40:	2c 91       	ld	r18, X
     d42:	20 68       	ori	r18, 0x80	; 128
     d44:	2c 93       	st	X, r18
		
		DMA.CH0.CTRLA = 0x00;
     d46:	10 8a       	std	Z+16, r1	; 0x10
		DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     d48:	20 e4       	ldi	r18, 0x40	; 64
     d4a:	20 8b       	std	Z+16, r18	; 0x10
				
		DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     d4c:	25 e0       	ldi	r18, 0x05	; 5
     d4e:	20 8b       	std	Z+16, r18	; 0x10
		DMA.CH0.CTRLB = 0x03; //No interrupt!
     d50:	81 8b       	std	Z+17, r24	; 0x11
		DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     d52:	81 e9       	ldi	r24, 0x91	; 145
     d54:	82 8b       	std	Z+18, r24	; 0x12
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     d56:	80 e1       	ldi	r24, 0x10	; 16
     d58:	83 8b       	std	Z+19, r24	; 0x13
		DMA.CH0.TRFCNT = PACKET_SIZE;
     d5a:	4e ee       	ldi	r20, 0xEE	; 238
     d5c:	52 e0       	ldi	r21, 0x02	; 2
     d5e:	44 8b       	std	Z+20, r20	; 0x14
     d60:	55 8b       	std	Z+21, r21	; 0x15
				
		DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     d62:	90 8f       	std	Z+24, r25	; 0x18
		DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     d64:	31 8f       	std	Z+25, r19	; 0x19
		DMA.CH0.SRCADDR2 = 0x00;
     d66:	12 8e       	std	Z+26, r1	; 0x1a
				
		DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     d68:	8e e7       	ldi	r24, 0x7E	; 126
     d6a:	96 e2       	ldi	r25, 0x26	; 38
     d6c:	84 8f       	std	Z+28, r24	; 0x1c
		DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     d6e:	95 8f       	std	Z+29, r25	; 0x1d
		DMA.CH0.DESTADDR2 = 0x00;
     d70:	16 8e       	std	Z+30, r1	; 0x1e
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     d72:	80 89       	ldd	r24, Z+16	; 0x10
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	80 8b       	std	Z+16, r24	; 0x10
     d78:	08 95       	ret

00000d7a <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     d7a:	e0 e7       	ldi	r30, 0x70	; 112
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	83 81       	ldd	r24, Z+3	; 0x03
     d80:	8c 7f       	andi	r24, 0xFC	; 252
     d82:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     d84:	84 81       	ldd	r24, Z+4	; 0x04
     d86:	8c 7f       	andi	r24, 0xFC	; 252
     d88:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     d8a:	80 81       	ld	r24, Z
     d8c:	8d 7f       	andi	r24, 0xFD	; 253
     d8e:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     d90:	e0 e8       	ldi	r30, 0x80	; 128
     d92:	f1 e0       	ldi	r31, 0x01	; 1
     d94:	80 ec       	ldi	r24, 0xC0	; 192
     d96:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     d98:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
     d9a:	88 ec       	ldi	r24, 0xC8	; 200
     d9c:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     d9e:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     da0:	a0 e0       	ldi	r26, 0x00	; 0
     da2:	b8 e0       	ldi	r27, 0x08	; 8
     da4:	34 e0       	ldi	r19, 0x04	; 4
     da6:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     da8:	23 e0       	ldi	r18, 0x03	; 3
     daa:	11 96       	adiw	r26, 0x01	; 1
     dac:	2c 93       	st	X, r18
     dae:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	1c 92       	st	X, r1
     db4:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
     db6:	85 ed       	ldi	r24, 0xD5	; 213
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	96 96       	adiw	r26, 0x26	; 38
     dbc:	8d 93       	st	X+, r24
     dbe:	9c 93       	st	X, r25
     dc0:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
     dc2:	16 96       	adiw	r26, 0x06	; 6
     dc4:	1c 92       	st	X, r1
     dc6:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     dc8:	e0 e4       	ldi	r30, 0x40	; 64
     dca:	f8 e0       	ldi	r31, 0x08	; 8
     dcc:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     dce:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
     dd0:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
     dd2:	86 a3       	std	Z+38, r24	; 0x26
     dd4:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
     dd6:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
     dd8:	e0 e6       	ldi	r30, 0x60	; 96
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	80 81       	ld	r24, Z
     dde:	80 61       	ori	r24, 0x10	; 16
     de0:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
     de2:	e0 e4       	ldi	r30, 0x40	; 64
     de4:	f9 e0       	ldi	r31, 0x09	; 9
     de6:	83 e1       	ldi	r24, 0x13	; 19
     de8:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
     dea:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
     df0:	a6 a3       	std	Z+38, r26	; 0x26
     df2:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
     df4:	10 a6       	std	Z+40, r1	; 0x28
     df6:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	80 83       	st	Z, r24
     dfc:	08 95       	ret

00000dfe <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	2f 93       	push	r18
     e0a:	3f 93       	push	r19
     e0c:	4f 93       	push	r20
     e0e:	5f 93       	push	r21
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	ef 93       	push	r30
     e16:	ff 93       	push	r31
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	1f 92       	push	r1
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
     e28:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <global_mode>
     e2c:	87 30       	cpi	r24, 0x07	; 7
     e2e:	31 f4       	brne	.+12     	; 0xe3c <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
     e30:	e0 e0       	ldi	r30, 0x00	; 0
     e32:	f2 e0       	ldi	r31, 0x02	; 2
     e34:	84 a5       	ldd	r24, Z+44	; 0x2c
     e36:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
     e38:	95 a5       	ldd	r25, Z+45	; 0x2d
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
     e3c:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
     e40:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <PSU_target>
     e44:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
     e46:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e4a:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	0c f4       	brge	.+2      	; 0xe56 <__vector_83+0x58>
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	99 23       	and	r25, r25
     e58:	c9 f0       	breq	.+50     	; 0xe8c <__vector_83+0x8e>
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	2a 3f       	cpi	r18, 0xFA	; 250
     e5e:	37 40       	sbci	r19, 0x07	; 7
     e60:	08 f0       	brcs	.+2      	; 0xe64 <__vector_83+0x66>
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	99 23       	and	r25, r25
     e66:	91 f0       	breq	.+36     	; 0xe8c <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
     e68:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e6c:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e70:	89 30       	cpi	r24, 0x09	; 9
     e72:	1c f4       	brge	.+6      	; 0xe7a <__vector_83+0x7c>
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <__vector_83+0x80>
     e7a:	86 e0       	ldi	r24, 0x06	; 6
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	82 0f       	add	r24, r18
     e80:	93 1f       	adc	r25, r19
     e82:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     e86:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
     e8a:	23 c0       	rjmp	.+70     	; 0xed2 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
     e8c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e90:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	8f 3f       	cpi	r24, 0xFF	; 255
     e98:	0c f0       	brlt	.+2      	; 0xe9c <__vector_83+0x9e>
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	99 23       	and	r25, r25
     e9e:	c9 f0       	breq	.+50     	; 0xed2 <__vector_83+0xd4>
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	27 30       	cpi	r18, 0x07	; 7
     ea4:	31 05       	cpc	r19, r1
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <__vector_83+0xac>
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	99 23       	and	r25, r25
     eac:	91 f0       	breq	.+36     	; 0xed2 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
     eae:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     eb2:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     eb6:	88 3f       	cpi	r24, 0xF8	; 248
     eb8:	1c f0       	brlt	.+6      	; 0xec0 <__vector_83+0xc2>
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <__vector_83+0xc6>
     ec0:	86 e0       	ldi	r24, 0x06	; 6
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a9 01       	movw	r20, r18
     ec6:	48 1b       	sub	r20, r24
     ec8:	59 0b       	sbc	r21, r25
     eca:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     ece:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
     ed2:	0f 90       	pop	r0
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	9f 91       	pop	r25
     ede:	8f 91       	pop	r24
     ee0:	5f 91       	pop	r21
     ee2:	4f 91       	pop	r20
     ee4:	3f 91       	pop	r19
     ee6:	2f 91       	pop	r18
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
     ef2:	e0 e7       	ldi	r30, 0x70	; 112
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	83 81       	ldd	r24, Z+3	; 0x03
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
     efc:	e0 e4       	ldi	r30, 0x40	; 64
     efe:	f6 e0       	ldi	r31, 0x06	; 6
     f00:	80 81       	ld	r24, Z
     f02:	8a 6a       	ori	r24, 0xAA	; 170
     f04:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     f0a:	88 e5       	ldi	r24, 0x58	; 88
     f0c:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
     f0e:	e0 ea       	ldi	r30, 0xA0	; 160
     f10:	f8 e0       	ldi	r31, 0x08	; 8
     f12:	84 ec       	ldi	r24, 0xC4	; 196
     f14:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
     f1a:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     f1c:	88 e1       	ldi	r24, 0x18	; 24
     f1e:	84 83       	std	Z+4, r24	; 0x04
     f20:	08 95       	ret

00000f22 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
     f22:	e0 e7       	ldi	r30, 0x70	; 112
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	83 81       	ldd	r24, Z+3	; 0x03
     f28:	87 7f       	andi	r24, 0xF7	; 247
     f2a:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
     f2c:	e0 ec       	ldi	r30, 0xC0	; 192
     f2e:	f8 e0       	ldi	r31, 0x08	; 8
     f30:	80 e4       	ldi	r24, 0x40	; 64
     f32:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     f34:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     f36:	88 e5       	ldi	r24, 0x58	; 88
     f38:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
     f3c:	08 95       	ret

00000f3e <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
	asm("nop");
     f48:	00 00       	nop
}
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f54:	9f b7       	in	r25, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	e8 2f       	mov	r30, r24
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	e0 59       	subi	r30, 0x90	; 144
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	60 95       	com	r22
     f62:	80 81       	ld	r24, Z
     f64:	68 23       	and	r22, r24
     f66:	60 83       	st	Z, r22
     f68:	9f bf       	out	0x3f, r25	; 63
     f6a:	08 95       	ret

00000f6c <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     f6c:	86 30       	cpi	r24, 0x06	; 6
     f6e:	11 f0       	breq	.+4      	; 0xf74 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     f74:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f76:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     f7a:	81 fd       	sbrc	r24, 1
     f7c:	26 c0       	rjmp	.+76     	; 0xfca <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f7e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     f80:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f82:	e0 e5       	ldi	r30, 0x50	; 80
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f8c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f8e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f90:	81 ff       	sbrs	r24, 1
     f92:	fd cf       	rjmp	.-6      	; 0xf8e <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f94:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     f96:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     f98:	a0 e5       	ldi	r26, 0x50	; 80
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	16 96       	adiw	r26, 0x06	; 6
     f9e:	8c 91       	ld	r24, X
     fa0:	16 97       	sbiw	r26, 0x06	; 6
     fa2:	89 7f       	andi	r24, 0xF9	; 249
     fa4:	16 96       	adiw	r26, 0x06	; 6
     fa6:	8c 93       	st	X, r24
     fa8:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     faa:	e0 e6       	ldi	r30, 0x60	; 96
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 e8       	ldi	r24, 0x80	; 128
     fb0:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     fb2:	8b eb       	ldi	r24, 0xBB	; 187
     fb4:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     fb6:	16 96       	adiw	r26, 0x06	; 6
     fb8:	8c 91       	ld	r24, X
     fba:	16 97       	sbiw	r26, 0x06	; 6
     fbc:	84 60       	ori	r24, 0x04	; 4
     fbe:	16 96       	adiw	r26, 0x06	; 6
     fc0:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     fc2:	80 81       	ld	r24, Z
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fc8:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     fca:	63 60       	ori	r22, 0x03	; 3
     fcc:	84 e4       	ldi	r24, 0x44	; 68
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	1a d5       	rcall	.+2612   	; 0x1a06 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     fd2:	60 e4       	ldi	r22, 0x40	; 64
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	be cf       	rjmp	.-132    	; 0xf54 <sysclk_enable_module>
     fd8:	08 95       	ret

00000fda <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
     fda:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udi_vendor_alternate_setting>
     fde:	08 95       	ret

00000fe0 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
     fe0:	40 d1       	rcall	.+640    	; 0x1262 <udc_get_interface_desc>
     fe2:	fc 01       	movw	r30, r24
     fe4:	83 81       	ldd	r24, Z+3	; 0x03
     fe6:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
     fea:	81 11       	cpse	r24, r1
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
     fee:	93 ca       	rjmp	.-2778   	; 0x516 <main_vendor_enable>
     ff0:	08 95       	ret
			return false;
		}
	}
	return true;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
}
     ff4:	08 95       	ret

00000ff6 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
     ff6:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udi_vendor_alternate_setting>
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
     ffe:	a7 ca       	rjmp	.-2738   	; 0x54e <main_vendor_disable>
    1000:	08 95       	ret

00001002 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    1002:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq>
    1006:	88 23       	and	r24, r24
    1008:	4c f4       	brge	.+18     	; 0x101c <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    100a:	80 76       	andi	r24, 0x60	; 96
    100c:	80 34       	cpi	r24, 0x40	; 64
    100e:	a9 f4       	brne	.+42     	; 0x103a <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1010:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <udd_g_ctrlreq+0x1>
    1014:	81 11       	cpse	r24, r1
    1016:	13 c0       	rjmp	.+38     	; 0x103e <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    1018:	9f ca       	rjmp	.-2754   	; 0x558 <main_setup_in_received>
    101a:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    101c:	80 76       	andi	r24, 0x60	; 96
    101e:	80 34       	cpi	r24, 0x40	; 64
    1020:	81 f4       	brne	.+32     	; 0x1042 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1022:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <udd_g_ctrlreq+0x1>
    1026:	81 11       	cpse	r24, r1
    1028:	0e c0       	rjmp	.+28     	; 0x1046 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    102a:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    102e:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    1032:	89 2b       	or	r24, r25
    1034:	51 f0       	breq	.+20     	; 0x104a <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1036:	8e ca       	rjmp	.-2788   	; 0x554 <main_setup_out_received>
    1038:	08 95       	ret
		}
	}
	return false; // Not supported request
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	08 95       	ret
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	08 95       	ret
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	08 95       	ret
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	08 95       	ret
    104a:	80 e0       	ldi	r24, 0x00	; 0
}
    104c:	08 95       	ret

0000104e <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    1054:	8a 01       	movw	r16, r20
    1056:	ac 01       	movw	r20, r24
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	81 e8       	ldi	r24, 0x81	; 129
    105c:	0e 94 77 11 	call	0x22ee	; 0x22ee <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    106c:	8a 01       	movw	r16, r20
    106e:	ac 01       	movw	r20, r24
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	82 e8       	ldi	r24, 0x82	; 130
    1074:	0e 94 77 11 	call	0x22ee	; 0x22ee <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	08 95       	ret

0000107e <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    1084:	8a 01       	movw	r16, r20
    1086:	ac 01       	movw	r20, r24
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	83 e8       	ldi	r24, 0x83	; 131
    108c:	0e 94 77 11 	call	0x22ee	; 0x22ee <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1096:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    109a:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    109e:	01 90       	ld	r0, Z+
    10a0:	f0 81       	ld	r31, Z
    10a2:	e0 2d       	mov	r30, r0
    10a4:	22 81       	ldd	r18, Z+2	; 0x02
    10a6:	33 81       	ldd	r19, Z+3	; 0x03
    10a8:	2e 0f       	add	r18, r30
    10aa:	3f 1f       	adc	r19, r31
    10ac:	fc 01       	movw	r30, r24
    10ae:	40 81       	ld	r20, Z
    10b0:	e4 0f       	add	r30, r20
    10b2:	f1 1d       	adc	r31, r1
    10b4:	e2 17       	cp	r30, r18
    10b6:	f3 07       	cpc	r31, r19
    10b8:	b8 f4       	brcc	.+46     	; 0x10e8 <udc_next_desc_in_iface+0x52>
    10ba:	81 81       	ldd	r24, Z+1	; 0x01
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	b9 f0       	breq	.+46     	; 0x10ee <udc_next_desc_in_iface+0x58>
    10c0:	86 13       	cpse	r24, r22
    10c2:	09 c0       	rjmp	.+18     	; 0x10d6 <udc_next_desc_in_iface+0x40>
    10c4:	05 c0       	rjmp	.+10     	; 0x10d0 <udc_next_desc_in_iface+0x3a>
    10c6:	81 81       	ldd	r24, Z+1	; 0x01
    10c8:	84 30       	cpi	r24, 0x04	; 4
    10ca:	a1 f0       	breq	.+40     	; 0x10f4 <udc_next_desc_in_iface+0x5e>
    10cc:	86 13       	cpse	r24, r22
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <udc_next_desc_in_iface+0x40>
    10d0:	8e 2f       	mov	r24, r30
    10d2:	9f 2f       	mov	r25, r31
    10d4:	08 95       	ret
    10d6:	80 81       	ld	r24, Z
    10d8:	e8 0f       	add	r30, r24
    10da:	f1 1d       	adc	r31, r1
    10dc:	e2 17       	cp	r30, r18
    10de:	f3 07       	cpc	r31, r19
    10e0:	90 f3       	brcs	.-28     	; 0x10c6 <udc_next_desc_in_iface+0x30>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	08 95       	ret
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	08 95       	ret
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	08 95       	ret
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	08 95       	ret

000010fa <udc_valid_address>:
    10fa:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    10fe:	8f 77       	andi	r24, 0x7F	; 127
    1100:	0c 94 a5 10 	jmp	0x214a	; 0x214a <udd_set_address>
    1104:	08 95       	ret

00001106 <udc_update_iface_desc>:
    1106:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <udc_num_configuration>
    110a:	99 23       	and	r25, r25
    110c:	81 f1       	breq	.+96     	; 0x116e <udc_update_iface_desc+0x68>
    110e:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    1112:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    1116:	01 90       	ld	r0, Z+
    1118:	f0 81       	ld	r31, Z
    111a:	e0 2d       	mov	r30, r0
    111c:	94 81       	ldd	r25, Z+4	; 0x04
    111e:	89 17       	cp	r24, r25
    1120:	40 f5       	brcc	.+80     	; 0x1172 <udc_update_iface_desc+0x6c>
    1122:	e0 93 c7 20 	sts	0x20C7, r30	; 0x8020c7 <udc_ptr_iface>
    1126:	f0 93 c8 20 	sts	0x20C8, r31	; 0x8020c8 <udc_ptr_iface+0x1>
    112a:	22 81       	ldd	r18, Z+2	; 0x02
    112c:	33 81       	ldd	r19, Z+3	; 0x03
    112e:	2e 0f       	add	r18, r30
    1130:	3f 1f       	adc	r19, r31
    1132:	e2 17       	cp	r30, r18
    1134:	f3 07       	cpc	r31, r19
    1136:	f8 f4       	brcc	.+62     	; 0x1176 <udc_update_iface_desc+0x70>
    1138:	91 81       	ldd	r25, Z+1	; 0x01
    113a:	94 30       	cpi	r25, 0x04	; 4
    113c:	61 f4       	brne	.+24     	; 0x1156 <udc_update_iface_desc+0x50>
    113e:	92 81       	ldd	r25, Z+2	; 0x02
    1140:	98 13       	cpse	r25, r24
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <udc_update_iface_desc+0x50>
    1144:	93 81       	ldd	r25, Z+3	; 0x03
    1146:	96 13       	cpse	r25, r22
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <udc_update_iface_desc+0x50>
    114a:	e0 93 c7 20 	sts	0x20C7, r30	; 0x8020c7 <udc_ptr_iface>
    114e:	f0 93 c8 20 	sts	0x20C8, r31	; 0x8020c8 <udc_ptr_iface+0x1>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	08 95       	ret
    1156:	90 81       	ld	r25, Z
    1158:	e9 0f       	add	r30, r25
    115a:	f1 1d       	adc	r31, r1
    115c:	e2 17       	cp	r30, r18
    115e:	f3 07       	cpc	r31, r19
    1160:	58 f3       	brcs	.-42     	; 0x1138 <udc_update_iface_desc+0x32>
    1162:	e0 93 c7 20 	sts	0x20C7, r30	; 0x8020c7 <udc_ptr_iface>
    1166:	f0 93 c8 20 	sts	0x20C8, r31	; 0x8020c8 <udc_ptr_iface+0x1>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	08 95       	ret
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	08 95       	ret
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	08 95       	ret
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	08 95       	ret

0000117a <udc_iface_disable>:
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	c8 2f       	mov	r28, r24
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	be df       	rcall	.-132    	; 0x1106 <udc_update_iface_desc>
    118a:	18 2f       	mov	r17, r24
    118c:	88 23       	and	r24, r24
    118e:	81 f1       	breq	.+96     	; 0x11f0 <udc_iface_disable+0x76>
    1190:	a0 91 c9 20 	lds	r26, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    1194:	b0 91 ca 20 	lds	r27, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    1198:	ec 2f       	mov	r30, r28
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	ee 0f       	add	r30, r30
    119e:	ff 1f       	adc	r31, r31
    11a0:	12 96       	adiw	r26, 0x02	; 2
    11a2:	8d 91       	ld	r24, X+
    11a4:	9c 91       	ld	r25, X
    11a6:	13 97       	sbiw	r26, 0x03	; 3
    11a8:	e8 0f       	add	r30, r24
    11aa:	f9 1f       	adc	r31, r25
    11ac:	e0 80       	ld	r14, Z
    11ae:	f1 80       	ldd	r15, Z+1	; 0x01
    11b0:	d7 01       	movw	r26, r14
    11b2:	16 96       	adiw	r26, 0x06	; 6
    11b4:	ed 91       	ld	r30, X+
    11b6:	fc 91       	ld	r31, X
    11b8:	17 97       	sbiw	r26, 0x07	; 7
    11ba:	09 95       	icall
    11bc:	68 2f       	mov	r22, r24
    11be:	8c 2f       	mov	r24, r28
    11c0:	a2 df       	rcall	.-188    	; 0x1106 <udc_update_iface_desc>
    11c2:	18 2f       	mov	r17, r24
    11c4:	88 23       	and	r24, r24
    11c6:	a1 f0       	breq	.+40     	; 0x11f0 <udc_iface_disable+0x76>
    11c8:	c0 91 c7 20 	lds	r28, 0x20C7	; 0x8020c7 <udc_ptr_iface>
    11cc:	d0 91 c8 20 	lds	r29, 0x20C8	; 0x8020c8 <udc_ptr_iface+0x1>
    11d0:	65 e0       	ldi	r22, 0x05	; 5
    11d2:	ce 01       	movw	r24, r28
    11d4:	60 df       	rcall	.-320    	; 0x1096 <udc_next_desc_in_iface>
    11d6:	ec 01       	movw	r28, r24
    11d8:	89 2b       	or	r24, r25
    11da:	21 f0       	breq	.+8      	; 0x11e4 <udc_iface_disable+0x6a>
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <udd_ep_free>
    11e2:	f6 cf       	rjmp	.-20     	; 0x11d0 <udc_iface_disable+0x56>
    11e4:	d7 01       	movw	r26, r14
    11e6:	12 96       	adiw	r26, 0x02	; 2
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	13 97       	sbiw	r26, 0x03	; 3
    11ee:	09 95       	icall
    11f0:	81 2f       	mov	r24, r17
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	08 95       	ret

000011fe <udc_iface_enable>:
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	18 2f       	mov	r17, r24
    1206:	7f df       	rcall	.-258    	; 0x1106 <udc_update_iface_desc>
    1208:	88 23       	and	r24, r24
    120a:	39 f1       	breq	.+78     	; 0x125a <udc_iface_enable+0x5c>
    120c:	c0 91 c7 20 	lds	r28, 0x20C7	; 0x8020c7 <udc_ptr_iface>
    1210:	d0 91 c8 20 	lds	r29, 0x20C8	; 0x8020c8 <udc_ptr_iface+0x1>
    1214:	65 e0       	ldi	r22, 0x05	; 5
    1216:	ce 01       	movw	r24, r28
    1218:	3e df       	rcall	.-388    	; 0x1096 <udc_next_desc_in_iface>
    121a:	ec 01       	movw	r28, r24
    121c:	89 2b       	or	r24, r25
    121e:	41 f0       	breq	.+16     	; 0x1230 <udc_iface_enable+0x32>
    1220:	4c 81       	ldd	r20, Y+4	; 0x04
    1222:	5d 81       	ldd	r21, Y+5	; 0x05
    1224:	6b 81       	ldd	r22, Y+3	; 0x03
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	9d d7       	rcall	.+3898   	; 0x2164 <udd_ep_alloc>
    122a:	81 11       	cpse	r24, r1
    122c:	f3 cf       	rjmp	.-26     	; 0x1214 <udc_iface_enable+0x16>
    122e:	15 c0       	rjmp	.+42     	; 0x125a <udc_iface_enable+0x5c>
    1230:	a0 91 c9 20 	lds	r26, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    1234:	b0 91 ca 20 	lds	r27, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    1238:	e1 2f       	mov	r30, r17
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	12 96       	adiw	r26, 0x02	; 2
    1242:	8d 91       	ld	r24, X+
    1244:	9c 91       	ld	r25, X
    1246:	13 97       	sbiw	r26, 0x03	; 3
    1248:	e8 0f       	add	r30, r24
    124a:	f9 1f       	adc	r31, r25
    124c:	01 90       	ld	r0, Z+
    124e:	f0 81       	ld	r31, Z
    1250:	e0 2d       	mov	r30, r0
    1252:	01 90       	ld	r0, Z+
    1254:	f0 81       	ld	r31, Z
    1256:	e0 2d       	mov	r30, r0
    1258:	09 95       	icall
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	08 95       	ret

00001262 <udc_get_interface_desc>:
    1262:	80 91 c7 20 	lds	r24, 0x20C7	; 0x8020c7 <udc_ptr_iface>
    1266:	90 91 c8 20 	lds	r25, 0x20C8	; 0x8020c8 <udc_ptr_iface+0x1>
    126a:	08 95       	ret

0000126c <udc_start>:
    126c:	e9 c6       	rjmp	.+3538   	; 0x2040 <udd_enable>
    126e:	08 95       	ret

00001270 <udc_reset>:
    1270:	cf 93       	push	r28
    1272:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    1276:	88 23       	and	r24, r24
    1278:	c1 f0       	breq	.+48     	; 0x12aa <udc_reset+0x3a>
    127a:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    127e:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    1282:	01 90       	ld	r0, Z+
    1284:	f0 81       	ld	r31, Z
    1286:	e0 2d       	mov	r30, r0
    1288:	84 81       	ldd	r24, Z+4	; 0x04
    128a:	88 23       	and	r24, r24
    128c:	71 f0       	breq	.+28     	; 0x12aa <udc_reset+0x3a>
    128e:	c0 e0       	ldi	r28, 0x00	; 0
    1290:	8c 2f       	mov	r24, r28
    1292:	73 df       	rcall	.-282    	; 0x117a <udc_iface_disable>
    1294:	cf 5f       	subi	r28, 0xFF	; 255
    1296:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    129a:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    129e:	01 90       	ld	r0, Z+
    12a0:	f0 81       	ld	r31, Z
    12a2:	e0 2d       	mov	r30, r0
    12a4:	84 81       	ldd	r24, Z+4	; 0x04
    12a6:	c8 17       	cp	r28, r24
    12a8:	98 f3       	brcs	.-26     	; 0x1290 <udc_reset+0x20>
    12aa:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <udc_num_configuration>
    12ae:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <udc_device_status>
    12b2:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <udc_device_status+0x1>
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    12ba:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    12bc:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    12c0:	88 23       	and	r24, r24
    12c2:	49 f1       	breq	.+82     	; 0x1316 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12c4:	a0 91 c9 20 	lds	r26, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    12c8:	b0 91 ca 20 	lds	r27, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    12cc:	ed 91       	ld	r30, X+
    12ce:	fc 91       	ld	r31, X
    12d0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    12d2:	84 81       	ldd	r24, Z+4	; 0x04
    12d4:	88 23       	and	r24, r24
    12d6:	f9 f0       	breq	.+62     	; 0x1316 <udc_sof_notify+0x5c>
    12d8:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    12da:	ec 2f       	mov	r30, r28
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	12 96       	adiw	r26, 0x02	; 2
    12e4:	8d 91       	ld	r24, X+
    12e6:	9c 91       	ld	r25, X
    12e8:	13 97       	sbiw	r26, 0x03	; 3
    12ea:	e8 0f       	add	r30, r24
    12ec:	f9 1f       	adc	r31, r25
    12ee:	01 90       	ld	r0, Z+
    12f0:	f0 81       	ld	r31, Z
    12f2:	e0 2d       	mov	r30, r0
    12f4:	00 84       	ldd	r0, Z+8	; 0x08
    12f6:	f1 85       	ldd	r31, Z+9	; 0x09
    12f8:	e0 2d       	mov	r30, r0
    12fa:	30 97       	sbiw	r30, 0x00	; 0
    12fc:	09 f0       	breq	.+2      	; 0x1300 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    12fe:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1300:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1302:	a0 91 c9 20 	lds	r26, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    1306:	b0 91 ca 20 	lds	r27, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    130a:	ed 91       	ld	r30, X+
    130c:	fc 91       	ld	r31, X
    130e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1310:	84 81       	ldd	r24, Z+4	; 0x04
    1312:	c8 17       	cp	r28, r24
    1314:	10 f3       	brcs	.-60     	; 0x12da <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1322:	ee e6       	ldi	r30, 0x6E	; 110
    1324:	f4 e2       	ldi	r31, 0x24	; 36
    1326:	12 86       	std	Z+10, r1	; 0x0a
    1328:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    132a:	14 86       	std	Z+12, r1	; 0x0c
    132c:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    132e:	16 86       	std	Z+14, r1	; 0x0e
    1330:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1332:	80 81       	ld	r24, Z
    1334:	88 23       	and	r24, r24
    1336:	3c f4       	brge	.+14     	; 0x1346 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1338:	20 91 74 24 	lds	r18, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    133c:	30 91 75 24 	lds	r19, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    1340:	23 2b       	or	r18, r19
    1342:	09 f4       	brne	.+2      	; 0x1346 <udc_process_setup+0x2c>
    1344:	54 c3       	rjmp	.+1704   	; 0x19ee <udc_process_setup+0x6d4>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1346:	80 76       	andi	r24, 0x60	; 96
    1348:	80 34       	cpi	r24, 0x40	; 64
    134a:	09 f0       	breq	.+2      	; 0x134e <udc_process_setup+0x34>
    134c:	f2 c0       	rjmp	.+484    	; 0x1532 <udc_process_setup+0x218>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    134e:	e0 91 6f 24 	lds	r30, 0x246F	; 0x80246f <udd_g_ctrlreq+0x1>
    1352:	8e 2f       	mov	r24, r30
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	fc 01       	movw	r30, r24
    1358:	e0 5a       	subi	r30, 0xA0	; 160
    135a:	f1 09       	sbc	r31, r1
    135c:	e8 30       	cpi	r30, 0x08	; 8
    135e:	f1 05       	cpc	r31, r1
    1360:	08 f0       	brcs	.+2      	; 0x1364 <udc_process_setup+0x4a>
    1362:	de c0       	rjmp	.+444    	; 0x1520 <udc_process_setup+0x206>
    1364:	e2 50       	subi	r30, 0x02	; 2
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <debugOnNextEnd>
    1372:	41 c3       	rjmp	.+1666   	; 0x19f6 <udc_process_setup+0x6dc>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1374:	e0 e0       	ldi	r30, 0x00	; 0
    1376:	f8 e0       	ldi	r31, 0x08	; 8
    1378:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    137a:	ce e6       	ldi	r28, 0x6E	; 110
    137c:	d4 e2       	ldi	r29, 0x24	; 36
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	9b 81       	ldd	r25, Y+3	; 0x03
    1382:	86 ab       	std	Z+54, r24	; 0x36
    1384:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	8f 70       	andi	r24, 0x0F	; 15
    138a:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    138c:	6e 81       	ldd	r22, Y+6	; 0x06
    138e:	7f 81       	ldd	r23, Y+7	; 0x07
    1390:	8e e6       	ldi	r24, 0x6E	; 110
    1392:	92 e2       	ldi	r25, 0x22	; 34
    1394:	e0 d6       	rcall	.+3520   	; 0x2156 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <dacBuf_len>
    139e:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <dacBuf_len+0x1>
    13a2:	82 17       	cp	r24, r18
    13a4:	93 07       	cpc	r25, r19
    13a6:	09 f4       	brne	.+2      	; 0x13aa <udc_process_setup+0x90>
    13a8:	26 c3       	rjmp	.+1612   	; 0x19f6 <udc_process_setup+0x6dc>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    13aa:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <dacBuf_len>
    13ae:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <dacBuf_len+0x1>
				switch(global_mode){
    13b2:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <global_mode>
    13b6:	8e 2f       	mov	r24, r30
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	88 30       	cpi	r24, 0x08	; 8
    13bc:	91 05       	cpc	r25, r1
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <udc_process_setup+0xa8>
    13c0:	b1 c0       	rjmp	.+354    	; 0x1524 <udc_process_setup+0x20a>
    13c2:	fc 01       	movw	r30, r24
    13c4:	ea 5f       	subi	r30, 0xFA	; 250
    13c6:	fe 4f       	sbci	r31, 0xFE	; 254
    13c8:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    13cc:	8b d9       	rcall	.-3306   	; 0x6e4 <tiny_dma_set_mode_0>
    13ce:	13 c3       	rjmp	.+1574   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    13d0:	e9 d9       	rcall	.-3118   	; 0x7a4 <tiny_dma_set_mode_1>
    13d2:	11 c3       	rjmp	.+1570   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    13d4:	5f da       	rcall	.-2882   	; 0x894 <tiny_dma_set_mode_2>
    13d6:	0f c3       	rjmp	.+1566   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    13d8:	d2 da       	rcall	.-2652   	; 0x97e <tiny_dma_set_mode_3>
    13da:	0d c3       	rjmp	.+1562   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    13dc:	4c db       	rcall	.-2408   	; 0xa76 <tiny_dma_set_mode_4>
    13de:	0b c3       	rjmp	.+1558   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    13e0:	c0 db       	rcall	.-2176   	; 0xb62 <tiny_dma_set_mode_5>
    13e2:	09 c3       	rjmp	.+1554   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    13e4:	06 dc       	rcall	.-2036   	; 0xbf2 <tiny_dma_set_mode_6>
    13e6:	07 c3       	rjmp	.+1550   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    13e8:	66 dc       	rcall	.-1844   	; 0xcb6 <tiny_dma_set_mode_7>
    13ea:	05 c3       	rjmp	.+1546   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    13ec:	e0 e4       	ldi	r30, 0x40	; 64
    13ee:	f8 e0       	ldi	r31, 0x08	; 8
    13f0:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    13f2:	ce e6       	ldi	r28, 0x6E	; 110
    13f4:	d4 e2       	ldi	r29, 0x24	; 36
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	9b 81       	ldd	r25, Y+3	; 0x03
    13fa:	86 ab       	std	Z+54, r24	; 0x36
    13fc:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	8f 70       	andi	r24, 0x0F	; 15
    1402:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    1404:	6e 81       	ldd	r22, Y+6	; 0x06
    1406:	7f 81       	ldd	r23, Y+7	; 0x07
    1408:	8e e7       	ldi	r24, 0x7E	; 126
    140a:	94 e2       	ldi	r25, 0x24	; 36
    140c:	a4 d6       	rcall	.+3400   	; 0x2156 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    140e:	8e 81       	ldd	r24, Y+6	; 0x06
    1410:	9f 81       	ldd	r25, Y+7	; 0x07
    1412:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <auxDacBufLen>
    1416:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <auxDacBufLen+0x1>
    141a:	82 17       	cp	r24, r18
    141c:	93 07       	cpc	r25, r19
    141e:	09 f4       	brne	.+2      	; 0x1422 <udc_process_setup+0x108>
    1420:	ea c2       	rjmp	.+1492   	; 0x19f6 <udc_process_setup+0x6dc>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1422:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <auxDacBufLen>
    1426:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <auxDacBufLen+0x1>
				switch(global_mode){
    142a:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <global_mode>
    142e:	8e 2f       	mov	r24, r30
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	88 30       	cpi	r24, 0x08	; 8
    1434:	91 05       	cpc	r25, r1
    1436:	08 f0       	brcs	.+2      	; 0x143a <udc_process_setup+0x120>
    1438:	77 c0       	rjmp	.+238    	; 0x1528 <udc_process_setup+0x20e>
    143a:	fc 01       	movw	r30, r24
    143c:	e2 5f       	subi	r30, 0xF2	; 242
    143e:	fe 4f       	sbci	r31, 0xFE	; 254
    1440:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1444:	4f d9       	rcall	.-3426   	; 0x6e4 <tiny_dma_set_mode_0>
    1446:	d7 c2       	rjmp	.+1454   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1448:	ad d9       	rcall	.-3238   	; 0x7a4 <tiny_dma_set_mode_1>
    144a:	d5 c2       	rjmp	.+1450   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    144c:	23 da       	rcall	.-3002   	; 0x894 <tiny_dma_set_mode_2>
    144e:	d3 c2       	rjmp	.+1446   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1450:	96 da       	rcall	.-2772   	; 0x97e <tiny_dma_set_mode_3>
    1452:	d1 c2       	rjmp	.+1442   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1454:	10 db       	rcall	.-2528   	; 0xa76 <tiny_dma_set_mode_4>
    1456:	cf c2       	rjmp	.+1438   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1458:	84 db       	rcall	.-2296   	; 0xb62 <tiny_dma_set_mode_5>
    145a:	cd c2       	rjmp	.+1434   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    145c:	ca db       	rcall	.-2156   	; 0xbf2 <tiny_dma_set_mode_6>
    145e:	cb c2       	rjmp	.+1430   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1460:	2a dc       	rcall	.-1964   	; 0xcb6 <tiny_dma_set_mode_7>
    1462:	c9 c2       	rjmp	.+1426   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1464:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1468:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    146c:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    1470:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <PSU_target>
    1474:	c0 c2       	rjmp	.+1408   	; 0x19f6 <udc_process_setup+0x6dc>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1476:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    147a:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    147e:	bb c2       	rjmp	.+1398   	; 0x19f6 <udc_process_setup+0x6dc>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1480:	e0 91 70 24 	lds	r30, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    1484:	f0 91 71 24 	lds	r31, 0x2471	; 0x802471 <udd_g_ctrlreq+0x3>
    1488:	e8 30       	cpi	r30, 0x08	; 8
    148a:	f1 05       	cpc	r31, r1
    148c:	08 f0       	brcs	.+2      	; 0x1490 <udc_process_setup+0x176>
    148e:	4e c0       	rjmp	.+156    	; 0x152c <udc_process_setup+0x212>
    1490:	ea 5e       	subi	r30, 0xEA	; 234
    1492:	fe 4f       	sbci	r31, 0xFE	; 254
    1494:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	91 d8       	rcall	.-3806   	; 0x5c0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    149e:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq+0x4>
    14a2:	5c d8       	rcall	.-3912   	; 0x55c <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    14a4:	1f d9       	rcall	.-3522   	; 0x6e4 <tiny_dma_set_mode_0>
    14a6:	a7 c2       	rjmp	.+1358   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	89 d8       	rcall	.-3822   	; 0x5c0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    14ae:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq+0x4>
    14b2:	54 d8       	rcall	.-3928   	; 0x55c <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    14b4:	77 d9       	rcall	.-3346   	; 0x7a4 <tiny_dma_set_mode_1>
    14b6:	9f c2       	rjmp	.+1342   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	81 d8       	rcall	.-3838   	; 0x5c0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    14be:	ce e6       	ldi	r28, 0x6E	; 110
    14c0:	d4 e2       	ldi	r29, 0x24	; 36
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
    14c4:	4b d8       	rcall	.-3946   	; 0x55c <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	5e d8       	rcall	.-3908   	; 0x586 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    14ca:	e4 d9       	rcall	.-3128   	; 0x894 <tiny_dma_set_mode_2>
    14cc:	94 c2       	rjmp	.+1320   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    14ce:	57 da       	rcall	.-2898   	; 0x97e <tiny_dma_set_mode_3>
    14d0:	92 c2       	rjmp	.+1316   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    14d2:	d1 da       	rcall	.-2654   	; 0xa76 <tiny_dma_set_mode_4>
    14d4:	90 c2       	rjmp	.+1312   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	72 d8       	rcall	.-3868   	; 0x5c0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    14dc:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq+0x4>
    14e0:	3d d8       	rcall	.-3974   	; 0x55c <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    14e2:	3f db       	rcall	.-2434   	; 0xb62 <tiny_dma_set_mode_5>
    14e4:	88 c2       	rjmp	.+1296   	; 0x19f6 <udc_process_setup+0x6dc>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	6a d8       	rcall	.-3884   	; 0x5c0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    14ec:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq+0x4>
    14f0:	35 d8       	rcall	.-3990   	; 0x55c <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    14f2:	7f db       	rcall	.-2306   	; 0xbf2 <tiny_dma_set_mode_6>
    14f4:	80 c2       	rjmp	.+1280   	; 0x19f6 <udc_process_setup+0x6dc>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    14f6:	62 e0       	ldi	r22, 0x02	; 2
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	62 d8       	rcall	.-3900   	; 0x5c0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    14fc:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq+0x4>
    1500:	80 68       	ori	r24, 0x80	; 128
    1502:	2c d8       	rcall	.-4008   	; 0x55c <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    1504:	d8 db       	rcall	.-2128   	; 0xcb6 <tiny_dma_set_mode_7>
    1506:	77 c2       	rjmp	.+1262   	; 0x19f6 <udc_process_setup+0x6dc>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1508:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    150c:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1510:	72 c2       	rjmp	.+1252   	; 0x19f6 <udc_process_setup+0x6dc>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1512:	e9 e7       	ldi	r30, 0x79	; 121
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	88 ed       	ldi	r24, 0xD8	; 216
    151a:	f8 94       	cli
    151c:	84 bf       	out	0x34, r24	; 52
    151e:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	05 c0       	rjmp	.+10     	; 0x152e <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	03 c0       	rjmp	.+6      	; 0x152e <udc_process_setup+0x214>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	01 c0       	rjmp	.+2      	; 0x152e <udc_process_setup+0x214>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    152c:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    152e:	81 11       	cpse	r24, r1
    1530:	65 c2       	rjmp	.+1226   	; 0x19fc <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1532:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq>
    1536:	98 2f       	mov	r25, r24
    1538:	90 76       	andi	r25, 0x60	; 96
    153a:	09 f0       	breq	.+2      	; 0x153e <udc_process_setup+0x224>
    153c:	e1 c1       	rjmp	.+962    	; 0x1900 <udc_process_setup+0x5e6>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    153e:	88 23       	and	r24, r24
    1540:	0c f0       	brlt	.+2      	; 0x1544 <udc_process_setup+0x22a>
    1542:	05 c1       	rjmp	.+522    	; 0x174e <udc_process_setup+0x434>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1544:	20 91 74 24 	lds	r18, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    1548:	30 91 75 24 	lds	r19, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    154c:	21 15       	cp	r18, r1
    154e:	31 05       	cpc	r19, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <udc_process_setup+0x23a>
    1552:	d6 c1       	rjmp	.+940    	; 0x1900 <udc_process_setup+0x5e6>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1554:	8f 71       	andi	r24, 0x1F	; 31
    1556:	09 f0       	breq	.+2      	; 0x155a <udc_process_setup+0x240>
    1558:	a3 c0       	rjmp	.+326    	; 0x16a0 <udc_process_setup+0x386>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    155a:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <udd_g_ctrlreq+0x1>
    155e:	96 30       	cpi	r25, 0x06	; 6
    1560:	79 f0       	breq	.+30     	; 0x1580 <udc_process_setup+0x266>
    1562:	98 30       	cpi	r25, 0x08	; 8
    1564:	09 f4       	brne	.+2      	; 0x1568 <udc_process_setup+0x24e>
    1566:	92 c0       	rjmp	.+292    	; 0x168c <udc_process_setup+0x372>
    1568:	91 11       	cpse	r25, r1
    156a:	9a c0       	rjmp	.+308    	; 0x16a0 <udc_process_setup+0x386>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    156c:	22 30       	cpi	r18, 0x02	; 2
    156e:	31 05       	cpc	r19, r1
    1570:	09 f0       	breq	.+2      	; 0x1574 <udc_process_setup+0x25a>
    1572:	c6 c1       	rjmp	.+908    	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1574:	62 e0       	ldi	r22, 0x02	; 2
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	80 ed       	ldi	r24, 0xD0	; 208
    157a:	90 e2       	ldi	r25, 0x20	; 32
    157c:	ec d5       	rcall	.+3032   	; 0x2156 <udd_set_setup_payload>
    157e:	3d c2       	rjmp	.+1146   	; 0x19fa <udc_process_setup+0x6e0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1580:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    1584:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1588:	29 2f       	mov	r18, r25
    158a:	33 27       	eor	r19, r19
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	a9 f0       	breq	.+42     	; 0x15bc <udc_process_setup+0x2a2>
    1592:	24 f4       	brge	.+8      	; 0x159c <udc_process_setup+0x282>
    1594:	21 30       	cpi	r18, 0x01	; 1
    1596:	31 05       	cpc	r19, r1
    1598:	41 f0       	breq	.+16     	; 0x15aa <udc_process_setup+0x290>
    159a:	a9 c1       	rjmp	.+850    	; 0x18ee <udc_process_setup+0x5d4>
    159c:	23 30       	cpi	r18, 0x03	; 3
    159e:	31 05       	cpc	r19, r1
    15a0:	d9 f1       	breq	.+118    	; 0x1618 <udc_process_setup+0x2fe>
    15a2:	2f 30       	cpi	r18, 0x0F	; 15
    15a4:	31 05       	cpc	r19, r1
    15a6:	51 f1       	breq	.+84     	; 0x15fc <udc_process_setup+0x2e2>
    15a8:	a2 c1       	rjmp	.+836    	; 0x18ee <udc_process_setup+0x5d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    15aa:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <udc_config>
    15ae:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    15b2:	dc 01       	movw	r26, r24
    15b4:	6c 91       	ld	r22, X
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	ce d5       	rcall	.+2972   	; 0x2156 <udd_set_setup_payload>
    15ba:	59 c0       	rjmp	.+178    	; 0x166e <udc_process_setup+0x354>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    15bc:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config>
    15c0:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x1>
    15c4:	21 89       	ldd	r18, Z+17	; 0x11
    15c6:	82 17       	cp	r24, r18
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <udc_process_setup+0x2b2>
    15ca:	9a c1       	rjmp	.+820    	; 0x1900 <udc_process_setup+0x5e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    15cc:	99 27       	eor	r25, r25
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config+0x2>
    15da:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x3>
    15de:	e8 0f       	add	r30, r24
    15e0:	f9 1f       	adc	r31, r25
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    15e6:	fc 01       	movw	r30, r24
    15e8:	62 81       	ldd	r22, Z+2	; 0x02
    15ea:	73 81       	ldd	r23, Z+3	; 0x03
    15ec:	b4 d5       	rcall	.+2920   	; 0x2156 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    15ee:	e0 91 76 24 	lds	r30, 0x2476	; 0x802476 <udd_g_ctrlreq+0x8>
    15f2:	f0 91 77 24 	lds	r31, 0x2477	; 0x802477 <udd_g_ctrlreq+0x9>
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	81 83       	std	Z+1, r24	; 0x01
    15fa:	39 c0       	rjmp	.+114    	; 0x166e <udc_process_setup+0x354>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    15fc:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <udc_config+0x4>
    1600:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <udc_config+0x5>
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	09 f4       	brne	.+2      	; 0x160a <udc_process_setup+0x2f0>
    1608:	7b c1       	rjmp	.+758    	; 0x1900 <udc_process_setup+0x5e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    160a:	dc 01       	movw	r26, r24
    160c:	12 96       	adiw	r26, 0x02	; 2
    160e:	6d 91       	ld	r22, X+
    1610:	7c 91       	ld	r23, X
    1612:	13 97       	sbiw	r26, 0x03	; 3
    1614:	a0 d5       	rcall	.+2880   	; 0x2156 <udd_set_setup_payload>
    1616:	2b c0       	rjmp	.+86     	; 0x166e <udc_process_setup+0x354>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1618:	99 27       	eor	r25, r25
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	71 f0       	breq	.+28     	; 0x163c <udc_process_setup+0x322>
    1620:	38 f0       	brcs	.+14     	; 0x1630 <udc_process_setup+0x316>
    1622:	02 97       	sbiw	r24, 0x02	; 2
    1624:	09 f0       	breq	.+2      	; 0x1628 <udc_process_setup+0x30e>
    1626:	6c c1       	rjmp	.+728    	; 0x1900 <udc_process_setup+0x5e6>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1628:	8e e8       	ldi	r24, 0x8E	; 142
    162a:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    162c:	28 e1       	ldi	r18, 0x18	; 24
    162e:	09 c0       	rjmp	.+18     	; 0x1642 <udc_process_setup+0x328>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1630:	64 e0       	ldi	r22, 0x04	; 4
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	82 eb       	ldi	r24, 0xB2	; 178
    1636:	90 e2       	ldi	r25, 0x20	; 32
    1638:	8e d5       	rcall	.+2844   	; 0x2156 <udd_set_setup_payload>
    163a:	19 c0       	rjmp	.+50     	; 0x166e <udc_process_setup+0x354>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    163c:	87 ea       	ldi	r24, 0xA7	; 167
    163e:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1640:	29 e0       	ldi	r18, 0x09	; 9
    1642:	38 2f       	mov	r19, r24
    1644:	ae e5       	ldi	r26, 0x5E	; 94
    1646:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1648:	e8 2f       	mov	r30, r24
    164a:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    164c:	81 91       	ld	r24, Z+
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	8d 93       	st	X+, r24
    1652:	9d 93       	st	X+, r25
    1654:	8e 2f       	mov	r24, r30
    1656:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1658:	82 17       	cp	r24, r18
    165a:	c0 f3       	brcs	.-16     	; 0x164c <udc_process_setup+0x332>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    165c:	62 2f       	mov	r22, r18
    165e:	66 0f       	add	r22, r22
    1660:	6e 5f       	subi	r22, 0xFE	; 254
    1662:	60 93 5c 20 	sts	0x205C, r22	; 0x80205c <udc_string_desc>
		udd_set_setup_payload(
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	8c e5       	ldi	r24, 0x5C	; 92
    166a:	90 e2       	ldi	r25, 0x20	; 32
    166c:	74 d5       	rcall	.+2792   	; 0x2156 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    166e:	ee e6       	ldi	r30, 0x6E	; 110
    1670:	f4 e2       	ldi	r31, 0x24	; 36
    1672:	86 81       	ldd	r24, Z+6	; 0x06
    1674:	97 81       	ldd	r25, Z+7	; 0x07
    1676:	22 85       	ldd	r18, Z+10	; 0x0a
    1678:	33 85       	ldd	r19, Z+11	; 0x0b
    167a:	82 17       	cp	r24, r18
    167c:	93 07       	cpc	r25, r19
    167e:	08 f0       	brcs	.+2      	; 0x1682 <udc_process_setup+0x368>
    1680:	bc c1       	rjmp	.+888    	; 0x19fa <udc_process_setup+0x6e0>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1682:	80 93 78 24 	sts	0x2478, r24	; 0x802478 <udd_g_ctrlreq+0xa>
    1686:	90 93 79 24 	sts	0x2479, r25	; 0x802479 <udd_g_ctrlreq+0xb>
    168a:	b7 c1       	rjmp	.+878    	; 0x19fa <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    168c:	21 30       	cpi	r18, 0x01	; 1
    168e:	31 05       	cpc	r19, r1
    1690:	09 f0       	breq	.+2      	; 0x1694 <udc_process_setup+0x37a>
    1692:	36 c1       	rjmp	.+620    	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	8c ec       	ldi	r24, 0xCC	; 204
    169a:	90 e2       	ldi	r25, 0x20	; 32
    169c:	5c d5       	rcall	.+2744   	; 0x2156 <udd_set_setup_payload>
    169e:	ad c1       	rjmp	.+858    	; 0x19fa <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	e1 f5       	brne	.+120    	; 0x171c <udc_process_setup+0x402>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    16a4:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <udd_g_ctrlreq+0x1>
    16a8:	9a 30       	cpi	r25, 0x0A	; 10
    16aa:	c1 f5       	brne	.+112    	; 0x171c <udc_process_setup+0x402>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    16ac:	21 30       	cpi	r18, 0x01	; 1
    16ae:	31 05       	cpc	r19, r1
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <udc_process_setup+0x39a>
    16b2:	26 c1       	rjmp	.+588    	; 0x1900 <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    16b4:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    16b8:	88 23       	and	r24, r24
    16ba:	09 f4       	brne	.+2      	; 0x16be <udc_process_setup+0x3a4>
    16bc:	21 c1       	rjmp	.+578    	; 0x1900 <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    16be:	c0 91 72 24 	lds	r28, 0x2472	; 0x802472 <udd_g_ctrlreq+0x4>
    16c2:	d0 91 73 24 	lds	r29, 0x2473	; 0x802473 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16c6:	00 91 c9 20 	lds	r16, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    16ca:	10 91 ca 20 	lds	r17, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    16ce:	d8 01       	movw	r26, r16
    16d0:	ed 91       	ld	r30, X+
    16d2:	fc 91       	ld	r31, X
    16d4:	84 81       	ldd	r24, Z+4	; 0x04
    16d6:	c8 17       	cp	r28, r24
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <udc_process_setup+0x3c2>
    16da:	12 c1       	rjmp	.+548    	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	8c 2f       	mov	r24, r28
    16e0:	12 dd       	rcall	.-1500   	; 0x1106 <udc_update_iface_desc>
    16e2:	88 23       	and	r24, r24
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <udc_process_setup+0x3ce>
    16e6:	0c c1       	rjmp	.+536    	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    16e8:	ce 01       	movw	r24, r28
    16ea:	99 27       	eor	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	d8 01       	movw	r26, r16
    16f2:	12 96       	adiw	r26, 0x02	; 2
    16f4:	ed 91       	ld	r30, X+
    16f6:	fc 91       	ld	r31, X
    16f8:	13 97       	sbiw	r26, 0x03	; 3
    16fa:	e8 0f       	add	r30, r24
    16fc:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    16fe:	01 90       	ld	r0, Z+
    1700:	f0 81       	ld	r31, Z
    1702:	e0 2d       	mov	r30, r0
    1704:	86 81       	ldd	r24, Z+6	; 0x06
    1706:	97 81       	ldd	r25, Z+7	; 0x07
    1708:	fc 01       	movw	r30, r24
    170a:	09 95       	icall
    170c:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	8e ec       	ldi	r24, 0xCE	; 206
    1716:	90 e2       	ldi	r25, 0x20	; 32
    1718:	1e d5       	rcall	.+2620   	; 0x2156 <udd_set_setup_payload>
    171a:	6f c1       	rjmp	.+734    	; 0x19fa <udc_process_setup+0x6e0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	09 f0       	breq	.+2      	; 0x1722 <udc_process_setup+0x408>
    1720:	ef c0       	rjmp	.+478    	; 0x1900 <udc_process_setup+0x5e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1722:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <udd_g_ctrlreq+0x1>
    1726:	81 11       	cpse	r24, r1
    1728:	e4 c0       	rjmp	.+456    	; 0x18f2 <udc_process_setup+0x5d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    172a:	22 30       	cpi	r18, 0x02	; 2
    172c:	31 05       	cpc	r19, r1
    172e:	09 f0       	breq	.+2      	; 0x1732 <udc_process_setup+0x418>
    1730:	e7 c0       	rjmp	.+462    	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1732:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq+0x4>
    1736:	8b d5       	rcall	.+2838   	; 0x224e <udd_ep_is_halted>
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <udc_ep_status.5523>
    173e:	90 93 c6 20 	sts	0x20C6, r25	; 0x8020c6 <udc_ep_status.5523+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1742:	62 e0       	ldi	r22, 0x02	; 2
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	85 ec       	ldi	r24, 0xC5	; 197
    1748:	90 e2       	ldi	r25, 0x20	; 32
    174a:	05 d5       	rcall	.+2570   	; 0x2156 <udd_set_setup_payload>
    174c:	56 c1       	rjmp	.+684    	; 0x19fa <udc_process_setup+0x6e0>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    174e:	8f 71       	andi	r24, 0x1F	; 31
    1750:	09 f0       	breq	.+2      	; 0x1754 <udc_process_setup+0x43a>
    1752:	83 c0       	rjmp	.+262    	; 0x185a <udc_process_setup+0x540>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1754:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <udd_g_ctrlreq+0x1>
    1758:	93 30       	cpi	r25, 0x03	; 3
    175a:	09 f4       	brne	.+2      	; 0x175e <udc_process_setup+0x444>
    175c:	cc c0       	rjmp	.+408    	; 0x18f6 <udc_process_setup+0x5dc>
    175e:	18 f4       	brcc	.+6      	; 0x1766 <udc_process_setup+0x44c>
    1760:	91 30       	cpi	r25, 0x01	; 1
    1762:	a1 f0       	breq	.+40     	; 0x178c <udc_process_setup+0x472>
    1764:	7a c0       	rjmp	.+244    	; 0x185a <udc_process_setup+0x540>
    1766:	95 30       	cpi	r25, 0x05	; 5
    1768:	19 f0       	breq	.+6      	; 0x1770 <udc_process_setup+0x456>
    176a:	99 30       	cpi	r25, 0x09	; 9
    176c:	39 f1       	breq	.+78     	; 0x17bc <udc_process_setup+0x4a2>
    176e:	75 c0       	rjmp	.+234    	; 0x185a <udc_process_setup+0x540>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1770:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    1774:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    1778:	89 2b       	or	r24, r25
    177a:	09 f0       	breq	.+2      	; 0x177e <udc_process_setup+0x464>
    177c:	c1 c0       	rjmp	.+386    	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    177e:	8d e7       	ldi	r24, 0x7D	; 125
    1780:	98 e0       	ldi	r25, 0x08	; 8
    1782:	80 93 7a 24 	sts	0x247A, r24	; 0x80247a <udd_g_ctrlreq+0xc>
    1786:	90 93 7b 24 	sts	0x247B, r25	; 0x80247b <udd_g_ctrlreq+0xd>
    178a:	37 c1       	rjmp	.+622    	; 0x19fa <udc_process_setup+0x6e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    178c:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    1790:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    1794:	89 2b       	or	r24, r25
    1796:	09 f0       	breq	.+2      	; 0x179a <udc_process_setup+0x480>
    1798:	b3 c0       	rjmp	.+358    	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    179a:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    179e:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x3>
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <udc_process_setup+0x48e>
    17a6:	ac c0       	rjmp	.+344    	; 0x1900 <udc_process_setup+0x5e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    17a8:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <udc_device_status>
    17ac:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <udc_device_status+0x1>
    17b0:	8d 7f       	andi	r24, 0xFD	; 253
    17b2:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <udc_device_status>
    17b6:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <udc_device_status+0x1>
    17ba:	1f c1       	rjmp	.+574    	; 0x19fa <udc_process_setup+0x6e0>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    17bc:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    17c0:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    17c4:	89 2b       	or	r24, r25
    17c6:	09 f0       	breq	.+2      	; 0x17ca <udc_process_setup+0x4b0>
    17c8:	9b c0       	rjmp	.+310    	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    17ca:	c2 d4       	rcall	.+2436   	; 0x2150 <udd_getaddress>
    17cc:	88 23       	and	r24, r24
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <udc_process_setup+0x4b8>
    17d0:	97 c0       	rjmp	.+302    	; 0x1900 <udc_process_setup+0x5e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17d2:	20 91 70 24 	lds	r18, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    17d6:	30 91 71 24 	lds	r19, 0x2471	; 0x802471 <udd_g_ctrlreq+0x3>
    17da:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    17dc:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config>
    17e0:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17e4:	81 89       	ldd	r24, Z+17	; 0x11
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	82 17       	cp	r24, r18
    17ea:	93 07       	cpc	r25, r19
    17ec:	08 f4       	brcc	.+2      	; 0x17f0 <udc_process_setup+0x4d6>
    17ee:	88 c0       	rjmp	.+272    	; 0x1900 <udc_process_setup+0x5e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    17f0:	3f dd       	rcall	.-1410   	; 0x1270 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    17f2:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    17f6:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x3>
    17fa:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <udc_num_configuration>
	if (udc_num_configuration == 0) {
    17fe:	88 23       	and	r24, r24
    1800:	09 f4       	brne	.+2      	; 0x1804 <udc_process_setup+0x4ea>
    1802:	fb c0       	rjmp	.+502    	; 0x19fa <udc_process_setup+0x6e0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1804:	99 27       	eor	r25, r25
    1806:	81 50       	subi	r24, 0x01	; 1
    1808:	90 4c       	sbci	r25, 0xC0	; 192
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config+0x2>
    1816:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x3>
    181a:	e8 0f       	add	r30, r24
    181c:	f9 1f       	adc	r31, r25
    181e:	e0 93 c9 20 	sts	0x20C9, r30	; 0x8020c9 <udc_ptr_conf>
    1822:	f0 93 ca 20 	sts	0x20CA, r31	; 0x8020ca <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1826:	01 90       	ld	r0, Z+
    1828:	f0 81       	ld	r31, Z
    182a:	e0 2d       	mov	r30, r0
    182c:	84 81       	ldd	r24, Z+4	; 0x04
    182e:	88 23       	and	r24, r24
    1830:	09 f4       	brne	.+2      	; 0x1834 <udc_process_setup+0x51a>
    1832:	e3 c0       	rjmp	.+454    	; 0x19fa <udc_process_setup+0x6e0>
    1834:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	8c 2f       	mov	r24, r28
    183a:	e1 dc       	rcall	.-1598   	; 0x11fe <udc_iface_enable>
    183c:	88 23       	and	r24, r24
    183e:	09 f4       	brne	.+2      	; 0x1842 <udc_process_setup+0x528>
    1840:	5f c0       	rjmp	.+190    	; 0x1900 <udc_process_setup+0x5e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1842:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1844:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    1848:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    184c:	01 90       	ld	r0, Z+
    184e:	f0 81       	ld	r31, Z
    1850:	e0 2d       	mov	r30, r0
    1852:	84 81       	ldd	r24, Z+4	; 0x04
    1854:	c8 17       	cp	r28, r24
    1856:	78 f3       	brcs	.-34     	; 0x1836 <udc_process_setup+0x51c>
    1858:	d0 c0       	rjmp	.+416    	; 0x19fa <udc_process_setup+0x6e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	e1 f4       	brne	.+56     	; 0x1896 <udc_process_setup+0x57c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    185e:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <udd_g_ctrlreq+0x1>
    1862:	9b 30       	cpi	r25, 0x0B	; 11
    1864:	c1 f4       	brne	.+48     	; 0x1896 <udc_process_setup+0x57c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1866:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    186a:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    186e:	89 2b       	or	r24, r25
    1870:	09 f0       	breq	.+2      	; 0x1874 <udc_process_setup+0x55a>
    1872:	46 c0       	rjmp	.+140    	; 0x1900 <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1874:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    1878:	88 23       	and	r24, r24
    187a:	09 f4       	brne	.+2      	; 0x187e <udc_process_setup+0x564>
    187c:	41 c0       	rjmp	.+130    	; 0x1900 <udc_process_setup+0x5e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    187e:	ee e6       	ldi	r30, 0x6E	; 110
    1880:	f4 e2       	ldi	r31, 0x24	; 36
    1882:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1884:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1886:	8c 2f       	mov	r24, r28
    1888:	78 dc       	rcall	.-1808   	; 0x117a <udc_iface_disable>
    188a:	88 23       	and	r24, r24
    188c:	c9 f1       	breq	.+114    	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    188e:	6d 2f       	mov	r22, r29
    1890:	8c 2f       	mov	r24, r28
    1892:	b5 dc       	rcall	.-1686   	; 0x11fe <udc_iface_enable>
    1894:	33 c0       	rjmp	.+102    	; 0x18fc <udc_process_setup+0x5e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1896:	82 30       	cpi	r24, 0x02	; 2
    1898:	99 f5       	brne	.+102    	; 0x1900 <udc_process_setup+0x5e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    189a:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <udd_g_ctrlreq+0x1>
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <udc_process_setup+0x58e>
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	89 f0       	breq	.+34     	; 0x18c8 <udc_process_setup+0x5ae>
    18a6:	29 c0       	rjmp	.+82     	; 0x18fa <udc_process_setup+0x5e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18a8:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    18ac:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    18b0:	89 2b       	or	r24, r25
    18b2:	31 f5       	brne	.+76     	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18b4:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    18b8:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x3>
    18bc:	89 2b       	or	r24, r25
    18be:	01 f5       	brne	.+64     	; 0x1900 <udc_process_setup+0x5e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18c0:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq+0x4>
    18c4:	df d4       	rcall	.+2494   	; 0x2284 <udd_ep_clear_halt>
    18c6:	1a c0       	rjmp	.+52     	; 0x18fc <udc_process_setup+0x5e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18c8:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    18cc:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    18d0:	89 2b       	or	r24, r25
    18d2:	b1 f4       	brne	.+44     	; 0x1900 <udc_process_setup+0x5e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18d4:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x2>
    18d8:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x3>
    18dc:	89 2b       	or	r24, r25
    18de:	81 f4       	brne	.+32     	; 0x1900 <udc_process_setup+0x5e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    18e0:	ce e6       	ldi	r28, 0x6E	; 110
    18e2:	d4 e2       	ldi	r29, 0x24	; 36
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	bd d5       	rcall	.+2938   	; 0x2462 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	20 d6       	rcall	.+3136   	; 0x252c <udd_ep_set_halt>
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <udc_process_setup+0x5e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <udc_process_setup+0x5e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <udc_process_setup+0x5e2>
				break;
			}
		}
#endif
	}
	return false;
    18fa:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    18fc:	81 11       	cpse	r24, r1
    18fe:	7e c0       	rjmp	.+252    	; 0x19fc <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1900:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq>
    1904:	8f 71       	andi	r24, 0x1F	; 31
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	71 f5       	brne	.+92     	; 0x1966 <udc_process_setup+0x64c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    190a:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    190e:	88 23       	and	r24, r24
    1910:	51 f1       	breq	.+84     	; 0x1966 <udc_process_setup+0x64c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1912:	00 91 72 24 	lds	r16, 0x2472	; 0x802472 <udd_g_ctrlreq+0x4>
    1916:	10 91 73 24 	lds	r17, 0x2473	; 0x802473 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    191a:	c0 91 c9 20 	lds	r28, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    191e:	d0 91 ca 20 	lds	r29, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    1922:	e8 81       	ld	r30, Y
    1924:	f9 81       	ldd	r31, Y+1	; 0x01
    1926:	84 81       	ldd	r24, Z+4	; 0x04
    1928:	08 17       	cp	r16, r24
    192a:	e8 f4       	brcc	.+58     	; 0x1966 <udc_process_setup+0x64c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	80 2f       	mov	r24, r16
    1930:	ea db       	rcall	.-2092   	; 0x1106 <udc_update_iface_desc>
    1932:	88 23       	and	r24, r24
    1934:	c1 f0       	breq	.+48     	; 0x1966 <udc_process_setup+0x64c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1936:	f8 01       	movw	r30, r16
    1938:	ff 27       	eor	r31, r31
    193a:	cf 01       	movw	r24, r30
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	ea 81       	ldd	r30, Y+2	; 0x02
    1942:	fb 81       	ldd	r31, Y+3	; 0x03
    1944:	e8 0f       	add	r30, r24
    1946:	f9 1f       	adc	r31, r25
    1948:	c0 81       	ld	r28, Z
    194a:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    194c:	ee 81       	ldd	r30, Y+6	; 0x06
    194e:	ff 81       	ldd	r31, Y+7	; 0x07
    1950:	09 95       	icall
    1952:	68 2f       	mov	r22, r24
    1954:	80 2f       	mov	r24, r16
    1956:	d7 db       	rcall	.-2130   	; 0x1106 <udc_update_iface_desc>
    1958:	88 23       	and	r24, r24
    195a:	29 f0       	breq	.+10     	; 0x1966 <udc_process_setup+0x64c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    195c:	ec 81       	ldd	r30, Y+4	; 0x04
    195e:	fd 81       	ldd	r31, Y+5	; 0x05
    1960:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1962:	81 11       	cpse	r24, r1
    1964:	4b c0       	rjmp	.+150    	; 0x19fc <udc_process_setup+0x6e2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1966:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq>
    196a:	8f 71       	andi	r24, 0x1F	; 31
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	09 f0       	breq	.+2      	; 0x1972 <udc_process_setup+0x658>
    1970:	40 c0       	rjmp	.+128    	; 0x19f2 <udc_process_setup+0x6d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1972:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <udc_num_configuration>
    1976:	88 23       	and	r24, r24
    1978:	b1 f1       	breq	.+108    	; 0x19e6 <udc_process_setup+0x6cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    197a:	a0 91 c9 20 	lds	r26, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    197e:	b0 91 ca 20 	lds	r27, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    1982:	ed 91       	ld	r30, X+
    1984:	fc 91       	ld	r31, X
    1986:	11 97       	sbiw	r26, 0x01	; 1
    1988:	84 81       	ldd	r24, Z+4	; 0x04
    198a:	88 23       	and	r24, r24
    198c:	71 f1       	breq	.+92     	; 0x19ea <udc_process_setup+0x6d0>
    198e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1990:	ec 2f       	mov	r30, r28
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	ee 0f       	add	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	12 96       	adiw	r26, 0x02	; 2
    199a:	8d 91       	ld	r24, X+
    199c:	9c 91       	ld	r25, X
    199e:	13 97       	sbiw	r26, 0x03	; 3
    19a0:	e8 0f       	add	r30, r24
    19a2:	f9 1f       	adc	r31, r25
    19a4:	00 81       	ld	r16, Z
    19a6:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    19a8:	d8 01       	movw	r26, r16
    19aa:	16 96       	adiw	r26, 0x06	; 6
    19ac:	ed 91       	ld	r30, X+
    19ae:	fc 91       	ld	r31, X
    19b0:	17 97       	sbiw	r26, 0x07	; 7
    19b2:	09 95       	icall
    19b4:	68 2f       	mov	r22, r24
    19b6:	8c 2f       	mov	r24, r28
    19b8:	a6 db       	rcall	.-2228   	; 0x1106 <udc_update_iface_desc>
    19ba:	88 23       	and	r24, r24
    19bc:	f9 f0       	breq	.+62     	; 0x19fc <udc_process_setup+0x6e2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    19be:	d8 01       	movw	r26, r16
    19c0:	14 96       	adiw	r26, 0x04	; 4
    19c2:	ed 91       	ld	r30, X+
    19c4:	fc 91       	ld	r31, X
    19c6:	15 97       	sbiw	r26, 0x05	; 5
    19c8:	09 95       	icall
    19ca:	81 11       	cpse	r24, r1
    19cc:	17 c0       	rjmp	.+46     	; 0x19fc <udc_process_setup+0x6e2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    19ce:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19d0:	a0 91 c9 20 	lds	r26, 0x20C9	; 0x8020c9 <udc_ptr_conf>
    19d4:	b0 91 ca 20 	lds	r27, 0x20CA	; 0x8020ca <udc_ptr_conf+0x1>
    19d8:	ed 91       	ld	r30, X+
    19da:	fc 91       	ld	r31, X
    19dc:	11 97       	sbiw	r26, 0x01	; 1
    19de:	94 81       	ldd	r25, Z+4	; 0x04
    19e0:	c9 17       	cp	r28, r25
    19e2:	b0 f2       	brcs	.-84     	; 0x1990 <udc_process_setup+0x676>
    19e4:	0b c0       	rjmp	.+22     	; 0x19fc <udc_process_setup+0x6e2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	09 c0       	rjmp	.+18     	; 0x19fc <udc_process_setup+0x6e2>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	07 c0       	rjmp	.+14     	; 0x19fc <udc_process_setup+0x6e2>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <udc_process_setup+0x6e2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <udc_process_setup+0x6e2>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <udc_process_setup+0x6e2>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	08 95       	ret

00001a06 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1a06:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1a08:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1a0a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1a0c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1a0e:	60 83       	st	Z, r22
	ret                             // Return to caller
    1a10:	08 95       	ret

00001a12 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1a12:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1a16:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1a18:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1a1a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1a1e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1a20:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1a24:	08 95       	ret

00001a26 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1a26:	81 11       	cpse	r24, r1
    1a28:	22 c0       	rjmp	.+68     	; 0x1a6e <udd_sleep_mode+0x48>
    1a2a:	90 91 64 22 	lds	r25, 0x2264	; 0x802264 <udd_b_idle>
    1a2e:	99 23       	and	r25, r25
    1a30:	d9 f0       	breq	.+54     	; 0x1a68 <udd_sleep_mode+0x42>
    1a32:	90 91 5d 2e 	lds	r25, 0x2E5D	; 0x802e5d <sleepmgr_locks+0x1>
    1a36:	91 11       	cpse	r25, r1
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <udd_sleep_mode+0x16>
    1a3a:	ff cf       	rjmp	.-2      	; 0x1a3a <udd_sleep_mode+0x14>
    1a3c:	2f b7       	in	r18, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	ec e5       	ldi	r30, 0x5C	; 92
    1a42:	fe e2       	ldi	r31, 0x2E	; 46
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	91 50       	subi	r25, 0x01	; 1
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	2f bf       	out	0x3f, r18	; 63
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <udd_sleep_mode+0x42>
    1a4e:	90 91 5d 2e 	lds	r25, 0x2E5D	; 0x802e5d <sleepmgr_locks+0x1>
    1a52:	9f 3f       	cpi	r25, 0xFF	; 255
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <udd_sleep_mode+0x32>
    1a56:	ff cf       	rjmp	.-2      	; 0x1a56 <udd_sleep_mode+0x30>
    1a58:	2f b7       	in	r18, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	ec e5       	ldi	r30, 0x5C	; 92
    1a5e:	fe e2       	ldi	r31, 0x2E	; 46
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	9f 5f       	subi	r25, 0xFF	; 255
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	2f bf       	out	0x3f, r18	; 63
    1a68:	80 93 64 22 	sts	0x2264, r24	; 0x802264 <udd_b_idle>
    1a6c:	08 95       	ret
    1a6e:	90 91 64 22 	lds	r25, 0x2264	; 0x802264 <udd_b_idle>
    1a72:	99 23       	and	r25, r25
    1a74:	61 f3       	breq	.-40     	; 0x1a4e <udd_sleep_mode+0x28>
    1a76:	f8 cf       	rjmp	.-16     	; 0x1a68 <udd_sleep_mode+0x42>

00001a78 <udd_ctrl_init>:
    1a78:	0f 93       	push	r16
    1a7a:	e8 ec       	ldi	r30, 0xC8	; 200
    1a7c:	f4 e0       	ldi	r31, 0x04	; 4
    1a7e:	80 81       	ld	r24, Z
    1a80:	8f 7d       	andi	r24, 0xDF	; 223
    1a82:	80 83       	st	Z, r24
    1a84:	80 81       	ld	r24, Z
    1a86:	8f 7d       	andi	r24, 0xDF	; 223
    1a88:	80 83       	st	Z, r24
    1a8a:	e8 e2       	ldi	r30, 0x28	; 40
    1a8c:	f2 e2       	ldi	r31, 0x22	; 34
    1a8e:	02 e0       	ldi	r16, 0x02	; 2
    1a90:	05 93       	las	Z, r16
    1a92:	10 92 2a 22 	sts	0x222A, r1	; 0x80222a <udd_sram+0x1a>
    1a96:	10 92 2b 22 	sts	0x222B, r1	; 0x80222b <udd_sram+0x1b>
    1a9a:	00 e2       	ldi	r16, 0x20	; 32
    1a9c:	06 93       	lac	Z, r16
    1a9e:	00 e4       	ldi	r16, 0x40	; 64
    1aa0:	06 93       	lac	Z, r16
    1aa2:	e0 e2       	ldi	r30, 0x20	; 32
    1aa4:	f2 e2       	ldi	r31, 0x22	; 34
    1aa6:	00 e2       	ldi	r16, 0x20	; 32
    1aa8:	06 93       	lac	Z, r16
    1aaa:	00 e4       	ldi	r16, 0x40	; 64
    1aac:	06 93       	lac	Z, r16
    1aae:	ee e6       	ldi	r30, 0x6E	; 110
    1ab0:	f4 e2       	ldi	r31, 0x24	; 36
    1ab2:	14 86       	std	Z+12, r1	; 0x0c
    1ab4:	15 86       	std	Z+13, r1	; 0x0d
    1ab6:	16 86       	std	Z+14, r1	; 0x0e
    1ab8:	17 86       	std	Z+15, r1	; 0x0f
    1aba:	12 86       	std	Z+10, r1	; 0x0a
    1abc:	13 86       	std	Z+11, r1	; 0x0b
    1abe:	10 92 0d 22 	sts	0x220D, r1	; 0x80220d <udd_ep_control_state>
    1ac2:	0f 91       	pop	r16
    1ac4:	08 95       	ret

00001ac6 <udd_ctrl_stall_data>:
    1ac6:	0f 93       	push	r16
    1ac8:	85 e0       	ldi	r24, 0x05	; 5
    1aca:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1ace:	e9 e2       	ldi	r30, 0x29	; 41
    1ad0:	f2 e2       	ldi	r31, 0x22	; 34
    1ad2:	04 e0       	ldi	r16, 0x04	; 4
    1ad4:	05 93       	las	Z, r16
    1ad6:	e1 e2       	ldi	r30, 0x21	; 33
    1ad8:	f2 e2       	ldi	r31, 0x22	; 34
    1ada:	04 e0       	ldi	r16, 0x04	; 4
    1adc:	05 93       	las	Z, r16
    1ade:	0f 91       	pop	r16
    1ae0:	08 95       	ret

00001ae2 <udd_ctrl_send_zlp_in>:
    1ae2:	0f 93       	push	r16
    1ae4:	83 e0       	ldi	r24, 0x03	; 3
    1ae6:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1aea:	10 92 2a 22 	sts	0x222A, r1	; 0x80222a <udd_sram+0x1a>
    1aee:	10 92 2b 22 	sts	0x222B, r1	; 0x80222b <udd_sram+0x1b>
    1af2:	e8 e2       	ldi	r30, 0x28	; 40
    1af4:	f2 e2       	ldi	r31, 0x22	; 34
    1af6:	02 e0       	ldi	r16, 0x02	; 2
    1af8:	06 93       	lac	Z, r16
    1afa:	0f 91       	pop	r16
    1afc:	08 95       	ret

00001afe <udd_ctrl_endofrequest>:
    1afe:	e0 91 7a 24 	lds	r30, 0x247A	; 0x80247a <udd_g_ctrlreq+0xc>
    1b02:	f0 91 7b 24 	lds	r31, 0x247B	; 0x80247b <udd_g_ctrlreq+0xd>
    1b06:	30 97       	sbiw	r30, 0x00	; 0
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <udd_ctrl_endofrequest+0xe>
    1b0a:	09 95       	icall
    1b0c:	08 95       	ret

00001b0e <udd_ctrl_in_sent>:
    1b0e:	0f 93       	push	r16
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    1b18:	83 30       	cpi	r24, 0x03	; 3
    1b1a:	19 f4       	brne	.+6      	; 0x1b22 <udd_ctrl_in_sent+0x14>
    1b1c:	f0 df       	rcall	.-32     	; 0x1afe <udd_ctrl_endofrequest>
    1b1e:	ac df       	rcall	.-168    	; 0x1a78 <udd_ctrl_init>
    1b20:	5e c0       	rjmp	.+188    	; 0x1bde <udd_ctrl_in_sent+0xd0>
    1b22:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udd_ctrl_payload_nb_trans>
    1b26:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1b2a:	c0 91 78 24 	lds	r28, 0x2478	; 0x802478 <udd_g_ctrlreq+0xa>
    1b2e:	d0 91 79 24 	lds	r29, 0x2479	; 0x802479 <udd_g_ctrlreq+0xb>
    1b32:	c8 1b       	sub	r28, r24
    1b34:	d9 0b       	sbc	r29, r25
    1b36:	71 f5       	brne	.+92     	; 0x1b94 <udd_ctrl_in_sent+0x86>
    1b38:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    1b3c:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    1b40:	82 0f       	add	r24, r18
    1b42:	93 1f       	adc	r25, r19
    1b44:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    1b48:	90 93 0c 22 	sts	0x220C, r25	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    1b4c:	20 91 74 24 	lds	r18, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    1b50:	30 91 75 24 	lds	r19, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    1b54:	82 17       	cp	r24, r18
    1b56:	93 07       	cpc	r25, r19
    1b58:	21 f0       	breq	.+8      	; 0x1b62 <udd_ctrl_in_sent+0x54>
    1b5a:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <b_shortpacket.5272>
    1b5e:	88 23       	and	r24, r24
    1b60:	41 f0       	breq	.+16     	; 0x1b72 <udd_ctrl_in_sent+0x64>
    1b62:	84 e0       	ldi	r24, 0x04	; 4
    1b64:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1b68:	e0 e2       	ldi	r30, 0x20	; 32
    1b6a:	f2 e2       	ldi	r31, 0x22	; 34
    1b6c:	02 e0       	ldi	r16, 0x02	; 2
    1b6e:	06 93       	lac	Z, r16
    1b70:	36 c0       	rjmp	.+108    	; 0x1bde <udd_ctrl_in_sent+0xd0>
    1b72:	e0 91 7c 24 	lds	r30, 0x247C	; 0x80247c <udd_g_ctrlreq+0xe>
    1b76:	f0 91 7d 24 	lds	r31, 0x247D	; 0x80247d <udd_g_ctrlreq+0xf>
    1b7a:	30 97       	sbiw	r30, 0x00	; 0
    1b7c:	99 f0       	breq	.+38     	; 0x1ba4 <udd_ctrl_in_sent+0x96>
    1b7e:	09 95       	icall
    1b80:	88 23       	and	r24, r24
    1b82:	81 f0       	breq	.+32     	; 0x1ba4 <udd_ctrl_in_sent+0x96>
    1b84:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_payload_nb_trans>
    1b88:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1b8c:	c0 91 78 24 	lds	r28, 0x2478	; 0x802478 <udd_g_ctrlreq+0xa>
    1b90:	d0 91 79 24 	lds	r29, 0x2479	; 0x802479 <udd_g_ctrlreq+0xb>
    1b94:	c0 34       	cpi	r28, 0x40	; 64
    1b96:	d1 05       	cpc	r29, r1
    1b98:	28 f0       	brcs	.+10     	; 0x1ba4 <udd_ctrl_in_sent+0x96>
    1b9a:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <b_shortpacket.5272>
    1b9e:	c0 e4       	ldi	r28, 0x40	; 64
    1ba0:	d0 e0       	ldi	r29, 0x00	; 0
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <udd_ctrl_in_sent+0x9c>
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <b_shortpacket.5272>
    1baa:	e0 e1       	ldi	r30, 0x10	; 16
    1bac:	f2 e2       	ldi	r31, 0x22	; 34
    1bae:	c2 8f       	std	Z+26, r28	; 0x1a
    1bb0:	d3 8f       	std	Z+27, r29	; 0x1b
    1bb2:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udd_ctrl_payload_nb_trans>
    1bb6:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1bba:	20 91 76 24 	lds	r18, 0x2476	; 0x802476 <udd_g_ctrlreq+0x8>
    1bbe:	30 91 77 24 	lds	r19, 0x2477	; 0x802477 <udd_g_ctrlreq+0x9>
    1bc2:	28 0f       	add	r18, r24
    1bc4:	39 1f       	adc	r19, r25
    1bc6:	24 8f       	std	Z+28, r18	; 0x1c
    1bc8:	35 8f       	std	Z+29, r19	; 0x1d
    1bca:	c8 0f       	add	r28, r24
    1bcc:	d9 1f       	adc	r29, r25
    1bce:	c0 93 09 22 	sts	0x2209, r28	; 0x802209 <udd_ctrl_payload_nb_trans>
    1bd2:	d0 93 0a 22 	sts	0x220A, r29	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1bd6:	e8 e2       	ldi	r30, 0x28	; 40
    1bd8:	f2 e2       	ldi	r31, 0x22	; 34
    1bda:	02 e0       	ldi	r16, 0x02	; 2
    1bdc:	06 93       	lac	Z, r16
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret

00001be6 <udd_ep_get_size>:
    1be6:	fc 01       	movw	r30, r24
    1be8:	81 81       	ldd	r24, Z+1	; 0x01
    1bea:	e8 2f       	mov	r30, r24
    1bec:	e7 70       	andi	r30, 0x07	; 7
    1bee:	8e 2f       	mov	r24, r30
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	31 97       	sbiw	r30, 0x01	; 1
    1bf6:	e7 30       	cpi	r30, 0x07	; 7
    1bf8:	f1 05       	cpc	r31, r1
    1bfa:	c0 f4       	brcc	.+48     	; 0x1c2c <udd_ep_get_size+0x46>
    1bfc:	e2 5e       	subi	r30, 0xE2	; 226
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1c00:	7a c6       	rjmp	.+3316   	; 0x28f6 <__tablejump2__>
    1c02:	80 e1       	ldi	r24, 0x10	; 16
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	08 95       	ret
    1c08:	80 e2       	ldi	r24, 0x20	; 32
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	08 95       	ret
    1c0e:	80 e4       	ldi	r24, 0x40	; 64
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	08 95       	ret
    1c14:	80 e8       	ldi	r24, 0x80	; 128
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	08 95       	ret
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	08 95       	ret
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	08 95       	ret
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
    1c28:	93 e0       	ldi	r25, 0x03	; 3
    1c2a:	08 95       	ret
    1c2c:	88 e0       	ldi	r24, 0x08	; 8
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	08 95       	ret

00001c32 <udd_ep_get_job>:
    1c32:	28 2f       	mov	r18, r24
    1c34:	2f 70       	andi	r18, 0x0F	; 15
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	22 0f       	add	r18, r18
    1c3a:	33 1f       	adc	r19, r19
    1c3c:	08 2e       	mov	r0, r24
    1c3e:	00 0c       	add	r0, r0
    1c40:	99 0b       	sbc	r25, r25
    1c42:	88 27       	eor	r24, r24
    1c44:	99 0f       	add	r25, r25
    1c46:	88 1f       	adc	r24, r24
    1c48:	99 27       	eor	r25, r25
    1c4a:	82 0f       	add	r24, r18
    1c4c:	93 1f       	adc	r25, r19
    1c4e:	02 97       	sbiw	r24, 0x02	; 2
    1c50:	9c 01       	movw	r18, r24
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	22 0f       	add	r18, r18
    1c58:	33 1f       	adc	r19, r19
    1c5a:	22 0f       	add	r18, r18
    1c5c:	33 1f       	adc	r19, r19
    1c5e:	82 0f       	add	r24, r18
    1c60:	93 1f       	adc	r25, r19
    1c62:	8d 56       	subi	r24, 0x6D	; 109
    1c64:	9e 4d       	sbci	r25, 0xDE	; 222
    1c66:	08 95       	ret

00001c68 <udd_ctrl_interrupt_tc_setup>:
    1c68:	0f 93       	push	r16
    1c6a:	cf 93       	push	r28
    1c6c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1c70:	80 ff       	sbrs	r24, 0
    1c72:	62 c0       	rjmp	.+196    	; 0x1d38 <udd_ctrl_interrupt_tc_setup+0xd0>
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1c7a:	e0 e2       	ldi	r30, 0x20	; 32
    1c7c:	f2 e2       	ldi	r31, 0x22	; 34
    1c7e:	00 e8       	ldi	r16, 0x80	; 128
    1c80:	06 93       	lac	Z, r16
    1c82:	e8 e2       	ldi	r30, 0x28	; 40
    1c84:	f2 e2       	ldi	r31, 0x22	; 34
    1c86:	00 e8       	ldi	r16, 0x80	; 128
    1c88:	06 93       	lac	Z, r16
    1c8a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1c8e:	e0 e2       	ldi	r30, 0x20	; 32
    1c90:	f2 e2       	ldi	r31, 0x22	; 34
    1c92:	00 e1       	ldi	r16, 0x10	; 16
    1c94:	06 93       	lac	Z, r16
    1c96:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    1c9a:	88 23       	and	r24, r24
    1c9c:	29 f0       	breq	.+10     	; 0x1ca8 <udd_ctrl_interrupt_tc_setup+0x40>
    1c9e:	83 50       	subi	r24, 0x03	; 3
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	08 f4       	brcc	.+2      	; 0x1ca6 <udd_ctrl_interrupt_tc_setup+0x3e>
    1ca4:	2c df       	rcall	.-424    	; 0x1afe <udd_ctrl_endofrequest>
    1ca6:	e8 de       	rcall	.-560    	; 0x1a78 <udd_ctrl_init>
    1ca8:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udd_sram+0x12>
    1cac:	90 91 23 22 	lds	r25, 0x2223	; 0x802223 <udd_sram+0x13>
    1cb0:	08 97       	sbiw	r24, 0x08	; 8
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <udd_ctrl_interrupt_tc_setup+0x4e>
    1cb4:	43 c0       	rjmp	.+134    	; 0x1d3c <udd_ctrl_interrupt_tc_setup+0xd4>
    1cb6:	88 e0       	ldi	r24, 0x08	; 8
    1cb8:	e9 ec       	ldi	r30, 0xC9	; 201
    1cba:	f1 e2       	ldi	r31, 0x21	; 33
    1cbc:	ae e6       	ldi	r26, 0x6E	; 110
    1cbe:	b4 e2       	ldi	r27, 0x24	; 36
    1cc0:	01 90       	ld	r0, Z+
    1cc2:	0d 92       	st	X+, r0
    1cc4:	8a 95       	dec	r24
    1cc6:	e1 f7       	brne	.-8      	; 0x1cc0 <udd_ctrl_interrupt_tc_setup+0x58>
    1cc8:	e8 ec       	ldi	r30, 0xC8	; 200
    1cca:	f4 e0       	ldi	r31, 0x04	; 4
    1ccc:	80 81       	ld	r24, Z
    1cce:	80 62       	ori	r24, 0x20	; 32
    1cd0:	80 83       	st	Z, r24
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 62       	ori	r24, 0x20	; 32
    1cd6:	80 83       	st	Z, r24
    1cd8:	20 db       	rcall	.-2496   	; 0x131a <udc_process_setup>
    1cda:	c8 2f       	mov	r28, r24
    1cdc:	81 11       	cpse	r24, r1
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <udd_ctrl_interrupt_tc_setup+0x7e>
    1ce0:	f2 de       	rcall	.-540    	; 0x1ac6 <udd_ctrl_stall_data>
    1ce2:	c1 e0       	ldi	r28, 0x01	; 1
    1ce4:	2c c0       	rjmp	.+88     	; 0x1d3e <udd_ctrl_interrupt_tc_setup+0xd6>
    1ce6:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq>
    1cea:	88 23       	and	r24, r24
    1cec:	6c f4       	brge	.+26     	; 0x1d08 <udd_ctrl_interrupt_tc_setup+0xa0>
    1cee:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    1cf2:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    1cf6:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_payload_nb_trans>
    1cfa:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1d04:	04 df       	rcall	.-504    	; 0x1b0e <udd_ctrl_in_sent>
    1d06:	1b c0       	rjmp	.+54     	; 0x1d3e <udd_ctrl_interrupt_tc_setup+0xd6>
    1d08:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    1d0c:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    1d10:	89 2b       	or	r24, r25
    1d12:	11 f4       	brne	.+4      	; 0x1d18 <udd_ctrl_interrupt_tc_setup+0xb0>
    1d14:	e6 de       	rcall	.-564    	; 0x1ae2 <udd_ctrl_send_zlp_in>
    1d16:	13 c0       	rjmp	.+38     	; 0x1d3e <udd_ctrl_interrupt_tc_setup+0xd6>
    1d18:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    1d1c:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    1d20:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_payload_nb_trans>
    1d24:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
    1d2e:	e0 e2       	ldi	r30, 0x20	; 32
    1d30:	f2 e2       	ldi	r31, 0x22	; 34
    1d32:	02 e0       	ldi	r16, 0x02	; 2
    1d34:	06 93       	lac	Z, r16
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <udd_ctrl_interrupt_tc_setup+0xd6>
    1d38:	c0 e0       	ldi	r28, 0x00	; 0
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <udd_ctrl_interrupt_tc_setup+0xd6>
    1d3c:	c1 e0       	ldi	r28, 0x01	; 1
    1d3e:	8c 2f       	mov	r24, r28
    1d40:	cf 91       	pop	r28
    1d42:	0f 91       	pop	r16
    1d44:	08 95       	ret

00001d46 <udd_ep_trans_complet>:
    1d46:	8f 92       	push	r8
    1d48:	9f 92       	push	r9
    1d4a:	af 92       	push	r10
    1d4c:	bf 92       	push	r11
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	d8 2e       	mov	r13, r24
    1d5e:	69 df       	rcall	.-302    	; 0x1c32 <udd_ep_get_job>
    1d60:	8c 01       	movw	r16, r24
    1d62:	bd 2c       	mov	r11, r13
    1d64:	bb 1c       	adc	r11, r11
    1d66:	bb 24       	eor	r11, r11
    1d68:	bb 1c       	adc	r11, r11
    1d6a:	cd 2d       	mov	r28, r13
    1d6c:	cf 70       	andi	r28, 0x0F	; 15
    1d6e:	d0 e0       	ldi	r29, 0x00	; 0
    1d70:	cc 0f       	add	r28, r28
    1d72:	dd 1f       	adc	r29, r29
    1d74:	cb 0d       	add	r28, r11
    1d76:	d1 1d       	adc	r29, r1
    1d78:	ce 01       	movw	r24, r28
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	9c 01       	movw	r18, r24
    1d88:	20 5e       	subi	r18, 0xE0	; 224
    1d8a:	3d 4d       	sbci	r19, 0xDD	; 221
    1d8c:	79 01       	movw	r14, r18
    1d8e:	c9 01       	movw	r24, r18
    1d90:	2a df       	rcall	.-428    	; 0x1be6 <udd_ep_get_size>
    1d92:	4c 01       	movw	r8, r24
    1d94:	bb 20       	and	r11, r11
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <udd_ep_trans_complet+0x54>
    1d98:	70 c0       	rjmp	.+224    	; 0x1e7a <udd_ep_trans_complet+0x134>
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	ee 0f       	add	r30, r30
    1d9e:	ff 1f       	adc	r31, r31
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	ee 0f       	add	r30, r30
    1da6:	ff 1f       	adc	r31, r31
    1da8:	e0 5f       	subi	r30, 0xF0	; 240
    1daa:	fd 4d       	sbci	r31, 0xDD	; 221
    1dac:	26 89       	ldd	r18, Z+22	; 0x16
    1dae:	37 89       	ldd	r19, Z+23	; 0x17
    1db0:	d8 01       	movw	r26, r16
    1db2:	15 96       	adiw	r26, 0x05	; 5
    1db4:	8d 91       	ld	r24, X+
    1db6:	9c 91       	ld	r25, X
    1db8:	16 97       	sbiw	r26, 0x06	; 6
    1dba:	82 0f       	add	r24, r18
    1dbc:	93 1f       	adc	r25, r19
    1dbe:	15 96       	adiw	r26, 0x05	; 5
    1dc0:	8d 93       	st	X+, r24
    1dc2:	9c 93       	st	X, r25
    1dc4:	16 97       	sbiw	r26, 0x06	; 6
    1dc6:	13 96       	adiw	r26, 0x03	; 3
    1dc8:	2d 91       	ld	r18, X+
    1dca:	3c 91       	ld	r19, X
    1dcc:	14 97       	sbiw	r26, 0x04	; 4
    1dce:	82 17       	cp	r24, r18
    1dd0:	93 07       	cpc	r25, r19
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <udd_ep_trans_complet+0x90>
    1dd4:	3c c0       	rjmp	.+120    	; 0x1e4e <udd_ep_trans_complet+0x108>
    1dd6:	28 1b       	sub	r18, r24
    1dd8:	39 0b       	sbc	r19, r25
    1dda:	21 15       	cp	r18, r1
    1ddc:	b4 e0       	ldi	r27, 0x04	; 4
    1dde:	3b 07       	cpc	r19, r27
    1de0:	38 f0       	brcs	.+14     	; 0x1df0 <udd_ep_trans_complet+0xaa>
    1de2:	2f ef       	ldi	r18, 0xFF	; 255
    1de4:	33 e0       	ldi	r19, 0x03	; 3
    1de6:	c9 01       	movw	r24, r18
    1de8:	b4 01       	movw	r22, r8
    1dea:	71 d5       	rcall	.+2786   	; 0x28ce <__udivmodhi4>
    1dec:	28 1b       	sub	r18, r24
    1dee:	39 0b       	sbc	r19, r25
    1df0:	f8 01       	movw	r30, r16
    1df2:	80 81       	ld	r24, Z
    1df4:	81 ff       	sbrs	r24, 1
    1df6:	09 c0       	rjmp	.+18     	; 0x1e0a <udd_ep_trans_complet+0xc4>
    1df8:	c9 01       	movw	r24, r18
    1dfa:	b4 01       	movw	r22, r8
    1dfc:	68 d5       	rcall	.+2768   	; 0x28ce <__udivmodhi4>
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	89 2b       	or	r24, r25
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <udd_ep_trans_complet+0xc0>
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	84 2f       	mov	r24, r20
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <udd_ep_trans_complet+0xc6>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	d8 01       	movw	r26, r16
    1e0e:	9c 91       	ld	r25, X
    1e10:	80 fb       	bst	r24, 0
    1e12:	91 f9       	bld	r25, 1
    1e14:	9c 93       	st	X, r25
    1e16:	cc 0f       	add	r28, r28
    1e18:	dd 1f       	adc	r29, r29
    1e1a:	cc 0f       	add	r28, r28
    1e1c:	dd 1f       	adc	r29, r29
    1e1e:	cc 0f       	add	r28, r28
    1e20:	dd 1f       	adc	r29, r29
    1e22:	c0 5f       	subi	r28, 0xF0	; 240
    1e24:	dd 4d       	sbci	r29, 0xDD	; 221
    1e26:	1e 8a       	std	Y+22, r1	; 0x16
    1e28:	1f 8a       	std	Y+23, r1	; 0x17
    1e2a:	2a 8b       	std	Y+18, r18	; 0x12
    1e2c:	3b 8b       	std	Y+19, r19	; 0x13
    1e2e:	11 96       	adiw	r26, 0x01	; 1
    1e30:	2d 91       	ld	r18, X+
    1e32:	3c 91       	ld	r19, X
    1e34:	12 97       	sbiw	r26, 0x02	; 2
    1e36:	15 96       	adiw	r26, 0x05	; 5
    1e38:	8d 91       	ld	r24, X+
    1e3a:	9c 91       	ld	r25, X
    1e3c:	16 97       	sbiw	r26, 0x06	; 6
    1e3e:	82 0f       	add	r24, r18
    1e40:	93 1f       	adc	r25, r19
    1e42:	8c 8b       	std	Y+20, r24	; 0x14
    1e44:	9d 8b       	std	Y+21, r25	; 0x15
    1e46:	f7 01       	movw	r30, r14
    1e48:	02 e0       	ldi	r16, 0x02	; 2
    1e4a:	06 93       	lac	Z, r16
    1e4c:	ca c0       	rjmp	.+404    	; 0x1fe2 <udd_ep_trans_complet+0x29c>
    1e4e:	d8 01       	movw	r26, r16
    1e50:	8c 91       	ld	r24, X
    1e52:	81 ff       	sbrs	r24, 1
    1e54:	b3 c0       	rjmp	.+358    	; 0x1fbc <udd_ep_trans_complet+0x276>
    1e56:	8d 7f       	andi	r24, 0xFD	; 253
    1e58:	8c 93       	st	X, r24
    1e5a:	cc 0f       	add	r28, r28
    1e5c:	dd 1f       	adc	r29, r29
    1e5e:	cc 0f       	add	r28, r28
    1e60:	dd 1f       	adc	r29, r29
    1e62:	cc 0f       	add	r28, r28
    1e64:	dd 1f       	adc	r29, r29
    1e66:	c0 5f       	subi	r28, 0xF0	; 240
    1e68:	dd 4d       	sbci	r29, 0xDD	; 221
    1e6a:	1e 8a       	std	Y+22, r1	; 0x16
    1e6c:	1f 8a       	std	Y+23, r1	; 0x17
    1e6e:	1a 8a       	std	Y+18, r1	; 0x12
    1e70:	1b 8a       	std	Y+19, r1	; 0x13
    1e72:	f7 01       	movw	r30, r14
    1e74:	02 e0       	ldi	r16, 0x02	; 2
    1e76:	06 93       	lac	Z, r16
    1e78:	b4 c0       	rjmp	.+360    	; 0x1fe2 <udd_ep_trans_complet+0x29c>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	e0 5f       	subi	r30, 0xF0	; 240
    1e8a:	fd 4d       	sbci	r31, 0xDD	; 221
    1e8c:	a2 88       	ldd	r10, Z+18	; 0x12
    1e8e:	b3 88       	ldd	r11, Z+19	; 0x13
    1e90:	d8 01       	movw	r26, r16
    1e92:	8c 91       	ld	r24, X
    1e94:	82 ff       	sbrs	r24, 2
    1e96:	19 c0       	rjmp	.+50     	; 0x1eca <udd_ep_trans_complet+0x184>
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	ed 91       	ld	r30, X+
    1e9c:	fc 91       	ld	r31, X
    1e9e:	12 97       	sbiw	r26, 0x02	; 2
    1ea0:	15 96       	adiw	r26, 0x05	; 5
    1ea2:	2d 91       	ld	r18, X+
    1ea4:	3c 91       	ld	r19, X
    1ea6:	16 97       	sbiw	r26, 0x06	; 6
    1ea8:	13 96       	adiw	r26, 0x03	; 3
    1eaa:	8d 91       	ld	r24, X+
    1eac:	9c 91       	ld	r25, X
    1eae:	14 97       	sbiw	r26, 0x04	; 4
    1eb0:	b4 01       	movw	r22, r8
    1eb2:	0d d5       	rcall	.+2586   	; 0x28ce <__udivmodhi4>
    1eb4:	b0 e4       	ldi	r27, 0x40	; 64
    1eb6:	db 9e       	mul	r13, r27
    1eb8:	b0 01       	movw	r22, r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	6d 56       	subi	r22, 0x6D	; 109
    1ebe:	7f 4d       	sbci	r23, 0xDF	; 223
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	cf 01       	movw	r24, r30
    1ec4:	82 0f       	add	r24, r18
    1ec6:	93 1f       	adc	r25, r19
    1ec8:	1c d5       	rcall	.+2616   	; 0x2902 <memcpy>
    1eca:	f8 01       	movw	r30, r16
    1ecc:	25 81       	ldd	r18, Z+5	; 0x05
    1ece:	36 81       	ldd	r19, Z+6	; 0x06
    1ed0:	2a 0d       	add	r18, r10
    1ed2:	3b 1d       	adc	r19, r11
    1ed4:	25 83       	std	Z+5, r18	; 0x05
    1ed6:	36 83       	std	Z+6, r19	; 0x06
    1ed8:	83 81       	ldd	r24, Z+3	; 0x03
    1eda:	94 81       	ldd	r25, Z+4	; 0x04
    1edc:	82 17       	cp	r24, r18
    1ede:	93 07       	cpc	r25, r19
    1ee0:	68 f4       	brcc	.+26     	; 0x1efc <udd_ep_trans_complet+0x1b6>
    1ee2:	85 83       	std	Z+5, r24	; 0x05
    1ee4:	96 83       	std	Z+6, r25	; 0x06
    1ee6:	cc 0f       	add	r28, r28
    1ee8:	dd 1f       	adc	r29, r29
    1eea:	cc 0f       	add	r28, r28
    1eec:	dd 1f       	adc	r29, r29
    1eee:	cc 0f       	add	r28, r28
    1ef0:	dd 1f       	adc	r29, r29
    1ef2:	c0 5f       	subi	r28, 0xF0	; 240
    1ef4:	dd 4d       	sbci	r29, 0xDD	; 221
    1ef6:	8e 89       	ldd	r24, Y+22	; 0x16
    1ef8:	9f 89       	ldd	r25, Y+23	; 0x17
    1efa:	60 c0       	rjmp	.+192    	; 0x1fbc <udd_ep_trans_complet+0x276>
    1efc:	fe 01       	movw	r30, r28
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	ee 0f       	add	r30, r30
    1f04:	ff 1f       	adc	r31, r31
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	e0 5f       	subi	r30, 0xF0	; 240
    1f0c:	fd 4d       	sbci	r31, 0xDD	; 221
    1f0e:	46 89       	ldd	r20, Z+22	; 0x16
    1f10:	57 89       	ldd	r21, Z+23	; 0x17
    1f12:	4a 15       	cp	r20, r10
    1f14:	5b 05       	cpc	r21, r11
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <udd_ep_trans_complet+0x1d4>
    1f18:	51 c0       	rjmp	.+162    	; 0x1fbc <udd_ep_trans_complet+0x276>
    1f1a:	28 17       	cp	r18, r24
    1f1c:	39 07       	cpc	r19, r25
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <udd_ep_trans_complet+0x1dc>
    1f20:	4d c0       	rjmp	.+154    	; 0x1fbc <udd_ep_trans_complet+0x276>
    1f22:	ac 01       	movw	r20, r24
    1f24:	42 1b       	sub	r20, r18
    1f26:	53 0b       	sbc	r21, r19
    1f28:	9a 01       	movw	r18, r20
    1f2a:	21 15       	cp	r18, r1
    1f2c:	54 e0       	ldi	r21, 0x04	; 4
    1f2e:	35 07       	cpc	r19, r21
    1f30:	50 f0       	brcs	.+20     	; 0x1f46 <udd_ep_trans_complet+0x200>
    1f32:	2f ef       	ldi	r18, 0xFF	; 255
    1f34:	33 e0       	ldi	r19, 0x03	; 3
    1f36:	c9 01       	movw	r24, r18
    1f38:	b4 01       	movw	r22, r8
    1f3a:	c9 d4       	rcall	.+2450   	; 0x28ce <__udivmodhi4>
    1f3c:	d9 01       	movw	r26, r18
    1f3e:	a8 1b       	sub	r26, r24
    1f40:	b9 0b       	sbc	r27, r25
    1f42:	cd 01       	movw	r24, r26
    1f44:	07 c0       	rjmp	.+14     	; 0x1f54 <udd_ep_trans_complet+0x20e>
    1f46:	c9 01       	movw	r24, r18
    1f48:	b4 01       	movw	r22, r8
    1f4a:	c1 d4       	rcall	.+2434   	; 0x28ce <__udivmodhi4>
    1f4c:	f9 01       	movw	r30, r18
    1f4e:	e8 1b       	sub	r30, r24
    1f50:	f9 0b       	sbc	r31, r25
    1f52:	cf 01       	movw	r24, r30
    1f54:	fe 01       	movw	r30, r28
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	e0 5f       	subi	r30, 0xF0	; 240
    1f64:	fd 4d       	sbci	r31, 0xDD	; 221
    1f66:	12 8a       	std	Z+18, r1	; 0x12
    1f68:	13 8a       	std	Z+19, r1	; 0x13
    1f6a:	88 15       	cp	r24, r8
    1f6c:	99 05       	cpc	r25, r9
    1f6e:	78 f4       	brcc	.+30     	; 0x1f8e <udd_ep_trans_complet+0x248>
    1f70:	d8 01       	movw	r26, r16
    1f72:	8c 91       	ld	r24, X
    1f74:	84 60       	ori	r24, 0x04	; 4
    1f76:	8c 93       	st	X, r24
    1f78:	b0 e4       	ldi	r27, 0x40	; 64
    1f7a:	db 9e       	mul	r13, r27
    1f7c:	c0 01       	movw	r24, r0
    1f7e:	11 24       	eor	r1, r1
    1f80:	8d 56       	subi	r24, 0x6D	; 109
    1f82:	9f 4d       	sbci	r25, 0xDF	; 223
    1f84:	84 8b       	std	Z+20, r24	; 0x14
    1f86:	95 8b       	std	Z+21, r25	; 0x15
    1f88:	86 8a       	std	Z+22, r8	; 0x16
    1f8a:	97 8a       	std	Z+23, r9	; 0x17
    1f8c:	13 c0       	rjmp	.+38     	; 0x1fb4 <udd_ep_trans_complet+0x26e>
    1f8e:	f8 01       	movw	r30, r16
    1f90:	41 81       	ldd	r20, Z+1	; 0x01
    1f92:	52 81       	ldd	r21, Z+2	; 0x02
    1f94:	25 81       	ldd	r18, Z+5	; 0x05
    1f96:	36 81       	ldd	r19, Z+6	; 0x06
    1f98:	24 0f       	add	r18, r20
    1f9a:	35 1f       	adc	r19, r21
    1f9c:	cc 0f       	add	r28, r28
    1f9e:	dd 1f       	adc	r29, r29
    1fa0:	cc 0f       	add	r28, r28
    1fa2:	dd 1f       	adc	r29, r29
    1fa4:	cc 0f       	add	r28, r28
    1fa6:	dd 1f       	adc	r29, r29
    1fa8:	c0 5f       	subi	r28, 0xF0	; 240
    1faa:	dd 4d       	sbci	r29, 0xDD	; 221
    1fac:	2c 8b       	std	Y+20, r18	; 0x14
    1fae:	3d 8b       	std	Y+21, r19	; 0x15
    1fb0:	8e 8b       	std	Y+22, r24	; 0x16
    1fb2:	9f 8b       	std	Y+23, r25	; 0x17
    1fb4:	f7 01       	movw	r30, r14
    1fb6:	02 e0       	ldi	r16, 0x02	; 2
    1fb8:	06 93       	lac	Z, r16
    1fba:	13 c0       	rjmp	.+38     	; 0x1fe2 <udd_ep_trans_complet+0x29c>
    1fbc:	d8 01       	movw	r26, r16
    1fbe:	8c 91       	ld	r24, X
    1fc0:	80 ff       	sbrs	r24, 0
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <udd_ep_trans_complet+0x29c>
    1fc4:	8e 7f       	andi	r24, 0xFE	; 254
    1fc6:	8c 93       	st	X, r24
    1fc8:	17 96       	adiw	r26, 0x07	; 7
    1fca:	ed 91       	ld	r30, X+
    1fcc:	fc 91       	ld	r31, X
    1fce:	18 97       	sbiw	r26, 0x08	; 8
    1fd0:	30 97       	sbiw	r30, 0x00	; 0
    1fd2:	39 f0       	breq	.+14     	; 0x1fe2 <udd_ep_trans_complet+0x29c>
    1fd4:	15 96       	adiw	r26, 0x05	; 5
    1fd6:	6d 91       	ld	r22, X+
    1fd8:	7c 91       	ld	r23, X
    1fda:	16 97       	sbiw	r26, 0x06	; 6
    1fdc:	4d 2d       	mov	r20, r13
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	09 95       	icall
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	bf 90       	pop	r11
    1ff2:	af 90       	pop	r10
    1ff4:	9f 90       	pop	r9
    1ff6:	8f 90       	pop	r8
    1ff8:	08 95       	ret

00001ffa <udd_attach>:
    1ffa:	cf 93       	push	r28
    1ffc:	cf b7       	in	r28, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	11 dd       	rcall	.-1502   	; 0x1a26 <udd_sleep_mode>
    2004:	ea ec       	ldi	r30, 0xCA	; 202
    2006:	f4 e0       	ldi	r31, 0x04	; 4
    2008:	80 e4       	ldi	r24, 0x40	; 64
    200a:	80 83       	st	Z, r24
    200c:	80 e2       	ldi	r24, 0x20	; 32
    200e:	80 83       	st	Z, r24
    2010:	e1 ec       	ldi	r30, 0xC1	; 193
    2012:	f4 e0       	ldi	r31, 0x04	; 4
    2014:	80 81       	ld	r24, Z
    2016:	81 60       	ori	r24, 0x01	; 1
    2018:	80 83       	st	Z, r24
    201a:	a9 ec       	ldi	r26, 0xC9	; 201
    201c:	b4 e0       	ldi	r27, 0x04	; 4
    201e:	8c 91       	ld	r24, X
    2020:	82 60       	ori	r24, 0x02	; 2
    2022:	8c 93       	st	X, r24
    2024:	e8 ec       	ldi	r30, 0xC8	; 200
    2026:	f4 e0       	ldi	r31, 0x04	; 4
    2028:	80 81       	ld	r24, Z
    202a:	80 64       	ori	r24, 0x40	; 64
    202c:	80 83       	st	Z, r24
    202e:	8c 91       	ld	r24, X
    2030:	81 60       	ori	r24, 0x01	; 1
    2032:	8c 93       	st	X, r24
    2034:	80 81       	ld	r24, Z
    2036:	80 68       	ori	r24, 0x80	; 128
    2038:	80 83       	st	Z, r24
    203a:	cf bf       	out	0x3f, r28	; 63
    203c:	cf 91       	pop	r28
    203e:	08 95       	ret

00002040 <udd_enable>:
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	c0 e6       	ldi	r28, 0x60	; 96
    2046:	d0 e0       	ldi	r29, 0x00	; 0
    2048:	18 82       	st	Y, r1
    204a:	80 e3       	ldi	r24, 0x30	; 48
    204c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <sysclk_enable_usb>
    2050:	e0 ec       	ldi	r30, 0xC0	; 192
    2052:	f4 e0       	ldi	r31, 0x04	; 4
    2054:	80 81       	ld	r24, Z
    2056:	80 64       	ori	r24, 0x40	; 64
    2058:	80 83       	st	Z, r24
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	88 83       	st	Y, r24
    205e:	cf b7       	in	r28, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	fc 01       	movw	r30, r24
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	ee 0f       	add	r30, r30
    2072:	ff 1f       	adc	r31, r31
    2074:	e0 5f       	subi	r30, 0xF0	; 240
    2076:	fd 4d       	sbci	r31, 0xDD	; 221
    2078:	11 8a       	std	Z+17, r1	; 0x11
    207a:	01 96       	adiw	r24, 0x01	; 1
    207c:	88 30       	cpi	r24, 0x08	; 8
    207e:	91 05       	cpc	r25, r1
    2080:	91 f7       	brne	.-28     	; 0x2066 <udd_enable+0x26>
    2082:	e3 e9       	ldi	r30, 0x93	; 147
    2084:	f1 e2       	ldi	r31, 0x21	; 33
    2086:	80 81       	ld	r24, Z
    2088:	8e 7f       	andi	r24, 0xFE	; 254
    208a:	80 83       	st	Z, r24
    208c:	ec e9       	ldi	r30, 0x9C	; 156
    208e:	f1 e2       	ldi	r31, 0x21	; 33
    2090:	80 81       	ld	r24, Z
    2092:	8e 7f       	andi	r24, 0xFE	; 254
    2094:	80 83       	st	Z, r24
    2096:	e5 ea       	ldi	r30, 0xA5	; 165
    2098:	f1 e2       	ldi	r31, 0x21	; 33
    209a:	80 81       	ld	r24, Z
    209c:	8e 7f       	andi	r24, 0xFE	; 254
    209e:	80 83       	st	Z, r24
    20a0:	ee ea       	ldi	r30, 0xAE	; 174
    20a2:	f1 e2       	ldi	r31, 0x21	; 33
    20a4:	80 81       	ld	r24, Z
    20a6:	8e 7f       	andi	r24, 0xFE	; 254
    20a8:	80 83       	st	Z, r24
    20aa:	e7 eb       	ldi	r30, 0xB7	; 183
    20ac:	f1 e2       	ldi	r31, 0x21	; 33
    20ae:	80 81       	ld	r24, Z
    20b0:	8e 7f       	andi	r24, 0xFE	; 254
    20b2:	80 83       	st	Z, r24
    20b4:	e0 ec       	ldi	r30, 0xC0	; 192
    20b6:	f1 e2       	ldi	r31, 0x21	; 33
    20b8:	80 81       	ld	r24, Z
    20ba:	8e 7f       	andi	r24, 0xFE	; 254
    20bc:	80 83       	st	Z, r24
    20be:	6a e1       	ldi	r22, 0x1A	; 26
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	a6 dc       	rcall	.-1716   	; 0x1a12 <nvm_read_byte>
    20c6:	8f 3f       	cpi	r24, 0xFF	; 255
    20c8:	19 f0       	breq	.+6      	; 0x20d0 <udd_enable+0x90>
    20ca:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <udd_enable+0x96>
    20d0:	8f e1       	ldi	r24, 0x1F	; 31
    20d2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    20d6:	6b e1       	ldi	r22, 0x1B	; 27
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	9a dc       	rcall	.-1740   	; 0x1a12 <nvm_read_byte>
    20de:	8f 3f       	cpi	r24, 0xFF	; 255
    20e0:	19 f0       	breq	.+6      	; 0x20e8 <udd_enable+0xa8>
    20e2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <udd_enable+0xae>
    20e8:	8f e1       	ldi	r24, 0x1F	; 31
    20ea:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    20ee:	e0 ec       	ldi	r30, 0xC0	; 192
    20f0:	f4 e0       	ldi	r31, 0x04	; 4
    20f2:	80 81       	ld	r24, Z
    20f4:	83 60       	ori	r24, 0x03	; 3
    20f6:	80 83       	st	Z, r24
    20f8:	80 81       	ld	r24, Z
    20fa:	80 68       	ori	r24, 0x80	; 128
    20fc:	80 83       	st	Z, r24
    20fe:	80 81       	ld	r24, Z
    2100:	80 61       	ori	r24, 0x10	; 16
    2102:	80 83       	st	Z, r24
    2104:	80 e2       	ldi	r24, 0x20	; 32
    2106:	92 e2       	ldi	r25, 0x22	; 34
    2108:	86 83       	std	Z+6, r24	; 0x06
    210a:	97 83       	std	Z+7, r25	; 0x07
    210c:	80 81       	ld	r24, Z
    210e:	80 62       	ori	r24, 0x20	; 32
    2110:	80 83       	st	Z, r24
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2118:	e8 ec       	ldi	r30, 0xC8	; 200
    211a:	f4 e0       	ldi	r31, 0x04	; 4
    211c:	80 81       	ld	r24, Z
    211e:	82 60       	ori	r24, 0x02	; 2
    2120:	80 83       	st	Z, r24
    2122:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_b_idle>
    2126:	80 91 61 2e 	lds	r24, 0x2E61	; 0x802e61 <sleepmgr_locks+0x5>
    212a:	8f 3f       	cpi	r24, 0xFF	; 255
    212c:	09 f4       	brne	.+2      	; 0x2130 <udd_enable+0xf0>
    212e:	ff cf       	rjmp	.-2      	; 0x212e <udd_enable+0xee>
    2130:	9f b7       	in	r25, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	ec e5       	ldi	r30, 0x5C	; 92
    2136:	fe e2       	ldi	r31, 0x2E	; 46
    2138:	85 81       	ldd	r24, Z+5	; 0x05
    213a:	8f 5f       	subi	r24, 0xFF	; 255
    213c:	85 83       	std	Z+5, r24	; 0x05
    213e:	9f bf       	out	0x3f, r25	; 63
    2140:	5c df       	rcall	.-328    	; 0x1ffa <udd_attach>
    2142:	cf bf       	out	0x3f, r28	; 63
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <udd_set_address>:
    214a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    214e:	08 95       	ret

00002150 <udd_getaddress>:
    2150:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2154:	08 95       	ret

00002156 <udd_set_setup_payload>:
    2156:	ee e6       	ldi	r30, 0x6E	; 110
    2158:	f4 e2       	ldi	r31, 0x24	; 36
    215a:	80 87       	std	Z+8, r24	; 0x08
    215c:	91 87       	std	Z+9, r25	; 0x09
    215e:	62 87       	std	Z+10, r22	; 0x0a
    2160:	73 87       	std	Z+11, r23	; 0x0b
    2162:	08 95       	ret

00002164 <udd_ep_alloc>:
    2164:	28 2f       	mov	r18, r24
    2166:	2f 70       	andi	r18, 0x0F	; 15
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	08 2e       	mov	r0, r24
    2170:	00 0c       	add	r0, r0
    2172:	99 0b       	sbc	r25, r25
    2174:	88 27       	eor	r24, r24
    2176:	99 0f       	add	r25, r25
    2178:	88 1f       	adc	r24, r24
    217a:	99 27       	eor	r25, r25
    217c:	82 0f       	add	r24, r18
    217e:	93 1f       	adc	r25, r19
    2180:	fc 01       	movw	r30, r24
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	ee 0f       	add	r30, r30
    218c:	ff 1f       	adc	r31, r31
    218e:	e0 5f       	subi	r30, 0xF0	; 240
    2190:	fd 4d       	sbci	r31, 0xDD	; 221
    2192:	21 89       	ldd	r18, Z+17	; 0x11
    2194:	20 7c       	andi	r18, 0xC0	; 192
    2196:	09 f0       	breq	.+2      	; 0x219a <udd_ep_alloc+0x36>
    2198:	58 c0       	rjmp	.+176    	; 0x224a <udd_ep_alloc+0xe6>
    219a:	63 70       	andi	r22, 0x03	; 3
    219c:	61 30       	cpi	r22, 0x01	; 1
    219e:	11 f0       	breq	.+4      	; 0x21a4 <udd_ep_alloc+0x40>
    21a0:	18 f4       	brcc	.+6      	; 0x21a8 <udd_ep_alloc+0x44>
    21a2:	04 c0       	rjmp	.+8      	; 0x21ac <udd_ep_alloc+0x48>
    21a4:	20 ec       	ldi	r18, 0xC0	; 192
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <udd_ep_alloc+0x4a>
    21a8:	20 e8       	ldi	r18, 0x80	; 128
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <udd_ep_alloc+0x4a>
    21ac:	20 e4       	ldi	r18, 0x40	; 64
    21ae:	40 38       	cpi	r20, 0x80	; 128
    21b0:	51 05       	cpc	r21, r1
    21b2:	e9 f0       	breq	.+58     	; 0x21ee <udd_ep_alloc+0x8a>
    21b4:	50 f4       	brcc	.+20     	; 0x21ca <udd_ep_alloc+0x66>
    21b6:	40 32       	cpi	r20, 0x20	; 32
    21b8:	51 05       	cpc	r21, r1
    21ba:	a9 f0       	breq	.+42     	; 0x21e6 <udd_ep_alloc+0x82>
    21bc:	40 34       	cpi	r20, 0x40	; 64
    21be:	51 05       	cpc	r21, r1
    21c0:	a1 f0       	breq	.+40     	; 0x21ea <udd_ep_alloc+0x86>
    21c2:	40 31       	cpi	r20, 0x10	; 16
    21c4:	51 05       	cpc	r21, r1
    21c6:	d9 f4       	brne	.+54     	; 0x21fe <udd_ep_alloc+0x9a>
    21c8:	0c c0       	rjmp	.+24     	; 0x21e2 <udd_ep_alloc+0x7e>
    21ca:	41 15       	cp	r20, r1
    21cc:	32 e0       	ldi	r19, 0x02	; 2
    21ce:	53 07       	cpc	r21, r19
    21d0:	91 f0       	breq	.+36     	; 0x21f6 <udd_ep_alloc+0x92>
    21d2:	4f 3f       	cpi	r20, 0xFF	; 255
    21d4:	33 e0       	ldi	r19, 0x03	; 3
    21d6:	53 07       	cpc	r21, r19
    21d8:	81 f0       	breq	.+32     	; 0x21fa <udd_ep_alloc+0x96>
    21da:	41 15       	cp	r20, r1
    21dc:	51 40       	sbci	r21, 0x01	; 1
    21de:	79 f4       	brne	.+30     	; 0x21fe <udd_ep_alloc+0x9a>
    21e0:	08 c0       	rjmp	.+16     	; 0x21f2 <udd_ep_alloc+0x8e>
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	0d c0       	rjmp	.+26     	; 0x2200 <udd_ep_alloc+0x9c>
    21e6:	42 e0       	ldi	r20, 0x02	; 2
    21e8:	0b c0       	rjmp	.+22     	; 0x2200 <udd_ep_alloc+0x9c>
    21ea:	43 e0       	ldi	r20, 0x03	; 3
    21ec:	09 c0       	rjmp	.+18     	; 0x2200 <udd_ep_alloc+0x9c>
    21ee:	44 e0       	ldi	r20, 0x04	; 4
    21f0:	07 c0       	rjmp	.+14     	; 0x2200 <udd_ep_alloc+0x9c>
    21f2:	45 e0       	ldi	r20, 0x05	; 5
    21f4:	05 c0       	rjmp	.+10     	; 0x2200 <udd_ep_alloc+0x9c>
    21f6:	46 e0       	ldi	r20, 0x06	; 6
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <udd_ep_alloc+0x9c>
    21fa:	47 e0       	ldi	r20, 0x07	; 7
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <udd_ep_alloc+0x9c>
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	fc 01       	movw	r30, r24
    2202:	ee 0f       	add	r30, r30
    2204:	ff 1f       	adc	r31, r31
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	e0 5f       	subi	r30, 0xF0	; 240
    2210:	fd 4d       	sbci	r31, 0xDD	; 221
    2212:	11 8a       	std	Z+17, r1	; 0x11
    2214:	dc 01       	movw	r26, r24
    2216:	aa 0f       	add	r26, r26
    2218:	bb 1f       	adc	r27, r27
    221a:	aa 0f       	add	r26, r26
    221c:	bb 1f       	adc	r27, r27
    221e:	aa 0f       	add	r26, r26
    2220:	bb 1f       	adc	r27, r27
    2222:	a0 5e       	subi	r26, 0xE0	; 224
    2224:	bd 4d       	sbci	r27, 0xDD	; 221
    2226:	36 e0       	ldi	r19, 0x06	; 6
    2228:	3c 93       	st	X, r19
    222a:	24 2b       	or	r18, r20
    222c:	21 8b       	std	Z+17, r18	; 0x11
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	fc 01       	movw	r30, r24
    223c:	e0 5f       	subi	r30, 0xF0	; 240
    223e:	fd 4d       	sbci	r31, 0xDD	; 221
    2240:	81 89       	ldd	r24, Z+17	; 0x11
    2242:	80 62       	ori	r24, 0x20	; 32
    2244:	81 8b       	std	Z+17, r24	; 0x11
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	08 95       	ret
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	08 95       	ret

0000224e <udd_ep_is_halted>:
    224e:	e8 2f       	mov	r30, r24
    2250:	ef 70       	andi	r30, 0x0F	; 15
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	ee 0f       	add	r30, r30
    2256:	ff 1f       	adc	r31, r31
    2258:	08 2e       	mov	r0, r24
    225a:	00 0c       	add	r0, r0
    225c:	99 0b       	sbc	r25, r25
    225e:	88 27       	eor	r24, r24
    2260:	99 0f       	add	r25, r25
    2262:	88 1f       	adc	r24, r24
    2264:	99 27       	eor	r25, r25
    2266:	e8 0f       	add	r30, r24
    2268:	f9 1f       	adc	r31, r25
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	e0 5f       	subi	r30, 0xF0	; 240
    2278:	fd 4d       	sbci	r31, 0xDD	; 221
    227a:	81 89       	ldd	r24, Z+17	; 0x11
    227c:	82 fb       	bst	r24, 2
    227e:	88 27       	eor	r24, r24
    2280:	80 f9       	bld	r24, 0
    2282:	08 95       	ret

00002284 <udd_ep_clear_halt>:
    2284:	28 2f       	mov	r18, r24
    2286:	2f 70       	andi	r18, 0x0F	; 15
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	a9 01       	movw	r20, r18
    228c:	44 0f       	add	r20, r20
    228e:	55 1f       	adc	r21, r21
    2290:	28 2f       	mov	r18, r24
    2292:	08 2e       	mov	r0, r24
    2294:	00 0c       	add	r0, r0
    2296:	33 0b       	sbc	r19, r19
    2298:	22 27       	eor	r18, r18
    229a:	33 0f       	add	r19, r19
    229c:	22 1f       	adc	r18, r18
    229e:	33 27       	eor	r19, r19
    22a0:	24 0f       	add	r18, r20
    22a2:	35 1f       	adc	r19, r21
    22a4:	f9 01       	movw	r30, r18
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	ee 0f       	add	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	e0 5f       	subi	r30, 0xF0	; 240
    22b4:	fd 4d       	sbci	r31, 0xDD	; 221
    22b6:	91 89       	ldd	r25, Z+17	; 0x11
    22b8:	92 ff       	sbrs	r25, 2
    22ba:	17 c0       	rjmp	.+46     	; 0x22ea <udd_ep_clear_halt+0x66>
    22bc:	22 0f       	add	r18, r18
    22be:	33 1f       	adc	r19, r19
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	22 0f       	add	r18, r18
    22c6:	33 1f       	adc	r19, r19
    22c8:	f9 01       	movw	r30, r18
    22ca:	e0 5f       	subi	r30, 0xF0	; 240
    22cc:	fd 4d       	sbci	r31, 0xDD	; 221
    22ce:	91 89       	ldd	r25, Z+17	; 0x11
    22d0:	9b 7f       	andi	r25, 0xFB	; 251
    22d2:	91 8b       	std	Z+17, r25	; 0x11
    22d4:	ae dc       	rcall	.-1700   	; 0x1c32 <udd_ep_get_job>
    22d6:	fc 01       	movw	r30, r24
    22d8:	80 81       	ld	r24, Z
    22da:	80 ff       	sbrs	r24, 0
    22dc:	06 c0       	rjmp	.+12     	; 0x22ea <udd_ep_clear_halt+0x66>
    22de:	8e 7f       	andi	r24, 0xFE	; 254
    22e0:	80 83       	st	Z, r24
    22e2:	07 80       	ldd	r0, Z+7	; 0x07
    22e4:	f0 85       	ldd	r31, Z+8	; 0x08
    22e6:	e0 2d       	mov	r30, r0
    22e8:	09 95       	icall
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	08 95       	ret

000022ee <udd_ep_run>:
    22ee:	7f 92       	push	r7
    22f0:	8f 92       	push	r8
    22f2:	9f 92       	push	r9
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	98 2e       	mov	r9, r24
    230a:	86 2e       	mov	r8, r22
    230c:	6a 01       	movw	r12, r20
    230e:	79 01       	movw	r14, r18
    2310:	90 dc       	rcall	.-1760   	; 0x1c32 <udd_ep_get_job>
    2312:	5c 01       	movw	r10, r24
    2314:	79 2c       	mov	r7, r9
    2316:	77 1c       	adc	r7, r7
    2318:	77 24       	eor	r7, r7
    231a:	77 1c       	adc	r7, r7
    231c:	c9 2d       	mov	r28, r9
    231e:	cf 70       	andi	r28, 0x0F	; 15
    2320:	d0 e0       	ldi	r29, 0x00	; 0
    2322:	cc 0f       	add	r28, r28
    2324:	dd 1f       	adc	r29, r29
    2326:	c7 0d       	add	r28, r7
    2328:	d1 1d       	adc	r29, r1
    232a:	fe 01       	movw	r30, r28
    232c:	ee 0f       	add	r30, r30
    232e:	ff 1f       	adc	r31, r31
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	e0 5f       	subi	r30, 0xF0	; 240
    233a:	fd 4d       	sbci	r31, 0xDD	; 221
    233c:	81 89       	ldd	r24, Z+17	; 0x11
    233e:	80 7c       	andi	r24, 0xC0	; 192
    2340:	09 f4       	brne	.+2      	; 0x2344 <udd_ep_run+0x56>
    2342:	7d c0       	rjmp	.+250    	; 0x243e <udd_ep_run+0x150>
    2344:	fe 01       	movw	r30, r28
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	e0 5f       	subi	r30, 0xF0	; 240
    2354:	fd 4d       	sbci	r31, 0xDD	; 221
    2356:	81 89       	ldd	r24, Z+17	; 0x11
    2358:	80 7c       	andi	r24, 0xC0	; 192
    235a:	80 3c       	cpi	r24, 0xC0	; 192
    235c:	61 f0       	breq	.+24     	; 0x2376 <udd_ep_run+0x88>
    235e:	fe 01       	movw	r30, r28
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	ee 0f       	add	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	e0 5f       	subi	r30, 0xF0	; 240
    236e:	fd 4d       	sbci	r31, 0xDD	; 221
    2370:	81 89       	ldd	r24, Z+17	; 0x11
    2372:	82 fd       	sbrc	r24, 2
    2374:	66 c0       	rjmp	.+204    	; 0x2442 <udd_ep_run+0x154>
    2376:	8f b7       	in	r24, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	f5 01       	movw	r30, r10
    237c:	90 81       	ld	r25, Z
    237e:	90 ff       	sbrs	r25, 0
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <udd_ep_run+0x9a>
    2382:	8f bf       	out	0x3f, r24	; 63
    2384:	71 2c       	mov	r7, r1
    2386:	5e c0       	rjmp	.+188    	; 0x2444 <udd_ep_run+0x156>
    2388:	f5 01       	movw	r30, r10
    238a:	90 81       	ld	r25, Z
    238c:	91 60       	ori	r25, 0x01	; 1
    238e:	90 83       	st	Z, r25
    2390:	8f bf       	out	0x3f, r24	; 63
    2392:	c1 82       	std	Z+1, r12	; 0x01
    2394:	d2 82       	std	Z+2, r13	; 0x02
    2396:	e3 82       	std	Z+3, r14	; 0x03
    2398:	f4 82       	std	Z+4, r15	; 0x04
    239a:	15 82       	std	Z+5, r1	; 0x05
    239c:	16 82       	std	Z+6, r1	; 0x06
    239e:	07 83       	std	Z+7, r16	; 0x07
    23a0:	10 87       	std	Z+8, r17	; 0x08
    23a2:	81 10       	cpse	r8, r1
    23a4:	06 c0       	rjmp	.+12     	; 0x23b2 <udd_ep_run+0xc4>
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	e1 14       	cp	r14, r1
    23aa:	f1 04       	cpc	r15, r1
    23ac:	19 f0       	breq	.+6      	; 0x23b4 <udd_ep_run+0xc6>
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <udd_ep_run+0xc6>
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	f5 01       	movw	r30, r10
    23b6:	80 81       	ld	r24, Z
    23b8:	90 fb       	bst	r25, 0
    23ba:	81 f9       	bld	r24, 1
    23bc:	8b 7f       	andi	r24, 0xFB	; 251
    23be:	80 83       	st	Z, r24
    23c0:	77 20       	and	r7, r7
    23c2:	59 f0       	breq	.+22     	; 0x23da <udd_ep_run+0xec>
    23c4:	cc 0f       	add	r28, r28
    23c6:	dd 1f       	adc	r29, r29
    23c8:	cc 0f       	add	r28, r28
    23ca:	dd 1f       	adc	r29, r29
    23cc:	cc 0f       	add	r28, r28
    23ce:	dd 1f       	adc	r29, r29
    23d0:	c0 5f       	subi	r28, 0xF0	; 240
    23d2:	dd 4d       	sbci	r29, 0xDD	; 221
    23d4:	1e 8a       	std	Y+22, r1	; 0x16
    23d6:	1f 8a       	std	Y+23, r1	; 0x17
    23d8:	2d c0       	rjmp	.+90     	; 0x2434 <udd_ep_run+0x146>
    23da:	fe 01       	movw	r30, r28
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	ee 0f       	add	r30, r30
    23e6:	ff 1f       	adc	r31, r31
    23e8:	e0 5f       	subi	r30, 0xF0	; 240
    23ea:	fd 4d       	sbci	r31, 0xDD	; 221
    23ec:	81 89       	ldd	r24, Z+17	; 0x11
    23ee:	80 7c       	andi	r24, 0xC0	; 192
    23f0:	80 3c       	cpi	r24, 0xC0	; 192
    23f2:	a1 f4       	brne	.+40     	; 0x241c <udd_ep_run+0x12e>
    23f4:	ce 01       	movw	r24, r28
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	80 5e       	subi	r24, 0xE0	; 224
    2404:	9d 4d       	sbci	r25, 0xDD	; 221
    2406:	ef db       	rcall	.-2082   	; 0x1be6 <udd_ep_get_size>
    2408:	bc 01       	movw	r22, r24
    240a:	c7 01       	movw	r24, r14
    240c:	60 d2       	rcall	.+1216   	; 0x28ce <__udivmodhi4>
    240e:	89 2b       	or	r24, r25
    2410:	29 f0       	breq	.+10     	; 0x241c <udd_ep_run+0x12e>
    2412:	f5 01       	movw	r30, r10
    2414:	80 81       	ld	r24, Z
    2416:	8e 7f       	andi	r24, 0xFE	; 254
    2418:	80 83       	st	Z, r24
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <udd_ep_run+0x156>
    241c:	cc 0f       	add	r28, r28
    241e:	dd 1f       	adc	r29, r29
    2420:	cc 0f       	add	r28, r28
    2422:	dd 1f       	adc	r29, r29
    2424:	cc 0f       	add	r28, r28
    2426:	dd 1f       	adc	r29, r29
    2428:	c0 5f       	subi	r28, 0xF0	; 240
    242a:	dd 4d       	sbci	r29, 0xDD	; 221
    242c:	1a 8a       	std	Y+18, r1	; 0x12
    242e:	1b 8a       	std	Y+19, r1	; 0x13
    2430:	1e 8a       	std	Y+22, r1	; 0x16
    2432:	1f 8a       	std	Y+23, r1	; 0x17
    2434:	89 2d       	mov	r24, r9
    2436:	87 dc       	rcall	.-1778   	; 0x1d46 <udd_ep_trans_complet>
    2438:	77 24       	eor	r7, r7
    243a:	73 94       	inc	r7
    243c:	03 c0       	rjmp	.+6      	; 0x2444 <udd_ep_run+0x156>
    243e:	71 2c       	mov	r7, r1
    2440:	01 c0       	rjmp	.+2      	; 0x2444 <udd_ep_run+0x156>
    2442:	71 2c       	mov	r7, r1
    2444:	87 2d       	mov	r24, r7
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	9f 90       	pop	r9
    245c:	8f 90       	pop	r8
    245e:	7f 90       	pop	r7
    2460:	08 95       	ret

00002462 <udd_ep_abort>:
    2462:	ff 92       	push	r15
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	18 2f       	mov	r17, r24
    246e:	f8 2e       	mov	r15, r24
    2470:	ff 1c       	adc	r15, r15
    2472:	ff 24       	eor	r15, r15
    2474:	ff 1c       	adc	r15, r15
    2476:	c8 2f       	mov	r28, r24
    2478:	cf 70       	andi	r28, 0x0F	; 15
    247a:	d0 e0       	ldi	r29, 0x00	; 0
    247c:	cc 0f       	add	r28, r28
    247e:	dd 1f       	adc	r29, r29
    2480:	cf 0d       	add	r28, r15
    2482:	d1 1d       	adc	r29, r1
    2484:	d6 db       	rcall	.-2132   	; 0x1c32 <udd_ep_get_job>
    2486:	dc 01       	movw	r26, r24
    2488:	fe 01       	movw	r30, r28
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	ee 0f       	add	r30, r30
    2490:	ff 1f       	adc	r31, r31
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	e0 5e       	subi	r30, 0xE0	; 224
    2498:	fd 4d       	sbci	r31, 0xDD	; 221
    249a:	02 e0       	ldi	r16, 0x02	; 2
    249c:	05 93       	las	Z, r16
    249e:	8c 91       	ld	r24, X
    24a0:	80 ff       	sbrs	r24, 0
    24a2:	22 c0       	rjmp	.+68     	; 0x24e8 <udd_ep_abort+0x86>
    24a4:	8e 7f       	andi	r24, 0xFE	; 254
    24a6:	8c 93       	st	X, r24
    24a8:	17 96       	adiw	r26, 0x07	; 7
    24aa:	ed 91       	ld	r30, X+
    24ac:	fc 91       	ld	r31, X
    24ae:	18 97       	sbiw	r26, 0x08	; 8
    24b0:	30 97       	sbiw	r30, 0x00	; 0
    24b2:	d1 f0       	breq	.+52     	; 0x24e8 <udd_ep_abort+0x86>
    24b4:	ff 20       	and	r15, r15
    24b6:	59 f0       	breq	.+22     	; 0x24ce <udd_ep_abort+0x6c>
    24b8:	cc 0f       	add	r28, r28
    24ba:	dd 1f       	adc	r29, r29
    24bc:	cc 0f       	add	r28, r28
    24be:	dd 1f       	adc	r29, r29
    24c0:	cc 0f       	add	r28, r28
    24c2:	dd 1f       	adc	r29, r29
    24c4:	c0 5f       	subi	r28, 0xF0	; 240
    24c6:	dd 4d       	sbci	r29, 0xDD	; 221
    24c8:	6e 89       	ldd	r22, Y+22	; 0x16
    24ca:	7f 89       	ldd	r23, Y+23	; 0x17
    24cc:	0a c0       	rjmp	.+20     	; 0x24e2 <udd_ep_abort+0x80>
    24ce:	cc 0f       	add	r28, r28
    24d0:	dd 1f       	adc	r29, r29
    24d2:	cc 0f       	add	r28, r28
    24d4:	dd 1f       	adc	r29, r29
    24d6:	cc 0f       	add	r28, r28
    24d8:	dd 1f       	adc	r29, r29
    24da:	c0 5f       	subi	r28, 0xF0	; 240
    24dc:	dd 4d       	sbci	r29, 0xDD	; 221
    24de:	6a 89       	ldd	r22, Y+18	; 0x12
    24e0:	7b 89       	ldd	r23, Y+19	; 0x13
    24e2:	41 2f       	mov	r20, r17
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	09 95       	icall
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	08 95       	ret

000024f4 <udd_ep_free>:
    24f4:	cf 93       	push	r28
    24f6:	c8 2f       	mov	r28, r24
    24f8:	b4 df       	rcall	.-152    	; 0x2462 <udd_ep_abort>
    24fa:	ec 2f       	mov	r30, r28
    24fc:	ef 70       	andi	r30, 0x0F	; 15
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	8c 2f       	mov	r24, r28
    2506:	cc 0f       	add	r28, r28
    2508:	99 0b       	sbc	r25, r25
    250a:	88 27       	eor	r24, r24
    250c:	99 0f       	add	r25, r25
    250e:	88 1f       	adc	r24, r24
    2510:	99 27       	eor	r25, r25
    2512:	e8 0f       	add	r30, r24
    2514:	f9 1f       	adc	r31, r25
    2516:	ee 0f       	add	r30, r30
    2518:	ff 1f       	adc	r31, r31
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	ee 0f       	add	r30, r30
    2520:	ff 1f       	adc	r31, r31
    2522:	e0 5f       	subi	r30, 0xF0	; 240
    2524:	fd 4d       	sbci	r31, 0xDD	; 221
    2526:	11 8a       	std	Z+17, r1	; 0x11
    2528:	cf 91       	pop	r28
    252a:	08 95       	ret

0000252c <udd_ep_set_halt>:
    252c:	0f 93       	push	r16
    252e:	e8 2f       	mov	r30, r24
    2530:	ef 70       	andi	r30, 0x0F	; 15
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	28 2f       	mov	r18, r24
    253a:	08 2e       	mov	r0, r24
    253c:	00 0c       	add	r0, r0
    253e:	33 0b       	sbc	r19, r19
    2540:	22 27       	eor	r18, r18
    2542:	33 0f       	add	r19, r19
    2544:	22 1f       	adc	r18, r18
    2546:	33 27       	eor	r19, r19
    2548:	e2 0f       	add	r30, r18
    254a:	f3 1f       	adc	r31, r19
    254c:	df 01       	movw	r26, r30
    254e:	aa 0f       	add	r26, r26
    2550:	bb 1f       	adc	r27, r27
    2552:	aa 0f       	add	r26, r26
    2554:	bb 1f       	adc	r27, r27
    2556:	aa 0f       	add	r26, r26
    2558:	bb 1f       	adc	r27, r27
    255a:	a0 5f       	subi	r26, 0xF0	; 240
    255c:	bd 4d       	sbci	r27, 0xDD	; 221
    255e:	51 96       	adiw	r26, 0x11	; 17
    2560:	9c 91       	ld	r25, X
    2562:	51 97       	sbiw	r26, 0x11	; 17
    2564:	94 60       	ori	r25, 0x04	; 4
    2566:	51 96       	adiw	r26, 0x11	; 17
    2568:	9c 93       	st	X, r25
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	ee 0f       	add	r30, r30
    2574:	ff 1f       	adc	r31, r31
    2576:	e0 5e       	subi	r30, 0xE0	; 224
    2578:	fd 4d       	sbci	r31, 0xDD	; 221
    257a:	01 e0       	ldi	r16, 0x01	; 1
    257c:	06 93       	lac	Z, r16
    257e:	71 df       	rcall	.-286    	; 0x2462 <udd_ep_abort>
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	0f 91       	pop	r16
    2584:	08 95       	ret

00002586 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2586:	1f 92       	push	r1
    2588:	0f 92       	push	r0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	0f 92       	push	r0
    258e:	11 24       	eor	r1, r1
    2590:	0f 93       	push	r16
    2592:	2f 93       	push	r18
    2594:	3f 93       	push	r19
    2596:	4f 93       	push	r20
    2598:	5f 93       	push	r21
    259a:	6f 93       	push	r22
    259c:	7f 93       	push	r23
    259e:	8f 93       	push	r24
    25a0:	9f 93       	push	r25
    25a2:	af 93       	push	r26
    25a4:	bf 93       	push	r27
    25a6:	ef 93       	push	r30
    25a8:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    25aa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    25ae:	88 23       	and	r24, r24
    25b0:	44 f4       	brge	.+16     	; 0x25c2 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    25b2:	80 e8       	ldi	r24, 0x80	; 128
    25b4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    25b8:	0e 94 5d 09 	call	0x12ba	; 0x12ba <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    25bc:	0e 94 42 02 	call	0x484	; 0x484 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    25c0:	8a c0       	rjmp	.+276    	; 0x26d6 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    25c2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    25c6:	82 ff       	sbrs	r24, 2
    25c8:	20 c0       	rjmp	.+64     	; 0x260a <__vector_125+0x84>
		udd_ack_underflow_event();
    25ca:	84 e0       	ldi	r24, 0x04	; 4
    25cc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    25d0:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <udd_sram+0x18>
    25d4:	86 ff       	sbrs	r24, 6
    25d6:	7f c0       	rjmp	.+254    	; 0x26d6 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    25d8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    25dc:	81 fd       	sbrc	r24, 1
    25de:	7b c0       	rjmp	.+246    	; 0x26d6 <__vector_125+0x150>
    25e0:	43 db       	rcall	.-2426   	; 0x1c68 <udd_ctrl_interrupt_tc_setup>
    25e2:	81 11       	cpse	r24, r1
    25e4:	78 c0       	rjmp	.+240    	; 0x26d6 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    25e6:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	11 f4       	brne	.+4      	; 0x25f2 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    25ee:	79 da       	rcall	.-2830   	; 0x1ae2 <udd_ctrl_send_zlp_in>
    25f0:	72 c0       	rjmp	.+228    	; 0x26d6 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    25f2:	84 30       	cpi	r24, 0x04	; 4
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <__vector_125+0x72>
    25f6:	6f c0       	rjmp	.+222    	; 0x26d6 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    25f8:	e9 e2       	ldi	r30, 0x29	; 41
    25fa:	f2 e2       	ldi	r31, 0x22	; 34
    25fc:	04 e0       	ldi	r16, 0x04	; 4
    25fe:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2600:	e1 e2       	ldi	r30, 0x21	; 33
    2602:	f2 e2       	ldi	r31, 0x22	; 34
    2604:	04 e0       	ldi	r16, 0x04	; 4
    2606:	05 93       	las	Z, r16
    2608:	66 c0       	rjmp	.+204    	; 0x26d6 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    260a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    260e:	81 ff       	sbrs	r24, 1
    2610:	5d c0       	rjmp	.+186    	; 0x26cc <__vector_125+0x146>
		udd_ack_overflow_event();
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2618:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <udd_sram+0x10>
    261c:	86 ff       	sbrs	r24, 6
    261e:	5b c0       	rjmp	.+182    	; 0x26d6 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2620:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2624:	81 fd       	sbrc	r24, 1
    2626:	57 c0       	rjmp	.+174    	; 0x26d6 <__vector_125+0x150>
    2628:	1f db       	rcall	.-2498   	; 0x1c68 <udd_ctrl_interrupt_tc_setup>
    262a:	81 11       	cpse	r24, r1
    262c:	54 c0       	rjmp	.+168    	; 0x26d6 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    262e:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    2632:	82 30       	cpi	r24, 0x02	; 2
    2634:	41 f4       	brne	.+16     	; 0x2646 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2636:	84 e0       	ldi	r24, 0x04	; 4
    2638:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    263c:	e0 e2       	ldi	r30, 0x20	; 32
    263e:	f2 e2       	ldi	r31, 0x22	; 34
    2640:	02 e0       	ldi	r16, 0x02	; 2
    2642:	06 93       	lac	Z, r16
    2644:	48 c0       	rjmp	.+144    	; 0x26d6 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2646:	83 30       	cpi	r24, 0x03	; 3
    2648:	09 f0       	breq	.+2      	; 0x264c <__vector_125+0xc6>
    264a:	45 c0       	rjmp	.+138    	; 0x26d6 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    264c:	e9 e2       	ldi	r30, 0x29	; 41
    264e:	f2 e2       	ldi	r31, 0x22	; 34
    2650:	04 e0       	ldi	r16, 0x04	; 4
    2652:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2654:	e1 e2       	ldi	r30, 0x21	; 33
    2656:	f2 e2       	ldi	r31, 0x22	; 34
    2658:	04 e0       	ldi	r16, 0x04	; 4
    265a:	05 93       	las	Z, r16
    265c:	3c c0       	rjmp	.+120    	; 0x26d6 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    265e:	80 e1       	ldi	r24, 0x10	; 16
    2660:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	fd de       	rcall	.-518    	; 0x2462 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2668:	81 e8       	ldi	r24, 0x81	; 129
    266a:	fb de       	rcall	.-522    	; 0x2462 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	f9 de       	rcall	.-526    	; 0x2462 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2670:	82 e8       	ldi	r24, 0x82	; 130
    2672:	f7 de       	rcall	.-530    	; 0x2462 <udd_ep_abort>
		}
#endif
		udc_reset();
    2674:	0e 94 38 09 	call	0x1270	; 0x1270 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2678:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    267c:	e0 e1       	ldi	r30, 0x10	; 16
    267e:	f2 e2       	ldi	r31, 0x22	; 34
    2680:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2682:	96 e0       	ldi	r25, 0x06	; 6
    2684:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2686:	83 e4       	ldi	r24, 0x43	; 67
    2688:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    268a:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    268c:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    268e:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2690:	89 ec       	ldi	r24, 0xC9	; 201
    2692:	91 e2       	ldi	r25, 0x21	; 33
    2694:	84 8b       	std	Z+20, r24	; 0x14
    2696:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2698:	ef d9       	rcall	.-3106   	; 0x1a78 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    269a:	1d c0       	rjmp	.+58     	; 0x26d6 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    269c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26a0:	86 ff       	sbrs	r24, 6
    26a2:	08 c0       	rjmp	.+16     	; 0x26b4 <__vector_125+0x12e>
		udd_ack_suspend_event();
    26a4:	80 e4       	ldi	r24, 0x40	; 64
    26a6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	bc d9       	rcall	.-3208   	; 0x1a26 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    26ae:	0e 94 40 02 	call	0x480	; 0x480 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    26b2:	11 c0       	rjmp	.+34     	; 0x26d6 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    26b4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26b8:	85 ff       	sbrs	r24, 5
    26ba:	0d c0       	rjmp	.+26     	; 0x26d6 <__vector_125+0x150>
		udd_ack_resume_event();
    26bc:	80 e2       	ldi	r24, 0x20	; 32
    26be:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	b0 d9       	rcall	.-3232   	; 0x1a26 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    26c6:	0e 94 41 02 	call	0x482	; 0x482 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    26ca:	05 c0       	rjmp	.+10     	; 0x26d6 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    26cc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26d0:	84 fd       	sbrc	r24, 4
    26d2:	c5 cf       	rjmp	.-118    	; 0x265e <__vector_125+0xd8>
    26d4:	e3 cf       	rjmp	.-58     	; 0x269c <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	bf 91       	pop	r27
    26dc:	af 91       	pop	r26
    26de:	9f 91       	pop	r25
    26e0:	8f 91       	pop	r24
    26e2:	7f 91       	pop	r23
    26e4:	6f 91       	pop	r22
    26e6:	5f 91       	pop	r21
    26e8:	4f 91       	pop	r20
    26ea:	3f 91       	pop	r19
    26ec:	2f 91       	pop	r18
    26ee:	0f 91       	pop	r16
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    26fa:	1f 92       	push	r1
    26fc:	0f 92       	push	r0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	0f 92       	push	r0
    2702:	11 24       	eor	r1, r1
    2704:	0f 93       	push	r16
    2706:	1f 93       	push	r17
    2708:	2f 93       	push	r18
    270a:	3f 93       	push	r19
    270c:	4f 93       	push	r20
    270e:	5f 93       	push	r21
    2710:	6f 93       	push	r22
    2712:	7f 93       	push	r23
    2714:	8f 93       	push	r24
    2716:	9f 93       	push	r25
    2718:	af 93       	push	r26
    271a:	bf 93       	push	r27
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	ef 93       	push	r30
    2722:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2724:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2728:	81 fd       	sbrc	r24, 1
    272a:	03 c0       	rjmp	.+6      	; 0x2732 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    272c:	9d da       	rcall	.-2758   	; 0x1c68 <udd_ctrl_interrupt_tc_setup>
    272e:	81 11       	cpse	r24, r1
    2730:	b9 c0       	rjmp	.+370    	; 0x28a4 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2738:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    273c:	81 95       	neg	r24
    273e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2740:	e0 e2       	ldi	r30, 0x20	; 32
    2742:	f2 e2       	ldi	r31, 0x22	; 34
    2744:	e8 1b       	sub	r30, r24
    2746:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2748:	20 81       	ld	r18, Z
    274a:	31 81       	ldd	r19, Z+1	; 0x01
    274c:	20 52       	subi	r18, 0x20	; 32
    274e:	32 42       	sbci	r19, 0x22	; 34
    2750:	36 95       	lsr	r19
    2752:	27 95       	ror	r18
    2754:	36 95       	lsr	r19
    2756:	27 95       	ror	r18
    2758:	36 95       	lsr	r19
    275a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    275c:	82 2f       	mov	r24, r18
    275e:	86 95       	lsr	r24
    2760:	20 fd       	sbrc	r18, 0
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <__vector_126+0x6e>
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	01 c0       	rjmp	.+2      	; 0x276a <__vector_126+0x70>
    2768:	90 e8       	ldi	r25, 0x80	; 128
    276a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    276c:	e8 2f       	mov	r30, r24
    276e:	ef 70       	andi	r30, 0x0F	; 15
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	ee 0f       	add	r30, r30
    2774:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2776:	28 2f       	mov	r18, r24
    2778:	08 2e       	mov	r0, r24
    277a:	00 0c       	add	r0, r0
    277c:	33 0b       	sbc	r19, r19
    277e:	22 27       	eor	r18, r18
    2780:	33 0f       	add	r19, r19
    2782:	22 1f       	adc	r18, r18
    2784:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2786:	e2 0f       	add	r30, r18
    2788:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    278a:	df 01       	movw	r26, r30
    278c:	aa 0f       	add	r26, r26
    278e:	bb 1f       	adc	r27, r27
    2790:	aa 0f       	add	r26, r26
    2792:	bb 1f       	adc	r27, r27
    2794:	aa 0f       	add	r26, r26
    2796:	bb 1f       	adc	r27, r27
    2798:	a0 5e       	subi	r26, 0xE0	; 224
    279a:	bd 4d       	sbci	r27, 0xDD	; 221
    279c:	9c 91       	ld	r25, X
    279e:	95 ff       	sbrs	r25, 5
    27a0:	81 c0       	rjmp	.+258    	; 0x28a4 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    27a2:	fd 01       	movw	r30, r26
    27a4:	00 e2       	ldi	r16, 0x20	; 32
    27a6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    27a8:	81 11       	cpse	r24, r1
    27aa:	77 c0       	rjmp	.+238    	; 0x289a <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    27ac:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <udd_ep_control_state>
    27b0:	84 30       	cpi	r24, 0x04	; 4
    27b2:	19 f4       	brne	.+6      	; 0x27ba <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    27b4:	a4 d9       	rcall	.-3256   	; 0x1afe <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    27b6:	60 d9       	rcall	.-3392   	; 0x1a78 <udd_ctrl_init>
    27b8:	75 c0       	rjmp	.+234    	; 0x28a4 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    27ba:	00 91 22 22 	lds	r16, 0x2222	; 0x802222 <udd_sram+0x12>
    27be:	10 91 23 22 	lds	r17, 0x2223	; 0x802223 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    27c2:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0xa>
    27c6:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0xb>
    27ca:	c0 91 09 22 	lds	r28, 0x2209	; 0x802209 <udd_ctrl_payload_nb_trans>
    27ce:	d0 91 0a 22 	lds	r29, 0x220A	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    27d2:	9e 01       	movw	r18, r28
    27d4:	20 0f       	add	r18, r16
    27d6:	31 1f       	adc	r19, r17
    27d8:	82 17       	cp	r24, r18
    27da:	93 07       	cpc	r25, r19
    27dc:	18 f4       	brcc	.+6      	; 0x27e4 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    27de:	8c 01       	movw	r16, r24
    27e0:	0c 1b       	sub	r16, r28
    27e2:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    27e4:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <udd_g_ctrlreq+0x8>
    27e8:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <udd_g_ctrlreq+0x9>
    27ec:	a8 01       	movw	r20, r16
    27ee:	69 ec       	ldi	r22, 0xC9	; 201
    27f0:	71 e2       	ldi	r23, 0x21	; 33
    27f2:	8c 0f       	add	r24, r28
    27f4:	9d 1f       	adc	r25, r29
    27f6:	85 d0       	rcall	.+266    	; 0x2902 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    27f8:	c0 0f       	add	r28, r16
    27fa:	d1 1f       	adc	r29, r17
    27fc:	c0 93 09 22 	sts	0x2209, r28	; 0x802209 <udd_ctrl_payload_nb_trans>
    2800:	d0 93 0a 22 	sts	0x220A, r29	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2804:	00 34       	cpi	r16, 0x40	; 64
    2806:	11 05       	cpc	r17, r1
    2808:	69 f4       	brne	.+26     	; 0x2824 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    280a:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    280e:	90 91 0c 22 	lds	r25, 0x220C	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    2812:	8c 0f       	add	r24, r28
    2814:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2816:	20 91 74 24 	lds	r18, 0x2474	; 0x802474 <udd_g_ctrlreq+0x6>
    281a:	30 91 75 24 	lds	r19, 0x2475	; 0x802475 <udd_g_ctrlreq+0x7>
    281e:	82 17       	cp	r24, r18
    2820:	93 07       	cpc	r25, r19
    2822:	80 f0       	brcs	.+32     	; 0x2844 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2824:	ee e6       	ldi	r30, 0x6E	; 110
    2826:	f4 e2       	ldi	r31, 0x24	; 36
    2828:	c2 87       	std	Z+10, r28	; 0x0a
    282a:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    282c:	06 84       	ldd	r0, Z+14	; 0x0e
    282e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2830:	e0 2d       	mov	r30, r0
    2832:	30 97       	sbiw	r30, 0x00	; 0
    2834:	29 f0       	breq	.+10     	; 0x2840 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2836:	09 95       	icall
    2838:	81 11       	cpse	r24, r1
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    283c:	44 d9       	rcall	.-3448   	; 0x1ac6 <udd_ctrl_stall_data>
    283e:	32 c0       	rjmp	.+100    	; 0x28a4 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2840:	50 d9       	rcall	.-3424   	; 0x1ae2 <udd_ctrl_send_zlp_in>
    2842:	30 c0       	rjmp	.+96     	; 0x28a4 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2844:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq+0xa>
    2848:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udd_g_ctrlreq+0xb>
    284c:	c8 17       	cp	r28, r24
    284e:	d9 07       	cpc	r29, r25
    2850:	f9 f4       	brne	.+62     	; 0x2890 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2852:	e0 91 7c 24 	lds	r30, 0x247C	; 0x80247c <udd_g_ctrlreq+0xe>
    2856:	f0 91 7d 24 	lds	r31, 0x247D	; 0x80247d <udd_g_ctrlreq+0xf>
    285a:	30 97       	sbiw	r30, 0x00	; 0
    285c:	11 f4       	brne	.+4      	; 0x2862 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    285e:	33 d9       	rcall	.-3482   	; 0x1ac6 <udd_ctrl_stall_data>
    2860:	21 c0       	rjmp	.+66     	; 0x28a4 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2862:	09 95       	icall
    2864:	81 11       	cpse	r24, r1
    2866:	02 c0       	rjmp	.+4      	; 0x286c <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2868:	2e d9       	rcall	.-3492   	; 0x1ac6 <udd_ctrl_stall_data>
    286a:	1c c0       	rjmp	.+56     	; 0x28a4 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    286c:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    2870:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
    2874:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udd_ctrl_payload_nb_trans>
    2878:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
    287c:	82 0f       	add	r24, r18
    287e:	93 1f       	adc	r25, r19
    2880:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ctrl_prev_payload_nb_trans>
    2884:	90 93 0c 22 	sts	0x220C, r25	; 0x80220c <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2888:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_payload_nb_trans>
    288c:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2890:	e0 e2       	ldi	r30, 0x20	; 32
    2892:	f2 e2       	ldi	r31, 0x22	; 34
    2894:	02 e0       	ldi	r16, 0x02	; 2
    2896:	06 93       	lac	Z, r16
    2898:	05 c0       	rjmp	.+10     	; 0x28a4 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    289a:	80 38       	cpi	r24, 0x80	; 128
    289c:	11 f4       	brne	.+4      	; 0x28a2 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    289e:	37 d9       	rcall	.-3474   	; 0x1b0e <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    28a2:	51 da       	rcall	.-2910   	; 0x1d46 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    28a4:	ff 91       	pop	r31
    28a6:	ef 91       	pop	r30
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	bf 91       	pop	r27
    28ae:	af 91       	pop	r26
    28b0:	9f 91       	pop	r25
    28b2:	8f 91       	pop	r24
    28b4:	7f 91       	pop	r23
    28b6:	6f 91       	pop	r22
    28b8:	5f 91       	pop	r21
    28ba:	4f 91       	pop	r20
    28bc:	3f 91       	pop	r19
    28be:	2f 91       	pop	r18
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	0f 90       	pop	r0
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	0f 90       	pop	r0
    28ca:	1f 90       	pop	r1
    28cc:	18 95       	reti

000028ce <__udivmodhi4>:
    28ce:	aa 1b       	sub	r26, r26
    28d0:	bb 1b       	sub	r27, r27
    28d2:	51 e1       	ldi	r21, 0x11	; 17
    28d4:	07 c0       	rjmp	.+14     	; 0x28e4 <__udivmodhi4_ep>

000028d6 <__udivmodhi4_loop>:
    28d6:	aa 1f       	adc	r26, r26
    28d8:	bb 1f       	adc	r27, r27
    28da:	a6 17       	cp	r26, r22
    28dc:	b7 07       	cpc	r27, r23
    28de:	10 f0       	brcs	.+4      	; 0x28e4 <__udivmodhi4_ep>
    28e0:	a6 1b       	sub	r26, r22
    28e2:	b7 0b       	sbc	r27, r23

000028e4 <__udivmodhi4_ep>:
    28e4:	88 1f       	adc	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	5a 95       	dec	r21
    28ea:	a9 f7       	brne	.-22     	; 0x28d6 <__udivmodhi4_loop>
    28ec:	80 95       	com	r24
    28ee:	90 95       	com	r25
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	08 95       	ret

000028f6 <__tablejump2__>:
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	05 90       	lpm	r0, Z+
    28fc:	f4 91       	lpm	r31, Z
    28fe:	e0 2d       	mov	r30, r0
    2900:	09 94       	ijmp

00002902 <memcpy>:
    2902:	fb 01       	movw	r30, r22
    2904:	dc 01       	movw	r26, r24
    2906:	02 c0       	rjmp	.+4      	; 0x290c <memcpy+0xa>
    2908:	01 90       	ld	r0, Z+
    290a:	0d 92       	st	X+, r0
    290c:	41 50       	subi	r20, 0x01	; 1
    290e:	50 40       	sbci	r21, 0x00	; 0
    2910:	d8 f7       	brcc	.-10     	; 0x2908 <memcpy+0x6>
    2912:	08 95       	ret

00002914 <_exit>:
    2914:	f8 94       	cli

00002916 <__stop_program>:
    2916:	ff cf       	rjmp	.-2      	; 0x2916 <__stop_program>
