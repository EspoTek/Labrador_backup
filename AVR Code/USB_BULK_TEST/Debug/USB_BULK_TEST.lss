
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00802000  00002e2e  00002ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dc8  008020c8  008020c8  00002f8c  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  00003000  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c276  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001eeb  00000000  00000000  0000f78e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009815  00000000  00000000  00011679  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b10  00000000  00000000  0001ae90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fd77  00000000  00000000  0001b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002573  00000000  00000000  0004b717  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0004dc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be4a  00000000  00000000  0004e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__vector_6>
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
      1e:	00 00       	nop
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_24>
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	aa c4       	rjmp	.+2388   	; 0xa72 <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_83>
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__vector_125>
     1f8:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__vector_126>
     1fc:	fb 0b       	sbc	r31, r27
     1fe:	20 0c       	add	r2, r0
     200:	5c 0c       	add	r5, r12
     202:	98 0c       	add	r9, r8
     204:	a1 0c       	add	r10, r1
     206:	a6 0c       	add	r10, r6
     208:	ed 0c       	add	r14, r13
     20a:	f2 0c       	add	r15, r2
     20c:	4c 0c       	add	r4, r12
     20e:	4e 0c       	add	r4, r14
     210:	50 0c       	add	r5, r0
     212:	52 0c       	add	r5, r2
     214:	54 0c       	add	r5, r4
     216:	56 0c       	add	r5, r6
     218:	58 0c       	add	r5, r8
     21a:	5a 0c       	add	r5, r10
     21c:	88 0c       	add	r8, r8
     21e:	8a 0c       	add	r8, r10
     220:	8c 0c       	add	r8, r12
     222:	8e 0c       	add	r8, r14
     224:	90 0c       	add	r9, r0
     226:	92 0c       	add	r9, r2
     228:	94 0c       	add	r9, r4
     22a:	96 0c       	add	r9, r6
     22c:	b2 0c       	add	r11, r2
     22e:	ba 0c       	add	r11, r10
     230:	c2 0c       	add	r12, r2
     232:	cd 0c       	add	r12, r13
     234:	cf 0c       	add	r12, r15
     236:	d1 0c       	add	r13, r1
     238:	da 0c       	add	r13, r10
     23a:	e3 0c       	add	r14, r3
     23c:	6a 10       	cpse	r6, r10
     23e:	6d 10       	cpse	r6, r13
     240:	70 10       	cpse	r7, r0
     242:	73 10       	cpse	r7, r3
     244:	76 10       	cpse	r7, r6
     246:	79 10       	cpse	r7, r9
     248:	7c 10       	cpse	r7, r12

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	ee e2       	ldi	r30, 0x2E	; 46
     25e:	fe e2       	ldi	r31, 0x2E	; 46
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a8 3c       	cpi	r26, 0xC8	; 200
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	a8 ec       	ldi	r26, 0xC8	; 200
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a0 39       	cpi	r26, 0x90	; 144
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	95 d2       	rcall	.+1322   	; 0x7a8 <main>
     27e:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	a8 d3       	rcall	.+1872   	; 0x9e6 <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <tiny_calibration_first_sof>:
     2f4:	e0 e7       	ldi	r30, 0x70	; 112
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	85 81       	ldd	r24, Z+5	; 0x05
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	85 83       	std	Z+5, r24	; 0x05
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	fa e0       	ldi	r31, 0x0A	; 10
     302:	8f eb       	ldi	r24, 0xBF	; 191
     304:	9d e5       	ldi	r25, 0x5D	; 93
     306:	86 a3       	std	Z+38, r24	; 0x26
     308:	97 a3       	std	Z+39, r25	; 0x27
     30a:	80 ee       	ldi	r24, 0xE0	; 224
     30c:	9e e2       	ldi	r25, 0x2E	; 46
     30e:	80 a3       	std	Z+32, r24	; 0x20
     310:	91 a3       	std	Z+33, r25	; 0x21
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
     316:	08 95       	ret

00000318 <tiny_calibration_maintain>:
     318:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     31c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     320:	81 3e       	cpi	r24, 0xE1	; 225
     322:	2e e2       	ldi	r18, 0x2E	; 46
     324:	92 07       	cpc	r25, r18
     326:	20 f0       	brcs	.+8      	; 0x330 <tiny_calibration_maintain+0x18>
     328:	20 91 7e 22 	lds	r18, 0x227E	; 0x80227e <cali_value_negative_gradient>
     32c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     330:	80 3e       	cpi	r24, 0xE0	; 224
     332:	2e e2       	ldi	r18, 0x2E	; 46
     334:	92 07       	cpc	r25, r18
     336:	20 f4       	brcc	.+8      	; 0x340 <tiny_calibration_maintain+0x28>
     338:	20 91 7b 22 	lds	r18, 0x227B	; 0x80227b <cali_value_positive_gradient>
     33c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     340:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     344:	22 23       	and	r18, r18
     346:	31 f0       	breq	.+12     	; 0x354 <tiny_calibration_maintain+0x3c>
     348:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     352:	33 c0       	rjmp	.+102    	; 0x3ba <tiny_calibration_maintain+0xa2>
     354:	88 5f       	subi	r24, 0xF8	; 248
     356:	9a 42       	sbci	r25, 0x2A	; 42
     358:	81 3d       	cpi	r24, 0xD1	; 209
     35a:	97 40       	sbci	r25, 0x07	; 7
     35c:	70 f1       	brcs	.+92     	; 0x3ba <tiny_calibration_maintain+0xa2>
     35e:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <outOfRange>
     362:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <outOfRange+0x1>
     366:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <outOfRange+0x2>
     36a:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <outOfRange+0x3>
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	a1 1d       	adc	r26, r1
     372:	b1 1d       	adc	r27, r1
     374:	80 93 c9 20 	sts	0x20C9, r24	; 0x8020c9 <outOfRange>
     378:	90 93 ca 20 	sts	0x20CA, r25	; 0x8020ca <outOfRange+0x1>
     37c:	a0 93 cb 20 	sts	0x20CB, r26	; 0x8020cb <outOfRange+0x2>
     380:	b0 93 cc 20 	sts	0x20CC, r27	; 0x8020cc <outOfRange+0x3>
     384:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <outOfRange>
     388:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <outOfRange+0x1>
     38c:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <outOfRange+0x2>
     390:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <outOfRange+0x3>
     394:	89 2f       	mov	r24, r25
     396:	9a 2f       	mov	r25, r26
     398:	ab 2f       	mov	r26, r27
     39a:	bb 27       	eor	r27, r27
     39c:	e6 e8       	ldi	r30, 0x86	; 134
     39e:	f2 e2       	ldi	r31, 0x22	; 34
     3a0:	82 8b       	std	Z+18, r24	; 0x12
     3a2:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <outOfRange>
     3a6:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <outOfRange+0x1>
     3aa:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <outOfRange+0x2>
     3ae:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <outOfRange+0x3>
     3b2:	81 8b       	std	Z+17, r24	; 0x11
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     3ba:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     3be:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	b1 f4       	brne	.+44     	; 0x3f2 <tiny_calibration_maintain+0xda>
     3c6:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     3ca:	8f 3f       	cpi	r24, 0xFF	; 255
     3cc:	91 f0       	breq	.+36     	; 0x3f2 <tiny_calibration_maintain+0xda>
     3ce:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3d2:	81 11       	cpse	r24, r1
     3d4:	06 c0       	rjmp	.+12     	; 0x3e2 <tiny_calibration_maintain+0xca>
     3d6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3da:	81 50       	subi	r24, 0x01	; 1
     3dc:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3e0:	08 95       	ret
     3e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3e6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3ea:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3ee:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3f2:	08 95       	ret

000003f4 <tiny_calibration_safe_add>:
     3f4:	00 97       	sbiw	r24, 0x00	; 0
     3f6:	09 f4       	brne	.+2      	; 0x3fa <tiny_calibration_safe_add+0x6>
     3f8:	66 c0       	rjmp	.+204    	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
     3fa:	0c f0       	brlt	.+2      	; 0x3fe <tiny_calibration_safe_add+0xa>
     3fc:	9c 01       	movw	r18, r24
     3fe:	99 23       	and	r25, r25
     400:	34 f4       	brge	.+12     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
     402:	22 27       	eor	r18, r18
     404:	33 27       	eor	r19, r19
     406:	28 1b       	sub	r18, r24
     408:	39 0b       	sbc	r19, r25
     40a:	51 e0       	ldi	r21, 0x01	; 1
     40c:	01 c0       	rjmp	.+2      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	e8 e6       	ldi	r30, 0x68	; 104
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	83 81       	ldd	r24, Z+3	; 0x03
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     41c:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     420:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     424:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     428:	96 95       	lsr	r25
     42a:	98 2f       	mov	r25, r24
     42c:	88 27       	eor	r24, r24
     42e:	97 95       	ror	r25
     430:	87 95       	ror	r24
     432:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     436:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     43a:	42 81       	ldd	r20, Z+2	; 0x02
     43c:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     440:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     444:	84 0f       	add	r24, r20
     446:	91 1d       	adc	r25, r1
     448:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     44c:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     450:	00 00       	nop
     452:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     456:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     45a:	82 17       	cp	r24, r18
     45c:	93 07       	cpc	r25, r19
     45e:	28 f4       	brcc	.+10     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
     460:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <calTemp>
     464:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <calTemp+0x1>
     468:	08 95       	ret
     46a:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     46e:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     472:	82 0f       	add	r24, r18
     474:	93 1f       	adc	r25, r19
     476:	81 15       	cp	r24, r1
     478:	90 42       	sbci	r25, 0x20	; 32
     47a:	38 f0       	brcs	.+14     	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	9f e1       	ldi	r25, 0x1F	; 31
     480:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     484:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     488:	08 95       	ret
     48a:	55 23       	and	r21, r21
     48c:	59 f0       	breq	.+22     	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
     48e:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     492:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     496:	82 1b       	sub	r24, r18
     498:	93 0b       	sbc	r25, r19
     49a:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <calTemp>
     49e:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <calTemp+0x1>
     4a2:	0a c0       	rjmp	.+20     	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
     4a4:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     4a8:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     4ac:	28 0f       	add	r18, r24
     4ae:	39 1f       	adc	r19, r25
     4b0:	20 93 7c 22 	sts	0x227C, r18	; 0x80227c <calTemp>
     4b4:	30 93 7d 22 	sts	0x227D, r19	; 0x80227d <calTemp+0x1>
     4b8:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <calTemp>
     4bc:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <calTemp+0x1>
     4c0:	8f 77       	andi	r24, 0x7F	; 127
     4c2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4c6:	08 95       	ret

000004c8 <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4cc:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4d0:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4d4:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4d8:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4dc:	9e 01       	movw	r18, r28
     4de:	28 1b       	sub	r18, r24
     4e0:	39 0b       	sbc	r19, r25
     4e2:	20 93 7f 22 	sts	0x227F, r18	; 0x80227f <gradient>
     4e6:	30 93 80 22 	sts	0x2280, r19	; 0x802280 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4ea:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__data_end>
     4ee:	81 11       	cpse	r24, r1
     4f0:	4d c0       	rjmp	.+154    	; 0x58c <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4f2:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     4f6:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     4fa:	8e 3c       	cpi	r24, 0xCE	; 206
     4fc:	9f 4f       	sbci	r25, 0xFF	; 255
     4fe:	e4 f4       	brge	.+56     	; 0x538 <tiny_calibration_find_values+0x70>
     500:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     504:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     508:	8b 36       	cpi	r24, 0x6B	; 107
     50a:	9f 4f       	sbci	r25, 0xFF	; 255
     50c:	ac f0       	brlt	.+42     	; 0x538 <tiny_calibration_find_values+0x70>
			if(inarow){
     50e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     512:	88 23       	and	r24, r24
     514:	31 f0       	breq	.+12     	; 0x522 <tiny_calibration_find_values+0x5a>
				inarow--;
     516:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     51a:	81 50       	subi	r24, 0x01	; 1
     51c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     520:	35 c0       	rjmp	.+106    	; 0x58c <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     522:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     526:	80 93 7e 22 	sts	0x227E, r24	; 0x80227e <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <__data_end>
				inarow = NUM_INAROW;
     530:	8c e0       	ldi	r24, 0x0C	; 12
     532:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     536:	2a c0       	rjmp	.+84     	; 0x58c <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     538:	8c e0       	ldi	r24, 0x0C	; 12
     53a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     53e:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     542:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     546:	8a 36       	cpi	r24, 0x6A	; 106
     548:	9f 4f       	sbci	r25, 0xFF	; 255
     54a:	1c f0       	brlt	.+6      	; 0x552 <tiny_calibration_find_values+0x8a>
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	9f ef       	ldi	r25, 0xFF	; 255
     550:	02 c0       	rjmp	.+4      	; 0x556 <tiny_calibration_find_values+0x8e>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <calChange>
     55a:	90 93 7a 22 	sts	0x227A, r25	; 0x80227a <calChange+0x1>
			calChange -= gradient / 48;
     55e:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     562:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     566:	20 91 79 22 	lds	r18, 0x2279	; 0x802279 <calChange>
     56a:	30 91 7a 22 	lds	r19, 0x227A	; 0x80227a <calChange+0x1>
     56e:	60 e3       	ldi	r22, 0x30	; 48
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__divmodhi4>
     576:	26 1b       	sub	r18, r22
     578:	37 0b       	sbc	r19, r23
     57a:	20 93 79 22 	sts	0x2279, r18	; 0x802279 <calChange>
     57e:	30 93 7a 22 	sts	0x227A, r19	; 0x80227a <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     582:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <calChange>
     586:	90 91 7a 22 	lds	r25, 0x227A	; 0x80227a <calChange+0x1>
     58a:	34 df       	rcall	.-408    	; 0x3f4 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     58c:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__data_end>
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	29 f5       	brne	.+74     	; 0x5de <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     594:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     598:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     59c:	c3 97       	sbiw	r24, 0x33	; 51
     59e:	94 f0       	brlt	.+36     	; 0x5c4 <tiny_calibration_find_values+0xfc>
			if(inarow){
     5a0:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     5a4:	88 23       	and	r24, r24
     5a6:	31 f0       	breq	.+12     	; 0x5b4 <tiny_calibration_find_values+0xec>
				inarow--;
     5a8:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     5ac:	81 50       	subi	r24, 0x01	; 1
     5ae:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     5b2:	15 c0       	rjmp	.+42     	; 0x5de <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     5b4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     5b8:	80 93 7b 22 	sts	0x227B, r24	; 0x80227b <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <__data_end>
     5c2:	0d c0       	rjmp	.+26     	; 0x5de <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     5c4:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <gradient>
     5c8:	90 91 80 22 	lds	r25, 0x2280	; 0x802280 <gradient+0x1>
     5cc:	87 39       	cpi	r24, 0x97	; 151
     5ce:	91 05       	cpc	r25, r1
     5d0:	1c f4       	brge	.+6      	; 0x5d8 <tiny_calibration_find_values+0x110>
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <tiny_calibration_find_values+0x114>
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	9f ef       	ldi	r25, 0xFF	; 255
     5dc:	0b df       	rcall	.-490    	; 0x3f4 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5de:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5e2:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5ec:	86 17       	cp	r24, r22
     5ee:	97 07       	cpc	r25, r23
     5f0:	79 f0       	breq	.+30     	; 0x610 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5f2:	68 17       	cp	r22, r24
     5f4:	79 07       	cpc	r23, r25
     5f6:	28 f4       	brcc	.+10     	; 0x602 <magnitude_difference+0x16>
     5f8:	9c 01       	movw	r18, r24
     5fa:	26 1b       	sub	r18, r22
     5fc:	37 0b       	sbc	r19, r23
     5fe:	b9 01       	movw	r22, r18
     600:	09 c0       	rjmp	.+18     	; 0x614 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     602:	86 17       	cp	r24, r22
     604:	97 07       	cpc	r25, r23
     606:	18 f4       	brcc	.+6      	; 0x60e <magnitude_difference+0x22>
     608:	68 1b       	sub	r22, r24
     60a:	79 0b       	sbc	r23, r25
     60c:	03 c0       	rjmp	.+6      	; 0x614 <magnitude_difference+0x28>
     60e:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	86 2f       	mov	r24, r22
     616:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     618:	08 95       	ret

0000061a <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     61e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     622:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     626:	89 2b       	or	r24, r25
     628:	51 f0       	breq	.+20     	; 0x63e <tiny_calibration_layer2+0x24>
		layer2_counter--;
     62a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     62e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     638:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     63c:	65 c0       	rjmp	.+202    	; 0x708 <tiny_calibration_layer2+0xee>
	}
	layer2_counter = LAYER2_INTERVAL;
     63e:	80 e4       	ldi	r24, 0x40	; 64
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     646:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     64a:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     64e:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	09 f4       	brne	.+2      	; 0x658 <tiny_calibration_layer2+0x3e>
     656:	58 c0       	rjmp	.+176    	; 0x708 <tiny_calibration_layer2+0xee>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     658:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     65c:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	if(magnitude_difference(TRFCNT_temp, median_TRFCNT) > 200){
     660:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     664:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     668:	ce 01       	movw	r24, r28
     66a:	c0 df       	rcall	.-128    	; 0x5ec <magnitude_difference>
     66c:	89 3c       	cpi	r24, 0xC9	; 201
     66e:	91 05       	cpc	r25, r1
     670:	00 f1       	brcs	.+64     	; 0x6b2 <tiny_calibration_layer2+0x98>
		TRFCNT_temp = (TRFCNT_temp + HALFPACKET_SIZE) % PACKET_SIZE;
     672:	ae 01       	movw	r20, r28
     674:	49 58       	subi	r20, 0x89	; 137
     676:	5e 4f       	sbci	r21, 0xFE	; 254
     678:	9a 01       	movw	r18, r20
     67a:	36 95       	lsr	r19
     67c:	27 95       	ror	r18
     67e:	a1 eb       	ldi	r26, 0xB1	; 177
     680:	bb e2       	ldi	r27, 0x2B	; 43
     682:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__umulhisi3>
     686:	ec 01       	movw	r28, r24
     688:	00 24       	eor	r0, r0
     68a:	cc 0f       	add	r28, r28
     68c:	dd 1f       	adc	r29, r29
     68e:	00 1c       	adc	r0, r0
     690:	cc 0f       	add	r28, r28
     692:	dd 1f       	adc	r29, r29
     694:	00 1c       	adc	r0, r0
     696:	cd 2f       	mov	r28, r29
     698:	d0 2d       	mov	r29, r0
     69a:	2e ee       	ldi	r18, 0xEE	; 238
     69c:	32 e0       	ldi	r19, 0x02	; 2
     69e:	c2 9f       	mul	r28, r18
     6a0:	c0 01       	movw	r24, r0
     6a2:	c3 9f       	mul	r28, r19
     6a4:	90 0d       	add	r25, r0
     6a6:	d2 9f       	mul	r29, r18
     6a8:	90 0d       	add	r25, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	ea 01       	movw	r28, r20
     6ae:	c8 1b       	sub	r28, r24
     6b0:	d9 0b       	sbc	r29, r25
	}
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6b2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6b6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6ba:	8c 17       	cp	r24, r28
     6bc:	9d 07       	cpc	r25, r29
     6be:	78 f4       	brcc	.+30     	; 0x6de <tiny_calibration_layer2+0xc4>
     6c0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6c4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6c8:	ce 01       	movw	r24, r28
     6ca:	90 df       	rcall	.-224    	; 0x5ec <magnitude_difference>
     6cc:	02 97       	sbiw	r24, 0x02	; 2
     6ce:	38 f0       	brcs	.+14     	; 0x6de <tiny_calibration_layer2+0xc4>
		TC_CALI.PERBUF = 24000;
     6d0:	80 ec       	ldi	r24, 0xC0	; 192
     6d2:	9d e5       	ldi	r25, 0x5D	; 93
     6d4:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6d8:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6dc:	15 c0       	rjmp	.+42     	; 0x708 <tiny_calibration_layer2+0xee>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6de:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6e2:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6e6:	c8 17       	cp	r28, r24
     6e8:	d9 07       	cpc	r29, r25
     6ea:	70 f4       	brcc	.+28     	; 0x708 <tiny_calibration_layer2+0xee>
     6ec:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6f0:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6f4:	ce 01       	movw	r24, r28
     6f6:	7a df       	rcall	.-268    	; 0x5ec <magnitude_difference>
     6f8:	02 97       	sbiw	r24, 0x02	; 2
     6fa:	30 f0       	brcs	.+12     	; 0x708 <tiny_calibration_layer2+0xee>
		TC_CALI.PERBUF = 23999;
     6fc:	8f eb       	ldi	r24, 0xBF	; 191
     6fe:	9d e5       	ldi	r25, 0x5D	; 93
     700:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     704:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     70e:	ac 01       	movw	r20, r24
     710:	46 0f       	add	r20, r22
     712:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     714:	86 1b       	sub	r24, r22
     716:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     718:	e0 e0       	ldi	r30, 0x00	; 0
     71a:	fa e0       	ldi	r31, 0x0A	; 10
     71c:	20 a1       	ldd	r18, Z+32	; 0x20
     71e:	31 a1       	ldd	r19, Z+33	; 0x21
     720:	24 17       	cp	r18, r20
     722:	35 07       	cpc	r19, r21
     724:	d8 f7       	brcc	.-10     	; 0x71c <tiny_calibration_synchronise_phase+0xe>
     726:	20 a1       	ldd	r18, Z+32	; 0x20
     728:	31 a1       	ldd	r19, Z+33	; 0x21
     72a:	82 17       	cp	r24, r18
     72c:	93 07       	cpc	r25, r19
     72e:	b0 f7       	brcc	.-20     	; 0x71c <tiny_calibration_synchronise_phase+0xe>
	return;
}
     730:	08 95       	ret

00000732 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     732:	e0 e8       	ldi	r30, 0x80	; 128
     734:	f6 e0       	ldi	r31, 0x06	; 6
     736:	8f e0       	ldi	r24, 0x0F	; 15
     738:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     73a:	85 e0       	ldi	r24, 0x05	; 5
     73c:	84 83       	std	Z+4, r24	; 0x04
     73e:	08 95       	ret

00000740 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     740:	08 95       	ret

00000742 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, iso_callback);
     742:	40 91 d4 20 	lds	r20, 0x20D4	; 0x8020d4 <usb_state>
     746:	27 e7       	ldi	r18, 0x77	; 119
     748:	31 e0       	ldi	r19, 0x01	; 1
     74a:	42 9f       	mul	r20, r18
     74c:	c0 01       	movw	r24, r0
     74e:	43 9f       	mul	r20, r19
     750:	90 0d       	add	r25, r0
     752:	11 24       	eor	r1, r1
     754:	41 ea       	ldi	r20, 0xA1	; 161
     756:	53 e0       	ldi	r21, 0x03	; 3
     758:	6a ef       	ldi	r22, 0xFA	; 250
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	84 55       	subi	r24, 0x54	; 84
     75e:	99 4d       	sbci	r25, 0xD9	; 217
     760:	bb c6       	rjmp	.+3446   	; 0x14d8 <udi_vendor_iso_in_run>
     762:	08 95       	ret

00000764 <iso_callback2>:
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, iso_callback2);
     764:	40 91 d4 20 	lds	r20, 0x20D4	; 0x8020d4 <usb_state>
     768:	27 e7       	ldi	r18, 0x77	; 119
     76a:	31 e0       	ldi	r19, 0x01	; 1
     76c:	42 9f       	mul	r20, r18
     76e:	c0 01       	movw	r24, r0
     770:	43 9f       	mul	r20, r19
     772:	90 0d       	add	r25, r0
     774:	11 24       	eor	r1, r1
     776:	42 eb       	ldi	r20, 0xB2	; 178
     778:	53 e0       	ldi	r21, 0x03	; 3
     77a:	6a ef       	ldi	r22, 0xFA	; 250
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	8a 55       	subi	r24, 0x5A	; 90
     780:	98 4d       	sbci	r25, 0xD8	; 216
     782:	b6 c6       	rjmp	.+3436   	; 0x14f0 <udi_vendor_iso_in_run2>
     784:	08 95       	ret

00000786 <iso_callback3>:
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, iso_callback3);
     786:	40 91 d4 20 	lds	r20, 0x20D4	; 0x8020d4 <usb_state>
     78a:	27 e7       	ldi	r18, 0x77	; 119
     78c:	31 e0       	ldi	r19, 0x01	; 1
     78e:	42 9f       	mul	r20, r18
     790:	c0 01       	movw	r24, r0
     792:	43 9f       	mul	r20, r19
     794:	90 0d       	add	r25, r0
     796:	11 24       	eor	r1, r1
     798:	43 ec       	ldi	r20, 0xC3	; 195
     79a:	53 e0       	ldi	r21, 0x03	; 3
     79c:	6a ef       	ldi	r22, 0xFA	; 250
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 56       	subi	r24, 0x60	; 96
     7a2:	97 4d       	sbci	r25, 0xD7	; 215
     7a4:	b1 c6       	rjmp	.+3426   	; 0x1508 <udi_vendor_iso_in_run3>
     7a6:	08 95       	ret

000007a8 <main>:
volatile char debug_data[8] = "DEBUG123";

unified_debug uds;

int main(void){
	irq_initialize_vectors();
     7a8:	87 e0       	ldi	r24, 0x07	; 7
     7aa:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     7ae:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     7b0:	69 dd       	rcall	.-1326   	; 0x284 <tiny_calibration_init>
		
	board_init();
     7b2:	c6 df       	rcall	.-116    	; 0x740 <board_init>
	udc_start();
     7b4:	a0 d7       	rcall	.+3904   	; 0x16f6 <udc_start>
	tiny_dac_setup();
     7b6:	70 d1       	rcall	.+736    	; 0xa98 <tiny_dac_setup>
	tiny_dma_setup();
     7b8:	93 d1       	rcall	.+806    	; 0xae0 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	1c d1       	rcall	.+568    	; 0x9f8 <tiny_adc_setup>
	tiny_adc_pid_setup();
     7c0:	08 d1       	rcall	.+528    	; 0x9d2 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     7c2:	8c e0       	ldi	r24, 0x0C	; 12
     7c4:	fc d0       	rcall	.+504    	; 0x9be <tiny_adc_ch1setup>
	tiny_timer_setup();
     7c6:	1e d5       	rcall	.+2620   	; 0x1204 <tiny_timer_setup>
	tiny_uart_setup();
     7c8:	d9 d5       	rcall	.+2994   	; 0x137c <tiny_uart_setup>
	tiny_spi_setup();
     7ca:	f0 d5       	rcall	.+3040   	; 0x13ac <tiny_spi_setup>
	tiny_dig_setup();
     7cc:	b2 df       	rcall	.-156    	; 0x732 <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");

	strcpy(uds.header, "debug123");
     7ce:	89 e0       	ldi	r24, 0x09	; 9
     7d0:	ee eb       	ldi	r30, 0xBE	; 190
     7d2:	f0 e2       	ldi	r31, 0x20	; 32
     7d4:	a6 e8       	ldi	r26, 0x86	; 134
     7d6:	b2 e2       	ldi	r27, 0x22	; 34
     7d8:	01 90       	ld	r0, Z+
     7da:	0d 92       	st	X+, r0
     7dc:	8a 95       	dec	r24
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <main+0x30>
     7e0:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <debug_counter>
     7e4:	90 91 83 22 	lds	r25, 0x2283	; 0x802283 <debug_counter+0x1>
     7e8:	a0 91 84 22 	lds	r26, 0x2284	; 0x802284 <debug_counter+0x2>
     7ec:	b0 91 85 22 	lds	r27, 0x2285	; 0x802285 <debug_counter+0x3>

	while (true) {
		debug_counter++;
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	a1 1d       	adc	r26, r1
     7f4:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	21 ee       	ldi	r18, 0xE1	; 225
     7fa:	92 07       	cpc	r25, r18
     7fc:	25 ef       	ldi	r18, 0xF5	; 245
     7fe:	a2 07       	cpc	r26, r18
     800:	25 e0       	ldi	r18, 0x05	; 5
     802:	b2 07       	cpc	r27, r18
     804:	18 f0       	brcs	.+6      	; 0x80c <main+0x64>
			debug_counter = 0;
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     828:	e3 cf       	rjmp	.-58     	; 0x7f0 <main+0x48>

0000082a <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     82a:	08 95       	ret

0000082c <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     82c:	08 95       	ret

0000082e <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
	cli();
     832:	f8 94       	cli
	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     834:	a0 e0       	ldi	r26, 0x00	; 0
     836:	b1 e0       	ldi	r27, 0x01	; 1
     838:	54 96       	adiw	r26, 0x14	; 20
     83a:	8c 91       	ld	r24, X
     83c:	54 97       	sbiw	r26, 0x14	; 20
     83e:	e6 e8       	ldi	r30, 0x86	; 134
     840:	f2 e2       	ldi	r31, 0x22	; 34
     842:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     844:	55 96       	adiw	r26, 0x15	; 21
     846:	8c 91       	ld	r24, X
     848:	55 97       	sbiw	r26, 0x15	; 21
     84a:	82 87       	std	Z+10, r24	; 0x0a
	uds.counterL = TC_CALI.CNTL;
     84c:	c0 e0       	ldi	r28, 0x00	; 0
     84e:	da e0       	ldi	r29, 0x0A	; 10
     850:	88 a1       	ldd	r24, Y+32	; 0x20
     852:	83 8b       	std	Z+19, r24	; 0x13
	uds.counterH = TC_CALI.CNTH;
     854:	89 a1       	ldd	r24, Y+33	; 0x21
     856:	84 8b       	std	Z+20, r24	; 0x14
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     858:	54 96       	adiw	r26, 0x14	; 20
     85a:	8d 91       	ld	r24, X+
     85c:	9c 91       	ld	r25, X
     85e:	55 97       	sbiw	r26, 0x15	; 21
     860:	86 34       	cpi	r24, 0x46	; 70
     862:	91 40       	sbci	r25, 0x01	; 1
     864:	80 f0       	brcs	.+32     	; 0x886 <main_sof_action+0x58>
     866:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     86a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     86e:	89 3a       	cpi	r24, 0xA9	; 169
     870:	91 40       	sbci	r25, 0x01	; 1
     872:	48 f4       	brcc	.+18     	; 0x886 <main_sof_action+0x58>
		currentTrfcnt = DMA.CH0.TRFCNT;
     874:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     878:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     87c:	80 93 88 2e 	sts	0x2E88, r24	; 0x802e88 <currentTrfcnt>
     880:	90 93 89 2e 	sts	0x2E89, r25	; 0x802e89 <currentTrfcnt+0x1>
		asm("nop");
     884:	00 00       	nop
	}
	if(firstFrame){
     886:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <firstFrame>
     88a:	88 23       	and	r24, r24
     88c:	41 f0       	breq	.+16     	; 0x89e <main_sof_action+0x70>
		tiny_calibration_first_sof();
     88e:	32 dd       	rcall	.-1436   	; 0x2f4 <tiny_calibration_first_sof>
		firstFrame = 0;
     890:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <firstFrame>
		tcinit = 1;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 d1 20 	sts	0x20D1, r24	; 0x8020d1 <tcinit>
		sei();
     89a:	78 94       	sei
		return;
     89c:	55 c0       	rjmp	.+170    	; 0x948 <main_sof_action+0x11a>
	}
	else{
		if(tcinit){
     89e:	80 91 d1 20 	lds	r24, 0x20D1	; 0x8020d1 <tcinit>
     8a2:	88 23       	and	r24, r24
     8a4:	b9 f1       	breq	.+110    	; 0x914 <main_sof_action+0xe6>
			if(calibration_values_found == 0x03){
     8a6:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__data_end>
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	19 f4       	brne	.+6      	; 0x8b4 <main_sof_action+0x86>
				tiny_calibration_maintain();
     8ae:	34 dd       	rcall	.-1432   	; 0x318 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     8b0:	b4 de       	rcall	.-664    	; 0x61a <tiny_calibration_layer2>
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <main_sof_action+0x88>
			} else tiny_calibration_find_values();
     8b4:	09 de       	rcall	.-1006   	; 0x4c8 <tiny_calibration_find_values>
			if(debug_divider == DEBUG_DIVISION){
     8b6:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <debug_divider>
     8ba:	8f 37       	cpi	r24, 0x7F	; 127
     8bc:	31 f5       	brne	.+76     	; 0x90a <main_sof_action+0xdc>
				debug_divider = 0;
     8be:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <debug_divider>
				cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     8c2:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <cntCntCnt>
     8c6:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <cntCntCnt+0x1>
     8ca:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8ce:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	e8 57       	subi	r30, 0x78	; 120
     8d8:	f3 4d       	sbci	r31, 0xD3	; 211
     8da:	80 83       	st	Z, r24
     8dc:	91 83       	std	Z+1, r25	; 0x01
				if(cntCntCnt == (CNT_CNT_MAX - 1)){
     8de:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <cntCntCnt>
     8e2:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <cntCntCnt+0x1>
     8e6:	8f 3f       	cpi	r24, 0xFF	; 255
     8e8:	91 05       	cpc	r25, r1
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <main_sof_action+0xc8>
					cntCntCnt = 0;
     8ec:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <cntCntCnt>
     8f0:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <cntCntCnt+0x1>
     8f4:	0f c0       	rjmp	.+30     	; 0x914 <main_sof_action+0xe6>
				}
				else cntCntCnt++;
     8f6:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <cntCntCnt>
     8fa:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <cntCntCnt+0x1>
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <cntCntCnt>
     904:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <cntCntCnt+0x1>
     908:	05 c0       	rjmp	.+10     	; 0x914 <main_sof_action+0xe6>
			}
			else debug_divider++;
     90a:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <debug_divider>
     90e:	8f 5f       	subi	r24, 0xFF	; 255
     910:	80 93 cd 20 	sts	0x20CD, r24	; 0x8020cd <debug_divider>
		}
	}
	
	if(debugOnNextEnd){
     914:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <debugOnNextEnd>
     918:	88 23       	and	r24, r24
     91a:	51 f0       	breq	.+20     	; 0x930 <main_sof_action+0x102>
		currentTrfcnt = DMA.CH0.TRFCNT;
     91c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     920:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     924:	80 93 88 2e 	sts	0x2E88, r24	; 0x802e88 <currentTrfcnt>
     928:	90 93 89 2e 	sts	0x2E89, r25	; 0x802e89 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     92c:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <debugOnNextEnd>
	}
	usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     930:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     934:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	27 37       	cpi	r18, 0x77	; 119
     93c:	31 40       	sbci	r19, 0x01	; 1
     93e:	08 f0       	brcs	.+2      	; 0x942 <main_sof_action+0x114>
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <usb_state>
	sei();
     946:	78 94       	sei
	return;
}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <main_vendor_enable>:

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <main_b_vendor_enable>
	firstFrame = 1;
     954:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], 250, iso_callback);
     958:	41 ea       	ldi	r20, 0xA1	; 161
     95a:	53 e0       	ldi	r21, 0x03	; 3
     95c:	6a ef       	ldi	r22, 0xFA	; 250
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	8c ea       	ldi	r24, 0xAC	; 172
     962:	96 e2       	ldi	r25, 0x26	; 38
     964:	b9 d5       	rcall	.+2930   	; 0x14d8 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], 250, iso_callback2);
     966:	42 eb       	ldi	r20, 0xB2	; 178
     968:	53 e0       	ldi	r21, 0x03	; 3
     96a:	6a ef       	ldi	r22, 0xFA	; 250
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	86 ea       	ldi	r24, 0xA6	; 166
     970:	97 e2       	ldi	r25, 0x27	; 39
     972:	be d5       	rcall	.+2940   	; 0x14f0 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], 250, iso_callback3);
     974:	43 ec       	ldi	r20, 0xC3	; 195
     976:	53 e0       	ldi	r21, 0x03	; 3
     978:	6a ef       	ldi	r22, 0xFA	; 250
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	80 ea       	ldi	r24, 0xA0	; 160
     97e:	98 e2       	ldi	r25, 0x28	; 40
     980:	c3 d5       	rcall	.+2950   	; 0x1508 <udi_vendor_iso_in_run3>
	return true;
}
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	08 95       	ret

00000986 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     986:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <main_b_vendor_enable>
     98a:	08 95       	ret

0000098c <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	08 95       	ret

00000990 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	08 95       	ret

00000994 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     994:	e0 e0       	ldi	r30, 0x00	; 0
     996:	f2 e0       	ldi	r31, 0x02	; 2
     998:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     99a:	98 2f       	mov	r25, r24
     99c:	9c 71       	andi	r25, 0x1C	; 28
     99e:	93 68       	ori	r25, 0x83	; 131
     9a0:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     9a2:	88 23       	and	r24, r24
     9a4:	1c f4       	brge	.+6      	; 0x9ac <tiny_adc_ch0setup+0x18>
     9a6:	90 e1       	ldi	r25, 0x10	; 16
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <tiny_adc_ch0setup+0x1c>
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	89 2b       	or	r24, r25
     9b2:	e0 e0       	ldi	r30, 0x00	; 0
     9b4:	f2 e0       	ldi	r31, 0x02	; 2
     9b6:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9b8:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     9ba:	16 a2       	std	Z+38, r1	; 0x26
     9bc:	08 95       	ret

000009be <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     9be:	e0 e0       	ldi	r30, 0x00	; 0
     9c0:	f2 e0       	ldi	r31, 0x02	; 2
     9c2:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     9c4:	83 68       	ori	r24, 0x83	; 131
     9c6:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     9c8:	80 e1       	ldi	r24, 0x10	; 16
     9ca:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9cc:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     9ce:	16 aa       	std	Z+54, r1	; 0x36
     9d0:	08 95       	ret

000009d2 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     9d2:	e0 e0       	ldi	r30, 0x00	; 0
     9d4:	f2 e0       	ldi	r31, 0x02	; 2
     9d6:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     9d8:	83 e8       	ldi	r24, 0x83	; 131
     9da:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     9dc:	8f e2       	ldi	r24, 0x2F	; 47
     9de:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9e0:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     9e2:	16 a6       	std	Z+46, r1	; 0x2e
     9e4:	08 95       	ret

000009e6 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     9e6:	aa ec       	ldi	r26, 0xCA	; 202
     9e8:	b1 e0       	ldi	r27, 0x01	; 1
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     9ee:	e8 2f       	mov	r30, r24
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     9f4:	1c 92       	st	X, r1

	return( result );
}
     9f6:	08 95       	ret

000009f8 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     9fc:	e0 e7       	ldi	r30, 0x70	; 112
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	91 81       	ldd	r25, Z+1	; 0x01
     a02:	9d 7f       	andi	r25, 0xFD	; 253
     a04:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     a06:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a0a:	62 30       	cpi	r22, 0x02	; 2
     a0c:	31 f1       	breq	.+76     	; 0xa5a <tiny_adc_setup+0x62>
     a0e:	e0 e0       	ldi	r30, 0x00	; 0
     a10:	f2 e0       	ldi	r31, 0x02	; 2
     a12:	9c e1       	ldi	r25, 0x1C	; 28
     a14:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a16:	90 e4       	ldi	r25, 0x40	; 64
     a18:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a1a:	81 11       	cpse	r24, r1
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <tiny_adc_setup+0x2a>
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <tiny_adc_setup+0x2c>
     a22:	80 ec       	ldi	r24, 0xC0	; 192
     a24:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     a28:	61 30       	cpi	r22, 0x01	; 1
     a2a:	11 f0       	breq	.+4      	; 0xa30 <tiny_adc_setup+0x38>
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <tiny_adc_setup+0x3a>
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	c0 e0       	ldi	r28, 0x00	; 0
     a34:	d2 e0       	ldi	r29, 0x02	; 2
     a36:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     a38:	80 e2       	ldi	r24, 0x20	; 32
     a3a:	d5 df       	rcall	.-86     	; 0x9e6 <ReadCalibrationByte>
     a3c:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     a3e:	81 e2       	ldi	r24, 0x21	; 33
     a40:	d2 df       	rcall	.-92     	; 0x9e6 <ReadCalibrationByte>
     a42:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     a44:	18 8e       	std	Y+24, r1	; 0x18
     a46:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     a4c:	c2 df       	rcall	.-124    	; 0x9d2 <tiny_adc_pid_setup>
     a4e:	0e c0       	rjmp	.+28     	; 0xa6c <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a50:	80 ec       	ldi	r24, 0xC0	; 192
     a52:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	ec cf       	rjmp	.-40     	; 0xa32 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a5a:	e0 e0       	ldi	r30, 0x00	; 0
     a5c:	f2 e0       	ldi	r31, 0x02	; 2
     a5e:	9e e1       	ldi	r25, 0x1E	; 30
     a60:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a62:	90 e4       	ldi	r25, 0x40	; 64
     a64:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a66:	81 11       	cpse	r24, r1
     a68:	f3 cf       	rjmp	.-26     	; 0xa50 <tiny_adc_setup+0x58>
     a6a:	d9 cf       	rjmp	.-78     	; 0xa1e <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     a8c:	8f 91       	pop	r24
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0
     a94:	1f 90       	pop	r1
     a96:	18 95       	reti

00000a98 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     a9c:	e0 e7       	ldi	r30, 0x70	; 112
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	82 81       	ldd	r24, Z+2	; 0x02
     aa2:	8b 7f       	andi	r24, 0xFB	; 251
     aa4:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     aa6:	c0 e2       	ldi	r28, 0x20	; 32
     aa8:	d3 e0       	ldi	r29, 0x03	; 3
     aaa:	8d e0       	ldi	r24, 0x0D	; 13
     aac:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     aae:	80 e4       	ldi	r24, 0x40	; 64
     ab0:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     ab2:	89 e0       	ldi	r24, 0x09	; 9
     ab4:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     ab6:	83 e3       	ldi	r24, 0x33	; 51
     ab8:	96 df       	rcall	.-212    	; 0x9e6 <ReadCalibrationByte>
     aba:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     abc:	82 e3       	ldi	r24, 0x32	; 50
     abe:	93 df       	rcall	.-218    	; 0x9e6 <ReadCalibrationByte>
     ac0:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     ac2:	87 e3       	ldi	r24, 0x37	; 55
     ac4:	90 df       	rcall	.-224    	; 0x9e6 <ReadCalibrationByte>
     ac6:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     ac8:	86 e3       	ldi	r24, 0x36	; 54
     aca:	8d df       	rcall	.-230    	; 0x9e6 <ReadCalibrationByte>
     acc:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     ace:	e0 e2       	ldi	r30, 0x20	; 32
     ad0:	f6 e0       	ldi	r31, 0x06	; 6
     ad2:	80 81       	ld	r24, Z
     ad4:	83 60       	ori	r24, 0x03	; 3
     ad6:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     ad8:	14 82       	std	Z+4, r1	; 0x04
	
	

     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     ae0:	e0 e7       	ldi	r30, 0x70	; 112
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	8e 7f       	andi	r24, 0xFE	; 254
     ae8:	80 83       	st	Z, r24
     aea:	83 e8       	ldi	r24, 0x83	; 131
     aec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     af0:	08 95       	ret

00000af2 <tiny_dma_flush>:
     af2:	e0 e0       	ldi	r30, 0x00	; 0
     af4:	f1 e0       	ldi	r31, 0x01	; 1
     af6:	10 8a       	std	Z+16, r1	; 0x10
     af8:	80 e4       	ldi	r24, 0x40	; 64
     afa:	80 8b       	std	Z+16, r24	; 0x10
     afc:	10 a2       	std	Z+32, r1	; 0x20
     afe:	80 a3       	std	Z+32, r24	; 0x20
     b00:	10 aa       	std	Z+48, r1	; 0x30
     b02:	80 ab       	std	Z+48, r24	; 0x30
     b04:	e0 e4       	ldi	r30, 0x40	; 64
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	10 82       	st	Z, r1
     b0a:	80 83       	st	Z, r24
     b0c:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <b1_state>
     b10:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <b2_state>
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <usb_state>
     b1a:	08 95       	ret

00000b1c <tiny_dma_set_mode_0>:
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	f8 94       	cli
     b22:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     b26:	e5 df       	rcall	.-54     	; 0xaf2 <tiny_dma_flush>
     b28:	c0 e0       	ldi	r28, 0x00	; 0
     b2a:	d1 e0       	ldi	r29, 0x01	; 1
     b2c:	1e aa       	std	Y+54, r1	; 0x36
     b2e:	84 e2       	ldi	r24, 0x24	; 36
     b30:	88 ab       	std	Y+48, r24	; 0x30
     b32:	19 aa       	std	Y+49, r1	; 0x31
     b34:	49 e5       	ldi	r20, 0x59	; 89
     b36:	4a ab       	std	Y+50, r20	; 0x32
     b38:	32 e0       	ldi	r19, 0x02	; 2
     b3a:	3b ab       	std	Y+51, r19	; 0x33
     b3c:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     b40:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     b44:	6c ab       	std	Y+52, r22	; 0x34
     b46:	7d ab       	std	Y+53, r23	; 0x35
     b48:	6c ea       	ldi	r22, 0xAC	; 172
     b4a:	74 e2       	ldi	r23, 0x24	; 36
     b4c:	68 af       	std	Y+56, r22	; 0x38
     b4e:	79 af       	std	Y+57, r23	; 0x39
     b50:	1a ae       	std	Y+58, r1	; 0x3a
     b52:	9b e3       	ldi	r25, 0x3B	; 59
     b54:	9c af       	std	Y+60, r25	; 0x3c
     b56:	93 e0       	ldi	r25, 0x03	; 3
     b58:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b5c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b60:	28 a9       	ldd	r18, Y+48	; 0x30
     b62:	20 68       	ori	r18, 0x80	; 128
     b64:	28 ab       	std	Y+48, r18	; 0x30
     b66:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	80 83       	st	Z, r24
     b70:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b74:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b78:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b7c:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     b80:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     b84:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b88:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     b8c:	4c e9       	ldi	r20, 0x9C	; 156
     b8e:	52 e2       	ldi	r21, 0x22	; 34
     b90:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b94:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b98:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b9c:	29 e3       	ldi	r18, 0x39	; 57
     b9e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ba2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     ba6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     baa:	90 81       	ld	r25, Z
     bac:	90 68       	ori	r25, 0x80	; 128
     bae:	90 83       	st	Z, r25
     bb0:	18 8a       	std	Y+16, r1	; 0x10
     bb2:	90 e4       	ldi	r25, 0x40	; 64
     bb4:	98 8b       	std	Y+16, r25	; 0x10
     bb6:	88 8b       	std	Y+16, r24	; 0x10
     bb8:	19 8a       	std	Y+17, r1	; 0x11
     bba:	95 e9       	ldi	r25, 0x95	; 149
     bbc:	9a 8b       	std	Y+18, r25	; 0x12
     bbe:	90 e1       	ldi	r25, 0x10	; 16
     bc0:	9b 8b       	std	Y+19, r25	; 0x13
     bc2:	4e ee       	ldi	r20, 0xEE	; 238
     bc4:	52 e0       	ldi	r21, 0x02	; 2
     bc6:	4c 8b       	std	Y+20, r20	; 0x14
     bc8:	5d 8b       	std	Y+21, r21	; 0x15
     bca:	88 8f       	std	Y+24, r24	; 0x18
     bcc:	39 8f       	std	Y+25, r19	; 0x19
     bce:	1a 8e       	std	Y+26, r1	; 0x1a
     bd0:	8c ea       	ldi	r24, 0xAC	; 172
     bd2:	96 e2       	ldi	r25, 0x26	; 38
     bd4:	8c 8f       	std	Y+28, r24	; 0x1c
     bd6:	9d 8f       	std	Y+29, r25	; 0x1d
     bd8:	1e 8e       	std	Y+30, r1	; 0x1e
     bda:	68 ec       	ldi	r22, 0xC8	; 200
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	84 ef       	ldi	r24, 0xF4	; 244
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	95 dd       	rcall	.-1238   	; 0x70e <tiny_calibration_synchronise_phase>
     be4:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <b1_state>
     be8:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <b2_state>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <usb_state>
     bf2:	2f ef       	ldi	r18, 0xFF	; 255
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	20 93 07 20 	sts	0x2007, r18	; 0x802007 <median_TRFCNT>
     bfa:	30 93 08 20 	sts	0x2008, r19	; 0x802008 <median_TRFCNT+0x1>
     bfe:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     c02:	88 89       	ldd	r24, Y+16	; 0x10
     c04:	80 68       	ori	r24, 0x80	; 128
     c06:	88 8b       	std	Y+16, r24	; 0x10
     c08:	78 94       	sei
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <tiny_dma_set_mode_1>:
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
     c1a:	6b df       	rcall	.-298    	; 0xaf2 <tiny_dma_flush>
     c1c:	e0 e0       	ldi	r30, 0x00	; 0
     c1e:	f1 e0       	ldi	r31, 0x01	; 1
     c20:	10 aa       	std	Z+48, r1	; 0x30
     c22:	80 e4       	ldi	r24, 0x40	; 64
     c24:	80 ab       	std	Z+48, r24	; 0x30
     c26:	94 e0       	ldi	r25, 0x04	; 4
     c28:	90 ab       	std	Z+48, r25	; 0x30
     c2a:	11 aa       	std	Z+49, r1	; 0x31
     c2c:	12 aa       	std	Z+50, r1	; 0x32
     c2e:	5b e4       	ldi	r21, 0x4B	; 75
     c30:	53 ab       	std	Z+51, r21	; 0x33
     c32:	14 aa       	std	Z+52, r1	; 0x34
     c34:	15 aa       	std	Z+53, r1	; 0x35
     c36:	16 aa       	std	Z+54, r1	; 0x36
     c38:	2a e0       	ldi	r18, 0x0A	; 10
     c3a:	30 e2       	ldi	r19, 0x20	; 32
     c3c:	20 af       	std	Z+56, r18	; 0x38
     c3e:	31 af       	std	Z+57, r19	; 0x39
     c40:	12 ae       	std	Z+58, r1	; 0x3a
     c42:	40 ea       	ldi	r20, 0xA0	; 160
     c44:	44 af       	std	Z+60, r20	; 0x3c
     c46:	38 e0       	ldi	r19, 0x08	; 8
     c48:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c4c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c50:	80 a9       	ldd	r24, Z+48	; 0x30
     c52:	80 6a       	ori	r24, 0xA0	; 160
     c54:	80 ab       	std	Z+48, r24	; 0x30
     c56:	85 e5       	ldi	r24, 0x55	; 85
     c58:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     c5c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c60:	a0 e4       	ldi	r26, 0x40	; 64
     c62:	b1 e0       	ldi	r27, 0x01	; 1
     c64:	d4 e2       	ldi	r29, 0x24	; 36
     c66:	dc 93       	st	X, r29
     c68:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c6c:	89 e5       	ldi	r24, 0x59	; 89
     c6e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c72:	c2 e0       	ldi	r28, 0x02	; 2
     c74:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c78:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     c7c:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     c80:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c84:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c88:	6c ea       	ldi	r22, 0xAC	; 172
     c8a:	74 e2       	ldi	r23, 0x24	; 36
     c8c:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c90:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c94:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c98:	8b e3       	ldi	r24, 0x3B	; 59
     c9a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     ca4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     ca8:	2c 91       	ld	r18, X
     caa:	20 68       	ori	r18, 0x80	; 128
     cac:	2c 93       	st	X, r18
     cae:	90 8b       	std	Z+16, r25	; 0x10
     cb0:	81 8b       	std	Z+17, r24	; 0x11
     cb2:	a1 e9       	ldi	r26, 0x91	; 145
     cb4:	a2 8b       	std	Z+18, r26	; 0x12
     cb6:	20 e1       	ldi	r18, 0x10	; 16
     cb8:	23 8b       	std	Z+19, r18	; 0x13
     cba:	67 e7       	ldi	r22, 0x77	; 119
     cbc:	71 e0       	ldi	r23, 0x01	; 1
     cbe:	64 8b       	std	Z+20, r22	; 0x14
     cc0:	75 8b       	std	Z+21, r23	; 0x15
     cc2:	d0 8f       	std	Z+24, r29	; 0x18
     cc4:	c1 8f       	std	Z+25, r28	; 0x19
     cc6:	12 8e       	std	Z+26, r1	; 0x1a
     cc8:	cc ea       	ldi	r28, 0xAC	; 172
     cca:	d6 e2       	ldi	r29, 0x26	; 38
     ccc:	c4 8f       	std	Z+28, r28	; 0x1c
     cce:	d5 8f       	std	Z+29, r29	; 0x1d
     cd0:	16 8e       	std	Z+30, r1	; 0x1e
     cd2:	20 89       	ldd	r18, Z+16	; 0x10
     cd4:	20 68       	ori	r18, 0x80	; 128
     cd6:	20 8b       	std	Z+16, r18	; 0x10
     cd8:	90 a3       	std	Z+32, r25	; 0x20
     cda:	81 a3       	std	Z+33, r24	; 0x21
     cdc:	a2 a3       	std	Z+34, r26	; 0x22
     cde:	53 a3       	std	Z+35, r21	; 0x23
     ce0:	64 a3       	std	Z+36, r22	; 0x24
     ce2:	75 a3       	std	Z+37, r23	; 0x25
     ce4:	40 a7       	std	Z+40, r20	; 0x28
     ce6:	31 a7       	std	Z+41, r19	; 0x29
     ce8:	12 a6       	std	Z+42, r1	; 0x2a
     cea:	83 e2       	ldi	r24, 0x23	; 35
     cec:	98 e2       	ldi	r25, 0x28	; 40
     cee:	84 a7       	std	Z+44, r24	; 0x2c
     cf0:	95 a7       	std	Z+45, r25	; 0x2d
     cf2:	16 a6       	std	Z+46, r1	; 0x2e
     cf4:	80 a1       	ldd	r24, Z+32	; 0x20
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	80 a3       	std	Z+32, r24	; 0x20
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <tiny_dma_set_mode_2>:
     d00:	cf 93       	push	r28
     d02:	f8 94       	cli
     d04:	c2 e0       	ldi	r28, 0x02	; 2
     d06:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     d0a:	f3 de       	rcall	.-538    	; 0xaf2 <tiny_dma_flush>
     d0c:	e0 e0       	ldi	r30, 0x00	; 0
     d0e:	f1 e0       	ldi	r31, 0x01	; 1
     d10:	16 aa       	std	Z+54, r1	; 0x36
     d12:	94 e2       	ldi	r25, 0x24	; 36
     d14:	90 ab       	std	Z+48, r25	; 0x30
     d16:	11 aa       	std	Z+49, r1	; 0x31
     d18:	39 e5       	ldi	r19, 0x59	; 89
     d1a:	32 ab       	std	Z+50, r19	; 0x32
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	83 ab       	std	Z+51, r24	; 0x33
     d20:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     d24:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     d28:	44 ab       	std	Z+52, r20	; 0x34
     d2a:	55 ab       	std	Z+53, r21	; 0x35
     d2c:	4c e9       	ldi	r20, 0x9C	; 156
     d2e:	52 e2       	ldi	r21, 0x22	; 34
     d30:	40 af       	std	Z+56, r20	; 0x38
     d32:	51 af       	std	Z+57, r21	; 0x39
     d34:	12 ae       	std	Z+58, r1	; 0x3a
     d36:	29 e3       	ldi	r18, 0x39	; 57
     d38:	24 af       	std	Z+60, r18	; 0x3c
     d3a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     d3e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     d42:	20 a9       	ldd	r18, Z+48	; 0x30
     d44:	20 68       	ori	r18, 0x80	; 128
     d46:	20 ab       	std	Z+48, r18	; 0x30
     d48:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     d4c:	a0 e4       	ldi	r26, 0x40	; 64
     d4e:	b1 e0       	ldi	r27, 0x01	; 1
     d50:	9c 93       	st	X, r25
     d52:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d56:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     d5a:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d5e:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     d62:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     d66:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d6a:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     d6e:	2c ea       	ldi	r18, 0xAC	; 172
     d70:	34 e2       	ldi	r19, 0x24	; 36
     d72:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d76:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d7a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d7e:	2b e3       	ldi	r18, 0x3B	; 59
     d80:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d84:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d88:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d8c:	2c 91       	ld	r18, X
     d8e:	20 68       	ori	r18, 0x80	; 128
     d90:	2c 93       	st	X, r18
     d92:	54 e0       	ldi	r21, 0x04	; 4
     d94:	50 8b       	std	Z+16, r21	; 0x10
     d96:	81 8b       	std	Z+17, r24	; 0x11
     d98:	41 e9       	ldi	r20, 0x91	; 145
     d9a:	42 8b       	std	Z+18, r20	; 0x12
     d9c:	20 e1       	ldi	r18, 0x10	; 16
     d9e:	23 8b       	std	Z+19, r18	; 0x13
     da0:	27 e7       	ldi	r18, 0x77	; 119
     da2:	31 e0       	ldi	r19, 0x01	; 1
     da4:	24 8b       	std	Z+20, r18	; 0x14
     da6:	35 8b       	std	Z+21, r19	; 0x15
     da8:	90 8f       	std	Z+24, r25	; 0x18
     daa:	c1 8f       	std	Z+25, r28	; 0x19
     dac:	12 8e       	std	Z+26, r1	; 0x1a
     dae:	6c ea       	ldi	r22, 0xAC	; 172
     db0:	76 e2       	ldi	r23, 0x26	; 38
     db2:	64 8f       	std	Z+28, r22	; 0x1c
     db4:	75 8f       	std	Z+29, r23	; 0x1d
     db6:	16 8e       	std	Z+30, r1	; 0x1e
     db8:	90 89       	ldd	r25, Z+16	; 0x10
     dba:	90 68       	ori	r25, 0x80	; 128
     dbc:	90 8b       	std	Z+16, r25	; 0x10
     dbe:	50 a3       	std	Z+32, r21	; 0x20
     dc0:	81 a3       	std	Z+33, r24	; 0x21
     dc2:	42 a3       	std	Z+34, r20	; 0x22
     dc4:	82 e1       	ldi	r24, 0x12	; 18
     dc6:	83 a3       	std	Z+35, r24	; 0x23
     dc8:	24 a3       	std	Z+36, r18	; 0x24
     dca:	35 a3       	std	Z+37, r19	; 0x25
     dcc:	84 e3       	ldi	r24, 0x34	; 52
     dce:	80 a7       	std	Z+40, r24	; 0x28
     dd0:	c1 a7       	std	Z+41, r28	; 0x29
     dd2:	12 a6       	std	Z+42, r1	; 0x2a
     dd4:	83 e2       	ldi	r24, 0x23	; 35
     dd6:	98 e2       	ldi	r25, 0x28	; 40
     dd8:	84 a7       	std	Z+44, r24	; 0x2c
     dda:	95 a7       	std	Z+45, r25	; 0x2d
     ddc:	16 a6       	std	Z+46, r1	; 0x2e
     dde:	80 a1       	ldd	r24, Z+32	; 0x20
     de0:	80 68       	ori	r24, 0x80	; 128
     de2:	80 a3       	std	Z+32, r24	; 0x20
     de4:	78 94       	sei
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <tiny_dma_set_mode_3>:
     dea:	cf 93       	push	r28
     dec:	c3 e0       	ldi	r28, 0x03	; 3
     dee:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     df2:	7f de       	rcall	.-770    	; 0xaf2 <tiny_dma_flush>
     df4:	e0 e0       	ldi	r30, 0x00	; 0
     df6:	f1 e0       	ldi	r31, 0x01	; 1
     df8:	10 a2       	std	Z+32, r1	; 0x20
     dfa:	50 e4       	ldi	r21, 0x40	; 64
     dfc:	50 a3       	std	Z+32, r21	; 0x20
     dfe:	44 e0       	ldi	r20, 0x04	; 4
     e00:	40 a3       	std	Z+32, r20	; 0x20
     e02:	11 a2       	std	Z+33, r1	; 0x21
     e04:	12 a2       	std	Z+34, r1	; 0x22
     e06:	3b e4       	ldi	r19, 0x4B	; 75
     e08:	33 a3       	std	Z+35, r19	; 0x23
     e0a:	14 a2       	std	Z+36, r1	; 0x24
     e0c:	15 a2       	std	Z+37, r1	; 0x25
     e0e:	16 a2       	std	Z+38, r1	; 0x26
     e10:	8a e0       	ldi	r24, 0x0A	; 10
     e12:	90 e2       	ldi	r25, 0x20	; 32
     e14:	80 a7       	std	Z+40, r24	; 0x28
     e16:	91 a7       	std	Z+41, r25	; 0x29
     e18:	12 a6       	std	Z+42, r1	; 0x2a
     e1a:	20 ea       	ldi	r18, 0xA0	; 160
     e1c:	24 a7       	std	Z+44, r18	; 0x2c
     e1e:	98 e0       	ldi	r25, 0x08	; 8
     e20:	95 a7       	std	Z+45, r25	; 0x2d
     e22:	16 a6       	std	Z+46, r1	; 0x2e
     e24:	80 a1       	ldd	r24, Z+32	; 0x20
     e26:	80 6a       	ori	r24, 0xA0	; 160
     e28:	80 a3       	std	Z+32, r24	; 0x20
     e2a:	85 e5       	ldi	r24, 0x55	; 85
     e2c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     e30:	16 aa       	std	Z+54, r1	; 0x36
     e32:	74 e2       	ldi	r23, 0x24	; 36
     e34:	70 ab       	std	Z+48, r23	; 0x30
     e36:	11 aa       	std	Z+49, r1	; 0x31
     e38:	69 e5       	ldi	r22, 0x59	; 89
     e3a:	62 ab       	std	Z+50, r22	; 0x32
     e3c:	c3 ab       	std	Z+51, r28	; 0x33
     e3e:	a0 91 0d 20 	lds	r26, 0x200D	; 0x80200d <dacBuf_len>
     e42:	b0 91 0e 20 	lds	r27, 0x200E	; 0x80200e <dacBuf_len+0x1>
     e46:	a4 ab       	std	Z+52, r26	; 0x34
     e48:	b5 ab       	std	Z+53, r27	; 0x35
     e4a:	ac e9       	ldi	r26, 0x9C	; 156
     e4c:	b2 e2       	ldi	r27, 0x22	; 34
     e4e:	a0 af       	std	Z+56, r26	; 0x38
     e50:	b1 af       	std	Z+57, r27	; 0x39
     e52:	12 ae       	std	Z+58, r1	; 0x3a
     e54:	89 e3       	ldi	r24, 0x39	; 57
     e56:	84 af       	std	Z+60, r24	; 0x3c
     e58:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     e5c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     e60:	80 a9       	ldd	r24, Z+48	; 0x30
     e62:	80 68       	ori	r24, 0x80	; 128
     e64:	80 ab       	std	Z+48, r24	; 0x30
     e66:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     e6a:	a0 e4       	ldi	r26, 0x40	; 64
     e6c:	b1 e0       	ldi	r27, 0x01	; 1
     e6e:	7c 93       	st	X, r23
     e70:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e74:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e7e:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     e82:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     e86:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     e8a:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     e8e:	6c ea       	ldi	r22, 0xAC	; 172
     e90:	74 e2       	ldi	r23, 0x24	; 36
     e92:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e96:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e9a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e9e:	8b e3       	ldi	r24, 0x3B	; 59
     ea0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ea4:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     ea8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     eac:	8c 91       	ld	r24, X
     eae:	80 68       	ori	r24, 0x80	; 128
     eb0:	8c 93       	st	X, r24
     eb2:	10 8a       	std	Z+16, r1	; 0x10
     eb4:	50 8b       	std	Z+16, r21	; 0x10
     eb6:	40 8b       	std	Z+16, r20	; 0x10
     eb8:	c1 8b       	std	Z+17, r28	; 0x11
     eba:	81 e9       	ldi	r24, 0x91	; 145
     ebc:	82 8b       	std	Z+18, r24	; 0x12
     ebe:	33 8b       	std	Z+19, r19	; 0x13
     ec0:	47 e7       	ldi	r20, 0x77	; 119
     ec2:	51 e0       	ldi	r21, 0x01	; 1
     ec4:	44 8b       	std	Z+20, r20	; 0x14
     ec6:	55 8b       	std	Z+21, r21	; 0x15
     ec8:	20 8f       	std	Z+24, r18	; 0x18
     eca:	91 8f       	std	Z+25, r25	; 0x19
     ecc:	12 8e       	std	Z+26, r1	; 0x1a
     ece:	8c ea       	ldi	r24, 0xAC	; 172
     ed0:	96 e2       	ldi	r25, 0x26	; 38
     ed2:	84 8f       	std	Z+28, r24	; 0x1c
     ed4:	95 8f       	std	Z+29, r25	; 0x1d
     ed6:	16 8e       	std	Z+30, r1	; 0x1e
     ed8:	80 89       	ldd	r24, Z+16	; 0x10
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	80 8b       	std	Z+16, r24	; 0x10
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <tiny_dma_set_mode_4>:
     ee2:	cf 93       	push	r28
     ee4:	c4 e0       	ldi	r28, 0x04	; 4
     ee6:	c0 93 09 20 	sts	0x2009, r28	; 0x802009 <global_mode>
     eea:	03 de       	rcall	.-1018   	; 0xaf2 <tiny_dma_flush>
     eec:	e0 e0       	ldi	r30, 0x00	; 0
     eee:	f1 e0       	ldi	r31, 0x01	; 1
     ef0:	10 a2       	std	Z+32, r1	; 0x20
     ef2:	80 e4       	ldi	r24, 0x40	; 64
     ef4:	80 a3       	std	Z+32, r24	; 0x20
     ef6:	c0 a3       	std	Z+32, r28	; 0x20
     ef8:	11 a2       	std	Z+33, r1	; 0x21
     efa:	12 a2       	std	Z+34, r1	; 0x22
     efc:	4b e4       	ldi	r20, 0x4B	; 75
     efe:	43 a3       	std	Z+35, r20	; 0x23
     f00:	14 a2       	std	Z+36, r1	; 0x24
     f02:	15 a2       	std	Z+37, r1	; 0x25
     f04:	16 a2       	std	Z+38, r1	; 0x26
     f06:	8a e0       	ldi	r24, 0x0A	; 10
     f08:	90 e2       	ldi	r25, 0x20	; 32
     f0a:	80 a7       	std	Z+40, r24	; 0x28
     f0c:	91 a7       	std	Z+41, r25	; 0x29
     f0e:	12 a6       	std	Z+42, r1	; 0x2a
     f10:	60 ea       	ldi	r22, 0xA0	; 160
     f12:	64 a7       	std	Z+44, r22	; 0x2c
     f14:	88 e0       	ldi	r24, 0x08	; 8
     f16:	85 a7       	std	Z+45, r24	; 0x2d
     f18:	16 a6       	std	Z+46, r1	; 0x2e
     f1a:	90 a1       	ldd	r25, Z+32	; 0x20
     f1c:	90 6a       	ori	r25, 0xA0	; 160
     f1e:	90 a3       	std	Z+32, r25	; 0x20
     f20:	95 e5       	ldi	r25, 0x55	; 85
     f22:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     f26:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f2a:	a0 e4       	ldi	r26, 0x40	; 64
     f2c:	b1 e0       	ldi	r27, 0x01	; 1
     f2e:	94 e2       	ldi	r25, 0x24	; 36
     f30:	9c 93       	st	X, r25
     f32:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f36:	99 e5       	ldi	r25, 0x59	; 89
     f38:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f42:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
     f46:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     f4a:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f4e:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f52:	2c ea       	ldi	r18, 0xAC	; 172
     f54:	34 e2       	ldi	r19, 0x24	; 36
     f56:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f5a:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f5e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f62:	9b e3       	ldi	r25, 0x3B	; 59
     f64:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f6e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f72:	2c 91       	ld	r18, X
     f74:	20 68       	ori	r18, 0x80	; 128
     f76:	2c 93       	st	X, r18
     f78:	c0 8b       	std	Z+16, r28	; 0x10
     f7a:	91 8b       	std	Z+17, r25	; 0x11
     f7c:	31 e9       	ldi	r19, 0x91	; 145
     f7e:	32 8b       	std	Z+18, r19	; 0x12
     f80:	43 8b       	std	Z+19, r20	; 0x13
     f82:	47 e7       	ldi	r20, 0x77	; 119
     f84:	51 e0       	ldi	r21, 0x01	; 1
     f86:	44 8b       	std	Z+20, r20	; 0x14
     f88:	55 8b       	std	Z+21, r21	; 0x15
     f8a:	60 8f       	std	Z+24, r22	; 0x18
     f8c:	81 8f       	std	Z+25, r24	; 0x19
     f8e:	12 8e       	std	Z+26, r1	; 0x1a
     f90:	6c ea       	ldi	r22, 0xAC	; 172
     f92:	76 e2       	ldi	r23, 0x26	; 38
     f94:	64 8f       	std	Z+28, r22	; 0x1c
     f96:	75 8f       	std	Z+29, r23	; 0x1d
     f98:	16 8e       	std	Z+30, r1	; 0x1e
     f9a:	20 89       	ldd	r18, Z+16	; 0x10
     f9c:	20 68       	ori	r18, 0x80	; 128
     f9e:	20 8b       	std	Z+16, r18	; 0x10
     fa0:	c0 ab       	std	Z+48, r28	; 0x30
     fa2:	91 ab       	std	Z+49, r25	; 0x31
     fa4:	32 ab       	std	Z+50, r19	; 0x32
     fa6:	9a e4       	ldi	r25, 0x4A	; 74
     fa8:	93 ab       	std	Z+51, r25	; 0x33
     faa:	44 ab       	std	Z+52, r20	; 0x34
     fac:	55 ab       	std	Z+53, r21	; 0x35
     fae:	93 ec       	ldi	r25, 0xC3	; 195
     fb0:	90 af       	std	Z+56, r25	; 0x38
     fb2:	81 af       	std	Z+57, r24	; 0x39
     fb4:	12 ae       	std	Z+58, r1	; 0x3a
     fb6:	83 e2       	ldi	r24, 0x23	; 35
     fb8:	98 e2       	ldi	r25, 0x28	; 40
     fba:	84 af       	std	Z+60, r24	; 0x3c
     fbc:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     fc0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     fc4:	80 a9       	ldd	r24, Z+48	; 0x30
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	80 ab       	std	Z+48, r24	; 0x30
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <tiny_dma_set_mode_5>:
     fce:	85 e0       	ldi	r24, 0x05	; 5
     fd0:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
     fd4:	8e dd       	rcall	.-1252   	; 0xaf2 <tiny_dma_flush>
     fd6:	e0 e0       	ldi	r30, 0x00	; 0
     fd8:	f1 e0       	ldi	r31, 0x01	; 1
     fda:	16 aa       	std	Z+54, r1	; 0x36
     fdc:	34 e2       	ldi	r19, 0x24	; 36
     fde:	30 ab       	std	Z+48, r19	; 0x30
     fe0:	11 aa       	std	Z+49, r1	; 0x31
     fe2:	29 e5       	ldi	r18, 0x59	; 89
     fe4:	22 ab       	std	Z+50, r18	; 0x32
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	83 ab       	std	Z+51, r24	; 0x33
     fea:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     fee:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     ff2:	44 ab       	std	Z+52, r20	; 0x34
     ff4:	55 ab       	std	Z+53, r21	; 0x35
     ff6:	4c e9       	ldi	r20, 0x9C	; 156
     ff8:	52 e2       	ldi	r21, 0x22	; 34
     ffa:	40 af       	std	Z+56, r20	; 0x38
     ffc:	51 af       	std	Z+57, r21	; 0x39
     ffe:	12 ae       	std	Z+58, r1	; 0x3a
    1000:	99 e3       	ldi	r25, 0x39	; 57
    1002:	94 af       	std	Z+60, r25	; 0x3c
    1004:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1008:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    100c:	90 a9       	ldd	r25, Z+48	; 0x30
    100e:	90 68       	ori	r25, 0x80	; 128
    1010:	90 ab       	std	Z+48, r25	; 0x30
    1012:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1016:	e0 e4       	ldi	r30, 0x40	; 64
    1018:	f1 e0       	ldi	r31, 0x01	; 1
    101a:	30 83       	st	Z, r19
    101c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1020:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1024:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1028:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    102c:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1030:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1034:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1038:	2c ea       	ldi	r18, 0xAC	; 172
    103a:	34 e2       	ldi	r19, 0x24	; 36
    103c:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1040:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1044:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1048:	9b e3       	ldi	r25, 0x3B	; 59
    104a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    104e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1052:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	80 83       	st	Z, r24
    105c:	08 95       	ret

0000105e <tiny_dma_set_mode_6>:
    105e:	86 e0       	ldi	r24, 0x06	; 6
    1060:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    1064:	46 dd       	rcall	.-1396   	; 0xaf2 <tiny_dma_flush>
    1066:	e0 e0       	ldi	r30, 0x00	; 0
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	16 aa       	std	Z+54, r1	; 0x36
    106c:	94 e2       	ldi	r25, 0x24	; 36
    106e:	90 ab       	std	Z+48, r25	; 0x30
    1070:	11 aa       	std	Z+49, r1	; 0x31
    1072:	39 e5       	ldi	r19, 0x59	; 89
    1074:	32 ab       	std	Z+50, r19	; 0x32
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	83 ab       	std	Z+51, r24	; 0x33
    107a:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    107e:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1082:	44 ab       	std	Z+52, r20	; 0x34
    1084:	55 ab       	std	Z+53, r21	; 0x35
    1086:	4c e9       	ldi	r20, 0x9C	; 156
    1088:	52 e2       	ldi	r21, 0x22	; 34
    108a:	40 af       	std	Z+56, r20	; 0x38
    108c:	51 af       	std	Z+57, r21	; 0x39
    108e:	12 ae       	std	Z+58, r1	; 0x3a
    1090:	29 e3       	ldi	r18, 0x39	; 57
    1092:	24 af       	std	Z+60, r18	; 0x3c
    1094:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1098:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    109c:	20 a9       	ldd	r18, Z+48	; 0x30
    109e:	20 68       	ori	r18, 0x80	; 128
    10a0:	20 ab       	std	Z+48, r18	; 0x30
    10a2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    10a6:	a0 e4       	ldi	r26, 0x40	; 64
    10a8:	b1 e0       	ldi	r27, 0x01	; 1
    10aa:	9c 93       	st	X, r25
    10ac:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    10b0:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    10b4:	32 e0       	ldi	r19, 0x02	; 2
    10b6:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    10ba:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    10be:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    10c2:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    10c6:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    10ca:	4c ea       	ldi	r20, 0xAC	; 172
    10cc:	54 e2       	ldi	r21, 0x24	; 36
    10ce:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    10d2:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    10d6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    10da:	2b e3       	ldi	r18, 0x3B	; 59
    10dc:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    10e0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    10e4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    10e8:	2c 91       	ld	r18, X
    10ea:	20 68       	ori	r18, 0x80	; 128
    10ec:	2c 93       	st	X, r18
    10ee:	10 8a       	std	Z+16, r1	; 0x10
    10f0:	20 e4       	ldi	r18, 0x40	; 64
    10f2:	20 8b       	std	Z+16, r18	; 0x10
    10f4:	24 e0       	ldi	r18, 0x04	; 4
    10f6:	20 8b       	std	Z+16, r18	; 0x10
    10f8:	81 8b       	std	Z+17, r24	; 0x11
    10fa:	81 e9       	ldi	r24, 0x91	; 145
    10fc:	82 8b       	std	Z+18, r24	; 0x12
    10fe:	80 e1       	ldi	r24, 0x10	; 16
    1100:	83 8b       	std	Z+19, r24	; 0x13
    1102:	4e ee       	ldi	r20, 0xEE	; 238
    1104:	52 e0       	ldi	r21, 0x02	; 2
    1106:	44 8b       	std	Z+20, r20	; 0x14
    1108:	55 8b       	std	Z+21, r21	; 0x15
    110a:	90 8f       	std	Z+24, r25	; 0x18
    110c:	31 8f       	std	Z+25, r19	; 0x19
    110e:	12 8e       	std	Z+26, r1	; 0x1a
    1110:	8c ea       	ldi	r24, 0xAC	; 172
    1112:	96 e2       	ldi	r25, 0x26	; 38
    1114:	84 8f       	std	Z+28, r24	; 0x1c
    1116:	95 8f       	std	Z+29, r25	; 0x1d
    1118:	16 8e       	std	Z+30, r1	; 0x1e
    111a:	80 89       	ldd	r24, Z+16	; 0x10
    111c:	80 68       	ori	r24, 0x80	; 128
    111e:	80 8b       	std	Z+16, r24	; 0x10
    1120:	08 95       	ret

00001122 <tiny_dma_set_mode_7>:
    1122:	87 e0       	ldi	r24, 0x07	; 7
    1124:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    1128:	e4 dc       	rcall	.-1592   	; 0xaf2 <tiny_dma_flush>
    112a:	e0 e0       	ldi	r30, 0x00	; 0
    112c:	f1 e0       	ldi	r31, 0x01	; 1
    112e:	16 aa       	std	Z+54, r1	; 0x36
    1130:	94 e2       	ldi	r25, 0x24	; 36
    1132:	90 ab       	std	Z+48, r25	; 0x30
    1134:	11 aa       	std	Z+49, r1	; 0x31
    1136:	39 e5       	ldi	r19, 0x59	; 89
    1138:	32 ab       	std	Z+50, r19	; 0x32
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	83 ab       	std	Z+51, r24	; 0x33
    113e:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    1142:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1146:	44 ab       	std	Z+52, r20	; 0x34
    1148:	55 ab       	std	Z+53, r21	; 0x35
    114a:	4c e9       	ldi	r20, 0x9C	; 156
    114c:	52 e2       	ldi	r21, 0x22	; 34
    114e:	40 af       	std	Z+56, r20	; 0x38
    1150:	51 af       	std	Z+57, r21	; 0x39
    1152:	12 ae       	std	Z+58, r1	; 0x3a
    1154:	29 e3       	ldi	r18, 0x39	; 57
    1156:	24 af       	std	Z+60, r18	; 0x3c
    1158:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    115c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1160:	20 a9       	ldd	r18, Z+48	; 0x30
    1162:	20 68       	ori	r18, 0x80	; 128
    1164:	20 ab       	std	Z+48, r18	; 0x30
    1166:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    116a:	a0 e4       	ldi	r26, 0x40	; 64
    116c:	b1 e0       	ldi	r27, 0x01	; 1
    116e:	9c 93       	st	X, r25
    1170:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1174:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1178:	32 e0       	ldi	r19, 0x02	; 2
    117a:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    117e:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    1182:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1186:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    118a:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    118e:	4c ea       	ldi	r20, 0xAC	; 172
    1190:	54 e2       	ldi	r21, 0x24	; 36
    1192:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1196:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    119a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    119e:	2b e3       	ldi	r18, 0x3B	; 59
    11a0:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    11a4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    11a8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    11ac:	2c 91       	ld	r18, X
    11ae:	20 68       	ori	r18, 0x80	; 128
    11b0:	2c 93       	st	X, r18
    11b2:	10 8a       	std	Z+16, r1	; 0x10
    11b4:	20 e4       	ldi	r18, 0x40	; 64
    11b6:	20 8b       	std	Z+16, r18	; 0x10
    11b8:	25 e0       	ldi	r18, 0x05	; 5
    11ba:	20 8b       	std	Z+16, r18	; 0x10
    11bc:	81 8b       	std	Z+17, r24	; 0x11
    11be:	81 e9       	ldi	r24, 0x91	; 145
    11c0:	82 8b       	std	Z+18, r24	; 0x12
    11c2:	80 e1       	ldi	r24, 0x10	; 16
    11c4:	83 8b       	std	Z+19, r24	; 0x13
    11c6:	4e ee       	ldi	r20, 0xEE	; 238
    11c8:	52 e0       	ldi	r21, 0x02	; 2
    11ca:	44 8b       	std	Z+20, r20	; 0x14
    11cc:	55 8b       	std	Z+21, r21	; 0x15
    11ce:	90 8f       	std	Z+24, r25	; 0x18
    11d0:	31 8f       	std	Z+25, r19	; 0x19
    11d2:	12 8e       	std	Z+26, r1	; 0x1a
    11d4:	8c ea       	ldi	r24, 0xAC	; 172
    11d6:	96 e2       	ldi	r25, 0x26	; 38
    11d8:	84 8f       	std	Z+28, r24	; 0x1c
    11da:	95 8f       	std	Z+29, r25	; 0x1d
    11dc:	16 8e       	std	Z+30, r1	; 0x1e
    11de:	80 89       	ldd	r24, Z+16	; 0x10
    11e0:	80 68       	ori	r24, 0x80	; 128
    11e2:	80 8b       	std	Z+16, r24	; 0x10
    11e4:	08 95       	ret

000011e6 <__vector_6>:
}

ISR(DMA_CH0_vect){
    11e6:	1f 92       	push	r1
    11e8:	0f 92       	push	r0
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	0f 92       	push	r0
    11ee:	11 24       	eor	r1, r1
    11f0:	8f 93       	push	r24
	DMA.INTFLAGS = 0x01;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
}
    11f8:	8f 91       	pop	r24
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	0f 90       	pop	r0
    1200:	1f 90       	pop	r1
    1202:	18 95       	reti

00001204 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    1204:	e0 e7       	ldi	r30, 0x70	; 112
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	83 81       	ldd	r24, Z+3	; 0x03
    120a:	8c 7f       	andi	r24, 0xFC	; 252
    120c:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    120e:	84 81       	ldd	r24, Z+4	; 0x04
    1210:	8c 7f       	andi	r24, 0xFC	; 252
    1212:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1214:	80 81       	ld	r24, Z
    1216:	8d 7f       	andi	r24, 0xFD	; 253
    1218:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    121a:	e0 e8       	ldi	r30, 0x80	; 128
    121c:	f1 e0       	ldi	r31, 0x01	; 1
    121e:	80 ec       	ldi	r24, 0xC0	; 192
    1220:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1222:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1224:	88 ec       	ldi	r24, 0xC8	; 200
    1226:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1228:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b8 e0       	ldi	r27, 0x08	; 8
    122e:	34 e0       	ldi	r19, 0x04	; 4
    1230:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1232:	23 e0       	ldi	r18, 0x03	; 3
    1234:	11 96       	adiw	r26, 0x01	; 1
    1236:	2c 93       	st	X, r18
    1238:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    123a:	14 96       	adiw	r26, 0x04	; 4
    123c:	1c 92       	st	X, r1
    123e:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1240:	85 ed       	ldi	r24, 0xD5	; 213
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	96 96       	adiw	r26, 0x26	; 38
    1246:	8d 93       	st	X+, r24
    1248:	9c 93       	st	X, r25
    124a:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    124c:	16 96       	adiw	r26, 0x06	; 6
    124e:	1c 92       	st	X, r1
    1250:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1252:	e0 e4       	ldi	r30, 0x40	; 64
    1254:	f8 e0       	ldi	r31, 0x08	; 8
    1256:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1258:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    125a:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    125c:	86 a3       	std	Z+38, r24	; 0x26
    125e:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    1260:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    1262:	e0 e6       	ldi	r30, 0x60	; 96
    1264:	f6 e0       	ldi	r31, 0x06	; 6
    1266:	80 81       	ld	r24, Z
    1268:	80 61       	ori	r24, 0x10	; 16
    126a:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    126c:	e0 e4       	ldi	r30, 0x40	; 64
    126e:	f9 e0       	ldi	r31, 0x09	; 9
    1270:	83 e1       	ldi	r24, 0x13	; 19
    1272:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    1274:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    127a:	a6 a3       	std	Z+38, r26	; 0x26
    127c:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    127e:	10 a6       	std	Z+40, r1	; 0x28
    1280:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 83       	st	Z, r24
    1286:	08 95       	ret

00001288 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	2f 93       	push	r18
    1294:	3f 93       	push	r19
    1296:	4f 93       	push	r20
    1298:	5f 93       	push	r21
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	1f 92       	push	r1
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    12b2:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    12b6:	87 30       	cpi	r24, 0x07	; 7
    12b8:	31 f4       	brne	.+12     	; 0x12c6 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    12ba:	e0 e0       	ldi	r30, 0x00	; 0
    12bc:	f2 e0       	ldi	r31, 0x02	; 2
    12be:	84 a5       	ldd	r24, Z+44	; 0x2c
    12c0:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    12c2:	95 a5       	ldd	r25, Z+45	; 0x2d
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    12c6:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    12ca:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <PSU_target>
    12ce:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    12d0:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12d4:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	0c f4       	brge	.+2      	; 0x12e0 <__vector_83+0x58>
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	99 23       	and	r25, r25
    12e2:	c9 f0       	breq	.+50     	; 0x1316 <__vector_83+0x8e>
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	2a 3f       	cpi	r18, 0xFA	; 250
    12e8:	37 40       	sbci	r19, 0x07	; 7
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <__vector_83+0x66>
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	99 23       	and	r25, r25
    12f0:	91 f0       	breq	.+36     	; 0x1316 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    12f2:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    12f6:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    12fa:	89 30       	cpi	r24, 0x09	; 9
    12fc:	1c f4       	brge	.+6      	; 0x1304 <__vector_83+0x7c>
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <__vector_83+0x80>
    1304:	86 e0       	ldi	r24, 0x06	; 6
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1310:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1314:	23 c0       	rjmp	.+70     	; 0x135c <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1316:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    131a:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	8f 3f       	cpi	r24, 0xFF	; 255
    1322:	0c f0       	brlt	.+2      	; 0x1326 <__vector_83+0x9e>
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	99 23       	and	r25, r25
    1328:	c9 f0       	breq	.+50     	; 0x135c <__vector_83+0xd4>
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	27 30       	cpi	r18, 0x07	; 7
    132e:	31 05       	cpc	r19, r1
    1330:	08 f4       	brcc	.+2      	; 0x1334 <__vector_83+0xac>
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	99 23       	and	r25, r25
    1336:	91 f0       	breq	.+36     	; 0x135c <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1338:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    133c:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1340:	88 3f       	cpi	r24, 0xF8	; 248
    1342:	1c f0       	brlt	.+6      	; 0x134a <__vector_83+0xc2>
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 c0       	rjmp	.+4      	; 0x134e <__vector_83+0xc6>
    134a:	86 e0       	ldi	r24, 0x06	; 6
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a9 01       	movw	r20, r18
    1350:	48 1b       	sub	r20, r24
    1352:	59 0b       	sbc	r21, r25
    1354:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1358:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    135c:	0f 90       	pop	r0
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    137c:	e0 e7       	ldi	r30, 0x70	; 112
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	83 81       	ldd	r24, Z+3	; 0x03
    1382:	8f 7e       	andi	r24, 0xEF	; 239
    1384:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    1386:	e0 e4       	ldi	r30, 0x40	; 64
    1388:	f6 e0       	ldi	r31, 0x06	; 6
    138a:	80 81       	ld	r24, Z
    138c:	8a 6a       	ori	r24, 0xAA	; 170
    138e:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1394:	88 e5       	ldi	r24, 0x58	; 88
    1396:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1398:	e0 ea       	ldi	r30, 0xA0	; 160
    139a:	f8 e0       	ldi	r31, 0x08	; 8
    139c:	84 ec       	ldi	r24, 0xC4	; 196
    139e:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    13a4:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    13a6:	88 e1       	ldi	r24, 0x18	; 24
    13a8:	84 83       	std	Z+4, r24	; 0x04
    13aa:	08 95       	ret

000013ac <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    13ac:	e0 e7       	ldi	r30, 0x70	; 112
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	83 81       	ldd	r24, Z+3	; 0x03
    13b2:	87 7f       	andi	r24, 0xF7	; 247
    13b4:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    13b6:	e0 ec       	ldi	r30, 0xC0	; 192
    13b8:	f8 e0       	ldi	r31, 0x08	; 8
    13ba:	80 e4       	ldi	r24, 0x40	; 64
    13bc:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    13be:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    13c0:	88 e5       	ldi	r24, 0x58	; 88
    13c2:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    13c6:	08 95       	ret

000013c8 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
	asm("nop");
    13d2:	00 00       	nop
}
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13de:	9f b7       	in	r25, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	e8 2f       	mov	r30, r24
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	e0 59       	subi	r30, 0x90	; 144
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	60 95       	com	r22
    13ec:	80 81       	ld	r24, Z
    13ee:	68 23       	and	r22, r24
    13f0:	60 83       	st	Z, r22
    13f2:	9f bf       	out	0x3f, r25	; 63
    13f4:	08 95       	ret

000013f6 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    13f6:	86 30       	cpi	r24, 0x06	; 6
    13f8:	11 f0       	breq	.+4      	; 0x13fe <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    13fe:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1400:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1404:	81 fd       	sbrc	r24, 1
    1406:	26 c0       	rjmp	.+76     	; 0x1454 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1408:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    140a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    140c:	e0 e5       	ldi	r30, 0x50	; 80
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1416:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1418:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    141a:	81 ff       	sbrs	r24, 1
    141c:	fd cf       	rjmp	.-6      	; 0x1418 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    141e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1420:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1422:	a0 e5       	ldi	r26, 0x50	; 80
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	16 96       	adiw	r26, 0x06	; 6
    1428:	8c 91       	ld	r24, X
    142a:	16 97       	sbiw	r26, 0x06	; 6
    142c:	89 7f       	andi	r24, 0xF9	; 249
    142e:	16 96       	adiw	r26, 0x06	; 6
    1430:	8c 93       	st	X, r24
    1432:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1434:	e0 e6       	ldi	r30, 0x60	; 96
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 e8       	ldi	r24, 0x80	; 128
    143a:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    143c:	8b eb       	ldi	r24, 0xBB	; 187
    143e:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1440:	16 96       	adiw	r26, 0x06	; 6
    1442:	8c 91       	ld	r24, X
    1444:	16 97       	sbiw	r26, 0x06	; 6
    1446:	84 60       	ori	r24, 0x04	; 4
    1448:	16 96       	adiw	r26, 0x06	; 6
    144a:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    144c:	80 81       	ld	r24, Z
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1452:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1454:	63 60       	ori	r22, 0x03	; 3
    1456:	84 e4       	ldi	r24, 0x44	; 68
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	3e d5       	rcall	.+2684   	; 0x1ed8 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    145c:	60 e4       	ldi	r22, 0x40	; 64
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	be cf       	rjmp	.-132    	; 0x13de <sysclk_enable_module>
    1462:	08 95       	ret

00001464 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1464:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <udi_vendor_alternate_setting>
    1468:	08 95       	ret

0000146a <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    146a:	40 d1       	rcall	.+640    	; 0x16ec <udc_get_interface_desc>
    146c:	fc 01       	movw	r30, r24
    146e:	83 81       	ldd	r24, Z+3	; 0x03
    1470:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    1474:	81 11       	cpse	r24, r1
    1476:	02 c0       	rjmp	.+4      	; 0x147c <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    1478:	6a ca       	rjmp	.-2860   	; 0x94e <main_vendor_enable>
    147a:	08 95       	ret
			return false;
		}
	}
	return true;
    147c:	81 e0       	ldi	r24, 0x01	; 1
}
    147e:	08 95       	ret

00001480 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    1480:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <udi_vendor_alternate_setting>
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	09 f4       	brne	.+2      	; 0x148a <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    1488:	7e ca       	rjmp	.-2820   	; 0x986 <main_vendor_disable>
    148a:	08 95       	ret

0000148c <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    148c:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq>
    1490:	88 23       	and	r24, r24
    1492:	4c f4       	brge	.+18     	; 0x14a6 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1494:	80 76       	andi	r24, 0x60	; 96
    1496:	80 34       	cpi	r24, 0x40	; 64
    1498:	a9 f4       	brne	.+42     	; 0x14c4 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    149a:	80 91 9d 24 	lds	r24, 0x249D	; 0x80249d <udd_g_ctrlreq+0x1>
    149e:	81 11       	cpse	r24, r1
    14a0:	13 c0       	rjmp	.+38     	; 0x14c8 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    14a2:	76 ca       	rjmp	.-2836   	; 0x990 <main_setup_in_received>
    14a4:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    14a6:	80 76       	andi	r24, 0x60	; 96
    14a8:	80 34       	cpi	r24, 0x40	; 64
    14aa:	81 f4       	brne	.+32     	; 0x14cc <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    14ac:	80 91 9d 24 	lds	r24, 0x249D	; 0x80249d <udd_g_ctrlreq+0x1>
    14b0:	81 11       	cpse	r24, r1
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    14b4:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    14b8:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    14bc:	89 2b       	or	r24, r25
    14be:	51 f0       	breq	.+20     	; 0x14d4 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    14c0:	65 ca       	rjmp	.-2870   	; 0x98c <main_setup_out_received>
    14c2:	08 95       	ret
		}
	}
	return false; // Not supported request
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	08 95       	ret
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	08 95       	ret
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	08 95       	ret
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	08 95       	ret
    14d4:	80 e0       	ldi	r24, 0x00	; 0
}
    14d6:	08 95       	ret

000014d8 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    14de:	8a 01       	movw	r16, r20
    14e0:	ac 01       	movw	r20, r24
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	81 e8       	ldi	r24, 0x81	; 129
    14e6:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	08 95       	ret

000014f0 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    14f6:	8a 01       	movw	r16, r20
    14f8:	ac 01       	movw	r20, r24
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	82 e8       	ldi	r24, 0x82	; 130
    14fe:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    150e:	8a 01       	movw	r16, r20
    1510:	ac 01       	movw	r20, r24
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	83 e8       	ldi	r24, 0x83	; 131
    1516:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1520:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1524:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1528:	01 90       	ld	r0, Z+
    152a:	f0 81       	ld	r31, Z
    152c:	e0 2d       	mov	r30, r0
    152e:	22 81       	ldd	r18, Z+2	; 0x02
    1530:	33 81       	ldd	r19, Z+3	; 0x03
    1532:	2e 0f       	add	r18, r30
    1534:	3f 1f       	adc	r19, r31
    1536:	fc 01       	movw	r30, r24
    1538:	40 81       	ld	r20, Z
    153a:	e4 0f       	add	r30, r20
    153c:	f1 1d       	adc	r31, r1
    153e:	e2 17       	cp	r30, r18
    1540:	f3 07       	cpc	r31, r19
    1542:	b8 f4       	brcc	.+46     	; 0x1572 <udc_next_desc_in_iface+0x52>
    1544:	81 81       	ldd	r24, Z+1	; 0x01
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	b9 f0       	breq	.+46     	; 0x1578 <udc_next_desc_in_iface+0x58>
    154a:	86 13       	cpse	r24, r22
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <udc_next_desc_in_iface+0x40>
    154e:	05 c0       	rjmp	.+10     	; 0x155a <udc_next_desc_in_iface+0x3a>
    1550:	81 81       	ldd	r24, Z+1	; 0x01
    1552:	84 30       	cpi	r24, 0x04	; 4
    1554:	a1 f0       	breq	.+40     	; 0x157e <udc_next_desc_in_iface+0x5e>
    1556:	86 13       	cpse	r24, r22
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <udc_next_desc_in_iface+0x40>
    155a:	8e 2f       	mov	r24, r30
    155c:	9f 2f       	mov	r25, r31
    155e:	08 95       	ret
    1560:	80 81       	ld	r24, Z
    1562:	e8 0f       	add	r30, r24
    1564:	f1 1d       	adc	r31, r1
    1566:	e2 17       	cp	r30, r18
    1568:	f3 07       	cpc	r31, r19
    156a:	90 f3       	brcs	.-28     	; 0x1550 <udc_next_desc_in_iface+0x30>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	08 95       	ret
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	08 95       	ret
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	08 95       	ret
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	08 95       	ret

00001584 <udc_valid_address>:
    1584:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    1588:	8f 77       	andi	r24, 0x7F	; 127
    158a:	0c 94 0e 13 	jmp	0x261c	; 0x261c <udd_set_address>
    158e:	08 95       	ret

00001590 <udc_update_iface_desc>:
    1590:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1594:	99 23       	and	r25, r25
    1596:	81 f1       	breq	.+96     	; 0x15f8 <udc_update_iface_desc+0x68>
    1598:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    159c:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    15a0:	01 90       	ld	r0, Z+
    15a2:	f0 81       	ld	r31, Z
    15a4:	e0 2d       	mov	r30, r0
    15a6:	94 81       	ldd	r25, Z+4	; 0x04
    15a8:	89 17       	cp	r24, r25
    15aa:	40 f5       	brcc	.+80     	; 0x15fc <udc_update_iface_desc+0x6c>
    15ac:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <udc_ptr_iface>
    15b0:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <udc_ptr_iface+0x1>
    15b4:	22 81       	ldd	r18, Z+2	; 0x02
    15b6:	33 81       	ldd	r19, Z+3	; 0x03
    15b8:	2e 0f       	add	r18, r30
    15ba:	3f 1f       	adc	r19, r31
    15bc:	e2 17       	cp	r30, r18
    15be:	f3 07       	cpc	r31, r19
    15c0:	f8 f4       	brcc	.+62     	; 0x1600 <udc_update_iface_desc+0x70>
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	94 30       	cpi	r25, 0x04	; 4
    15c6:	61 f4       	brne	.+24     	; 0x15e0 <udc_update_iface_desc+0x50>
    15c8:	92 81       	ldd	r25, Z+2	; 0x02
    15ca:	98 13       	cpse	r25, r24
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <udc_update_iface_desc+0x50>
    15ce:	93 81       	ldd	r25, Z+3	; 0x03
    15d0:	96 13       	cpse	r25, r22
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <udc_update_iface_desc+0x50>
    15d4:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <udc_ptr_iface>
    15d8:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <udc_ptr_iface+0x1>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	08 95       	ret
    15e0:	90 81       	ld	r25, Z
    15e2:	e9 0f       	add	r30, r25
    15e4:	f1 1d       	adc	r31, r1
    15e6:	e2 17       	cp	r30, r18
    15e8:	f3 07       	cpc	r31, r19
    15ea:	58 f3       	brcs	.-42     	; 0x15c2 <udc_update_iface_desc+0x32>
    15ec:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <udc_ptr_iface>
    15f0:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <udc_ptr_iface+0x1>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	08 95       	ret
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	08 95       	ret
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	08 95       	ret
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	08 95       	ret

00001604 <udc_iface_disable>:
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	c8 2f       	mov	r28, r24
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	be df       	rcall	.-132    	; 0x1590 <udc_update_iface_desc>
    1614:	18 2f       	mov	r17, r24
    1616:	88 23       	and	r24, r24
    1618:	81 f1       	breq	.+96     	; 0x167a <udc_iface_disable+0x76>
    161a:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    161e:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1622:	ec 2f       	mov	r30, r28
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	ee 0f       	add	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	12 96       	adiw	r26, 0x02	; 2
    162c:	8d 91       	ld	r24, X+
    162e:	9c 91       	ld	r25, X
    1630:	13 97       	sbiw	r26, 0x03	; 3
    1632:	e8 0f       	add	r30, r24
    1634:	f9 1f       	adc	r31, r25
    1636:	e0 80       	ld	r14, Z
    1638:	f1 80       	ldd	r15, Z+1	; 0x01
    163a:	d7 01       	movw	r26, r14
    163c:	16 96       	adiw	r26, 0x06	; 6
    163e:	ed 91       	ld	r30, X+
    1640:	fc 91       	ld	r31, X
    1642:	17 97       	sbiw	r26, 0x07	; 7
    1644:	09 95       	icall
    1646:	68 2f       	mov	r22, r24
    1648:	8c 2f       	mov	r24, r28
    164a:	a2 df       	rcall	.-188    	; 0x1590 <udc_update_iface_desc>
    164c:	18 2f       	mov	r17, r24
    164e:	88 23       	and	r24, r24
    1650:	a1 f0       	breq	.+40     	; 0x167a <udc_iface_disable+0x76>
    1652:	c0 91 db 20 	lds	r28, 0x20DB	; 0x8020db <udc_ptr_iface>
    1656:	d0 91 dc 20 	lds	r29, 0x20DC	; 0x8020dc <udc_ptr_iface+0x1>
    165a:	65 e0       	ldi	r22, 0x05	; 5
    165c:	ce 01       	movw	r24, r28
    165e:	60 df       	rcall	.-320    	; 0x1520 <udc_next_desc_in_iface>
    1660:	ec 01       	movw	r28, r24
    1662:	89 2b       	or	r24, r25
    1664:	21 f0       	breq	.+8      	; 0x166e <udc_iface_disable+0x6a>
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <udd_ep_free>
    166c:	f6 cf       	rjmp	.-20     	; 0x165a <udc_iface_disable+0x56>
    166e:	d7 01       	movw	r26, r14
    1670:	12 96       	adiw	r26, 0x02	; 2
    1672:	ed 91       	ld	r30, X+
    1674:	fc 91       	ld	r31, X
    1676:	13 97       	sbiw	r26, 0x03	; 3
    1678:	09 95       	icall
    167a:	81 2f       	mov	r24, r17
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	08 95       	ret

00001688 <udc_iface_enable>:
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	18 2f       	mov	r17, r24
    1690:	7f df       	rcall	.-258    	; 0x1590 <udc_update_iface_desc>
    1692:	88 23       	and	r24, r24
    1694:	39 f1       	breq	.+78     	; 0x16e4 <udc_iface_enable+0x5c>
    1696:	c0 91 db 20 	lds	r28, 0x20DB	; 0x8020db <udc_ptr_iface>
    169a:	d0 91 dc 20 	lds	r29, 0x20DC	; 0x8020dc <udc_ptr_iface+0x1>
    169e:	65 e0       	ldi	r22, 0x05	; 5
    16a0:	ce 01       	movw	r24, r28
    16a2:	3e df       	rcall	.-388    	; 0x1520 <udc_next_desc_in_iface>
    16a4:	ec 01       	movw	r28, r24
    16a6:	89 2b       	or	r24, r25
    16a8:	41 f0       	breq	.+16     	; 0x16ba <udc_iface_enable+0x32>
    16aa:	4c 81       	ldd	r20, Y+4	; 0x04
    16ac:	5d 81       	ldd	r21, Y+5	; 0x05
    16ae:	6b 81       	ldd	r22, Y+3	; 0x03
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	c1 d7       	rcall	.+3970   	; 0x2636 <udd_ep_alloc>
    16b4:	81 11       	cpse	r24, r1
    16b6:	f3 cf       	rjmp	.-26     	; 0x169e <udc_iface_enable+0x16>
    16b8:	15 c0       	rjmp	.+42     	; 0x16e4 <udc_iface_enable+0x5c>
    16ba:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    16be:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    16c2:	e1 2f       	mov	r30, r17
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	ee 0f       	add	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	12 96       	adiw	r26, 0x02	; 2
    16cc:	8d 91       	ld	r24, X+
    16ce:	9c 91       	ld	r25, X
    16d0:	13 97       	sbiw	r26, 0x03	; 3
    16d2:	e8 0f       	add	r30, r24
    16d4:	f9 1f       	adc	r31, r25
    16d6:	01 90       	ld	r0, Z+
    16d8:	f0 81       	ld	r31, Z
    16da:	e0 2d       	mov	r30, r0
    16dc:	01 90       	ld	r0, Z+
    16de:	f0 81       	ld	r31, Z
    16e0:	e0 2d       	mov	r30, r0
    16e2:	09 95       	icall
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	08 95       	ret

000016ec <udc_get_interface_desc>:
    16ec:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <udc_ptr_iface>
    16f0:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <udc_ptr_iface+0x1>
    16f4:	08 95       	ret

000016f6 <udc_start>:
    16f6:	0d c7       	rjmp	.+3610   	; 0x2512 <udd_enable>
    16f8:	08 95       	ret

000016fa <udc_reset>:
    16fa:	cf 93       	push	r28
    16fc:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1700:	88 23       	and	r24, r24
    1702:	c1 f0       	breq	.+48     	; 0x1734 <udc_reset+0x3a>
    1704:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1708:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    170c:	01 90       	ld	r0, Z+
    170e:	f0 81       	ld	r31, Z
    1710:	e0 2d       	mov	r30, r0
    1712:	84 81       	ldd	r24, Z+4	; 0x04
    1714:	88 23       	and	r24, r24
    1716:	71 f0       	breq	.+28     	; 0x1734 <udc_reset+0x3a>
    1718:	c0 e0       	ldi	r28, 0x00	; 0
    171a:	8c 2f       	mov	r24, r28
    171c:	73 df       	rcall	.-282    	; 0x1604 <udc_iface_disable>
    171e:	cf 5f       	subi	r28, 0xFF	; 255
    1720:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1724:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1728:	01 90       	ld	r0, Z+
    172a:	f0 81       	ld	r31, Z
    172c:	e0 2d       	mov	r30, r0
    172e:	84 81       	ldd	r24, Z+4	; 0x04
    1730:	c8 17       	cp	r28, r24
    1732:	98 f3       	brcs	.-26     	; 0x171a <udc_reset+0x20>
    1734:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <udc_num_configuration>
    1738:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <udc_device_status>
    173c:	10 92 e5 20 	sts	0x20E5, r1	; 0x8020e5 <udc_device_status+0x1>
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1744:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1746:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    174a:	88 23       	and	r24, r24
    174c:	49 f1       	breq	.+82     	; 0x17a0 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    174e:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1752:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1756:	ed 91       	ld	r30, X+
    1758:	fc 91       	ld	r31, X
    175a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    175c:	84 81       	ldd	r24, Z+4	; 0x04
    175e:	88 23       	and	r24, r24
    1760:	f9 f0       	breq	.+62     	; 0x17a0 <udc_sof_notify+0x5c>
    1762:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1764:	ec 2f       	mov	r30, r28
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	8d 91       	ld	r24, X+
    1770:	9c 91       	ld	r25, X
    1772:	13 97       	sbiw	r26, 0x03	; 3
    1774:	e8 0f       	add	r30, r24
    1776:	f9 1f       	adc	r31, r25
    1778:	01 90       	ld	r0, Z+
    177a:	f0 81       	ld	r31, Z
    177c:	e0 2d       	mov	r30, r0
    177e:	00 84       	ldd	r0, Z+8	; 0x08
    1780:	f1 85       	ldd	r31, Z+9	; 0x09
    1782:	e0 2d       	mov	r30, r0
    1784:	30 97       	sbiw	r30, 0x00	; 0
    1786:	09 f0       	breq	.+2      	; 0x178a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1788:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    178a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    178c:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1790:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1794:	ed 91       	ld	r30, X+
    1796:	fc 91       	ld	r31, X
    1798:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    179a:	84 81       	ldd	r24, Z+4	; 0x04
    179c:	c8 17       	cp	r28, r24
    179e:	10 f3       	brcs	.-60     	; 0x1764 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    17ac:	ec e9       	ldi	r30, 0x9C	; 156
    17ae:	f4 e2       	ldi	r31, 0x24	; 36
    17b0:	12 86       	std	Z+10, r1	; 0x0a
    17b2:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    17b4:	14 86       	std	Z+12, r1	; 0x0c
    17b6:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    17b8:	16 86       	std	Z+14, r1	; 0x0e
    17ba:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    17bc:	80 81       	ld	r24, Z
    17be:	88 23       	and	r24, r24
    17c0:	3c f4       	brge	.+14     	; 0x17d0 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    17c2:	20 91 a2 24 	lds	r18, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    17c6:	30 91 a3 24 	lds	r19, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    17ca:	23 2b       	or	r18, r19
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <udc_process_setup+0x2c>
    17ce:	78 c3       	rjmp	.+1776   	; 0x1ec0 <udc_process_setup+0x71c>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    17d0:	80 76       	andi	r24, 0x60	; 96
    17d2:	80 34       	cpi	r24, 0x40	; 64
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <udc_process_setup+0x34>
    17d6:	16 c1       	rjmp	.+556    	; 0x1a04 <udc_process_setup+0x260>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    17d8:	e0 91 9d 24 	lds	r30, 0x249D	; 0x80249d <udd_g_ctrlreq+0x1>
    17dc:	8e 2f       	mov	r24, r30
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	fc 01       	movw	r30, r24
    17e2:	e0 5a       	subi	r30, 0xA0	; 160
    17e4:	f1 09       	sbc	r31, r1
    17e6:	e8 30       	cpi	r30, 0x08	; 8
    17e8:	f1 05       	cpc	r31, r1
    17ea:	08 f0       	brcs	.+2      	; 0x17ee <udc_process_setup+0x4a>
    17ec:	02 c1       	rjmp	.+516    	; 0x19f2 <udc_process_setup+0x24e>
    17ee:	e2 50       	subi	r30, 0x02	; 2
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    17fc:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1800:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1804:	e6 e8       	ldi	r30, 0x86	; 134
    1806:	f2 e2       	ldi	r31, 0x22	; 34
    1808:	83 87       	std	Z+11, r24	; 0x0b
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    180a:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    180e:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1812:	94 87       	std	Z+12, r25	; 0x0c
			uds.calValNeg = cali_value_negative_gradient;
    1814:	80 91 7e 22 	lds	r24, 0x227E	; 0x80227e <cali_value_negative_gradient>
    1818:	85 87       	std	Z+13, r24	; 0x0d
			uds.calValPos = cali_value_positive_gradient;
    181a:	80 91 7b 22 	lds	r24, 0x227B	; 0x80227b <cali_value_positive_gradient>
    181e:	86 87       	std	Z+14, r24	; 0x0e
			uds.CALA = DFLLRC2M.CALA;
    1820:	a8 e6       	ldi	r26, 0x68	; 104
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	12 96       	adiw	r26, 0x02	; 2
    1826:	8c 91       	ld	r24, X
    1828:	12 97       	sbiw	r26, 0x02	; 2
    182a:	87 87       	std	Z+15, r24	; 0x0f
			uds.CALB = DFLLRC2M.CALB;
    182c:	13 96       	adiw	r26, 0x03	; 3
    182e:	8c 91       	ld	r24, X
    1830:	80 8b       	std	Z+16, r24	; 0x10
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    1832:	60 91 a2 24 	lds	r22, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    1836:	70 91 a3 24 	lds	r23, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    183a:	cf 01       	movw	r24, r30
    183c:	f5 d6       	rcall	.+3562   	; 0x2628 <udd_set_setup_payload>
    183e:	44 c3       	rjmp	.+1672   	; 0x1ec8 <udc_process_setup+0x724>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1840:	e0 e0       	ldi	r30, 0x00	; 0
    1842:	f8 e0       	ldi	r31, 0x08	; 8
    1844:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1846:	cc e9       	ldi	r28, 0x9C	; 156
    1848:	d4 e2       	ldi	r29, 0x24	; 36
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	86 ab       	std	Z+54, r24	; 0x36
    1850:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	8f 70       	andi	r24, 0x0F	; 15
    1856:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1858:	6e 81       	ldd	r22, Y+6	; 0x06
    185a:	7f 81       	ldd	r23, Y+7	; 0x07
    185c:	8c e9       	ldi	r24, 0x9C	; 156
    185e:	92 e2       	ldi	r25, 0x22	; 34
    1860:	e3 d6       	rcall	.+3526   	; 0x2628 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1862:	8e 81       	ldd	r24, Y+6	; 0x06
    1864:	9f 81       	ldd	r25, Y+7	; 0x07
    1866:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    186a:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    186e:	82 17       	cp	r24, r18
    1870:	93 07       	cpc	r25, r19
    1872:	09 f4       	brne	.+2      	; 0x1876 <udc_process_setup+0xd2>
    1874:	29 c3       	rjmp	.+1618   	; 0x1ec8 <udc_process_setup+0x724>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1876:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    187a:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				switch(global_mode){
    187e:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    1882:	8e 2f       	mov	r24, r30
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	88 30       	cpi	r24, 0x08	; 8
    1888:	91 05       	cpc	r25, r1
    188a:	08 f0       	brcs	.+2      	; 0x188e <udc_process_setup+0xea>
    188c:	b4 c0       	rjmp	.+360    	; 0x19f6 <udc_process_setup+0x252>
    188e:	fc 01       	movw	r30, r24
    1890:	ea 5f       	subi	r30, 0xFA	; 250
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1898:	41 d9       	rcall	.-3454   	; 0xb1c <tiny_dma_set_mode_0>
    189a:	16 c3       	rjmp	.+1580   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 1:
					tiny_dma_set_mode_1();
    189c:	b9 d9       	rcall	.-3214   	; 0xc10 <tiny_dma_set_mode_1>
    189e:	14 c3       	rjmp	.+1576   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 2:
					tiny_dma_set_mode_2();
    18a0:	2f da       	rcall	.-2978   	; 0xd00 <tiny_dma_set_mode_2>
    18a2:	12 c3       	rjmp	.+1572   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 3:
					tiny_dma_set_mode_3();
    18a4:	a2 da       	rcall	.-2748   	; 0xdea <tiny_dma_set_mode_3>
    18a6:	10 c3       	rjmp	.+1568   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 4:
					tiny_dma_set_mode_4();
    18a8:	1c db       	rcall	.-2504   	; 0xee2 <tiny_dma_set_mode_4>
    18aa:	0e c3       	rjmp	.+1564   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 5:
					tiny_dma_set_mode_5();
    18ac:	90 db       	rcall	.-2272   	; 0xfce <tiny_dma_set_mode_5>
    18ae:	0c c3       	rjmp	.+1560   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 6:
					tiny_dma_set_mode_6();
    18b0:	d6 db       	rcall	.-2132   	; 0x105e <tiny_dma_set_mode_6>
    18b2:	0a c3       	rjmp	.+1556   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 7:
					tiny_dma_set_mode_7();
    18b4:	36 dc       	rcall	.-1940   	; 0x1122 <tiny_dma_set_mode_7>
    18b6:	08 c3       	rjmp	.+1552   	; 0x1ec8 <udc_process_setup+0x724>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    18b8:	e0 e4       	ldi	r30, 0x40	; 64
    18ba:	f8 e0       	ldi	r31, 0x08	; 8
    18bc:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    18be:	cc e9       	ldi	r28, 0x9C	; 156
    18c0:	d4 e2       	ldi	r29, 0x24	; 36
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	9b 81       	ldd	r25, Y+3	; 0x03
    18c6:	86 ab       	std	Z+54, r24	; 0x36
    18c8:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	8f 70       	andi	r24, 0x0F	; 15
    18ce:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    18d0:	6e 81       	ldd	r22, Y+6	; 0x06
    18d2:	7f 81       	ldd	r23, Y+7	; 0x07
    18d4:	8c ea       	ldi	r24, 0xAC	; 172
    18d6:	94 e2       	ldi	r25, 0x24	; 36
    18d8:	a7 d6       	rcall	.+3406   	; 0x2628 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    18da:	8e 81       	ldd	r24, Y+6	; 0x06
    18dc:	9f 81       	ldd	r25, Y+7	; 0x07
    18de:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    18e2:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    18e6:	82 17       	cp	r24, r18
    18e8:	93 07       	cpc	r25, r19
    18ea:	09 f4       	brne	.+2      	; 0x18ee <udc_process_setup+0x14a>
    18ec:	ed c2       	rjmp	.+1498   	; 0x1ec8 <udc_process_setup+0x724>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    18ee:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    18f2:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				switch(global_mode){
    18f6:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
    18fa:	8e 2f       	mov	r24, r30
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	88 30       	cpi	r24, 0x08	; 8
    1900:	91 05       	cpc	r25, r1
    1902:	08 f0       	brcs	.+2      	; 0x1906 <udc_process_setup+0x162>
    1904:	7a c0       	rjmp	.+244    	; 0x19fa <udc_process_setup+0x256>
    1906:	fc 01       	movw	r30, r24
    1908:	e2 5f       	subi	r30, 0xF2	; 242
    190a:	fe 4f       	sbci	r31, 0xFE	; 254
    190c:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1910:	05 d9       	rcall	.-3574   	; 0xb1c <tiny_dma_set_mode_0>
    1912:	da c2       	rjmp	.+1460   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1914:	7d d9       	rcall	.-3334   	; 0xc10 <tiny_dma_set_mode_1>
    1916:	d8 c2       	rjmp	.+1456   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1918:	f3 d9       	rcall	.-3098   	; 0xd00 <tiny_dma_set_mode_2>
    191a:	d6 c2       	rjmp	.+1452   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 3:
					tiny_dma_set_mode_3();
    191c:	66 da       	rcall	.-2868   	; 0xdea <tiny_dma_set_mode_3>
    191e:	d4 c2       	rjmp	.+1448   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1920:	e0 da       	rcall	.-2624   	; 0xee2 <tiny_dma_set_mode_4>
    1922:	d2 c2       	rjmp	.+1444   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1924:	54 db       	rcall	.-2392   	; 0xfce <tiny_dma_set_mode_5>
    1926:	d0 c2       	rjmp	.+1440   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1928:	9a db       	rcall	.-2252   	; 0x105e <tiny_dma_set_mode_6>
    192a:	ce c2       	rjmp	.+1436   	; 0x1ec8 <udc_process_setup+0x724>
					break;
					case 7:
					tiny_dma_set_mode_7();
    192c:	fa db       	rcall	.-2060   	; 0x1122 <tiny_dma_set_mode_7>
    192e:	cc c2       	rjmp	.+1432   	; 0x1ec8 <udc_process_setup+0x724>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1930:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1934:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1938:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    193c:	80 93 d3 20 	sts	0x20D3, r24	; 0x8020d3 <PSU_target>
    1940:	c3 c2       	rjmp	.+1414   	; 0x1ec8 <udc_process_setup+0x724>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1942:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    1946:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    194a:	be c2       	rjmp	.+1404   	; 0x1ec8 <udc_process_setup+0x724>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    194c:	e0 91 9e 24 	lds	r30, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    1950:	f0 91 9f 24 	lds	r31, 0x249F	; 0x80249f <udd_g_ctrlreq+0x3>
    1954:	e8 30       	cpi	r30, 0x08	; 8
    1956:	f1 05       	cpc	r31, r1
    1958:	08 f0       	brcs	.+2      	; 0x195c <udc_process_setup+0x1b8>
    195a:	51 c0       	rjmp	.+162    	; 0x19fe <udc_process_setup+0x25a>
    195c:	ea 5e       	subi	r30, 0xEA	; 234
    195e:	fe 4f       	sbci	r31, 0xFE	; 254
    1960:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	47 d8       	rcall	.-3954   	; 0x9f8 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    196a:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x4>
    196e:	12 d8       	rcall	.-4060   	; 0x994 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    1970:	d5 d8       	rcall	.-3670   	; 0xb1c <tiny_dma_set_mode_0>
    1972:	aa c2       	rjmp	.+1364   	; 0x1ec8 <udc_process_setup+0x724>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	3f d8       	rcall	.-3970   	; 0x9f8 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    197a:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x4>
    197e:	0a d8       	rcall	.-4076   	; 0x994 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1980:	47 d9       	rcall	.-3442   	; 0xc10 <tiny_dma_set_mode_1>
    1982:	a2 c2       	rjmp	.+1348   	; 0x1ec8 <udc_process_setup+0x724>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	37 d8       	rcall	.-3986   	; 0x9f8 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    198a:	cc e9       	ldi	r28, 0x9C	; 156
    198c:	d4 e2       	ldi	r29, 0x24	; 36
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	01 d8       	rcall	.-4094   	; 0x994 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	14 d8       	rcall	.-4056   	; 0x9be <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    1996:	b4 d9       	rcall	.-3224   	; 0xd00 <tiny_dma_set_mode_2>
    1998:	97 c2       	rjmp	.+1326   	; 0x1ec8 <udc_process_setup+0x724>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    199a:	27 da       	rcall	.-2994   	; 0xdea <tiny_dma_set_mode_3>
    199c:	95 c2       	rjmp	.+1322   	; 0x1ec8 <udc_process_setup+0x724>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    199e:	a1 da       	rcall	.-2750   	; 0xee2 <tiny_dma_set_mode_4>
    19a0:	93 c2       	rjmp	.+1318   	; 0x1ec8 <udc_process_setup+0x724>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	28 d8       	rcall	.-4016   	; 0x9f8 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    19a8:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x4>
    19ac:	0e 94 ca 04 	call	0x994	; 0x994 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    19b0:	0e db       	rcall	.-2532   	; 0xfce <tiny_dma_set_mode_5>
    19b2:	8a c2       	rjmp	.+1300   	; 0x1ec8 <udc_process_setup+0x724>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	1f d8       	rcall	.-4034   	; 0x9f8 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    19ba:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x4>
    19be:	0e 94 ca 04 	call	0x994	; 0x994 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    19c2:	4d db       	rcall	.-2406   	; 0x105e <tiny_dma_set_mode_6>
    19c4:	81 c2       	rjmp	.+1282   	; 0x1ec8 <udc_process_setup+0x724>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    19c6:	62 e0       	ldi	r22, 0x02	; 2
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	16 d8       	rcall	.-4052   	; 0x9f8 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    19cc:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x4>
    19d0:	80 68       	ori	r24, 0x80	; 128
    19d2:	0e 94 ca 04 	call	0x994	; 0x994 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    19d6:	a5 db       	rcall	.-2230   	; 0x1122 <tiny_dma_set_mode_7>
    19d8:	77 c2       	rjmp	.+1262   	; 0x1ec8 <udc_process_setup+0x724>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    19da:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    19de:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    19e2:	72 c2       	rjmp	.+1252   	; 0x1ec8 <udc_process_setup+0x724>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    19e4:	e9 e7       	ldi	r30, 0x79	; 121
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	88 ed       	ldi	r24, 0xD8	; 216
    19ec:	f8 94       	cli
    19ee:	84 bf       	out	0x34, r24	; 52
    19f0:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	05 c0       	rjmp	.+10     	; 0x1a00 <udc_process_setup+0x25c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <udc_process_setup+0x25c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <udc_process_setup+0x25c>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    19fe:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1a00:	81 11       	cpse	r24, r1
    1a02:	65 c2       	rjmp	.+1226   	; 0x1ece <udc_process_setup+0x72a>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1a04:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq>
    1a08:	98 2f       	mov	r25, r24
    1a0a:	90 76       	andi	r25, 0x60	; 96
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <udc_process_setup+0x26c>
    1a0e:	e1 c1       	rjmp	.+962    	; 0x1dd2 <udc_process_setup+0x62e>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1a10:	88 23       	and	r24, r24
    1a12:	0c f0       	brlt	.+2      	; 0x1a16 <udc_process_setup+0x272>
    1a14:	05 c1       	rjmp	.+522    	; 0x1c20 <udc_process_setup+0x47c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1a16:	20 91 a2 24 	lds	r18, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    1a1a:	30 91 a3 24 	lds	r19, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    1a1e:	21 15       	cp	r18, r1
    1a20:	31 05       	cpc	r19, r1
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <udc_process_setup+0x282>
    1a24:	d6 c1       	rjmp	.+940    	; 0x1dd2 <udc_process_setup+0x62e>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1a26:	8f 71       	andi	r24, 0x1F	; 31
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <udc_process_setup+0x288>
    1a2a:	a3 c0       	rjmp	.+326    	; 0x1b72 <udc_process_setup+0x3ce>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a2c:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x1>
    1a30:	96 30       	cpi	r25, 0x06	; 6
    1a32:	79 f0       	breq	.+30     	; 0x1a52 <udc_process_setup+0x2ae>
    1a34:	98 30       	cpi	r25, 0x08	; 8
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <udc_process_setup+0x296>
    1a38:	92 c0       	rjmp	.+292    	; 0x1b5e <udc_process_setup+0x3ba>
    1a3a:	91 11       	cpse	r25, r1
    1a3c:	9a c0       	rjmp	.+308    	; 0x1b72 <udc_process_setup+0x3ce>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <udc_process_setup+0x2a2>
    1a44:	c6 c1       	rjmp	.+908    	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1a46:	62 e0       	ldi	r22, 0x02	; 2
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	84 ee       	ldi	r24, 0xE4	; 228
    1a4c:	90 e2       	ldi	r25, 0x20	; 32
    1a4e:	ec d5       	rcall	.+3032   	; 0x2628 <udd_set_setup_payload>
    1a50:	3d c2       	rjmp	.+1146   	; 0x1ecc <udc_process_setup+0x728>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1a52:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    1a56:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1a5a:	29 2f       	mov	r18, r25
    1a5c:	33 27       	eor	r19, r19
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	a9 f0       	breq	.+42     	; 0x1a8e <udc_process_setup+0x2ea>
    1a64:	24 f4       	brge	.+8      	; 0x1a6e <udc_process_setup+0x2ca>
    1a66:	21 30       	cpi	r18, 0x01	; 1
    1a68:	31 05       	cpc	r19, r1
    1a6a:	41 f0       	breq	.+16     	; 0x1a7c <udc_process_setup+0x2d8>
    1a6c:	a9 c1       	rjmp	.+850    	; 0x1dc0 <udc_process_setup+0x61c>
    1a6e:	23 30       	cpi	r18, 0x03	; 3
    1a70:	31 05       	cpc	r19, r1
    1a72:	d9 f1       	breq	.+118    	; 0x1aea <udc_process_setup+0x346>
    1a74:	2f 30       	cpi	r18, 0x0F	; 15
    1a76:	31 05       	cpc	r19, r1
    1a78:	51 f1       	breq	.+84     	; 0x1ace <udc_process_setup+0x32a>
    1a7a:	a2 c1       	rjmp	.+836    	; 0x1dc0 <udc_process_setup+0x61c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1a7c:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1a80:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1a84:	dc 01       	movw	r26, r24
    1a86:	6c 91       	ld	r22, X
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	ce d5       	rcall	.+2972   	; 0x2628 <udd_set_setup_payload>
    1a8c:	59 c0       	rjmp	.+178    	; 0x1b40 <udc_process_setup+0x39c>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1a8e:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1a92:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1a96:	21 89       	ldd	r18, Z+17	; 0x11
    1a98:	82 17       	cp	r24, r18
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <udc_process_setup+0x2fa>
    1a9c:	9a c1       	rjmp	.+820    	; 0x1dd2 <udc_process_setup+0x62e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1a9e:	99 27       	eor	r25, r25
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1aac:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1ab0:	e8 0f       	add	r30, r24
    1ab2:	f9 1f       	adc	r31, r25
    1ab4:	80 81       	ld	r24, Z
    1ab6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1ab8:	fc 01       	movw	r30, r24
    1aba:	62 81       	ldd	r22, Z+2	; 0x02
    1abc:	73 81       	ldd	r23, Z+3	; 0x03
    1abe:	b4 d5       	rcall	.+2920   	; 0x2628 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1ac0:	e0 91 a4 24 	lds	r30, 0x24A4	; 0x8024a4 <udd_g_ctrlreq+0x8>
    1ac4:	f0 91 a5 24 	lds	r31, 0x24A5	; 0x8024a5 <udd_g_ctrlreq+0x9>
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	81 83       	std	Z+1, r24	; 0x01
    1acc:	39 c0       	rjmp	.+114    	; 0x1b40 <udc_process_setup+0x39c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1ace:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1ad2:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <udc_process_setup+0x338>
    1ada:	7b c1       	rjmp	.+758    	; 0x1dd2 <udc_process_setup+0x62e>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1adc:	dc 01       	movw	r26, r24
    1ade:	12 96       	adiw	r26, 0x02	; 2
    1ae0:	6d 91       	ld	r22, X+
    1ae2:	7c 91       	ld	r23, X
    1ae4:	13 97       	sbiw	r26, 0x03	; 3
    1ae6:	a0 d5       	rcall	.+2880   	; 0x2628 <udd_set_setup_payload>
    1ae8:	2b c0       	rjmp	.+86     	; 0x1b40 <udc_process_setup+0x39c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1aea:	99 27       	eor	r25, r25
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	71 f0       	breq	.+28     	; 0x1b0e <udc_process_setup+0x36a>
    1af2:	38 f0       	brcs	.+14     	; 0x1b02 <udc_process_setup+0x35e>
    1af4:	02 97       	sbiw	r24, 0x02	; 2
    1af6:	09 f0       	breq	.+2      	; 0x1afa <udc_process_setup+0x356>
    1af8:	6c c1       	rjmp	.+728    	; 0x1dd2 <udc_process_setup+0x62e>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1afa:	86 e9       	ldi	r24, 0x96	; 150
    1afc:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1afe:	28 e1       	ldi	r18, 0x18	; 24
    1b00:	09 c0       	rjmp	.+18     	; 0x1b14 <udc_process_setup+0x370>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1b02:	64 e0       	ldi	r22, 0x04	; 4
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	8a eb       	ldi	r24, 0xBA	; 186
    1b08:	90 e2       	ldi	r25, 0x20	; 32
    1b0a:	8e d5       	rcall	.+2844   	; 0x2628 <udd_set_setup_payload>
    1b0c:	19 c0       	rjmp	.+50     	; 0x1b40 <udc_process_setup+0x39c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1b0e:	8f ea       	ldi	r24, 0xAF	; 175
    1b10:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1b12:	29 e0       	ldi	r18, 0x09	; 9
    1b14:	38 2f       	mov	r19, r24
    1b16:	a6 e6       	ldi	r26, 0x66	; 102
    1b18:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1b1a:	e8 2f       	mov	r30, r24
    1b1c:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1b1e:	81 91       	ld	r24, Z+
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	8d 93       	st	X+, r24
    1b24:	9d 93       	st	X+, r25
    1b26:	8e 2f       	mov	r24, r30
    1b28:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1b2a:	82 17       	cp	r24, r18
    1b2c:	c0 f3       	brcs	.-16     	; 0x1b1e <udc_process_setup+0x37a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1b2e:	62 2f       	mov	r22, r18
    1b30:	66 0f       	add	r22, r22
    1b32:	6e 5f       	subi	r22, 0xFE	; 254
    1b34:	60 93 64 20 	sts	0x2064, r22	; 0x802064 <udc_string_desc>
		udd_set_setup_payload(
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	84 e6       	ldi	r24, 0x64	; 100
    1b3c:	90 e2       	ldi	r25, 0x20	; 32
    1b3e:	74 d5       	rcall	.+2792   	; 0x2628 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1b40:	ec e9       	ldi	r30, 0x9C	; 156
    1b42:	f4 e2       	ldi	r31, 0x24	; 36
    1b44:	86 81       	ldd	r24, Z+6	; 0x06
    1b46:	97 81       	ldd	r25, Z+7	; 0x07
    1b48:	22 85       	ldd	r18, Z+10	; 0x0a
    1b4a:	33 85       	ldd	r19, Z+11	; 0x0b
    1b4c:	82 17       	cp	r24, r18
    1b4e:	93 07       	cpc	r25, r19
    1b50:	08 f0       	brcs	.+2      	; 0x1b54 <udc_process_setup+0x3b0>
    1b52:	bc c1       	rjmp	.+888    	; 0x1ecc <udc_process_setup+0x728>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1b54:	80 93 a6 24 	sts	0x24A6, r24	; 0x8024a6 <udd_g_ctrlreq+0xa>
    1b58:	90 93 a7 24 	sts	0x24A7, r25	; 0x8024a7 <udd_g_ctrlreq+0xb>
    1b5c:	b7 c1       	rjmp	.+878    	; 0x1ecc <udc_process_setup+0x728>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1b5e:	21 30       	cpi	r18, 0x01	; 1
    1b60:	31 05       	cpc	r19, r1
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <udc_process_setup+0x3c2>
    1b64:	36 c1       	rjmp	.+620    	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	80 ee       	ldi	r24, 0xE0	; 224
    1b6c:	90 e2       	ldi	r25, 0x20	; 32
    1b6e:	5c d5       	rcall	.+2744   	; 0x2628 <udd_set_setup_payload>
    1b70:	ad c1       	rjmp	.+858    	; 0x1ecc <udc_process_setup+0x728>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	e1 f5       	brne	.+120    	; 0x1bee <udc_process_setup+0x44a>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b76:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x1>
    1b7a:	9a 30       	cpi	r25, 0x0A	; 10
    1b7c:	c1 f5       	brne	.+112    	; 0x1bee <udc_process_setup+0x44a>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1b7e:	21 30       	cpi	r18, 0x01	; 1
    1b80:	31 05       	cpc	r19, r1
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <udc_process_setup+0x3e2>
    1b84:	26 c1       	rjmp	.+588    	; 0x1dd2 <udc_process_setup+0x62e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1b86:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1b8a:	88 23       	and	r24, r24
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <udc_process_setup+0x3ec>
    1b8e:	21 c1       	rjmp	.+578    	; 0x1dd2 <udc_process_setup+0x62e>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b90:	c0 91 a0 24 	lds	r28, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x4>
    1b94:	d0 91 a1 24 	lds	r29, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b98:	00 91 dd 20 	lds	r16, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1b9c:	10 91 de 20 	lds	r17, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1ba0:	d8 01       	movw	r26, r16
    1ba2:	ed 91       	ld	r30, X+
    1ba4:	fc 91       	ld	r31, X
    1ba6:	84 81       	ldd	r24, Z+4	; 0x04
    1ba8:	c8 17       	cp	r28, r24
    1baa:	08 f0       	brcs	.+2      	; 0x1bae <udc_process_setup+0x40a>
    1bac:	12 c1       	rjmp	.+548    	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	8c 2f       	mov	r24, r28
    1bb2:	ee dc       	rcall	.-1572   	; 0x1590 <udc_update_iface_desc>
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <udc_process_setup+0x416>
    1bb8:	0c c1       	rjmp	.+536    	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bba:	ce 01       	movw	r24, r28
    1bbc:	99 27       	eor	r25, r25
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	d8 01       	movw	r26, r16
    1bc4:	12 96       	adiw	r26, 0x02	; 2
    1bc6:	ed 91       	ld	r30, X+
    1bc8:	fc 91       	ld	r31, X
    1bca:	13 97       	sbiw	r26, 0x03	; 3
    1bcc:	e8 0f       	add	r30, r24
    1bce:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1bd0:	01 90       	ld	r0, Z+
    1bd2:	f0 81       	ld	r31, Z
    1bd4:	e0 2d       	mov	r30, r0
    1bd6:	86 81       	ldd	r24, Z+6	; 0x06
    1bd8:	97 81       	ldd	r25, Z+7	; 0x07
    1bda:	fc 01       	movw	r30, r24
    1bdc:	09 95       	icall
    1bde:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1be2:	61 e0       	ldi	r22, 0x01	; 1
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	82 ee       	ldi	r24, 0xE2	; 226
    1be8:	90 e2       	ldi	r25, 0x20	; 32
    1bea:	1e d5       	rcall	.+2620   	; 0x2628 <udd_set_setup_payload>
    1bec:	6f c1       	rjmp	.+734    	; 0x1ecc <udc_process_setup+0x728>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <udc_process_setup+0x450>
    1bf2:	ef c0       	rjmp	.+478    	; 0x1dd2 <udc_process_setup+0x62e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1bf4:	80 91 9d 24 	lds	r24, 0x249D	; 0x80249d <udd_g_ctrlreq+0x1>
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	e4 c0       	rjmp	.+456    	; 0x1dc4 <udc_process_setup+0x620>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1bfc:	22 30       	cpi	r18, 0x02	; 2
    1bfe:	31 05       	cpc	r19, r1
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <udc_process_setup+0x460>
    1c02:	e7 c0       	rjmp	.+462    	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1c04:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x4>
    1c08:	8b d5       	rcall	.+2838   	; 0x2720 <udd_ep_is_halted>
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <udc_ep_status.5559>
    1c10:	90 93 da 20 	sts	0x20DA, r25	; 0x8020da <udc_ep_status.5559+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1c14:	62 e0       	ldi	r22, 0x02	; 2
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	89 ed       	ldi	r24, 0xD9	; 217
    1c1a:	90 e2       	ldi	r25, 0x20	; 32
    1c1c:	05 d5       	rcall	.+2570   	; 0x2628 <udd_set_setup_payload>
    1c1e:	56 c1       	rjmp	.+684    	; 0x1ecc <udc_process_setup+0x728>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1c20:	8f 71       	andi	r24, 0x1F	; 31
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <udc_process_setup+0x482>
    1c24:	83 c0       	rjmp	.+262    	; 0x1d2c <udc_process_setup+0x588>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c26:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x1>
    1c2a:	93 30       	cpi	r25, 0x03	; 3
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <udc_process_setup+0x48c>
    1c2e:	cc c0       	rjmp	.+408    	; 0x1dc8 <udc_process_setup+0x624>
    1c30:	18 f4       	brcc	.+6      	; 0x1c38 <udc_process_setup+0x494>
    1c32:	91 30       	cpi	r25, 0x01	; 1
    1c34:	a1 f0       	breq	.+40     	; 0x1c5e <udc_process_setup+0x4ba>
    1c36:	7a c0       	rjmp	.+244    	; 0x1d2c <udc_process_setup+0x588>
    1c38:	95 30       	cpi	r25, 0x05	; 5
    1c3a:	19 f0       	breq	.+6      	; 0x1c42 <udc_process_setup+0x49e>
    1c3c:	99 30       	cpi	r25, 0x09	; 9
    1c3e:	39 f1       	breq	.+78     	; 0x1c8e <udc_process_setup+0x4ea>
    1c40:	75 c0       	rjmp	.+234    	; 0x1d2c <udc_process_setup+0x588>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c42:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    1c46:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <udc_process_setup+0x4ac>
    1c4e:	c1 c0       	rjmp	.+386    	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1c50:	82 ec       	ldi	r24, 0xC2	; 194
    1c52:	9a e0       	ldi	r25, 0x0A	; 10
    1c54:	80 93 a8 24 	sts	0x24A8, r24	; 0x8024a8 <udd_g_ctrlreq+0xc>
    1c58:	90 93 a9 24 	sts	0x24A9, r25	; 0x8024a9 <udd_g_ctrlreq+0xd>
    1c5c:	37 c1       	rjmp	.+622    	; 0x1ecc <udc_process_setup+0x728>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c5e:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    1c62:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    1c66:	89 2b       	or	r24, r25
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <udc_process_setup+0x4c8>
    1c6a:	b3 c0       	rjmp	.+358    	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1c6c:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    1c70:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x3>
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <udc_process_setup+0x4d6>
    1c78:	ac c0       	rjmp	.+344    	; 0x1dd2 <udc_process_setup+0x62e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1c7a:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <udc_device_status>
    1c7e:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <udc_device_status+0x1>
    1c82:	8d 7f       	andi	r24, 0xFD	; 253
    1c84:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <udc_device_status>
    1c88:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <udc_device_status+0x1>
    1c8c:	1f c1       	rjmp	.+574    	; 0x1ecc <udc_process_setup+0x728>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1c8e:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    1c92:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    1c96:	89 2b       	or	r24, r25
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <udc_process_setup+0x4f8>
    1c9a:	9b c0       	rjmp	.+310    	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1c9c:	c2 d4       	rcall	.+2436   	; 0x2622 <udd_getaddress>
    1c9e:	88 23       	and	r24, r24
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <udc_process_setup+0x500>
    1ca2:	97 c0       	rjmp	.+302    	; 0x1dd2 <udc_process_setup+0x62e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1ca4:	20 91 9e 24 	lds	r18, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    1ca8:	30 91 9f 24 	lds	r19, 0x249F	; 0x80249f <udd_g_ctrlreq+0x3>
    1cac:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1cae:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1cb2:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1cb6:	81 89       	ldd	r24, Z+17	; 0x11
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	82 17       	cp	r24, r18
    1cbc:	93 07       	cpc	r25, r19
    1cbe:	08 f4       	brcc	.+2      	; 0x1cc2 <udc_process_setup+0x51e>
    1cc0:	88 c0       	rjmp	.+272    	; 0x1dd2 <udc_process_setup+0x62e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1cc2:	1b dd       	rcall	.-1482   	; 0x16fa <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1cc4:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    1cc8:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x3>
    1ccc:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1cd0:	88 23       	and	r24, r24
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <udc_process_setup+0x532>
    1cd4:	fb c0       	rjmp	.+502    	; 0x1ecc <udc_process_setup+0x728>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1cd6:	99 27       	eor	r25, r25
    1cd8:	81 50       	subi	r24, 0x01	; 1
    1cda:	90 4c       	sbci	r25, 0xC0	; 192
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1ce8:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1cec:	e8 0f       	add	r30, r24
    1cee:	f9 1f       	adc	r31, r25
    1cf0:	e0 93 dd 20 	sts	0x20DD, r30	; 0x8020dd <udc_ptr_conf>
    1cf4:	f0 93 de 20 	sts	0x20DE, r31	; 0x8020de <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	f0 81       	ld	r31, Z
    1cfc:	e0 2d       	mov	r30, r0
    1cfe:	84 81       	ldd	r24, Z+4	; 0x04
    1d00:	88 23       	and	r24, r24
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <udc_process_setup+0x562>
    1d04:	e3 c0       	rjmp	.+454    	; 0x1ecc <udc_process_setup+0x728>
    1d06:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	8c 2f       	mov	r24, r28
    1d0c:	bd dc       	rcall	.-1670   	; 0x1688 <udc_iface_enable>
    1d0e:	88 23       	and	r24, r24
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <udc_process_setup+0x570>
    1d12:	5f c0       	rjmp	.+190    	; 0x1dd2 <udc_process_setup+0x62e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1d14:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d16:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1d1a:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1d1e:	01 90       	ld	r0, Z+
    1d20:	f0 81       	ld	r31, Z
    1d22:	e0 2d       	mov	r30, r0
    1d24:	84 81       	ldd	r24, Z+4	; 0x04
    1d26:	c8 17       	cp	r28, r24
    1d28:	78 f3       	brcs	.-34     	; 0x1d08 <udc_process_setup+0x564>
    1d2a:	d0 c0       	rjmp	.+416    	; 0x1ecc <udc_process_setup+0x728>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	e1 f4       	brne	.+56     	; 0x1d68 <udc_process_setup+0x5c4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d30:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x1>
    1d34:	9b 30       	cpi	r25, 0x0B	; 11
    1d36:	c1 f4       	brne	.+48     	; 0x1d68 <udc_process_setup+0x5c4>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1d38:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    1d3c:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    1d40:	89 2b       	or	r24, r25
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <udc_process_setup+0x5a2>
    1d44:	46 c0       	rjmp	.+140    	; 0x1dd2 <udc_process_setup+0x62e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1d46:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1d4a:	88 23       	and	r24, r24
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <udc_process_setup+0x5ac>
    1d4e:	41 c0       	rjmp	.+130    	; 0x1dd2 <udc_process_setup+0x62e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d50:	ec e9       	ldi	r30, 0x9C	; 156
    1d52:	f4 e2       	ldi	r31, 0x24	; 36
    1d54:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1d56:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1d58:	8c 2f       	mov	r24, r28
    1d5a:	54 dc       	rcall	.-1880   	; 0x1604 <udc_iface_disable>
    1d5c:	88 23       	and	r24, r24
    1d5e:	c9 f1       	breq	.+114    	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1d60:	6d 2f       	mov	r22, r29
    1d62:	8c 2f       	mov	r24, r28
    1d64:	91 dc       	rcall	.-1758   	; 0x1688 <udc_iface_enable>
    1d66:	33 c0       	rjmp	.+102    	; 0x1dce <udc_process_setup+0x62a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	99 f5       	brne	.+102    	; 0x1dd2 <udc_process_setup+0x62e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d6c:	80 91 9d 24 	lds	r24, 0x249D	; 0x80249d <udd_g_ctrlreq+0x1>
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	19 f0       	breq	.+6      	; 0x1d7a <udc_process_setup+0x5d6>
    1d74:	83 30       	cpi	r24, 0x03	; 3
    1d76:	89 f0       	breq	.+34     	; 0x1d9a <udc_process_setup+0x5f6>
    1d78:	29 c0       	rjmp	.+82     	; 0x1dcc <udc_process_setup+0x628>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d7a:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    1d7e:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    1d82:	89 2b       	or	r24, r25
    1d84:	31 f5       	brne	.+76     	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1d86:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    1d8a:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x3>
    1d8e:	89 2b       	or	r24, r25
    1d90:	01 f5       	brne	.+64     	; 0x1dd2 <udc_process_setup+0x62e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d92:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x4>
    1d96:	df d4       	rcall	.+2494   	; 0x2756 <udd_ep_clear_halt>
    1d98:	1a c0       	rjmp	.+52     	; 0x1dce <udc_process_setup+0x62a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d9a:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    1d9e:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    1da2:	89 2b       	or	r24, r25
    1da4:	b1 f4       	brne	.+44     	; 0x1dd2 <udc_process_setup+0x62e>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1da6:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x2>
    1daa:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x3>
    1dae:	89 2b       	or	r24, r25
    1db0:	81 f4       	brne	.+32     	; 0x1dd2 <udc_process_setup+0x62e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1db2:	cc e9       	ldi	r28, 0x9C	; 156
    1db4:	d4 e2       	ldi	r29, 0x24	; 36
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	bd d5       	rcall	.+2938   	; 0x2934 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1dba:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbc:	20 d6       	rcall	.+3136   	; 0x29fe <udd_ep_set_halt>
    1dbe:	07 c0       	rjmp	.+14     	; 0x1dce <udc_process_setup+0x62a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	05 c0       	rjmp	.+10     	; 0x1dce <udc_process_setup+0x62a>
				break;
			}
		}
#endif
	}
	return false;
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	03 c0       	rjmp	.+6      	; 0x1dce <udc_process_setup+0x62a>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	01 c0       	rjmp	.+2      	; 0x1dce <udc_process_setup+0x62a>
				break;
			}
		}
#endif
	}
	return false;
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1dce:	81 11       	cpse	r24, r1
    1dd0:	7e c0       	rjmp	.+252    	; 0x1ece <udc_process_setup+0x72a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1dd2:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq>
    1dd6:	8f 71       	andi	r24, 0x1F	; 31
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	71 f5       	brne	.+92     	; 0x1e38 <udc_process_setup+0x694>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ddc:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1de0:	88 23       	and	r24, r24
    1de2:	51 f1       	breq	.+84     	; 0x1e38 <udc_process_setup+0x694>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1de4:	00 91 a0 24 	lds	r16, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0x4>
    1de8:	10 91 a1 24 	lds	r17, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1dec:	c0 91 dd 20 	lds	r28, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1df0:	d0 91 de 20 	lds	r29, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1df4:	e8 81       	ld	r30, Y
    1df6:	f9 81       	ldd	r31, Y+1	; 0x01
    1df8:	84 81       	ldd	r24, Z+4	; 0x04
    1dfa:	08 17       	cp	r16, r24
    1dfc:	e8 f4       	brcc	.+58     	; 0x1e38 <udc_process_setup+0x694>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	80 2f       	mov	r24, r16
    1e02:	c6 db       	rcall	.-2164   	; 0x1590 <udc_update_iface_desc>
    1e04:	88 23       	and	r24, r24
    1e06:	c1 f0       	breq	.+48     	; 0x1e38 <udc_process_setup+0x694>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e08:	f8 01       	movw	r30, r16
    1e0a:	ff 27       	eor	r31, r31
    1e0c:	cf 01       	movw	r24, r30
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	ea 81       	ldd	r30, Y+2	; 0x02
    1e14:	fb 81       	ldd	r31, Y+3	; 0x03
    1e16:	e8 0f       	add	r30, r24
    1e18:	f9 1f       	adc	r31, r25
    1e1a:	c0 81       	ld	r28, Z
    1e1c:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e1e:	ee 81       	ldd	r30, Y+6	; 0x06
    1e20:	ff 81       	ldd	r31, Y+7	; 0x07
    1e22:	09 95       	icall
    1e24:	68 2f       	mov	r22, r24
    1e26:	80 2f       	mov	r24, r16
    1e28:	b3 db       	rcall	.-2202   	; 0x1590 <udc_update_iface_desc>
    1e2a:	88 23       	and	r24, r24
    1e2c:	29 f0       	breq	.+10     	; 0x1e38 <udc_process_setup+0x694>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1e2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e30:	fd 81       	ldd	r31, Y+5	; 0x05
    1e32:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1e34:	81 11       	cpse	r24, r1
    1e36:	4b c0       	rjmp	.+150    	; 0x1ece <udc_process_setup+0x72a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1e38:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq>
    1e3c:	8f 71       	andi	r24, 0x1F	; 31
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <udc_process_setup+0x6a0>
    1e42:	40 c0       	rjmp	.+128    	; 0x1ec4 <udc_process_setup+0x720>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1e44:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udc_num_configuration>
    1e48:	88 23       	and	r24, r24
    1e4a:	b1 f1       	breq	.+108    	; 0x1eb8 <udc_process_setup+0x714>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e4c:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1e50:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1e54:	ed 91       	ld	r30, X+
    1e56:	fc 91       	ld	r31, X
    1e58:	11 97       	sbiw	r26, 0x01	; 1
    1e5a:	84 81       	ldd	r24, Z+4	; 0x04
    1e5c:	88 23       	and	r24, r24
    1e5e:	71 f1       	breq	.+92     	; 0x1ebc <udc_process_setup+0x718>
    1e60:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e62:	ec 2f       	mov	r30, r28
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	12 96       	adiw	r26, 0x02	; 2
    1e6c:	8d 91       	ld	r24, X+
    1e6e:	9c 91       	ld	r25, X
    1e70:	13 97       	sbiw	r26, 0x03	; 3
    1e72:	e8 0f       	add	r30, r24
    1e74:	f9 1f       	adc	r31, r25
    1e76:	00 81       	ld	r16, Z
    1e78:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e7a:	d8 01       	movw	r26, r16
    1e7c:	16 96       	adiw	r26, 0x06	; 6
    1e7e:	ed 91       	ld	r30, X+
    1e80:	fc 91       	ld	r31, X
    1e82:	17 97       	sbiw	r26, 0x07	; 7
    1e84:	09 95       	icall
    1e86:	68 2f       	mov	r22, r24
    1e88:	8c 2f       	mov	r24, r28
    1e8a:	82 db       	rcall	.-2300   	; 0x1590 <udc_update_iface_desc>
    1e8c:	88 23       	and	r24, r24
    1e8e:	f9 f0       	breq	.+62     	; 0x1ece <udc_process_setup+0x72a>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1e90:	d8 01       	movw	r26, r16
    1e92:	14 96       	adiw	r26, 0x04	; 4
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	15 97       	sbiw	r26, 0x05	; 5
    1e9a:	09 95       	icall
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	17 c0       	rjmp	.+46     	; 0x1ece <udc_process_setup+0x72a>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1ea0:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ea2:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <udc_ptr_conf>
    1ea6:	b0 91 de 20 	lds	r27, 0x20DE	; 0x8020de <udc_ptr_conf+0x1>
    1eaa:	ed 91       	ld	r30, X+
    1eac:	fc 91       	ld	r31, X
    1eae:	11 97       	sbiw	r26, 0x01	; 1
    1eb0:	94 81       	ldd	r25, Z+4	; 0x04
    1eb2:	c9 17       	cp	r28, r25
    1eb4:	b0 f2       	brcs	.-84     	; 0x1e62 <udc_process_setup+0x6be>
    1eb6:	0b c0       	rjmp	.+22     	; 0x1ece <udc_process_setup+0x72a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	09 c0       	rjmp	.+18     	; 0x1ece <udc_process_setup+0x72a>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	07 c0       	rjmp	.+14     	; 0x1ece <udc_process_setup+0x72a>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <udc_process_setup+0x72a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <udc_process_setup+0x72a>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <udc_process_setup+0x72a>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1ed8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1eda:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1edc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1ede:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1ee0:	60 83       	st	Z, r22
	ret                             // Return to caller
    1ee2:	08 95       	ret

00001ee4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1ee4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1ee8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1eea:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1eec:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1ef0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1ef2:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1ef6:	08 95       	ret

00001ef8 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1ef8:	81 11       	cpse	r24, r1
    1efa:	22 c0       	rjmp	.+68     	; 0x1f40 <udd_sleep_mode+0x48>
    1efc:	90 91 78 22 	lds	r25, 0x2278	; 0x802278 <udd_b_idle>
    1f00:	99 23       	and	r25, r25
    1f02:	d9 f0       	breq	.+54     	; 0x1f3a <udd_sleep_mode+0x42>
    1f04:	90 91 8b 2e 	lds	r25, 0x2E8B	; 0x802e8b <sleepmgr_locks+0x1>
    1f08:	91 11       	cpse	r25, r1
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <udd_sleep_mode+0x16>
    1f0c:	ff cf       	rjmp	.-2      	; 0x1f0c <udd_sleep_mode+0x14>
    1f0e:	2f b7       	in	r18, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	ea e8       	ldi	r30, 0x8A	; 138
    1f14:	fe e2       	ldi	r31, 0x2E	; 46
    1f16:	91 81       	ldd	r25, Z+1	; 0x01
    1f18:	91 50       	subi	r25, 0x01	; 1
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	2f bf       	out	0x3f, r18	; 63
    1f1e:	0d c0       	rjmp	.+26     	; 0x1f3a <udd_sleep_mode+0x42>
    1f20:	90 91 8b 2e 	lds	r25, 0x2E8B	; 0x802e8b <sleepmgr_locks+0x1>
    1f24:	9f 3f       	cpi	r25, 0xFF	; 255
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <udd_sleep_mode+0x32>
    1f28:	ff cf       	rjmp	.-2      	; 0x1f28 <udd_sleep_mode+0x30>
    1f2a:	2f b7       	in	r18, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	ea e8       	ldi	r30, 0x8A	; 138
    1f30:	fe e2       	ldi	r31, 0x2E	; 46
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	9f 5f       	subi	r25, 0xFF	; 255
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	2f bf       	out	0x3f, r18	; 63
    1f3a:	80 93 78 22 	sts	0x2278, r24	; 0x802278 <udd_b_idle>
    1f3e:	08 95       	ret
    1f40:	90 91 78 22 	lds	r25, 0x2278	; 0x802278 <udd_b_idle>
    1f44:	99 23       	and	r25, r25
    1f46:	61 f3       	breq	.-40     	; 0x1f20 <udd_sleep_mode+0x28>
    1f48:	f8 cf       	rjmp	.-16     	; 0x1f3a <udd_sleep_mode+0x42>

00001f4a <udd_ctrl_init>:
    1f4a:	0f 93       	push	r16
    1f4c:	e8 ec       	ldi	r30, 0xC8	; 200
    1f4e:	f4 e0       	ldi	r31, 0x04	; 4
    1f50:	80 81       	ld	r24, Z
    1f52:	8f 7d       	andi	r24, 0xDF	; 223
    1f54:	80 83       	st	Z, r24
    1f56:	80 81       	ld	r24, Z
    1f58:	8f 7d       	andi	r24, 0xDF	; 223
    1f5a:	80 83       	st	Z, r24
    1f5c:	ec e3       	ldi	r30, 0x3C	; 60
    1f5e:	f2 e2       	ldi	r31, 0x22	; 34
    1f60:	02 e0       	ldi	r16, 0x02	; 2
    1f62:	05 93       	las	Z, r16
    1f64:	10 92 3e 22 	sts	0x223E, r1	; 0x80223e <udd_sram+0x1a>
    1f68:	10 92 3f 22 	sts	0x223F, r1	; 0x80223f <udd_sram+0x1b>
    1f6c:	00 e2       	ldi	r16, 0x20	; 32
    1f6e:	06 93       	lac	Z, r16
    1f70:	00 e4       	ldi	r16, 0x40	; 64
    1f72:	06 93       	lac	Z, r16
    1f74:	e4 e3       	ldi	r30, 0x34	; 52
    1f76:	f2 e2       	ldi	r31, 0x22	; 34
    1f78:	00 e2       	ldi	r16, 0x20	; 32
    1f7a:	06 93       	lac	Z, r16
    1f7c:	00 e4       	ldi	r16, 0x40	; 64
    1f7e:	06 93       	lac	Z, r16
    1f80:	ec e9       	ldi	r30, 0x9C	; 156
    1f82:	f4 e2       	ldi	r31, 0x24	; 36
    1f84:	14 86       	std	Z+12, r1	; 0x0c
    1f86:	15 86       	std	Z+13, r1	; 0x0d
    1f88:	16 86       	std	Z+14, r1	; 0x0e
    1f8a:	17 86       	std	Z+15, r1	; 0x0f
    1f8c:	12 86       	std	Z+10, r1	; 0x0a
    1f8e:	13 86       	std	Z+11, r1	; 0x0b
    1f90:	10 92 21 22 	sts	0x2221, r1	; 0x802221 <udd_ep_control_state>
    1f94:	0f 91       	pop	r16
    1f96:	08 95       	ret

00001f98 <udd_ctrl_stall_data>:
    1f98:	0f 93       	push	r16
    1f9a:	85 e0       	ldi	r24, 0x05	; 5
    1f9c:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    1fa0:	ed e3       	ldi	r30, 0x3D	; 61
    1fa2:	f2 e2       	ldi	r31, 0x22	; 34
    1fa4:	04 e0       	ldi	r16, 0x04	; 4
    1fa6:	05 93       	las	Z, r16
    1fa8:	e5 e3       	ldi	r30, 0x35	; 53
    1faa:	f2 e2       	ldi	r31, 0x22	; 34
    1fac:	04 e0       	ldi	r16, 0x04	; 4
    1fae:	05 93       	las	Z, r16
    1fb0:	0f 91       	pop	r16
    1fb2:	08 95       	ret

00001fb4 <udd_ctrl_send_zlp_in>:
    1fb4:	0f 93       	push	r16
    1fb6:	83 e0       	ldi	r24, 0x03	; 3
    1fb8:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    1fbc:	10 92 3e 22 	sts	0x223E, r1	; 0x80223e <udd_sram+0x1a>
    1fc0:	10 92 3f 22 	sts	0x223F, r1	; 0x80223f <udd_sram+0x1b>
    1fc4:	ec e3       	ldi	r30, 0x3C	; 60
    1fc6:	f2 e2       	ldi	r31, 0x22	; 34
    1fc8:	02 e0       	ldi	r16, 0x02	; 2
    1fca:	06 93       	lac	Z, r16
    1fcc:	0f 91       	pop	r16
    1fce:	08 95       	ret

00001fd0 <udd_ctrl_endofrequest>:
    1fd0:	e0 91 a8 24 	lds	r30, 0x24A8	; 0x8024a8 <udd_g_ctrlreq+0xc>
    1fd4:	f0 91 a9 24 	lds	r31, 0x24A9	; 0x8024a9 <udd_g_ctrlreq+0xd>
    1fd8:	30 97       	sbiw	r30, 0x00	; 0
    1fda:	09 f0       	breq	.+2      	; 0x1fde <udd_ctrl_endofrequest+0xe>
    1fdc:	09 95       	icall
    1fde:	08 95       	ret

00001fe0 <udd_ctrl_in_sent>:
    1fe0:	0f 93       	push	r16
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    1fea:	83 30       	cpi	r24, 0x03	; 3
    1fec:	19 f4       	brne	.+6      	; 0x1ff4 <udd_ctrl_in_sent+0x14>
    1fee:	f0 df       	rcall	.-32     	; 0x1fd0 <udd_ctrl_endofrequest>
    1ff0:	ac df       	rcall	.-168    	; 0x1f4a <udd_ctrl_init>
    1ff2:	5e c0       	rjmp	.+188    	; 0x20b0 <udd_ctrl_in_sent+0xd0>
    1ff4:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    1ff8:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    1ffc:	c0 91 a6 24 	lds	r28, 0x24A6	; 0x8024a6 <udd_g_ctrlreq+0xa>
    2000:	d0 91 a7 24 	lds	r29, 0x24A7	; 0x8024a7 <udd_g_ctrlreq+0xb>
    2004:	c8 1b       	sub	r28, r24
    2006:	d9 0b       	sbc	r29, r25
    2008:	71 f5       	brne	.+92     	; 0x2066 <udd_ctrl_in_sent+0x86>
    200a:	20 91 1f 22 	lds	r18, 0x221F	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    200e:	30 91 20 22 	lds	r19, 0x2220	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2012:	82 0f       	add	r24, r18
    2014:	93 1f       	adc	r25, r19
    2016:	80 93 1f 22 	sts	0x221F, r24	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    201a:	90 93 20 22 	sts	0x2220, r25	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    201e:	20 91 a2 24 	lds	r18, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    2022:	30 91 a3 24 	lds	r19, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    2026:	82 17       	cp	r24, r18
    2028:	93 07       	cpc	r25, r19
    202a:	21 f0       	breq	.+8      	; 0x2034 <udd_ctrl_in_sent+0x54>
    202c:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <b_shortpacket.5272>
    2030:	88 23       	and	r24, r24
    2032:	41 f0       	breq	.+16     	; 0x2044 <udd_ctrl_in_sent+0x64>
    2034:	84 e0       	ldi	r24, 0x04	; 4
    2036:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    203a:	e4 e3       	ldi	r30, 0x34	; 52
    203c:	f2 e2       	ldi	r31, 0x22	; 34
    203e:	02 e0       	ldi	r16, 0x02	; 2
    2040:	06 93       	lac	Z, r16
    2042:	36 c0       	rjmp	.+108    	; 0x20b0 <udd_ctrl_in_sent+0xd0>
    2044:	e0 91 aa 24 	lds	r30, 0x24AA	; 0x8024aa <udd_g_ctrlreq+0xe>
    2048:	f0 91 ab 24 	lds	r31, 0x24AB	; 0x8024ab <udd_g_ctrlreq+0xf>
    204c:	30 97       	sbiw	r30, 0x00	; 0
    204e:	99 f0       	breq	.+38     	; 0x2076 <udd_ctrl_in_sent+0x96>
    2050:	09 95       	icall
    2052:	88 23       	and	r24, r24
    2054:	81 f0       	breq	.+32     	; 0x2076 <udd_ctrl_in_sent+0x96>
    2056:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    205a:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    205e:	c0 91 a6 24 	lds	r28, 0x24A6	; 0x8024a6 <udd_g_ctrlreq+0xa>
    2062:	d0 91 a7 24 	lds	r29, 0x24A7	; 0x8024a7 <udd_g_ctrlreq+0xb>
    2066:	c0 34       	cpi	r28, 0x40	; 64
    2068:	d1 05       	cpc	r29, r1
    206a:	28 f0       	brcs	.+10     	; 0x2076 <udd_ctrl_in_sent+0x96>
    206c:	10 92 e6 20 	sts	0x20E6, r1	; 0x8020e6 <b_shortpacket.5272>
    2070:	c0 e4       	ldi	r28, 0x40	; 64
    2072:	d0 e0       	ldi	r29, 0x00	; 0
    2074:	03 c0       	rjmp	.+6      	; 0x207c <udd_ctrl_in_sent+0x9c>
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <b_shortpacket.5272>
    207c:	e4 e2       	ldi	r30, 0x24	; 36
    207e:	f2 e2       	ldi	r31, 0x22	; 34
    2080:	c2 8f       	std	Z+26, r28	; 0x1a
    2082:	d3 8f       	std	Z+27, r29	; 0x1b
    2084:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    2088:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    208c:	20 91 a4 24 	lds	r18, 0x24A4	; 0x8024a4 <udd_g_ctrlreq+0x8>
    2090:	30 91 a5 24 	lds	r19, 0x24A5	; 0x8024a5 <udd_g_ctrlreq+0x9>
    2094:	28 0f       	add	r18, r24
    2096:	39 1f       	adc	r19, r25
    2098:	24 8f       	std	Z+28, r18	; 0x1c
    209a:	35 8f       	std	Z+29, r19	; 0x1d
    209c:	c8 0f       	add	r28, r24
    209e:	d9 1f       	adc	r29, r25
    20a0:	c0 93 1d 22 	sts	0x221D, r28	; 0x80221d <udd_ctrl_payload_nb_trans>
    20a4:	d0 93 1e 22 	sts	0x221E, r29	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    20a8:	ec e3       	ldi	r30, 0x3C	; 60
    20aa:	f2 e2       	ldi	r31, 0x22	; 34
    20ac:	02 e0       	ldi	r16, 0x02	; 2
    20ae:	06 93       	lac	Z, r16
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	0f 91       	pop	r16
    20b6:	08 95       	ret

000020b8 <udd_ep_get_size>:
    20b8:	fc 01       	movw	r30, r24
    20ba:	81 81       	ldd	r24, Z+1	; 0x01
    20bc:	e8 2f       	mov	r30, r24
    20be:	e7 70       	andi	r30, 0x07	; 7
    20c0:	8e 2f       	mov	r24, r30
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	fc 01       	movw	r30, r24
    20c6:	31 97       	sbiw	r30, 0x01	; 1
    20c8:	e7 30       	cpi	r30, 0x07	; 7
    20ca:	f1 05       	cpc	r31, r1
    20cc:	c0 f4       	brcc	.+48     	; 0x20fe <udd_ep_get_size+0x46>
    20ce:	e2 5e       	subi	r30, 0xE2	; 226
    20d0:	fe 4f       	sbci	r31, 0xFE	; 254
    20d2:	8d c6       	rjmp	.+3354   	; 0x2dee <__tablejump2__>
    20d4:	80 e1       	ldi	r24, 0x10	; 16
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	08 95       	ret
    20da:	80 e2       	ldi	r24, 0x20	; 32
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	08 95       	ret
    20e0:	80 e4       	ldi	r24, 0x40	; 64
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	08 95       	ret
    20e6:	80 e8       	ldi	r24, 0x80	; 128
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	08 95       	ret
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	08 95       	ret
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	92 e0       	ldi	r25, 0x02	; 2
    20f6:	08 95       	ret
    20f8:	8f ef       	ldi	r24, 0xFF	; 255
    20fa:	93 e0       	ldi	r25, 0x03	; 3
    20fc:	08 95       	ret
    20fe:	88 e0       	ldi	r24, 0x08	; 8
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	08 95       	ret

00002104 <udd_ep_get_job>:
    2104:	28 2f       	mov	r18, r24
    2106:	2f 70       	andi	r18, 0x0F	; 15
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	22 0f       	add	r18, r18
    210c:	33 1f       	adc	r19, r19
    210e:	08 2e       	mov	r0, r24
    2110:	00 0c       	add	r0, r0
    2112:	99 0b       	sbc	r25, r25
    2114:	88 27       	eor	r24, r24
    2116:	99 0f       	add	r25, r25
    2118:	88 1f       	adc	r24, r24
    211a:	99 27       	eor	r25, r25
    211c:	82 0f       	add	r24, r18
    211e:	93 1f       	adc	r25, r19
    2120:	02 97       	sbiw	r24, 0x02	; 2
    2122:	9c 01       	movw	r18, r24
    2124:	22 0f       	add	r18, r18
    2126:	33 1f       	adc	r19, r19
    2128:	22 0f       	add	r18, r18
    212a:	33 1f       	adc	r19, r19
    212c:	22 0f       	add	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	82 0f       	add	r24, r18
    2132:	93 1f       	adc	r25, r19
    2134:	89 55       	subi	r24, 0x59	; 89
    2136:	9e 4d       	sbci	r25, 0xDE	; 222
    2138:	08 95       	ret

0000213a <udd_ctrl_interrupt_tc_setup>:
    213a:	0f 93       	push	r16
    213c:	cf 93       	push	r28
    213e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2142:	80 ff       	sbrs	r24, 0
    2144:	62 c0       	rjmp	.+196    	; 0x220a <udd_ctrl_interrupt_tc_setup+0xd0>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    214c:	e4 e3       	ldi	r30, 0x34	; 52
    214e:	f2 e2       	ldi	r31, 0x22	; 34
    2150:	00 e8       	ldi	r16, 0x80	; 128
    2152:	06 93       	lac	Z, r16
    2154:	ec e3       	ldi	r30, 0x3C	; 60
    2156:	f2 e2       	ldi	r31, 0x22	; 34
    2158:	00 e8       	ldi	r16, 0x80	; 128
    215a:	06 93       	lac	Z, r16
    215c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2160:	e4 e3       	ldi	r30, 0x34	; 52
    2162:	f2 e2       	ldi	r31, 0x22	; 34
    2164:	00 e1       	ldi	r16, 0x10	; 16
    2166:	06 93       	lac	Z, r16
    2168:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    216c:	88 23       	and	r24, r24
    216e:	29 f0       	breq	.+10     	; 0x217a <udd_ctrl_interrupt_tc_setup+0x40>
    2170:	83 50       	subi	r24, 0x03	; 3
    2172:	82 30       	cpi	r24, 0x02	; 2
    2174:	08 f4       	brcc	.+2      	; 0x2178 <udd_ctrl_interrupt_tc_setup+0x3e>
    2176:	2c df       	rcall	.-424    	; 0x1fd0 <udd_ctrl_endofrequest>
    2178:	e8 de       	rcall	.-560    	; 0x1f4a <udd_ctrl_init>
    217a:	80 91 36 22 	lds	r24, 0x2236	; 0x802236 <udd_sram+0x12>
    217e:	90 91 37 22 	lds	r25, 0x2237	; 0x802237 <udd_sram+0x13>
    2182:	08 97       	sbiw	r24, 0x08	; 8
    2184:	09 f0       	breq	.+2      	; 0x2188 <udd_ctrl_interrupt_tc_setup+0x4e>
    2186:	43 c0       	rjmp	.+134    	; 0x220e <udd_ctrl_interrupt_tc_setup+0xd4>
    2188:	88 e0       	ldi	r24, 0x08	; 8
    218a:	ed ed       	ldi	r30, 0xDD	; 221
    218c:	f1 e2       	ldi	r31, 0x21	; 33
    218e:	ac e9       	ldi	r26, 0x9C	; 156
    2190:	b4 e2       	ldi	r27, 0x24	; 36
    2192:	01 90       	ld	r0, Z+
    2194:	0d 92       	st	X+, r0
    2196:	8a 95       	dec	r24
    2198:	e1 f7       	brne	.-8      	; 0x2192 <udd_ctrl_interrupt_tc_setup+0x58>
    219a:	e8 ec       	ldi	r30, 0xC8	; 200
    219c:	f4 e0       	ldi	r31, 0x04	; 4
    219e:	80 81       	ld	r24, Z
    21a0:	80 62       	ori	r24, 0x20	; 32
    21a2:	80 83       	st	Z, r24
    21a4:	80 81       	ld	r24, Z
    21a6:	80 62       	ori	r24, 0x20	; 32
    21a8:	80 83       	st	Z, r24
    21aa:	fc da       	rcall	.-2568   	; 0x17a4 <udc_process_setup>
    21ac:	c8 2f       	mov	r28, r24
    21ae:	81 11       	cpse	r24, r1
    21b0:	03 c0       	rjmp	.+6      	; 0x21b8 <udd_ctrl_interrupt_tc_setup+0x7e>
    21b2:	f2 de       	rcall	.-540    	; 0x1f98 <udd_ctrl_stall_data>
    21b4:	c1 e0       	ldi	r28, 0x01	; 1
    21b6:	2c c0       	rjmp	.+88     	; 0x2210 <udd_ctrl_interrupt_tc_setup+0xd6>
    21b8:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq>
    21bc:	88 23       	and	r24, r24
    21be:	6c f4       	brge	.+26     	; 0x21da <udd_ctrl_interrupt_tc_setup+0xa0>
    21c0:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    21c4:	10 92 20 22 	sts	0x2220, r1	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    21c8:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    21cc:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    21d6:	04 df       	rcall	.-504    	; 0x1fe0 <udd_ctrl_in_sent>
    21d8:	1b c0       	rjmp	.+54     	; 0x2210 <udd_ctrl_interrupt_tc_setup+0xd6>
    21da:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    21de:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    21e2:	89 2b       	or	r24, r25
    21e4:	11 f4       	brne	.+4      	; 0x21ea <udd_ctrl_interrupt_tc_setup+0xb0>
    21e6:	e6 de       	rcall	.-564    	; 0x1fb4 <udd_ctrl_send_zlp_in>
    21e8:	13 c0       	rjmp	.+38     	; 0x2210 <udd_ctrl_interrupt_tc_setup+0xd6>
    21ea:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    21ee:	10 92 20 22 	sts	0x2220, r1	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    21f2:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    21f6:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
    2200:	e4 e3       	ldi	r30, 0x34	; 52
    2202:	f2 e2       	ldi	r31, 0x22	; 34
    2204:	02 e0       	ldi	r16, 0x02	; 2
    2206:	06 93       	lac	Z, r16
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <udd_ctrl_interrupt_tc_setup+0xd6>
    220a:	c0 e0       	ldi	r28, 0x00	; 0
    220c:	01 c0       	rjmp	.+2      	; 0x2210 <udd_ctrl_interrupt_tc_setup+0xd6>
    220e:	c1 e0       	ldi	r28, 0x01	; 1
    2210:	8c 2f       	mov	r24, r28
    2212:	cf 91       	pop	r28
    2214:	0f 91       	pop	r16
    2216:	08 95       	ret

00002218 <udd_ep_trans_complet>:
    2218:	8f 92       	push	r8
    221a:	9f 92       	push	r9
    221c:	af 92       	push	r10
    221e:	bf 92       	push	r11
    2220:	df 92       	push	r13
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	d8 2e       	mov	r13, r24
    2230:	69 df       	rcall	.-302    	; 0x2104 <udd_ep_get_job>
    2232:	8c 01       	movw	r16, r24
    2234:	bd 2c       	mov	r11, r13
    2236:	bb 1c       	adc	r11, r11
    2238:	bb 24       	eor	r11, r11
    223a:	bb 1c       	adc	r11, r11
    223c:	cd 2d       	mov	r28, r13
    223e:	cf 70       	andi	r28, 0x0F	; 15
    2240:	d0 e0       	ldi	r29, 0x00	; 0
    2242:	cc 0f       	add	r28, r28
    2244:	dd 1f       	adc	r29, r29
    2246:	cb 0d       	add	r28, r11
    2248:	d1 1d       	adc	r29, r1
    224a:	ce 01       	movw	r24, r28
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	9c 01       	movw	r18, r24
    225a:	2c 5c       	subi	r18, 0xCC	; 204
    225c:	3d 4d       	sbci	r19, 0xDD	; 221
    225e:	79 01       	movw	r14, r18
    2260:	c9 01       	movw	r24, r18
    2262:	2a df       	rcall	.-428    	; 0x20b8 <udd_ep_get_size>
    2264:	4c 01       	movw	r8, r24
    2266:	bb 20       	and	r11, r11
    2268:	09 f4       	brne	.+2      	; 0x226c <udd_ep_trans_complet+0x54>
    226a:	70 c0       	rjmp	.+224    	; 0x234c <udd_ep_trans_complet+0x134>
    226c:	fe 01       	movw	r30, r28
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	ec 5d       	subi	r30, 0xDC	; 220
    227c:	fd 4d       	sbci	r31, 0xDD	; 221
    227e:	26 89       	ldd	r18, Z+22	; 0x16
    2280:	37 89       	ldd	r19, Z+23	; 0x17
    2282:	d8 01       	movw	r26, r16
    2284:	15 96       	adiw	r26, 0x05	; 5
    2286:	8d 91       	ld	r24, X+
    2288:	9c 91       	ld	r25, X
    228a:	16 97       	sbiw	r26, 0x06	; 6
    228c:	82 0f       	add	r24, r18
    228e:	93 1f       	adc	r25, r19
    2290:	15 96       	adiw	r26, 0x05	; 5
    2292:	8d 93       	st	X+, r24
    2294:	9c 93       	st	X, r25
    2296:	16 97       	sbiw	r26, 0x06	; 6
    2298:	13 96       	adiw	r26, 0x03	; 3
    229a:	2d 91       	ld	r18, X+
    229c:	3c 91       	ld	r19, X
    229e:	14 97       	sbiw	r26, 0x04	; 4
    22a0:	82 17       	cp	r24, r18
    22a2:	93 07       	cpc	r25, r19
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <udd_ep_trans_complet+0x90>
    22a6:	3c c0       	rjmp	.+120    	; 0x2320 <udd_ep_trans_complet+0x108>
    22a8:	28 1b       	sub	r18, r24
    22aa:	39 0b       	sbc	r19, r25
    22ac:	21 15       	cp	r18, r1
    22ae:	b4 e0       	ldi	r27, 0x04	; 4
    22b0:	3b 07       	cpc	r19, r27
    22b2:	38 f0       	brcs	.+14     	; 0x22c2 <udd_ep_trans_complet+0xaa>
    22b4:	2f ef       	ldi	r18, 0xFF	; 255
    22b6:	33 e0       	ldi	r19, 0x03	; 3
    22b8:	c9 01       	movw	r24, r18
    22ba:	b4 01       	movw	r22, r8
    22bc:	71 d5       	rcall	.+2786   	; 0x2da0 <__udivmodhi4>
    22be:	28 1b       	sub	r18, r24
    22c0:	39 0b       	sbc	r19, r25
    22c2:	f8 01       	movw	r30, r16
    22c4:	80 81       	ld	r24, Z
    22c6:	81 ff       	sbrs	r24, 1
    22c8:	09 c0       	rjmp	.+18     	; 0x22dc <udd_ep_trans_complet+0xc4>
    22ca:	c9 01       	movw	r24, r18
    22cc:	b4 01       	movw	r22, r8
    22ce:	68 d5       	rcall	.+2768   	; 0x2da0 <__udivmodhi4>
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	89 2b       	or	r24, r25
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <udd_ep_trans_complet+0xc0>
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	84 2f       	mov	r24, r20
    22da:	01 c0       	rjmp	.+2      	; 0x22de <udd_ep_trans_complet+0xc6>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	d8 01       	movw	r26, r16
    22e0:	9c 91       	ld	r25, X
    22e2:	80 fb       	bst	r24, 0
    22e4:	91 f9       	bld	r25, 1
    22e6:	9c 93       	st	X, r25
    22e8:	cc 0f       	add	r28, r28
    22ea:	dd 1f       	adc	r29, r29
    22ec:	cc 0f       	add	r28, r28
    22ee:	dd 1f       	adc	r29, r29
    22f0:	cc 0f       	add	r28, r28
    22f2:	dd 1f       	adc	r29, r29
    22f4:	cc 5d       	subi	r28, 0xDC	; 220
    22f6:	dd 4d       	sbci	r29, 0xDD	; 221
    22f8:	1e 8a       	std	Y+22, r1	; 0x16
    22fa:	1f 8a       	std	Y+23, r1	; 0x17
    22fc:	2a 8b       	std	Y+18, r18	; 0x12
    22fe:	3b 8b       	std	Y+19, r19	; 0x13
    2300:	11 96       	adiw	r26, 0x01	; 1
    2302:	2d 91       	ld	r18, X+
    2304:	3c 91       	ld	r19, X
    2306:	12 97       	sbiw	r26, 0x02	; 2
    2308:	15 96       	adiw	r26, 0x05	; 5
    230a:	8d 91       	ld	r24, X+
    230c:	9c 91       	ld	r25, X
    230e:	16 97       	sbiw	r26, 0x06	; 6
    2310:	82 0f       	add	r24, r18
    2312:	93 1f       	adc	r25, r19
    2314:	8c 8b       	std	Y+20, r24	; 0x14
    2316:	9d 8b       	std	Y+21, r25	; 0x15
    2318:	f7 01       	movw	r30, r14
    231a:	02 e0       	ldi	r16, 0x02	; 2
    231c:	06 93       	lac	Z, r16
    231e:	ca c0       	rjmp	.+404    	; 0x24b4 <udd_ep_trans_complet+0x29c>
    2320:	d8 01       	movw	r26, r16
    2322:	8c 91       	ld	r24, X
    2324:	81 ff       	sbrs	r24, 1
    2326:	b3 c0       	rjmp	.+358    	; 0x248e <udd_ep_trans_complet+0x276>
    2328:	8d 7f       	andi	r24, 0xFD	; 253
    232a:	8c 93       	st	X, r24
    232c:	cc 0f       	add	r28, r28
    232e:	dd 1f       	adc	r29, r29
    2330:	cc 0f       	add	r28, r28
    2332:	dd 1f       	adc	r29, r29
    2334:	cc 0f       	add	r28, r28
    2336:	dd 1f       	adc	r29, r29
    2338:	cc 5d       	subi	r28, 0xDC	; 220
    233a:	dd 4d       	sbci	r29, 0xDD	; 221
    233c:	1e 8a       	std	Y+22, r1	; 0x16
    233e:	1f 8a       	std	Y+23, r1	; 0x17
    2340:	1a 8a       	std	Y+18, r1	; 0x12
    2342:	1b 8a       	std	Y+19, r1	; 0x13
    2344:	f7 01       	movw	r30, r14
    2346:	02 e0       	ldi	r16, 0x02	; 2
    2348:	06 93       	lac	Z, r16
    234a:	b4 c0       	rjmp	.+360    	; 0x24b4 <udd_ep_trans_complet+0x29c>
    234c:	fe 01       	movw	r30, r28
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	ee 0f       	add	r30, r30
    2354:	ff 1f       	adc	r31, r31
    2356:	ee 0f       	add	r30, r30
    2358:	ff 1f       	adc	r31, r31
    235a:	ec 5d       	subi	r30, 0xDC	; 220
    235c:	fd 4d       	sbci	r31, 0xDD	; 221
    235e:	a2 88       	ldd	r10, Z+18	; 0x12
    2360:	b3 88       	ldd	r11, Z+19	; 0x13
    2362:	d8 01       	movw	r26, r16
    2364:	8c 91       	ld	r24, X
    2366:	82 ff       	sbrs	r24, 2
    2368:	19 c0       	rjmp	.+50     	; 0x239c <udd_ep_trans_complet+0x184>
    236a:	11 96       	adiw	r26, 0x01	; 1
    236c:	ed 91       	ld	r30, X+
    236e:	fc 91       	ld	r31, X
    2370:	12 97       	sbiw	r26, 0x02	; 2
    2372:	15 96       	adiw	r26, 0x05	; 5
    2374:	2d 91       	ld	r18, X+
    2376:	3c 91       	ld	r19, X
    2378:	16 97       	sbiw	r26, 0x06	; 6
    237a:	13 96       	adiw	r26, 0x03	; 3
    237c:	8d 91       	ld	r24, X+
    237e:	9c 91       	ld	r25, X
    2380:	14 97       	sbiw	r26, 0x04	; 4
    2382:	b4 01       	movw	r22, r8
    2384:	0d d5       	rcall	.+2586   	; 0x2da0 <__udivmodhi4>
    2386:	b0 e4       	ldi	r27, 0x40	; 64
    2388:	db 9e       	mul	r13, r27
    238a:	b0 01       	movw	r22, r0
    238c:	11 24       	eor	r1, r1
    238e:	69 55       	subi	r22, 0x59	; 89
    2390:	7f 4d       	sbci	r23, 0xDF	; 223
    2392:	ac 01       	movw	r20, r24
    2394:	cf 01       	movw	r24, r30
    2396:	82 0f       	add	r24, r18
    2398:	93 1f       	adc	r25, r19
    239a:	3e d5       	rcall	.+2684   	; 0x2e18 <memcpy>
    239c:	f8 01       	movw	r30, r16
    239e:	25 81       	ldd	r18, Z+5	; 0x05
    23a0:	36 81       	ldd	r19, Z+6	; 0x06
    23a2:	2a 0d       	add	r18, r10
    23a4:	3b 1d       	adc	r19, r11
    23a6:	25 83       	std	Z+5, r18	; 0x05
    23a8:	36 83       	std	Z+6, r19	; 0x06
    23aa:	83 81       	ldd	r24, Z+3	; 0x03
    23ac:	94 81       	ldd	r25, Z+4	; 0x04
    23ae:	82 17       	cp	r24, r18
    23b0:	93 07       	cpc	r25, r19
    23b2:	68 f4       	brcc	.+26     	; 0x23ce <udd_ep_trans_complet+0x1b6>
    23b4:	85 83       	std	Z+5, r24	; 0x05
    23b6:	96 83       	std	Z+6, r25	; 0x06
    23b8:	cc 0f       	add	r28, r28
    23ba:	dd 1f       	adc	r29, r29
    23bc:	cc 0f       	add	r28, r28
    23be:	dd 1f       	adc	r29, r29
    23c0:	cc 0f       	add	r28, r28
    23c2:	dd 1f       	adc	r29, r29
    23c4:	cc 5d       	subi	r28, 0xDC	; 220
    23c6:	dd 4d       	sbci	r29, 0xDD	; 221
    23c8:	8e 89       	ldd	r24, Y+22	; 0x16
    23ca:	9f 89       	ldd	r25, Y+23	; 0x17
    23cc:	60 c0       	rjmp	.+192    	; 0x248e <udd_ep_trans_complet+0x276>
    23ce:	fe 01       	movw	r30, r28
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	ee 0f       	add	r30, r30
    23d6:	ff 1f       	adc	r31, r31
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	ec 5d       	subi	r30, 0xDC	; 220
    23de:	fd 4d       	sbci	r31, 0xDD	; 221
    23e0:	46 89       	ldd	r20, Z+22	; 0x16
    23e2:	57 89       	ldd	r21, Z+23	; 0x17
    23e4:	4a 15       	cp	r20, r10
    23e6:	5b 05       	cpc	r21, r11
    23e8:	09 f0       	breq	.+2      	; 0x23ec <udd_ep_trans_complet+0x1d4>
    23ea:	51 c0       	rjmp	.+162    	; 0x248e <udd_ep_trans_complet+0x276>
    23ec:	28 17       	cp	r18, r24
    23ee:	39 07       	cpc	r19, r25
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <udd_ep_trans_complet+0x1dc>
    23f2:	4d c0       	rjmp	.+154    	; 0x248e <udd_ep_trans_complet+0x276>
    23f4:	ac 01       	movw	r20, r24
    23f6:	42 1b       	sub	r20, r18
    23f8:	53 0b       	sbc	r21, r19
    23fa:	9a 01       	movw	r18, r20
    23fc:	21 15       	cp	r18, r1
    23fe:	54 e0       	ldi	r21, 0x04	; 4
    2400:	35 07       	cpc	r19, r21
    2402:	50 f0       	brcs	.+20     	; 0x2418 <udd_ep_trans_complet+0x200>
    2404:	2f ef       	ldi	r18, 0xFF	; 255
    2406:	33 e0       	ldi	r19, 0x03	; 3
    2408:	c9 01       	movw	r24, r18
    240a:	b4 01       	movw	r22, r8
    240c:	c9 d4       	rcall	.+2450   	; 0x2da0 <__udivmodhi4>
    240e:	d9 01       	movw	r26, r18
    2410:	a8 1b       	sub	r26, r24
    2412:	b9 0b       	sbc	r27, r25
    2414:	cd 01       	movw	r24, r26
    2416:	07 c0       	rjmp	.+14     	; 0x2426 <udd_ep_trans_complet+0x20e>
    2418:	c9 01       	movw	r24, r18
    241a:	b4 01       	movw	r22, r8
    241c:	c1 d4       	rcall	.+2434   	; 0x2da0 <__udivmodhi4>
    241e:	f9 01       	movw	r30, r18
    2420:	e8 1b       	sub	r30, r24
    2422:	f9 0b       	sbc	r31, r25
    2424:	cf 01       	movw	r24, r30
    2426:	fe 01       	movw	r30, r28
    2428:	ee 0f       	add	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	ee 0f       	add	r30, r30
    242e:	ff 1f       	adc	r31, r31
    2430:	ee 0f       	add	r30, r30
    2432:	ff 1f       	adc	r31, r31
    2434:	ec 5d       	subi	r30, 0xDC	; 220
    2436:	fd 4d       	sbci	r31, 0xDD	; 221
    2438:	12 8a       	std	Z+18, r1	; 0x12
    243a:	13 8a       	std	Z+19, r1	; 0x13
    243c:	88 15       	cp	r24, r8
    243e:	99 05       	cpc	r25, r9
    2440:	78 f4       	brcc	.+30     	; 0x2460 <udd_ep_trans_complet+0x248>
    2442:	d8 01       	movw	r26, r16
    2444:	8c 91       	ld	r24, X
    2446:	84 60       	ori	r24, 0x04	; 4
    2448:	8c 93       	st	X, r24
    244a:	b0 e4       	ldi	r27, 0x40	; 64
    244c:	db 9e       	mul	r13, r27
    244e:	c0 01       	movw	r24, r0
    2450:	11 24       	eor	r1, r1
    2452:	89 55       	subi	r24, 0x59	; 89
    2454:	9f 4d       	sbci	r25, 0xDF	; 223
    2456:	84 8b       	std	Z+20, r24	; 0x14
    2458:	95 8b       	std	Z+21, r25	; 0x15
    245a:	86 8a       	std	Z+22, r8	; 0x16
    245c:	97 8a       	std	Z+23, r9	; 0x17
    245e:	13 c0       	rjmp	.+38     	; 0x2486 <udd_ep_trans_complet+0x26e>
    2460:	f8 01       	movw	r30, r16
    2462:	41 81       	ldd	r20, Z+1	; 0x01
    2464:	52 81       	ldd	r21, Z+2	; 0x02
    2466:	25 81       	ldd	r18, Z+5	; 0x05
    2468:	36 81       	ldd	r19, Z+6	; 0x06
    246a:	24 0f       	add	r18, r20
    246c:	35 1f       	adc	r19, r21
    246e:	cc 0f       	add	r28, r28
    2470:	dd 1f       	adc	r29, r29
    2472:	cc 0f       	add	r28, r28
    2474:	dd 1f       	adc	r29, r29
    2476:	cc 0f       	add	r28, r28
    2478:	dd 1f       	adc	r29, r29
    247a:	cc 5d       	subi	r28, 0xDC	; 220
    247c:	dd 4d       	sbci	r29, 0xDD	; 221
    247e:	2c 8b       	std	Y+20, r18	; 0x14
    2480:	3d 8b       	std	Y+21, r19	; 0x15
    2482:	8e 8b       	std	Y+22, r24	; 0x16
    2484:	9f 8b       	std	Y+23, r25	; 0x17
    2486:	f7 01       	movw	r30, r14
    2488:	02 e0       	ldi	r16, 0x02	; 2
    248a:	06 93       	lac	Z, r16
    248c:	13 c0       	rjmp	.+38     	; 0x24b4 <udd_ep_trans_complet+0x29c>
    248e:	d8 01       	movw	r26, r16
    2490:	8c 91       	ld	r24, X
    2492:	80 ff       	sbrs	r24, 0
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <udd_ep_trans_complet+0x29c>
    2496:	8e 7f       	andi	r24, 0xFE	; 254
    2498:	8c 93       	st	X, r24
    249a:	17 96       	adiw	r26, 0x07	; 7
    249c:	ed 91       	ld	r30, X+
    249e:	fc 91       	ld	r31, X
    24a0:	18 97       	sbiw	r26, 0x08	; 8
    24a2:	30 97       	sbiw	r30, 0x00	; 0
    24a4:	39 f0       	breq	.+14     	; 0x24b4 <udd_ep_trans_complet+0x29c>
    24a6:	15 96       	adiw	r26, 0x05	; 5
    24a8:	6d 91       	ld	r22, X+
    24aa:	7c 91       	ld	r23, X
    24ac:	16 97       	sbiw	r26, 0x06	; 6
    24ae:	4d 2d       	mov	r20, r13
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	09 95       	icall
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	df 90       	pop	r13
    24c2:	bf 90       	pop	r11
    24c4:	af 90       	pop	r10
    24c6:	9f 90       	pop	r9
    24c8:	8f 90       	pop	r8
    24ca:	08 95       	ret

000024cc <udd_attach>:
    24cc:	cf 93       	push	r28
    24ce:	cf b7       	in	r28, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	11 dd       	rcall	.-1502   	; 0x1ef8 <udd_sleep_mode>
    24d6:	ea ec       	ldi	r30, 0xCA	; 202
    24d8:	f4 e0       	ldi	r31, 0x04	; 4
    24da:	80 e4       	ldi	r24, 0x40	; 64
    24dc:	80 83       	st	Z, r24
    24de:	80 e2       	ldi	r24, 0x20	; 32
    24e0:	80 83       	st	Z, r24
    24e2:	e1 ec       	ldi	r30, 0xC1	; 193
    24e4:	f4 e0       	ldi	r31, 0x04	; 4
    24e6:	80 81       	ld	r24, Z
    24e8:	81 60       	ori	r24, 0x01	; 1
    24ea:	80 83       	st	Z, r24
    24ec:	a9 ec       	ldi	r26, 0xC9	; 201
    24ee:	b4 e0       	ldi	r27, 0x04	; 4
    24f0:	8c 91       	ld	r24, X
    24f2:	82 60       	ori	r24, 0x02	; 2
    24f4:	8c 93       	st	X, r24
    24f6:	e8 ec       	ldi	r30, 0xC8	; 200
    24f8:	f4 e0       	ldi	r31, 0x04	; 4
    24fa:	80 81       	ld	r24, Z
    24fc:	80 64       	ori	r24, 0x40	; 64
    24fe:	80 83       	st	Z, r24
    2500:	8c 91       	ld	r24, X
    2502:	81 60       	ori	r24, 0x01	; 1
    2504:	8c 93       	st	X, r24
    2506:	80 81       	ld	r24, Z
    2508:	80 68       	ori	r24, 0x80	; 128
    250a:	80 83       	st	Z, r24
    250c:	cf bf       	out	0x3f, r28	; 63
    250e:	cf 91       	pop	r28
    2510:	08 95       	ret

00002512 <udd_enable>:
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	c0 e6       	ldi	r28, 0x60	; 96
    2518:	d0 e0       	ldi	r29, 0x00	; 0
    251a:	18 82       	st	Y, r1
    251c:	80 e3       	ldi	r24, 0x30	; 48
    251e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <sysclk_enable_usb>
    2522:	e0 ec       	ldi	r30, 0xC0	; 192
    2524:	f4 e0       	ldi	r31, 0x04	; 4
    2526:	80 81       	ld	r24, Z
    2528:	80 64       	ori	r24, 0x40	; 64
    252a:	80 83       	st	Z, r24
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	88 83       	st	Y, r24
    2530:	cf b7       	in	r28, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	fc 01       	movw	r30, r24
    253a:	ee 0f       	add	r30, r30
    253c:	ff 1f       	adc	r31, r31
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	ec 5d       	subi	r30, 0xDC	; 220
    2548:	fd 4d       	sbci	r31, 0xDD	; 221
    254a:	11 8a       	std	Z+17, r1	; 0x11
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	88 30       	cpi	r24, 0x08	; 8
    2550:	91 05       	cpc	r25, r1
    2552:	91 f7       	brne	.-28     	; 0x2538 <udd_enable+0x26>
    2554:	e7 ea       	ldi	r30, 0xA7	; 167
    2556:	f1 e2       	ldi	r31, 0x21	; 33
    2558:	80 81       	ld	r24, Z
    255a:	8e 7f       	andi	r24, 0xFE	; 254
    255c:	80 83       	st	Z, r24
    255e:	e0 eb       	ldi	r30, 0xB0	; 176
    2560:	f1 e2       	ldi	r31, 0x21	; 33
    2562:	80 81       	ld	r24, Z
    2564:	8e 7f       	andi	r24, 0xFE	; 254
    2566:	80 83       	st	Z, r24
    2568:	e9 eb       	ldi	r30, 0xB9	; 185
    256a:	f1 e2       	ldi	r31, 0x21	; 33
    256c:	80 81       	ld	r24, Z
    256e:	8e 7f       	andi	r24, 0xFE	; 254
    2570:	80 83       	st	Z, r24
    2572:	e2 ec       	ldi	r30, 0xC2	; 194
    2574:	f1 e2       	ldi	r31, 0x21	; 33
    2576:	80 81       	ld	r24, Z
    2578:	8e 7f       	andi	r24, 0xFE	; 254
    257a:	80 83       	st	Z, r24
    257c:	eb ec       	ldi	r30, 0xCB	; 203
    257e:	f1 e2       	ldi	r31, 0x21	; 33
    2580:	80 81       	ld	r24, Z
    2582:	8e 7f       	andi	r24, 0xFE	; 254
    2584:	80 83       	st	Z, r24
    2586:	e4 ed       	ldi	r30, 0xD4	; 212
    2588:	f1 e2       	ldi	r31, 0x21	; 33
    258a:	80 81       	ld	r24, Z
    258c:	8e 7f       	andi	r24, 0xFE	; 254
    258e:	80 83       	st	Z, r24
    2590:	6a e1       	ldi	r22, 0x1A	; 26
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	a6 dc       	rcall	.-1716   	; 0x1ee4 <nvm_read_byte>
    2598:	8f 3f       	cpi	r24, 0xFF	; 255
    259a:	19 f0       	breq	.+6      	; 0x25a2 <udd_enable+0x90>
    259c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <udd_enable+0x96>
    25a2:	8f e1       	ldi	r24, 0x1F	; 31
    25a4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    25a8:	6b e1       	ldi	r22, 0x1B	; 27
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	82 e0       	ldi	r24, 0x02	; 2
    25ae:	9a dc       	rcall	.-1740   	; 0x1ee4 <nvm_read_byte>
    25b0:	8f 3f       	cpi	r24, 0xFF	; 255
    25b2:	19 f0       	breq	.+6      	; 0x25ba <udd_enable+0xa8>
    25b4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <udd_enable+0xae>
    25ba:	8f e1       	ldi	r24, 0x1F	; 31
    25bc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    25c0:	e0 ec       	ldi	r30, 0xC0	; 192
    25c2:	f4 e0       	ldi	r31, 0x04	; 4
    25c4:	80 81       	ld	r24, Z
    25c6:	83 60       	ori	r24, 0x03	; 3
    25c8:	80 83       	st	Z, r24
    25ca:	80 81       	ld	r24, Z
    25cc:	80 68       	ori	r24, 0x80	; 128
    25ce:	80 83       	st	Z, r24
    25d0:	80 81       	ld	r24, Z
    25d2:	80 61       	ori	r24, 0x10	; 16
    25d4:	80 83       	st	Z, r24
    25d6:	84 e3       	ldi	r24, 0x34	; 52
    25d8:	92 e2       	ldi	r25, 0x22	; 34
    25da:	86 83       	std	Z+6, r24	; 0x06
    25dc:	97 83       	std	Z+7, r25	; 0x07
    25de:	80 81       	ld	r24, Z
    25e0:	80 62       	ori	r24, 0x20	; 32
    25e2:	80 83       	st	Z, r24
    25e4:	8f ef       	ldi	r24, 0xFF	; 255
    25e6:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    25ea:	e8 ec       	ldi	r30, 0xC8	; 200
    25ec:	f4 e0       	ldi	r31, 0x04	; 4
    25ee:	80 81       	ld	r24, Z
    25f0:	82 60       	ori	r24, 0x02	; 2
    25f2:	80 83       	st	Z, r24
    25f4:	10 92 78 22 	sts	0x2278, r1	; 0x802278 <udd_b_idle>
    25f8:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <sleepmgr_locks+0x5>
    25fc:	8f 3f       	cpi	r24, 0xFF	; 255
    25fe:	09 f4       	brne	.+2      	; 0x2602 <udd_enable+0xf0>
    2600:	ff cf       	rjmp	.-2      	; 0x2600 <udd_enable+0xee>
    2602:	9f b7       	in	r25, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	ea e8       	ldi	r30, 0x8A	; 138
    2608:	fe e2       	ldi	r31, 0x2E	; 46
    260a:	85 81       	ldd	r24, Z+5	; 0x05
    260c:	8f 5f       	subi	r24, 0xFF	; 255
    260e:	85 83       	std	Z+5, r24	; 0x05
    2610:	9f bf       	out	0x3f, r25	; 63
    2612:	5c df       	rcall	.-328    	; 0x24cc <udd_attach>
    2614:	cf bf       	out	0x3f, r28	; 63
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <udd_set_address>:
    261c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2620:	08 95       	ret

00002622 <udd_getaddress>:
    2622:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2626:	08 95       	ret

00002628 <udd_set_setup_payload>:
    2628:	ec e9       	ldi	r30, 0x9C	; 156
    262a:	f4 e2       	ldi	r31, 0x24	; 36
    262c:	80 87       	std	Z+8, r24	; 0x08
    262e:	91 87       	std	Z+9, r25	; 0x09
    2630:	62 87       	std	Z+10, r22	; 0x0a
    2632:	73 87       	std	Z+11, r23	; 0x0b
    2634:	08 95       	ret

00002636 <udd_ep_alloc>:
    2636:	28 2f       	mov	r18, r24
    2638:	2f 70       	andi	r18, 0x0F	; 15
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	22 0f       	add	r18, r18
    263e:	33 1f       	adc	r19, r19
    2640:	08 2e       	mov	r0, r24
    2642:	00 0c       	add	r0, r0
    2644:	99 0b       	sbc	r25, r25
    2646:	88 27       	eor	r24, r24
    2648:	99 0f       	add	r25, r25
    264a:	88 1f       	adc	r24, r24
    264c:	99 27       	eor	r25, r25
    264e:	82 0f       	add	r24, r18
    2650:	93 1f       	adc	r25, r19
    2652:	fc 01       	movw	r30, r24
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	ee 0f       	add	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	ec 5d       	subi	r30, 0xDC	; 220
    2662:	fd 4d       	sbci	r31, 0xDD	; 221
    2664:	21 89       	ldd	r18, Z+17	; 0x11
    2666:	20 7c       	andi	r18, 0xC0	; 192
    2668:	09 f0       	breq	.+2      	; 0x266c <udd_ep_alloc+0x36>
    266a:	58 c0       	rjmp	.+176    	; 0x271c <udd_ep_alloc+0xe6>
    266c:	63 70       	andi	r22, 0x03	; 3
    266e:	61 30       	cpi	r22, 0x01	; 1
    2670:	11 f0       	breq	.+4      	; 0x2676 <udd_ep_alloc+0x40>
    2672:	18 f4       	brcc	.+6      	; 0x267a <udd_ep_alloc+0x44>
    2674:	04 c0       	rjmp	.+8      	; 0x267e <udd_ep_alloc+0x48>
    2676:	20 ec       	ldi	r18, 0xC0	; 192
    2678:	03 c0       	rjmp	.+6      	; 0x2680 <udd_ep_alloc+0x4a>
    267a:	20 e8       	ldi	r18, 0x80	; 128
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <udd_ep_alloc+0x4a>
    267e:	20 e4       	ldi	r18, 0x40	; 64
    2680:	40 38       	cpi	r20, 0x80	; 128
    2682:	51 05       	cpc	r21, r1
    2684:	e9 f0       	breq	.+58     	; 0x26c0 <udd_ep_alloc+0x8a>
    2686:	50 f4       	brcc	.+20     	; 0x269c <udd_ep_alloc+0x66>
    2688:	40 32       	cpi	r20, 0x20	; 32
    268a:	51 05       	cpc	r21, r1
    268c:	a9 f0       	breq	.+42     	; 0x26b8 <udd_ep_alloc+0x82>
    268e:	40 34       	cpi	r20, 0x40	; 64
    2690:	51 05       	cpc	r21, r1
    2692:	a1 f0       	breq	.+40     	; 0x26bc <udd_ep_alloc+0x86>
    2694:	40 31       	cpi	r20, 0x10	; 16
    2696:	51 05       	cpc	r21, r1
    2698:	d9 f4       	brne	.+54     	; 0x26d0 <udd_ep_alloc+0x9a>
    269a:	0c c0       	rjmp	.+24     	; 0x26b4 <udd_ep_alloc+0x7e>
    269c:	41 15       	cp	r20, r1
    269e:	32 e0       	ldi	r19, 0x02	; 2
    26a0:	53 07       	cpc	r21, r19
    26a2:	91 f0       	breq	.+36     	; 0x26c8 <udd_ep_alloc+0x92>
    26a4:	4f 3f       	cpi	r20, 0xFF	; 255
    26a6:	33 e0       	ldi	r19, 0x03	; 3
    26a8:	53 07       	cpc	r21, r19
    26aa:	81 f0       	breq	.+32     	; 0x26cc <udd_ep_alloc+0x96>
    26ac:	41 15       	cp	r20, r1
    26ae:	51 40       	sbci	r21, 0x01	; 1
    26b0:	79 f4       	brne	.+30     	; 0x26d0 <udd_ep_alloc+0x9a>
    26b2:	08 c0       	rjmp	.+16     	; 0x26c4 <udd_ep_alloc+0x8e>
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	0d c0       	rjmp	.+26     	; 0x26d2 <udd_ep_alloc+0x9c>
    26b8:	42 e0       	ldi	r20, 0x02	; 2
    26ba:	0b c0       	rjmp	.+22     	; 0x26d2 <udd_ep_alloc+0x9c>
    26bc:	43 e0       	ldi	r20, 0x03	; 3
    26be:	09 c0       	rjmp	.+18     	; 0x26d2 <udd_ep_alloc+0x9c>
    26c0:	44 e0       	ldi	r20, 0x04	; 4
    26c2:	07 c0       	rjmp	.+14     	; 0x26d2 <udd_ep_alloc+0x9c>
    26c4:	45 e0       	ldi	r20, 0x05	; 5
    26c6:	05 c0       	rjmp	.+10     	; 0x26d2 <udd_ep_alloc+0x9c>
    26c8:	46 e0       	ldi	r20, 0x06	; 6
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <udd_ep_alloc+0x9c>
    26cc:	47 e0       	ldi	r20, 0x07	; 7
    26ce:	01 c0       	rjmp	.+2      	; 0x26d2 <udd_ep_alloc+0x9c>
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	fc 01       	movw	r30, r24
    26d4:	ee 0f       	add	r30, r30
    26d6:	ff 1f       	adc	r31, r31
    26d8:	ee 0f       	add	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	ee 0f       	add	r30, r30
    26de:	ff 1f       	adc	r31, r31
    26e0:	ec 5d       	subi	r30, 0xDC	; 220
    26e2:	fd 4d       	sbci	r31, 0xDD	; 221
    26e4:	11 8a       	std	Z+17, r1	; 0x11
    26e6:	dc 01       	movw	r26, r24
    26e8:	aa 0f       	add	r26, r26
    26ea:	bb 1f       	adc	r27, r27
    26ec:	aa 0f       	add	r26, r26
    26ee:	bb 1f       	adc	r27, r27
    26f0:	aa 0f       	add	r26, r26
    26f2:	bb 1f       	adc	r27, r27
    26f4:	ac 5c       	subi	r26, 0xCC	; 204
    26f6:	bd 4d       	sbci	r27, 0xDD	; 221
    26f8:	36 e0       	ldi	r19, 0x06	; 6
    26fa:	3c 93       	st	X, r19
    26fc:	24 2b       	or	r18, r20
    26fe:	21 8b       	std	Z+17, r18	; 0x11
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	fc 01       	movw	r30, r24
    270e:	ec 5d       	subi	r30, 0xDC	; 220
    2710:	fd 4d       	sbci	r31, 0xDD	; 221
    2712:	81 89       	ldd	r24, Z+17	; 0x11
    2714:	80 62       	ori	r24, 0x20	; 32
    2716:	81 8b       	std	Z+17, r24	; 0x11
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	08 95       	ret
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	08 95       	ret

00002720 <udd_ep_is_halted>:
    2720:	e8 2f       	mov	r30, r24
    2722:	ef 70       	andi	r30, 0x0F	; 15
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	08 2e       	mov	r0, r24
    272c:	00 0c       	add	r0, r0
    272e:	99 0b       	sbc	r25, r25
    2730:	88 27       	eor	r24, r24
    2732:	99 0f       	add	r25, r25
    2734:	88 1f       	adc	r24, r24
    2736:	99 27       	eor	r25, r25
    2738:	e8 0f       	add	r30, r24
    273a:	f9 1f       	adc	r31, r25
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	ee 0f       	add	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	ee 0f       	add	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	ec 5d       	subi	r30, 0xDC	; 220
    274a:	fd 4d       	sbci	r31, 0xDD	; 221
    274c:	81 89       	ldd	r24, Z+17	; 0x11
    274e:	82 fb       	bst	r24, 2
    2750:	88 27       	eor	r24, r24
    2752:	80 f9       	bld	r24, 0
    2754:	08 95       	ret

00002756 <udd_ep_clear_halt>:
    2756:	28 2f       	mov	r18, r24
    2758:	2f 70       	andi	r18, 0x0F	; 15
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	a9 01       	movw	r20, r18
    275e:	44 0f       	add	r20, r20
    2760:	55 1f       	adc	r21, r21
    2762:	28 2f       	mov	r18, r24
    2764:	08 2e       	mov	r0, r24
    2766:	00 0c       	add	r0, r0
    2768:	33 0b       	sbc	r19, r19
    276a:	22 27       	eor	r18, r18
    276c:	33 0f       	add	r19, r19
    276e:	22 1f       	adc	r18, r18
    2770:	33 27       	eor	r19, r19
    2772:	24 0f       	add	r18, r20
    2774:	35 1f       	adc	r19, r21
    2776:	f9 01       	movw	r30, r18
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	ee 0f       	add	r30, r30
    277e:	ff 1f       	adc	r31, r31
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	ec 5d       	subi	r30, 0xDC	; 220
    2786:	fd 4d       	sbci	r31, 0xDD	; 221
    2788:	91 89       	ldd	r25, Z+17	; 0x11
    278a:	92 ff       	sbrs	r25, 2
    278c:	17 c0       	rjmp	.+46     	; 0x27bc <udd_ep_clear_halt+0x66>
    278e:	22 0f       	add	r18, r18
    2790:	33 1f       	adc	r19, r19
    2792:	22 0f       	add	r18, r18
    2794:	33 1f       	adc	r19, r19
    2796:	22 0f       	add	r18, r18
    2798:	33 1f       	adc	r19, r19
    279a:	f9 01       	movw	r30, r18
    279c:	ec 5d       	subi	r30, 0xDC	; 220
    279e:	fd 4d       	sbci	r31, 0xDD	; 221
    27a0:	91 89       	ldd	r25, Z+17	; 0x11
    27a2:	9b 7f       	andi	r25, 0xFB	; 251
    27a4:	91 8b       	std	Z+17, r25	; 0x11
    27a6:	ae dc       	rcall	.-1700   	; 0x2104 <udd_ep_get_job>
    27a8:	fc 01       	movw	r30, r24
    27aa:	80 81       	ld	r24, Z
    27ac:	80 ff       	sbrs	r24, 0
    27ae:	06 c0       	rjmp	.+12     	; 0x27bc <udd_ep_clear_halt+0x66>
    27b0:	8e 7f       	andi	r24, 0xFE	; 254
    27b2:	80 83       	st	Z, r24
    27b4:	07 80       	ldd	r0, Z+7	; 0x07
    27b6:	f0 85       	ldd	r31, Z+8	; 0x08
    27b8:	e0 2d       	mov	r30, r0
    27ba:	09 95       	icall
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	08 95       	ret

000027c0 <udd_ep_run>:
    27c0:	7f 92       	push	r7
    27c2:	8f 92       	push	r8
    27c4:	9f 92       	push	r9
    27c6:	af 92       	push	r10
    27c8:	bf 92       	push	r11
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	98 2e       	mov	r9, r24
    27dc:	86 2e       	mov	r8, r22
    27de:	6a 01       	movw	r12, r20
    27e0:	79 01       	movw	r14, r18
    27e2:	90 dc       	rcall	.-1760   	; 0x2104 <udd_ep_get_job>
    27e4:	5c 01       	movw	r10, r24
    27e6:	79 2c       	mov	r7, r9
    27e8:	77 1c       	adc	r7, r7
    27ea:	77 24       	eor	r7, r7
    27ec:	77 1c       	adc	r7, r7
    27ee:	c9 2d       	mov	r28, r9
    27f0:	cf 70       	andi	r28, 0x0F	; 15
    27f2:	d0 e0       	ldi	r29, 0x00	; 0
    27f4:	cc 0f       	add	r28, r28
    27f6:	dd 1f       	adc	r29, r29
    27f8:	c7 0d       	add	r28, r7
    27fa:	d1 1d       	adc	r29, r1
    27fc:	fe 01       	movw	r30, r28
    27fe:	ee 0f       	add	r30, r30
    2800:	ff 1f       	adc	r31, r31
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	ec 5d       	subi	r30, 0xDC	; 220
    280c:	fd 4d       	sbci	r31, 0xDD	; 221
    280e:	81 89       	ldd	r24, Z+17	; 0x11
    2810:	80 7c       	andi	r24, 0xC0	; 192
    2812:	09 f4       	brne	.+2      	; 0x2816 <udd_ep_run+0x56>
    2814:	7d c0       	rjmp	.+250    	; 0x2910 <udd_ep_run+0x150>
    2816:	fe 01       	movw	r30, r28
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	ee 0f       	add	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	ee 0f       	add	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	ec 5d       	subi	r30, 0xDC	; 220
    2826:	fd 4d       	sbci	r31, 0xDD	; 221
    2828:	81 89       	ldd	r24, Z+17	; 0x11
    282a:	80 7c       	andi	r24, 0xC0	; 192
    282c:	80 3c       	cpi	r24, 0xC0	; 192
    282e:	61 f0       	breq	.+24     	; 0x2848 <udd_ep_run+0x88>
    2830:	fe 01       	movw	r30, r28
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	ee 0f       	add	r30, r30
    283c:	ff 1f       	adc	r31, r31
    283e:	ec 5d       	subi	r30, 0xDC	; 220
    2840:	fd 4d       	sbci	r31, 0xDD	; 221
    2842:	81 89       	ldd	r24, Z+17	; 0x11
    2844:	82 fd       	sbrc	r24, 2
    2846:	66 c0       	rjmp	.+204    	; 0x2914 <udd_ep_run+0x154>
    2848:	8f b7       	in	r24, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	f5 01       	movw	r30, r10
    284e:	90 81       	ld	r25, Z
    2850:	90 ff       	sbrs	r25, 0
    2852:	03 c0       	rjmp	.+6      	; 0x285a <udd_ep_run+0x9a>
    2854:	8f bf       	out	0x3f, r24	; 63
    2856:	71 2c       	mov	r7, r1
    2858:	5e c0       	rjmp	.+188    	; 0x2916 <udd_ep_run+0x156>
    285a:	f5 01       	movw	r30, r10
    285c:	90 81       	ld	r25, Z
    285e:	91 60       	ori	r25, 0x01	; 1
    2860:	90 83       	st	Z, r25
    2862:	8f bf       	out	0x3f, r24	; 63
    2864:	c1 82       	std	Z+1, r12	; 0x01
    2866:	d2 82       	std	Z+2, r13	; 0x02
    2868:	e3 82       	std	Z+3, r14	; 0x03
    286a:	f4 82       	std	Z+4, r15	; 0x04
    286c:	15 82       	std	Z+5, r1	; 0x05
    286e:	16 82       	std	Z+6, r1	; 0x06
    2870:	07 83       	std	Z+7, r16	; 0x07
    2872:	10 87       	std	Z+8, r17	; 0x08
    2874:	81 10       	cpse	r8, r1
    2876:	06 c0       	rjmp	.+12     	; 0x2884 <udd_ep_run+0xc4>
    2878:	91 e0       	ldi	r25, 0x01	; 1
    287a:	e1 14       	cp	r14, r1
    287c:	f1 04       	cpc	r15, r1
    287e:	19 f0       	breq	.+6      	; 0x2886 <udd_ep_run+0xc6>
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <udd_ep_run+0xc6>
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	f5 01       	movw	r30, r10
    2888:	80 81       	ld	r24, Z
    288a:	90 fb       	bst	r25, 0
    288c:	81 f9       	bld	r24, 1
    288e:	8b 7f       	andi	r24, 0xFB	; 251
    2890:	80 83       	st	Z, r24
    2892:	77 20       	and	r7, r7
    2894:	59 f0       	breq	.+22     	; 0x28ac <udd_ep_run+0xec>
    2896:	cc 0f       	add	r28, r28
    2898:	dd 1f       	adc	r29, r29
    289a:	cc 0f       	add	r28, r28
    289c:	dd 1f       	adc	r29, r29
    289e:	cc 0f       	add	r28, r28
    28a0:	dd 1f       	adc	r29, r29
    28a2:	cc 5d       	subi	r28, 0xDC	; 220
    28a4:	dd 4d       	sbci	r29, 0xDD	; 221
    28a6:	1e 8a       	std	Y+22, r1	; 0x16
    28a8:	1f 8a       	std	Y+23, r1	; 0x17
    28aa:	2d c0       	rjmp	.+90     	; 0x2906 <udd_ep_run+0x146>
    28ac:	fe 01       	movw	r30, r28
    28ae:	ee 0f       	add	r30, r30
    28b0:	ff 1f       	adc	r31, r31
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	ec 5d       	subi	r30, 0xDC	; 220
    28bc:	fd 4d       	sbci	r31, 0xDD	; 221
    28be:	81 89       	ldd	r24, Z+17	; 0x11
    28c0:	80 7c       	andi	r24, 0xC0	; 192
    28c2:	80 3c       	cpi	r24, 0xC0	; 192
    28c4:	a1 f4       	brne	.+40     	; 0x28ee <udd_ep_run+0x12e>
    28c6:	ce 01       	movw	r24, r28
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	88 0f       	add	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	8c 5c       	subi	r24, 0xCC	; 204
    28d6:	9d 4d       	sbci	r25, 0xDD	; 221
    28d8:	ef db       	rcall	.-2082   	; 0x20b8 <udd_ep_get_size>
    28da:	bc 01       	movw	r22, r24
    28dc:	c7 01       	movw	r24, r14
    28de:	60 d2       	rcall	.+1216   	; 0x2da0 <__udivmodhi4>
    28e0:	89 2b       	or	r24, r25
    28e2:	29 f0       	breq	.+10     	; 0x28ee <udd_ep_run+0x12e>
    28e4:	f5 01       	movw	r30, r10
    28e6:	80 81       	ld	r24, Z
    28e8:	8e 7f       	andi	r24, 0xFE	; 254
    28ea:	80 83       	st	Z, r24
    28ec:	14 c0       	rjmp	.+40     	; 0x2916 <udd_ep_run+0x156>
    28ee:	cc 0f       	add	r28, r28
    28f0:	dd 1f       	adc	r29, r29
    28f2:	cc 0f       	add	r28, r28
    28f4:	dd 1f       	adc	r29, r29
    28f6:	cc 0f       	add	r28, r28
    28f8:	dd 1f       	adc	r29, r29
    28fa:	cc 5d       	subi	r28, 0xDC	; 220
    28fc:	dd 4d       	sbci	r29, 0xDD	; 221
    28fe:	1a 8a       	std	Y+18, r1	; 0x12
    2900:	1b 8a       	std	Y+19, r1	; 0x13
    2902:	1e 8a       	std	Y+22, r1	; 0x16
    2904:	1f 8a       	std	Y+23, r1	; 0x17
    2906:	89 2d       	mov	r24, r9
    2908:	87 dc       	rcall	.-1778   	; 0x2218 <udd_ep_trans_complet>
    290a:	77 24       	eor	r7, r7
    290c:	73 94       	inc	r7
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <udd_ep_run+0x156>
    2910:	71 2c       	mov	r7, r1
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <udd_ep_run+0x156>
    2914:	71 2c       	mov	r7, r1
    2916:	87 2d       	mov	r24, r7
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	cf 90       	pop	r12
    2928:	bf 90       	pop	r11
    292a:	af 90       	pop	r10
    292c:	9f 90       	pop	r9
    292e:	8f 90       	pop	r8
    2930:	7f 90       	pop	r7
    2932:	08 95       	ret

00002934 <udd_ep_abort>:
    2934:	ff 92       	push	r15
    2936:	0f 93       	push	r16
    2938:	1f 93       	push	r17
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	18 2f       	mov	r17, r24
    2940:	f8 2e       	mov	r15, r24
    2942:	ff 1c       	adc	r15, r15
    2944:	ff 24       	eor	r15, r15
    2946:	ff 1c       	adc	r15, r15
    2948:	c8 2f       	mov	r28, r24
    294a:	cf 70       	andi	r28, 0x0F	; 15
    294c:	d0 e0       	ldi	r29, 0x00	; 0
    294e:	cc 0f       	add	r28, r28
    2950:	dd 1f       	adc	r29, r29
    2952:	cf 0d       	add	r28, r15
    2954:	d1 1d       	adc	r29, r1
    2956:	d6 db       	rcall	.-2132   	; 0x2104 <udd_ep_get_job>
    2958:	dc 01       	movw	r26, r24
    295a:	fe 01       	movw	r30, r28
    295c:	ee 0f       	add	r30, r30
    295e:	ff 1f       	adc	r31, r31
    2960:	ee 0f       	add	r30, r30
    2962:	ff 1f       	adc	r31, r31
    2964:	ee 0f       	add	r30, r30
    2966:	ff 1f       	adc	r31, r31
    2968:	ec 5c       	subi	r30, 0xCC	; 204
    296a:	fd 4d       	sbci	r31, 0xDD	; 221
    296c:	02 e0       	ldi	r16, 0x02	; 2
    296e:	05 93       	las	Z, r16
    2970:	8c 91       	ld	r24, X
    2972:	80 ff       	sbrs	r24, 0
    2974:	22 c0       	rjmp	.+68     	; 0x29ba <udd_ep_abort+0x86>
    2976:	8e 7f       	andi	r24, 0xFE	; 254
    2978:	8c 93       	st	X, r24
    297a:	17 96       	adiw	r26, 0x07	; 7
    297c:	ed 91       	ld	r30, X+
    297e:	fc 91       	ld	r31, X
    2980:	18 97       	sbiw	r26, 0x08	; 8
    2982:	30 97       	sbiw	r30, 0x00	; 0
    2984:	d1 f0       	breq	.+52     	; 0x29ba <udd_ep_abort+0x86>
    2986:	ff 20       	and	r15, r15
    2988:	59 f0       	breq	.+22     	; 0x29a0 <udd_ep_abort+0x6c>
    298a:	cc 0f       	add	r28, r28
    298c:	dd 1f       	adc	r29, r29
    298e:	cc 0f       	add	r28, r28
    2990:	dd 1f       	adc	r29, r29
    2992:	cc 0f       	add	r28, r28
    2994:	dd 1f       	adc	r29, r29
    2996:	cc 5d       	subi	r28, 0xDC	; 220
    2998:	dd 4d       	sbci	r29, 0xDD	; 221
    299a:	6e 89       	ldd	r22, Y+22	; 0x16
    299c:	7f 89       	ldd	r23, Y+23	; 0x17
    299e:	0a c0       	rjmp	.+20     	; 0x29b4 <udd_ep_abort+0x80>
    29a0:	cc 0f       	add	r28, r28
    29a2:	dd 1f       	adc	r29, r29
    29a4:	cc 0f       	add	r28, r28
    29a6:	dd 1f       	adc	r29, r29
    29a8:	cc 0f       	add	r28, r28
    29aa:	dd 1f       	adc	r29, r29
    29ac:	cc 5d       	subi	r28, 0xDC	; 220
    29ae:	dd 4d       	sbci	r29, 0xDD	; 221
    29b0:	6a 89       	ldd	r22, Y+18	; 0x12
    29b2:	7b 89       	ldd	r23, Y+19	; 0x13
    29b4:	41 2f       	mov	r20, r17
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	09 95       	icall
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	ff 90       	pop	r15
    29c4:	08 95       	ret

000029c6 <udd_ep_free>:
    29c6:	cf 93       	push	r28
    29c8:	c8 2f       	mov	r28, r24
    29ca:	b4 df       	rcall	.-152    	; 0x2934 <udd_ep_abort>
    29cc:	ec 2f       	mov	r30, r28
    29ce:	ef 70       	andi	r30, 0x0F	; 15
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	ee 0f       	add	r30, r30
    29d4:	ff 1f       	adc	r31, r31
    29d6:	8c 2f       	mov	r24, r28
    29d8:	cc 0f       	add	r28, r28
    29da:	99 0b       	sbc	r25, r25
    29dc:	88 27       	eor	r24, r24
    29de:	99 0f       	add	r25, r25
    29e0:	88 1f       	adc	r24, r24
    29e2:	99 27       	eor	r25, r25
    29e4:	e8 0f       	add	r30, r24
    29e6:	f9 1f       	adc	r31, r25
    29e8:	ee 0f       	add	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	ee 0f       	add	r30, r30
    29ee:	ff 1f       	adc	r31, r31
    29f0:	ee 0f       	add	r30, r30
    29f2:	ff 1f       	adc	r31, r31
    29f4:	ec 5d       	subi	r30, 0xDC	; 220
    29f6:	fd 4d       	sbci	r31, 0xDD	; 221
    29f8:	11 8a       	std	Z+17, r1	; 0x11
    29fa:	cf 91       	pop	r28
    29fc:	08 95       	ret

000029fe <udd_ep_set_halt>:
    29fe:	0f 93       	push	r16
    2a00:	e8 2f       	mov	r30, r24
    2a02:	ef 70       	andi	r30, 0x0F	; 15
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	ee 0f       	add	r30, r30
    2a08:	ff 1f       	adc	r31, r31
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	08 2e       	mov	r0, r24
    2a0e:	00 0c       	add	r0, r0
    2a10:	33 0b       	sbc	r19, r19
    2a12:	22 27       	eor	r18, r18
    2a14:	33 0f       	add	r19, r19
    2a16:	22 1f       	adc	r18, r18
    2a18:	33 27       	eor	r19, r19
    2a1a:	e2 0f       	add	r30, r18
    2a1c:	f3 1f       	adc	r31, r19
    2a1e:	df 01       	movw	r26, r30
    2a20:	aa 0f       	add	r26, r26
    2a22:	bb 1f       	adc	r27, r27
    2a24:	aa 0f       	add	r26, r26
    2a26:	bb 1f       	adc	r27, r27
    2a28:	aa 0f       	add	r26, r26
    2a2a:	bb 1f       	adc	r27, r27
    2a2c:	ac 5d       	subi	r26, 0xDC	; 220
    2a2e:	bd 4d       	sbci	r27, 0xDD	; 221
    2a30:	51 96       	adiw	r26, 0x11	; 17
    2a32:	9c 91       	ld	r25, X
    2a34:	51 97       	sbiw	r26, 0x11	; 17
    2a36:	94 60       	ori	r25, 0x04	; 4
    2a38:	51 96       	adiw	r26, 0x11	; 17
    2a3a:	9c 93       	st	X, r25
    2a3c:	ee 0f       	add	r30, r30
    2a3e:	ff 1f       	adc	r31, r31
    2a40:	ee 0f       	add	r30, r30
    2a42:	ff 1f       	adc	r31, r31
    2a44:	ee 0f       	add	r30, r30
    2a46:	ff 1f       	adc	r31, r31
    2a48:	ec 5c       	subi	r30, 0xCC	; 204
    2a4a:	fd 4d       	sbci	r31, 0xDD	; 221
    2a4c:	01 e0       	ldi	r16, 0x01	; 1
    2a4e:	06 93       	lac	Z, r16
    2a50:	71 df       	rcall	.-286    	; 0x2934 <udd_ep_abort>
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	0f 91       	pop	r16
    2a56:	08 95       	ret

00002a58 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2a58:	1f 92       	push	r1
    2a5a:	0f 92       	push	r0
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	0f 92       	push	r0
    2a60:	11 24       	eor	r1, r1
    2a62:	0f 93       	push	r16
    2a64:	2f 93       	push	r18
    2a66:	3f 93       	push	r19
    2a68:	4f 93       	push	r20
    2a6a:	5f 93       	push	r21
    2a6c:	6f 93       	push	r22
    2a6e:	7f 93       	push	r23
    2a70:	8f 93       	push	r24
    2a72:	9f 93       	push	r25
    2a74:	af 93       	push	r26
    2a76:	bf 93       	push	r27
    2a78:	ef 93       	push	r30
    2a7a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2a7c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a80:	88 23       	and	r24, r24
    2a82:	44 f4       	brge	.+16     	; 0x2a94 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2a84:	80 e8       	ldi	r24, 0x80	; 128
    2a86:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2a8a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2a8e:	0e 94 17 04 	call	0x82e	; 0x82e <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a92:	8a c0       	rjmp	.+276    	; 0x2ba8 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2a94:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a98:	82 ff       	sbrs	r24, 2
    2a9a:	20 c0       	rjmp	.+64     	; 0x2adc <__vector_125+0x84>
		udd_ack_underflow_event();
    2a9c:	84 e0       	ldi	r24, 0x04	; 4
    2a9e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2aa2:	80 91 3c 22 	lds	r24, 0x223C	; 0x80223c <udd_sram+0x18>
    2aa6:	86 ff       	sbrs	r24, 6
    2aa8:	7f c0       	rjmp	.+254    	; 0x2ba8 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2aaa:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2aae:	81 fd       	sbrc	r24, 1
    2ab0:	7b c0       	rjmp	.+246    	; 0x2ba8 <__vector_125+0x150>
    2ab2:	43 db       	rcall	.-2426   	; 0x213a <udd_ctrl_interrupt_tc_setup>
    2ab4:	81 11       	cpse	r24, r1
    2ab6:	78 c0       	rjmp	.+240    	; 0x2ba8 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2ab8:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2abc:	81 30       	cpi	r24, 0x01	; 1
    2abe:	11 f4       	brne	.+4      	; 0x2ac4 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2ac0:	79 da       	rcall	.-2830   	; 0x1fb4 <udd_ctrl_send_zlp_in>
    2ac2:	72 c0       	rjmp	.+228    	; 0x2ba8 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2ac4:	84 30       	cpi	r24, 0x04	; 4
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <__vector_125+0x72>
    2ac8:	6f c0       	rjmp	.+222    	; 0x2ba8 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2aca:	ed e3       	ldi	r30, 0x3D	; 61
    2acc:	f2 e2       	ldi	r31, 0x22	; 34
    2ace:	04 e0       	ldi	r16, 0x04	; 4
    2ad0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2ad2:	e5 e3       	ldi	r30, 0x35	; 53
    2ad4:	f2 e2       	ldi	r31, 0x22	; 34
    2ad6:	04 e0       	ldi	r16, 0x04	; 4
    2ad8:	05 93       	las	Z, r16
    2ada:	66 c0       	rjmp	.+204    	; 0x2ba8 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2adc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ae0:	81 ff       	sbrs	r24, 1
    2ae2:	5d c0       	rjmp	.+186    	; 0x2b9e <__vector_125+0x146>
		udd_ack_overflow_event();
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2aea:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <udd_sram+0x10>
    2aee:	86 ff       	sbrs	r24, 6
    2af0:	5b c0       	rjmp	.+182    	; 0x2ba8 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2af2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2af6:	81 fd       	sbrc	r24, 1
    2af8:	57 c0       	rjmp	.+174    	; 0x2ba8 <__vector_125+0x150>
    2afa:	1f db       	rcall	.-2498   	; 0x213a <udd_ctrl_interrupt_tc_setup>
    2afc:	81 11       	cpse	r24, r1
    2afe:	54 c0       	rjmp	.+168    	; 0x2ba8 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2b00:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2b04:	82 30       	cpi	r24, 0x02	; 2
    2b06:	41 f4       	brne	.+16     	; 0x2b18 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2b08:	84 e0       	ldi	r24, 0x04	; 4
    2b0a:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2b0e:	e4 e3       	ldi	r30, 0x34	; 52
    2b10:	f2 e2       	ldi	r31, 0x22	; 34
    2b12:	02 e0       	ldi	r16, 0x02	; 2
    2b14:	06 93       	lac	Z, r16
    2b16:	48 c0       	rjmp	.+144    	; 0x2ba8 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2b18:	83 30       	cpi	r24, 0x03	; 3
    2b1a:	09 f0       	breq	.+2      	; 0x2b1e <__vector_125+0xc6>
    2b1c:	45 c0       	rjmp	.+138    	; 0x2ba8 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2b1e:	ed e3       	ldi	r30, 0x3D	; 61
    2b20:	f2 e2       	ldi	r31, 0x22	; 34
    2b22:	04 e0       	ldi	r16, 0x04	; 4
    2b24:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b26:	e5 e3       	ldi	r30, 0x35	; 53
    2b28:	f2 e2       	ldi	r31, 0x22	; 34
    2b2a:	04 e0       	ldi	r16, 0x04	; 4
    2b2c:	05 93       	las	Z, r16
    2b2e:	3c c0       	rjmp	.+120    	; 0x2ba8 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2b30:	80 e1       	ldi	r24, 0x10	; 16
    2b32:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	fd de       	rcall	.-518    	; 0x2934 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b3a:	81 e8       	ldi	r24, 0x81	; 129
    2b3c:	fb de       	rcall	.-522    	; 0x2934 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	f9 de       	rcall	.-526    	; 0x2934 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b42:	82 e8       	ldi	r24, 0x82	; 130
    2b44:	f7 de       	rcall	.-530    	; 0x2934 <udd_ep_abort>
		}
#endif
		udc_reset();
    2b46:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2b4a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b4e:	e4 e2       	ldi	r30, 0x24	; 36
    2b50:	f2 e2       	ldi	r31, 0x22	; 34
    2b52:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2b54:	96 e0       	ldi	r25, 0x06	; 6
    2b56:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b58:	83 e4       	ldi	r24, 0x43	; 67
    2b5a:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b5c:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    2b5e:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b60:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2b62:	8d ed       	ldi	r24, 0xDD	; 221
    2b64:	91 e2       	ldi	r25, 0x21	; 33
    2b66:	84 8b       	std	Z+20, r24	; 0x14
    2b68:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2b6a:	ef d9       	rcall	.-3106   	; 0x1f4a <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2b6c:	1d c0       	rjmp	.+58     	; 0x2ba8 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2b6e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b72:	86 ff       	sbrs	r24, 6
    2b74:	08 c0       	rjmp	.+16     	; 0x2b86 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2b76:	80 e4       	ldi	r24, 0x40	; 64
    2b78:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	bc d9       	rcall	.-3208   	; 0x1ef8 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2b80:	0e 94 15 04 	call	0x82a	; 0x82a <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b84:	11 c0       	rjmp	.+34     	; 0x2ba8 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2b86:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b8a:	85 ff       	sbrs	r24, 5
    2b8c:	0d c0       	rjmp	.+26     	; 0x2ba8 <__vector_125+0x150>
		udd_ack_resume_event();
    2b8e:	80 e2       	ldi	r24, 0x20	; 32
    2b90:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	b0 d9       	rcall	.-3232   	; 0x1ef8 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2b98:	0e 94 16 04 	call	0x82c	; 0x82c <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b9c:	05 c0       	rjmp	.+10     	; 0x2ba8 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2b9e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ba2:	84 fd       	sbrc	r24, 4
    2ba4:	c5 cf       	rjmp	.-118    	; 0x2b30 <__vector_125+0xd8>
    2ba6:	e3 cf       	rjmp	.-58     	; 0x2b6e <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2ba8:	ff 91       	pop	r31
    2baa:	ef 91       	pop	r30
    2bac:	bf 91       	pop	r27
    2bae:	af 91       	pop	r26
    2bb0:	9f 91       	pop	r25
    2bb2:	8f 91       	pop	r24
    2bb4:	7f 91       	pop	r23
    2bb6:	6f 91       	pop	r22
    2bb8:	5f 91       	pop	r21
    2bba:	4f 91       	pop	r20
    2bbc:	3f 91       	pop	r19
    2bbe:	2f 91       	pop	r18
    2bc0:	0f 91       	pop	r16
    2bc2:	0f 90       	pop	r0
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	0f 90       	pop	r0
    2bc8:	1f 90       	pop	r1
    2bca:	18 95       	reti

00002bcc <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2bcc:	1f 92       	push	r1
    2bce:	0f 92       	push	r0
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	0f 92       	push	r0
    2bd4:	11 24       	eor	r1, r1
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	2f 93       	push	r18
    2bdc:	3f 93       	push	r19
    2bde:	4f 93       	push	r20
    2be0:	5f 93       	push	r21
    2be2:	6f 93       	push	r22
    2be4:	7f 93       	push	r23
    2be6:	8f 93       	push	r24
    2be8:	9f 93       	push	r25
    2bea:	af 93       	push	r26
    2bec:	bf 93       	push	r27
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	ef 93       	push	r30
    2bf4:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2bf6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2bfa:	81 fd       	sbrc	r24, 1
    2bfc:	03 c0       	rjmp	.+6      	; 0x2c04 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2bfe:	9d da       	rcall	.-2758   	; 0x213a <udd_ctrl_interrupt_tc_setup>
    2c00:	81 11       	cpse	r24, r1
    2c02:	b9 c0       	rjmp	.+370    	; 0x2d76 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2c0a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2c0e:	81 95       	neg	r24
    2c10:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2c12:	e4 e3       	ldi	r30, 0x34	; 52
    2c14:	f2 e2       	ldi	r31, 0x22	; 34
    2c16:	e8 1b       	sub	r30, r24
    2c18:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2c1a:	20 81       	ld	r18, Z
    2c1c:	31 81       	ldd	r19, Z+1	; 0x01
    2c1e:	24 53       	subi	r18, 0x34	; 52
    2c20:	32 42       	sbci	r19, 0x22	; 34
    2c22:	36 95       	lsr	r19
    2c24:	27 95       	ror	r18
    2c26:	36 95       	lsr	r19
    2c28:	27 95       	ror	r18
    2c2a:	36 95       	lsr	r19
    2c2c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2c2e:	82 2f       	mov	r24, r18
    2c30:	86 95       	lsr	r24
    2c32:	20 fd       	sbrc	r18, 0
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <__vector_126+0x6e>
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <__vector_126+0x70>
    2c3a:	90 e8       	ldi	r25, 0x80	; 128
    2c3c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c3e:	e8 2f       	mov	r30, r24
    2c40:	ef 70       	andi	r30, 0x0F	; 15
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	ee 0f       	add	r30, r30
    2c46:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2c48:	28 2f       	mov	r18, r24
    2c4a:	08 2e       	mov	r0, r24
    2c4c:	00 0c       	add	r0, r0
    2c4e:	33 0b       	sbc	r19, r19
    2c50:	22 27       	eor	r18, r18
    2c52:	33 0f       	add	r19, r19
    2c54:	22 1f       	adc	r18, r18
    2c56:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c58:	e2 0f       	add	r30, r18
    2c5a:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2c5c:	df 01       	movw	r26, r30
    2c5e:	aa 0f       	add	r26, r26
    2c60:	bb 1f       	adc	r27, r27
    2c62:	aa 0f       	add	r26, r26
    2c64:	bb 1f       	adc	r27, r27
    2c66:	aa 0f       	add	r26, r26
    2c68:	bb 1f       	adc	r27, r27
    2c6a:	ac 5c       	subi	r26, 0xCC	; 204
    2c6c:	bd 4d       	sbci	r27, 0xDD	; 221
    2c6e:	9c 91       	ld	r25, X
    2c70:	95 ff       	sbrs	r25, 5
    2c72:	81 c0       	rjmp	.+258    	; 0x2d76 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2c74:	fd 01       	movw	r30, r26
    2c76:	00 e2       	ldi	r16, 0x20	; 32
    2c78:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2c7a:	81 11       	cpse	r24, r1
    2c7c:	77 c0       	rjmp	.+238    	; 0x2d6c <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c7e:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <udd_ep_control_state>
    2c82:	84 30       	cpi	r24, 0x04	; 4
    2c84:	19 f4       	brne	.+6      	; 0x2c8c <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2c86:	a4 d9       	rcall	.-3256   	; 0x1fd0 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2c88:	60 d9       	rcall	.-3392   	; 0x1f4a <udd_ctrl_init>
    2c8a:	75 c0       	rjmp	.+234    	; 0x2d76 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2c8c:	00 91 36 22 	lds	r16, 0x2236	; 0x802236 <udd_sram+0x12>
    2c90:	10 91 37 22 	lds	r17, 0x2237	; 0x802237 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2c94:	80 91 a6 24 	lds	r24, 0x24A6	; 0x8024a6 <udd_g_ctrlreq+0xa>
    2c98:	90 91 a7 24 	lds	r25, 0x24A7	; 0x8024a7 <udd_g_ctrlreq+0xb>
    2c9c:	c0 91 1d 22 	lds	r28, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    2ca0:	d0 91 1e 22 	lds	r29, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2ca4:	9e 01       	movw	r18, r28
    2ca6:	20 0f       	add	r18, r16
    2ca8:	31 1f       	adc	r19, r17
    2caa:	82 17       	cp	r24, r18
    2cac:	93 07       	cpc	r25, r19
    2cae:	18 f4       	brcc	.+6      	; 0x2cb6 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2cb0:	8c 01       	movw	r16, r24
    2cb2:	0c 1b       	sub	r16, r28
    2cb4:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2cb6:	80 91 a4 24 	lds	r24, 0x24A4	; 0x8024a4 <udd_g_ctrlreq+0x8>
    2cba:	90 91 a5 24 	lds	r25, 0x24A5	; 0x8024a5 <udd_g_ctrlreq+0x9>
    2cbe:	a8 01       	movw	r20, r16
    2cc0:	6d ed       	ldi	r22, 0xDD	; 221
    2cc2:	71 e2       	ldi	r23, 0x21	; 33
    2cc4:	8c 0f       	add	r24, r28
    2cc6:	9d 1f       	adc	r25, r29
    2cc8:	a7 d0       	rcall	.+334    	; 0x2e18 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2cca:	c0 0f       	add	r28, r16
    2ccc:	d1 1f       	adc	r29, r17
    2cce:	c0 93 1d 22 	sts	0x221D, r28	; 0x80221d <udd_ctrl_payload_nb_trans>
    2cd2:	d0 93 1e 22 	sts	0x221E, r29	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2cd6:	00 34       	cpi	r16, 0x40	; 64
    2cd8:	11 05       	cpc	r17, r1
    2cda:	69 f4       	brne	.+26     	; 0x2cf6 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2cdc:	80 91 1f 22 	lds	r24, 0x221F	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2ce0:	90 91 20 22 	lds	r25, 0x2220	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2ce4:	8c 0f       	add	r24, r28
    2ce6:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2ce8:	20 91 a2 24 	lds	r18, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0x6>
    2cec:	30 91 a3 24 	lds	r19, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0x7>
    2cf0:	82 17       	cp	r24, r18
    2cf2:	93 07       	cpc	r25, r19
    2cf4:	80 f0       	brcs	.+32     	; 0x2d16 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2cf6:	ec e9       	ldi	r30, 0x9C	; 156
    2cf8:	f4 e2       	ldi	r31, 0x24	; 36
    2cfa:	c2 87       	std	Z+10, r28	; 0x0a
    2cfc:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2cfe:	06 84       	ldd	r0, Z+14	; 0x0e
    2d00:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d02:	e0 2d       	mov	r30, r0
    2d04:	30 97       	sbiw	r30, 0x00	; 0
    2d06:	29 f0       	breq	.+10     	; 0x2d12 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2d08:	09 95       	icall
    2d0a:	81 11       	cpse	r24, r1
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2d0e:	44 d9       	rcall	.-3448   	; 0x1f98 <udd_ctrl_stall_data>
    2d10:	32 c0       	rjmp	.+100    	; 0x2d76 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2d12:	50 d9       	rcall	.-3424   	; 0x1fb4 <udd_ctrl_send_zlp_in>
    2d14:	30 c0       	rjmp	.+96     	; 0x2d76 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d16:	80 91 a6 24 	lds	r24, 0x24A6	; 0x8024a6 <udd_g_ctrlreq+0xa>
    2d1a:	90 91 a7 24 	lds	r25, 0x24A7	; 0x8024a7 <udd_g_ctrlreq+0xb>
    2d1e:	c8 17       	cp	r28, r24
    2d20:	d9 07       	cpc	r29, r25
    2d22:	f9 f4       	brne	.+62     	; 0x2d62 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2d24:	e0 91 aa 24 	lds	r30, 0x24AA	; 0x8024aa <udd_g_ctrlreq+0xe>
    2d28:	f0 91 ab 24 	lds	r31, 0x24AB	; 0x8024ab <udd_g_ctrlreq+0xf>
    2d2c:	30 97       	sbiw	r30, 0x00	; 0
    2d2e:	11 f4       	brne	.+4      	; 0x2d34 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2d30:	33 d9       	rcall	.-3482   	; 0x1f98 <udd_ctrl_stall_data>
    2d32:	21 c0       	rjmp	.+66     	; 0x2d76 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2d34:	09 95       	icall
    2d36:	81 11       	cpse	r24, r1
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2d3a:	2e d9       	rcall	.-3492   	; 0x1f98 <udd_ctrl_stall_data>
    2d3c:	1c c0       	rjmp	.+56     	; 0x2d76 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2d3e:	20 91 1f 22 	lds	r18, 0x221F	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2d42:	30 91 20 22 	lds	r19, 0x2220	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
    2d46:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <udd_ctrl_payload_nb_trans>
    2d4a:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
    2d4e:	82 0f       	add	r24, r18
    2d50:	93 1f       	adc	r25, r19
    2d52:	80 93 1f 22 	sts	0x221F, r24	; 0x80221f <udd_ctrl_prev_payload_nb_trans>
    2d56:	90 93 20 22 	sts	0x2220, r25	; 0x802220 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2d5a:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <udd_ctrl_payload_nb_trans>
    2d5e:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2d62:	e4 e3       	ldi	r30, 0x34	; 52
    2d64:	f2 e2       	ldi	r31, 0x22	; 34
    2d66:	02 e0       	ldi	r16, 0x02	; 2
    2d68:	06 93       	lac	Z, r16
    2d6a:	05 c0       	rjmp	.+10     	; 0x2d76 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2d6c:	80 38       	cpi	r24, 0x80	; 128
    2d6e:	11 f4       	brne	.+4      	; 0x2d74 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2d70:	37 d9       	rcall	.-3474   	; 0x1fe0 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2d72:	01 c0       	rjmp	.+2      	; 0x2d76 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2d74:	51 da       	rcall	.-2910   	; 0x2218 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2d76:	ff 91       	pop	r31
    2d78:	ef 91       	pop	r30
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	bf 91       	pop	r27
    2d80:	af 91       	pop	r26
    2d82:	9f 91       	pop	r25
    2d84:	8f 91       	pop	r24
    2d86:	7f 91       	pop	r23
    2d88:	6f 91       	pop	r22
    2d8a:	5f 91       	pop	r21
    2d8c:	4f 91       	pop	r20
    2d8e:	3f 91       	pop	r19
    2d90:	2f 91       	pop	r18
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	0f 90       	pop	r0
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	0f 90       	pop	r0
    2d9c:	1f 90       	pop	r1
    2d9e:	18 95       	reti

00002da0 <__udivmodhi4>:
    2da0:	aa 1b       	sub	r26, r26
    2da2:	bb 1b       	sub	r27, r27
    2da4:	51 e1       	ldi	r21, 0x11	; 17
    2da6:	07 c0       	rjmp	.+14     	; 0x2db6 <__udivmodhi4_ep>

00002da8 <__udivmodhi4_loop>:
    2da8:	aa 1f       	adc	r26, r26
    2daa:	bb 1f       	adc	r27, r27
    2dac:	a6 17       	cp	r26, r22
    2dae:	b7 07       	cpc	r27, r23
    2db0:	10 f0       	brcs	.+4      	; 0x2db6 <__udivmodhi4_ep>
    2db2:	a6 1b       	sub	r26, r22
    2db4:	b7 0b       	sbc	r27, r23

00002db6 <__udivmodhi4_ep>:
    2db6:	88 1f       	adc	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	5a 95       	dec	r21
    2dbc:	a9 f7       	brne	.-22     	; 0x2da8 <__udivmodhi4_loop>
    2dbe:	80 95       	com	r24
    2dc0:	90 95       	com	r25
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	08 95       	ret

00002dc8 <__divmodhi4>:
    2dc8:	97 fb       	bst	r25, 7
    2dca:	07 2e       	mov	r0, r23
    2dcc:	16 f4       	brtc	.+4      	; 0x2dd2 <__divmodhi4+0xa>
    2dce:	00 94       	com	r0
    2dd0:	06 d0       	rcall	.+12     	; 0x2dde <__divmodhi4_neg1>
    2dd2:	77 fd       	sbrc	r23, 7
    2dd4:	08 d0       	rcall	.+16     	; 0x2de6 <__divmodhi4_neg2>
    2dd6:	e4 df       	rcall	.-56     	; 0x2da0 <__udivmodhi4>
    2dd8:	07 fc       	sbrc	r0, 7
    2dda:	05 d0       	rcall	.+10     	; 0x2de6 <__divmodhi4_neg2>
    2ddc:	3e f4       	brtc	.+14     	; 0x2dec <__divmodhi4_exit>

00002dde <__divmodhi4_neg1>:
    2dde:	90 95       	com	r25
    2de0:	81 95       	neg	r24
    2de2:	9f 4f       	sbci	r25, 0xFF	; 255
    2de4:	08 95       	ret

00002de6 <__divmodhi4_neg2>:
    2de6:	70 95       	com	r23
    2de8:	61 95       	neg	r22
    2dea:	7f 4f       	sbci	r23, 0xFF	; 255

00002dec <__divmodhi4_exit>:
    2dec:	08 95       	ret

00002dee <__tablejump2__>:
    2dee:	ee 0f       	add	r30, r30
    2df0:	ff 1f       	adc	r31, r31
    2df2:	05 90       	lpm	r0, Z+
    2df4:	f4 91       	lpm	r31, Z
    2df6:	e0 2d       	mov	r30, r0
    2df8:	09 94       	ijmp

00002dfa <__umulhisi3>:
    2dfa:	a2 9f       	mul	r26, r18
    2dfc:	b0 01       	movw	r22, r0
    2dfe:	b3 9f       	mul	r27, r19
    2e00:	c0 01       	movw	r24, r0
    2e02:	a3 9f       	mul	r26, r19
    2e04:	70 0d       	add	r23, r0
    2e06:	81 1d       	adc	r24, r1
    2e08:	11 24       	eor	r1, r1
    2e0a:	91 1d       	adc	r25, r1
    2e0c:	b2 9f       	mul	r27, r18
    2e0e:	70 0d       	add	r23, r0
    2e10:	81 1d       	adc	r24, r1
    2e12:	11 24       	eor	r1, r1
    2e14:	91 1d       	adc	r25, r1
    2e16:	08 95       	ret

00002e18 <memcpy>:
    2e18:	fb 01       	movw	r30, r22
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	02 c0       	rjmp	.+4      	; 0x2e22 <memcpy+0xa>
    2e1e:	01 90       	ld	r0, Z+
    2e20:	0d 92       	st	X+, r0
    2e22:	41 50       	subi	r20, 0x01	; 1
    2e24:	50 40       	sbci	r21, 0x00	; 0
    2e26:	d8 f7       	brcc	.-10     	; 0x2e1e <memcpy+0x6>
    2e28:	08 95       	ret

00002e2a <_exit>:
    2e2a:	f8 94       	cli

00002e2c <__stop_program>:
    2e2c:	ff cf       	rjmp	.-2      	; 0x2e2c <__stop_program>
