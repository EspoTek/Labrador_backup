
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00802000  000028fa  00002990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000da6  008020b6  008020b6  00002a46  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  00002ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b2d5  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001db8  00000000  00000000  0000e27d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000093ee  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a80  00000000  00000000  00019424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fb3c  00000000  00000000  00019ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000231b  00000000  00000000  000499e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  0004bd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bdb3  00000000  00000000  0004c110  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	34 c1       	rjmp	.+616    	; 0x282 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
      1e:	00 00       	nop
      20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
      22:	00 00       	nop
      24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c7       	rjmp	.+3778   	; 0xf24 <__vector_24>
      62:	00 00       	nop
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	81 c2       	rjmp	.+1282   	; 0x620 <__vector_71>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	4b c6       	rjmp	.+3222   	; 0xde4 <__vector_83>
     14e:	00 00       	nop
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__vector_125>
     1f8:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__vector_126>
     1fc:	a9 09       	sbc	r26, r9
     1fe:	ab 09       	sbc	r26, r11
     200:	e7 09       	sbc	r30, r7
     202:	23 0a       	sbc	r2, r19
     204:	2c 0a       	sbc	r2, r28
     206:	31 0a       	sbc	r3, r17
     208:	75 0a       	sbc	r7, r21
     20a:	7a 0a       	sbc	r7, r26
     20c:	d7 09       	sbc	r29, r7
     20e:	d9 09       	sbc	r29, r9
     210:	db 09       	sbc	r29, r11
     212:	dd 09       	sbc	r29, r13
     214:	df 09       	sbc	r29, r15
     216:	e1 09       	sbc	r30, r1
     218:	e3 09       	sbc	r30, r3
     21a:	e5 09       	sbc	r30, r5
     21c:	13 0a       	sbc	r1, r19
     21e:	15 0a       	sbc	r1, r21
     220:	17 0a       	sbc	r1, r23
     222:	19 0a       	sbc	r1, r25
     224:	1b 0a       	sbc	r1, r27
     226:	1d 0a       	sbc	r1, r29
     228:	1f 0a       	sbc	r1, r31
     22a:	21 0a       	sbc	r2, r17
     22c:	3d 0a       	sbc	r3, r29
     22e:	45 0a       	sbc	r4, r21
     230:	4d 0a       	sbc	r4, r29
     232:	58 0a       	sbc	r5, r24
     234:	5a 0a       	sbc	r5, r26
     236:	5c 0a       	sbc	r5, r28
     238:	64 0a       	sbc	r6, r20
     23a:	6c 0a       	sbc	r6, r28
     23c:	f2 0d       	add	r31, r2
     23e:	f5 0d       	add	r31, r5
     240:	f8 0d       	add	r31, r8
     242:	fb 0d       	add	r31, r11
     244:	fe 0d       	add	r31, r14
     246:	01 0e       	add	r0, r17
     248:	04 0e       	add	r0, r20

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	ea ef       	ldi	r30, 0xFA	; 250
     25e:	f8 e2       	ldi	r31, 0x28	; 40
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a6 3b       	cpi	r26, 0xB6	; 182
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	a6 eb       	ldi	r26, 0xB6	; 182
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	ac 35       	cpi	r26, 0x5C	; 92
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	c9 d0       	rcall	.+402    	; 0x410 <main>
     27e:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_calibration_init>:

#include "tiny_calibration.h"
#include "globals.h"
#include "tiny_adc.h"

tiny_calibration_init(){
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
		//Set up 48MHz DFLL for USB.
		OSC.DFLLCTRL = OSC_RC32MCREF_USBSOF_gc;
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	1e 83       	std	Y+6, r17	; 0x06
		DFLLRC32M.CALB = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC)); //THIS is the val for 48MHz.  RCOSC32M is for a 32MHz calibration.  That makes a lot of sense now...
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	7f d1       	rcall	.+766    	; 0x594 <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
		DFLLRC32M.COMP2 = 0xBB;
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
		DFLLRC32M.COMP1= 0x80;  //0xBB80 = 48,000.
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
		DFLLRC32M.CTRL = 0x01; //Enable
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
		
		//Turn on the 48MHz clock and scale it down to 24MHz
		CCP = CCP_IOREG_gc;
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
		CLK.PSCTRL = CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc;  //All peripheral clocks = CLKsys / 2.
     2ac:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
		//CLK.USBCTRL handled by udc
		OSC.CTRL = OSC_RC32MEN_bm | OSC_RC2MEN_bm;  //Enable 32MHz reference.  Keep 2MHz on.
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
		while(OSC.STATUS != (OSC_RC32MRDY_bm | OSC_RC2MRDY_bm)); //Wait for it to be ready before continuing
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x34>
		
		//4 step process from ASF manual.  Puts a 48MHz clock on the PLL output
		OSC.CTRL |= OSC_RC2MEN_bm;  //1. Enable reference clock source.
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
		OSC.PLLCTRL = OSC_PLLSRC_RC2M_gc | 24; //2. Set the multiplication factor and select the clock reference for the PLL.
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
		while(!(OSC.STATUS & OSC_RC2MRDY_bm)); //3. Wait until the clock reference source is stable.
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x48>
		OSC.CTRL |= OSC_PLLEN_bm; //4. Enable the PLL
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
		
		//Move CPU + Peripherals to 48MHz PLLL clock.
		while(!(OSC.STATUS & OSC_PLLRDY_bm));
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x58>
		CCP = CCP_IOREG_gc;
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
		
		//DFLLRC2M.CALB -= 1;
		DFLLRC2M.CALA -= 21;
     2ec:	e8 e6       	ldi	r30, 0x68	; 104
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	82 81       	ldd	r24, Z+2	; 0x02
     2f2:	85 51       	subi	r24, 0x15	; 21
     2f4:	82 83       	std	Z+2, r24	; 0x02
		return;
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	08 95       	ret

000002fe <tiny_calibration_first_sof>:

tiny_calibration_first_sof(){
		PR.PRPE &= 0b11111110;
     2fe:	e0 e7       	ldi	r30, 0x70	; 112
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	85 81       	ldd	r24, Z+5	; 0x05
     304:	8e 7f       	andi	r24, 0xFE	; 254
     306:	85 83       	std	Z+5, r24	; 0x05
		TC_CALI.PER = 24000;
     308:	e0 e0       	ldi	r30, 0x00	; 0
     30a:	fa e0       	ldi	r31, 0x0A	; 10
     30c:	80 ec       	ldi	r24, 0xC0	; 192
     30e:	9d e5       	ldi	r25, 0x5D	; 93
     310:	86 a3       	std	Z+38, r24	; 0x26
     312:	97 a3       	std	Z+39, r25	; 0x27
		TC_CALI.CNT = 12000;
     314:	80 ee       	ldi	r24, 0xE0	; 224
     316:	9e e2       	ldi	r25, 0x2E	; 46
     318:	80 a3       	std	Z+32, r24	; 0x20
     31a:	91 a3       	std	Z+33, r25	; 0x21
		TC_CALI.CTRLA = TC_CLKSEL_DIV1_gc;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 83       	st	Z, r24
     320:	08 95       	ret

00000322 <tiny_calibration_every_sof>:
volatile int gradient;

unsigned char deadTime = 0;
volatile unsigned long outOfRange = 0;
void tiny_calibration_every_sof(){
	unsigned int cnt = TC_CALI.CNT;
     322:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     326:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     32a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     32e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     332:	ac 01       	movw	r20, r24
     334:	42 1b       	sub	r20, r18
     336:	53 0b       	sbc	r21, r19
     338:	40 93 63 22 	sts	0x2263, r20	; 0x802263 <gradient>
     33c:	50 93 64 22 	sts	0x2264, r21	; 0x802264 <gradient+0x1>
	
	if(cnt > 12500){
     340:	85 3d       	cpi	r24, 0xD5	; 213
     342:	50 e3       	ldi	r21, 0x30	; 48
     344:	95 07       	cpc	r25, r21
     346:	18 f0       	brcs	.+6      	; 0x34e <tiny_calibration_every_sof+0x2c>
		DFLLRC2M.CALA = 39;
     348:	27 e2       	ldi	r18, 0x27	; 39
     34a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	}
	if(cnt < 11500){
     34e:	8c 3e       	cpi	r24, 0xEC	; 236
     350:	2c e2       	ldi	r18, 0x2C	; 44
     352:	92 07       	cpc	r25, r18
     354:	18 f4       	brcc	.+6      	; 0x35c <tiny_calibration_every_sof+0x3a>
		DFLLRC2M.CALA = 43;
     356:	2b e2       	ldi	r18, 0x2B	; 43
     358:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	}
	
	if((cnt<10000) || (cnt>14000)){
     35c:	9c 01       	movw	r18, r24
     35e:	20 51       	subi	r18, 0x10	; 16
     360:	37 42       	sbci	r19, 0x27	; 39
     362:	21 3a       	cpi	r18, 0xA1	; 161
     364:	3f 40       	sbci	r19, 0x0F	; 15
     366:	a0 f0       	brcs	.+40     	; 0x390 <tiny_calibration_every_sof+0x6e>
		outOfRange++;
     368:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <__data_end>
     36c:	50 91 b7 20 	lds	r21, 0x20B7	; 0x8020b7 <__data_end+0x1>
     370:	60 91 b8 20 	lds	r22, 0x20B8	; 0x8020b8 <__data_end+0x2>
     374:	70 91 b9 20 	lds	r23, 0x20B9	; 0x8020b9 <__data_end+0x3>
     378:	4f 5f       	subi	r20, 0xFF	; 255
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	6f 4f       	sbci	r22, 0xFF	; 255
     37e:	7f 4f       	sbci	r23, 0xFF	; 255
     380:	40 93 b6 20 	sts	0x20B6, r20	; 0x8020b6 <__data_end>
     384:	50 93 b7 20 	sts	0x20B7, r21	; 0x8020b7 <__data_end+0x1>
     388:	60 93 b8 20 	sts	0x20B8, r22	; 0x8020b8 <__data_end+0x2>
     38c:	70 93 b9 20 	sts	0x20B9, r23	; 0x8020b9 <__data_end+0x3>
	}
	
	last_val = cnt;
     390:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     394:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     398:	08 95       	ret

0000039a <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     39a:	e0 e8       	ldi	r30, 0x80	; 128
     39c:	f6 e0       	ldi	r31, 0x06	; 6
     39e:	8f e0       	ldi	r24, 0x0F	; 15
     3a0:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	84 83       	std	Z+4, r24	; 0x04
     3a6:	08 95       	ret

000003a8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     3a8:	08 95       	ret

000003aa <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], 250, iso_callback);
     3aa:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <usb_state>
     3ae:	27 e7       	ldi	r18, 0x77	; 119
     3b0:	31 e0       	ldi	r19, 0x01	; 1
     3b2:	42 9f       	mul	r20, r18
     3b4:	c0 01       	movw	r24, r0
     3b6:	43 9f       	mul	r20, r19
     3b8:	90 0d       	add	r25, r0
     3ba:	11 24       	eor	r1, r1
     3bc:	45 ed       	ldi	r20, 0xD5	; 213
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	6a ef       	ldi	r22, 0xFA	; 250
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	86 58       	subi	r24, 0x86	; 134
     3c6:	99 4d       	sbci	r25, 0xD9	; 217
     3c8:	35 c6       	rjmp	.+3178   	; 0x1034 <udi_vendor_iso_in_run>
     3ca:	08 95       	ret

000003cc <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * HALFPACKET_SIZE], 250, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 250], 250, iso_callback2);
     3cc:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <usb_state>
     3d0:	27 e7       	ldi	r18, 0x77	; 119
     3d2:	31 e0       	ldi	r19, 0x01	; 1
     3d4:	42 9f       	mul	r20, r18
     3d6:	c0 01       	movw	r24, r0
     3d8:	43 9f       	mul	r20, r19
     3da:	90 0d       	add	r25, r0
     3dc:	11 24       	eor	r1, r1
     3de:	46 ee       	ldi	r20, 0xE6	; 230
     3e0:	51 e0       	ldi	r21, 0x01	; 1
     3e2:	6a ef       	ldi	r22, 0xFA	; 250
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	8c 58       	subi	r24, 0x8C	; 140
     3e8:	98 4d       	sbci	r25, 0xD8	; 216
     3ea:	30 c6       	rjmp	.+3168   	; 0x104c <udi_vendor_iso_in_run2>
     3ec:	08 95       	ret

000003ee <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * HALFPACKET_SIZE + 250], 250, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + 500], 250, iso_callback3);
     3ee:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <usb_state>
     3f2:	27 e7       	ldi	r18, 0x77	; 119
     3f4:	31 e0       	ldi	r19, 0x01	; 1
     3f6:	42 9f       	mul	r20, r18
     3f8:	c0 01       	movw	r24, r0
     3fa:	43 9f       	mul	r20, r19
     3fc:	90 0d       	add	r25, r0
     3fe:	11 24       	eor	r1, r1
     400:	47 ef       	ldi	r20, 0xF7	; 247
     402:	51 e0       	ldi	r21, 0x01	; 1
     404:	6a ef       	ldi	r22, 0xFA	; 250
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	82 59       	subi	r24, 0x92	; 146
     40a:	97 4d       	sbci	r25, 0xD7	; 215
     40c:	2b c6       	rjmp	.+3158   	; 0x1064 <udi_vendor_iso_in_run3>
     40e:	08 95       	ret

00000410 <main>:
#define CNT_CNT_MAX 256
volatile unsigned short cntCnt[CNT_CNT_MAX];
volatile unsigned short cntCntCnt = 0;

int main(void){
	irq_initialize_vectors();
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     416:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     418:	35 df       	rcall	.-406    	; 0x284 <tiny_calibration_init>
		
	board_init();
     41a:	c6 df       	rcall	.-116    	; 0x3a8 <board_init>
	udc_start();
     41c:	1a d7       	rcall	.+3636   	; 0x1252 <udc_start>
	tiny_dac_setup();
     41e:	13 d1       	rcall	.+550    	; 0x646 <tiny_dac_setup>
	tiny_dma_setup();
     420:	36 d1       	rcall	.+620    	; 0x68e <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	bf d0       	rcall	.+382    	; 0x5a6 <tiny_adc_setup>
	tiny_adc_pid_setup();
     428:	ab d0       	rcall	.+342    	; 0x580 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     42a:	8c e0       	ldi	r24, 0x0C	; 12
     42c:	9f d0       	rcall	.+318    	; 0x56c <tiny_adc_ch1setup>
	tiny_timer_setup();
     42e:	98 d4       	rcall	.+2352   	; 0xd60 <tiny_timer_setup>
	tiny_uart_setup();
     430:	53 d5       	rcall	.+2726   	; 0xed8 <tiny_uart_setup>
	tiny_spi_setup();
     432:	6a d5       	rcall	.+2772   	; 0xf08 <tiny_spi_setup>
	tiny_dig_setup();
     434:	b2 df       	rcall	.-156    	; 0x39a <tiny_dig_setup>
     436:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <debug_counter>
     43a:	90 91 67 22 	lds	r25, 0x2267	; 0x802267 <debug_counter+0x1>
     43e:	a0 91 68 22 	lds	r26, 0x2268	; 0x802268 <debug_counter+0x2>
     442:	b0 91 69 22 	lds	r27, 0x2269	; 0x802269 <debug_counter+0x3>
	//USARTC0.DATA = 0x55;
	//asm("nop");

	
	while (true) {
		debug_counter++;
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	a1 1d       	adc	r26, r1
     44a:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	21 ee       	ldi	r18, 0xE1	; 225
     450:	92 07       	cpc	r25, r18
     452:	25 ef       	ldi	r18, 0xF5	; 245
     454:	a2 07       	cpc	r26, r18
     456:	25 e0       	ldi	r18, 0x05	; 5
     458:	b2 07       	cpc	r27, r18
     45a:	18 f0       	brcs	.+6      	; 0x462 <main+0x52>
			debug_counter = 0;
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     47e:	e3 cf       	rjmp	.-58     	; 0x446 <main+0x36>

00000480 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     480:	08 95       	ret

00000482 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     482:	08 95       	ret

00000484 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	if(firstFrame){
     484:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <firstFrame>
     488:	88 23       	and	r24, r24
     48a:	39 f0       	breq	.+14     	; 0x49a <main_sof_action+0x16>
		tiny_calibration_first_sof();
     48c:	38 df       	rcall	.-400    	; 0x2fe <tiny_calibration_first_sof>
		firstFrame = 0;
     48e:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <firstFrame>
		tcinit = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <tcinit>
     498:	29 c0       	rjmp	.+82     	; 0x4ec <main_sof_action+0x68>
	}
	else{
		if(tcinit){
     49a:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tcinit>
     49e:	88 23       	and	r24, r24
     4a0:	29 f1       	breq	.+74     	; 0x4ec <main_sof_action+0x68>
			tiny_calibration_every_sof();
     4a2:	3f df       	rcall	.-386    	; 0x322 <tiny_calibration_every_sof>
			cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     4a4:	e0 91 ba 20 	lds	r30, 0x20BA	; 0x8020ba <cntCntCnt>
     4a8:	f0 91 bb 20 	lds	r31, 0x20BB	; 0x8020bb <cntCntCnt+0x1>
     4ac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     4b0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     4b4:	ee 0f       	add	r30, r30
     4b6:	ff 1f       	adc	r31, r31
     4b8:	ea 5a       	subi	r30, 0xAA	; 170
     4ba:	f3 4d       	sbci	r31, 0xD3	; 211
     4bc:	80 83       	st	Z, r24
     4be:	91 83       	std	Z+1, r25	; 0x01
			if(cntCntCnt == (CNT_CNT_MAX - 1)){
     4c0:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <cntCntCnt>
     4c4:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <cntCntCnt+0x1>
     4c8:	8f 3f       	cpi	r24, 0xFF	; 255
     4ca:	91 05       	cpc	r25, r1
     4cc:	31 f4       	brne	.+12     	; 0x4da <main_sof_action+0x56>
				cntCntCnt = 0;
     4ce:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <cntCntCnt>
     4d2:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <cntCntCnt+0x1>
				asm("nop");
     4d6:	00 00       	nop
     4d8:	09 c0       	rjmp	.+18     	; 0x4ec <main_sof_action+0x68>
			}
			else cntCntCnt++;
     4da:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <cntCntCnt>
     4de:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <cntCntCnt+0x1>
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <cntCntCnt>
     4e8:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <cntCntCnt+0x1>
		}
	}
	usb_state = !usb_state;
     4ec:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <usb_state>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	91 11       	cpse	r25, r1
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <usb_state>
     4fa:	08 95       	ret

000004fc <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <main_b_vendor_enable>
	firstFrame = 1;
     502:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <firstFrame>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     506:	45 ed       	ldi	r20, 0xD5	; 213
     508:	51 e0       	ldi	r21, 0x01	; 1
     50a:	6e ee       	ldi	r22, 0xEE	; 238
     50c:	72 e0       	ldi	r23, 0x02	; 2
     50e:	8a e7       	ldi	r24, 0x7A	; 122
     510:	96 e2       	ldi	r25, 0x26	; 38
     512:	90 d5       	rcall	.+2848   	; 0x1034 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     514:	46 ee       	ldi	r20, 0xE6	; 230
     516:	51 e0       	ldi	r21, 0x01	; 1
     518:	6e ee       	ldi	r22, 0xEE	; 238
     51a:	72 e0       	ldi	r23, 0x02	; 2
     51c:	84 e7       	ldi	r24, 0x74	; 116
     51e:	97 e2       	ldi	r25, 0x27	; 39
     520:	95 d5       	rcall	.+2858   	; 0x104c <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     522:	47 ef       	ldi	r20, 0xF7	; 247
     524:	51 e0       	ldi	r21, 0x01	; 1
     526:	6e ee       	ldi	r22, 0xEE	; 238
     528:	72 e0       	ldi	r23, 0x02	; 2
     52a:	8e e6       	ldi	r24, 0x6E	; 110
     52c:	98 e2       	ldi	r25, 0x28	; 40
     52e:	9a d5       	rcall	.+2868   	; 0x1064 <udi_vendor_iso_in_run3>
	return true;
}
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	08 95       	ret

00000534 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     534:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <main_b_vendor_enable>
     538:	08 95       	ret

0000053a <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	08 95       	ret

0000053e <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	08 95       	ret

00000542 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     542:	e0 e0       	ldi	r30, 0x00	; 0
     544:	f2 e0       	ldi	r31, 0x02	; 2
     546:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     548:	98 2f       	mov	r25, r24
     54a:	9c 71       	andi	r25, 0x1C	; 28
     54c:	93 68       	ori	r25, 0x83	; 131
     54e:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     550:	88 23       	and	r24, r24
     552:	1c f4       	brge	.+6      	; 0x55a <tiny_adc_ch0setup+0x18>
     554:	90 e1       	ldi	r25, 0x10	; 16
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	02 c0       	rjmp	.+4      	; 0x55e <tiny_adc_ch0setup+0x1c>
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	89 2b       	or	r24, r25
     560:	e0 e0       	ldi	r30, 0x00	; 0
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     566:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     568:	16 a2       	std	Z+38, r1	; 0x26
     56a:	08 95       	ret

0000056c <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     56c:	e0 e0       	ldi	r30, 0x00	; 0
     56e:	f2 e0       	ldi	r31, 0x02	; 2
     570:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     572:	83 68       	ori	r24, 0x83	; 131
     574:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     576:	80 e1       	ldi	r24, 0x10	; 16
     578:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     57a:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     57c:	16 aa       	std	Z+54, r1	; 0x36
     57e:	08 95       	ret

00000580 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     580:	e0 e0       	ldi	r30, 0x00	; 0
     582:	f2 e0       	ldi	r31, 0x02	; 2
     584:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     586:	83 e8       	ldi	r24, 0x83	; 131
     588:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     58a:	8f e2       	ldi	r24, 0x2F	; 47
     58c:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     58e:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     590:	16 a6       	std	Z+46, r1	; 0x2e
     592:	08 95       	ret

00000594 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     594:	aa ec       	ldi	r26, 0xCA	; 202
     596:	b1 e0       	ldi	r27, 0x01	; 1
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     59c:	e8 2f       	mov	r30, r24
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     5a2:	1c 92       	st	X, r1

	return( result );
}
     5a4:	08 95       	ret

000005a6 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     5aa:	e0 e7       	ldi	r30, 0x70	; 112
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	9d 7f       	andi	r25, 0xFD	; 253
     5b2:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     5b4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     5b8:	62 30       	cpi	r22, 0x02	; 2
     5ba:	31 f1       	breq	.+76     	; 0x608 <tiny_adc_setup+0x62>
     5bc:	e0 e0       	ldi	r30, 0x00	; 0
     5be:	f2 e0       	ldi	r31, 0x02	; 2
     5c0:	9c e1       	ldi	r25, 0x1C	; 28
     5c2:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     5c8:	81 11       	cpse	r24, r1
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <tiny_adc_setup+0x2a>
     5cc:	80 e4       	ldi	r24, 0x40	; 64
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <tiny_adc_setup+0x2c>
     5d0:	80 ec       	ldi	r24, 0xC0	; 192
     5d2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     5d6:	61 30       	cpi	r22, 0x01	; 1
     5d8:	11 f0       	breq	.+4      	; 0x5de <tiny_adc_setup+0x38>
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <tiny_adc_setup+0x3a>
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	c0 e0       	ldi	r28, 0x00	; 0
     5e2:	d2 e0       	ldi	r29, 0x02	; 2
     5e4:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     5e6:	80 e2       	ldi	r24, 0x20	; 32
     5e8:	d5 df       	rcall	.-86     	; 0x594 <ReadCalibrationByte>
     5ea:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     5ec:	81 e2       	ldi	r24, 0x21	; 33
     5ee:	d2 df       	rcall	.-92     	; 0x594 <ReadCalibrationByte>
     5f0:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     5f2:	18 8e       	std	Y+24, r1	; 0x18
     5f4:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     5fa:	c2 df       	rcall	.-124    	; 0x580 <tiny_adc_pid_setup>
     5fc:	0e c0       	rjmp	.+28     	; 0x61a <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     5fe:	80 ec       	ldi	r24, 0xC0	; 192
     600:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	ec cf       	rjmp	.-40     	; 0x5e0 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     608:	e0 e0       	ldi	r30, 0x00	; 0
     60a:	f2 e0       	ldi	r31, 0x02	; 2
     60c:	9e e1       	ldi	r25, 0x1E	; 30
     60e:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     614:	81 11       	cpse	r24, r1
     616:	f3 cf       	rjmp	.-26     	; 0x5fe <tiny_adc_setup+0x58>
     618:	d9 cf       	rjmp	.-78     	; 0x5cc <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     620:	1f 92       	push	r1
     622:	0f 92       	push	r0
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	0f 92       	push	r0
     628:	11 24       	eor	r1, r1
     62a:	8f 93       	push	r24
	ADCA.CH0.INTFLAGS = 0x01;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
     63a:	8f 91       	pop	r24
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     64a:	e0 e7       	ldi	r30, 0x70	; 112
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	82 81       	ldd	r24, Z+2	; 0x02
     650:	8b 7f       	andi	r24, 0xFB	; 251
     652:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     654:	c0 e2       	ldi	r28, 0x20	; 32
     656:	d3 e0       	ldi	r29, 0x03	; 3
     658:	8d e0       	ldi	r24, 0x0D	; 13
     65a:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     65c:	80 e4       	ldi	r24, 0x40	; 64
     65e:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     660:	89 e0       	ldi	r24, 0x09	; 9
     662:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     664:	83 e3       	ldi	r24, 0x33	; 51
     666:	96 df       	rcall	.-212    	; 0x594 <ReadCalibrationByte>
     668:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     66a:	82 e3       	ldi	r24, 0x32	; 50
     66c:	93 df       	rcall	.-218    	; 0x594 <ReadCalibrationByte>
     66e:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     670:	87 e3       	ldi	r24, 0x37	; 55
     672:	90 df       	rcall	.-224    	; 0x594 <ReadCalibrationByte>
     674:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     676:	86 e3       	ldi	r24, 0x36	; 54
     678:	8d df       	rcall	.-230    	; 0x594 <ReadCalibrationByte>
     67a:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     67c:	e0 e2       	ldi	r30, 0x20	; 32
     67e:	f6 e0       	ldi	r31, 0x06	; 6
     680:	80 81       	ld	r24, Z
     682:	83 60       	ori	r24, 0x03	; 3
     684:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     686:	14 82       	std	Z+4, r1	; 0x04
	
	

     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <tiny_dma_setup>:
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
	
}

void tiny_dma_loop_mode_6(void){
     68e:	e0 e7       	ldi	r30, 0x70	; 112
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	8e 7f       	andi	r24, 0xFE	; 254
     696:	80 83       	st	Z, r24
     698:	83 e8       	ldi	r24, 0x83	; 131
     69a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     69e:	08 95       	ret

000006a0 <tiny_dma_flush>:
     6a0:	e0 e0       	ldi	r30, 0x00	; 0
     6a2:	f1 e0       	ldi	r31, 0x01	; 1
     6a4:	10 8a       	std	Z+16, r1	; 0x10
     6a6:	80 e4       	ldi	r24, 0x40	; 64
     6a8:	80 8b       	std	Z+16, r24	; 0x10
     6aa:	10 a2       	std	Z+32, r1	; 0x20
     6ac:	80 a3       	std	Z+32, r24	; 0x20
     6ae:	10 aa       	std	Z+48, r1	; 0x30
     6b0:	80 ab       	std	Z+48, r24	; 0x30
     6b2:	e0 e4       	ldi	r30, 0x40	; 64
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	10 82       	st	Z, r1
     6b8:	80 83       	st	Z, r24
     6ba:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <b1_state>
     6be:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <b2_state>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <usb_state>
     6c8:	08 95       	ret

000006ca <tiny_dma_set_mode_0>:
     6ca:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <global_mode>
     6ce:	e8 df       	rcall	.-48     	; 0x6a0 <tiny_dma_flush>
     6d0:	e0 e0       	ldi	r30, 0x00	; 0
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	16 aa       	std	Z+54, r1	; 0x36
     6d6:	84 e2       	ldi	r24, 0x24	; 36
     6d8:	80 ab       	std	Z+48, r24	; 0x30
     6da:	11 aa       	std	Z+49, r1	; 0x31
     6dc:	49 e5       	ldi	r20, 0x59	; 89
     6de:	42 ab       	std	Z+50, r20	; 0x32
     6e0:	32 e0       	ldi	r19, 0x02	; 2
     6e2:	33 ab       	std	Z+51, r19	; 0x33
     6e4:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <auxDacBufLen>
     6e8:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     6ec:	64 ab       	std	Z+52, r22	; 0x34
     6ee:	75 ab       	std	Z+53, r23	; 0x35
     6f0:	6a e7       	ldi	r22, 0x7A	; 122
     6f2:	74 e2       	ldi	r23, 0x24	; 36
     6f4:	60 af       	std	Z+56, r22	; 0x38
     6f6:	71 af       	std	Z+57, r23	; 0x39
     6f8:	12 ae       	std	Z+58, r1	; 0x3a
     6fa:	9b e3       	ldi	r25, 0x3B	; 59
     6fc:	94 af       	std	Z+60, r25	; 0x3c
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     704:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     708:	20 a9       	ldd	r18, Z+48	; 0x30
     70a:	20 68       	ori	r18, 0x80	; 128
     70c:	20 ab       	std	Z+48, r18	; 0x30
     70e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     712:	a0 e4       	ldi	r26, 0x40	; 64
     714:	b1 e0       	ldi	r27, 0x01	; 1
     716:	8c 93       	st	X, r24
     718:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     71c:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     720:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     724:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     728:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     72c:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     730:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     734:	4a e6       	ldi	r20, 0x6A	; 106
     736:	52 e2       	ldi	r21, 0x22	; 34
     738:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     73c:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     740:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     744:	29 e3       	ldi	r18, 0x39	; 57
     746:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     74a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     74e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     752:	9c 91       	ld	r25, X
     754:	90 68       	ori	r25, 0x80	; 128
     756:	9c 93       	st	X, r25
     758:	10 8a       	std	Z+16, r1	; 0x10
     75a:	90 e4       	ldi	r25, 0x40	; 64
     75c:	90 8b       	std	Z+16, r25	; 0x10
     75e:	80 8b       	std	Z+16, r24	; 0x10
     760:	11 8a       	std	Z+17, r1	; 0x11
     762:	95 e9       	ldi	r25, 0x95	; 149
     764:	92 8b       	std	Z+18, r25	; 0x12
     766:	90 e1       	ldi	r25, 0x10	; 16
     768:	93 8b       	std	Z+19, r25	; 0x13
     76a:	4e ee       	ldi	r20, 0xEE	; 238
     76c:	52 e0       	ldi	r21, 0x02	; 2
     76e:	44 8b       	std	Z+20, r20	; 0x14
     770:	55 8b       	std	Z+21, r21	; 0x15
     772:	80 8f       	std	Z+24, r24	; 0x18
     774:	31 8f       	std	Z+25, r19	; 0x19
     776:	12 8e       	std	Z+26, r1	; 0x1a
     778:	8a e7       	ldi	r24, 0x7A	; 122
     77a:	96 e2       	ldi	r25, 0x26	; 38
     77c:	84 8f       	std	Z+28, r24	; 0x1c
     77e:	95 8f       	std	Z+29, r25	; 0x1d
     780:	16 8e       	std	Z+30, r1	; 0x1e
     782:	80 89       	ldd	r24, Z+16	; 0x10
     784:	80 68       	ori	r24, 0x80	; 128
     786:	80 8b       	std	Z+16, r24	; 0x10
     788:	08 95       	ret

0000078a <tiny_dma_set_mode_1>:
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     794:	85 df       	rcall	.-246    	; 0x6a0 <tiny_dma_flush>
     796:	e0 e0       	ldi	r30, 0x00	; 0
     798:	f1 e0       	ldi	r31, 0x01	; 1
     79a:	10 aa       	std	Z+48, r1	; 0x30
     79c:	80 e4       	ldi	r24, 0x40	; 64
     79e:	80 ab       	std	Z+48, r24	; 0x30
     7a0:	94 e0       	ldi	r25, 0x04	; 4
     7a2:	90 ab       	std	Z+48, r25	; 0x30
     7a4:	11 aa       	std	Z+49, r1	; 0x31
     7a6:	12 aa       	std	Z+50, r1	; 0x32
     7a8:	5b e4       	ldi	r21, 0x4B	; 75
     7aa:	53 ab       	std	Z+51, r21	; 0x33
     7ac:	14 aa       	std	Z+52, r1	; 0x34
     7ae:	15 aa       	std	Z+53, r1	; 0x35
     7b0:	16 aa       	std	Z+54, r1	; 0x36
     7b2:	23 e0       	ldi	r18, 0x03	; 3
     7b4:	30 e2       	ldi	r19, 0x20	; 32
     7b6:	20 af       	std	Z+56, r18	; 0x38
     7b8:	31 af       	std	Z+57, r19	; 0x39
     7ba:	12 ae       	std	Z+58, r1	; 0x3a
     7bc:	40 ea       	ldi	r20, 0xA0	; 160
     7be:	44 af       	std	Z+60, r20	; 0x3c
     7c0:	38 e0       	ldi	r19, 0x08	; 8
     7c2:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     7c6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     7ca:	80 a9       	ldd	r24, Z+48	; 0x30
     7cc:	80 6a       	ori	r24, 0xA0	; 160
     7ce:	80 ab       	std	Z+48, r24	; 0x30
     7d0:	85 e5       	ldi	r24, 0x55	; 85
     7d2:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     7d6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     7da:	a0 e4       	ldi	r26, 0x40	; 64
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
     7de:	d4 e2       	ldi	r29, 0x24	; 36
     7e0:	dc 93       	st	X, r29
     7e2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     7e6:	89 e5       	ldi	r24, 0x59	; 89
     7e8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     7ec:	c2 e0       	ldi	r28, 0x02	; 2
     7ee:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     7f2:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <auxDacBufLen>
     7f6:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     7fa:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     7fe:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     802:	6a e7       	ldi	r22, 0x7A	; 122
     804:	74 e2       	ldi	r23, 0x24	; 36
     806:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     80a:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     80e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     812:	8b e3       	ldi	r24, 0x3B	; 59
     814:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     81e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     822:	2c 91       	ld	r18, X
     824:	20 68       	ori	r18, 0x80	; 128
     826:	2c 93       	st	X, r18
     828:	90 8b       	std	Z+16, r25	; 0x10
     82a:	81 8b       	std	Z+17, r24	; 0x11
     82c:	a1 e9       	ldi	r26, 0x91	; 145
     82e:	a2 8b       	std	Z+18, r26	; 0x12
     830:	20 e1       	ldi	r18, 0x10	; 16
     832:	23 8b       	std	Z+19, r18	; 0x13
     834:	67 e7       	ldi	r22, 0x77	; 119
     836:	71 e0       	ldi	r23, 0x01	; 1
     838:	64 8b       	std	Z+20, r22	; 0x14
     83a:	75 8b       	std	Z+21, r23	; 0x15
     83c:	d0 8f       	std	Z+24, r29	; 0x18
     83e:	c1 8f       	std	Z+25, r28	; 0x19
     840:	12 8e       	std	Z+26, r1	; 0x1a
     842:	ca e7       	ldi	r28, 0x7A	; 122
     844:	d6 e2       	ldi	r29, 0x26	; 38
     846:	c4 8f       	std	Z+28, r28	; 0x1c
     848:	d5 8f       	std	Z+29, r29	; 0x1d
     84a:	16 8e       	std	Z+30, r1	; 0x1e
     84c:	20 89       	ldd	r18, Z+16	; 0x10
     84e:	20 68       	ori	r18, 0x80	; 128
     850:	20 8b       	std	Z+16, r18	; 0x10
     852:	90 a3       	std	Z+32, r25	; 0x20
     854:	81 a3       	std	Z+33, r24	; 0x21
     856:	a2 a3       	std	Z+34, r26	; 0x22
     858:	53 a3       	std	Z+35, r21	; 0x23
     85a:	64 a3       	std	Z+36, r22	; 0x24
     85c:	75 a3       	std	Z+37, r23	; 0x25
     85e:	40 a7       	std	Z+40, r20	; 0x28
     860:	31 a7       	std	Z+41, r19	; 0x29
     862:	12 a6       	std	Z+42, r1	; 0x2a
     864:	81 ef       	ldi	r24, 0xF1	; 241
     866:	97 e2       	ldi	r25, 0x27	; 39
     868:	84 a7       	std	Z+44, r24	; 0x2c
     86a:	95 a7       	std	Z+45, r25	; 0x2d
     86c:	16 a6       	std	Z+46, r1	; 0x2e
     86e:	80 a1       	ldd	r24, Z+32	; 0x20
     870:	80 68       	ori	r24, 0x80	; 128
     872:	80 a3       	std	Z+32, r24	; 0x20
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <tiny_dma_set_mode_2>:
     87a:	cf 93       	push	r28
     87c:	f8 94       	cli
     87e:	c2 e0       	ldi	r28, 0x02	; 2
     880:	c0 93 02 20 	sts	0x2002, r28	; 0x802002 <global_mode>
     884:	0d df       	rcall	.-486    	; 0x6a0 <tiny_dma_flush>
     886:	e0 e0       	ldi	r30, 0x00	; 0
     888:	f1 e0       	ldi	r31, 0x01	; 1
     88a:	16 aa       	std	Z+54, r1	; 0x36
     88c:	94 e2       	ldi	r25, 0x24	; 36
     88e:	90 ab       	std	Z+48, r25	; 0x30
     890:	11 aa       	std	Z+49, r1	; 0x31
     892:	39 e5       	ldi	r19, 0x59	; 89
     894:	32 ab       	std	Z+50, r19	; 0x32
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	83 ab       	std	Z+51, r24	; 0x33
     89a:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     89e:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     8a2:	44 ab       	std	Z+52, r20	; 0x34
     8a4:	55 ab       	std	Z+53, r21	; 0x35
     8a6:	4a e6       	ldi	r20, 0x6A	; 106
     8a8:	52 e2       	ldi	r21, 0x22	; 34
     8aa:	40 af       	std	Z+56, r20	; 0x38
     8ac:	51 af       	std	Z+57, r21	; 0x39
     8ae:	12 ae       	std	Z+58, r1	; 0x3a
     8b0:	29 e3       	ldi	r18, 0x39	; 57
     8b2:	24 af       	std	Z+60, r18	; 0x3c
     8b4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     8b8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     8bc:	20 a9       	ldd	r18, Z+48	; 0x30
     8be:	20 68       	ori	r18, 0x80	; 128
     8c0:	20 ab       	std	Z+48, r18	; 0x30
     8c2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     8c6:	a0 e4       	ldi	r26, 0x40	; 64
     8c8:	b1 e0       	ldi	r27, 0x01	; 1
     8ca:	9c 93       	st	X, r25
     8cc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8d0:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     8d4:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     8d8:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <auxDacBufLen>
     8dc:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     8e0:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     8e4:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     8e8:	2a e7       	ldi	r18, 0x7A	; 122
     8ea:	34 e2       	ldi	r19, 0x24	; 36
     8ec:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     8f0:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     8f4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8f8:	2b e3       	ldi	r18, 0x3B	; 59
     8fa:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     8fe:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     902:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     906:	2c 91       	ld	r18, X
     908:	20 68       	ori	r18, 0x80	; 128
     90a:	2c 93       	st	X, r18
     90c:	54 e0       	ldi	r21, 0x04	; 4
     90e:	50 8b       	std	Z+16, r21	; 0x10
     910:	81 8b       	std	Z+17, r24	; 0x11
     912:	41 e9       	ldi	r20, 0x91	; 145
     914:	42 8b       	std	Z+18, r20	; 0x12
     916:	20 e1       	ldi	r18, 0x10	; 16
     918:	23 8b       	std	Z+19, r18	; 0x13
     91a:	27 e7       	ldi	r18, 0x77	; 119
     91c:	31 e0       	ldi	r19, 0x01	; 1
     91e:	24 8b       	std	Z+20, r18	; 0x14
     920:	35 8b       	std	Z+21, r19	; 0x15
     922:	90 8f       	std	Z+24, r25	; 0x18
     924:	c1 8f       	std	Z+25, r28	; 0x19
     926:	12 8e       	std	Z+26, r1	; 0x1a
     928:	6a e7       	ldi	r22, 0x7A	; 122
     92a:	76 e2       	ldi	r23, 0x26	; 38
     92c:	64 8f       	std	Z+28, r22	; 0x1c
     92e:	75 8f       	std	Z+29, r23	; 0x1d
     930:	16 8e       	std	Z+30, r1	; 0x1e
     932:	90 89       	ldd	r25, Z+16	; 0x10
     934:	90 68       	ori	r25, 0x80	; 128
     936:	90 8b       	std	Z+16, r25	; 0x10
     938:	50 a3       	std	Z+32, r21	; 0x20
     93a:	81 a3       	std	Z+33, r24	; 0x21
     93c:	42 a3       	std	Z+34, r20	; 0x22
     93e:	82 e1       	ldi	r24, 0x12	; 18
     940:	83 a3       	std	Z+35, r24	; 0x23
     942:	24 a3       	std	Z+36, r18	; 0x24
     944:	35 a3       	std	Z+37, r19	; 0x25
     946:	84 e3       	ldi	r24, 0x34	; 52
     948:	80 a7       	std	Z+40, r24	; 0x28
     94a:	c1 a7       	std	Z+41, r28	; 0x29
     94c:	12 a6       	std	Z+42, r1	; 0x2a
     94e:	81 ef       	ldi	r24, 0xF1	; 241
     950:	97 e2       	ldi	r25, 0x27	; 39
     952:	84 a7       	std	Z+44, r24	; 0x2c
     954:	95 a7       	std	Z+45, r25	; 0x2d
     956:	16 a6       	std	Z+46, r1	; 0x2e
     958:	80 a1       	ldd	r24, Z+32	; 0x20
     95a:	80 68       	ori	r24, 0x80	; 128
     95c:	80 a3       	std	Z+32, r24	; 0x20
     95e:	78 94       	sei
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <tiny_dma_set_mode_3>:
     964:	cf 93       	push	r28
     966:	c3 e0       	ldi	r28, 0x03	; 3
     968:	c0 93 02 20 	sts	0x2002, r28	; 0x802002 <global_mode>
     96c:	99 de       	rcall	.-718    	; 0x6a0 <tiny_dma_flush>
     96e:	e0 e0       	ldi	r30, 0x00	; 0
     970:	f1 e0       	ldi	r31, 0x01	; 1
     972:	10 a2       	std	Z+32, r1	; 0x20
     974:	50 e4       	ldi	r21, 0x40	; 64
     976:	50 a3       	std	Z+32, r21	; 0x20
     978:	44 e0       	ldi	r20, 0x04	; 4
     97a:	40 a3       	std	Z+32, r20	; 0x20
     97c:	11 a2       	std	Z+33, r1	; 0x21
     97e:	12 a2       	std	Z+34, r1	; 0x22
     980:	3b e4       	ldi	r19, 0x4B	; 75
     982:	33 a3       	std	Z+35, r19	; 0x23
     984:	14 a2       	std	Z+36, r1	; 0x24
     986:	15 a2       	std	Z+37, r1	; 0x25
     988:	16 a2       	std	Z+38, r1	; 0x26
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	90 e2       	ldi	r25, 0x20	; 32
     98e:	80 a7       	std	Z+40, r24	; 0x28
     990:	91 a7       	std	Z+41, r25	; 0x29
     992:	12 a6       	std	Z+42, r1	; 0x2a
     994:	20 ea       	ldi	r18, 0xA0	; 160
     996:	24 a7       	std	Z+44, r18	; 0x2c
     998:	98 e0       	ldi	r25, 0x08	; 8
     99a:	95 a7       	std	Z+45, r25	; 0x2d
     99c:	16 a6       	std	Z+46, r1	; 0x2e
     99e:	80 a1       	ldd	r24, Z+32	; 0x20
     9a0:	80 6a       	ori	r24, 0xA0	; 160
     9a2:	80 a3       	std	Z+32, r24	; 0x20
     9a4:	85 e5       	ldi	r24, 0x55	; 85
     9a6:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     9aa:	16 aa       	std	Z+54, r1	; 0x36
     9ac:	74 e2       	ldi	r23, 0x24	; 36
     9ae:	70 ab       	std	Z+48, r23	; 0x30
     9b0:	11 aa       	std	Z+49, r1	; 0x31
     9b2:	69 e5       	ldi	r22, 0x59	; 89
     9b4:	62 ab       	std	Z+50, r22	; 0x32
     9b6:	c3 ab       	std	Z+51, r28	; 0x33
     9b8:	a0 91 06 20 	lds	r26, 0x2006	; 0x802006 <dacBuf_len>
     9bc:	b0 91 07 20 	lds	r27, 0x2007	; 0x802007 <dacBuf_len+0x1>
     9c0:	a4 ab       	std	Z+52, r26	; 0x34
     9c2:	b5 ab       	std	Z+53, r27	; 0x35
     9c4:	aa e6       	ldi	r26, 0x6A	; 106
     9c6:	b2 e2       	ldi	r27, 0x22	; 34
     9c8:	a0 af       	std	Z+56, r26	; 0x38
     9ca:	b1 af       	std	Z+57, r27	; 0x39
     9cc:	12 ae       	std	Z+58, r1	; 0x3a
     9ce:	89 e3       	ldi	r24, 0x39	; 57
     9d0:	84 af       	std	Z+60, r24	; 0x3c
     9d2:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     9d6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     9da:	80 a9       	ldd	r24, Z+48	; 0x30
     9dc:	80 68       	ori	r24, 0x80	; 128
     9de:	80 ab       	std	Z+48, r24	; 0x30
     9e0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     9e4:	a0 e4       	ldi	r26, 0x40	; 64
     9e6:	b1 e0       	ldi	r27, 0x01	; 1
     9e8:	7c 93       	st	X, r23
     9ea:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     9ee:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     9f8:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <auxDacBufLen>
     9fc:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     a00:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a04:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     a08:	6a e7       	ldi	r22, 0x7A	; 122
     a0a:	74 e2       	ldi	r23, 0x24	; 36
     a0c:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a10:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a14:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     a18:	8b e3       	ldi	r24, 0x3B	; 59
     a1a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a1e:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a22:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     a26:	8c 91       	ld	r24, X
     a28:	80 68       	ori	r24, 0x80	; 128
     a2a:	8c 93       	st	X, r24
     a2c:	10 8a       	std	Z+16, r1	; 0x10
     a2e:	50 8b       	std	Z+16, r21	; 0x10
     a30:	40 8b       	std	Z+16, r20	; 0x10
     a32:	c1 8b       	std	Z+17, r28	; 0x11
     a34:	81 e9       	ldi	r24, 0x91	; 145
     a36:	82 8b       	std	Z+18, r24	; 0x12
     a38:	33 8b       	std	Z+19, r19	; 0x13
     a3a:	47 e7       	ldi	r20, 0x77	; 119
     a3c:	51 e0       	ldi	r21, 0x01	; 1
     a3e:	44 8b       	std	Z+20, r20	; 0x14
     a40:	55 8b       	std	Z+21, r21	; 0x15
     a42:	20 8f       	std	Z+24, r18	; 0x18
     a44:	91 8f       	std	Z+25, r25	; 0x19
     a46:	12 8e       	std	Z+26, r1	; 0x1a
     a48:	8a e7       	ldi	r24, 0x7A	; 122
     a4a:	96 e2       	ldi	r25, 0x26	; 38
     a4c:	84 8f       	std	Z+28, r24	; 0x1c
     a4e:	95 8f       	std	Z+29, r25	; 0x1d
     a50:	16 8e       	std	Z+30, r1	; 0x1e
     a52:	80 89       	ldd	r24, Z+16	; 0x10
     a54:	80 68       	ori	r24, 0x80	; 128
     a56:	80 8b       	std	Z+16, r24	; 0x10
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <tiny_dma_set_mode_4>:
     a5c:	cf 93       	push	r28
     a5e:	c4 e0       	ldi	r28, 0x04	; 4
     a60:	c0 93 02 20 	sts	0x2002, r28	; 0x802002 <global_mode>
     a64:	1d de       	rcall	.-966    	; 0x6a0 <tiny_dma_flush>
     a66:	e0 e0       	ldi	r30, 0x00	; 0
     a68:	f1 e0       	ldi	r31, 0x01	; 1
     a6a:	10 a2       	std	Z+32, r1	; 0x20
     a6c:	80 e4       	ldi	r24, 0x40	; 64
     a6e:	80 a3       	std	Z+32, r24	; 0x20
     a70:	c0 a3       	std	Z+32, r28	; 0x20
     a72:	11 a2       	std	Z+33, r1	; 0x21
     a74:	12 a2       	std	Z+34, r1	; 0x22
     a76:	4b e4       	ldi	r20, 0x4B	; 75
     a78:	43 a3       	std	Z+35, r20	; 0x23
     a7a:	14 a2       	std	Z+36, r1	; 0x24
     a7c:	15 a2       	std	Z+37, r1	; 0x25
     a7e:	16 a2       	std	Z+38, r1	; 0x26
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	90 e2       	ldi	r25, 0x20	; 32
     a84:	80 a7       	std	Z+40, r24	; 0x28
     a86:	91 a7       	std	Z+41, r25	; 0x29
     a88:	12 a6       	std	Z+42, r1	; 0x2a
     a8a:	60 ea       	ldi	r22, 0xA0	; 160
     a8c:	64 a7       	std	Z+44, r22	; 0x2c
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	85 a7       	std	Z+45, r24	; 0x2d
     a92:	16 a6       	std	Z+46, r1	; 0x2e
     a94:	90 a1       	ldd	r25, Z+32	; 0x20
     a96:	90 6a       	ori	r25, 0xA0	; 160
     a98:	90 a3       	std	Z+32, r25	; 0x20
     a9a:	95 e5       	ldi	r25, 0x55	; 85
     a9c:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     aa0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     aa4:	a0 e4       	ldi	r26, 0x40	; 64
     aa6:	b1 e0       	ldi	r27, 0x01	; 1
     aa8:	94 e2       	ldi	r25, 0x24	; 36
     aaa:	9c 93       	st	X, r25
     aac:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ab0:	99 e5       	ldi	r25, 0x59	; 89
     ab2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     abc:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <auxDacBufLen>
     ac0:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     ac4:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ac8:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     acc:	2a e7       	ldi	r18, 0x7A	; 122
     ace:	34 e2       	ldi	r19, 0x24	; 36
     ad0:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     ad4:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     ad8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     adc:	9b e3       	ldi	r25, 0x3B	; 59
     ade:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ae2:	93 e0       	ldi	r25, 0x03	; 3
     ae4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     ae8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     aec:	2c 91       	ld	r18, X
     aee:	20 68       	ori	r18, 0x80	; 128
     af0:	2c 93       	st	X, r18
     af2:	c0 8b       	std	Z+16, r28	; 0x10
     af4:	91 8b       	std	Z+17, r25	; 0x11
     af6:	31 e9       	ldi	r19, 0x91	; 145
     af8:	32 8b       	std	Z+18, r19	; 0x12
     afa:	43 8b       	std	Z+19, r20	; 0x13
     afc:	47 e7       	ldi	r20, 0x77	; 119
     afe:	51 e0       	ldi	r21, 0x01	; 1
     b00:	44 8b       	std	Z+20, r20	; 0x14
     b02:	55 8b       	std	Z+21, r21	; 0x15
     b04:	60 8f       	std	Z+24, r22	; 0x18
     b06:	81 8f       	std	Z+25, r24	; 0x19
     b08:	12 8e       	std	Z+26, r1	; 0x1a
     b0a:	6a e7       	ldi	r22, 0x7A	; 122
     b0c:	76 e2       	ldi	r23, 0x26	; 38
     b0e:	64 8f       	std	Z+28, r22	; 0x1c
     b10:	75 8f       	std	Z+29, r23	; 0x1d
     b12:	16 8e       	std	Z+30, r1	; 0x1e
     b14:	20 89       	ldd	r18, Z+16	; 0x10
     b16:	20 68       	ori	r18, 0x80	; 128
     b18:	20 8b       	std	Z+16, r18	; 0x10
     b1a:	c0 ab       	std	Z+48, r28	; 0x30
     b1c:	91 ab       	std	Z+49, r25	; 0x31
     b1e:	32 ab       	std	Z+50, r19	; 0x32
     b20:	9a e4       	ldi	r25, 0x4A	; 74
     b22:	93 ab       	std	Z+51, r25	; 0x33
     b24:	44 ab       	std	Z+52, r20	; 0x34
     b26:	55 ab       	std	Z+53, r21	; 0x35
     b28:	93 ec       	ldi	r25, 0xC3	; 195
     b2a:	90 af       	std	Z+56, r25	; 0x38
     b2c:	81 af       	std	Z+57, r24	; 0x39
     b2e:	12 ae       	std	Z+58, r1	; 0x3a
     b30:	81 ef       	ldi	r24, 0xF1	; 241
     b32:	97 e2       	ldi	r25, 0x27	; 39
     b34:	84 af       	std	Z+60, r24	; 0x3c
     b36:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b3a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b3e:	80 a9       	ldd	r24, Z+48	; 0x30
     b40:	80 68       	ori	r24, 0x80	; 128
     b42:	80 ab       	std	Z+48, r24	; 0x30
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <tiny_dma_set_mode_5>:
     b48:	85 e0       	ldi	r24, 0x05	; 5
     b4a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     b4e:	a8 dd       	rcall	.-1200   	; 0x6a0 <tiny_dma_flush>
     b50:	e0 e0       	ldi	r30, 0x00	; 0
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	16 aa       	std	Z+54, r1	; 0x36
     b56:	34 e2       	ldi	r19, 0x24	; 36
     b58:	30 ab       	std	Z+48, r19	; 0x30
     b5a:	11 aa       	std	Z+49, r1	; 0x31
     b5c:	29 e5       	ldi	r18, 0x59	; 89
     b5e:	22 ab       	std	Z+50, r18	; 0x32
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	83 ab       	std	Z+51, r24	; 0x33
     b64:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     b68:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     b6c:	44 ab       	std	Z+52, r20	; 0x34
     b6e:	55 ab       	std	Z+53, r21	; 0x35
     b70:	4a e6       	ldi	r20, 0x6A	; 106
     b72:	52 e2       	ldi	r21, 0x22	; 34
     b74:	40 af       	std	Z+56, r20	; 0x38
     b76:	51 af       	std	Z+57, r21	; 0x39
     b78:	12 ae       	std	Z+58, r1	; 0x3a
     b7a:	99 e3       	ldi	r25, 0x39	; 57
     b7c:	94 af       	std	Z+60, r25	; 0x3c
     b7e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b82:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b86:	90 a9       	ldd	r25, Z+48	; 0x30
     b88:	90 68       	ori	r25, 0x80	; 128
     b8a:	90 ab       	std	Z+48, r25	; 0x30
     b8c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b90:	e0 e4       	ldi	r30, 0x40	; 64
     b92:	f1 e0       	ldi	r31, 0x01	; 1
     b94:	30 83       	st	Z, r19
     b96:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b9a:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b9e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ba2:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <dacBuf_len>
     ba6:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <dacBuf_len+0x1>
     baa:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bae:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     bb2:	2a e7       	ldi	r18, 0x7A	; 122
     bb4:	34 e2       	ldi	r19, 0x24	; 36
     bb6:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     bba:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     bbe:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     bc2:	9b e3       	ldi	r25, 0x3B	; 59
     bc4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     bc8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     bcc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     bd0:	80 81       	ld	r24, Z
     bd2:	80 68       	ori	r24, 0x80	; 128
     bd4:	80 83       	st	Z, r24
     bd6:	08 95       	ret

00000bd8 <tiny_dma_set_mode_6>:
     bd8:	86 e0       	ldi	r24, 0x06	; 6
     bda:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
     bde:	60 dd       	rcall	.-1344   	; 0x6a0 <tiny_dma_flush>
     be0:	e0 e0       	ldi	r30, 0x00	; 0
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	16 aa       	std	Z+54, r1	; 0x36
     be6:	94 e2       	ldi	r25, 0x24	; 36
     be8:	90 ab       	std	Z+48, r25	; 0x30
     bea:	11 aa       	std	Z+49, r1	; 0x31
     bec:	39 e5       	ldi	r19, 0x59	; 89
     bee:	32 ab       	std	Z+50, r19	; 0x32
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	83 ab       	std	Z+51, r24	; 0x33
     bf4:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     bf8:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     bfc:	44 ab       	std	Z+52, r20	; 0x34
     bfe:	55 ab       	std	Z+53, r21	; 0x35
     c00:	4a e6       	ldi	r20, 0x6A	; 106
     c02:	52 e2       	ldi	r21, 0x22	; 34
     c04:	40 af       	std	Z+56, r20	; 0x38
     c06:	51 af       	std	Z+57, r21	; 0x39
     c08:	12 ae       	std	Z+58, r1	; 0x3a
     c0a:	29 e3       	ldi	r18, 0x39	; 57
     c0c:	24 af       	std	Z+60, r18	; 0x3c
     c0e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c12:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c16:	20 a9       	ldd	r18, Z+48	; 0x30
     c18:	20 68       	ori	r18, 0x80	; 128
     c1a:	20 ab       	std	Z+48, r18	; 0x30
     c1c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c20:	a0 e4       	ldi	r26, 0x40	; 64
     c22:	b1 e0       	ldi	r27, 0x01	; 1
     c24:	9c 93       	st	X, r25
     c26:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c2a:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c2e:	32 e0       	ldi	r19, 0x02	; 2
     c30:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c34:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <auxDacBufLen>
     c38:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     c3c:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c40:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c44:	4a e7       	ldi	r20, 0x7A	; 122
     c46:	54 e2       	ldi	r21, 0x24	; 36
     c48:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c4c:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c50:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c54:	2b e3       	ldi	r18, 0x3B	; 59
     c56:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c5a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c5e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c62:	2c 91       	ld	r18, X
     c64:	20 68       	ori	r18, 0x80	; 128
     c66:	2c 93       	st	X, r18
     c68:	10 8a       	std	Z+16, r1	; 0x10
     c6a:	20 e4       	ldi	r18, 0x40	; 64
     c6c:	20 8b       	std	Z+16, r18	; 0x10
     c6e:	24 e0       	ldi	r18, 0x04	; 4
     c70:	20 8b       	std	Z+16, r18	; 0x10
     c72:	81 8b       	std	Z+17, r24	; 0x11
     c74:	81 e9       	ldi	r24, 0x91	; 145
     c76:	82 8b       	std	Z+18, r24	; 0x12
     c78:	80 e1       	ldi	r24, 0x10	; 16
     c7a:	83 8b       	std	Z+19, r24	; 0x13
     c7c:	4e ee       	ldi	r20, 0xEE	; 238
     c7e:	52 e0       	ldi	r21, 0x02	; 2
     c80:	44 8b       	std	Z+20, r20	; 0x14
     c82:	55 8b       	std	Z+21, r21	; 0x15
     c84:	90 8f       	std	Z+24, r25	; 0x18
     c86:	31 8f       	std	Z+25, r19	; 0x19
     c88:	12 8e       	std	Z+26, r1	; 0x1a
     c8a:	8a e7       	ldi	r24, 0x7A	; 122
     c8c:	96 e2       	ldi	r25, 0x26	; 38
     c8e:	84 8f       	std	Z+28, r24	; 0x1c
     c90:	95 8f       	std	Z+29, r25	; 0x1d
     c92:	16 8e       	std	Z+30, r1	; 0x1e
     c94:	80 89       	ldd	r24, Z+16	; 0x10
     c96:	80 68       	ori	r24, 0x80	; 128
     c98:	80 8b       	std	Z+16, r24	; 0x10
     c9a:	08 95       	ret

00000c9c <tiny_dma_set_mode_7>:
	return;
}

void tiny_dma_set_mode_7(void){
		
		global_mode = 7;
     c9c:	87 e0       	ldi	r24, 0x07	; 7
     c9e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_mode>
		
		tiny_dma_flush();
     ca2:	fe dc       	rcall	.-1540   	; 0x6a0 <tiny_dma_flush>
		
		DMA.CH2.REPCNT = 0; //Repeat forever!
     ca4:	e0 e0       	ldi	r30, 0x00	; 0
     ca6:	f1 e0       	ldi	r31, 0x01	; 1
     ca8:	16 aa       	std	Z+54, r1	; 0x36
		DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     caa:	94 e2       	ldi	r25, 0x24	; 36
     cac:	90 ab       	std	Z+48, r25	; 0x30
		DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     cae:	11 aa       	std	Z+49, r1	; 0x31
		DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     cb0:	39 e5       	ldi	r19, 0x59	; 89
     cb2:	32 ab       	std	Z+50, r19	; 0x32
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	83 ab       	std	Z+51, r24	; 0x33
		DMA.CH2.TRFCNT = dacBuf_len;
     cb8:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <dacBuf_len>
     cbc:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <dacBuf_len+0x1>
     cc0:	44 ab       	std	Z+52, r20	; 0x34
     cc2:	55 ab       	std	Z+53, r21	; 0x35

		DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     cc4:	4a e6       	ldi	r20, 0x6A	; 106
     cc6:	52 e2       	ldi	r21, 0x22	; 34
     cc8:	40 af       	std	Z+56, r20	; 0x38
		DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     cca:	51 af       	std	Z+57, r21	; 0x39
		DMA.CH2.SRCADDR2 = 0x00;
     ccc:	12 ae       	std	Z+58, r1	; 0x3a
			
		DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     cce:	29 e3       	ldi	r18, 0x39	; 57
     cd0:	24 af       	std	Z+60, r18	; 0x3c
		DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     cd2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
		DMA.CH2.DESTADDR2 = 0x00;
     cd6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
			
		//Must enable last for REPCNT won't work!
		DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     cda:	20 a9       	ldd	r18, Z+48	; 0x30
     cdc:	20 68       	ori	r18, 0x80	; 128
     cde:	20 ab       	std	Z+48, r18	; 0x30
		
		DMA.CH3.REPCNT = 0; //Repeat forever!
     ce0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
		DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     ce4:	a0 e4       	ldi	r26, 0x40	; 64
     ce6:	b1 e0       	ldi	r27, 0x01	; 1
     ce8:	9c 93       	st	X, r25
		DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     cea:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
		DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     cee:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     cf2:	32 e0       	ldi	r19, 0x02	; 2
     cf4:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
		DMA.CH3.TRFCNT = auxDacBufLen;
     cf8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <auxDacBufLen>
     cfc:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <auxDacBufLen+0x1>
     d00:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d04:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

		DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     d08:	4a e7       	ldi	r20, 0x7A	; 122
     d0a:	54 e2       	ldi	r21, 0x24	; 36
     d0c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
		DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     d10:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
		DMA.CH3.SRCADDR2 = 0x00;
     d14:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
		DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     d18:	2b e3       	ldi	r18, 0x3B	; 59
     d1a:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
		DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     d1e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
		DMA.CH3.DESTADDR2 = 0x00;
     d22:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
		//Must enable last for REPCNT won't work!
		DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     d26:	2c 91       	ld	r18, X
     d28:	20 68       	ori	r18, 0x80	; 128
     d2a:	2c 93       	st	X, r18
		
		DMA.CH0.CTRLA = 0x00;
     d2c:	10 8a       	std	Z+16, r1	; 0x10
		DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     d2e:	20 e4       	ldi	r18, 0x40	; 64
     d30:	20 8b       	std	Z+16, r18	; 0x10
				
		DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     d32:	25 e0       	ldi	r18, 0x05	; 5
     d34:	20 8b       	std	Z+16, r18	; 0x10
		DMA.CH0.CTRLB = 0x03; //No interrupt!
     d36:	81 8b       	std	Z+17, r24	; 0x11
		DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     d38:	81 e9       	ldi	r24, 0x91	; 145
     d3a:	82 8b       	std	Z+18, r24	; 0x12
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     d3c:	80 e1       	ldi	r24, 0x10	; 16
     d3e:	83 8b       	std	Z+19, r24	; 0x13
		DMA.CH0.TRFCNT = PACKET_SIZE;
     d40:	4e ee       	ldi	r20, 0xEE	; 238
     d42:	52 e0       	ldi	r21, 0x02	; 2
     d44:	44 8b       	std	Z+20, r20	; 0x14
     d46:	55 8b       	std	Z+21, r21	; 0x15
				
		DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     d48:	90 8f       	std	Z+24, r25	; 0x18
		DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     d4a:	31 8f       	std	Z+25, r19	; 0x19
		DMA.CH0.SRCADDR2 = 0x00;
     d4c:	12 8e       	std	Z+26, r1	; 0x1a
				
		DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     d4e:	8a e7       	ldi	r24, 0x7A	; 122
     d50:	96 e2       	ldi	r25, 0x26	; 38
     d52:	84 8f       	std	Z+28, r24	; 0x1c
		DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     d54:	95 8f       	std	Z+29, r25	; 0x1d
		DMA.CH0.DESTADDR2 = 0x00;
     d56:	16 8e       	std	Z+30, r1	; 0x1e
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     d58:	80 89       	ldd	r24, Z+16	; 0x10
     d5a:	80 68       	ori	r24, 0x80	; 128
     d5c:	80 8b       	std	Z+16, r24	; 0x10
     d5e:	08 95       	ret

00000d60 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     d60:	e0 e7       	ldi	r30, 0x70	; 112
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	83 81       	ldd	r24, Z+3	; 0x03
     d66:	8c 7f       	andi	r24, 0xFC	; 252
     d68:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     d6a:	84 81       	ldd	r24, Z+4	; 0x04
     d6c:	8c 7f       	andi	r24, 0xFC	; 252
     d6e:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     d70:	80 81       	ld	r24, Z
     d72:	8d 7f       	andi	r24, 0xFD	; 253
     d74:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     d76:	e0 e8       	ldi	r30, 0x80	; 128
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	80 ec       	ldi	r24, 0xC0	; 192
     d7c:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     d7e:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
     d80:	88 ec       	ldi	r24, 0xC8	; 200
     d82:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     d84:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b8 e0       	ldi	r27, 0x08	; 8
     d8a:	34 e0       	ldi	r19, 0x04	; 4
     d8c:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     d8e:	23 e0       	ldi	r18, 0x03	; 3
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	2c 93       	st	X, r18
     d94:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     d96:	14 96       	adiw	r26, 0x04	; 4
     d98:	1c 92       	st	X, r1
     d9a:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
     d9c:	85 ed       	ldi	r24, 0xD5	; 213
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	96 96       	adiw	r26, 0x26	; 38
     da2:	8d 93       	st	X+, r24
     da4:	9c 93       	st	X, r25
     da6:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
     da8:	16 96       	adiw	r26, 0x06	; 6
     daa:	1c 92       	st	X, r1
     dac:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     dae:	e0 e4       	ldi	r30, 0x40	; 64
     db0:	f8 e0       	ldi	r31, 0x08	; 8
     db2:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     db4:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
     db6:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
     db8:	86 a3       	std	Z+38, r24	; 0x26
     dba:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
     dbc:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
     dbe:	e0 e6       	ldi	r30, 0x60	; 96
     dc0:	f6 e0       	ldi	r31, 0x06	; 6
     dc2:	80 81       	ld	r24, Z
     dc4:	80 61       	ori	r24, 0x10	; 16
     dc6:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
     dc8:	e0 e4       	ldi	r30, 0x40	; 64
     dca:	f9 e0       	ldi	r31, 0x09	; 9
     dcc:	83 e1       	ldi	r24, 0x13	; 19
     dce:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
     dd0:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
     dd6:	a6 a3       	std	Z+38, r26	; 0x26
     dd8:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
     dda:	10 a6       	std	Z+40, r1	; 0x28
     ddc:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 83       	st	Z, r24
     de2:	08 95       	ret

00000de4 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	1f 92       	push	r1
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
     e0e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <global_mode>
     e12:	87 30       	cpi	r24, 0x07	; 7
     e14:	31 f4       	brne	.+12     	; 0xe22 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
     e16:	e0 e0       	ldi	r30, 0x00	; 0
     e18:	f2 e0       	ldi	r31, 0x02	; 2
     e1a:	84 a5       	ldd	r24, Z+44	; 0x2c
     e1c:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
     e1e:	95 a5       	ldd	r25, Z+45	; 0x2d
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
     e22:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
     e26:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <PSU_target>
     e2a:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
     e2c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e30:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	0c f4       	brge	.+2      	; 0xe3c <__vector_83+0x58>
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	99 23       	and	r25, r25
     e3e:	c9 f0       	breq	.+50     	; 0xe72 <__vector_83+0x8e>
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	2a 3f       	cpi	r18, 0xFA	; 250
     e44:	37 40       	sbci	r19, 0x07	; 7
     e46:	08 f0       	brcs	.+2      	; 0xe4a <__vector_83+0x66>
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	99 23       	and	r25, r25
     e4c:	91 f0       	breq	.+36     	; 0xe72 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
     e4e:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e52:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e56:	89 30       	cpi	r24, 0x09	; 9
     e58:	1c f4       	brge	.+6      	; 0xe60 <__vector_83+0x7c>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <__vector_83+0x80>
     e60:	86 e0       	ldi	r24, 0x06	; 6
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     e6c:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
     e70:	23 c0       	rjmp	.+70     	; 0xeb8 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
     e72:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e76:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	0c f0       	brlt	.+2      	; 0xe82 <__vector_83+0x9e>
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	99 23       	and	r25, r25
     e84:	c9 f0       	breq	.+50     	; 0xeb8 <__vector_83+0xd4>
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	27 30       	cpi	r18, 0x07	; 7
     e8a:	31 05       	cpc	r19, r1
     e8c:	08 f4       	brcc	.+2      	; 0xe90 <__vector_83+0xac>
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	99 23       	and	r25, r25
     e92:	91 f0       	breq	.+36     	; 0xeb8 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
     e94:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e98:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e9c:	88 3f       	cpi	r24, 0xF8	; 248
     e9e:	1c f0       	brlt	.+6      	; 0xea6 <__vector_83+0xc2>
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <__vector_83+0xc6>
     ea6:	86 e0       	ldi	r24, 0x06	; 6
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a9 01       	movw	r20, r18
     eac:	48 1b       	sub	r20, r24
     eae:	59 0b       	sbc	r21, r25
     eb0:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     eb4:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
     eb8:	0f 90       	pop	r0
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	0f 90       	pop	r0
     ed4:	1f 90       	pop	r1
     ed6:	18 95       	reti

00000ed8 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
     ed8:	e0 e7       	ldi	r30, 0x70	; 112
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	83 81       	ldd	r24, Z+3	; 0x03
     ede:	8f 7e       	andi	r24, 0xEF	; 239
     ee0:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
     ee2:	e0 e4       	ldi	r30, 0x40	; 64
     ee4:	f6 e0       	ldi	r31, 0x06	; 6
     ee6:	80 81       	ld	r24, Z
     ee8:	8a 6a       	ori	r24, 0xAA	; 170
     eea:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     ef0:	88 e5       	ldi	r24, 0x58	; 88
     ef2:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
     ef4:	e0 ea       	ldi	r30, 0xA0	; 160
     ef6:	f8 e0       	ldi	r31, 0x08	; 8
     ef8:	84 ec       	ldi	r24, 0xC4	; 196
     efa:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
     f00:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     f02:	88 e1       	ldi	r24, 0x18	; 24
     f04:	84 83       	std	Z+4, r24	; 0x04
     f06:	08 95       	ret

00000f08 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
     f08:	e0 e7       	ldi	r30, 0x70	; 112
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	83 81       	ldd	r24, Z+3	; 0x03
     f0e:	87 7f       	andi	r24, 0xF7	; 247
     f10:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
     f12:	e0 ec       	ldi	r30, 0xC0	; 192
     f14:	f8 e0       	ldi	r31, 0x08	; 8
     f16:	80 e4       	ldi	r24, 0x40	; 64
     f18:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     f1a:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     f1c:	88 e5       	ldi	r24, 0x58	; 88
     f1e:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
     f22:	08 95       	ret

00000f24 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
	asm("nop");
     f2e:	00 00       	nop
}
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f3a:	9f b7       	in	r25, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	e8 2f       	mov	r30, r24
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	e0 59       	subi	r30, 0x90	; 144
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	60 95       	com	r22
     f48:	80 81       	ld	r24, Z
     f4a:	68 23       	and	r22, r24
     f4c:	60 83       	st	Z, r22
     f4e:	9f bf       	out	0x3f, r25	; 63
     f50:	08 95       	ret

00000f52 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     f52:	86 30       	cpi	r24, 0x06	; 6
     f54:	11 f0       	breq	.+4      	; 0xf5a <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     f5a:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f5c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     f60:	81 fd       	sbrc	r24, 1
     f62:	26 c0       	rjmp	.+76     	; 0xfb0 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f64:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     f66:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f68:	e0 e5       	ldi	r30, 0x50	; 80
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f72:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f74:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f76:	81 ff       	sbrs	r24, 1
     f78:	fd cf       	rjmp	.-6      	; 0xf74 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f7a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     f7c:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     f7e:	a0 e5       	ldi	r26, 0x50	; 80
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	16 96       	adiw	r26, 0x06	; 6
     f84:	8c 91       	ld	r24, X
     f86:	16 97       	sbiw	r26, 0x06	; 6
     f88:	89 7f       	andi	r24, 0xF9	; 249
     f8a:	16 96       	adiw	r26, 0x06	; 6
     f8c:	8c 93       	st	X, r24
     f8e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     f90:	e0 e6       	ldi	r30, 0x60	; 96
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 e8       	ldi	r24, 0x80	; 128
     f96:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     f98:	8b eb       	ldi	r24, 0xBB	; 187
     f9a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     f9c:	16 96       	adiw	r26, 0x06	; 6
     f9e:	8c 91       	ld	r24, X
     fa0:	16 97       	sbiw	r26, 0x06	; 6
     fa2:	84 60       	ori	r24, 0x04	; 4
     fa4:	16 96       	adiw	r26, 0x06	; 6
     fa6:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     fa8:	80 81       	ld	r24, Z
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fae:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     fb0:	63 60       	ori	r22, 0x03	; 3
     fb2:	84 e4       	ldi	r24, 0x44	; 68
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	18 d5       	rcall	.+2608   	; 0x19e8 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     fb8:	60 e4       	ldi	r22, 0x40	; 64
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	be cf       	rjmp	.-132    	; 0xf3a <sysclk_enable_module>
     fbe:	08 95       	ret

00000fc0 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
     fc0:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <udi_vendor_alternate_setting>
     fc4:	08 95       	ret

00000fc6 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
     fc6:	40 d1       	rcall	.+640    	; 0x1248 <udc_get_interface_desc>
     fc8:	fc 01       	movw	r30, r24
     fca:	83 81       	ldd	r24, Z+3	; 0x03
     fcc:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
     fd0:	81 11       	cpse	r24, r1
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
     fd4:	93 ca       	rjmp	.-2778   	; 0x4fc <main_vendor_enable>
     fd6:	08 95       	ret
			return false;
		}
	}
	return true;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
}
     fda:	08 95       	ret

00000fdc <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
     fdc:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <udi_vendor_alternate_setting>
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
     fe4:	a7 ca       	rjmp	.-2738   	; 0x534 <main_vendor_disable>
     fe6:	08 95       	ret

00000fe8 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
     fe8:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
     fec:	88 23       	and	r24, r24
     fee:	4c f4       	brge	.+18     	; 0x1002 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
     ff0:	80 76       	andi	r24, 0x60	; 96
     ff2:	80 34       	cpi	r24, 0x40	; 64
     ff4:	a9 f4       	brne	.+42     	; 0x1020 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
     ff6:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
     ffa:	81 11       	cpse	r24, r1
     ffc:	13 c0       	rjmp	.+38     	; 0x1024 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
     ffe:	9f ca       	rjmp	.-2754   	; 0x53e <main_setup_in_received>
    1000:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1002:	80 76       	andi	r24, 0x60	; 96
    1004:	80 34       	cpi	r24, 0x40	; 64
    1006:	81 f4       	brne	.+32     	; 0x1028 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1008:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    100c:	81 11       	cpse	r24, r1
    100e:	0e c0       	rjmp	.+28     	; 0x102c <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1010:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1014:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1018:	89 2b       	or	r24, r25
    101a:	51 f0       	breq	.+20     	; 0x1030 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    101c:	8e ca       	rjmp	.-2788   	; 0x53a <main_setup_out_received>
    101e:	08 95       	ret
		}
	}
	return false; // Not supported request
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	08 95       	ret
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	08 95       	ret
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	08 95       	ret
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	08 95       	ret
    1030:	80 e0       	ldi	r24, 0x00	; 0
}
    1032:	08 95       	ret

00001034 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    103a:	8a 01       	movw	r16, r20
    103c:	ac 01       	movw	r20, r24
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	81 e8       	ldi	r24, 0x81	; 129
    1042:	0e 94 68 11 	call	0x22d0	; 0x22d0 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	08 95       	ret

0000104c <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    1052:	8a 01       	movw	r16, r20
    1054:	ac 01       	movw	r20, r24
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	82 e8       	ldi	r24, 0x82	; 130
    105a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	08 95       	ret

00001064 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    106a:	8a 01       	movw	r16, r20
    106c:	ac 01       	movw	r20, r24
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	83 e8       	ldi	r24, 0x83	; 131
    1072:	0e 94 68 11 	call	0x22d0	; 0x22d0 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    107c:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1080:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1084:	01 90       	ld	r0, Z+
    1086:	f0 81       	ld	r31, Z
    1088:	e0 2d       	mov	r30, r0
    108a:	22 81       	ldd	r18, Z+2	; 0x02
    108c:	33 81       	ldd	r19, Z+3	; 0x03
    108e:	2e 0f       	add	r18, r30
    1090:	3f 1f       	adc	r19, r31
    1092:	fc 01       	movw	r30, r24
    1094:	40 81       	ld	r20, Z
    1096:	e4 0f       	add	r30, r20
    1098:	f1 1d       	adc	r31, r1
    109a:	e2 17       	cp	r30, r18
    109c:	f3 07       	cpc	r31, r19
    109e:	b8 f4       	brcc	.+46     	; 0x10ce <udc_next_desc_in_iface+0x52>
    10a0:	81 81       	ldd	r24, Z+1	; 0x01
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	b9 f0       	breq	.+46     	; 0x10d4 <udc_next_desc_in_iface+0x58>
    10a6:	86 13       	cpse	r24, r22
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <udc_next_desc_in_iface+0x40>
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <udc_next_desc_in_iface+0x3a>
    10ac:	81 81       	ldd	r24, Z+1	; 0x01
    10ae:	84 30       	cpi	r24, 0x04	; 4
    10b0:	a1 f0       	breq	.+40     	; 0x10da <udc_next_desc_in_iface+0x5e>
    10b2:	86 13       	cpse	r24, r22
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <udc_next_desc_in_iface+0x40>
    10b6:	8e 2f       	mov	r24, r30
    10b8:	9f 2f       	mov	r25, r31
    10ba:	08 95       	ret
    10bc:	80 81       	ld	r24, Z
    10be:	e8 0f       	add	r30, r24
    10c0:	f1 1d       	adc	r31, r1
    10c2:	e2 17       	cp	r30, r18
    10c4:	f3 07       	cpc	r31, r19
    10c6:	90 f3       	brcs	.-28     	; 0x10ac <udc_next_desc_in_iface+0x30>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	08 95       	ret
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	08 95       	ret
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	08 95       	ret
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	08 95       	ret

000010e0 <udc_valid_address>:
    10e0:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    10e4:	8f 77       	andi	r24, 0x7F	; 127
    10e6:	0c 94 96 10 	jmp	0x212c	; 0x212c <udd_set_address>
    10ea:	08 95       	ret

000010ec <udc_update_iface_desc>:
    10ec:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <udc_num_configuration>
    10f0:	99 23       	and	r25, r25
    10f2:	81 f1       	breq	.+96     	; 0x1154 <udc_update_iface_desc+0x68>
    10f4:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    10f8:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    10fc:	01 90       	ld	r0, Z+
    10fe:	f0 81       	ld	r31, Z
    1100:	e0 2d       	mov	r30, r0
    1102:	94 81       	ldd	r25, Z+4	; 0x04
    1104:	89 17       	cp	r24, r25
    1106:	40 f5       	brcc	.+80     	; 0x1158 <udc_update_iface_desc+0x6c>
    1108:	e0 93 c6 20 	sts	0x20C6, r30	; 0x8020c6 <udc_ptr_iface>
    110c:	f0 93 c7 20 	sts	0x20C7, r31	; 0x8020c7 <udc_ptr_iface+0x1>
    1110:	22 81       	ldd	r18, Z+2	; 0x02
    1112:	33 81       	ldd	r19, Z+3	; 0x03
    1114:	2e 0f       	add	r18, r30
    1116:	3f 1f       	adc	r19, r31
    1118:	e2 17       	cp	r30, r18
    111a:	f3 07       	cpc	r31, r19
    111c:	f8 f4       	brcc	.+62     	; 0x115c <udc_update_iface_desc+0x70>
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	94 30       	cpi	r25, 0x04	; 4
    1122:	61 f4       	brne	.+24     	; 0x113c <udc_update_iface_desc+0x50>
    1124:	92 81       	ldd	r25, Z+2	; 0x02
    1126:	98 13       	cpse	r25, r24
    1128:	09 c0       	rjmp	.+18     	; 0x113c <udc_update_iface_desc+0x50>
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	96 13       	cpse	r25, r22
    112e:	06 c0       	rjmp	.+12     	; 0x113c <udc_update_iface_desc+0x50>
    1130:	e0 93 c6 20 	sts	0x20C6, r30	; 0x8020c6 <udc_ptr_iface>
    1134:	f0 93 c7 20 	sts	0x20C7, r31	; 0x8020c7 <udc_ptr_iface+0x1>
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	08 95       	ret
    113c:	90 81       	ld	r25, Z
    113e:	e9 0f       	add	r30, r25
    1140:	f1 1d       	adc	r31, r1
    1142:	e2 17       	cp	r30, r18
    1144:	f3 07       	cpc	r31, r19
    1146:	58 f3       	brcs	.-42     	; 0x111e <udc_update_iface_desc+0x32>
    1148:	e0 93 c6 20 	sts	0x20C6, r30	; 0x8020c6 <udc_ptr_iface>
    114c:	f0 93 c7 20 	sts	0x20C7, r31	; 0x8020c7 <udc_ptr_iface+0x1>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	08 95       	ret
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	08 95       	ret
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	08 95       	ret

00001160 <udc_iface_disable>:
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	c8 2f       	mov	r28, r24
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	be df       	rcall	.-132    	; 0x10ec <udc_update_iface_desc>
    1170:	18 2f       	mov	r17, r24
    1172:	88 23       	and	r24, r24
    1174:	81 f1       	breq	.+96     	; 0x11d6 <udc_iface_disable+0x76>
    1176:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    117a:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    117e:	ec 2f       	mov	r30, r28
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	12 96       	adiw	r26, 0x02	; 2
    1188:	8d 91       	ld	r24, X+
    118a:	9c 91       	ld	r25, X
    118c:	13 97       	sbiw	r26, 0x03	; 3
    118e:	e8 0f       	add	r30, r24
    1190:	f9 1f       	adc	r31, r25
    1192:	e0 80       	ld	r14, Z
    1194:	f1 80       	ldd	r15, Z+1	; 0x01
    1196:	d7 01       	movw	r26, r14
    1198:	16 96       	adiw	r26, 0x06	; 6
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	17 97       	sbiw	r26, 0x07	; 7
    11a0:	09 95       	icall
    11a2:	68 2f       	mov	r22, r24
    11a4:	8c 2f       	mov	r24, r28
    11a6:	a2 df       	rcall	.-188    	; 0x10ec <udc_update_iface_desc>
    11a8:	18 2f       	mov	r17, r24
    11aa:	88 23       	and	r24, r24
    11ac:	a1 f0       	breq	.+40     	; 0x11d6 <udc_iface_disable+0x76>
    11ae:	c0 91 c6 20 	lds	r28, 0x20C6	; 0x8020c6 <udc_ptr_iface>
    11b2:	d0 91 c7 20 	lds	r29, 0x20C7	; 0x8020c7 <udc_ptr_iface+0x1>
    11b6:	65 e0       	ldi	r22, 0x05	; 5
    11b8:	ce 01       	movw	r24, r28
    11ba:	60 df       	rcall	.-320    	; 0x107c <udc_next_desc_in_iface>
    11bc:	ec 01       	movw	r28, r24
    11be:	89 2b       	or	r24, r25
    11c0:	21 f0       	breq	.+8      	; 0x11ca <udc_iface_disable+0x6a>
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <udd_ep_free>
    11c8:	f6 cf       	rjmp	.-20     	; 0x11b6 <udc_iface_disable+0x56>
    11ca:	d7 01       	movw	r26, r14
    11cc:	12 96       	adiw	r26, 0x02	; 2
    11ce:	ed 91       	ld	r30, X+
    11d0:	fc 91       	ld	r31, X
    11d2:	13 97       	sbiw	r26, 0x03	; 3
    11d4:	09 95       	icall
    11d6:	81 2f       	mov	r24, r17
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	08 95       	ret

000011e4 <udc_iface_enable>:
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	18 2f       	mov	r17, r24
    11ec:	7f df       	rcall	.-258    	; 0x10ec <udc_update_iface_desc>
    11ee:	88 23       	and	r24, r24
    11f0:	39 f1       	breq	.+78     	; 0x1240 <udc_iface_enable+0x5c>
    11f2:	c0 91 c6 20 	lds	r28, 0x20C6	; 0x8020c6 <udc_ptr_iface>
    11f6:	d0 91 c7 20 	lds	r29, 0x20C7	; 0x8020c7 <udc_ptr_iface+0x1>
    11fa:	65 e0       	ldi	r22, 0x05	; 5
    11fc:	ce 01       	movw	r24, r28
    11fe:	3e df       	rcall	.-388    	; 0x107c <udc_next_desc_in_iface>
    1200:	ec 01       	movw	r28, r24
    1202:	89 2b       	or	r24, r25
    1204:	41 f0       	breq	.+16     	; 0x1216 <udc_iface_enable+0x32>
    1206:	4c 81       	ldd	r20, Y+4	; 0x04
    1208:	5d 81       	ldd	r21, Y+5	; 0x05
    120a:	6b 81       	ldd	r22, Y+3	; 0x03
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	9b d7       	rcall	.+3894   	; 0x2146 <udd_ep_alloc>
    1210:	81 11       	cpse	r24, r1
    1212:	f3 cf       	rjmp	.-26     	; 0x11fa <udc_iface_enable+0x16>
    1214:	15 c0       	rjmp	.+42     	; 0x1240 <udc_iface_enable+0x5c>
    1216:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    121a:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    121e:	e1 2f       	mov	r30, r17
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	12 96       	adiw	r26, 0x02	; 2
    1228:	8d 91       	ld	r24, X+
    122a:	9c 91       	ld	r25, X
    122c:	13 97       	sbiw	r26, 0x03	; 3
    122e:	e8 0f       	add	r30, r24
    1230:	f9 1f       	adc	r31, r25
    1232:	01 90       	ld	r0, Z+
    1234:	f0 81       	ld	r31, Z
    1236:	e0 2d       	mov	r30, r0
    1238:	01 90       	ld	r0, Z+
    123a:	f0 81       	ld	r31, Z
    123c:	e0 2d       	mov	r30, r0
    123e:	09 95       	icall
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	08 95       	ret

00001248 <udc_get_interface_desc>:
    1248:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udc_ptr_iface>
    124c:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <udc_ptr_iface+0x1>
    1250:	08 95       	ret

00001252 <udc_start>:
    1252:	e7 c6       	rjmp	.+3534   	; 0x2022 <udd_enable>
    1254:	08 95       	ret

00001256 <udc_reset>:
    1256:	cf 93       	push	r28
    1258:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    125c:	88 23       	and	r24, r24
    125e:	c1 f0       	breq	.+48     	; 0x1290 <udc_reset+0x3a>
    1260:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1264:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1268:	01 90       	ld	r0, Z+
    126a:	f0 81       	ld	r31, Z
    126c:	e0 2d       	mov	r30, r0
    126e:	84 81       	ldd	r24, Z+4	; 0x04
    1270:	88 23       	and	r24, r24
    1272:	71 f0       	breq	.+28     	; 0x1290 <udc_reset+0x3a>
    1274:	c0 e0       	ldi	r28, 0x00	; 0
    1276:	8c 2f       	mov	r24, r28
    1278:	73 df       	rcall	.-282    	; 0x1160 <udc_iface_disable>
    127a:	cf 5f       	subi	r28, 0xFF	; 255
    127c:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1280:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1284:	01 90       	ld	r0, Z+
    1286:	f0 81       	ld	r31, Z
    1288:	e0 2d       	mov	r30, r0
    128a:	84 81       	ldd	r24, Z+4	; 0x04
    128c:	c8 17       	cp	r28, r24
    128e:	98 f3       	brcs	.-26     	; 0x1276 <udc_reset+0x20>
    1290:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <udc_num_configuration>
    1294:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <udc_device_status>
    1298:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <udc_device_status+0x1>
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    12a0:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    12a2:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    12a6:	88 23       	and	r24, r24
    12a8:	49 f1       	breq	.+82     	; 0x12fc <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12aa:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    12ae:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    12b2:	ed 91       	ld	r30, X+
    12b4:	fc 91       	ld	r31, X
    12b6:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    12b8:	84 81       	ldd	r24, Z+4	; 0x04
    12ba:	88 23       	and	r24, r24
    12bc:	f9 f0       	breq	.+62     	; 0x12fc <udc_sof_notify+0x5c>
    12be:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    12c0:	ec 2f       	mov	r30, r28
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	8d 91       	ld	r24, X+
    12cc:	9c 91       	ld	r25, X
    12ce:	13 97       	sbiw	r26, 0x03	; 3
    12d0:	e8 0f       	add	r30, r24
    12d2:	f9 1f       	adc	r31, r25
    12d4:	01 90       	ld	r0, Z+
    12d6:	f0 81       	ld	r31, Z
    12d8:	e0 2d       	mov	r30, r0
    12da:	00 84       	ldd	r0, Z+8	; 0x08
    12dc:	f1 85       	ldd	r31, Z+9	; 0x09
    12de:	e0 2d       	mov	r30, r0
    12e0:	30 97       	sbiw	r30, 0x00	; 0
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    12e4:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    12e6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12e8:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    12ec:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    12f0:	ed 91       	ld	r30, X+
    12f2:	fc 91       	ld	r31, X
    12f4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    12f6:	84 81       	ldd	r24, Z+4	; 0x04
    12f8:	c8 17       	cp	r28, r24
    12fa:	10 f3       	brcs	.-60     	; 0x12c0 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    12fc:	cf 91       	pop	r28
    12fe:	08 95       	ret

00001300 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1308:	ea e6       	ldi	r30, 0x6A	; 106
    130a:	f4 e2       	ldi	r31, 0x24	; 36
    130c:	12 86       	std	Z+10, r1	; 0x0a
    130e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1310:	14 86       	std	Z+12, r1	; 0x0c
    1312:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1314:	16 86       	std	Z+14, r1	; 0x0e
    1316:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1318:	80 81       	ld	r24, Z
    131a:	88 23       	and	r24, r24
    131c:	3c f4       	brge	.+14     	; 0x132c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    131e:	20 91 70 24 	lds	r18, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1322:	30 91 71 24 	lds	r19, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1326:	23 2b       	or	r18, r19
    1328:	09 f4       	brne	.+2      	; 0x132c <udc_process_setup+0x2c>
    132a:	52 c3       	rjmp	.+1700   	; 0x19d0 <udc_process_setup+0x6d0>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    132c:	80 76       	andi	r24, 0x60	; 96
    132e:	80 34       	cpi	r24, 0x40	; 64
    1330:	09 f0       	breq	.+2      	; 0x1334 <udc_process_setup+0x34>
    1332:	f0 c0       	rjmp	.+480    	; 0x1514 <udc_process_setup+0x214>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    1334:	e0 91 6b 24 	lds	r30, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1338:	8e 2f       	mov	r24, r30
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	fc 01       	movw	r30, r24
    133e:	e0 5a       	subi	r30, 0xA0	; 160
    1340:	f1 09       	sbc	r31, r1
    1342:	e8 30       	cpi	r30, 0x08	; 8
    1344:	f1 05       	cpc	r31, r1
    1346:	08 f0       	brcs	.+2      	; 0x134a <udc_process_setup+0x4a>
    1348:	dc c0       	rjmp	.+440    	; 0x1502 <udc_process_setup+0x202>
    134a:	e2 50       	subi	r30, 0x02	; 2
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    1352:	00 00       	nop
    1354:	41 c3       	rjmp	.+1666   	; 0x19d8 <udc_process_setup+0x6d8>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1356:	e0 e0       	ldi	r30, 0x00	; 0
    1358:	f8 e0       	ldi	r31, 0x08	; 8
    135a:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    135c:	ca e6       	ldi	r28, 0x6A	; 106
    135e:	d4 e2       	ldi	r29, 0x24	; 36
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	9b 81       	ldd	r25, Y+3	; 0x03
    1364:	86 ab       	std	Z+54, r24	; 0x36
    1366:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	8f 70       	andi	r24, 0x0F	; 15
    136c:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    136e:	6e 81       	ldd	r22, Y+6	; 0x06
    1370:	7f 81       	ldd	r23, Y+7	; 0x07
    1372:	8a e6       	ldi	r24, 0x6A	; 106
    1374:	92 e2       	ldi	r25, 0x22	; 34
    1376:	e0 d6       	rcall	.+3520   	; 0x2138 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	9f 81       	ldd	r25, Y+7	; 0x07
    137c:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <dacBuf_len>
    1380:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <dacBuf_len+0x1>
    1384:	82 17       	cp	r24, r18
    1386:	93 07       	cpc	r25, r19
    1388:	09 f4       	brne	.+2      	; 0x138c <udc_process_setup+0x8c>
    138a:	26 c3       	rjmp	.+1612   	; 0x19d8 <udc_process_setup+0x6d8>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    138c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <dacBuf_len>
    1390:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <dacBuf_len+0x1>
				switch(global_mode){
    1394:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <global_mode>
    1398:	8e 2f       	mov	r24, r30
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	88 30       	cpi	r24, 0x08	; 8
    139e:	91 05       	cpc	r25, r1
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <udc_process_setup+0xa4>
    13a2:	b1 c0       	rjmp	.+354    	; 0x1506 <udc_process_setup+0x206>
    13a4:	fc 01       	movw	r30, r24
    13a6:	ea 5f       	subi	r30, 0xFA	; 250
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    13ae:	8d d9       	rcall	.-3302   	; 0x6ca <tiny_dma_set_mode_0>
    13b0:	13 c3       	rjmp	.+1574   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 1:
					tiny_dma_set_mode_1();
    13b2:	eb d9       	rcall	.-3114   	; 0x78a <tiny_dma_set_mode_1>
    13b4:	11 c3       	rjmp	.+1570   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 2:
					tiny_dma_set_mode_2();
    13b6:	61 da       	rcall	.-2878   	; 0x87a <tiny_dma_set_mode_2>
    13b8:	0f c3       	rjmp	.+1566   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 3:
					tiny_dma_set_mode_3();
    13ba:	d4 da       	rcall	.-2648   	; 0x964 <tiny_dma_set_mode_3>
    13bc:	0d c3       	rjmp	.+1562   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 4:
					tiny_dma_set_mode_4();
    13be:	4e db       	rcall	.-2404   	; 0xa5c <tiny_dma_set_mode_4>
    13c0:	0b c3       	rjmp	.+1558   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 5:
					tiny_dma_set_mode_5();
    13c2:	c2 db       	rcall	.-2172   	; 0xb48 <tiny_dma_set_mode_5>
    13c4:	09 c3       	rjmp	.+1554   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 6:
					tiny_dma_set_mode_6();
    13c6:	08 dc       	rcall	.-2032   	; 0xbd8 <tiny_dma_set_mode_6>
    13c8:	07 c3       	rjmp	.+1550   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 7:
					tiny_dma_set_mode_7();
    13ca:	68 dc       	rcall	.-1840   	; 0xc9c <tiny_dma_set_mode_7>
    13cc:	05 c3       	rjmp	.+1546   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    13ce:	e0 e4       	ldi	r30, 0x40	; 64
    13d0:	f8 e0       	ldi	r31, 0x08	; 8
    13d2:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    13d4:	ca e6       	ldi	r28, 0x6A	; 106
    13d6:	d4 e2       	ldi	r29, 0x24	; 36
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	9b 81       	ldd	r25, Y+3	; 0x03
    13dc:	86 ab       	std	Z+54, r24	; 0x36
    13de:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	8f 70       	andi	r24, 0x0F	; 15
    13e4:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    13e6:	6e 81       	ldd	r22, Y+6	; 0x06
    13e8:	7f 81       	ldd	r23, Y+7	; 0x07
    13ea:	8a e7       	ldi	r24, 0x7A	; 122
    13ec:	94 e2       	ldi	r25, 0x24	; 36
    13ee:	a4 d6       	rcall	.+3400   	; 0x2138 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	9f 81       	ldd	r25, Y+7	; 0x07
    13f4:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <auxDacBufLen>
    13f8:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <auxDacBufLen+0x1>
    13fc:	82 17       	cp	r24, r18
    13fe:	93 07       	cpc	r25, r19
    1400:	09 f4       	brne	.+2      	; 0x1404 <udc_process_setup+0x104>
    1402:	ea c2       	rjmp	.+1492   	; 0x19d8 <udc_process_setup+0x6d8>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1404:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <auxDacBufLen>
    1408:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <auxDacBufLen+0x1>
				switch(global_mode){
    140c:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <global_mode>
    1410:	8e 2f       	mov	r24, r30
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	88 30       	cpi	r24, 0x08	; 8
    1416:	91 05       	cpc	r25, r1
    1418:	08 f0       	brcs	.+2      	; 0x141c <udc_process_setup+0x11c>
    141a:	77 c0       	rjmp	.+238    	; 0x150a <udc_process_setup+0x20a>
    141c:	fc 01       	movw	r30, r24
    141e:	e2 5f       	subi	r30, 0xF2	; 242
    1420:	fe 4f       	sbci	r31, 0xFE	; 254
    1422:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1426:	51 d9       	rcall	.-3422   	; 0x6ca <tiny_dma_set_mode_0>
    1428:	d7 c2       	rjmp	.+1454   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 1:
					tiny_dma_set_mode_1();
    142a:	af d9       	rcall	.-3234   	; 0x78a <tiny_dma_set_mode_1>
    142c:	d5 c2       	rjmp	.+1450   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 2:
					tiny_dma_set_mode_2();
    142e:	25 da       	rcall	.-2998   	; 0x87a <tiny_dma_set_mode_2>
    1430:	d3 c2       	rjmp	.+1446   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1432:	98 da       	rcall	.-2768   	; 0x964 <tiny_dma_set_mode_3>
    1434:	d1 c2       	rjmp	.+1442   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1436:	12 db       	rcall	.-2524   	; 0xa5c <tiny_dma_set_mode_4>
    1438:	cf c2       	rjmp	.+1438   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 5:
					tiny_dma_set_mode_5();
    143a:	86 db       	rcall	.-2292   	; 0xb48 <tiny_dma_set_mode_5>
    143c:	cd c2       	rjmp	.+1434   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 6:
					tiny_dma_set_mode_6();
    143e:	cc db       	rcall	.-2152   	; 0xbd8 <tiny_dma_set_mode_6>
    1440:	cb c2       	rjmp	.+1430   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1442:	2c dc       	rcall	.-1960   	; 0xc9c <tiny_dma_set_mode_7>
    1444:	c9 c2       	rjmp	.+1426   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1446:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    144a:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    144e:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1452:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <PSU_target>
    1456:	c0 c2       	rjmp	.+1408   	; 0x19d8 <udc_process_setup+0x6d8>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1458:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    145c:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1460:	bb c2       	rjmp	.+1398   	; 0x19d8 <udc_process_setup+0x6d8>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1462:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1466:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    146a:	e8 30       	cpi	r30, 0x08	; 8
    146c:	f1 05       	cpc	r31, r1
    146e:	08 f0       	brcs	.+2      	; 0x1472 <udc_process_setup+0x172>
    1470:	4e c0       	rjmp	.+156    	; 0x150e <udc_process_setup+0x20e>
    1472:	ea 5e       	subi	r30, 0xEA	; 234
    1474:	fe 4f       	sbci	r31, 0xFE	; 254
    1476:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	93 d8       	rcall	.-3802   	; 0x5a6 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1480:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    1484:	5e d8       	rcall	.-3908   	; 0x542 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    1486:	21 d9       	rcall	.-3518   	; 0x6ca <tiny_dma_set_mode_0>
    1488:	a7 c2       	rjmp	.+1358   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	8b d8       	rcall	.-3818   	; 0x5a6 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1490:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    1494:	56 d8       	rcall	.-3924   	; 0x542 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1496:	79 d9       	rcall	.-3342   	; 0x78a <tiny_dma_set_mode_1>
    1498:	9f c2       	rjmp	.+1342   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	83 d8       	rcall	.-3834   	; 0x5a6 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    14a0:	ca e6       	ldi	r28, 0x6A	; 106
    14a2:	d4 e2       	ldi	r29, 0x24	; 36
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	4d d8       	rcall	.-3942   	; 0x542 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	60 d8       	rcall	.-3904   	; 0x56c <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    14ac:	e6 d9       	rcall	.-3124   	; 0x87a <tiny_dma_set_mode_2>
    14ae:	94 c2       	rjmp	.+1320   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    14b0:	59 da       	rcall	.-2894   	; 0x964 <tiny_dma_set_mode_3>
    14b2:	92 c2       	rjmp	.+1316   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    14b4:	d3 da       	rcall	.-2650   	; 0xa5c <tiny_dma_set_mode_4>
    14b6:	90 c2       	rjmp	.+1312   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	74 d8       	rcall	.-3864   	; 0x5a6 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    14be:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    14c2:	3f d8       	rcall	.-3970   	; 0x542 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    14c4:	41 db       	rcall	.-2430   	; 0xb48 <tiny_dma_set_mode_5>
    14c6:	88 c2       	rjmp	.+1296   	; 0x19d8 <udc_process_setup+0x6d8>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    14c8:	61 e0       	ldi	r22, 0x01	; 1
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	6c d8       	rcall	.-3880   	; 0x5a6 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    14ce:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    14d2:	37 d8       	rcall	.-3986   	; 0x542 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    14d4:	81 db       	rcall	.-2302   	; 0xbd8 <tiny_dma_set_mode_6>
    14d6:	80 c2       	rjmp	.+1280   	; 0x19d8 <udc_process_setup+0x6d8>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    14d8:	62 e0       	ldi	r22, 0x02	; 2
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	64 d8       	rcall	.-3896   	; 0x5a6 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    14de:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    14e2:	80 68       	ori	r24, 0x80	; 128
    14e4:	2e d8       	rcall	.-4004   	; 0x542 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    14e6:	da db       	rcall	.-2124   	; 0xc9c <tiny_dma_set_mode_7>
    14e8:	77 c2       	rjmp	.+1262   	; 0x19d8 <udc_process_setup+0x6d8>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    14ea:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    14ee:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    14f2:	72 c2       	rjmp	.+1252   	; 0x19d8 <udc_process_setup+0x6d8>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    14f4:	e9 e7       	ldi	r30, 0x79	; 121
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	88 ed       	ldi	r24, 0xD8	; 216
    14fc:	f8 94       	cli
    14fe:	84 bf       	out	0x34, r24	; 52
    1500:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <udc_process_setup+0x210>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <udc_process_setup+0x210>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <udc_process_setup+0x210>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    150e:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1510:	81 11       	cpse	r24, r1
    1512:	65 c2       	rjmp	.+1226   	; 0x19de <udc_process_setup+0x6de>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1514:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
    1518:	98 2f       	mov	r25, r24
    151a:	90 76       	andi	r25, 0x60	; 96
    151c:	09 f0       	breq	.+2      	; 0x1520 <udc_process_setup+0x220>
    151e:	e1 c1       	rjmp	.+962    	; 0x18e2 <udc_process_setup+0x5e2>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1520:	88 23       	and	r24, r24
    1522:	0c f0       	brlt	.+2      	; 0x1526 <udc_process_setup+0x226>
    1524:	05 c1       	rjmp	.+522    	; 0x1730 <udc_process_setup+0x430>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1526:	20 91 70 24 	lds	r18, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    152a:	30 91 71 24 	lds	r19, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    152e:	21 15       	cp	r18, r1
    1530:	31 05       	cpc	r19, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <udc_process_setup+0x236>
    1534:	d6 c1       	rjmp	.+940    	; 0x18e2 <udc_process_setup+0x5e2>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1536:	8f 71       	andi	r24, 0x1F	; 31
    1538:	09 f0       	breq	.+2      	; 0x153c <udc_process_setup+0x23c>
    153a:	a3 c0       	rjmp	.+326    	; 0x1682 <udc_process_setup+0x382>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    153c:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1540:	96 30       	cpi	r25, 0x06	; 6
    1542:	79 f0       	breq	.+30     	; 0x1562 <udc_process_setup+0x262>
    1544:	98 30       	cpi	r25, 0x08	; 8
    1546:	09 f4       	brne	.+2      	; 0x154a <udc_process_setup+0x24a>
    1548:	92 c0       	rjmp	.+292    	; 0x166e <udc_process_setup+0x36e>
    154a:	91 11       	cpse	r25, r1
    154c:	9a c0       	rjmp	.+308    	; 0x1682 <udc_process_setup+0x382>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	09 f0       	breq	.+2      	; 0x1556 <udc_process_setup+0x256>
    1554:	c6 c1       	rjmp	.+908    	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1556:	62 e0       	ldi	r22, 0x02	; 2
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	8e ec       	ldi	r24, 0xCE	; 206
    155c:	90 e2       	ldi	r25, 0x20	; 32
    155e:	ec d5       	rcall	.+3032   	; 0x2138 <udd_set_setup_payload>
    1560:	3d c2       	rjmp	.+1146   	; 0x19dc <udc_process_setup+0x6dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1562:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1566:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    156a:	29 2f       	mov	r18, r25
    156c:	33 27       	eor	r19, r19
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	a9 f0       	breq	.+42     	; 0x159e <udc_process_setup+0x29e>
    1574:	24 f4       	brge	.+8      	; 0x157e <udc_process_setup+0x27e>
    1576:	21 30       	cpi	r18, 0x01	; 1
    1578:	31 05       	cpc	r19, r1
    157a:	41 f0       	breq	.+16     	; 0x158c <udc_process_setup+0x28c>
    157c:	a9 c1       	rjmp	.+850    	; 0x18d0 <udc_process_setup+0x5d0>
    157e:	23 30       	cpi	r18, 0x03	; 3
    1580:	31 05       	cpc	r19, r1
    1582:	d9 f1       	breq	.+118    	; 0x15fa <udc_process_setup+0x2fa>
    1584:	2f 30       	cpi	r18, 0x0F	; 15
    1586:	31 05       	cpc	r19, r1
    1588:	51 f1       	breq	.+84     	; 0x15de <udc_process_setup+0x2de>
    158a:	a2 c1       	rjmp	.+836    	; 0x18d0 <udc_process_setup+0x5d0>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    158c:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <udc_config>
    1590:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1594:	dc 01       	movw	r26, r24
    1596:	6c 91       	ld	r22, X
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	ce d5       	rcall	.+2972   	; 0x2138 <udd_set_setup_payload>
    159c:	59 c0       	rjmp	.+178    	; 0x1650 <udc_process_setup+0x350>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    159e:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config>
    15a2:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x1>
    15a6:	21 89       	ldd	r18, Z+17	; 0x11
    15a8:	82 17       	cp	r24, r18
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <udc_process_setup+0x2ae>
    15ac:	9a c1       	rjmp	.+820    	; 0x18e2 <udc_process_setup+0x5e2>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    15ae:	99 27       	eor	r25, r25
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config+0x2>
    15bc:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x3>
    15c0:	e8 0f       	add	r30, r24
    15c2:	f9 1f       	adc	r31, r25
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    15c8:	fc 01       	movw	r30, r24
    15ca:	62 81       	ldd	r22, Z+2	; 0x02
    15cc:	73 81       	ldd	r23, Z+3	; 0x03
    15ce:	b4 d5       	rcall	.+2920   	; 0x2138 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    15d0:	e0 91 72 24 	lds	r30, 0x2472	; 0x802472 <udd_g_ctrlreq+0x8>
    15d4:	f0 91 73 24 	lds	r31, 0x2473	; 0x802473 <udd_g_ctrlreq+0x9>
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	81 83       	std	Z+1, r24	; 0x01
    15dc:	39 c0       	rjmp	.+114    	; 0x1650 <udc_process_setup+0x350>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    15de:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <udc_config+0x4>
    15e2:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <udc_config+0x5>
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	09 f4       	brne	.+2      	; 0x15ec <udc_process_setup+0x2ec>
    15ea:	7b c1       	rjmp	.+758    	; 0x18e2 <udc_process_setup+0x5e2>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    15ec:	dc 01       	movw	r26, r24
    15ee:	12 96       	adiw	r26, 0x02	; 2
    15f0:	6d 91       	ld	r22, X+
    15f2:	7c 91       	ld	r23, X
    15f4:	13 97       	sbiw	r26, 0x03	; 3
    15f6:	a0 d5       	rcall	.+2880   	; 0x2138 <udd_set_setup_payload>
    15f8:	2b c0       	rjmp	.+86     	; 0x1650 <udc_process_setup+0x350>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    15fa:	99 27       	eor	r25, r25
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	91 05       	cpc	r25, r1
    1600:	71 f0       	breq	.+28     	; 0x161e <udc_process_setup+0x31e>
    1602:	38 f0       	brcs	.+14     	; 0x1612 <udc_process_setup+0x312>
    1604:	02 97       	sbiw	r24, 0x02	; 2
    1606:	09 f0       	breq	.+2      	; 0x160a <udc_process_setup+0x30a>
    1608:	6c c1       	rjmp	.+728    	; 0x18e2 <udc_process_setup+0x5e2>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    160a:	8e e8       	ldi	r24, 0x8E	; 142
    160c:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    160e:	28 e1       	ldi	r18, 0x18	; 24
    1610:	09 c0       	rjmp	.+18     	; 0x1624 <udc_process_setup+0x324>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1612:	64 e0       	ldi	r22, 0x04	; 4
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	82 eb       	ldi	r24, 0xB2	; 178
    1618:	90 e2       	ldi	r25, 0x20	; 32
    161a:	8e d5       	rcall	.+2844   	; 0x2138 <udd_set_setup_payload>
    161c:	19 c0       	rjmp	.+50     	; 0x1650 <udc_process_setup+0x350>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    161e:	87 ea       	ldi	r24, 0xA7	; 167
    1620:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1622:	29 e0       	ldi	r18, 0x09	; 9
    1624:	38 2f       	mov	r19, r24
    1626:	ae e5       	ldi	r26, 0x5E	; 94
    1628:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    162a:	e8 2f       	mov	r30, r24
    162c:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    162e:	81 91       	ld	r24, Z+
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	8d 93       	st	X+, r24
    1634:	9d 93       	st	X+, r25
    1636:	8e 2f       	mov	r24, r30
    1638:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    163a:	82 17       	cp	r24, r18
    163c:	c0 f3       	brcs	.-16     	; 0x162e <udc_process_setup+0x32e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    163e:	62 2f       	mov	r22, r18
    1640:	66 0f       	add	r22, r22
    1642:	6e 5f       	subi	r22, 0xFE	; 254
    1644:	60 93 5c 20 	sts	0x205C, r22	; 0x80205c <udc_string_desc>
		udd_set_setup_payload(
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	8c e5       	ldi	r24, 0x5C	; 92
    164c:	90 e2       	ldi	r25, 0x20	; 32
    164e:	74 d5       	rcall	.+2792   	; 0x2138 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1650:	ea e6       	ldi	r30, 0x6A	; 106
    1652:	f4 e2       	ldi	r31, 0x24	; 36
    1654:	86 81       	ldd	r24, Z+6	; 0x06
    1656:	97 81       	ldd	r25, Z+7	; 0x07
    1658:	22 85       	ldd	r18, Z+10	; 0x0a
    165a:	33 85       	ldd	r19, Z+11	; 0x0b
    165c:	82 17       	cp	r24, r18
    165e:	93 07       	cpc	r25, r19
    1660:	08 f0       	brcs	.+2      	; 0x1664 <udc_process_setup+0x364>
    1662:	bc c1       	rjmp	.+888    	; 0x19dc <udc_process_setup+0x6dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1664:	80 93 74 24 	sts	0x2474, r24	; 0x802474 <udd_g_ctrlreq+0xa>
    1668:	90 93 75 24 	sts	0x2475, r25	; 0x802475 <udd_g_ctrlreq+0xb>
    166c:	b7 c1       	rjmp	.+878    	; 0x19dc <udc_process_setup+0x6dc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    166e:	21 30       	cpi	r18, 0x01	; 1
    1670:	31 05       	cpc	r19, r1
    1672:	09 f0       	breq	.+2      	; 0x1676 <udc_process_setup+0x376>
    1674:	36 c1       	rjmp	.+620    	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	8a ec       	ldi	r24, 0xCA	; 202
    167c:	90 e2       	ldi	r25, 0x20	; 32
    167e:	5c d5       	rcall	.+2744   	; 0x2138 <udd_set_setup_payload>
    1680:	ad c1       	rjmp	.+858    	; 0x19dc <udc_process_setup+0x6dc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	e1 f5       	brne	.+120    	; 0x16fe <udc_process_setup+0x3fe>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1686:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    168a:	9a 30       	cpi	r25, 0x0A	; 10
    168c:	c1 f5       	brne	.+112    	; 0x16fe <udc_process_setup+0x3fe>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    168e:	21 30       	cpi	r18, 0x01	; 1
    1690:	31 05       	cpc	r19, r1
    1692:	09 f0       	breq	.+2      	; 0x1696 <udc_process_setup+0x396>
    1694:	26 c1       	rjmp	.+588    	; 0x18e2 <udc_process_setup+0x5e2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1696:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    169a:	88 23       	and	r24, r24
    169c:	09 f4       	brne	.+2      	; 0x16a0 <udc_process_setup+0x3a0>
    169e:	21 c1       	rjmp	.+578    	; 0x18e2 <udc_process_setup+0x5e2>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    16a0:	c0 91 6e 24 	lds	r28, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    16a4:	d0 91 6f 24 	lds	r29, 0x246F	; 0x80246f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16a8:	00 91 c8 20 	lds	r16, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    16ac:	10 91 c9 20 	lds	r17, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    16b0:	d8 01       	movw	r26, r16
    16b2:	ed 91       	ld	r30, X+
    16b4:	fc 91       	ld	r31, X
    16b6:	84 81       	ldd	r24, Z+4	; 0x04
    16b8:	c8 17       	cp	r28, r24
    16ba:	08 f0       	brcs	.+2      	; 0x16be <udc_process_setup+0x3be>
    16bc:	12 c1       	rjmp	.+548    	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	8c 2f       	mov	r24, r28
    16c2:	14 dd       	rcall	.-1496   	; 0x10ec <udc_update_iface_desc>
    16c4:	88 23       	and	r24, r24
    16c6:	09 f4       	brne	.+2      	; 0x16ca <udc_process_setup+0x3ca>
    16c8:	0c c1       	rjmp	.+536    	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    16ca:	ce 01       	movw	r24, r28
    16cc:	99 27       	eor	r25, r25
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	d8 01       	movw	r26, r16
    16d4:	12 96       	adiw	r26, 0x02	; 2
    16d6:	ed 91       	ld	r30, X+
    16d8:	fc 91       	ld	r31, X
    16da:	13 97       	sbiw	r26, 0x03	; 3
    16dc:	e8 0f       	add	r30, r24
    16de:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    16e0:	01 90       	ld	r0, Z+
    16e2:	f0 81       	ld	r31, Z
    16e4:	e0 2d       	mov	r30, r0
    16e6:	86 81       	ldd	r24, Z+6	; 0x06
    16e8:	97 81       	ldd	r25, Z+7	; 0x07
    16ea:	fc 01       	movw	r30, r24
    16ec:	09 95       	icall
    16ee:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	8c ec       	ldi	r24, 0xCC	; 204
    16f8:	90 e2       	ldi	r25, 0x20	; 32
    16fa:	1e d5       	rcall	.+2620   	; 0x2138 <udd_set_setup_payload>
    16fc:	6f c1       	rjmp	.+734    	; 0x19dc <udc_process_setup+0x6dc>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	09 f0       	breq	.+2      	; 0x1704 <udc_process_setup+0x404>
    1702:	ef c0       	rjmp	.+478    	; 0x18e2 <udc_process_setup+0x5e2>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1704:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1708:	81 11       	cpse	r24, r1
    170a:	e4 c0       	rjmp	.+456    	; 0x18d4 <udc_process_setup+0x5d4>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	09 f0       	breq	.+2      	; 0x1714 <udc_process_setup+0x414>
    1712:	e7 c0       	rjmp	.+462    	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1714:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    1718:	8b d5       	rcall	.+2838   	; 0x2230 <udd_ep_is_halted>
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_ep_status.5522>
    1720:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <udc_ep_status.5522+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1724:	62 e0       	ldi	r22, 0x02	; 2
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	84 ec       	ldi	r24, 0xC4	; 196
    172a:	90 e2       	ldi	r25, 0x20	; 32
    172c:	05 d5       	rcall	.+2570   	; 0x2138 <udd_set_setup_payload>
    172e:	56 c1       	rjmp	.+684    	; 0x19dc <udc_process_setup+0x6dc>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1730:	8f 71       	andi	r24, 0x1F	; 31
    1732:	09 f0       	breq	.+2      	; 0x1736 <udc_process_setup+0x436>
    1734:	83 c0       	rjmp	.+262    	; 0x183c <udc_process_setup+0x53c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1736:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    173a:	93 30       	cpi	r25, 0x03	; 3
    173c:	09 f4       	brne	.+2      	; 0x1740 <udc_process_setup+0x440>
    173e:	cc c0       	rjmp	.+408    	; 0x18d8 <udc_process_setup+0x5d8>
    1740:	18 f4       	brcc	.+6      	; 0x1748 <udc_process_setup+0x448>
    1742:	91 30       	cpi	r25, 0x01	; 1
    1744:	a1 f0       	breq	.+40     	; 0x176e <udc_process_setup+0x46e>
    1746:	7a c0       	rjmp	.+244    	; 0x183c <udc_process_setup+0x53c>
    1748:	95 30       	cpi	r25, 0x05	; 5
    174a:	19 f0       	breq	.+6      	; 0x1752 <udc_process_setup+0x452>
    174c:	99 30       	cpi	r25, 0x09	; 9
    174e:	39 f1       	breq	.+78     	; 0x179e <udc_process_setup+0x49e>
    1750:	75 c0       	rjmp	.+234    	; 0x183c <udc_process_setup+0x53c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1752:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1756:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    175a:	89 2b       	or	r24, r25
    175c:	09 f0       	breq	.+2      	; 0x1760 <udc_process_setup+0x460>
    175e:	c1 c0       	rjmp	.+386    	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1760:	80 e7       	ldi	r24, 0x70	; 112
    1762:	98 e0       	ldi	r25, 0x08	; 8
    1764:	80 93 76 24 	sts	0x2476, r24	; 0x802476 <udd_g_ctrlreq+0xc>
    1768:	90 93 77 24 	sts	0x2477, r25	; 0x802477 <udd_g_ctrlreq+0xd>
    176c:	37 c1       	rjmp	.+622    	; 0x19dc <udc_process_setup+0x6dc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    176e:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1772:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1776:	89 2b       	or	r24, r25
    1778:	09 f0       	breq	.+2      	; 0x177c <udc_process_setup+0x47c>
    177a:	b3 c0       	rjmp	.+358    	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    177c:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    1780:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	09 f0       	breq	.+2      	; 0x178a <udc_process_setup+0x48a>
    1788:	ac c0       	rjmp	.+344    	; 0x18e2 <udc_process_setup+0x5e2>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    178a:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <udc_device_status>
    178e:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <udc_device_status+0x1>
    1792:	8d 7f       	andi	r24, 0xFD	; 253
    1794:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <udc_device_status>
    1798:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <udc_device_status+0x1>
    179c:	1f c1       	rjmp	.+574    	; 0x19dc <udc_process_setup+0x6dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    179e:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    17a2:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    17a6:	89 2b       	or	r24, r25
    17a8:	09 f0       	breq	.+2      	; 0x17ac <udc_process_setup+0x4ac>
    17aa:	9b c0       	rjmp	.+310    	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    17ac:	c2 d4       	rcall	.+2436   	; 0x2132 <udd_getaddress>
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <udc_process_setup+0x4b4>
    17b2:	97 c0       	rjmp	.+302    	; 0x18e2 <udc_process_setup+0x5e2>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17b4:	20 91 6c 24 	lds	r18, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    17b8:	30 91 6d 24 	lds	r19, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    17bc:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    17be:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config>
    17c2:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17c6:	81 89       	ldd	r24, Z+17	; 0x11
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	82 17       	cp	r24, r18
    17cc:	93 07       	cpc	r25, r19
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <udc_process_setup+0x4d2>
    17d0:	88 c0       	rjmp	.+272    	; 0x18e2 <udc_process_setup+0x5e2>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    17d2:	41 dd       	rcall	.-1406   	; 0x1256 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    17d4:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    17d8:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    17dc:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <udc_num_configuration>
	if (udc_num_configuration == 0) {
    17e0:	88 23       	and	r24, r24
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <udc_process_setup+0x4e6>
    17e4:	fb c0       	rjmp	.+502    	; 0x19dc <udc_process_setup+0x6dc>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    17e6:	99 27       	eor	r25, r25
    17e8:	81 50       	subi	r24, 0x01	; 1
    17ea:	90 4c       	sbci	r25, 0xC0	; 192
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config+0x2>
    17f8:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x3>
    17fc:	e8 0f       	add	r30, r24
    17fe:	f9 1f       	adc	r31, r25
    1800:	e0 93 c8 20 	sts	0x20C8, r30	; 0x8020c8 <udc_ptr_conf>
    1804:	f0 93 c9 20 	sts	0x20C9, r31	; 0x8020c9 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1808:	01 90       	ld	r0, Z+
    180a:	f0 81       	ld	r31, Z
    180c:	e0 2d       	mov	r30, r0
    180e:	84 81       	ldd	r24, Z+4	; 0x04
    1810:	88 23       	and	r24, r24
    1812:	09 f4       	brne	.+2      	; 0x1816 <udc_process_setup+0x516>
    1814:	e3 c0       	rjmp	.+454    	; 0x19dc <udc_process_setup+0x6dc>
    1816:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	8c 2f       	mov	r24, r28
    181c:	e3 dc       	rcall	.-1594   	; 0x11e4 <udc_iface_enable>
    181e:	88 23       	and	r24, r24
    1820:	09 f4       	brne	.+2      	; 0x1824 <udc_process_setup+0x524>
    1822:	5f c0       	rjmp	.+190    	; 0x18e2 <udc_process_setup+0x5e2>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1824:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1826:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    182a:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    182e:	01 90       	ld	r0, Z+
    1830:	f0 81       	ld	r31, Z
    1832:	e0 2d       	mov	r30, r0
    1834:	84 81       	ldd	r24, Z+4	; 0x04
    1836:	c8 17       	cp	r28, r24
    1838:	78 f3       	brcs	.-34     	; 0x1818 <udc_process_setup+0x518>
    183a:	d0 c0       	rjmp	.+416    	; 0x19dc <udc_process_setup+0x6dc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	e1 f4       	brne	.+56     	; 0x1878 <udc_process_setup+0x578>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1840:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1844:	9b 30       	cpi	r25, 0x0B	; 11
    1846:	c1 f4       	brne	.+48     	; 0x1878 <udc_process_setup+0x578>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1848:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    184c:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1850:	89 2b       	or	r24, r25
    1852:	09 f0       	breq	.+2      	; 0x1856 <udc_process_setup+0x556>
    1854:	46 c0       	rjmp	.+140    	; 0x18e2 <udc_process_setup+0x5e2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1856:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    185a:	88 23       	and	r24, r24
    185c:	09 f4       	brne	.+2      	; 0x1860 <udc_process_setup+0x560>
    185e:	41 c0       	rjmp	.+130    	; 0x18e2 <udc_process_setup+0x5e2>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1860:	ea e6       	ldi	r30, 0x6A	; 106
    1862:	f4 e2       	ldi	r31, 0x24	; 36
    1864:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1866:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1868:	8c 2f       	mov	r24, r28
    186a:	7a dc       	rcall	.-1804   	; 0x1160 <udc_iface_disable>
    186c:	88 23       	and	r24, r24
    186e:	c9 f1       	breq	.+114    	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1870:	6d 2f       	mov	r22, r29
    1872:	8c 2f       	mov	r24, r28
    1874:	b7 dc       	rcall	.-1682   	; 0x11e4 <udc_iface_enable>
    1876:	33 c0       	rjmp	.+102    	; 0x18de <udc_process_setup+0x5de>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	99 f5       	brne	.+102    	; 0x18e2 <udc_process_setup+0x5e2>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    187c:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x1>
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	19 f0       	breq	.+6      	; 0x188a <udc_process_setup+0x58a>
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	89 f0       	breq	.+34     	; 0x18aa <udc_process_setup+0x5aa>
    1888:	29 c0       	rjmp	.+82     	; 0x18dc <udc_process_setup+0x5dc>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    188a:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    188e:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1892:	89 2b       	or	r24, r25
    1894:	31 f5       	brne	.+76     	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1896:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    189a:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    189e:	89 2b       	or	r24, r25
    18a0:	01 f5       	brne	.+64     	; 0x18e2 <udc_process_setup+0x5e2>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18a2:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    18a6:	df d4       	rcall	.+2494   	; 0x2266 <udd_ep_clear_halt>
    18a8:	1a c0       	rjmp	.+52     	; 0x18de <udc_process_setup+0x5de>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18aa:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    18ae:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    18b2:	89 2b       	or	r24, r25
    18b4:	b1 f4       	brne	.+44     	; 0x18e2 <udc_process_setup+0x5e2>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18b6:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_g_ctrlreq+0x2>
    18ba:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_g_ctrlreq+0x3>
    18be:	89 2b       	or	r24, r25
    18c0:	81 f4       	brne	.+32     	; 0x18e2 <udc_process_setup+0x5e2>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    18c2:	ca e6       	ldi	r28, 0x6A	; 106
    18c4:	d4 e2       	ldi	r29, 0x24	; 36
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	bd d5       	rcall	.+2938   	; 0x2444 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	20 d6       	rcall	.+3136   	; 0x250e <udd_ep_set_halt>
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <udc_process_setup+0x5de>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <udc_process_setup+0x5de>
				break;
			}
		}
#endif
	}
	return false;
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <udc_process_setup+0x5de>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	01 c0       	rjmp	.+2      	; 0x18de <udc_process_setup+0x5de>
				break;
			}
		}
#endif
	}
	return false;
    18dc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    18de:	81 11       	cpse	r24, r1
    18e0:	7e c0       	rjmp	.+252    	; 0x19de <udc_process_setup+0x6de>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    18e2:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
    18e6:	8f 71       	andi	r24, 0x1F	; 31
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	71 f5       	brne	.+92     	; 0x1948 <udc_process_setup+0x648>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    18ec:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    18f0:	88 23       	and	r24, r24
    18f2:	51 f1       	breq	.+84     	; 0x1948 <udc_process_setup+0x648>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18f4:	00 91 6e 24 	lds	r16, 0x246E	; 0x80246e <udd_g_ctrlreq+0x4>
    18f8:	10 91 6f 24 	lds	r17, 0x246F	; 0x80246f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18fc:	c0 91 c8 20 	lds	r28, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1900:	d0 91 c9 20 	lds	r29, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1904:	e8 81       	ld	r30, Y
    1906:	f9 81       	ldd	r31, Y+1	; 0x01
    1908:	84 81       	ldd	r24, Z+4	; 0x04
    190a:	08 17       	cp	r16, r24
    190c:	e8 f4       	brcc	.+58     	; 0x1948 <udc_process_setup+0x648>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	80 2f       	mov	r24, r16
    1912:	ec db       	rcall	.-2088   	; 0x10ec <udc_update_iface_desc>
    1914:	88 23       	and	r24, r24
    1916:	c1 f0       	breq	.+48     	; 0x1948 <udc_process_setup+0x648>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1918:	f8 01       	movw	r30, r16
    191a:	ff 27       	eor	r31, r31
    191c:	cf 01       	movw	r24, r30
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	ea 81       	ldd	r30, Y+2	; 0x02
    1924:	fb 81       	ldd	r31, Y+3	; 0x03
    1926:	e8 0f       	add	r30, r24
    1928:	f9 1f       	adc	r31, r25
    192a:	c0 81       	ld	r28, Z
    192c:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    192e:	ee 81       	ldd	r30, Y+6	; 0x06
    1930:	ff 81       	ldd	r31, Y+7	; 0x07
    1932:	09 95       	icall
    1934:	68 2f       	mov	r22, r24
    1936:	80 2f       	mov	r24, r16
    1938:	d9 db       	rcall	.-2126   	; 0x10ec <udc_update_iface_desc>
    193a:	88 23       	and	r24, r24
    193c:	29 f0       	breq	.+10     	; 0x1948 <udc_process_setup+0x648>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    193e:	ec 81       	ldd	r30, Y+4	; 0x04
    1940:	fd 81       	ldd	r31, Y+5	; 0x05
    1942:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1944:	81 11       	cpse	r24, r1
    1946:	4b c0       	rjmp	.+150    	; 0x19de <udc_process_setup+0x6de>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1948:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
    194c:	8f 71       	andi	r24, 0x1F	; 31
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	09 f0       	breq	.+2      	; 0x1954 <udc_process_setup+0x654>
    1952:	40 c0       	rjmp	.+128    	; 0x19d4 <udc_process_setup+0x6d4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1954:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <udc_num_configuration>
    1958:	88 23       	and	r24, r24
    195a:	b1 f1       	breq	.+108    	; 0x19c8 <udc_process_setup+0x6c8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    195c:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    1960:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    1964:	ed 91       	ld	r30, X+
    1966:	fc 91       	ld	r31, X
    1968:	11 97       	sbiw	r26, 0x01	; 1
    196a:	84 81       	ldd	r24, Z+4	; 0x04
    196c:	88 23       	and	r24, r24
    196e:	71 f1       	breq	.+92     	; 0x19cc <udc_process_setup+0x6cc>
    1970:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1972:	ec 2f       	mov	r30, r28
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	ee 0f       	add	r30, r30
    1978:	ff 1f       	adc	r31, r31
    197a:	12 96       	adiw	r26, 0x02	; 2
    197c:	8d 91       	ld	r24, X+
    197e:	9c 91       	ld	r25, X
    1980:	13 97       	sbiw	r26, 0x03	; 3
    1982:	e8 0f       	add	r30, r24
    1984:	f9 1f       	adc	r31, r25
    1986:	00 81       	ld	r16, Z
    1988:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    198a:	d8 01       	movw	r26, r16
    198c:	16 96       	adiw	r26, 0x06	; 6
    198e:	ed 91       	ld	r30, X+
    1990:	fc 91       	ld	r31, X
    1992:	17 97       	sbiw	r26, 0x07	; 7
    1994:	09 95       	icall
    1996:	68 2f       	mov	r22, r24
    1998:	8c 2f       	mov	r24, r28
    199a:	a8 db       	rcall	.-2224   	; 0x10ec <udc_update_iface_desc>
    199c:	88 23       	and	r24, r24
    199e:	f9 f0       	breq	.+62     	; 0x19de <udc_process_setup+0x6de>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    19a0:	d8 01       	movw	r26, r16
    19a2:	14 96       	adiw	r26, 0x04	; 4
    19a4:	ed 91       	ld	r30, X+
    19a6:	fc 91       	ld	r31, X
    19a8:	15 97       	sbiw	r26, 0x05	; 5
    19aa:	09 95       	icall
    19ac:	81 11       	cpse	r24, r1
    19ae:	17 c0       	rjmp	.+46     	; 0x19de <udc_process_setup+0x6de>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    19b0:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19b2:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <udc_ptr_conf>
    19b6:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <udc_ptr_conf+0x1>
    19ba:	ed 91       	ld	r30, X+
    19bc:	fc 91       	ld	r31, X
    19be:	11 97       	sbiw	r26, 0x01	; 1
    19c0:	94 81       	ldd	r25, Z+4	; 0x04
    19c2:	c9 17       	cp	r28, r25
    19c4:	b0 f2       	brcs	.-84     	; 0x1972 <udc_process_setup+0x672>
    19c6:	0b c0       	rjmp	.+22     	; 0x19de <udc_process_setup+0x6de>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	09 c0       	rjmp	.+18     	; 0x19de <udc_process_setup+0x6de>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	07 c0       	rjmp	.+14     	; 0x19de <udc_process_setup+0x6de>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	05 c0       	rjmp	.+10     	; 0x19de <udc_process_setup+0x6de>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	03 c0       	rjmp	.+6      	; 0x19de <udc_process_setup+0x6de>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	01 c0       	rjmp	.+2      	; 0x19de <udc_process_setup+0x6de>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	08 95       	ret

000019e8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    19e8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    19ea:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    19ec:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    19ee:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    19f0:	60 83       	st	Z, r22
	ret                             // Return to caller
    19f2:	08 95       	ret

000019f4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    19f4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    19f8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    19fa:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    19fc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1a00:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1a02:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1a06:	08 95       	ret

00001a08 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1a08:	81 11       	cpse	r24, r1
    1a0a:	22 c0       	rjmp	.+68     	; 0x1a50 <udd_sleep_mode+0x48>
    1a0c:	90 91 60 22 	lds	r25, 0x2260	; 0x802260 <udd_b_idle>
    1a10:	99 23       	and	r25, r25
    1a12:	d9 f0       	breq	.+54     	; 0x1a4a <udd_sleep_mode+0x42>
    1a14:	90 91 57 2e 	lds	r25, 0x2E57	; 0x802e57 <sleepmgr_locks+0x1>
    1a18:	91 11       	cpse	r25, r1
    1a1a:	01 c0       	rjmp	.+2      	; 0x1a1e <udd_sleep_mode+0x16>
    1a1c:	ff cf       	rjmp	.-2      	; 0x1a1c <udd_sleep_mode+0x14>
    1a1e:	2f b7       	in	r18, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	e6 e5       	ldi	r30, 0x56	; 86
    1a24:	fe e2       	ldi	r31, 0x2E	; 46
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	91 50       	subi	r25, 0x01	; 1
    1a2a:	91 83       	std	Z+1, r25	; 0x01
    1a2c:	2f bf       	out	0x3f, r18	; 63
    1a2e:	0d c0       	rjmp	.+26     	; 0x1a4a <udd_sleep_mode+0x42>
    1a30:	90 91 57 2e 	lds	r25, 0x2E57	; 0x802e57 <sleepmgr_locks+0x1>
    1a34:	9f 3f       	cpi	r25, 0xFF	; 255
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <udd_sleep_mode+0x32>
    1a38:	ff cf       	rjmp	.-2      	; 0x1a38 <udd_sleep_mode+0x30>
    1a3a:	2f b7       	in	r18, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	e6 e5       	ldi	r30, 0x56	; 86
    1a40:	fe e2       	ldi	r31, 0x2E	; 46
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	9f 5f       	subi	r25, 0xFF	; 255
    1a46:	91 83       	std	Z+1, r25	; 0x01
    1a48:	2f bf       	out	0x3f, r18	; 63
    1a4a:	80 93 60 22 	sts	0x2260, r24	; 0x802260 <udd_b_idle>
    1a4e:	08 95       	ret
    1a50:	90 91 60 22 	lds	r25, 0x2260	; 0x802260 <udd_b_idle>
    1a54:	99 23       	and	r25, r25
    1a56:	61 f3       	breq	.-40     	; 0x1a30 <udd_sleep_mode+0x28>
    1a58:	f8 cf       	rjmp	.-16     	; 0x1a4a <udd_sleep_mode+0x42>

00001a5a <udd_ctrl_init>:
    1a5a:	0f 93       	push	r16
    1a5c:	e8 ec       	ldi	r30, 0xC8	; 200
    1a5e:	f4 e0       	ldi	r31, 0x04	; 4
    1a60:	80 81       	ld	r24, Z
    1a62:	8f 7d       	andi	r24, 0xDF	; 223
    1a64:	80 83       	st	Z, r24
    1a66:	80 81       	ld	r24, Z
    1a68:	8f 7d       	andi	r24, 0xDF	; 223
    1a6a:	80 83       	st	Z, r24
    1a6c:	e4 e2       	ldi	r30, 0x24	; 36
    1a6e:	f2 e2       	ldi	r31, 0x22	; 34
    1a70:	02 e0       	ldi	r16, 0x02	; 2
    1a72:	05 93       	las	Z, r16
    1a74:	10 92 26 22 	sts	0x2226, r1	; 0x802226 <udd_sram+0x1a>
    1a78:	10 92 27 22 	sts	0x2227, r1	; 0x802227 <udd_sram+0x1b>
    1a7c:	00 e2       	ldi	r16, 0x20	; 32
    1a7e:	06 93       	lac	Z, r16
    1a80:	00 e4       	ldi	r16, 0x40	; 64
    1a82:	06 93       	lac	Z, r16
    1a84:	ec e1       	ldi	r30, 0x1C	; 28
    1a86:	f2 e2       	ldi	r31, 0x22	; 34
    1a88:	00 e2       	ldi	r16, 0x20	; 32
    1a8a:	06 93       	lac	Z, r16
    1a8c:	00 e4       	ldi	r16, 0x40	; 64
    1a8e:	06 93       	lac	Z, r16
    1a90:	ea e6       	ldi	r30, 0x6A	; 106
    1a92:	f4 e2       	ldi	r31, 0x24	; 36
    1a94:	14 86       	std	Z+12, r1	; 0x0c
    1a96:	15 86       	std	Z+13, r1	; 0x0d
    1a98:	16 86       	std	Z+14, r1	; 0x0e
    1a9a:	17 86       	std	Z+15, r1	; 0x0f
    1a9c:	12 86       	std	Z+10, r1	; 0x0a
    1a9e:	13 86       	std	Z+11, r1	; 0x0b
    1aa0:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udd_ep_control_state>
    1aa4:	0f 91       	pop	r16
    1aa6:	08 95       	ret

00001aa8 <udd_ctrl_stall_data>:
    1aa8:	0f 93       	push	r16
    1aaa:	85 e0       	ldi	r24, 0x05	; 5
    1aac:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    1ab0:	e5 e2       	ldi	r30, 0x25	; 37
    1ab2:	f2 e2       	ldi	r31, 0x22	; 34
    1ab4:	04 e0       	ldi	r16, 0x04	; 4
    1ab6:	05 93       	las	Z, r16
    1ab8:	ed e1       	ldi	r30, 0x1D	; 29
    1aba:	f2 e2       	ldi	r31, 0x22	; 34
    1abc:	04 e0       	ldi	r16, 0x04	; 4
    1abe:	05 93       	las	Z, r16
    1ac0:	0f 91       	pop	r16
    1ac2:	08 95       	ret

00001ac4 <udd_ctrl_send_zlp_in>:
    1ac4:	0f 93       	push	r16
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    1acc:	10 92 26 22 	sts	0x2226, r1	; 0x802226 <udd_sram+0x1a>
    1ad0:	10 92 27 22 	sts	0x2227, r1	; 0x802227 <udd_sram+0x1b>
    1ad4:	e4 e2       	ldi	r30, 0x24	; 36
    1ad6:	f2 e2       	ldi	r31, 0x22	; 34
    1ad8:	02 e0       	ldi	r16, 0x02	; 2
    1ada:	06 93       	lac	Z, r16
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <udd_ctrl_endofrequest>:
    1ae0:	e0 91 76 24 	lds	r30, 0x2476	; 0x802476 <udd_g_ctrlreq+0xc>
    1ae4:	f0 91 77 24 	lds	r31, 0x2477	; 0x802477 <udd_g_ctrlreq+0xd>
    1ae8:	30 97       	sbiw	r30, 0x00	; 0
    1aea:	09 f0       	breq	.+2      	; 0x1aee <udd_ctrl_endofrequest+0xe>
    1aec:	09 95       	icall
    1aee:	08 95       	ret

00001af0 <udd_ctrl_in_sent>:
    1af0:	0f 93       	push	r16
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    1afa:	83 30       	cpi	r24, 0x03	; 3
    1afc:	19 f4       	brne	.+6      	; 0x1b04 <udd_ctrl_in_sent+0x14>
    1afe:	f0 df       	rcall	.-32     	; 0x1ae0 <udd_ctrl_endofrequest>
    1b00:	ac df       	rcall	.-168    	; 0x1a5a <udd_ctrl_init>
    1b02:	5e c0       	rjmp	.+188    	; 0x1bc0 <udd_ctrl_in_sent+0xd0>
    1b04:	80 91 07 22 	lds	r24, 0x2207	; 0x802207 <udd_ctrl_payload_nb_trans>
    1b08:	90 91 08 22 	lds	r25, 0x2208	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    1b0c:	c0 91 74 24 	lds	r28, 0x2474	; 0x802474 <udd_g_ctrlreq+0xa>
    1b10:	d0 91 75 24 	lds	r29, 0x2475	; 0x802475 <udd_g_ctrlreq+0xb>
    1b14:	c8 1b       	sub	r28, r24
    1b16:	d9 0b       	sbc	r29, r25
    1b18:	71 f5       	brne	.+92     	; 0x1b76 <udd_ctrl_in_sent+0x86>
    1b1a:	20 91 09 22 	lds	r18, 0x2209	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    1b1e:	30 91 0a 22 	lds	r19, 0x220A	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    1b22:	82 0f       	add	r24, r18
    1b24:	93 1f       	adc	r25, r19
    1b26:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    1b2a:	90 93 0a 22 	sts	0x220A, r25	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    1b2e:	20 91 70 24 	lds	r18, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1b32:	30 91 71 24 	lds	r19, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1b36:	82 17       	cp	r24, r18
    1b38:	93 07       	cpc	r25, r19
    1b3a:	21 f0       	breq	.+8      	; 0x1b44 <udd_ctrl_in_sent+0x54>
    1b3c:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <b_shortpacket.5272>
    1b40:	88 23       	and	r24, r24
    1b42:	41 f0       	breq	.+16     	; 0x1b54 <udd_ctrl_in_sent+0x64>
    1b44:	84 e0       	ldi	r24, 0x04	; 4
    1b46:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    1b4a:	ec e1       	ldi	r30, 0x1C	; 28
    1b4c:	f2 e2       	ldi	r31, 0x22	; 34
    1b4e:	02 e0       	ldi	r16, 0x02	; 2
    1b50:	06 93       	lac	Z, r16
    1b52:	36 c0       	rjmp	.+108    	; 0x1bc0 <udd_ctrl_in_sent+0xd0>
    1b54:	e0 91 78 24 	lds	r30, 0x2478	; 0x802478 <udd_g_ctrlreq+0xe>
    1b58:	f0 91 79 24 	lds	r31, 0x2479	; 0x802479 <udd_g_ctrlreq+0xf>
    1b5c:	30 97       	sbiw	r30, 0x00	; 0
    1b5e:	99 f0       	breq	.+38     	; 0x1b86 <udd_ctrl_in_sent+0x96>
    1b60:	09 95       	icall
    1b62:	88 23       	and	r24, r24
    1b64:	81 f0       	breq	.+32     	; 0x1b86 <udd_ctrl_in_sent+0x96>
    1b66:	10 92 07 22 	sts	0x2207, r1	; 0x802207 <udd_ctrl_payload_nb_trans>
    1b6a:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    1b6e:	c0 91 74 24 	lds	r28, 0x2474	; 0x802474 <udd_g_ctrlreq+0xa>
    1b72:	d0 91 75 24 	lds	r29, 0x2475	; 0x802475 <udd_g_ctrlreq+0xb>
    1b76:	c0 34       	cpi	r28, 0x40	; 64
    1b78:	d1 05       	cpc	r29, r1
    1b7a:	28 f0       	brcs	.+10     	; 0x1b86 <udd_ctrl_in_sent+0x96>
    1b7c:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <b_shortpacket.5272>
    1b80:	c0 e4       	ldi	r28, 0x40	; 64
    1b82:	d0 e0       	ldi	r29, 0x00	; 0
    1b84:	03 c0       	rjmp	.+6      	; 0x1b8c <udd_ctrl_in_sent+0x9c>
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <b_shortpacket.5272>
    1b8c:	ec e0       	ldi	r30, 0x0C	; 12
    1b8e:	f2 e2       	ldi	r31, 0x22	; 34
    1b90:	c2 8f       	std	Z+26, r28	; 0x1a
    1b92:	d3 8f       	std	Z+27, r29	; 0x1b
    1b94:	80 91 07 22 	lds	r24, 0x2207	; 0x802207 <udd_ctrl_payload_nb_trans>
    1b98:	90 91 08 22 	lds	r25, 0x2208	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    1b9c:	20 91 72 24 	lds	r18, 0x2472	; 0x802472 <udd_g_ctrlreq+0x8>
    1ba0:	30 91 73 24 	lds	r19, 0x2473	; 0x802473 <udd_g_ctrlreq+0x9>
    1ba4:	28 0f       	add	r18, r24
    1ba6:	39 1f       	adc	r19, r25
    1ba8:	24 8f       	std	Z+28, r18	; 0x1c
    1baa:	35 8f       	std	Z+29, r19	; 0x1d
    1bac:	c8 0f       	add	r28, r24
    1bae:	d9 1f       	adc	r29, r25
    1bb0:	c0 93 07 22 	sts	0x2207, r28	; 0x802207 <udd_ctrl_payload_nb_trans>
    1bb4:	d0 93 08 22 	sts	0x2208, r29	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    1bb8:	e4 e2       	ldi	r30, 0x24	; 36
    1bba:	f2 e2       	ldi	r31, 0x22	; 34
    1bbc:	02 e0       	ldi	r16, 0x02	; 2
    1bbe:	06 93       	lac	Z, r16
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <udd_ep_get_size>:
    1bc8:	fc 01       	movw	r30, r24
    1bca:	81 81       	ldd	r24, Z+1	; 0x01
    1bcc:	e8 2f       	mov	r30, r24
    1bce:	e7 70       	andi	r30, 0x07	; 7
    1bd0:	8e 2f       	mov	r24, r30
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	31 97       	sbiw	r30, 0x01	; 1
    1bd8:	e7 30       	cpi	r30, 0x07	; 7
    1bda:	f1 05       	cpc	r31, r1
    1bdc:	c0 f4       	brcc	.+48     	; 0x1c0e <udd_ep_get_size+0x46>
    1bde:	e2 5e       	subi	r30, 0xE2	; 226
    1be0:	fe 4f       	sbci	r31, 0xFE	; 254
    1be2:	7a c6       	rjmp	.+3316   	; 0x28d8 <__tablejump2__>
    1be4:	80 e1       	ldi	r24, 0x10	; 16
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	08 95       	ret
    1bea:	80 e2       	ldi	r24, 0x20	; 32
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	08 95       	ret
    1bf0:	80 e4       	ldi	r24, 0x40	; 64
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	08 95       	ret
    1bf6:	80 e8       	ldi	r24, 0x80	; 128
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	08 95       	ret
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	08 95       	ret
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	92 e0       	ldi	r25, 0x02	; 2
    1c06:	08 95       	ret
    1c08:	8f ef       	ldi	r24, 0xFF	; 255
    1c0a:	93 e0       	ldi	r25, 0x03	; 3
    1c0c:	08 95       	ret
    1c0e:	88 e0       	ldi	r24, 0x08	; 8
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	08 95       	ret

00001c14 <udd_ep_get_job>:
    1c14:	28 2f       	mov	r18, r24
    1c16:	2f 70       	andi	r18, 0x0F	; 15
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	22 0f       	add	r18, r18
    1c1c:	33 1f       	adc	r19, r19
    1c1e:	08 2e       	mov	r0, r24
    1c20:	00 0c       	add	r0, r0
    1c22:	99 0b       	sbc	r25, r25
    1c24:	88 27       	eor	r24, r24
    1c26:	99 0f       	add	r25, r25
    1c28:	88 1f       	adc	r24, r24
    1c2a:	99 27       	eor	r25, r25
    1c2c:	82 0f       	add	r24, r18
    1c2e:	93 1f       	adc	r25, r19
    1c30:	02 97       	sbiw	r24, 0x02	; 2
    1c32:	9c 01       	movw	r18, r24
    1c34:	22 0f       	add	r18, r18
    1c36:	33 1f       	adc	r19, r19
    1c38:	22 0f       	add	r18, r18
    1c3a:	33 1f       	adc	r19, r19
    1c3c:	22 0f       	add	r18, r18
    1c3e:	33 1f       	adc	r19, r19
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	8f 56       	subi	r24, 0x6F	; 111
    1c46:	9e 4d       	sbci	r25, 0xDE	; 222
    1c48:	08 95       	ret

00001c4a <udd_ctrl_interrupt_tc_setup>:
    1c4a:	0f 93       	push	r16
    1c4c:	cf 93       	push	r28
    1c4e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1c52:	80 ff       	sbrs	r24, 0
    1c54:	62 c0       	rjmp	.+196    	; 0x1d1a <udd_ctrl_interrupt_tc_setup+0xd0>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1c5c:	ec e1       	ldi	r30, 0x1C	; 28
    1c5e:	f2 e2       	ldi	r31, 0x22	; 34
    1c60:	00 e8       	ldi	r16, 0x80	; 128
    1c62:	06 93       	lac	Z, r16
    1c64:	e4 e2       	ldi	r30, 0x24	; 36
    1c66:	f2 e2       	ldi	r31, 0x22	; 34
    1c68:	00 e8       	ldi	r16, 0x80	; 128
    1c6a:	06 93       	lac	Z, r16
    1c6c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1c70:	ec e1       	ldi	r30, 0x1C	; 28
    1c72:	f2 e2       	ldi	r31, 0x22	; 34
    1c74:	00 e1       	ldi	r16, 0x10	; 16
    1c76:	06 93       	lac	Z, r16
    1c78:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    1c7c:	88 23       	and	r24, r24
    1c7e:	29 f0       	breq	.+10     	; 0x1c8a <udd_ctrl_interrupt_tc_setup+0x40>
    1c80:	83 50       	subi	r24, 0x03	; 3
    1c82:	82 30       	cpi	r24, 0x02	; 2
    1c84:	08 f4       	brcc	.+2      	; 0x1c88 <udd_ctrl_interrupt_tc_setup+0x3e>
    1c86:	2c df       	rcall	.-424    	; 0x1ae0 <udd_ctrl_endofrequest>
    1c88:	e8 de       	rcall	.-560    	; 0x1a5a <udd_ctrl_init>
    1c8a:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <udd_sram+0x12>
    1c8e:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <udd_sram+0x13>
    1c92:	08 97       	sbiw	r24, 0x08	; 8
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <udd_ctrl_interrupt_tc_setup+0x4e>
    1c96:	43 c0       	rjmp	.+134    	; 0x1d1e <udd_ctrl_interrupt_tc_setup+0xd4>
    1c98:	88 e0       	ldi	r24, 0x08	; 8
    1c9a:	e7 ec       	ldi	r30, 0xC7	; 199
    1c9c:	f1 e2       	ldi	r31, 0x21	; 33
    1c9e:	aa e6       	ldi	r26, 0x6A	; 106
    1ca0:	b4 e2       	ldi	r27, 0x24	; 36
    1ca2:	01 90       	ld	r0, Z+
    1ca4:	0d 92       	st	X+, r0
    1ca6:	8a 95       	dec	r24
    1ca8:	e1 f7       	brne	.-8      	; 0x1ca2 <udd_ctrl_interrupt_tc_setup+0x58>
    1caa:	e8 ec       	ldi	r30, 0xC8	; 200
    1cac:	f4 e0       	ldi	r31, 0x04	; 4
    1cae:	80 81       	ld	r24, Z
    1cb0:	80 62       	ori	r24, 0x20	; 32
    1cb2:	80 83       	st	Z, r24
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 62       	ori	r24, 0x20	; 32
    1cb8:	80 83       	st	Z, r24
    1cba:	22 db       	rcall	.-2492   	; 0x1300 <udc_process_setup>
    1cbc:	c8 2f       	mov	r28, r24
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	03 c0       	rjmp	.+6      	; 0x1cc8 <udd_ctrl_interrupt_tc_setup+0x7e>
    1cc2:	f2 de       	rcall	.-540    	; 0x1aa8 <udd_ctrl_stall_data>
    1cc4:	c1 e0       	ldi	r28, 0x01	; 1
    1cc6:	2c c0       	rjmp	.+88     	; 0x1d20 <udd_ctrl_interrupt_tc_setup+0xd6>
    1cc8:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_g_ctrlreq>
    1ccc:	88 23       	and	r24, r24
    1cce:	6c f4       	brge	.+26     	; 0x1cea <udd_ctrl_interrupt_tc_setup+0xa0>
    1cd0:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    1cd4:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    1cd8:	10 92 07 22 	sts	0x2207, r1	; 0x802207 <udd_ctrl_payload_nb_trans>
    1cdc:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    1ce6:	04 df       	rcall	.-504    	; 0x1af0 <udd_ctrl_in_sent>
    1ce8:	1b c0       	rjmp	.+54     	; 0x1d20 <udd_ctrl_interrupt_tc_setup+0xd6>
    1cea:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    1cee:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    1cf2:	89 2b       	or	r24, r25
    1cf4:	11 f4       	brne	.+4      	; 0x1cfa <udd_ctrl_interrupt_tc_setup+0xb0>
    1cf6:	e6 de       	rcall	.-564    	; 0x1ac4 <udd_ctrl_send_zlp_in>
    1cf8:	13 c0       	rjmp	.+38     	; 0x1d20 <udd_ctrl_interrupt_tc_setup+0xd6>
    1cfa:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    1cfe:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    1d02:	10 92 07 22 	sts	0x2207, r1	; 0x802207 <udd_ctrl_payload_nb_trans>
    1d06:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
    1d10:	ec e1       	ldi	r30, 0x1C	; 28
    1d12:	f2 e2       	ldi	r31, 0x22	; 34
    1d14:	02 e0       	ldi	r16, 0x02	; 2
    1d16:	06 93       	lac	Z, r16
    1d18:	03 c0       	rjmp	.+6      	; 0x1d20 <udd_ctrl_interrupt_tc_setup+0xd6>
    1d1a:	c0 e0       	ldi	r28, 0x00	; 0
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <udd_ctrl_interrupt_tc_setup+0xd6>
    1d1e:	c1 e0       	ldi	r28, 0x01	; 1
    1d20:	8c 2f       	mov	r24, r28
    1d22:	cf 91       	pop	r28
    1d24:	0f 91       	pop	r16
    1d26:	08 95       	ret

00001d28 <udd_ep_trans_complet>:
    1d28:	8f 92       	push	r8
    1d2a:	9f 92       	push	r9
    1d2c:	af 92       	push	r10
    1d2e:	bf 92       	push	r11
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	d8 2e       	mov	r13, r24
    1d40:	69 df       	rcall	.-302    	; 0x1c14 <udd_ep_get_job>
    1d42:	8c 01       	movw	r16, r24
    1d44:	bd 2c       	mov	r11, r13
    1d46:	bb 1c       	adc	r11, r11
    1d48:	bb 24       	eor	r11, r11
    1d4a:	bb 1c       	adc	r11, r11
    1d4c:	cd 2d       	mov	r28, r13
    1d4e:	cf 70       	andi	r28, 0x0F	; 15
    1d50:	d0 e0       	ldi	r29, 0x00	; 0
    1d52:	cc 0f       	add	r28, r28
    1d54:	dd 1f       	adc	r29, r29
    1d56:	cb 0d       	add	r28, r11
    1d58:	d1 1d       	adc	r29, r1
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	9c 01       	movw	r18, r24
    1d6a:	24 5e       	subi	r18, 0xE4	; 228
    1d6c:	3d 4d       	sbci	r19, 0xDD	; 221
    1d6e:	79 01       	movw	r14, r18
    1d70:	c9 01       	movw	r24, r18
    1d72:	2a df       	rcall	.-428    	; 0x1bc8 <udd_ep_get_size>
    1d74:	4c 01       	movw	r8, r24
    1d76:	bb 20       	and	r11, r11
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <udd_ep_trans_complet+0x54>
    1d7a:	70 c0       	rjmp	.+224    	; 0x1e5c <udd_ep_trans_complet+0x134>
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	ee 0f       	add	r30, r30
    1d84:	ff 1f       	adc	r31, r31
    1d86:	ee 0f       	add	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	e4 5f       	subi	r30, 0xF4	; 244
    1d8c:	fd 4d       	sbci	r31, 0xDD	; 221
    1d8e:	26 89       	ldd	r18, Z+22	; 0x16
    1d90:	37 89       	ldd	r19, Z+23	; 0x17
    1d92:	d8 01       	movw	r26, r16
    1d94:	15 96       	adiw	r26, 0x05	; 5
    1d96:	8d 91       	ld	r24, X+
    1d98:	9c 91       	ld	r25, X
    1d9a:	16 97       	sbiw	r26, 0x06	; 6
    1d9c:	82 0f       	add	r24, r18
    1d9e:	93 1f       	adc	r25, r19
    1da0:	15 96       	adiw	r26, 0x05	; 5
    1da2:	8d 93       	st	X+, r24
    1da4:	9c 93       	st	X, r25
    1da6:	16 97       	sbiw	r26, 0x06	; 6
    1da8:	13 96       	adiw	r26, 0x03	; 3
    1daa:	2d 91       	ld	r18, X+
    1dac:	3c 91       	ld	r19, X
    1dae:	14 97       	sbiw	r26, 0x04	; 4
    1db0:	82 17       	cp	r24, r18
    1db2:	93 07       	cpc	r25, r19
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <udd_ep_trans_complet+0x90>
    1db6:	3c c0       	rjmp	.+120    	; 0x1e30 <udd_ep_trans_complet+0x108>
    1db8:	28 1b       	sub	r18, r24
    1dba:	39 0b       	sbc	r19, r25
    1dbc:	21 15       	cp	r18, r1
    1dbe:	b4 e0       	ldi	r27, 0x04	; 4
    1dc0:	3b 07       	cpc	r19, r27
    1dc2:	38 f0       	brcs	.+14     	; 0x1dd2 <udd_ep_trans_complet+0xaa>
    1dc4:	2f ef       	ldi	r18, 0xFF	; 255
    1dc6:	33 e0       	ldi	r19, 0x03	; 3
    1dc8:	c9 01       	movw	r24, r18
    1dca:	b4 01       	movw	r22, r8
    1dcc:	71 d5       	rcall	.+2786   	; 0x28b0 <__udivmodhi4>
    1dce:	28 1b       	sub	r18, r24
    1dd0:	39 0b       	sbc	r19, r25
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	80 81       	ld	r24, Z
    1dd6:	81 ff       	sbrs	r24, 1
    1dd8:	09 c0       	rjmp	.+18     	; 0x1dec <udd_ep_trans_complet+0xc4>
    1dda:	c9 01       	movw	r24, r18
    1ddc:	b4 01       	movw	r22, r8
    1dde:	68 d5       	rcall	.+2768   	; 0x28b0 <__udivmodhi4>
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	89 2b       	or	r24, r25
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <udd_ep_trans_complet+0xc0>
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	84 2f       	mov	r24, r20
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <udd_ep_trans_complet+0xc6>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	d8 01       	movw	r26, r16
    1df0:	9c 91       	ld	r25, X
    1df2:	80 fb       	bst	r24, 0
    1df4:	91 f9       	bld	r25, 1
    1df6:	9c 93       	st	X, r25
    1df8:	cc 0f       	add	r28, r28
    1dfa:	dd 1f       	adc	r29, r29
    1dfc:	cc 0f       	add	r28, r28
    1dfe:	dd 1f       	adc	r29, r29
    1e00:	cc 0f       	add	r28, r28
    1e02:	dd 1f       	adc	r29, r29
    1e04:	c4 5f       	subi	r28, 0xF4	; 244
    1e06:	dd 4d       	sbci	r29, 0xDD	; 221
    1e08:	1e 8a       	std	Y+22, r1	; 0x16
    1e0a:	1f 8a       	std	Y+23, r1	; 0x17
    1e0c:	2a 8b       	std	Y+18, r18	; 0x12
    1e0e:	3b 8b       	std	Y+19, r19	; 0x13
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	2d 91       	ld	r18, X+
    1e14:	3c 91       	ld	r19, X
    1e16:	12 97       	sbiw	r26, 0x02	; 2
    1e18:	15 96       	adiw	r26, 0x05	; 5
    1e1a:	8d 91       	ld	r24, X+
    1e1c:	9c 91       	ld	r25, X
    1e1e:	16 97       	sbiw	r26, 0x06	; 6
    1e20:	82 0f       	add	r24, r18
    1e22:	93 1f       	adc	r25, r19
    1e24:	8c 8b       	std	Y+20, r24	; 0x14
    1e26:	9d 8b       	std	Y+21, r25	; 0x15
    1e28:	f7 01       	movw	r30, r14
    1e2a:	02 e0       	ldi	r16, 0x02	; 2
    1e2c:	06 93       	lac	Z, r16
    1e2e:	ca c0       	rjmp	.+404    	; 0x1fc4 <udd_ep_trans_complet+0x29c>
    1e30:	d8 01       	movw	r26, r16
    1e32:	8c 91       	ld	r24, X
    1e34:	81 ff       	sbrs	r24, 1
    1e36:	b3 c0       	rjmp	.+358    	; 0x1f9e <udd_ep_trans_complet+0x276>
    1e38:	8d 7f       	andi	r24, 0xFD	; 253
    1e3a:	8c 93       	st	X, r24
    1e3c:	cc 0f       	add	r28, r28
    1e3e:	dd 1f       	adc	r29, r29
    1e40:	cc 0f       	add	r28, r28
    1e42:	dd 1f       	adc	r29, r29
    1e44:	cc 0f       	add	r28, r28
    1e46:	dd 1f       	adc	r29, r29
    1e48:	c4 5f       	subi	r28, 0xF4	; 244
    1e4a:	dd 4d       	sbci	r29, 0xDD	; 221
    1e4c:	1e 8a       	std	Y+22, r1	; 0x16
    1e4e:	1f 8a       	std	Y+23, r1	; 0x17
    1e50:	1a 8a       	std	Y+18, r1	; 0x12
    1e52:	1b 8a       	std	Y+19, r1	; 0x13
    1e54:	f7 01       	movw	r30, r14
    1e56:	02 e0       	ldi	r16, 0x02	; 2
    1e58:	06 93       	lac	Z, r16
    1e5a:	b4 c0       	rjmp	.+360    	; 0x1fc4 <udd_ep_trans_complet+0x29c>
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ee 0f       	add	r30, r30
    1e60:	ff 1f       	adc	r31, r31
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	e4 5f       	subi	r30, 0xF4	; 244
    1e6c:	fd 4d       	sbci	r31, 0xDD	; 221
    1e6e:	a2 88       	ldd	r10, Z+18	; 0x12
    1e70:	b3 88       	ldd	r11, Z+19	; 0x13
    1e72:	d8 01       	movw	r26, r16
    1e74:	8c 91       	ld	r24, X
    1e76:	82 ff       	sbrs	r24, 2
    1e78:	19 c0       	rjmp	.+50     	; 0x1eac <udd_ep_trans_complet+0x184>
    1e7a:	11 96       	adiw	r26, 0x01	; 1
    1e7c:	ed 91       	ld	r30, X+
    1e7e:	fc 91       	ld	r31, X
    1e80:	12 97       	sbiw	r26, 0x02	; 2
    1e82:	15 96       	adiw	r26, 0x05	; 5
    1e84:	2d 91       	ld	r18, X+
    1e86:	3c 91       	ld	r19, X
    1e88:	16 97       	sbiw	r26, 0x06	; 6
    1e8a:	13 96       	adiw	r26, 0x03	; 3
    1e8c:	8d 91       	ld	r24, X+
    1e8e:	9c 91       	ld	r25, X
    1e90:	14 97       	sbiw	r26, 0x04	; 4
    1e92:	b4 01       	movw	r22, r8
    1e94:	0d d5       	rcall	.+2586   	; 0x28b0 <__udivmodhi4>
    1e96:	b0 e4       	ldi	r27, 0x40	; 64
    1e98:	db 9e       	mul	r13, r27
    1e9a:	b0 01       	movw	r22, r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	6f 56       	subi	r22, 0x6F	; 111
    1ea0:	7f 4d       	sbci	r23, 0xDF	; 223
    1ea2:	ac 01       	movw	r20, r24
    1ea4:	cf 01       	movw	r24, r30
    1ea6:	82 0f       	add	r24, r18
    1ea8:	93 1f       	adc	r25, r19
    1eaa:	1c d5       	rcall	.+2616   	; 0x28e4 <memcpy>
    1eac:	f8 01       	movw	r30, r16
    1eae:	25 81       	ldd	r18, Z+5	; 0x05
    1eb0:	36 81       	ldd	r19, Z+6	; 0x06
    1eb2:	2a 0d       	add	r18, r10
    1eb4:	3b 1d       	adc	r19, r11
    1eb6:	25 83       	std	Z+5, r18	; 0x05
    1eb8:	36 83       	std	Z+6, r19	; 0x06
    1eba:	83 81       	ldd	r24, Z+3	; 0x03
    1ebc:	94 81       	ldd	r25, Z+4	; 0x04
    1ebe:	82 17       	cp	r24, r18
    1ec0:	93 07       	cpc	r25, r19
    1ec2:	68 f4       	brcc	.+26     	; 0x1ede <udd_ep_trans_complet+0x1b6>
    1ec4:	85 83       	std	Z+5, r24	; 0x05
    1ec6:	96 83       	std	Z+6, r25	; 0x06
    1ec8:	cc 0f       	add	r28, r28
    1eca:	dd 1f       	adc	r29, r29
    1ecc:	cc 0f       	add	r28, r28
    1ece:	dd 1f       	adc	r29, r29
    1ed0:	cc 0f       	add	r28, r28
    1ed2:	dd 1f       	adc	r29, r29
    1ed4:	c4 5f       	subi	r28, 0xF4	; 244
    1ed6:	dd 4d       	sbci	r29, 0xDD	; 221
    1ed8:	8e 89       	ldd	r24, Y+22	; 0x16
    1eda:	9f 89       	ldd	r25, Y+23	; 0x17
    1edc:	60 c0       	rjmp	.+192    	; 0x1f9e <udd_ep_trans_complet+0x276>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ee 0f       	add	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	e4 5f       	subi	r30, 0xF4	; 244
    1eee:	fd 4d       	sbci	r31, 0xDD	; 221
    1ef0:	46 89       	ldd	r20, Z+22	; 0x16
    1ef2:	57 89       	ldd	r21, Z+23	; 0x17
    1ef4:	4a 15       	cp	r20, r10
    1ef6:	5b 05       	cpc	r21, r11
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <udd_ep_trans_complet+0x1d4>
    1efa:	51 c0       	rjmp	.+162    	; 0x1f9e <udd_ep_trans_complet+0x276>
    1efc:	28 17       	cp	r18, r24
    1efe:	39 07       	cpc	r19, r25
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <udd_ep_trans_complet+0x1dc>
    1f02:	4d c0       	rjmp	.+154    	; 0x1f9e <udd_ep_trans_complet+0x276>
    1f04:	ac 01       	movw	r20, r24
    1f06:	42 1b       	sub	r20, r18
    1f08:	53 0b       	sbc	r21, r19
    1f0a:	9a 01       	movw	r18, r20
    1f0c:	21 15       	cp	r18, r1
    1f0e:	54 e0       	ldi	r21, 0x04	; 4
    1f10:	35 07       	cpc	r19, r21
    1f12:	50 f0       	brcs	.+20     	; 0x1f28 <udd_ep_trans_complet+0x200>
    1f14:	2f ef       	ldi	r18, 0xFF	; 255
    1f16:	33 e0       	ldi	r19, 0x03	; 3
    1f18:	c9 01       	movw	r24, r18
    1f1a:	b4 01       	movw	r22, r8
    1f1c:	c9 d4       	rcall	.+2450   	; 0x28b0 <__udivmodhi4>
    1f1e:	d9 01       	movw	r26, r18
    1f20:	a8 1b       	sub	r26, r24
    1f22:	b9 0b       	sbc	r27, r25
    1f24:	cd 01       	movw	r24, r26
    1f26:	07 c0       	rjmp	.+14     	; 0x1f36 <udd_ep_trans_complet+0x20e>
    1f28:	c9 01       	movw	r24, r18
    1f2a:	b4 01       	movw	r22, r8
    1f2c:	c1 d4       	rcall	.+2434   	; 0x28b0 <__udivmodhi4>
    1f2e:	f9 01       	movw	r30, r18
    1f30:	e8 1b       	sub	r30, r24
    1f32:	f9 0b       	sbc	r31, r25
    1f34:	cf 01       	movw	r24, r30
    1f36:	fe 01       	movw	r30, r28
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	e4 5f       	subi	r30, 0xF4	; 244
    1f46:	fd 4d       	sbci	r31, 0xDD	; 221
    1f48:	12 8a       	std	Z+18, r1	; 0x12
    1f4a:	13 8a       	std	Z+19, r1	; 0x13
    1f4c:	88 15       	cp	r24, r8
    1f4e:	99 05       	cpc	r25, r9
    1f50:	78 f4       	brcc	.+30     	; 0x1f70 <udd_ep_trans_complet+0x248>
    1f52:	d8 01       	movw	r26, r16
    1f54:	8c 91       	ld	r24, X
    1f56:	84 60       	ori	r24, 0x04	; 4
    1f58:	8c 93       	st	X, r24
    1f5a:	b0 e4       	ldi	r27, 0x40	; 64
    1f5c:	db 9e       	mul	r13, r27
    1f5e:	c0 01       	movw	r24, r0
    1f60:	11 24       	eor	r1, r1
    1f62:	8f 56       	subi	r24, 0x6F	; 111
    1f64:	9f 4d       	sbci	r25, 0xDF	; 223
    1f66:	84 8b       	std	Z+20, r24	; 0x14
    1f68:	95 8b       	std	Z+21, r25	; 0x15
    1f6a:	86 8a       	std	Z+22, r8	; 0x16
    1f6c:	97 8a       	std	Z+23, r9	; 0x17
    1f6e:	13 c0       	rjmp	.+38     	; 0x1f96 <udd_ep_trans_complet+0x26e>
    1f70:	f8 01       	movw	r30, r16
    1f72:	41 81       	ldd	r20, Z+1	; 0x01
    1f74:	52 81       	ldd	r21, Z+2	; 0x02
    1f76:	25 81       	ldd	r18, Z+5	; 0x05
    1f78:	36 81       	ldd	r19, Z+6	; 0x06
    1f7a:	24 0f       	add	r18, r20
    1f7c:	35 1f       	adc	r19, r21
    1f7e:	cc 0f       	add	r28, r28
    1f80:	dd 1f       	adc	r29, r29
    1f82:	cc 0f       	add	r28, r28
    1f84:	dd 1f       	adc	r29, r29
    1f86:	cc 0f       	add	r28, r28
    1f88:	dd 1f       	adc	r29, r29
    1f8a:	c4 5f       	subi	r28, 0xF4	; 244
    1f8c:	dd 4d       	sbci	r29, 0xDD	; 221
    1f8e:	2c 8b       	std	Y+20, r18	; 0x14
    1f90:	3d 8b       	std	Y+21, r19	; 0x15
    1f92:	8e 8b       	std	Y+22, r24	; 0x16
    1f94:	9f 8b       	std	Y+23, r25	; 0x17
    1f96:	f7 01       	movw	r30, r14
    1f98:	02 e0       	ldi	r16, 0x02	; 2
    1f9a:	06 93       	lac	Z, r16
    1f9c:	13 c0       	rjmp	.+38     	; 0x1fc4 <udd_ep_trans_complet+0x29c>
    1f9e:	d8 01       	movw	r26, r16
    1fa0:	8c 91       	ld	r24, X
    1fa2:	80 ff       	sbrs	r24, 0
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <udd_ep_trans_complet+0x29c>
    1fa6:	8e 7f       	andi	r24, 0xFE	; 254
    1fa8:	8c 93       	st	X, r24
    1faa:	17 96       	adiw	r26, 0x07	; 7
    1fac:	ed 91       	ld	r30, X+
    1fae:	fc 91       	ld	r31, X
    1fb0:	18 97       	sbiw	r26, 0x08	; 8
    1fb2:	30 97       	sbiw	r30, 0x00	; 0
    1fb4:	39 f0       	breq	.+14     	; 0x1fc4 <udd_ep_trans_complet+0x29c>
    1fb6:	15 96       	adiw	r26, 0x05	; 5
    1fb8:	6d 91       	ld	r22, X+
    1fba:	7c 91       	ld	r23, X
    1fbc:	16 97       	sbiw	r26, 0x06	; 6
    1fbe:	4d 2d       	mov	r20, r13
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	09 95       	icall
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	1f 91       	pop	r17
    1fca:	0f 91       	pop	r16
    1fcc:	ff 90       	pop	r15
    1fce:	ef 90       	pop	r14
    1fd0:	df 90       	pop	r13
    1fd2:	bf 90       	pop	r11
    1fd4:	af 90       	pop	r10
    1fd6:	9f 90       	pop	r9
    1fd8:	8f 90       	pop	r8
    1fda:	08 95       	ret

00001fdc <udd_attach>:
    1fdc:	cf 93       	push	r28
    1fde:	cf b7       	in	r28, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	11 dd       	rcall	.-1502   	; 0x1a08 <udd_sleep_mode>
    1fe6:	ea ec       	ldi	r30, 0xCA	; 202
    1fe8:	f4 e0       	ldi	r31, 0x04	; 4
    1fea:	80 e4       	ldi	r24, 0x40	; 64
    1fec:	80 83       	st	Z, r24
    1fee:	80 e2       	ldi	r24, 0x20	; 32
    1ff0:	80 83       	st	Z, r24
    1ff2:	e1 ec       	ldi	r30, 0xC1	; 193
    1ff4:	f4 e0       	ldi	r31, 0x04	; 4
    1ff6:	80 81       	ld	r24, Z
    1ff8:	81 60       	ori	r24, 0x01	; 1
    1ffa:	80 83       	st	Z, r24
    1ffc:	a9 ec       	ldi	r26, 0xC9	; 201
    1ffe:	b4 e0       	ldi	r27, 0x04	; 4
    2000:	8c 91       	ld	r24, X
    2002:	82 60       	ori	r24, 0x02	; 2
    2004:	8c 93       	st	X, r24
    2006:	e8 ec       	ldi	r30, 0xC8	; 200
    2008:	f4 e0       	ldi	r31, 0x04	; 4
    200a:	80 81       	ld	r24, Z
    200c:	80 64       	ori	r24, 0x40	; 64
    200e:	80 83       	st	Z, r24
    2010:	8c 91       	ld	r24, X
    2012:	81 60       	ori	r24, 0x01	; 1
    2014:	8c 93       	st	X, r24
    2016:	80 81       	ld	r24, Z
    2018:	80 68       	ori	r24, 0x80	; 128
    201a:	80 83       	st	Z, r24
    201c:	cf bf       	out	0x3f, r28	; 63
    201e:	cf 91       	pop	r28
    2020:	08 95       	ret

00002022 <udd_enable>:
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	c0 e6       	ldi	r28, 0x60	; 96
    2028:	d0 e0       	ldi	r29, 0x00	; 0
    202a:	18 82       	st	Y, r1
    202c:	80 e3       	ldi	r24, 0x30	; 48
    202e:	0e 94 a9 07 	call	0xf52	; 0xf52 <sysclk_enable_usb>
    2032:	e0 ec       	ldi	r30, 0xC0	; 192
    2034:	f4 e0       	ldi	r31, 0x04	; 4
    2036:	80 81       	ld	r24, Z
    2038:	80 64       	ori	r24, 0x40	; 64
    203a:	80 83       	st	Z, r24
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	88 83       	st	Y, r24
    2040:	cf b7       	in	r28, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	fc 01       	movw	r30, r24
    204a:	ee 0f       	add	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	ee 0f       	add	r30, r30
    2050:	ff 1f       	adc	r31, r31
    2052:	ee 0f       	add	r30, r30
    2054:	ff 1f       	adc	r31, r31
    2056:	e4 5f       	subi	r30, 0xF4	; 244
    2058:	fd 4d       	sbci	r31, 0xDD	; 221
    205a:	11 8a       	std	Z+17, r1	; 0x11
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	88 30       	cpi	r24, 0x08	; 8
    2060:	91 05       	cpc	r25, r1
    2062:	91 f7       	brne	.-28     	; 0x2048 <udd_enable+0x26>
    2064:	e1 e9       	ldi	r30, 0x91	; 145
    2066:	f1 e2       	ldi	r31, 0x21	; 33
    2068:	80 81       	ld	r24, Z
    206a:	8e 7f       	andi	r24, 0xFE	; 254
    206c:	80 83       	st	Z, r24
    206e:	ea e9       	ldi	r30, 0x9A	; 154
    2070:	f1 e2       	ldi	r31, 0x21	; 33
    2072:	80 81       	ld	r24, Z
    2074:	8e 7f       	andi	r24, 0xFE	; 254
    2076:	80 83       	st	Z, r24
    2078:	e3 ea       	ldi	r30, 0xA3	; 163
    207a:	f1 e2       	ldi	r31, 0x21	; 33
    207c:	80 81       	ld	r24, Z
    207e:	8e 7f       	andi	r24, 0xFE	; 254
    2080:	80 83       	st	Z, r24
    2082:	ec ea       	ldi	r30, 0xAC	; 172
    2084:	f1 e2       	ldi	r31, 0x21	; 33
    2086:	80 81       	ld	r24, Z
    2088:	8e 7f       	andi	r24, 0xFE	; 254
    208a:	80 83       	st	Z, r24
    208c:	e5 eb       	ldi	r30, 0xB5	; 181
    208e:	f1 e2       	ldi	r31, 0x21	; 33
    2090:	80 81       	ld	r24, Z
    2092:	8e 7f       	andi	r24, 0xFE	; 254
    2094:	80 83       	st	Z, r24
    2096:	ee eb       	ldi	r30, 0xBE	; 190
    2098:	f1 e2       	ldi	r31, 0x21	; 33
    209a:	80 81       	ld	r24, Z
    209c:	8e 7f       	andi	r24, 0xFE	; 254
    209e:	80 83       	st	Z, r24
    20a0:	6a e1       	ldi	r22, 0x1A	; 26
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	a6 dc       	rcall	.-1716   	; 0x19f4 <nvm_read_byte>
    20a8:	8f 3f       	cpi	r24, 0xFF	; 255
    20aa:	19 f0       	breq	.+6      	; 0x20b2 <udd_enable+0x90>
    20ac:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    20b0:	03 c0       	rjmp	.+6      	; 0x20b8 <udd_enable+0x96>
    20b2:	8f e1       	ldi	r24, 0x1F	; 31
    20b4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    20b8:	6b e1       	ldi	r22, 0x1B	; 27
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	9a dc       	rcall	.-1740   	; 0x19f4 <nvm_read_byte>
    20c0:	8f 3f       	cpi	r24, 0xFF	; 255
    20c2:	19 f0       	breq	.+6      	; 0x20ca <udd_enable+0xa8>
    20c4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    20c8:	03 c0       	rjmp	.+6      	; 0x20d0 <udd_enable+0xae>
    20ca:	8f e1       	ldi	r24, 0x1F	; 31
    20cc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    20d0:	e0 ec       	ldi	r30, 0xC0	; 192
    20d2:	f4 e0       	ldi	r31, 0x04	; 4
    20d4:	80 81       	ld	r24, Z
    20d6:	83 60       	ori	r24, 0x03	; 3
    20d8:	80 83       	st	Z, r24
    20da:	80 81       	ld	r24, Z
    20dc:	80 68       	ori	r24, 0x80	; 128
    20de:	80 83       	st	Z, r24
    20e0:	80 81       	ld	r24, Z
    20e2:	80 61       	ori	r24, 0x10	; 16
    20e4:	80 83       	st	Z, r24
    20e6:	8c e1       	ldi	r24, 0x1C	; 28
    20e8:	92 e2       	ldi	r25, 0x22	; 34
    20ea:	86 83       	std	Z+6, r24	; 0x06
    20ec:	97 83       	std	Z+7, r25	; 0x07
    20ee:	80 81       	ld	r24, Z
    20f0:	80 62       	ori	r24, 0x20	; 32
    20f2:	80 83       	st	Z, r24
    20f4:	8f ef       	ldi	r24, 0xFF	; 255
    20f6:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    20fa:	e8 ec       	ldi	r30, 0xC8	; 200
    20fc:	f4 e0       	ldi	r31, 0x04	; 4
    20fe:	80 81       	ld	r24, Z
    2100:	82 60       	ori	r24, 0x02	; 2
    2102:	80 83       	st	Z, r24
    2104:	10 92 60 22 	sts	0x2260, r1	; 0x802260 <udd_b_idle>
    2108:	80 91 5b 2e 	lds	r24, 0x2E5B	; 0x802e5b <sleepmgr_locks+0x5>
    210c:	8f 3f       	cpi	r24, 0xFF	; 255
    210e:	09 f4       	brne	.+2      	; 0x2112 <udd_enable+0xf0>
    2110:	ff cf       	rjmp	.-2      	; 0x2110 <udd_enable+0xee>
    2112:	9f b7       	in	r25, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	e6 e5       	ldi	r30, 0x56	; 86
    2118:	fe e2       	ldi	r31, 0x2E	; 46
    211a:	85 81       	ldd	r24, Z+5	; 0x05
    211c:	8f 5f       	subi	r24, 0xFF	; 255
    211e:	85 83       	std	Z+5, r24	; 0x05
    2120:	9f bf       	out	0x3f, r25	; 63
    2122:	5c df       	rcall	.-328    	; 0x1fdc <udd_attach>
    2124:	cf bf       	out	0x3f, r28	; 63
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	08 95       	ret

0000212c <udd_set_address>:
    212c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2130:	08 95       	ret

00002132 <udd_getaddress>:
    2132:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2136:	08 95       	ret

00002138 <udd_set_setup_payload>:
    2138:	ea e6       	ldi	r30, 0x6A	; 106
    213a:	f4 e2       	ldi	r31, 0x24	; 36
    213c:	80 87       	std	Z+8, r24	; 0x08
    213e:	91 87       	std	Z+9, r25	; 0x09
    2140:	62 87       	std	Z+10, r22	; 0x0a
    2142:	73 87       	std	Z+11, r23	; 0x0b
    2144:	08 95       	ret

00002146 <udd_ep_alloc>:
    2146:	28 2f       	mov	r18, r24
    2148:	2f 70       	andi	r18, 0x0F	; 15
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	22 0f       	add	r18, r18
    214e:	33 1f       	adc	r19, r19
    2150:	08 2e       	mov	r0, r24
    2152:	00 0c       	add	r0, r0
    2154:	99 0b       	sbc	r25, r25
    2156:	88 27       	eor	r24, r24
    2158:	99 0f       	add	r25, r25
    215a:	88 1f       	adc	r24, r24
    215c:	99 27       	eor	r25, r25
    215e:	82 0f       	add	r24, r18
    2160:	93 1f       	adc	r25, r19
    2162:	fc 01       	movw	r30, r24
    2164:	ee 0f       	add	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	ee 0f       	add	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	ee 0f       	add	r30, r30
    216e:	ff 1f       	adc	r31, r31
    2170:	e4 5f       	subi	r30, 0xF4	; 244
    2172:	fd 4d       	sbci	r31, 0xDD	; 221
    2174:	21 89       	ldd	r18, Z+17	; 0x11
    2176:	20 7c       	andi	r18, 0xC0	; 192
    2178:	09 f0       	breq	.+2      	; 0x217c <udd_ep_alloc+0x36>
    217a:	58 c0       	rjmp	.+176    	; 0x222c <udd_ep_alloc+0xe6>
    217c:	63 70       	andi	r22, 0x03	; 3
    217e:	61 30       	cpi	r22, 0x01	; 1
    2180:	11 f0       	breq	.+4      	; 0x2186 <udd_ep_alloc+0x40>
    2182:	18 f4       	brcc	.+6      	; 0x218a <udd_ep_alloc+0x44>
    2184:	04 c0       	rjmp	.+8      	; 0x218e <udd_ep_alloc+0x48>
    2186:	20 ec       	ldi	r18, 0xC0	; 192
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <udd_ep_alloc+0x4a>
    218a:	20 e8       	ldi	r18, 0x80	; 128
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <udd_ep_alloc+0x4a>
    218e:	20 e4       	ldi	r18, 0x40	; 64
    2190:	40 38       	cpi	r20, 0x80	; 128
    2192:	51 05       	cpc	r21, r1
    2194:	e9 f0       	breq	.+58     	; 0x21d0 <udd_ep_alloc+0x8a>
    2196:	50 f4       	brcc	.+20     	; 0x21ac <udd_ep_alloc+0x66>
    2198:	40 32       	cpi	r20, 0x20	; 32
    219a:	51 05       	cpc	r21, r1
    219c:	a9 f0       	breq	.+42     	; 0x21c8 <udd_ep_alloc+0x82>
    219e:	40 34       	cpi	r20, 0x40	; 64
    21a0:	51 05       	cpc	r21, r1
    21a2:	a1 f0       	breq	.+40     	; 0x21cc <udd_ep_alloc+0x86>
    21a4:	40 31       	cpi	r20, 0x10	; 16
    21a6:	51 05       	cpc	r21, r1
    21a8:	d9 f4       	brne	.+54     	; 0x21e0 <udd_ep_alloc+0x9a>
    21aa:	0c c0       	rjmp	.+24     	; 0x21c4 <udd_ep_alloc+0x7e>
    21ac:	41 15       	cp	r20, r1
    21ae:	32 e0       	ldi	r19, 0x02	; 2
    21b0:	53 07       	cpc	r21, r19
    21b2:	91 f0       	breq	.+36     	; 0x21d8 <udd_ep_alloc+0x92>
    21b4:	4f 3f       	cpi	r20, 0xFF	; 255
    21b6:	33 e0       	ldi	r19, 0x03	; 3
    21b8:	53 07       	cpc	r21, r19
    21ba:	81 f0       	breq	.+32     	; 0x21dc <udd_ep_alloc+0x96>
    21bc:	41 15       	cp	r20, r1
    21be:	51 40       	sbci	r21, 0x01	; 1
    21c0:	79 f4       	brne	.+30     	; 0x21e0 <udd_ep_alloc+0x9a>
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <udd_ep_alloc+0x8e>
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	0d c0       	rjmp	.+26     	; 0x21e2 <udd_ep_alloc+0x9c>
    21c8:	42 e0       	ldi	r20, 0x02	; 2
    21ca:	0b c0       	rjmp	.+22     	; 0x21e2 <udd_ep_alloc+0x9c>
    21cc:	43 e0       	ldi	r20, 0x03	; 3
    21ce:	09 c0       	rjmp	.+18     	; 0x21e2 <udd_ep_alloc+0x9c>
    21d0:	44 e0       	ldi	r20, 0x04	; 4
    21d2:	07 c0       	rjmp	.+14     	; 0x21e2 <udd_ep_alloc+0x9c>
    21d4:	45 e0       	ldi	r20, 0x05	; 5
    21d6:	05 c0       	rjmp	.+10     	; 0x21e2 <udd_ep_alloc+0x9c>
    21d8:	46 e0       	ldi	r20, 0x06	; 6
    21da:	03 c0       	rjmp	.+6      	; 0x21e2 <udd_ep_alloc+0x9c>
    21dc:	47 e0       	ldi	r20, 0x07	; 7
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <udd_ep_alloc+0x9c>
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	fc 01       	movw	r30, r24
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	ee 0f       	add	r30, r30
    21ea:	ff 1f       	adc	r31, r31
    21ec:	ee 0f       	add	r30, r30
    21ee:	ff 1f       	adc	r31, r31
    21f0:	e4 5f       	subi	r30, 0xF4	; 244
    21f2:	fd 4d       	sbci	r31, 0xDD	; 221
    21f4:	11 8a       	std	Z+17, r1	; 0x11
    21f6:	dc 01       	movw	r26, r24
    21f8:	aa 0f       	add	r26, r26
    21fa:	bb 1f       	adc	r27, r27
    21fc:	aa 0f       	add	r26, r26
    21fe:	bb 1f       	adc	r27, r27
    2200:	aa 0f       	add	r26, r26
    2202:	bb 1f       	adc	r27, r27
    2204:	a4 5e       	subi	r26, 0xE4	; 228
    2206:	bd 4d       	sbci	r27, 0xDD	; 221
    2208:	36 e0       	ldi	r19, 0x06	; 6
    220a:	3c 93       	st	X, r19
    220c:	24 2b       	or	r18, r20
    220e:	21 8b       	std	Z+17, r18	; 0x11
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	fc 01       	movw	r30, r24
    221e:	e4 5f       	subi	r30, 0xF4	; 244
    2220:	fd 4d       	sbci	r31, 0xDD	; 221
    2222:	81 89       	ldd	r24, Z+17	; 0x11
    2224:	80 62       	ori	r24, 0x20	; 32
    2226:	81 8b       	std	Z+17, r24	; 0x11
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	08 95       	ret
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	08 95       	ret

00002230 <udd_ep_is_halted>:
    2230:	e8 2f       	mov	r30, r24
    2232:	ef 70       	andi	r30, 0x0F	; 15
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	08 2e       	mov	r0, r24
    223c:	00 0c       	add	r0, r0
    223e:	99 0b       	sbc	r25, r25
    2240:	88 27       	eor	r24, r24
    2242:	99 0f       	add	r25, r25
    2244:	88 1f       	adc	r24, r24
    2246:	99 27       	eor	r25, r25
    2248:	e8 0f       	add	r30, r24
    224a:	f9 1f       	adc	r31, r25
    224c:	ee 0f       	add	r30, r30
    224e:	ff 1f       	adc	r31, r31
    2250:	ee 0f       	add	r30, r30
    2252:	ff 1f       	adc	r31, r31
    2254:	ee 0f       	add	r30, r30
    2256:	ff 1f       	adc	r31, r31
    2258:	e4 5f       	subi	r30, 0xF4	; 244
    225a:	fd 4d       	sbci	r31, 0xDD	; 221
    225c:	81 89       	ldd	r24, Z+17	; 0x11
    225e:	82 fb       	bst	r24, 2
    2260:	88 27       	eor	r24, r24
    2262:	80 f9       	bld	r24, 0
    2264:	08 95       	ret

00002266 <udd_ep_clear_halt>:
    2266:	28 2f       	mov	r18, r24
    2268:	2f 70       	andi	r18, 0x0F	; 15
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	a9 01       	movw	r20, r18
    226e:	44 0f       	add	r20, r20
    2270:	55 1f       	adc	r21, r21
    2272:	28 2f       	mov	r18, r24
    2274:	08 2e       	mov	r0, r24
    2276:	00 0c       	add	r0, r0
    2278:	33 0b       	sbc	r19, r19
    227a:	22 27       	eor	r18, r18
    227c:	33 0f       	add	r19, r19
    227e:	22 1f       	adc	r18, r18
    2280:	33 27       	eor	r19, r19
    2282:	24 0f       	add	r18, r20
    2284:	35 1f       	adc	r19, r21
    2286:	f9 01       	movw	r30, r18
    2288:	ee 0f       	add	r30, r30
    228a:	ff 1f       	adc	r31, r31
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	e4 5f       	subi	r30, 0xF4	; 244
    2296:	fd 4d       	sbci	r31, 0xDD	; 221
    2298:	91 89       	ldd	r25, Z+17	; 0x11
    229a:	92 ff       	sbrs	r25, 2
    229c:	17 c0       	rjmp	.+46     	; 0x22cc <udd_ep_clear_halt+0x66>
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	22 0f       	add	r18, r18
    22a4:	33 1f       	adc	r19, r19
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	f9 01       	movw	r30, r18
    22ac:	e4 5f       	subi	r30, 0xF4	; 244
    22ae:	fd 4d       	sbci	r31, 0xDD	; 221
    22b0:	91 89       	ldd	r25, Z+17	; 0x11
    22b2:	9b 7f       	andi	r25, 0xFB	; 251
    22b4:	91 8b       	std	Z+17, r25	; 0x11
    22b6:	ae dc       	rcall	.-1700   	; 0x1c14 <udd_ep_get_job>
    22b8:	fc 01       	movw	r30, r24
    22ba:	80 81       	ld	r24, Z
    22bc:	80 ff       	sbrs	r24, 0
    22be:	06 c0       	rjmp	.+12     	; 0x22cc <udd_ep_clear_halt+0x66>
    22c0:	8e 7f       	andi	r24, 0xFE	; 254
    22c2:	80 83       	st	Z, r24
    22c4:	07 80       	ldd	r0, Z+7	; 0x07
    22c6:	f0 85       	ldd	r31, Z+8	; 0x08
    22c8:	e0 2d       	mov	r30, r0
    22ca:	09 95       	icall
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	08 95       	ret

000022d0 <udd_ep_run>:
    22d0:	7f 92       	push	r7
    22d2:	8f 92       	push	r8
    22d4:	9f 92       	push	r9
    22d6:	af 92       	push	r10
    22d8:	bf 92       	push	r11
    22da:	cf 92       	push	r12
    22dc:	df 92       	push	r13
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	98 2e       	mov	r9, r24
    22ec:	86 2e       	mov	r8, r22
    22ee:	6a 01       	movw	r12, r20
    22f0:	79 01       	movw	r14, r18
    22f2:	90 dc       	rcall	.-1760   	; 0x1c14 <udd_ep_get_job>
    22f4:	5c 01       	movw	r10, r24
    22f6:	79 2c       	mov	r7, r9
    22f8:	77 1c       	adc	r7, r7
    22fa:	77 24       	eor	r7, r7
    22fc:	77 1c       	adc	r7, r7
    22fe:	c9 2d       	mov	r28, r9
    2300:	cf 70       	andi	r28, 0x0F	; 15
    2302:	d0 e0       	ldi	r29, 0x00	; 0
    2304:	cc 0f       	add	r28, r28
    2306:	dd 1f       	adc	r29, r29
    2308:	c7 0d       	add	r28, r7
    230a:	d1 1d       	adc	r29, r1
    230c:	fe 01       	movw	r30, r28
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	e4 5f       	subi	r30, 0xF4	; 244
    231c:	fd 4d       	sbci	r31, 0xDD	; 221
    231e:	81 89       	ldd	r24, Z+17	; 0x11
    2320:	80 7c       	andi	r24, 0xC0	; 192
    2322:	09 f4       	brne	.+2      	; 0x2326 <udd_ep_run+0x56>
    2324:	7d c0       	rjmp	.+250    	; 0x2420 <udd_ep_run+0x150>
    2326:	fe 01       	movw	r30, r28
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31
    232c:	ee 0f       	add	r30, r30
    232e:	ff 1f       	adc	r31, r31
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	e4 5f       	subi	r30, 0xF4	; 244
    2336:	fd 4d       	sbci	r31, 0xDD	; 221
    2338:	81 89       	ldd	r24, Z+17	; 0x11
    233a:	80 7c       	andi	r24, 0xC0	; 192
    233c:	80 3c       	cpi	r24, 0xC0	; 192
    233e:	61 f0       	breq	.+24     	; 0x2358 <udd_ep_run+0x88>
    2340:	fe 01       	movw	r30, r28
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	e4 5f       	subi	r30, 0xF4	; 244
    2350:	fd 4d       	sbci	r31, 0xDD	; 221
    2352:	81 89       	ldd	r24, Z+17	; 0x11
    2354:	82 fd       	sbrc	r24, 2
    2356:	66 c0       	rjmp	.+204    	; 0x2424 <udd_ep_run+0x154>
    2358:	8f b7       	in	r24, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	f5 01       	movw	r30, r10
    235e:	90 81       	ld	r25, Z
    2360:	90 ff       	sbrs	r25, 0
    2362:	03 c0       	rjmp	.+6      	; 0x236a <udd_ep_run+0x9a>
    2364:	8f bf       	out	0x3f, r24	; 63
    2366:	71 2c       	mov	r7, r1
    2368:	5e c0       	rjmp	.+188    	; 0x2426 <udd_ep_run+0x156>
    236a:	f5 01       	movw	r30, r10
    236c:	90 81       	ld	r25, Z
    236e:	91 60       	ori	r25, 0x01	; 1
    2370:	90 83       	st	Z, r25
    2372:	8f bf       	out	0x3f, r24	; 63
    2374:	c1 82       	std	Z+1, r12	; 0x01
    2376:	d2 82       	std	Z+2, r13	; 0x02
    2378:	e3 82       	std	Z+3, r14	; 0x03
    237a:	f4 82       	std	Z+4, r15	; 0x04
    237c:	15 82       	std	Z+5, r1	; 0x05
    237e:	16 82       	std	Z+6, r1	; 0x06
    2380:	07 83       	std	Z+7, r16	; 0x07
    2382:	10 87       	std	Z+8, r17	; 0x08
    2384:	81 10       	cpse	r8, r1
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <udd_ep_run+0xc4>
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	e1 14       	cp	r14, r1
    238c:	f1 04       	cpc	r15, r1
    238e:	19 f0       	breq	.+6      	; 0x2396 <udd_ep_run+0xc6>
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <udd_ep_run+0xc6>
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	f5 01       	movw	r30, r10
    2398:	80 81       	ld	r24, Z
    239a:	90 fb       	bst	r25, 0
    239c:	81 f9       	bld	r24, 1
    239e:	8b 7f       	andi	r24, 0xFB	; 251
    23a0:	80 83       	st	Z, r24
    23a2:	77 20       	and	r7, r7
    23a4:	59 f0       	breq	.+22     	; 0x23bc <udd_ep_run+0xec>
    23a6:	cc 0f       	add	r28, r28
    23a8:	dd 1f       	adc	r29, r29
    23aa:	cc 0f       	add	r28, r28
    23ac:	dd 1f       	adc	r29, r29
    23ae:	cc 0f       	add	r28, r28
    23b0:	dd 1f       	adc	r29, r29
    23b2:	c4 5f       	subi	r28, 0xF4	; 244
    23b4:	dd 4d       	sbci	r29, 0xDD	; 221
    23b6:	1e 8a       	std	Y+22, r1	; 0x16
    23b8:	1f 8a       	std	Y+23, r1	; 0x17
    23ba:	2d c0       	rjmp	.+90     	; 0x2416 <udd_ep_run+0x146>
    23bc:	fe 01       	movw	r30, r28
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	e4 5f       	subi	r30, 0xF4	; 244
    23cc:	fd 4d       	sbci	r31, 0xDD	; 221
    23ce:	81 89       	ldd	r24, Z+17	; 0x11
    23d0:	80 7c       	andi	r24, 0xC0	; 192
    23d2:	80 3c       	cpi	r24, 0xC0	; 192
    23d4:	a1 f4       	brne	.+40     	; 0x23fe <udd_ep_run+0x12e>
    23d6:	ce 01       	movw	r24, r28
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	84 5e       	subi	r24, 0xE4	; 228
    23e6:	9d 4d       	sbci	r25, 0xDD	; 221
    23e8:	ef db       	rcall	.-2082   	; 0x1bc8 <udd_ep_get_size>
    23ea:	bc 01       	movw	r22, r24
    23ec:	c7 01       	movw	r24, r14
    23ee:	60 d2       	rcall	.+1216   	; 0x28b0 <__udivmodhi4>
    23f0:	89 2b       	or	r24, r25
    23f2:	29 f0       	breq	.+10     	; 0x23fe <udd_ep_run+0x12e>
    23f4:	f5 01       	movw	r30, r10
    23f6:	80 81       	ld	r24, Z
    23f8:	8e 7f       	andi	r24, 0xFE	; 254
    23fa:	80 83       	st	Z, r24
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <udd_ep_run+0x156>
    23fe:	cc 0f       	add	r28, r28
    2400:	dd 1f       	adc	r29, r29
    2402:	cc 0f       	add	r28, r28
    2404:	dd 1f       	adc	r29, r29
    2406:	cc 0f       	add	r28, r28
    2408:	dd 1f       	adc	r29, r29
    240a:	c4 5f       	subi	r28, 0xF4	; 244
    240c:	dd 4d       	sbci	r29, 0xDD	; 221
    240e:	1a 8a       	std	Y+18, r1	; 0x12
    2410:	1b 8a       	std	Y+19, r1	; 0x13
    2412:	1e 8a       	std	Y+22, r1	; 0x16
    2414:	1f 8a       	std	Y+23, r1	; 0x17
    2416:	89 2d       	mov	r24, r9
    2418:	87 dc       	rcall	.-1778   	; 0x1d28 <udd_ep_trans_complet>
    241a:	77 24       	eor	r7, r7
    241c:	73 94       	inc	r7
    241e:	03 c0       	rjmp	.+6      	; 0x2426 <udd_ep_run+0x156>
    2420:	71 2c       	mov	r7, r1
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <udd_ep_run+0x156>
    2424:	71 2c       	mov	r7, r1
    2426:	87 2d       	mov	r24, r7
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	1f 91       	pop	r17
    242e:	0f 91       	pop	r16
    2430:	ff 90       	pop	r15
    2432:	ef 90       	pop	r14
    2434:	df 90       	pop	r13
    2436:	cf 90       	pop	r12
    2438:	bf 90       	pop	r11
    243a:	af 90       	pop	r10
    243c:	9f 90       	pop	r9
    243e:	8f 90       	pop	r8
    2440:	7f 90       	pop	r7
    2442:	08 95       	ret

00002444 <udd_ep_abort>:
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	18 2f       	mov	r17, r24
    2450:	f8 2e       	mov	r15, r24
    2452:	ff 1c       	adc	r15, r15
    2454:	ff 24       	eor	r15, r15
    2456:	ff 1c       	adc	r15, r15
    2458:	c8 2f       	mov	r28, r24
    245a:	cf 70       	andi	r28, 0x0F	; 15
    245c:	d0 e0       	ldi	r29, 0x00	; 0
    245e:	cc 0f       	add	r28, r28
    2460:	dd 1f       	adc	r29, r29
    2462:	cf 0d       	add	r28, r15
    2464:	d1 1d       	adc	r29, r1
    2466:	d6 db       	rcall	.-2132   	; 0x1c14 <udd_ep_get_job>
    2468:	dc 01       	movw	r26, r24
    246a:	fe 01       	movw	r30, r28
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	ee 0f       	add	r30, r30
    2476:	ff 1f       	adc	r31, r31
    2478:	e4 5e       	subi	r30, 0xE4	; 228
    247a:	fd 4d       	sbci	r31, 0xDD	; 221
    247c:	02 e0       	ldi	r16, 0x02	; 2
    247e:	05 93       	las	Z, r16
    2480:	8c 91       	ld	r24, X
    2482:	80 ff       	sbrs	r24, 0
    2484:	22 c0       	rjmp	.+68     	; 0x24ca <udd_ep_abort+0x86>
    2486:	8e 7f       	andi	r24, 0xFE	; 254
    2488:	8c 93       	st	X, r24
    248a:	17 96       	adiw	r26, 0x07	; 7
    248c:	ed 91       	ld	r30, X+
    248e:	fc 91       	ld	r31, X
    2490:	18 97       	sbiw	r26, 0x08	; 8
    2492:	30 97       	sbiw	r30, 0x00	; 0
    2494:	d1 f0       	breq	.+52     	; 0x24ca <udd_ep_abort+0x86>
    2496:	ff 20       	and	r15, r15
    2498:	59 f0       	breq	.+22     	; 0x24b0 <udd_ep_abort+0x6c>
    249a:	cc 0f       	add	r28, r28
    249c:	dd 1f       	adc	r29, r29
    249e:	cc 0f       	add	r28, r28
    24a0:	dd 1f       	adc	r29, r29
    24a2:	cc 0f       	add	r28, r28
    24a4:	dd 1f       	adc	r29, r29
    24a6:	c4 5f       	subi	r28, 0xF4	; 244
    24a8:	dd 4d       	sbci	r29, 0xDD	; 221
    24aa:	6e 89       	ldd	r22, Y+22	; 0x16
    24ac:	7f 89       	ldd	r23, Y+23	; 0x17
    24ae:	0a c0       	rjmp	.+20     	; 0x24c4 <udd_ep_abort+0x80>
    24b0:	cc 0f       	add	r28, r28
    24b2:	dd 1f       	adc	r29, r29
    24b4:	cc 0f       	add	r28, r28
    24b6:	dd 1f       	adc	r29, r29
    24b8:	cc 0f       	add	r28, r28
    24ba:	dd 1f       	adc	r29, r29
    24bc:	c4 5f       	subi	r28, 0xF4	; 244
    24be:	dd 4d       	sbci	r29, 0xDD	; 221
    24c0:	6a 89       	ldd	r22, Y+18	; 0x12
    24c2:	7b 89       	ldd	r23, Y+19	; 0x13
    24c4:	41 2f       	mov	r20, r17
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	09 95       	icall
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	ff 90       	pop	r15
    24d4:	08 95       	ret

000024d6 <udd_ep_free>:
    24d6:	cf 93       	push	r28
    24d8:	c8 2f       	mov	r28, r24
    24da:	b4 df       	rcall	.-152    	; 0x2444 <udd_ep_abort>
    24dc:	ec 2f       	mov	r30, r28
    24de:	ef 70       	andi	r30, 0x0F	; 15
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	8c 2f       	mov	r24, r28
    24e8:	cc 0f       	add	r28, r28
    24ea:	99 0b       	sbc	r25, r25
    24ec:	88 27       	eor	r24, r24
    24ee:	99 0f       	add	r25, r25
    24f0:	88 1f       	adc	r24, r24
    24f2:	99 27       	eor	r25, r25
    24f4:	e8 0f       	add	r30, r24
    24f6:	f9 1f       	adc	r31, r25
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	ee 0f       	add	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	e4 5f       	subi	r30, 0xF4	; 244
    2506:	fd 4d       	sbci	r31, 0xDD	; 221
    2508:	11 8a       	std	Z+17, r1	; 0x11
    250a:	cf 91       	pop	r28
    250c:	08 95       	ret

0000250e <udd_ep_set_halt>:
    250e:	0f 93       	push	r16
    2510:	e8 2f       	mov	r30, r24
    2512:	ef 70       	andi	r30, 0x0F	; 15
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	ee 0f       	add	r30, r30
    2518:	ff 1f       	adc	r31, r31
    251a:	28 2f       	mov	r18, r24
    251c:	08 2e       	mov	r0, r24
    251e:	00 0c       	add	r0, r0
    2520:	33 0b       	sbc	r19, r19
    2522:	22 27       	eor	r18, r18
    2524:	33 0f       	add	r19, r19
    2526:	22 1f       	adc	r18, r18
    2528:	33 27       	eor	r19, r19
    252a:	e2 0f       	add	r30, r18
    252c:	f3 1f       	adc	r31, r19
    252e:	df 01       	movw	r26, r30
    2530:	aa 0f       	add	r26, r26
    2532:	bb 1f       	adc	r27, r27
    2534:	aa 0f       	add	r26, r26
    2536:	bb 1f       	adc	r27, r27
    2538:	aa 0f       	add	r26, r26
    253a:	bb 1f       	adc	r27, r27
    253c:	a4 5f       	subi	r26, 0xF4	; 244
    253e:	bd 4d       	sbci	r27, 0xDD	; 221
    2540:	51 96       	adiw	r26, 0x11	; 17
    2542:	9c 91       	ld	r25, X
    2544:	51 97       	sbiw	r26, 0x11	; 17
    2546:	94 60       	ori	r25, 0x04	; 4
    2548:	51 96       	adiw	r26, 0x11	; 17
    254a:	9c 93       	st	X, r25
    254c:	ee 0f       	add	r30, r30
    254e:	ff 1f       	adc	r31, r31
    2550:	ee 0f       	add	r30, r30
    2552:	ff 1f       	adc	r31, r31
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	e4 5e       	subi	r30, 0xE4	; 228
    255a:	fd 4d       	sbci	r31, 0xDD	; 221
    255c:	01 e0       	ldi	r16, 0x01	; 1
    255e:	06 93       	lac	Z, r16
    2560:	71 df       	rcall	.-286    	; 0x2444 <udd_ep_abort>
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	0f 91       	pop	r16
    2566:	08 95       	ret

00002568 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2568:	1f 92       	push	r1
    256a:	0f 92       	push	r0
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	0f 92       	push	r0
    2570:	11 24       	eor	r1, r1
    2572:	0f 93       	push	r16
    2574:	2f 93       	push	r18
    2576:	3f 93       	push	r19
    2578:	4f 93       	push	r20
    257a:	5f 93       	push	r21
    257c:	6f 93       	push	r22
    257e:	7f 93       	push	r23
    2580:	8f 93       	push	r24
    2582:	9f 93       	push	r25
    2584:	af 93       	push	r26
    2586:	bf 93       	push	r27
    2588:	ef 93       	push	r30
    258a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    258c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2590:	88 23       	and	r24, r24
    2592:	44 f4       	brge	.+16     	; 0x25a4 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2594:	80 e8       	ldi	r24, 0x80	; 128
    2596:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    259a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    259e:	0e 94 42 02 	call	0x484	; 0x484 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    25a2:	8a c0       	rjmp	.+276    	; 0x26b8 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    25a4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    25a8:	82 ff       	sbrs	r24, 2
    25aa:	20 c0       	rjmp	.+64     	; 0x25ec <__vector_125+0x84>
		udd_ack_underflow_event();
    25ac:	84 e0       	ldi	r24, 0x04	; 4
    25ae:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    25b2:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <udd_sram+0x18>
    25b6:	86 ff       	sbrs	r24, 6
    25b8:	7f c0       	rjmp	.+254    	; 0x26b8 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    25ba:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    25be:	81 fd       	sbrc	r24, 1
    25c0:	7b c0       	rjmp	.+246    	; 0x26b8 <__vector_125+0x150>
    25c2:	43 db       	rcall	.-2426   	; 0x1c4a <udd_ctrl_interrupt_tc_setup>
    25c4:	81 11       	cpse	r24, r1
    25c6:	78 c0       	rjmp	.+240    	; 0x26b8 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    25c8:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	11 f4       	brne	.+4      	; 0x25d4 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    25d0:	79 da       	rcall	.-2830   	; 0x1ac4 <udd_ctrl_send_zlp_in>
    25d2:	72 c0       	rjmp	.+228    	; 0x26b8 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    25d4:	84 30       	cpi	r24, 0x04	; 4
    25d6:	09 f0       	breq	.+2      	; 0x25da <__vector_125+0x72>
    25d8:	6f c0       	rjmp	.+222    	; 0x26b8 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    25da:	e5 e2       	ldi	r30, 0x25	; 37
    25dc:	f2 e2       	ldi	r31, 0x22	; 34
    25de:	04 e0       	ldi	r16, 0x04	; 4
    25e0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    25e2:	ed e1       	ldi	r30, 0x1D	; 29
    25e4:	f2 e2       	ldi	r31, 0x22	; 34
    25e6:	04 e0       	ldi	r16, 0x04	; 4
    25e8:	05 93       	las	Z, r16
    25ea:	66 c0       	rjmp	.+204    	; 0x26b8 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    25ec:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    25f0:	81 ff       	sbrs	r24, 1
    25f2:	5d c0       	rjmp	.+186    	; 0x26ae <__vector_125+0x146>
		udd_ack_overflow_event();
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    25fa:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udd_sram+0x10>
    25fe:	86 ff       	sbrs	r24, 6
    2600:	5b c0       	rjmp	.+182    	; 0x26b8 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2602:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2606:	81 fd       	sbrc	r24, 1
    2608:	57 c0       	rjmp	.+174    	; 0x26b8 <__vector_125+0x150>
    260a:	1f db       	rcall	.-2498   	; 0x1c4a <udd_ctrl_interrupt_tc_setup>
    260c:	81 11       	cpse	r24, r1
    260e:	54 c0       	rjmp	.+168    	; 0x26b8 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2610:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    2614:	82 30       	cpi	r24, 0x02	; 2
    2616:	41 f4       	brne	.+16     	; 0x2628 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2618:	84 e0       	ldi	r24, 0x04	; 4
    261a:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    261e:	ec e1       	ldi	r30, 0x1C	; 28
    2620:	f2 e2       	ldi	r31, 0x22	; 34
    2622:	02 e0       	ldi	r16, 0x02	; 2
    2624:	06 93       	lac	Z, r16
    2626:	48 c0       	rjmp	.+144    	; 0x26b8 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2628:	83 30       	cpi	r24, 0x03	; 3
    262a:	09 f0       	breq	.+2      	; 0x262e <__vector_125+0xc6>
    262c:	45 c0       	rjmp	.+138    	; 0x26b8 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    262e:	e5 e2       	ldi	r30, 0x25	; 37
    2630:	f2 e2       	ldi	r31, 0x22	; 34
    2632:	04 e0       	ldi	r16, 0x04	; 4
    2634:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2636:	ed e1       	ldi	r30, 0x1D	; 29
    2638:	f2 e2       	ldi	r31, 0x22	; 34
    263a:	04 e0       	ldi	r16, 0x04	; 4
    263c:	05 93       	las	Z, r16
    263e:	3c c0       	rjmp	.+120    	; 0x26b8 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2640:	80 e1       	ldi	r24, 0x10	; 16
    2642:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	fd de       	rcall	.-518    	; 0x2444 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    264a:	81 e8       	ldi	r24, 0x81	; 129
    264c:	fb de       	rcall	.-522    	; 0x2444 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	f9 de       	rcall	.-526    	; 0x2444 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2652:	82 e8       	ldi	r24, 0x82	; 130
    2654:	f7 de       	rcall	.-530    	; 0x2444 <udd_ep_abort>
		}
#endif
		udc_reset();
    2656:	0e 94 2b 09 	call	0x1256	; 0x1256 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    265a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    265e:	ec e0       	ldi	r30, 0x0C	; 12
    2660:	f2 e2       	ldi	r31, 0x22	; 34
    2662:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2664:	96 e0       	ldi	r25, 0x06	; 6
    2666:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2668:	83 e4       	ldi	r24, 0x43	; 67
    266a:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    266c:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    266e:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2670:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2672:	87 ec       	ldi	r24, 0xC7	; 199
    2674:	91 e2       	ldi	r25, 0x21	; 33
    2676:	84 8b       	std	Z+20, r24	; 0x14
    2678:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    267a:	ef d9       	rcall	.-3106   	; 0x1a5a <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    267c:	1d c0       	rjmp	.+58     	; 0x26b8 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    267e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2682:	86 ff       	sbrs	r24, 6
    2684:	08 c0       	rjmp	.+16     	; 0x2696 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2686:	80 e4       	ldi	r24, 0x40	; 64
    2688:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	bc d9       	rcall	.-3208   	; 0x1a08 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2690:	0e 94 40 02 	call	0x480	; 0x480 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2694:	11 c0       	rjmp	.+34     	; 0x26b8 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2696:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    269a:	85 ff       	sbrs	r24, 5
    269c:	0d c0       	rjmp	.+26     	; 0x26b8 <__vector_125+0x150>
		udd_ack_resume_event();
    269e:	80 e2       	ldi	r24, 0x20	; 32
    26a0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	b0 d9       	rcall	.-3232   	; 0x1a08 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    26a8:	0e 94 41 02 	call	0x482	; 0x482 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    26ac:	05 c0       	rjmp	.+10     	; 0x26b8 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    26ae:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26b2:	84 fd       	sbrc	r24, 4
    26b4:	c5 cf       	rjmp	.-118    	; 0x2640 <__vector_125+0xd8>
    26b6:	e3 cf       	rjmp	.-58     	; 0x267e <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    26b8:	ff 91       	pop	r31
    26ba:	ef 91       	pop	r30
    26bc:	bf 91       	pop	r27
    26be:	af 91       	pop	r26
    26c0:	9f 91       	pop	r25
    26c2:	8f 91       	pop	r24
    26c4:	7f 91       	pop	r23
    26c6:	6f 91       	pop	r22
    26c8:	5f 91       	pop	r21
    26ca:	4f 91       	pop	r20
    26cc:	3f 91       	pop	r19
    26ce:	2f 91       	pop	r18
    26d0:	0f 91       	pop	r16
    26d2:	0f 90       	pop	r0
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	0f 90       	pop	r0
    26d8:	1f 90       	pop	r1
    26da:	18 95       	reti

000026dc <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    26dc:	1f 92       	push	r1
    26de:	0f 92       	push	r0
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	0f 92       	push	r0
    26e4:	11 24       	eor	r1, r1
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	2f 93       	push	r18
    26ec:	3f 93       	push	r19
    26ee:	4f 93       	push	r20
    26f0:	5f 93       	push	r21
    26f2:	6f 93       	push	r22
    26f4:	7f 93       	push	r23
    26f6:	8f 93       	push	r24
    26f8:	9f 93       	push	r25
    26fa:	af 93       	push	r26
    26fc:	bf 93       	push	r27
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	ef 93       	push	r30
    2704:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2706:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    270a:	81 fd       	sbrc	r24, 1
    270c:	03 c0       	rjmp	.+6      	; 0x2714 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    270e:	9d da       	rcall	.-2758   	; 0x1c4a <udd_ctrl_interrupt_tc_setup>
    2710:	81 11       	cpse	r24, r1
    2712:	b9 c0       	rjmp	.+370    	; 0x2886 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    271a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    271e:	81 95       	neg	r24
    2720:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2722:	ec e1       	ldi	r30, 0x1C	; 28
    2724:	f2 e2       	ldi	r31, 0x22	; 34
    2726:	e8 1b       	sub	r30, r24
    2728:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    272a:	20 81       	ld	r18, Z
    272c:	31 81       	ldd	r19, Z+1	; 0x01
    272e:	2c 51       	subi	r18, 0x1C	; 28
    2730:	32 42       	sbci	r19, 0x22	; 34
    2732:	36 95       	lsr	r19
    2734:	27 95       	ror	r18
    2736:	36 95       	lsr	r19
    2738:	27 95       	ror	r18
    273a:	36 95       	lsr	r19
    273c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    273e:	82 2f       	mov	r24, r18
    2740:	86 95       	lsr	r24
    2742:	20 fd       	sbrc	r18, 0
    2744:	02 c0       	rjmp	.+4      	; 0x274a <__vector_126+0x6e>
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	01 c0       	rjmp	.+2      	; 0x274c <__vector_126+0x70>
    274a:	90 e8       	ldi	r25, 0x80	; 128
    274c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    274e:	e8 2f       	mov	r30, r24
    2750:	ef 70       	andi	r30, 0x0F	; 15
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	ee 0f       	add	r30, r30
    2756:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2758:	28 2f       	mov	r18, r24
    275a:	08 2e       	mov	r0, r24
    275c:	00 0c       	add	r0, r0
    275e:	33 0b       	sbc	r19, r19
    2760:	22 27       	eor	r18, r18
    2762:	33 0f       	add	r19, r19
    2764:	22 1f       	adc	r18, r18
    2766:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2768:	e2 0f       	add	r30, r18
    276a:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    276c:	df 01       	movw	r26, r30
    276e:	aa 0f       	add	r26, r26
    2770:	bb 1f       	adc	r27, r27
    2772:	aa 0f       	add	r26, r26
    2774:	bb 1f       	adc	r27, r27
    2776:	aa 0f       	add	r26, r26
    2778:	bb 1f       	adc	r27, r27
    277a:	a4 5e       	subi	r26, 0xE4	; 228
    277c:	bd 4d       	sbci	r27, 0xDD	; 221
    277e:	9c 91       	ld	r25, X
    2780:	95 ff       	sbrs	r25, 5
    2782:	81 c0       	rjmp	.+258    	; 0x2886 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2784:	fd 01       	movw	r30, r26
    2786:	00 e2       	ldi	r16, 0x20	; 32
    2788:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    278a:	81 11       	cpse	r24, r1
    278c:	77 c0       	rjmp	.+238    	; 0x287c <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    278e:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udd_ep_control_state>
    2792:	84 30       	cpi	r24, 0x04	; 4
    2794:	19 f4       	brne	.+6      	; 0x279c <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2796:	a4 d9       	rcall	.-3256   	; 0x1ae0 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2798:	60 d9       	rcall	.-3392   	; 0x1a5a <udd_ctrl_init>
    279a:	75 c0       	rjmp	.+234    	; 0x2886 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    279c:	00 91 1e 22 	lds	r16, 0x221E	; 0x80221e <udd_sram+0x12>
    27a0:	10 91 1f 22 	lds	r17, 0x221F	; 0x80221f <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    27a4:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0xa>
    27a8:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0xb>
    27ac:	c0 91 07 22 	lds	r28, 0x2207	; 0x802207 <udd_ctrl_payload_nb_trans>
    27b0:	d0 91 08 22 	lds	r29, 0x2208	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    27b4:	9e 01       	movw	r18, r28
    27b6:	20 0f       	add	r18, r16
    27b8:	31 1f       	adc	r19, r17
    27ba:	82 17       	cp	r24, r18
    27bc:	93 07       	cpc	r25, r19
    27be:	18 f4       	brcc	.+6      	; 0x27c6 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    27c0:	8c 01       	movw	r16, r24
    27c2:	0c 1b       	sub	r16, r28
    27c4:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    27c6:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <udd_g_ctrlreq+0x8>
    27ca:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <udd_g_ctrlreq+0x9>
    27ce:	a8 01       	movw	r20, r16
    27d0:	67 ec       	ldi	r22, 0xC7	; 199
    27d2:	71 e2       	ldi	r23, 0x21	; 33
    27d4:	8c 0f       	add	r24, r28
    27d6:	9d 1f       	adc	r25, r29
    27d8:	85 d0       	rcall	.+266    	; 0x28e4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    27da:	c0 0f       	add	r28, r16
    27dc:	d1 1f       	adc	r29, r17
    27de:	c0 93 07 22 	sts	0x2207, r28	; 0x802207 <udd_ctrl_payload_nb_trans>
    27e2:	d0 93 08 22 	sts	0x2208, r29	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    27e6:	00 34       	cpi	r16, 0x40	; 64
    27e8:	11 05       	cpc	r17, r1
    27ea:	69 f4       	brne	.+26     	; 0x2806 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    27ec:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    27f0:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    27f4:	8c 0f       	add	r24, r28
    27f6:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    27f8:	20 91 70 24 	lds	r18, 0x2470	; 0x802470 <udd_g_ctrlreq+0x6>
    27fc:	30 91 71 24 	lds	r19, 0x2471	; 0x802471 <udd_g_ctrlreq+0x7>
    2800:	82 17       	cp	r24, r18
    2802:	93 07       	cpc	r25, r19
    2804:	80 f0       	brcs	.+32     	; 0x2826 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2806:	ea e6       	ldi	r30, 0x6A	; 106
    2808:	f4 e2       	ldi	r31, 0x24	; 36
    280a:	c2 87       	std	Z+10, r28	; 0x0a
    280c:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    280e:	06 84       	ldd	r0, Z+14	; 0x0e
    2810:	f7 85       	ldd	r31, Z+15	; 0x0f
    2812:	e0 2d       	mov	r30, r0
    2814:	30 97       	sbiw	r30, 0x00	; 0
    2816:	29 f0       	breq	.+10     	; 0x2822 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2818:	09 95       	icall
    281a:	81 11       	cpse	r24, r1
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    281e:	44 d9       	rcall	.-3448   	; 0x1aa8 <udd_ctrl_stall_data>
    2820:	32 c0       	rjmp	.+100    	; 0x2886 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2822:	50 d9       	rcall	.-3424   	; 0x1ac4 <udd_ctrl_send_zlp_in>
    2824:	30 c0       	rjmp	.+96     	; 0x2886 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2826:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_g_ctrlreq+0xa>
    282a:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_g_ctrlreq+0xb>
    282e:	c8 17       	cp	r28, r24
    2830:	d9 07       	cpc	r29, r25
    2832:	f9 f4       	brne	.+62     	; 0x2872 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2834:	e0 91 78 24 	lds	r30, 0x2478	; 0x802478 <udd_g_ctrlreq+0xe>
    2838:	f0 91 79 24 	lds	r31, 0x2479	; 0x802479 <udd_g_ctrlreq+0xf>
    283c:	30 97       	sbiw	r30, 0x00	; 0
    283e:	11 f4       	brne	.+4      	; 0x2844 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2840:	33 d9       	rcall	.-3482   	; 0x1aa8 <udd_ctrl_stall_data>
    2842:	21 c0       	rjmp	.+66     	; 0x2886 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2844:	09 95       	icall
    2846:	81 11       	cpse	r24, r1
    2848:	02 c0       	rjmp	.+4      	; 0x284e <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    284a:	2e d9       	rcall	.-3492   	; 0x1aa8 <udd_ctrl_stall_data>
    284c:	1c c0       	rjmp	.+56     	; 0x2886 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    284e:	20 91 09 22 	lds	r18, 0x2209	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    2852:	30 91 0a 22 	lds	r19, 0x220A	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
    2856:	80 91 07 22 	lds	r24, 0x2207	; 0x802207 <udd_ctrl_payload_nb_trans>
    285a:	90 91 08 22 	lds	r25, 0x2208	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
    285e:	82 0f       	add	r24, r18
    2860:	93 1f       	adc	r25, r19
    2862:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <udd_ctrl_prev_payload_nb_trans>
    2866:	90 93 0a 22 	sts	0x220A, r25	; 0x80220a <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    286a:	10 92 07 22 	sts	0x2207, r1	; 0x802207 <udd_ctrl_payload_nb_trans>
    286e:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2872:	ec e1       	ldi	r30, 0x1C	; 28
    2874:	f2 e2       	ldi	r31, 0x22	; 34
    2876:	02 e0       	ldi	r16, 0x02	; 2
    2878:	06 93       	lac	Z, r16
    287a:	05 c0       	rjmp	.+10     	; 0x2886 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    287c:	80 38       	cpi	r24, 0x80	; 128
    287e:	11 f4       	brne	.+4      	; 0x2884 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2880:	37 d9       	rcall	.-3474   	; 0x1af0 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2884:	51 da       	rcall	.-2910   	; 0x1d28 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2886:	ff 91       	pop	r31
    2888:	ef 91       	pop	r30
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	bf 91       	pop	r27
    2890:	af 91       	pop	r26
    2892:	9f 91       	pop	r25
    2894:	8f 91       	pop	r24
    2896:	7f 91       	pop	r23
    2898:	6f 91       	pop	r22
    289a:	5f 91       	pop	r21
    289c:	4f 91       	pop	r20
    289e:	3f 91       	pop	r19
    28a0:	2f 91       	pop	r18
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	0f 90       	pop	r0
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	0f 90       	pop	r0
    28ac:	1f 90       	pop	r1
    28ae:	18 95       	reti

000028b0 <__udivmodhi4>:
    28b0:	aa 1b       	sub	r26, r26
    28b2:	bb 1b       	sub	r27, r27
    28b4:	51 e1       	ldi	r21, 0x11	; 17
    28b6:	07 c0       	rjmp	.+14     	; 0x28c6 <__udivmodhi4_ep>

000028b8 <__udivmodhi4_loop>:
    28b8:	aa 1f       	adc	r26, r26
    28ba:	bb 1f       	adc	r27, r27
    28bc:	a6 17       	cp	r26, r22
    28be:	b7 07       	cpc	r27, r23
    28c0:	10 f0       	brcs	.+4      	; 0x28c6 <__udivmodhi4_ep>
    28c2:	a6 1b       	sub	r26, r22
    28c4:	b7 0b       	sbc	r27, r23

000028c6 <__udivmodhi4_ep>:
    28c6:	88 1f       	adc	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	5a 95       	dec	r21
    28cc:	a9 f7       	brne	.-22     	; 0x28b8 <__udivmodhi4_loop>
    28ce:	80 95       	com	r24
    28d0:	90 95       	com	r25
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	08 95       	ret

000028d8 <__tablejump2__>:
    28d8:	ee 0f       	add	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	05 90       	lpm	r0, Z+
    28de:	f4 91       	lpm	r31, Z
    28e0:	e0 2d       	mov	r30, r0
    28e2:	09 94       	ijmp

000028e4 <memcpy>:
    28e4:	fb 01       	movw	r30, r22
    28e6:	dc 01       	movw	r26, r24
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <memcpy+0xa>
    28ea:	01 90       	ld	r0, Z+
    28ec:	0d 92       	st	X+, r0
    28ee:	41 50       	subi	r20, 0x01	; 1
    28f0:	50 40       	sbci	r21, 0x00	; 0
    28f2:	d8 f7       	brcc	.-10     	; 0x28ea <memcpy+0x6>
    28f4:	08 95       	ret

000028f6 <_exit>:
    28f6:	f8 94       	cli

000028f8 <__stop_program>:
    28f8:	ff cf       	rjmp	.-2      	; 0x28f8 <__stop_program>
